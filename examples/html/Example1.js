// The Module object: Our interface to the outside world. We import
// and export values on it, and do the work to get that through
// closure compiler if necessary. There are various ways Module can be used:
// 1. Not defined. We create it here
// 2. A function parameter, function(Module) { ..generated code.. }
// 3. pre-run appended it, var Module = {}; ..generated code..
// 4. External script tag defines var Module.
// We need to do an eval in order to handle the closure compiler
// case, where this code here is minified but Module was defined
// elsewhere (e.g. case 4 above). We also need to check if Module
// already exists (e.g. case 3 above).
// Note that if you want to run closure, and also to use Module
// after the generated code, you will need to define   var Module = {};
// before the code. Then that object will be used in the code, and you
// can continue to use Module afterwards as well.
var Module;
if (!Module) Module = (typeof Module !== 'undefined' ? Module : null) || {};

// Sometimes an existing Module object exists with properties
// meant to overwrite the default module functionality. Here
// we collect those properties and reapply _after_ we configure
// the current environment's defaults to avoid having to be so
// defensive during initialization.
var moduleOverrides = {};
for (var key in Module) {
  if (Module.hasOwnProperty(key)) {
    moduleOverrides[key] = Module[key];
  }
}

// The environment setup code below is customized to use Module.
// *** Environment setup code ***
var ENVIRONMENT_IS_NODE = typeof process === 'object' && typeof require === 'function';
var ENVIRONMENT_IS_WEB = typeof window === 'object';
var ENVIRONMENT_IS_WORKER = typeof importScripts === 'function';
var ENVIRONMENT_IS_SHELL = !ENVIRONMENT_IS_WEB && !ENVIRONMENT_IS_NODE && !ENVIRONMENT_IS_WORKER;

if (ENVIRONMENT_IS_NODE) {
  // Expose functionality in the same simple way that the shells work
  // Note that we pollute the global namespace here, otherwise we break in node
  if (!Module['print']) Module['print'] = function print(x) {
    process['stdout'].write(x + '\n');
  };
  if (!Module['printErr']) Module['printErr'] = function printErr(x) {
    process['stderr'].write(x + '\n');
  };

  var nodeFS = require('fs');
  var nodePath = require('path');

  Module['read'] = function read(filename, binary) {
    filename = nodePath['normalize'](filename);
    var ret = nodeFS['readFileSync'](filename);
    // The path is absolute if the normalized version is the same as the resolved.
    if (!ret && filename != nodePath['resolve'](filename)) {
      filename = path.join(__dirname, '..', 'src', filename);
      ret = nodeFS['readFileSync'](filename);
    }
    if (ret && !binary) ret = ret.toString();
    return ret;
  };

  Module['readBinary'] = function readBinary(filename) { return Module['read'](filename, true) };

  Module['load'] = function load(f) {
    globalEval(read(f));
  };

  Module['thisProgram'] = process['argv'][1].replace(/\\/g, '/');
  Module['arguments'] = process['argv'].slice(2);

  if (typeof module !== 'undefined') {
    module['exports'] = Module;
  }

  process['on']('uncaughtException', function(ex) {
    // suppress ExitStatus exceptions from showing an error
    if (!(ex instanceof ExitStatus)) {
      throw ex;
    }
  });
}
else if (ENVIRONMENT_IS_SHELL) {
  if (!Module['print']) Module['print'] = print;
  if (typeof printErr != 'undefined') Module['printErr'] = printErr; // not present in v8 or older sm

  if (typeof read != 'undefined') {
    Module['read'] = read;
  } else {
    Module['read'] = function read() { throw 'no read() available (jsc?)' };
  }

  Module['readBinary'] = function readBinary(f) {
    if (typeof readbuffer === 'function') {
      return new Uint8Array(readbuffer(f));
    }
    var data = read(f, 'binary');
    assert(typeof data === 'object');
    return data;
  };

  if (typeof scriptArgs != 'undefined') {
    Module['arguments'] = scriptArgs;
  } else if (typeof arguments != 'undefined') {
    Module['arguments'] = arguments;
  }

  this['Module'] = Module;

}
else if (ENVIRONMENT_IS_WEB || ENVIRONMENT_IS_WORKER) {
  Module['read'] = function read(url) {
    var xhr = new XMLHttpRequest();
    xhr.open('GET', url, false);
    xhr.send(null);
    return xhr.responseText;
  };

  if (typeof arguments != 'undefined') {
    Module['arguments'] = arguments;
  }

  if (typeof console !== 'undefined') {
    if (!Module['print']) Module['print'] = function print(x) {
      console.log(x);
    };
    if (!Module['printErr']) Module['printErr'] = function printErr(x) {
      console.log(x);
    };
  } else {
    // Probably a worker, and without console.log. We can do very little here...
    var TRY_USE_DUMP = false;
    if (!Module['print']) Module['print'] = (TRY_USE_DUMP && (typeof(dump) !== "undefined") ? (function(x) {
      dump(x);
    }) : (function(x) {
      // self.postMessage(x); // enable this if you want stdout to be sent as messages
    }));
  }

  if (ENVIRONMENT_IS_WEB) {
    window['Module'] = Module;
  } else {
    Module['load'] = importScripts;
  }
}
else {
  // Unreachable because SHELL is dependant on the others
  throw 'Unknown runtime environment. Where are we?';
}

function globalEval(x) {
  eval.call(null, x);
}
if (!Module['load'] && Module['read']) {
  Module['load'] = function load(f) {
    globalEval(Module['read'](f));
  };
}
if (!Module['print']) {
  Module['print'] = function(){};
}
if (!Module['printErr']) {
  Module['printErr'] = Module['print'];
}
if (!Module['arguments']) {
  Module['arguments'] = [];
}
if (!Module['thisProgram']) {
  Module['thisProgram'] = './this.program';
}

// *** Environment setup code ***

// Closure helpers
Module.print = Module['print'];
Module.printErr = Module['printErr'];

// Callbacks
Module['preRun'] = [];
Module['postRun'] = [];

// Merge back in the overrides
for (var key in moduleOverrides) {
  if (moduleOverrides.hasOwnProperty(key)) {
    Module[key] = moduleOverrides[key];
  }
}



// === Preamble library stuff ===

// Documentation for the public APIs defined in this file must be updated in: 
//    site/source/docs/api_reference/preamble.js.rst
// A prebuilt local version of the documentation is available at: 
//    site/build/text/docs/api_reference/preamble.js.txt
// You can also build docs locally as HTML or other formats in site/
// An online HTML version (which may be of a different version of Emscripten)
//    is up at http://kripken.github.io/emscripten-site/docs/api_reference/preamble.js.html

//========================================
// Runtime code shared with compiler
//========================================

var Runtime = {
  setTempRet0: function (value) {
    tempRet0 = value;
  },
  getTempRet0: function () {
    return tempRet0;
  },
  stackSave: function () {
    return STACKTOP;
  },
  stackRestore: function (stackTop) {
    STACKTOP = stackTop;
  },
  getNativeTypeSize: function (type) {
    switch (type) {
      case 'i1': case 'i8': return 1;
      case 'i16': return 2;
      case 'i32': return 4;
      case 'i64': return 8;
      case 'float': return 4;
      case 'double': return 8;
      default: {
        if (type[type.length-1] === '*') {
          return Runtime.QUANTUM_SIZE; // A pointer
        } else if (type[0] === 'i') {
          var bits = parseInt(type.substr(1));
          assert(bits % 8 === 0);
          return bits/8;
        } else {
          return 0;
        }
      }
    }
  },
  getNativeFieldSize: function (type) {
    return Math.max(Runtime.getNativeTypeSize(type), Runtime.QUANTUM_SIZE);
  },
  STACK_ALIGN: 16,
  getAlignSize: function (type, size, vararg) {
    // we align i64s and doubles on 64-bit boundaries, unlike x86
    if (!vararg && (type == 'i64' || type == 'double')) return 8;
    if (!type) return Math.min(size, 8); // align structures internally to 64 bits
    return Math.min(size || (type ? Runtime.getNativeFieldSize(type) : 0), Runtime.QUANTUM_SIZE);
  },
  dynCall: function (sig, ptr, args) {
    if (args && args.length) {
      assert(args.length == sig.length-1);
      if (!args.splice) args = Array.prototype.slice.call(args);
      args.splice(0, 0, ptr);
      assert(('dynCall_' + sig) in Module, 'bad function pointer type - no table for sig \'' + sig + '\'');
      return Module['dynCall_' + sig].apply(null, args);
    } else {
      assert(sig.length == 1);
      assert(('dynCall_' + sig) in Module, 'bad function pointer type - no table for sig \'' + sig + '\'');
      return Module['dynCall_' + sig].call(null, ptr);
    }
  },
  functionPointers: [],
  addFunction: function (func) {
    for (var i = 0; i < Runtime.functionPointers.length; i++) {
      if (!Runtime.functionPointers[i]) {
        Runtime.functionPointers[i] = func;
        return 2*(1 + i);
      }
    }
    throw 'Finished up all reserved function pointers. Use a higher value for RESERVED_FUNCTION_POINTERS.';
  },
  removeFunction: function (index) {
    Runtime.functionPointers[(index-2)/2] = null;
  },
  getAsmConst: function (code, numArgs) {
    // code is a constant string on the heap, so we can cache these
    if (!Runtime.asmConstCache) Runtime.asmConstCache = {};
    var func = Runtime.asmConstCache[code];
    if (func) return func;
    var args = [];
    for (var i = 0; i < numArgs; i++) {
      args.push(String.fromCharCode(36) + i); // $0, $1 etc
    }
    var source = Pointer_stringify(code);
    if (source[0] === '"') {
      // tolerate EM_ASM("..code..") even though EM_ASM(..code..) is correct
      if (source.indexOf('"', 1) === source.length-1) {
        source = source.substr(1, source.length-2);
      } else {
        // something invalid happened, e.g. EM_ASM("..code($0)..", input)
        abort('invalid EM_ASM input |' + source + '|. Please use EM_ASM(..code..) (no quotes) or EM_ASM({ ..code($0).. }, input) (to input values)');
      }
    }
    try {
      // Module is the only 'upvar', which we provide directly. We also provide FS for legacy support.
      var evalled = eval('(function(Module, FS) { return function(' + args.join(',') + '){ ' + source + ' } })')(Module, typeof FS !== 'undefined' ? FS : null);
    } catch(e) {
      Module.printErr('error in executing inline EM_ASM code: ' + e + ' on: \n\n' + source + '\n\nwith args |' + args + '| (make sure to use the right one out of EM_ASM, EM_ASM_ARGS, etc.)');
      throw e;
    }
    return Runtime.asmConstCache[code] = evalled;
  },
  warnOnce: function (text) {
    if (!Runtime.warnOnce.shown) Runtime.warnOnce.shown = {};
    if (!Runtime.warnOnce.shown[text]) {
      Runtime.warnOnce.shown[text] = 1;
      Module.printErr(text);
    }
  },
  funcWrappers: {},
  getFuncWrapper: function (func, sig) {
    assert(sig);
    if (!Runtime.funcWrappers[sig]) {
      Runtime.funcWrappers[sig] = {};
    }
    var sigCache = Runtime.funcWrappers[sig];
    if (!sigCache[func]) {
      sigCache[func] = function dynCall_wrapper() {
        return Runtime.dynCall(sig, func, arguments);
      };
    }
    return sigCache[func];
  },
  UTF8Processor: function () {
    var buffer = [];
    var needed = 0;
    this.processCChar = function (code) {
      code = code & 0xFF;

      if (buffer.length == 0) {
        if ((code & 0x80) == 0x00) {        // 0xxxxxxx
          return String.fromCharCode(code);
        }
        buffer.push(code);
        if ((code & 0xE0) == 0xC0) {        // 110xxxxx
          needed = 1;
        } else if ((code & 0xF0) == 0xE0) { // 1110xxxx
          needed = 2;
        } else {                            // 11110xxx
          needed = 3;
        }
        return '';
      }

      if (needed) {
        buffer.push(code);
        needed--;
        if (needed > 0) return '';
      }

      var c1 = buffer[0];
      var c2 = buffer[1];
      var c3 = buffer[2];
      var c4 = buffer[3];
      var ret;
      if (buffer.length == 2) {
        ret = String.fromCharCode(((c1 & 0x1F) << 6)  | (c2 & 0x3F));
      } else if (buffer.length == 3) {
        ret = String.fromCharCode(((c1 & 0x0F) << 12) | ((c2 & 0x3F) << 6)  | (c3 & 0x3F));
      } else {
        // http://mathiasbynens.be/notes/javascript-encoding#surrogate-formulae
        var codePoint = ((c1 & 0x07) << 18) | ((c2 & 0x3F) << 12) |
                        ((c3 & 0x3F) << 6)  | (c4 & 0x3F);
        ret = String.fromCharCode(
          (((codePoint - 0x10000) / 0x400)|0) + 0xD800,
          (codePoint - 0x10000) % 0x400 + 0xDC00);
      }
      buffer.length = 0;
      return ret;
    }
    this.processJSString = function processJSString(string) {
      /* TODO: use TextEncoder when present,
        var encoder = new TextEncoder();
        encoder['encoding'] = "utf-8";
        var utf8Array = encoder['encode'](aMsg.data);
      */
      string = unescape(encodeURIComponent(string));
      var ret = [];
      for (var i = 0; i < string.length; i++) {
        ret.push(string.charCodeAt(i));
      }
      return ret;
    }
  },
  getCompilerSetting: function (name) {
    throw 'You must build with -s RETAIN_COMPILER_SETTINGS=1 for Runtime.getCompilerSetting or emscripten_get_compiler_setting to work';
  },
  stackAlloc: function (size) { var ret = STACKTOP;STACKTOP = (STACKTOP + size)|0;STACKTOP = (((STACKTOP)+15)&-16);(assert((((STACKTOP|0) < (STACK_MAX|0))|0))|0); return ret; },
  staticAlloc: function (size) { var ret = STATICTOP;STATICTOP = (STATICTOP + (assert(!staticSealed),size))|0;STATICTOP = (((STATICTOP)+15)&-16); return ret; },
  dynamicAlloc: function (size) { var ret = DYNAMICTOP;DYNAMICTOP = (DYNAMICTOP + (assert(DYNAMICTOP > 0),size))|0;DYNAMICTOP = (((DYNAMICTOP)+15)&-16); if (DYNAMICTOP >= TOTAL_MEMORY) enlargeMemory();; return ret; },
  alignMemory: function (size,quantum) { var ret = size = Math.ceil((size)/(quantum ? quantum : 16))*(quantum ? quantum : 16); return ret; },
  makeBigInt: function (low,high,unsigned) { var ret = (unsigned ? ((+((low>>>0)))+((+((high>>>0)))*4294967296.0)) : ((+((low>>>0)))+((+((high|0)))*4294967296.0))); return ret; },
  GLOBAL_BASE: 8,
  QUANTUM_SIZE: 4,
  __dummy__: 0
}


Module['Runtime'] = Runtime;









//========================================
// Runtime essentials
//========================================

var __THREW__ = 0; // Used in checking for thrown exceptions.

var ABORT = false; // whether we are quitting the application. no code should run after this. set in exit() and abort()
var EXITSTATUS = 0;

var undef = 0;
// tempInt is used for 32-bit signed values or smaller. tempBigInt is used
// for 32-bit unsigned values or more than 32 bits. TODO: audit all uses of tempInt
var tempValue, tempInt, tempBigInt, tempInt2, tempBigInt2, tempPair, tempBigIntI, tempBigIntR, tempBigIntS, tempBigIntP, tempBigIntD, tempDouble, tempFloat;
var tempI64, tempI64b;
var tempRet0, tempRet1, tempRet2, tempRet3, tempRet4, tempRet5, tempRet6, tempRet7, tempRet8, tempRet9;

function assert(condition, text) {
  if (!condition) {
    abort('Assertion failed: ' + text);
  }
}

var globalScope = this;

// Returns the C function with a specified identifier (for C++, you need to do manual name mangling)
function getCFunc(ident) {
  var func = Module['_' + ident]; // closure exported function
  if (!func) {
    try {
      func = eval('_' + ident); // explicit lookup
    } catch(e) {}
  }
  assert(func, 'Cannot call unknown function ' + ident + ' (perhaps LLVM optimizations or closure removed it?)');
  return func;
}

var cwrap, ccall;
(function(){
  var stack = 0;
  var JSfuncs = {
    'stackSave' : function() {
      stack = Runtime.stackSave();
    },
    'stackRestore' : function() {
      Runtime.stackRestore(stack);
    },
    // type conversion from js to c
    'arrayToC' : function(arr) {
      var ret = Runtime.stackAlloc(arr.length);
      writeArrayToMemory(arr, ret);
      return ret;
    },
    'stringToC' : function(str) {
      var ret = 0;
      if (str !== null && str !== undefined && str !== 0) { // null string
        // at most 4 bytes per UTF-8 code point, +1 for the trailing '\0'
        ret = Runtime.stackAlloc((str.length << 2) + 1);
        writeStringToMemory(str, ret);
      }
      return ret;
    }
  };
  // For fast lookup of conversion functions
  var toC = {'string' : JSfuncs['stringToC'], 'array' : JSfuncs['arrayToC']};

  // C calling interface. 
  ccall = function ccallFunc(ident, returnType, argTypes, args) {
    var func = getCFunc(ident);
    var cArgs = [];
    assert(returnType !== 'array', 'Return type should not be "array".');
    if (args) {
      for (var i = 0; i < args.length; i++) {
        var converter = toC[argTypes[i]];
        if (converter) {
          if (stack === 0) stack = Runtime.stackSave();
          cArgs[i] = converter(args[i]);
        } else {
          cArgs[i] = args[i];
        }
      }
    }
    var ret = func.apply(null, cArgs);
    if (returnType === 'string') ret = Pointer_stringify(ret);
    if (stack !== 0) JSfuncs['stackRestore']();
    return ret;
  }

  var sourceRegex = /^function\s*\(([^)]*)\)\s*{\s*([^*]*?)[\s;]*(?:return\s*(.*?)[;\s]*)?}$/;
  function parseJSFunc(jsfunc) {
    // Match the body and the return value of a javascript function source
    var parsed = jsfunc.toString().match(sourceRegex).slice(1);
    return {arguments : parsed[0], body : parsed[1], returnValue: parsed[2]}
  }
  var JSsource = {};
  for (var fun in JSfuncs) {
    if (JSfuncs.hasOwnProperty(fun)) {
      // Elements of toCsource are arrays of three items:
      // the code, and the return value
      JSsource[fun] = parseJSFunc(JSfuncs[fun]);
    }
  }

  
  cwrap = function cwrap(ident, returnType, argTypes) {
    argTypes = argTypes || [];
    var cfunc = getCFunc(ident);
    // When the function takes numbers and returns a number, we can just return
    // the original function
    var numericArgs = argTypes.every(function(type){ return type === 'number'});
    var numericRet = (returnType !== 'string');
    if ( numericRet && numericArgs) {
      return cfunc;
    }
    // Creation of the arguments list (["$1","$2",...,"$nargs"])
    var argNames = argTypes.map(function(x,i){return '$'+i});
    var funcstr = "(function(" + argNames.join(',') + ") {";
    var nargs = argTypes.length;
    if (!numericArgs) {
      // Generate the code needed to convert the arguments from javascript
      // values to pointers
      funcstr += JSsource['stackSave'].body + ';';
      for (var i = 0; i < nargs; i++) {
        var arg = argNames[i], type = argTypes[i];
        if (type === 'number') continue;
        var convertCode = JSsource[type + 'ToC']; // [code, return]
        funcstr += 'var ' + convertCode.arguments + ' = ' + arg + ';';
        funcstr += convertCode.body + ';';
        funcstr += arg + '=' + convertCode.returnValue + ';';
      }
    }

    // When the code is compressed, the name of cfunc is not literally 'cfunc' anymore
    var cfuncname = parseJSFunc(function(){return cfunc}).returnValue;
    // Call the function
    funcstr += 'var ret = ' + cfuncname + '(' + argNames.join(',') + ');';
    if (!numericRet) { // Return type can only by 'string' or 'number'
      // Convert the result to a string
      var strgfy = parseJSFunc(function(){return Pointer_stringify}).returnValue;
      funcstr += 'ret = ' + strgfy + '(ret);';
    }
    if (!numericArgs) {
      // If we had a stack, restore it
      funcstr += JSsource['stackRestore'].body + ';';
    }
    funcstr += 'return ret})';
    return eval(funcstr);
  };
})();
Module["cwrap"] = cwrap;
Module["ccall"] = ccall;


function setValue(ptr, value, type, noSafe) {
  type = type || 'i8';
  if (type.charAt(type.length-1) === '*') type = 'i32'; // pointers are 32-bit
    switch(type) {
      case 'i1': HEAP8[((ptr)>>0)]=value; break;
      case 'i8': HEAP8[((ptr)>>0)]=value; break;
      case 'i16': HEAP16[((ptr)>>1)]=value; break;
      case 'i32': HEAP32[((ptr)>>2)]=value; break;
      case 'i64': (tempI64 = [value>>>0,(tempDouble=value,(+(Math_abs(tempDouble))) >= 1.0 ? (tempDouble > 0.0 ? ((Math_min((+(Math_floor((tempDouble)/4294967296.0))), 4294967295.0))|0)>>>0 : (~~((+(Math_ceil((tempDouble - +(((~~(tempDouble)))>>>0))/4294967296.0)))))>>>0) : 0)],HEAP32[((ptr)>>2)]=tempI64[0],HEAP32[(((ptr)+(4))>>2)]=tempI64[1]); break;
      case 'float': HEAPF32[((ptr)>>2)]=value; break;
      case 'double': HEAPF64[((ptr)>>3)]=value; break;
      default: abort('invalid type for setValue: ' + type);
    }
}
Module['setValue'] = setValue;


function getValue(ptr, type, noSafe) {
  type = type || 'i8';
  if (type.charAt(type.length-1) === '*') type = 'i32'; // pointers are 32-bit
    switch(type) {
      case 'i1': return HEAP8[((ptr)>>0)];
      case 'i8': return HEAP8[((ptr)>>0)];
      case 'i16': return HEAP16[((ptr)>>1)];
      case 'i32': return HEAP32[((ptr)>>2)];
      case 'i64': return HEAP32[((ptr)>>2)];
      case 'float': return HEAPF32[((ptr)>>2)];
      case 'double': return HEAPF64[((ptr)>>3)];
      default: abort('invalid type for setValue: ' + type);
    }
  return null;
}
Module['getValue'] = getValue;

var ALLOC_NORMAL = 0; // Tries to use _malloc()
var ALLOC_STACK = 1; // Lives for the duration of the current function call
var ALLOC_STATIC = 2; // Cannot be freed
var ALLOC_DYNAMIC = 3; // Cannot be freed except through sbrk
var ALLOC_NONE = 4; // Do not allocate
Module['ALLOC_NORMAL'] = ALLOC_NORMAL;
Module['ALLOC_STACK'] = ALLOC_STACK;
Module['ALLOC_STATIC'] = ALLOC_STATIC;
Module['ALLOC_DYNAMIC'] = ALLOC_DYNAMIC;
Module['ALLOC_NONE'] = ALLOC_NONE;

// allocate(): This is for internal use. You can use it yourself as well, but the interface
//             is a little tricky (see docs right below). The reason is that it is optimized
//             for multiple syntaxes to save space in generated code. So you should
//             normally not use allocate(), and instead allocate memory using _malloc(),
//             initialize it with setValue(), and so forth.
// @slab: An array of data, or a number. If a number, then the size of the block to allocate,
//        in *bytes* (note that this is sometimes confusing: the next parameter does not
//        affect this!)
// @types: Either an array of types, one for each byte (or 0 if no type at that position),
//         or a single type which is used for the entire block. This only matters if there
//         is initial data - if @slab is a number, then this does not matter at all and is
//         ignored.
// @allocator: How to allocate memory, see ALLOC_*
function allocate(slab, types, allocator, ptr) {
  var zeroinit, size;
  if (typeof slab === 'number') {
    zeroinit = true;
    size = slab;
  } else {
    zeroinit = false;
    size = slab.length;
  }

  var singleType = typeof types === 'string' ? types : null;

  var ret;
  if (allocator == ALLOC_NONE) {
    ret = ptr;
  } else {
    ret = [_malloc, Runtime.stackAlloc, Runtime.staticAlloc, Runtime.dynamicAlloc][allocator === undefined ? ALLOC_STATIC : allocator](Math.max(size, singleType ? 1 : types.length));
  }

  if (zeroinit) {
    var ptr = ret, stop;
    assert((ret & 3) == 0);
    stop = ret + (size & ~3);
    for (; ptr < stop; ptr += 4) {
      HEAP32[((ptr)>>2)]=0;
    }
    stop = ret + size;
    while (ptr < stop) {
      HEAP8[((ptr++)>>0)]=0;
    }
    return ret;
  }

  if (singleType === 'i8') {
    if (slab.subarray || slab.slice) {
      HEAPU8.set(slab, ret);
    } else {
      HEAPU8.set(new Uint8Array(slab), ret);
    }
    return ret;
  }

  var i = 0, type, typeSize, previousType;
  while (i < size) {
    var curr = slab[i];

    if (typeof curr === 'function') {
      curr = Runtime.getFunctionIndex(curr);
    }

    type = singleType || types[i];
    if (type === 0) {
      i++;
      continue;
    }
    assert(type, 'Must know what type to store in allocate!');

    if (type == 'i64') type = 'i32'; // special case: we have one i32 here, and one i32 later

    setValue(ret+i, curr, type);

    // no need to look up size unless type changes, so cache it
    if (previousType !== type) {
      typeSize = Runtime.getNativeTypeSize(type);
      previousType = type;
    }
    i += typeSize;
  }

  return ret;
}
Module['allocate'] = allocate;

function Pointer_stringify(ptr, /* optional */ length) {
  // TODO: use TextDecoder
  // Find the length, and check for UTF while doing so
  var hasUtf = false;
  var t;
  var i = 0;
  while (1) {
    assert(ptr + i < TOTAL_MEMORY);
    t = HEAPU8[(((ptr)+(i))>>0)];
    if (t >= 128) hasUtf = true;
    else if (t == 0 && !length) break;
    i++;
    if (length && i == length) break;
  }
  if (!length) length = i;

  var ret = '';

  if (!hasUtf) {
    var MAX_CHUNK = 1024; // split up into chunks, because .apply on a huge string can overflow the stack
    var curr;
    while (length > 0) {
      curr = String.fromCharCode.apply(String, HEAPU8.subarray(ptr, ptr + Math.min(length, MAX_CHUNK)));
      ret = ret ? ret + curr : curr;
      ptr += MAX_CHUNK;
      length -= MAX_CHUNK;
    }
    return ret;
  }

  var utf8 = new Runtime.UTF8Processor();
  for (i = 0; i < length; i++) {
    assert(ptr + i < TOTAL_MEMORY);
    t = HEAPU8[(((ptr)+(i))>>0)];
    ret += utf8.processCChar(t);
  }
  return ret;
}
Module['Pointer_stringify'] = Pointer_stringify;

function UTF16ToString(ptr) {
  var i = 0;

  var str = '';
  while (1) {
    var codeUnit = HEAP16[(((ptr)+(i*2))>>1)];
    if (codeUnit == 0)
      return str;
    ++i;
    // fromCharCode constructs a character from a UTF-16 code unit, so we can pass the UTF16 string right through.
    str += String.fromCharCode(codeUnit);
  }
}
Module['UTF16ToString'] = UTF16ToString;


function stringToUTF16(str, outPtr) {
  for(var i = 0; i < str.length; ++i) {
    // charCodeAt returns a UTF-16 encoded code unit, so it can be directly written to the HEAP.
    var codeUnit = str.charCodeAt(i); // possibly a lead surrogate
    HEAP16[(((outPtr)+(i*2))>>1)]=codeUnit;
  }
  // Null-terminate the pointer to the HEAP.
  HEAP16[(((outPtr)+(str.length*2))>>1)]=0;
}
Module['stringToUTF16'] = stringToUTF16;


function UTF32ToString(ptr) {
  var i = 0;

  var str = '';
  while (1) {
    var utf32 = HEAP32[(((ptr)+(i*4))>>2)];
    if (utf32 == 0)
      return str;
    ++i;
    // Gotcha: fromCharCode constructs a character from a UTF-16 encoded code (pair), not from a Unicode code point! So encode the code point to UTF-16 for constructing.
    if (utf32 >= 0x10000) {
      var ch = utf32 - 0x10000;
      str += String.fromCharCode(0xD800 | (ch >> 10), 0xDC00 | (ch & 0x3FF));
    } else {
      str += String.fromCharCode(utf32);
    }
  }
}
Module['UTF32ToString'] = UTF32ToString;


function stringToUTF32(str, outPtr) {
  var iChar = 0;
  for(var iCodeUnit = 0; iCodeUnit < str.length; ++iCodeUnit) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! We must decode the string to UTF-32 to the heap.
    var codeUnit = str.charCodeAt(iCodeUnit); // possibly a lead surrogate
    if (codeUnit >= 0xD800 && codeUnit <= 0xDFFF) {
      var trailSurrogate = str.charCodeAt(++iCodeUnit);
      codeUnit = 0x10000 + ((codeUnit & 0x3FF) << 10) | (trailSurrogate & 0x3FF);
    }
    HEAP32[(((outPtr)+(iChar*4))>>2)]=codeUnit;
    ++iChar;
  }
  // Null-terminate the pointer to the HEAP.
  HEAP32[(((outPtr)+(iChar*4))>>2)]=0;
}
Module['stringToUTF32'] = stringToUTF32;

function demangle(func) {
  var hasLibcxxabi = !!Module['___cxa_demangle'];
  if (hasLibcxxabi) {
    try {
      var buf = _malloc(func.length);
      writeStringToMemory(func.substr(1), buf);
      var status = _malloc(4);
      var ret = Module['___cxa_demangle'](buf, 0, 0, status);
      if (getValue(status, 'i32') === 0 && ret) {
        return Pointer_stringify(ret);
      }
      // otherwise, libcxxabi failed, we can try ours which may return a partial result
    } catch(e) {
      // failure when using libcxxabi, we can try ours which may return a partial result
    } finally {
      if (buf) _free(buf);
      if (status) _free(status);
      if (ret) _free(ret);
    }
  }
  var i = 3;
  // params, etc.
  var basicTypes = {
    'v': 'void',
    'b': 'bool',
    'c': 'char',
    's': 'short',
    'i': 'int',
    'l': 'long',
    'f': 'float',
    'd': 'double',
    'w': 'wchar_t',
    'a': 'signed char',
    'h': 'unsigned char',
    't': 'unsigned short',
    'j': 'unsigned int',
    'm': 'unsigned long',
    'x': 'long long',
    'y': 'unsigned long long',
    'z': '...'
  };
  var subs = [];
  var first = true;
  function dump(x) {
    //return;
    if (x) Module.print(x);
    Module.print(func);
    var pre = '';
    for (var a = 0; a < i; a++) pre += ' ';
    Module.print (pre + '^');
  }
  function parseNested() {
    i++;
    if (func[i] === 'K') i++; // ignore const
    var parts = [];
    while (func[i] !== 'E') {
      if (func[i] === 'S') { // substitution
        i++;
        var next = func.indexOf('_', i);
        var num = func.substring(i, next) || 0;
        parts.push(subs[num] || '?');
        i = next+1;
        continue;
      }
      if (func[i] === 'C') { // constructor
        parts.push(parts[parts.length-1]);
        i += 2;
        continue;
      }
      var size = parseInt(func.substr(i));
      var pre = size.toString().length;
      if (!size || !pre) { i--; break; } // counter i++ below us
      var curr = func.substr(i + pre, size);
      parts.push(curr);
      subs.push(curr);
      i += pre + size;
    }
    i++; // skip E
    return parts;
  }
  function parse(rawList, limit, allowVoid) { // main parser
    limit = limit || Infinity;
    var ret = '', list = [];
    function flushList() {
      return '(' + list.join(', ') + ')';
    }
    var name;
    if (func[i] === 'N') {
      // namespaced N-E
      name = parseNested().join('::');
      limit--;
      if (limit === 0) return rawList ? [name] : name;
    } else {
      // not namespaced
      if (func[i] === 'K' || (first && func[i] === 'L')) i++; // ignore const and first 'L'
      var size = parseInt(func.substr(i));
      if (size) {
        var pre = size.toString().length;
        name = func.substr(i + pre, size);
        i += pre + size;
      }
    }
    first = false;
    if (func[i] === 'I') {
      i++;
      var iList = parse(true);
      var iRet = parse(true, 1, true);
      ret += iRet[0] + ' ' + name + '<' + iList.join(', ') + '>';
    } else {
      ret = name;
    }
    paramLoop: while (i < func.length && limit-- > 0) {
      //dump('paramLoop');
      var c = func[i++];
      if (c in basicTypes) {
        list.push(basicTypes[c]);
      } else {
        switch (c) {
          case 'P': list.push(parse(true, 1, true)[0] + '*'); break; // pointer
          case 'R': list.push(parse(true, 1, true)[0] + '&'); break; // reference
          case 'L': { // literal
            i++; // skip basic type
            var end = func.indexOf('E', i);
            var size = end - i;
            list.push(func.substr(i, size));
            i += size + 2; // size + 'EE'
            break;
          }
          case 'A': { // array
            var size = parseInt(func.substr(i));
            i += size.toString().length;
            if (func[i] !== '_') throw '?';
            i++; // skip _
            list.push(parse(true, 1, true)[0] + ' [' + size + ']');
            break;
          }
          case 'E': break paramLoop;
          default: ret += '?' + c; break paramLoop;
        }
      }
    }
    if (!allowVoid && list.length === 1 && list[0] === 'void') list = []; // avoid (void)
    if (rawList) {
      if (ret) {
        list.push(ret + '?');
      }
      return list;
    } else {
      return ret + flushList();
    }
  }
  var final = func;
  try {
    // Special-case the entry point, since its name differs from other name mangling.
    if (func == 'Object._main' || func == '_main') {
      return 'main()';
    }
    if (typeof func === 'number') func = Pointer_stringify(func);
    if (func[0] !== '_') return func;
    if (func[1] !== '_') return func; // C function
    if (func[2] !== 'Z') return func;
    switch (func[3]) {
      case 'n': return 'operator new()';
      case 'd': return 'operator delete()';
    }
    final = parse();
  } catch(e) {
    final += '?';
  }
  if (final.indexOf('?') >= 0 && !hasLibcxxabi) {
    Runtime.warnOnce('warning: a problem occurred in builtin C++ name demangling; build with  -s DEMANGLE_SUPPORT=1  to link in libcxxabi demangling');
  }
  return final;
}

function demangleAll(text) {
  return text.replace(/__Z[\w\d_]+/g, function(x) { var y = demangle(x); return x === y ? x : (x + ' [' + y + ']') });
}

function jsStackTrace() {
  var err = new Error();
  if (!err.stack) {
    // IE10+ special cases: It does have callstack info, but it is only populated if an Error object is thrown,
    // so try that as a special-case.
    try {
      throw new Error(0);
    } catch(e) {
      err = e;
    }
    if (!err.stack) {
      return '(no stack trace available)';
    }
  }
  return err.stack.toString();
}

function stackTrace() {
  return demangleAll(jsStackTrace());
}
Module['stackTrace'] = stackTrace;

// Memory management

var PAGE_SIZE = 4096;
function alignMemoryPage(x) {
  return (x+4095)&-4096;
}

var HEAP;
var HEAP8, HEAPU8, HEAP16, HEAPU16, HEAP32, HEAPU32, HEAPF32, HEAPF64;

var STATIC_BASE = 0, STATICTOP = 0, staticSealed = false; // static area
var STACK_BASE = 0, STACKTOP = 0, STACK_MAX = 0; // stack area
var DYNAMIC_BASE = 0, DYNAMICTOP = 0; // dynamic area handled by sbrk

function enlargeMemory() {
  abort('Cannot enlarge memory arrays. Either (1) compile with -s TOTAL_MEMORY=X with X higher than the current value ' + TOTAL_MEMORY + ', (2) compile with ALLOW_MEMORY_GROWTH which adjusts the size at runtime but prevents some optimizations, or (3) set Module.TOTAL_MEMORY before the program runs.');
}


var TOTAL_STACK = Module['TOTAL_STACK'] || 5242880;
var TOTAL_MEMORY = Module['TOTAL_MEMORY'] || 16777216;
var FAST_MEMORY = Module['FAST_MEMORY'] || 2097152;

var totalMemory = 64*1024;
while (totalMemory < TOTAL_MEMORY || totalMemory < 2*TOTAL_STACK) {
  if (totalMemory < 16*1024*1024) {
    totalMemory *= 2;
  } else {
    totalMemory += 16*1024*1024
  }
}
if (totalMemory !== TOTAL_MEMORY) {
  Module.printErr('increasing TOTAL_MEMORY to ' + totalMemory + ' to be more reasonable');
  TOTAL_MEMORY = totalMemory;
}

// Initialize the runtime's memory
// check for full engine support (use string 'subarray' to avoid closure compiler confusion)
assert(typeof Int32Array !== 'undefined' && typeof Float64Array !== 'undefined' && !!(new Int32Array(1)['subarray']) && !!(new Int32Array(1)['set']),
       'JS engine does not provide full typed array support');

var buffer = new ArrayBuffer(TOTAL_MEMORY);
HEAP8 = new Int8Array(buffer);
HEAP16 = new Int16Array(buffer);
HEAP32 = new Int32Array(buffer);
HEAPU8 = new Uint8Array(buffer);
HEAPU16 = new Uint16Array(buffer);
HEAPU32 = new Uint32Array(buffer);
HEAPF32 = new Float32Array(buffer);
HEAPF64 = new Float64Array(buffer);

// Endianness check (note: assumes compiler arch was little-endian)
HEAP32[0] = 255;
assert(HEAPU8[0] === 255 && HEAPU8[3] === 0, 'Typed arrays 2 must be run on a little-endian system');

Module['HEAP'] = HEAP;
Module['HEAP8'] = HEAP8;
Module['HEAP16'] = HEAP16;
Module['HEAP32'] = HEAP32;
Module['HEAPU8'] = HEAPU8;
Module['HEAPU16'] = HEAPU16;
Module['HEAPU32'] = HEAPU32;
Module['HEAPF32'] = HEAPF32;
Module['HEAPF64'] = HEAPF64;

function callRuntimeCallbacks(callbacks) {
  while(callbacks.length > 0) {
    var callback = callbacks.shift();
    if (typeof callback == 'function') {
      callback();
      continue;
    }
    var func = callback.func;
    if (typeof func === 'number') {
      if (callback.arg === undefined) {
        Runtime.dynCall('v', func);
      } else {
        Runtime.dynCall('vi', func, [callback.arg]);
      }
    } else {
      func(callback.arg === undefined ? null : callback.arg);
    }
  }
}

var __ATPRERUN__  = []; // functions called before the runtime is initialized
var __ATINIT__    = []; // functions called during startup
var __ATMAIN__    = []; // functions called when main() is to be run
var __ATEXIT__    = []; // functions called during shutdown
var __ATPOSTRUN__ = []; // functions called after the runtime has exited

var runtimeInitialized = false;
var runtimeExited = false;

function preRun() {
  // compatibility - merge in anything from Module['preRun'] at this time
  if (Module['preRun']) {
    if (typeof Module['preRun'] == 'function') Module['preRun'] = [Module['preRun']];
    while (Module['preRun'].length) {
      addOnPreRun(Module['preRun'].shift());
    }
  }
  callRuntimeCallbacks(__ATPRERUN__);
}

function ensureInitRuntime() {
  if (runtimeInitialized) return;
  runtimeInitialized = true;
  callRuntimeCallbacks(__ATINIT__);
}

function preMain() {
  callRuntimeCallbacks(__ATMAIN__);
}

function exitRuntime() {
  if (ENVIRONMENT_IS_WEB || ENVIRONMENT_IS_WORKER) {
    Module.printErr('Exiting runtime. Any attempt to access the compiled C code may fail from now. If you want to keep the runtime alive, set Module["noExitRuntime"] = true or build with -s NO_EXIT_RUNTIME=1');
  }
  callRuntimeCallbacks(__ATEXIT__);
  runtimeExited = true;
}

function postRun() {
  // compatibility - merge in anything from Module['postRun'] at this time
  if (Module['postRun']) {
    if (typeof Module['postRun'] == 'function') Module['postRun'] = [Module['postRun']];
    while (Module['postRun'].length) {
      addOnPostRun(Module['postRun'].shift());
    }
  }
  callRuntimeCallbacks(__ATPOSTRUN__);
}

function addOnPreRun(cb) {
  __ATPRERUN__.unshift(cb);
}
Module['addOnPreRun'] = Module.addOnPreRun = addOnPreRun;

function addOnInit(cb) {
  __ATINIT__.unshift(cb);
}
Module['addOnInit'] = Module.addOnInit = addOnInit;

function addOnPreMain(cb) {
  __ATMAIN__.unshift(cb);
}
Module['addOnPreMain'] = Module.addOnPreMain = addOnPreMain;

function addOnExit(cb) {
  __ATEXIT__.unshift(cb);
}
Module['addOnExit'] = Module.addOnExit = addOnExit;

function addOnPostRun(cb) {
  __ATPOSTRUN__.unshift(cb);
}
Module['addOnPostRun'] = Module.addOnPostRun = addOnPostRun;

// Tools


function intArrayFromString(stringy, dontAddNull, length /* optional */) {
  var ret = (new Runtime.UTF8Processor()).processJSString(stringy);
  if (length) {
    ret.length = length;
  }
  if (!dontAddNull) {
    ret.push(0);
  }
  return ret;
}
Module['intArrayFromString'] = intArrayFromString;

function intArrayToString(array) {
  var ret = [];
  for (var i = 0; i < array.length; i++) {
    var chr = array[i];
    if (chr > 0xFF) {
        assert(false, 'Character code ' + chr + ' (' + String.fromCharCode(chr) + ')  at offset ' + i + ' not in 0x00-0xFF.');
      chr &= 0xFF;
    }
    ret.push(String.fromCharCode(chr));
  }
  return ret.join('');
}
Module['intArrayToString'] = intArrayToString;

function writeStringToMemory(string, buffer, dontAddNull) {
  var array = intArrayFromString(string, dontAddNull);
  var i = 0;
  while (i < array.length) {
    var chr = array[i];
    HEAP8[(((buffer)+(i))>>0)]=chr;
    i = i + 1;
  }
}
Module['writeStringToMemory'] = writeStringToMemory;

function writeArrayToMemory(array, buffer) {
  for (var i = 0; i < array.length; i++) {
    HEAP8[(((buffer)+(i))>>0)]=array[i];
  }
}
Module['writeArrayToMemory'] = writeArrayToMemory;

function writeAsciiToMemory(str, buffer, dontAddNull) {
  for (var i = 0; i < str.length; i++) {
    assert(str.charCodeAt(i) === str.charCodeAt(i)&0xff);
    HEAP8[(((buffer)+(i))>>0)]=str.charCodeAt(i);
  }
  if (!dontAddNull) HEAP8[(((buffer)+(str.length))>>0)]=0;
}
Module['writeAsciiToMemory'] = writeAsciiToMemory;

function unSign(value, bits, ignore) {
  if (value >= 0) {
    return value;
  }
  return bits <= 32 ? 2*Math.abs(1 << (bits-1)) + value // Need some trickery, since if bits == 32, we are right at the limit of the bits JS uses in bitshifts
                    : Math.pow(2, bits)         + value;
}
function reSign(value, bits, ignore) {
  if (value <= 0) {
    return value;
  }
  var half = bits <= 32 ? Math.abs(1 << (bits-1)) // abs is needed if bits == 32
                        : Math.pow(2, bits-1);
  if (value >= half && (bits <= 32 || value > half)) { // for huge values, we can hit the precision limit and always get true here. so don't do that
                                                       // but, in general there is no perfect solution here. With 64-bit ints, we get rounding and errors
                                                       // TODO: In i64 mode 1, resign the two parts separately and safely
    value = -2*half + value; // Cannot bitshift half, as it may be at the limit of the bits JS uses in bitshifts
  }
  return value;
}

// check for imul support, and also for correctness ( https://bugs.webkit.org/show_bug.cgi?id=126345 )
if (!Math['imul'] || Math['imul'](0xffffffff, 5) !== -5) Math['imul'] = function imul(a, b) {
  var ah  = a >>> 16;
  var al = a & 0xffff;
  var bh  = b >>> 16;
  var bl = b & 0xffff;
  return (al*bl + ((ah*bl + al*bh) << 16))|0;
};
Math.imul = Math['imul'];


var Math_abs = Math.abs;
var Math_cos = Math.cos;
var Math_sin = Math.sin;
var Math_tan = Math.tan;
var Math_acos = Math.acos;
var Math_asin = Math.asin;
var Math_atan = Math.atan;
var Math_atan2 = Math.atan2;
var Math_exp = Math.exp;
var Math_log = Math.log;
var Math_sqrt = Math.sqrt;
var Math_ceil = Math.ceil;
var Math_floor = Math.floor;
var Math_pow = Math.pow;
var Math_imul = Math.imul;
var Math_fround = Math.fround;
var Math_min = Math.min;

// A counter of dependencies for calling run(). If we need to
// do asynchronous work before running, increment this and
// decrement it. Incrementing must happen in a place like
// PRE_RUN_ADDITIONS (used by emcc to add file preloading).
// Note that you can add dependencies in preRun, even though
// it happens right before run - run will be postponed until
// the dependencies are met.
var runDependencies = 0;
var runDependencyWatcher = null;
var dependenciesFulfilled = null; // overridden to take different actions when all run dependencies are fulfilled
var runDependencyTracking = {};

function addRunDependency(id) {
  runDependencies++;
  if (Module['monitorRunDependencies']) {
    Module['monitorRunDependencies'](runDependencies);
  }
  if (id) {
    assert(!runDependencyTracking[id]);
    runDependencyTracking[id] = 1;
    if (runDependencyWatcher === null && typeof setInterval !== 'undefined') {
      // Check for missing dependencies every few seconds
      runDependencyWatcher = setInterval(function() {
        if (ABORT) {
          clearInterval(runDependencyWatcher);
          runDependencyWatcher = null;
          return;
        }
        var shown = false;
        for (var dep in runDependencyTracking) {
          if (!shown) {
            shown = true;
            Module.printErr('still waiting on run dependencies:');
          }
          Module.printErr('dependency: ' + dep);
        }
        if (shown) {
          Module.printErr('(end of list)');
        }
      }, 10000);
    }
  } else {
    Module.printErr('warning: run dependency added without ID');
  }
}
Module['addRunDependency'] = addRunDependency;
function removeRunDependency(id) {
  runDependencies--;
  if (Module['monitorRunDependencies']) {
    Module['monitorRunDependencies'](runDependencies);
  }
  if (id) {
    assert(runDependencyTracking[id]);
    delete runDependencyTracking[id];
  } else {
    Module.printErr('warning: run dependency removed without ID');
  }
  if (runDependencies == 0) {
    if (runDependencyWatcher !== null) {
      clearInterval(runDependencyWatcher);
      runDependencyWatcher = null;
    }
    if (dependenciesFulfilled) {
      var callback = dependenciesFulfilled;
      dependenciesFulfilled = null;
      callback(); // can add another dependenciesFulfilled
    }
  }
}
Module['removeRunDependency'] = removeRunDependency;

Module["preloadedImages"] = {}; // maps url to image data
Module["preloadedAudios"] = {}; // maps url to audio data


var memoryInitializer = null;

// === Body ===





STATIC_BASE = 8;

STATICTOP = STATIC_BASE + Runtime.alignMemory(15315);
  /* global initializers */ __ATINIT__.push({ func: function() { __GLOBAL__I_a() } });
  

/* memory initializer */ allocate([87,111,114,108,100,0,0,0,85,115,101,114,0,0,0,0,72,101,108,108,111,44,32], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE);
/* memory initializer */ allocate([168,4,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0,5,0,0,0,6,0,0,0,7,0,0,0,8,0,0,0,9,0,0,0,10,0,0,0,11,0,0,0,12,0,0,0,13,0,0,0,14,0,0,0,78,83,116,51,95,95,49,49,49,95,95,115,116,100,111,117,116,98,117,102,73,119,69,69,0,0,0,0,0,0,0,0,48,53,0,0,136,4,0,0,32,10,0,0,0,0,0,0,0,0,0,0,16,5,0,0,15,0,0,0,16,0,0,0,17,0,0,0,4,0,0,0,5,0,0,0,6,0,0,0,18,0,0,0,8,0,0,0,9,0,0,0,19,0,0,0,20,0,0,0,21,0,0,0,22,0,0,0,23,0,0,0,78,83,116,51,95,95,49,49,48,95,95,115,116,100,105,110,98,117,102,73,119,69,69,0,48,53,0,0,248,4,0,0,32,10,0,0,0,0,0,0,117,110,115,117,112,112,111,114,116,101,100,32,108,111,99,97,108,101,32,102,111,114,32,115,116,97,110,100,97,114,100,32,105,110,112,117,116,0,0,0,0,0,0,0,168,5,0,0,24,0,0,0,25,0,0,0,26,0,0,0,27,0,0,0,28,0,0,0,29,0,0,0,30,0,0,0,31,0,0,0,32,0,0,0,33,0,0,0,34,0,0,0,35,0,0,0,36,0,0,0,37,0,0,0,78,83,116,51,95,95,49,49,49,95,95,115,116,100,111,117,116,98,117,102,73,99,69,69,0,0,0,0,0,0,0,0,48,53,0,0,136,5,0,0,224,9,0,0,0,0,0,0,0,0,0,0,16,6,0,0,38,0,0,0,39,0,0,0,40,0,0,0,27,0,0,0,28,0,0,0,29,0,0,0,41,0,0,0,31,0,0,0,32,0,0,0,42,0,0,0,43,0,0,0,44,0,0,0,45,0,0,0,46,0,0,0,78,83,116,51,95,95,49,49,48,95,95,115,116,100,105,110,98,117,102,73,99,69,69,0,48,53,0,0,248,5,0,0,224,9,0,0,0,0,0,0,78,83,116,51,95,95,49,49,52,95,95,115,104,97,114,101,100,95,99,111,117,110,116,69,0,0,0,0,0,0,0,0,8,53,0,0,32,6,0,0,58,32,0,0,0,0,0,0,0,0,0,0,128,6,0,0,47,0,0,0,48,0,0,0,49,0,0,0,0,0,0,0,78,83,116,51,95,95,49,49,50,115,121,115,116,101,109,95,101,114,114,111,114,69,0,0,48,53,0,0,104,6,0,0,176,51,0,0,0,0,0,0,78,83,116,51,95,95,49,49,52,101,114,114,111,114,95,99,97,116,101,103,111,114,121,69,0,0,0,0,0,0,0,0,8,53,0,0,144,6,0,0,78,83,116,51,95,95,49,49,50,95,95,100,111,95,109,101,115,115,97,103,101,69,0,0,48,53,0,0,184,6,0,0,176,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,98,97,115,105,99,95,115,116,114,105,110,103,0,0,0,0,0,0,0,0,224,9,0,0,50,0,0,0,51,0,0,0,52,0,0,0,27,0,0,0,28,0,0,0,29,0,0,0,41,0,0,0,31,0,0,0,32,0,0,0,33,0,0,0,34,0,0,0,35,0,0,0,45,0,0,0,46,0,0,0,0,0,0,0,32,10,0,0,53,0,0,0,54,0,0,0,55,0,0,0,4,0,0,0,5,0,0,0,6,0,0,0,18,0,0,0,8,0,0,0,9,0,0,0,10,0,0,0,11,0,0,0,12,0,0,0,22,0,0,0,23,0,0,0,8,0,0,0,0,0,0,0,88,10,0,0,56,0,0,0,57,0,0,0,248,255,255,255,248,255,255,255,88,10,0,0,58,0,0,0,59,0,0,0,8,0,0,0,0,0,0,0,160,10,0,0,60,0,0,0,61,0,0,0,248,255,255,255,248,255,255,255,160,10,0,0,62,0,0,0,63,0,0,0,4,0,0,0,0,0,0,0,232,10,0,0,64,0,0,0,65,0,0,0,252,255,255,255,252,255,255,255,232,10,0,0,66,0,0,0,67,0,0,0,4,0,0,0,0,0,0,0,48,11,0,0,68,0,0,0,69,0,0,0,252,255,255,255,252,255,255,255,48,11,0,0,70,0,0,0,71,0,0,0,105,111,115,116,114,101,97,109,0,0,0,0,0,0,0,0,117,110,115,112,101,99,105,102,105,101,100,32,105,111,115,116,114,101,97,109,95,99,97,116,101,103,111,114,121,32,101,114,114,111,114,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,248,8,0,0,72,0,0,0,73,0,0,0,49,0,0,0,0,0,0,0,0,0,0,0,32,9,0,0,74,0,0,0,75,0,0,0,105,111,115,95,98,97,115,101,58,58,99,108,101,97,114,0,78,83,116,51,95,95,49,56,105,111,115,95,98,97,115,101,55,102,97,105,108,117,114,101,69,0,0,0,0,0,0,0,48,53,0,0,216,8,0,0,128,6,0,0,0,0,0,0,78,83,116,51,95,95,49,56,105,111,115,95,98,97,115,101,69,0,0,0,0,0,0,0,8,53,0,0,8,9,0,0,78,83,116,51,95,95,49,57,98,97,115,105,99,95,105,111,115,73,99,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,99,69,69,69,69,0,0,0,0,0,0,0,48,53,0,0,40,9,0,0,32,9,0,0,0,0,0,0,78,83,116,51,95,95,49,57,98,97,115,105,99,95,105,111,115,73,119,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,119,69,69,69,69,0,0,0,0,0,0,0,48,53,0,0,104,9,0,0,32,9,0,0,0,0,0,0,78,83,116,51,95,95,49,49,53,98,97,115,105,99,95,115,116,114,101,97,109,98,117,102,73,99,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,99,69,69,69,69,0,0,0,0,0,0,0,0,8,53,0,0,168,9,0,0,78,83,116,51,95,95,49,49,53,98,97,115,105,99,95,115,116,114,101,97,109,98,117,102,73,119,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,119,69,69,69,69,0,0,0,0,0,0,0,0,8,53,0,0,232,9,0,0,78,83,116,51,95,95,49,49,51,98,97,115,105,99,95,105,115,116,114,101,97,109,73,99,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,99,69,69,69,69,0,0,144,53,0,0,40,10,0,0,0,0,0,0,1,0,0,0,88,9,0,0,3,244,255,255,78,83,116,51,95,95,49,49,51,98,97,115,105,99,95,105,115,116,114,101,97,109,73,119,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,119,69,69,69,69,0,0,144,53,0,0,112,10,0,0,0,0,0,0,1,0,0,0,152,9,0,0,3,244,255,255,78,83,116,51,95,95,49,49,51,98,97,115,105,99,95,111,115,116,114,101,97,109,73,99,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,99,69,69,69,69,0,0,144,53,0,0,184,10,0,0,0,0,0,0,1,0,0,0,88,9,0,0,3,244,255,255,78,83,116,51,95,95,49,49,51,98,97,115,105,99,95,111,115,116,114,101,97,109,73,119,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,119,69,69,69,69,0,0,144,53,0,0,0,11,0,0,0,0,0,0,1,0,0,0,152,9,0,0,3,244,255,255,0,0,0,0,144,11,0,0,76,0,0,0,77,0,0,0,78,0,0,0,79,0,0,0,80,0,0,0,81,0,0,0,82,0,0,0,0,0,0,0,78,83,116,51,95,95,49,49,57,95,95,105,111,115,116,114,101,97,109,95,99,97,116,101,103,111,114,121,69,0,0,0,48,53,0,0,112,11,0,0,208,6,0,0,0,0,0,0,0,0,0,0,216,25,0,0,83,0,0,0,84,0,0,0,85,0,0,0,86,0,0,0,87,0,0,0,88,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,26,0,0,89,0,0,0,90,0,0,0,85,0,0,0,91,0,0,0,92,0,0,0,93,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,176,30,0,0,94,0,0,0,95,0,0,0,85,0,0,0,96,0,0,0,97,0,0,0,98,0,0,0,99,0,0,0,100,0,0,0,101,0,0,0,102,0,0,0,103,0,0,0,104,0,0,0,105,0,0,0,106,0,0,0,0,0,0,0,0,0,0,0,48,49,50,51,52,53,54,55,56,57,97,98,99,100,101,102,65,66,67,68,69,70,120,88,43,45,112,80,105,73,110,78,0,0,0,0,0,0,0,0,37,112,0,0,0,0,0,0,0,0,0,0,72,31,0,0,107,0,0,0,108,0,0,0,85,0,0,0,109,0,0,0,110,0,0,0,111,0,0,0,112,0,0,0,113,0,0,0,114,0,0,0,115,0,0,0,116,0,0,0,117,0,0,0,118,0,0,0,119,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,32,0,0,120,0,0,0,121,0,0,0,85,0,0,0,122,0,0,0,123,0,0,0,124,0,0,0,125,0,0,0,126,0,0,0,127,0,0,0,128,0,0,0,129,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,108,0,0,0,0,0,0,0,108,108,0,0,0,0,0,0,0,0,0,0,0,0,0,0,76,0,0,0,0,0,0,0,0,0,0,0,160,32,0,0,130,0,0,0,131,0,0,0,85,0,0,0,132,0,0,0,133,0,0,0,134,0,0,0,135,0,0,0,136,0,0,0,137,0,0,0,138,0,0,0,139,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,37,0,0,0,0,0,0,0,37,112,0,0,0,0,0,0,0,0,0,0,200,27,0,0,140,0,0,0,141,0,0,0,85,0,0,0,142,0,0,0,143,0,0,0,144,0,0,0,145,0,0,0,146,0,0,0,147,0,0,0,148,0,0,0,248,255,255,255,200,27,0,0,149,0,0,0,150,0,0,0,151,0,0,0,152,0,0,0,153,0,0,0,154,0,0,0,155,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,37,72,58,37,77,58,37,83,37,109,47,37,100,47,37,121,37,89,45,37,109,45,37,100,37,73,58,37,77,58,37,83,32,37,112,0,0,0,0,0,37,72,58,37,77,0,0,0,37,72,58,37,77,58,37,83,0,0,0,0,104,28,0,0,156,0,0,0,157,0,0,0,85,0,0,0,158,0,0,0,159,0,0,0,160,0,0,0,161,0,0,0,162,0,0,0,163,0,0,0,164,0,0,0,248,255,255,255,104,28,0,0,165,0,0,0,166,0,0,0,167,0,0,0,168,0,0,0,169,0,0,0,170,0,0,0,171,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,37,0,0,0,72,0,0,0,58,0,0,0,37,0,0,0,77,0,0,0,58,0,0,0,37,0,0,0,83,0,0,0,37,0,0,0,109,0,0,0,47,0,0,0,37,0,0,0,100,0,0,0,47,0,0,0,37,0,0,0,121,0,0,0,37,0,0,0,89,0,0,0,45,0,0,0,37,0,0,0,109,0,0,0,45,0,0,0,37,0,0,0,100,0,0,0,37,0,0,0,73,0,0,0,58,0,0,0,37,0,0,0,77,0,0,0,58,0,0,0,37,0,0,0,83,0,0,0,32,0,0,0,37,0,0,0,112,0,0,0,0,0,0,0,37,0,0,0,72,0,0,0,58,0,0,0,37,0,0,0,77,0,0,0,0,0,0,0,37,0,0,0,72,0,0,0,58,0,0,0,37,0,0,0,77,0,0,0,58,0,0,0,37,0,0,0,83,0,0,0,0,0,0,0,248,28,0,0,172,0,0,0,173,0,0,0,85,0,0,0,174,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,96,29,0,0,175,0,0,0,176,0,0,0,85,0,0,0,177,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,80,26,0,0,178,0,0,0,179,0,0,0,85,0,0,0,180,0,0,0,181,0,0,0,182,0,0,0,183,0,0,0,184,0,0,0,185,0,0,0,186,0,0,0,187,0,0,0,188,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,144,26,0,0,189,0,0,0,190,0,0,0,85,0,0,0,191,0,0,0,192,0,0,0,193,0,0,0,194,0,0,0,195,0,0,0,196,0,0,0,197,0,0,0,198,0,0,0,199,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,208,26,0,0,200,0,0,0,201,0,0,0,85,0,0,0,202,0,0,0,203,0,0,0,204,0,0,0,205,0,0,0,206,0,0,0,207,0,0,0,208,0,0,0,209,0,0,0,210,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,16,27,0,0,211,0,0,0,212,0,0,0,85,0,0,0,213,0,0,0,214,0,0,0,215,0,0,0,216,0,0,0,217,0,0,0,218,0,0,0,219,0,0,0,220,0,0,0,221,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,48,33,0,0,222,0,0,0,223,0,0,0,85,0,0,0,224,0,0,0,225,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,48,49,50,51,52,53,54,55,56,57,0,0,0,0,0,0,37,76,102,0,0,0,0,0,109,111,110,101,121,95,103,101,116,32,101,114,114,111,114,0,0,0,0,0,192,33,0,0,226,0,0,0,227,0,0,0,85,0,0,0,228,0,0,0,229,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,48,49,50,51,52,53,54,55,56,57,0,0,0,0,0,0,0,0,0,0,80,34,0,0,230,0,0,0,231,0,0,0,85,0,0,0,232,0,0,0,233,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,37,46,48,76,102,0,0,0,0,0,0,0,224,34,0,0,234,0,0,0,235,0,0,0,85,0,0,0,236,0,0,0,237,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,184,29,0,0,238,0,0,0,239,0,0,0,85,0,0,0,240,0,0,0,241,0,0,0,242,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,240,29,0,0,243,0,0,0,244,0,0,0,85,0,0,0,245,0,0,0,246,0,0,0,247,0,0,0,0,0,0,0,0,0,0,0,118,101,99,116,111,114,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,67,0,0,0,0,0,0,0,0,0,0,0,176,25,0,0,248,0,0,0,249,0,0,0,85,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,136,22,0,0,250,0,0,0,251,0,0,0,85,0,0,0,252,0,0,0,253,0,0,0,254,0,0,0,255,0,0,0,0,1,0,0,1,1,0,0,2,1,0,0,3,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,104,23,0,0,4,1,0,0,5,1,0,0,85,0,0,0,6,1,0,0,7,1,0,0,8,1,0,0,9,1,0,0,10,1,0,0,11,1,0,0,12,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,96,25,0,0,13,1,0,0,14,1,0,0,85,0,0,0,15,1,0,0,16,1,0,0,17,1,0,0,18,1,0,0,19,1,0,0,0,0,0,0,136,25,0,0,20,1,0,0,21,1,0,0,85,0,0,0,22,1,0,0,23,1,0,0,24,1,0,0,25,1,0,0,26,1,0,0,116,114,117,101,0,0,0,0,116,0,0,0,114,0,0,0,117,0,0,0,101,0,0,0,0,0,0,0,0,0,0,0,102,97,108,115,101,0,0,0,102,0,0,0,97,0,0,0,108,0,0,0,115,0,0,0,101,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,37,109,47,37,100,47,37,121,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,37,0,0,0,109,0,0,0,47,0,0,0,37,0,0,0,100,0,0,0,47,0,0,0,37,0,0,0,121,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,37,72,58,37,77,58,37,83,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,37,0,0,0,72,0,0,0,58,0,0,0,37,0,0,0,77,0,0,0,58,0,0,0,37,0,0,0,83,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,37,97,32,37,98,32,37,100,32,37,72,58,37,77,58,37,83,32,37,89,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,37,0,0,0,97,0,0,0,32,0,0,0,37,0,0,0,98,0,0,0,32,0,0,0,37,0,0,0,100,0,0,0,32,0,0,0,37,0,0,0,72,0,0,0,58,0,0,0,37,0,0,0,77,0,0,0,58,0,0,0,37,0,0,0,83,0,0,0,32,0,0,0,37,0,0,0,89,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,37,73,58,37,77,58,37,83,32,37,112,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,37,0,0,0,73,0,0,0,58,0,0,0,37,0,0,0,77,0,0,0,58,0,0,0,37,0,0,0,83,0,0,0,32,0,0,0,37,0,0,0,112,0,0,0,0,0,0,0,108,111,99,97,108,101,32,110,111,116,32,115,117,112,112,111,114,116,101,100,0,0,0,0,0,0,0,0,192,21,0,0,27,1,0,0,28,1,0,0,85,0,0,0,0,0,0,0,78,83,116,51,95,95,49,54,108,111,99,97,108,101,53,102,97,99,101,116,69,0,0,0,48,53,0,0,168,21,0,0,64,6,0,0,0,0,0,0,0,0,0,0,80,22,0,0,27,1,0,0,29,1,0,0,85,0,0,0,30,1,0,0,31,1,0,0,32,1,0,0,33,1,0,0,34,1,0,0,35,1,0,0,36,1,0,0,37,1,0,0,38,1,0,0,39,1,0,0,40,1,0,0,41,1,0,0,0,0,0,0,78,83,116,51,95,95,49,53,99,116,121,112,101,73,119,69,69,0,0,0,0,0,0,0,78,83,116,51,95,95,49,49,48,99,116,121,112,101,95,98,97,115,101,69,0,0,0,0,8,53,0,0,48,22,0,0,144,53,0,0,24,22,0,0,0,0,0,0,2,0,0,0,192,21,0,0,2,0,0,0,72,22,0,0,2,0,0,0,78,83,116,51,95,95,49,53,99,116,121,112,101,73,99,69,69,0,0,0,0,0,0,0,144,53,0,0,112,22,0,0,0,0,0,0,2,0,0,0,192,21,0,0,2,0,0,0,72,22,0,0,2,0,0,0,0,0,0,0,32,23,0,0,27,1,0,0,42,1,0,0,85,0,0,0,43,1,0,0,44,1,0,0,45,1,0,0,46,1,0,0,47,1,0,0,48,1,0,0,49,1,0,0,78,83,116,51,95,95,49,55,99,111,100,101,99,118,116,73,99,99,49,49,95,95,109,98,115,116,97,116,101,95,116,69,69,0,0,0,0,0,0,0,78,83,116,51,95,95,49,49,50,99,111,100,101,99,118,116,95,98,97,115,101,69,0,0,8,53,0,0,0,23,0,0,144,53,0,0,216,22,0,0,0,0,0,0,2,0,0,0,192,21,0,0,2,0,0,0,24,23,0,0,2,0,0,0,78,83,116,51,95,95,49,55,99,111,100,101,99,118,116,73,119,99,49,49,95,95,109,98,115,116,97,116,101,95,116,69,69,0,0,0,0,0,0,0,144,53,0,0,64,23,0,0,0,0,0,0,2,0,0,0,192,21,0,0,2,0,0,0,24,23,0,0,2,0,0,0,0,0,0,0,224,23,0,0,27,1,0,0,50,1,0,0,85,0,0,0,51,1,0,0,52,1,0,0,53,1,0,0,54,1,0,0,55,1,0,0,56,1,0,0,57,1,0,0,78,83,116,51,95,95,49,55,99,111,100,101,99,118,116,73,68,115,99,49,49,95,95,109,98,115,116,97,116,101,95,116,69,69,0,0,0,0,0,0,144,53,0,0,184,23,0,0,0,0,0,0,2,0,0,0,192,21,0,0,2,0,0,0,24,23,0,0,2,0,0,0,0,0,0,0,88,24,0,0,27,1,0,0,58,1,0,0,85,0,0,0,59,1,0,0,60,1,0,0,61,1,0,0,62,1,0,0,63,1,0,0,64,1,0,0,65,1,0,0,78,83,116,51,95,95,49,55,99,111,100,101,99,118,116,73,68,105,99,49,49,95,95,109,98,115,116,97,116,101,95,116,69,69,0,0,0,0,0,0,144,53,0,0,48,24,0,0,0,0,0,0,2,0,0,0,192,21,0,0,2,0,0,0,24,23,0,0,2,0,0,0,0,0,0,0,208,24,0,0,27,1,0,0,66,1,0,0,85,0,0,0,59,1,0,0,60,1,0,0,61,1,0,0,62,1,0,0,63,1,0,0,64,1,0,0,65,1,0,0,78,83,116,51,95,95,49,49,54,95,95,110,97,114,114,111,119,95,116,111,95,117,116,102,56,73,76,106,51,50,69,69,69,0,0,0,0,0,0,0,48,53,0,0,168,24,0,0,88,24,0,0,0,0,0,0,0,0,0,0,56,25,0,0,27,1,0,0,67,1,0,0,85,0,0,0,59,1,0,0,60,1,0,0,61,1,0,0,62,1,0,0,63,1,0,0,64,1,0,0,65,1,0,0,78,83,116,51,95,95,49,49,55,95,95,119,105,100,101,110,95,102,114,111,109,95,117,116,102,56,73,76,106,51,50,69,69,69,0,0,0,0,0,0,48,53,0,0,16,25,0,0,88,24,0,0,0,0,0,0,78,83,116,51,95,95,49,56,110,117,109,112,117,110,99,116,73,99,69,69,0,0,0,0,48,53,0,0,72,25,0,0,192,21,0,0,0,0,0,0,78,83,116,51,95,95,49,56,110,117,109,112,117,110,99,116,73,119,69,69,0,0,0,0,48,53,0,0,112,25,0,0,192,21,0,0,0,0,0,0,78,83,116,51,95,95,49,54,108,111,99,97,108,101,53,95,95,105,109,112,69,0,0,0,48,53,0,0,152,25,0,0,192,21,0,0,0,0,0,0,78,83,116,51,95,95,49,55,99,111,108,108,97,116,101,73,99,69,69,0,0,0,0,0,48,53,0,0,192,25,0,0,192,21,0,0,0,0,0,0,78,83,116,51,95,95,49,55,99,111,108,108,97,116,101,73,119,69,69,0,0,0,0,0,48,53,0,0,232,25,0,0,192,21,0,0,0,0,0,0,78,83,116,51,95,95,49,49,48,109,111,110,101,121,112,117,110,99,116,73,99,76,98,48,69,69,69,0,0,0,0,0,78,83,116,51,95,95,49,49,48,109,111,110,101,121,95,98,97,115,101,69,0,0,0,0,8,53,0,0,48,26,0,0,144,53,0,0,16,26,0,0,0,0,0,0,2,0,0,0,192,21,0,0,2,0,0,0,72,26,0,0,2,0,0,0,78,83,116,51,95,95,49,49,48,109,111,110,101,121,112,117,110,99,116,73,99,76,98,49,69,69,69,0,0,0,0,0,144,53,0,0,112,26,0,0,0,0,0,0,2,0,0,0,192,21,0,0,2,0,0,0,72,26,0,0,2,0,0,0,78,83,116,51,95,95,49,49,48,109,111,110,101,121,112,117,110,99,116,73,119,76,98,48,69,69,69,0,0,0,0,0,144,53,0,0,176,26,0,0,0,0,0,0,2,0,0,0,192,21,0,0,2,0,0,0,72,26,0,0,2,0,0,0,78,83,116,51,95,95,49,49,48,109,111,110,101,121,112,117,110,99,116,73,119,76,98,49,69,69,69,0,0,0,0,0,144,53,0,0,240,26,0,0,0,0,0,0,2,0,0,0,192,21,0,0,2,0,0,0,72,26,0,0,2,0,0,0,78,83,116,51,95,95,49,56,116,105,109,101,95,103,101,116,73,99,78,83,95,49,57,105,115,116,114,101,97,109,98,117,102,95,105,116,101,114,97,116,111,114,73,99,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,99,69,69,69,69,69,69,0,0,0,0,78,83,116,51,95,95,49,57,116,105,109,101,95,98,97,115,101,69,0,0,0,0,0,0,8,53,0,0,120,27,0,0,78,83,116,51,95,95,49,50,48,95,95,116,105,109,101,95,103,101,116,95,99,95,115,116,111,114,97,103,101,73,99,69,69,0,0,0,0,0,0,0,8,53,0,0,152,27,0,0,144,53,0,0,48,27,0,0,0,0,0,0,3,0,0,0,192,21,0,0,2,0,0,0,144,27,0,0,2,0,0,0,192,27,0,0,0,8,0,0,78,83,116,51,95,95,49,56,116,105,109,101,95,103,101,116,73,119,78,83,95,49,57,105,115,116,114,101,97,109,98,117,102,95,105,116,101,114,97,116,111,114,73,119,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,119,69,69,69,69,69,69,0,0,0,0,78,83,116,51,95,95,49,50,48,95,95,116,105,109,101,95,103,101,116,95,99,95,115,116,111,114,97,103,101,73,119,69,69,0,0,0,0,0,0,0,8,53,0,0,56,28,0,0,144,53,0,0,240,27,0,0,0,0,0,0,3,0,0,0,192,21,0,0,2,0,0,0,144,27,0,0,2,0,0,0,96,28,0,0,0,8,0,0,78,83,116,51,95,95,49,56,116,105,109,101,95,112,117,116,73,99,78,83,95,49,57,111,115,116,114,101,97,109,98,117,102,95,105,116,101,114,97,116,111,114,73,99,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,99,69,69,69,69,69,69,0,0,0,0,78,83,116,51,95,95,49,49,48,95,95,116,105,109,101,95,112,117,116,69,0,0,0,0,8,53,0,0,216,28,0,0,144,53,0,0,144,28,0,0,0,0,0,0,2,0,0,0,192,21,0,0,2,0,0,0,240,28,0,0,0,8,0,0,78,83,116,51,95,95,49,56,116,105,109,101,95,112,117,116,73,119,78,83,95,49,57,111,115,116,114,101,97,109,98,117,102,95,105,116,101,114,97,116,111,114,73,119,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,119,69,69,69,69,69,69,0,0,0,0,144,53,0,0,24,29,0,0,0,0,0,0,2,0,0,0,192,21,0,0,2,0,0,0,240,28,0,0,0,8,0,0,78,83,116,51,95,95,49,56,109,101,115,115,97,103,101,115,73,99,69,69,0,0,0,0,78,83,116,51,95,95,49,49,51,109,101,115,115,97,103,101,115,95,98,97,115,101,69,0,8,53,0,0,152,29,0,0,144,53,0,0,128,29,0,0,0,0,0,0,2,0,0,0,192,21,0,0,2,0,0,0,176,29,0,0,2,0,0,0,78,83,116,51,95,95,49,56,109,101,115,115,97,103,101,115,73,119,69,69,0,0,0,0,144,53,0,0,216,29,0,0,0,0,0,0,2,0,0,0,192,21,0,0,2,0,0,0,176,29,0,0,2,0,0,0,78,83,116,51,95,95,49,55,110,117,109,95,103,101,116,73,99,78,83,95,49,57,105,115,116,114,101,97,109,98,117,102,95,105,116,101,114,97,116,111,114,73,99,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,99,69,69,69,69,69,69,0,0,0,0,0,78,83,116,51,95,95,49,57,95,95,110,117,109,95,103,101,116,73,99,69,69,0,0,0,78,83,116,51,95,95,49,49,52,95,95,110,117,109,95,103,101,116,95,98,97,115,101,69,0,0,0,0,0,0,0,0,8,53,0,0,112,30,0,0,144,53,0,0,88,30,0,0,0,0,0,0,1,0,0,0,144,30,0,0,0,0,0,0,144,53,0,0,16,30,0,0,0,0,0,0,2,0,0,0,192,21,0,0,2,0,0,0,152,30,0,0,0,0,0,0,78,83,116,51,95,95,49,55,110,117,109,95,103,101,116,73,119,78,83,95,49,57,105,115,116,114,101,97,109,98,117,102,95,105,116,101,114,97,116,111,114,73,119,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,119,69,69,69,69,69,69,0,0,0,0,0,78,83,116,51,95,95,49,57,95,95,110,117,109,95,103,101,116,73,119,69,69,0,0,0,144,53,0,0,24,31,0,0,0,0,0,0,1,0,0,0,144,30,0,0,0,0,0,0,144,53,0,0,208,30,0,0,0,0,0,0,2,0,0,0,192,21,0,0,2,0,0,0,48,31,0,0,0,0,0,0,78,83,116,51,95,95,49,55,110,117,109,95,112,117,116,73,99,78,83,95,49,57,111,115,116,114,101,97,109,98,117,102,95,105,116,101,114,97,116,111,114,73,99,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,99,69,69,69,69,69,69,0,0,0,0,0,78,83,116,51,95,95,49,57,95,95,110,117,109,95,112,117,116,73,99,69,69,0,0,0,78,83,116,51,95,95,49,49,52,95,95,110,117,109,95,112,117,116,95,98,97,115,101,69,0,0,0,0,0,0,0,0,8,53,0,0,200,31,0,0,144,53,0,0,176,31,0,0,0,0,0,0,1,0,0,0,232,31,0,0,0,0,0,0,144,53,0,0,104,31,0,0,0,0,0,0,2,0,0,0,192,21,0,0,2,0,0,0,240,31,0,0,0,0,0,0,78,83,116,51,95,95,49,55,110,117,109,95,112,117,116,73,119,78,83,95,49,57,111,115,116,114,101,97,109,98,117,102,95,105,116,101,114,97,116,111,114,73,119,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,119,69,69,69,69,69,69,0,0,0,0,0,78,83,116,51,95,95,49,57,95,95,110,117,109,95,112,117,116,73,119,69,69,0,0,0,144,53,0,0,112,32,0,0,0,0,0,0,1,0,0,0,232,31,0,0,0,0,0,0,144,53,0,0,40,32,0,0,0,0,0,0,2,0,0,0,192,21,0,0,2,0,0,0,136,32,0,0,0,0,0,0,78,83,116,51,95,95,49,57,109,111,110,101,121,95,103,101,116,73,99,78,83,95,49,57,105,115,116,114,101,97,109,98,117,102,95,105,116,101,114,97,116,111,114,73,99,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,99,69,69,69,69,69,69,0,0,0,78,83,116,51,95,95,49,49,49,95,95,109,111,110,101,121,95,103,101,116,73,99,69,69,0,0,0,0,0,0,0,0,8,53,0,0,8,33,0,0,144,53,0,0,192,32,0,0,0,0,0,0,2,0,0,0,192,21,0,0,2,0,0,0,40,33,0,0,0,0,0,0,78,83,116,51,95,95,49,57,109,111,110,101,121,95,103,101,116,73,119,78,83,95,49,57,105,115,116,114,101,97,109,98,117,102,95,105,116,101,114,97,116,111,114,73,119,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,119,69,69,69,69,69,69,0,0,0,78,83,116,51,95,95,49,49,49,95,95,109,111,110,101,121,95,103,101,116,73,119,69,69,0,0,0,0,0,0,0,0,8,53,0,0,152,33,0,0,144,53,0,0,80,33,0,0,0,0,0,0,2,0,0,0,192,21,0,0,2,0,0,0,184,33,0,0,0,0,0,0,78,83,116,51,95,95,49,57,109,111,110,101,121,95,112,117,116,73,99,78,83,95,49,57,111,115,116,114,101,97,109,98,117,102,95,105,116,101,114,97,116,111,114,73,99,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,99,69,69,69,69,69,69,0,0,0,78,83,116,51,95,95,49,49,49,95,95,109,111,110,101,121,95,112,117,116,73,99,69,69,0,0,0,0,0,0,0,0,8,53,0,0,40,34,0,0,144,53,0,0,224,33,0,0,0,0,0,0,2,0,0,0,192,21,0,0,2,0,0,0,72,34,0,0,0,0,0,0,78,83,116,51,95,95,49,57,109,111,110,101,121,95,112,117,116,73,119,78,83,95,49,57,111,115,116,114,101,97,109,98,117,102,95,105,116,101,114,97,116,111,114,73,119,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,119,69,69,69,69,69,69,0,0,0,78,83,116,51,95,95,49,49,49,95,95,109,111,110,101,121,95,112,117,116,73,119,69,69,0,0,0,0,0,0,0,0,8,53,0,0,184,34,0,0,144,53,0,0,112,34,0,0,0,0,0,0,2,0,0,0,192,21,0,0,2,0,0,0,216,34,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,65,0,0,0,77,0,0,0,0,0,0,0,0,0,0,0,80,0,0,0,77,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,65,77,0,0,0,0,0,0,80,77,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,74,0,0,0,97,0,0,0,110,0,0,0,117,0,0,0,97,0,0,0,114,0,0,0,121,0,0,0,0,0,0,0,70,0,0,0,101,0,0,0,98,0,0,0,114,0,0,0,117,0,0,0,97,0,0,0,114,0,0,0,121,0,0,0,0,0,0,0,0,0,0,0,77,0,0,0,97,0,0,0,114,0,0,0,99,0,0,0,104,0,0,0,0,0,0,0,65,0,0,0,112,0,0,0,114,0,0,0,105,0,0,0,108,0,0,0,0,0,0,0,74,0,0,0,117,0,0,0,110,0,0,0,101,0,0,0,0,0,0,0,0,0,0,0,74,0,0,0,117,0,0,0,108,0,0,0,121,0,0,0,0,0,0,0,0,0,0,0,65,0,0,0,117,0,0,0,103,0,0,0,117,0,0,0,115,0,0,0,116,0,0,0,0,0,0,0,0,0,0,0,83,0,0,0,101,0,0,0,112,0,0,0,116,0,0,0,101,0,0,0,109,0,0,0,98,0,0,0,101,0,0,0,114,0,0,0,0,0,0,0,79,0,0,0,99,0,0,0,116,0,0,0,111,0,0,0,98,0,0,0,101,0,0,0,114,0,0,0,0,0,0,0,78,0,0,0,111,0,0,0,118,0,0,0,101,0,0,0,109,0,0,0,98,0,0,0,101,0,0,0,114,0,0,0,0,0,0,0,0,0,0,0,68,0,0,0,101,0,0,0,99,0,0,0,101,0,0,0,109,0,0,0,98,0,0,0,101,0,0,0,114,0,0,0,0,0,0,0,0,0,0,0,74,0,0,0,97,0,0,0,110,0,0,0,0,0,0,0,70,0,0,0,101,0,0,0,98,0,0,0,0,0,0,0,77,0,0,0,97,0,0,0,114,0,0,0,0,0,0,0,65,0,0,0,112,0,0,0,114,0,0,0,0,0,0,0,77,0,0,0,97,0,0,0,121,0,0,0,0,0,0,0,74,0,0,0,117,0,0,0,110,0,0,0,0,0,0,0,74,0,0,0,117,0,0,0,108,0,0,0,0,0,0,0,65,0,0,0,117,0,0,0,103,0,0,0,0,0,0,0,83,0,0,0,101,0,0,0,112,0,0,0,0,0,0,0,79,0,0,0,99,0,0,0,116,0,0,0,0,0,0,0,78,0,0,0,111,0,0,0,118,0,0,0,0,0,0,0,68,0,0,0,101,0,0,0,99,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,74,97,110,117,97,114,121,0,70,101,98,114,117,97,114,121,0,0,0,0,0,0,0,0,77,97,114,99,104,0,0,0,65,112,114,105,108,0,0,0,77,97,121,0,0,0,0,0,74,117,110,101,0,0,0,0,74,117,108,121,0,0,0,0,65,117,103,117,115,116,0,0,83,101,112,116,101,109,98,101,114,0,0,0,0,0,0,0,79,99,116,111,98,101,114,0,78,111,118,101,109,98,101,114,0,0,0,0,0,0,0,0,68,101,99,101,109,98,101,114,0,0,0,0,0,0,0,0,74,97,110], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+1092);
/* memory initializer */ allocate([70,101,98,0,0,0,0,0,77,97,114,0,0,0,0,0,65,112,114,0,0,0,0,0,74,117,110,0,0,0,0,0,74,117,108,0,0,0,0,0,65,117,103,0,0,0,0,0,83,101,112,0,0,0,0,0,79,99,116,0,0,0,0,0,78,111,118,0,0,0,0,0,68,101,99,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,83,0,0,0,117,0,0,0,110,0,0,0,100,0,0,0,97,0,0,0,121,0,0,0,0,0,0,0,0,0,0,0,77,0,0,0,111,0,0,0,110,0,0,0,100,0,0,0,97,0,0,0,121,0,0,0,0,0,0,0,0,0,0,0,84,0,0,0,117,0,0,0,101,0,0,0,115,0,0,0,100,0,0,0,97,0,0,0,121,0,0,0,0,0,0,0,87,0,0,0,101,0,0,0,100,0,0,0,110,0,0,0,101,0,0,0,115,0,0,0,100,0,0,0,97,0,0,0,121,0,0,0,0,0,0,0,84,0,0,0,104,0,0,0,117,0,0,0,114,0,0,0,115,0,0,0,100,0,0,0,97,0,0,0,121,0,0,0,0,0,0,0,0,0,0,0,70,0,0,0,114,0,0,0,105,0,0,0,100,0,0,0,97,0,0,0,121,0,0,0,0,0,0,0,0,0,0,0,83,0,0,0,97,0,0,0,116,0,0,0,117,0,0,0,114,0,0,0,100,0,0,0,97,0,0,0,121,0,0,0,0,0,0,0,0,0,0,0,83,0,0,0,117,0,0,0,110,0,0,0,0,0,0,0,77,0,0,0,111,0,0,0,110,0,0,0,0,0,0,0,84,0,0,0,117,0,0,0,101,0,0,0,0,0,0,0,87,0,0,0,101,0,0,0,100,0,0,0,0,0,0,0,84,0,0,0,104,0,0,0,117,0,0,0,0,0,0,0,70,0,0,0,114,0,0,0,105,0,0,0,0,0,0,0,83,0,0,0,97,0,0,0,116,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,83,117,110,100,97,121,0,0,77,111,110,100,97,121,0,0,84,117,101,115,100,97,121,0,87,101,100,110,101,115,100,97,121,0,0,0,0,0,0,0,84,104,117,114,115,100,97,121,0,0,0,0,0,0,0,0,70,114,105,100,97,121,0,0,83,97,116,117,114,100,97,121,0,0,0,0,0,0,0,0,83,117,110,0,0,0,0,0,77,111,110,0,0,0,0,0,84,117,101,0,0,0,0,0,87,101,100,0,0,0,0,0,84,104,117,0,0,0,0,0,70,114,105,0,0,0,0,0,83,97,116,0,0,0,0,0,2,0,0,192,3,0,0,192,4,0,0,192,5,0,0,192,6,0,0,192,7,0,0,192,8,0,0,192,9,0,0,192,10,0,0,192,11,0,0,192,12,0,0,192,13,0,0,192,14,0,0,192,15,0,0,192,16,0,0,192,17,0,0,192,18,0,0,192,19,0,0,192,20,0,0,192,21,0,0,192,22,0,0,192,23,0,0,192,24,0,0,192,25,0,0,192,26,0,0,192,27,0,0,192,28,0,0,192,29,0,0,192,30,0,0,192,31,0,0,192,0,0,0,179,1,0,0,195,2,0,0,195,3,0,0,195,4,0,0,195,5,0,0,195,6,0,0,195,7,0,0,195,8,0,0,195,9,0,0,195,10,0,0,195,11,0,0,195,12,0,0,195,13,0,0,211,14,0,0,195,15,0,0,195,0,0,12,187,1,0,12,195,2,0,12,195,3,0,12,195,4,0,12,211,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,68,1,0,0,0,0,0,0,224,48,0,0,0,0,0,0,117,110,99,97,117,103,104,116,0,0,0,0,0,0,0,0,116,101,114,109,105,110,97,116,105,110,103,32,119,105,116,104,32,37,115,32,101,120,99,101,112,116,105,111,110,32,111,102,32,116,121,112,101,32,37,115,58,32,37,115,0,0,0,0,116,101,114,109,105,110,97,116,105,110,103,32,119,105,116,104,32,37,115,32,101,120,99,101,112,116,105,111,110,32,111,102,32,116,121,112,101,32,37,115,0,0,0,0,0,0,0,0,116,101,114,109,105,110,97,116,105,110,103,32,119,105,116,104,32,37,115,32,102,111,114,101,105,103,110,32,101,120,99,101,112,116,105,111,110,0,0,0,116,101,114,109,105,110,97,116,105,110,103,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,112,116,104,114,101,97,100,95,111,110,99,101,32,102,97,105,108,117,114,101,32,105,110,32,95,95,99,120,97,95,103,101,116,95,103,108,111,98,97,108,115,95,102,97,115,116,40,41,0,0,0,0,0,0,0,0,99,97,110,110,111,116,32,99,114,101,97,116,101,32,112,116,104,114,101,97,100,32,107,101,121,32,102,111,114,32,95,95,99,120,97,95,103,101,116,95,103,108,111,98,97,108,115,40,41,0,0,0,0,0,0,0,99,97,110,110,111,116,32,122,101,114,111,32,111,117,116,32,116,104,114,101,97,100,32,118,97,108,117,101,32,102,111,114,32,95,95,99,120,97,95,103,101,116,95,103,108,111,98,97,108,115,40,41,0,0,0,0,0,0,0,0,120,50,0,0,69,1,0,0,70,1,0,0,71,1,0,0,0,0,0,0,115,116,100,58,58,98,97,100,95,97,108,108,111,99,0,0,83,116,57,98,97,100,95,97,108,108,111,99,0,0,0,0,48,53,0,0,104,50,0,0,0,51,0,0,0,0,0,0,116,101,114,109,105,110,97,116,101,95,104,97,110,100,108,101,114,32,117,110,101,120,112,101,99,116,101,100,108,121,32,114,101,116,117,114,110,101,100,0,116,101,114,109,105,110,97,116,101,95,104,97,110,100,108,101,114,32,117,110,101,120,112,101,99,116,101,100,108,121,32,116,104,114,101,119,32,97,110,32,101,120,99,101,112,116,105,111,110,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,83,116,57,101,120,99,101,112,116,105,111,110,0,0,0,0,8,53,0,0,240,50,0,0,0,0,0,0,72,51,0,0,72,1,0,0,73,1,0,0,74,1,0,0,0,0,0,0,0,0,0,0,176,51,0,0,75,1,0,0,76,1,0,0,49,0,0,0,0,0,0,0,83,116,49,49,108,111,103,105,99,95,101,114,114,111,114,0,48,53,0,0,56,51,0,0,0,51,0,0,0,0,0,0,0,0,0,0,136,51,0,0,72,1,0,0,77,1,0,0,74,1,0,0,0,0,0,0,83,116,49,50,108,101,110,103,116,104,95,101,114,114,111,114,0,0,0,0,0,0,0,0,48,53,0,0,112,51,0,0,72,51,0,0,0,0,0,0,83,116,49,51,114,117,110,116,105,109,101,95,101,114,114,111,114,0,0,0,0,0,0,0,48,53,0,0,152,51,0,0,0,51,0,0,0,0,0,0,0,0,0,0,16,52,0,0,78,1,0,0,79,1,0,0,80,1,0,0,0,0,0,0,115,116,100,58,58,98,97,100,95,99,97,115,116,0,0,0,83,116,57,116,121,112,101,95,105,110,102,111,0,0,0,0,8,53,0,0,232,51,0,0,83,116,56,98,97,100,95,99,97,115,116,0,0,0,0,0,48,53,0,0,0,52,0,0,0,51,0,0,0,0,0,0,78,49,48,95,95,99,120,120,97,98,105,118,49,49,54,95,95,115,104,105,109,95,116,121,112,101,95,105,110,102,111,69,0,0,0,0,0,0,0,0,48,53,0,0,32,52,0,0,248,51,0,0,0,0,0,0,78,49,48,95,95,99,120,120,97,98,105,118,49,49,55,95,95,99,108,97,115,115,95,116,121,112,101,95,105,110,102,111,69,0,0,0,0,0,0,0,48,53,0,0,88,52,0,0,72,52,0,0,0,0,0,0,78,49,48,95,95,99,120,120,97,98,105,118,49,49,57,95,95,112,111,105,110,116,101,114,95,116,121,112,101,95,105,110,102,111,69,0,0,0,0,0,78,49,48,95,95,99,120,120,97,98,105,118,49,49,55,95,95,112,98,97,115,101,95,116,121,112,101,95,105,110,102,111,69,0,0,0,0,0,0,0,48,53,0,0,184,52,0,0,72,52,0,0,0,0,0,0,48,53,0,0,144,52,0,0,224,52,0,0,0,0,0,0,0,0,0,0,128,52,0,0,81,1,0,0,82,1,0,0,83,1,0,0,84,1,0,0,85,1,0,0,86,1,0,0,87,1,0,0,88,1,0,0,0,0,0,0,120,53,0,0,81,1,0,0,89,1,0,0,83,1,0,0,84,1,0,0,85,1,0,0,90,1,0,0,91,1,0,0,92,1,0,0,78,49,48,95,95,99,120,120,97,98,105,118,49,50,48,95,95,115,105,95,99,108,97,115,115,95,116,121,112,101,95,105,110,102,111,69,0,0,0,0,48,53,0,0,80,53,0,0,128,52,0,0,0,0,0,0,0,0,0,0,216,53,0,0,81,1,0,0,93,1,0,0,83,1,0,0,84,1,0,0,85,1,0,0,94,1,0,0,95,1,0,0,96,1,0,0,78,49,48,95,95,99,120,120,97,98,105,118,49,50,49,95,95,118,109,105,95,99,108,97,115,115,95,116,121,112,101,95,105,110,102,111,69,0,0,0,48,53,0,0,176,53,0,0,128,52,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,0,1,2,3,4,5,6,7,8,9,255,255,255,255,255,255,255,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,255,255,255,255,255,255,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,0,0,0,0,0,0,0,0,1,2,4,7,3,6,5,0,0,0,0,0,0,0,0,105,110,102,105,110,105,116,121,0,0,0,0,0,0,0,0,110,97,110,0,0,0,0,0,95,112,137,0,255,9,47,15,10,0,0,0,100,0,0,0,232,3,0,0,16,39,0,0,160,134,1,0,64,66,15,0,128,150,152,0,0,225,245,5,17,0,10,0,17,17,17,0,0,0,0,5,0,0,0,0,0,0,9,0,0,0,0,11,0,0,0,0,0,0,0,0,17,0,15,10,17,17,17,3,10,7,0,1,19,9,11,11,0,0,9,6,11,0,0,11,0,6,17,0,0,0,17,17,17,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,11,0,0,0,0,0,0,0,0,17,0,10,10,17,17,17,0,10,0,0,2,0,9,11,0,0,0,9,0,11,0,0,11,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,12,0,0,0,0,0,0,0,0,0,0,0,12,0,0,0,0,12,0,0,0,0,9,12,0,0,0,0,0,12,0,0,12,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,14,0,0,0,0,0,0,0,0,0,0,0,13,0,0,0,4,13,0,0,0,0,9,14,0,0,0,0,0,14,0,0,14,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,16,0,0,0,0,0,0,0,0,0,0,0,15,0,0,0,0,15,0,0,0,0,9,16,0,0,0,0,0,16,0,0,16,0,0,18,0,0,0,18,18,18,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,18,0,0,0,18,18,18,0,0,0,0,0,0,9,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,11,0,0,0,0,0,0,0,0,0,0,0,10,0,0,0,0,10,0,0,0,0,9,11,0,0,0,0,0,11,0,0,11,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,12,0,0,0,0,0,0,0,0,0,0,0,12,0,0,0,0,12,0,0,0,0,9,12,0,0,0,0,0,12,0,0,12,0,0,45,43,32,32,32,48,88,48,120,0,0,0,0,0,0,0,40,110,117,108,108,41,0,0,45,48,88,43,48,88,32,48,88,45,48,120,43,48,120,32,48,120,0,0,0,0,0,0,105,110,102,0,0,0,0,0,73,78,70,0,0,0,0,0,110,97,110,0,0,0,0,0,78,65,78,0,0,0,0,0,48,49,50,51,52,53,54,55,56,57,65,66,67,68,69,70,46,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,97,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+11336);




var tempDoublePtr = Runtime.alignMemory(allocate(12, "i8", ALLOC_STATIC), 8);

assert(tempDoublePtr % 8 == 0);

function copyTempFloat(ptr) { // functions, because inlining this code increases code size too much

  HEAP8[tempDoublePtr] = HEAP8[ptr];

  HEAP8[tempDoublePtr+1] = HEAP8[ptr+1];

  HEAP8[tempDoublePtr+2] = HEAP8[ptr+2];

  HEAP8[tempDoublePtr+3] = HEAP8[ptr+3];

}

function copyTempDouble(ptr) {

  HEAP8[tempDoublePtr] = HEAP8[ptr];

  HEAP8[tempDoublePtr+1] = HEAP8[ptr+1];

  HEAP8[tempDoublePtr+2] = HEAP8[ptr+2];

  HEAP8[tempDoublePtr+3] = HEAP8[ptr+3];

  HEAP8[tempDoublePtr+4] = HEAP8[ptr+4];

  HEAP8[tempDoublePtr+5] = HEAP8[ptr+5];

  HEAP8[tempDoublePtr+6] = HEAP8[ptr+6];

  HEAP8[tempDoublePtr+7] = HEAP8[ptr+7];

}


  
  function _atexit(func, arg) {
      __ATEXIT__.unshift({ func: func, arg: arg });
    }function ___cxa_atexit() {
  return _atexit.apply(null, arguments)
  }

   
  Module["_i64Subtract"] = _i64Subtract;

  
  
  var ___errno_state=0;function ___setErrNo(value) {
      // For convenient setting and returning of errno.
      HEAP32[((___errno_state)>>2)]=value;
      return value;
    }
  
  var ERRNO_CODES={EPERM:1,ENOENT:2,ESRCH:3,EINTR:4,EIO:5,ENXIO:6,E2BIG:7,ENOEXEC:8,EBADF:9,ECHILD:10,EAGAIN:11,EWOULDBLOCK:11,ENOMEM:12,EACCES:13,EFAULT:14,ENOTBLK:15,EBUSY:16,EEXIST:17,EXDEV:18,ENODEV:19,ENOTDIR:20,EISDIR:21,EINVAL:22,ENFILE:23,EMFILE:24,ENOTTY:25,ETXTBSY:26,EFBIG:27,ENOSPC:28,ESPIPE:29,EROFS:30,EMLINK:31,EPIPE:32,EDOM:33,ERANGE:34,ENOMSG:42,EIDRM:43,ECHRNG:44,EL2NSYNC:45,EL3HLT:46,EL3RST:47,ELNRNG:48,EUNATCH:49,ENOCSI:50,EL2HLT:51,EDEADLK:35,ENOLCK:37,EBADE:52,EBADR:53,EXFULL:54,ENOANO:55,EBADRQC:56,EBADSLT:57,EDEADLOCK:35,EBFONT:59,ENOSTR:60,ENODATA:61,ETIME:62,ENOSR:63,ENONET:64,ENOPKG:65,EREMOTE:66,ENOLINK:67,EADV:68,ESRMNT:69,ECOMM:70,EPROTO:71,EMULTIHOP:72,EDOTDOT:73,EBADMSG:74,ENOTUNIQ:76,EBADFD:77,EREMCHG:78,ELIBACC:79,ELIBBAD:80,ELIBSCN:81,ELIBMAX:82,ELIBEXEC:83,ENOSYS:38,ENOTEMPTY:39,ENAMETOOLONG:36,ELOOP:40,EOPNOTSUPP:95,EPFNOSUPPORT:96,ECONNRESET:104,ENOBUFS:105,EAFNOSUPPORT:97,EPROTOTYPE:91,ENOTSOCK:88,ENOPROTOOPT:92,ESHUTDOWN:108,ECONNREFUSED:111,EADDRINUSE:98,ECONNABORTED:103,ENETUNREACH:101,ENETDOWN:100,ETIMEDOUT:110,EHOSTDOWN:112,EHOSTUNREACH:113,EINPROGRESS:115,EALREADY:114,EDESTADDRREQ:89,EMSGSIZE:90,EPROTONOSUPPORT:93,ESOCKTNOSUPPORT:94,EADDRNOTAVAIL:99,ENETRESET:102,EISCONN:106,ENOTCONN:107,ETOOMANYREFS:109,EUSERS:87,EDQUOT:122,ESTALE:116,ENOTSUP:95,ENOMEDIUM:123,EILSEQ:84,EOVERFLOW:75,ECANCELED:125,ENOTRECOVERABLE:131,EOWNERDEAD:130,ESTRPIPE:86};function _sysconf(name) {
      // long sysconf(int name);
      // http://pubs.opengroup.org/onlinepubs/009695399/functions/sysconf.html
      switch(name) {
        case 30: return PAGE_SIZE;
        case 132:
        case 133:
        case 12:
        case 137:
        case 138:
        case 15:
        case 235:
        case 16:
        case 17:
        case 18:
        case 19:
        case 20:
        case 149:
        case 13:
        case 10:
        case 236:
        case 153:
        case 9:
        case 21:
        case 22:
        case 159:
        case 154:
        case 14:
        case 77:
        case 78:
        case 139:
        case 80:
        case 81:
        case 79:
        case 82:
        case 68:
        case 67:
        case 164:
        case 11:
        case 29:
        case 47:
        case 48:
        case 95:
        case 52:
        case 51:
        case 46:
          return 200809;
        case 27:
        case 246:
        case 127:
        case 128:
        case 23:
        case 24:
        case 160:
        case 161:
        case 181:
        case 182:
        case 242:
        case 183:
        case 184:
        case 243:
        case 244:
        case 245:
        case 165:
        case 178:
        case 179:
        case 49:
        case 50:
        case 168:
        case 169:
        case 175:
        case 170:
        case 171:
        case 172:
        case 97:
        case 76:
        case 32:
        case 173:
        case 35:
          return -1;
        case 176:
        case 177:
        case 7:
        case 155:
        case 8:
        case 157:
        case 125:
        case 126:
        case 92:
        case 93:
        case 129:
        case 130:
        case 131:
        case 94:
        case 91:
          return 1;
        case 74:
        case 60:
        case 69:
        case 70:
        case 4:
          return 1024;
        case 31:
        case 42:
        case 72:
          return 32;
        case 87:
        case 26:
        case 33:
          return 2147483647;
        case 34:
        case 1:
          return 47839;
        case 38:
        case 36:
          return 99;
        case 43:
        case 37:
          return 2048;
        case 0: return 2097152;
        case 3: return 65536;
        case 28: return 32768;
        case 44: return 32767;
        case 75: return 16384;
        case 39: return 1000;
        case 89: return 700;
        case 71: return 256;
        case 40: return 255;
        case 2: return 100;
        case 180: return 64;
        case 25: return 20;
        case 5: return 16;
        case 6: return 6;
        case 73: return 4;
        case 84: {
          if (typeof navigator === 'object') return navigator['hardwareConcurrency'] || 1;
          return 1;
        }
      }
      ___setErrNo(ERRNO_CODES.EINVAL);
      return -1;
    }

  function ___errno_location() {
      return ___errno_state;
    }

  
  function __ZSt18uncaught_exceptionv() { // std::uncaught_exception()
      return !!__ZSt18uncaught_exceptionv.uncaught_exception;
    }
  
  
  
  var EXCEPTIONS={last:0,caught:[],infos:{},deAdjust:function (adjusted) {
        if (!adjusted || EXCEPTIONS.infos[adjusted]) return adjusted;
        for (var ptr in EXCEPTIONS.infos) {
          var info = EXCEPTIONS.infos[ptr];
          if (info.adjusted === adjusted) {
            return ptr;
          }
        }
        return adjusted;
      },addRef:function (ptr) {
        if (!ptr) return;
        var info = EXCEPTIONS.infos[ptr];
        info.refcount++;
      },decRef:function (ptr) {
        if (!ptr) return;
        var info = EXCEPTIONS.infos[ptr];
        assert(info.refcount > 0);
        info.refcount--;
        if (info.refcount === 0) {
          if (info.destructor) {
            Runtime.dynCall('vi', info.destructor, [ptr]);
          }
          delete EXCEPTIONS.infos[ptr];
          ___cxa_free_exception(ptr);
        }
      },clearRef:function (ptr) {
        if (!ptr) return;
        var info = EXCEPTIONS.infos[ptr];
        info.refcount = 0;
      }};
  function ___resumeException(ptr) {
      if (!EXCEPTIONS.last) { EXCEPTIONS.last = ptr; }
      EXCEPTIONS.clearRef(EXCEPTIONS.deAdjust(ptr)); // exception refcount should be cleared, but don't free it
      throw ptr;
    }function ___cxa_find_matching_catch() {
      var thrown = EXCEPTIONS.last;
      if (!thrown) {
        // just pass through the null ptr
        return ((asm["setTempRet0"](0),0)|0);
      }
      var info = EXCEPTIONS.infos[thrown];
      var throwntype = info.type;
      if (!throwntype) {
        // just pass through the thrown ptr
        return ((asm["setTempRet0"](0),thrown)|0);
      }
      var typeArray = Array.prototype.slice.call(arguments);
  
      var pointer = Module['___cxa_is_pointer_type'](throwntype);
      // can_catch receives a **, add indirection
      if (!___cxa_find_matching_catch.buffer) ___cxa_find_matching_catch.buffer = _malloc(4);
      HEAP32[((___cxa_find_matching_catch.buffer)>>2)]=thrown;
      thrown = ___cxa_find_matching_catch.buffer;
      // The different catch blocks are denoted by different types.
      // Due to inheritance, those types may not precisely match the
      // type of the thrown object. Find one which matches, and
      // return the type of the catch block which should be called.
      for (var i = 0; i < typeArray.length; i++) {
        if (typeArray[i] && Module['___cxa_can_catch'](typeArray[i], throwntype, thrown)) {
          thrown = HEAP32[((thrown)>>2)]; // undo indirection
          info.adjusted = thrown;
          return ((asm["setTempRet0"](typeArray[i]),thrown)|0);
        }
      }
      // Shouldn't happen unless we have bogus data in typeArray
      // or encounter a type for which emscripten doesn't have suitable
      // typeinfo defined. Best-efforts match just in case.
      thrown = HEAP32[((thrown)>>2)]; // undo indirection
      return ((asm["setTempRet0"](throwntype),thrown)|0);
    }function ___cxa_throw(ptr, type, destructor) {
      EXCEPTIONS.infos[ptr] = {
        ptr: ptr,
        adjusted: ptr,
        type: type,
        destructor: destructor,
        refcount: 0
      };
      EXCEPTIONS.last = ptr;
      if (!("uncaught_exception" in __ZSt18uncaught_exceptionv)) {
        __ZSt18uncaught_exceptionv.uncaught_exception = 1;
      } else {
        __ZSt18uncaught_exceptionv.uncaught_exception++;
      }
      throw ptr;
    }

   
  Module["_memset"] = _memset;

  var _BDtoILow=true;

  var _emscripten_resume=true;

  var _BItoD=true;

  var _emscripten_landingpad=true;

  
  
  function __isLeapYear(year) {
        return year%4 === 0 && (year%100 !== 0 || year%400 === 0);
    }
  
  function __arraySum(array, index) {
      var sum = 0;
      for (var i = 0; i <= index; sum += array[i++]);
      return sum;
    }
  
  
  var __MONTH_DAYS_LEAP=[31,29,31,30,31,30,31,31,30,31,30,31];
  
  var __MONTH_DAYS_REGULAR=[31,28,31,30,31,30,31,31,30,31,30,31];function __addDays(date, days) {
      var newDate = new Date(date.getTime());
      while(days > 0) {
        var leap = __isLeapYear(newDate.getFullYear());
        var currentMonth = newDate.getMonth();
        var daysInCurrentMonth = (leap ? __MONTH_DAYS_LEAP : __MONTH_DAYS_REGULAR)[currentMonth];
  
        if (days > daysInCurrentMonth-newDate.getDate()) {
          // we spill over to next month
          days -= (daysInCurrentMonth-newDate.getDate()+1);
          newDate.setDate(1);
          if (currentMonth < 11) {
            newDate.setMonth(currentMonth+1)
          } else {
            newDate.setMonth(0);
            newDate.setFullYear(newDate.getFullYear()+1);
          }
        } else {
          // we stay in current month 
          newDate.setDate(newDate.getDate()+days);
          return newDate;
        }
      }
  
      return newDate;
    }function _strftime(s, maxsize, format, tm) {
      // size_t strftime(char *restrict s, size_t maxsize, const char *restrict format, const struct tm *restrict timeptr);
      // http://pubs.opengroup.org/onlinepubs/009695399/functions/strftime.html
  
      var tm_zone = HEAP32[(((tm)+(40))>>2)];
  
      var date = {
        tm_sec: HEAP32[((tm)>>2)],
        tm_min: HEAP32[(((tm)+(4))>>2)],
        tm_hour: HEAP32[(((tm)+(8))>>2)],
        tm_mday: HEAP32[(((tm)+(12))>>2)],
        tm_mon: HEAP32[(((tm)+(16))>>2)],
        tm_year: HEAP32[(((tm)+(20))>>2)],
        tm_wday: HEAP32[(((tm)+(24))>>2)],
        tm_yday: HEAP32[(((tm)+(28))>>2)],
        tm_isdst: HEAP32[(((tm)+(32))>>2)],
        tm_gmtoff: HEAP32[(((tm)+(36))>>2)],
        tm_zone: tm_zone ? Pointer_stringify(tm_zone) : ''
      };
  
      var pattern = Pointer_stringify(format);
  
      // expand format
      var EXPANSION_RULES_1 = {
        '%c': '%a %b %d %H:%M:%S %Y',     // Replaced by the locale's appropriate date and time representation - e.g., Mon Aug  3 14:02:01 2013
        '%D': '%m/%d/%y',                 // Equivalent to %m / %d / %y
        '%F': '%Y-%m-%d',                 // Equivalent to %Y - %m - %d
        '%h': '%b',                       // Equivalent to %b
        '%r': '%I:%M:%S %p',              // Replaced by the time in a.m. and p.m. notation
        '%R': '%H:%M',                    // Replaced by the time in 24-hour notation
        '%T': '%H:%M:%S',                 // Replaced by the time
        '%x': '%m/%d/%y',                 // Replaced by the locale's appropriate date representation
        '%X': '%H:%M:%S',                 // Replaced by the locale's appropriate date representation
      };
      for (var rule in EXPANSION_RULES_1) {
        pattern = pattern.replace(new RegExp(rule, 'g'), EXPANSION_RULES_1[rule]);
      }
  
      var WEEKDAYS = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'];
      var MONTHS = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'];
  
      function leadingSomething(value, digits, character) {
        var str = typeof value === 'number' ? value.toString() : (value || '');
        while (str.length < digits) {
          str = character[0]+str;
        }
        return str;
      };
  
      function leadingNulls(value, digits) {
        return leadingSomething(value, digits, '0');
      };
  
      function compareByDay(date1, date2) {
        function sgn(value) {
          return value < 0 ? -1 : (value > 0 ? 1 : 0);
        };
  
        var compare;
        if ((compare = sgn(date1.getFullYear()-date2.getFullYear())) === 0) {
          if ((compare = sgn(date1.getMonth()-date2.getMonth())) === 0) {
            compare = sgn(date1.getDate()-date2.getDate());
          }
        }
        return compare;
      };
  
      function getFirstWeekStartDate(janFourth) {
          switch (janFourth.getDay()) {
            case 0: // Sunday
              return new Date(janFourth.getFullYear()-1, 11, 29);
            case 1: // Monday
              return janFourth;
            case 2: // Tuesday
              return new Date(janFourth.getFullYear(), 0, 3);
            case 3: // Wednesday
              return new Date(janFourth.getFullYear(), 0, 2);
            case 4: // Thursday
              return new Date(janFourth.getFullYear(), 0, 1);
            case 5: // Friday
              return new Date(janFourth.getFullYear()-1, 11, 31);
            case 6: // Saturday
              return new Date(janFourth.getFullYear()-1, 11, 30);
          }
      };
  
      function getWeekBasedYear(date) {
          var thisDate = __addDays(new Date(date.tm_year+1900, 0, 1), date.tm_yday);
  
          var janFourthThisYear = new Date(thisDate.getFullYear(), 0, 4);
          var janFourthNextYear = new Date(thisDate.getFullYear()+1, 0, 4);
  
          var firstWeekStartThisYear = getFirstWeekStartDate(janFourthThisYear);
          var firstWeekStartNextYear = getFirstWeekStartDate(janFourthNextYear);
  
          if (compareByDay(firstWeekStartThisYear, thisDate) <= 0) {
            // this date is after the start of the first week of this year
            if (compareByDay(firstWeekStartNextYear, thisDate) <= 0) {
              return thisDate.getFullYear()+1;
            } else {
              return thisDate.getFullYear();
            }
          } else { 
            return thisDate.getFullYear()-1;
          }
      };
  
      var EXPANSION_RULES_2 = {
        '%a': function(date) {
          return WEEKDAYS[date.tm_wday].substring(0,3);
        },
        '%A': function(date) {
          return WEEKDAYS[date.tm_wday];
        },
        '%b': function(date) {
          return MONTHS[date.tm_mon].substring(0,3);
        },
        '%B': function(date) {
          return MONTHS[date.tm_mon];
        },
        '%C': function(date) {
          var year = date.tm_year+1900;
          return leadingNulls((year/100)|0,2);
        },
        '%d': function(date) {
          return leadingNulls(date.tm_mday, 2);
        },
        '%e': function(date) {
          return leadingSomething(date.tm_mday, 2, ' ');
        },
        '%g': function(date) {
          // %g, %G, and %V give values according to the ISO 8601:2000 standard week-based year. 
          // In this system, weeks begin on a Monday and week 1 of the year is the week that includes 
          // January 4th, which is also the week that includes the first Thursday of the year, and 
          // is also the first week that contains at least four days in the year. 
          // If the first Monday of January is the 2nd, 3rd, or 4th, the preceding days are part of 
          // the last week of the preceding year; thus, for Saturday 2nd January 1999, 
          // %G is replaced by 1998 and %V is replaced by 53. If December 29th, 30th, 
          // or 31st is a Monday, it and any following days are part of week 1 of the following year. 
          // Thus, for Tuesday 30th December 1997, %G is replaced by 1998 and %V is replaced by 01.
          
          return getWeekBasedYear(date).toString().substring(2);
        },
        '%G': function(date) {
          return getWeekBasedYear(date);
        },
        '%H': function(date) {
          return leadingNulls(date.tm_hour, 2);
        },
        '%I': function(date) {
          return leadingNulls(date.tm_hour < 13 ? date.tm_hour : date.tm_hour-12, 2);
        },
        '%j': function(date) {
          // Day of the year (001-366)
          return leadingNulls(date.tm_mday+__arraySum(__isLeapYear(date.tm_year+1900) ? __MONTH_DAYS_LEAP : __MONTH_DAYS_REGULAR, date.tm_mon-1), 3);
        },
        '%m': function(date) {
          return leadingNulls(date.tm_mon+1, 2);
        },
        '%M': function(date) {
          return leadingNulls(date.tm_min, 2);
        },
        '%n': function() {
          return '\n';
        },
        '%p': function(date) {
          if (date.tm_hour > 0 && date.tm_hour < 13) {
            return 'AM';
          } else {
            return 'PM';
          }
        },
        '%S': function(date) {
          return leadingNulls(date.tm_sec, 2);
        },
        '%t': function() {
          return '\t';
        },
        '%u': function(date) {
          var day = new Date(date.tm_year+1900, date.tm_mon+1, date.tm_mday, 0, 0, 0, 0);
          return day.getDay() || 7;
        },
        '%U': function(date) {
          // Replaced by the week number of the year as a decimal number [00,53]. 
          // The first Sunday of January is the first day of week 1; 
          // days in the new year before this are in week 0. [ tm_year, tm_wday, tm_yday]
          var janFirst = new Date(date.tm_year+1900, 0, 1);
          var firstSunday = janFirst.getDay() === 0 ? janFirst : __addDays(janFirst, 7-janFirst.getDay());
          var endDate = new Date(date.tm_year+1900, date.tm_mon, date.tm_mday);
          
          // is target date after the first Sunday?
          if (compareByDay(firstSunday, endDate) < 0) {
            // calculate difference in days between first Sunday and endDate
            var februaryFirstUntilEndMonth = __arraySum(__isLeapYear(endDate.getFullYear()) ? __MONTH_DAYS_LEAP : __MONTH_DAYS_REGULAR, endDate.getMonth()-1)-31;
            var firstSundayUntilEndJanuary = 31-firstSunday.getDate();
            var days = firstSundayUntilEndJanuary+februaryFirstUntilEndMonth+endDate.getDate();
            return leadingNulls(Math.ceil(days/7), 2);
          }
  
          return compareByDay(firstSunday, janFirst) === 0 ? '01': '00';
        },
        '%V': function(date) {
          // Replaced by the week number of the year (Monday as the first day of the week) 
          // as a decimal number [01,53]. If the week containing 1 January has four 
          // or more days in the new year, then it is considered week 1. 
          // Otherwise, it is the last week of the previous year, and the next week is week 1. 
          // Both January 4th and the first Thursday of January are always in week 1. [ tm_year, tm_wday, tm_yday]
          var janFourthThisYear = new Date(date.tm_year+1900, 0, 4);
          var janFourthNextYear = new Date(date.tm_year+1901, 0, 4);
  
          var firstWeekStartThisYear = getFirstWeekStartDate(janFourthThisYear);
          var firstWeekStartNextYear = getFirstWeekStartDate(janFourthNextYear);
  
          var endDate = __addDays(new Date(date.tm_year+1900, 0, 1), date.tm_yday);
  
          if (compareByDay(endDate, firstWeekStartThisYear) < 0) {
            // if given date is before this years first week, then it belongs to the 53rd week of last year
            return '53';
          } 
  
          if (compareByDay(firstWeekStartNextYear, endDate) <= 0) {
            // if given date is after next years first week, then it belongs to the 01th week of next year
            return '01';
          }
  
          // given date is in between CW 01..53 of this calendar year
          var daysDifference;
          if (firstWeekStartThisYear.getFullYear() < date.tm_year+1900) {
            // first CW of this year starts last year
            daysDifference = date.tm_yday+32-firstWeekStartThisYear.getDate()
          } else {
            // first CW of this year starts this year
            daysDifference = date.tm_yday+1-firstWeekStartThisYear.getDate();
          }
          return leadingNulls(Math.ceil(daysDifference/7), 2);
        },
        '%w': function(date) {
          var day = new Date(date.tm_year+1900, date.tm_mon+1, date.tm_mday, 0, 0, 0, 0);
          return day.getDay();
        },
        '%W': function(date) {
          // Replaced by the week number of the year as a decimal number [00,53]. 
          // The first Monday of January is the first day of week 1; 
          // days in the new year before this are in week 0. [ tm_year, tm_wday, tm_yday]
          var janFirst = new Date(date.tm_year, 0, 1);
          var firstMonday = janFirst.getDay() === 1 ? janFirst : __addDays(janFirst, janFirst.getDay() === 0 ? 1 : 7-janFirst.getDay()+1);
          var endDate = new Date(date.tm_year+1900, date.tm_mon, date.tm_mday);
  
          // is target date after the first Monday?
          if (compareByDay(firstMonday, endDate) < 0) {
            var februaryFirstUntilEndMonth = __arraySum(__isLeapYear(endDate.getFullYear()) ? __MONTH_DAYS_LEAP : __MONTH_DAYS_REGULAR, endDate.getMonth()-1)-31;
            var firstMondayUntilEndJanuary = 31-firstMonday.getDate();
            var days = firstMondayUntilEndJanuary+februaryFirstUntilEndMonth+endDate.getDate();
            return leadingNulls(Math.ceil(days/7), 2);
          }
          return compareByDay(firstMonday, janFirst) === 0 ? '01': '00';
        },
        '%y': function(date) {
          // Replaced by the last two digits of the year as a decimal number [00,99]. [ tm_year]
          return (date.tm_year+1900).toString().substring(2);
        },
        '%Y': function(date) {
          // Replaced by the year as a decimal number (for example, 1997). [ tm_year]
          return date.tm_year+1900;
        },
        '%z': function(date) {
          // Replaced by the offset from UTC in the ISO 8601:2000 standard format ( +hhmm or -hhmm ).
          // For example, "-0430" means 4 hours 30 minutes behind UTC (west of Greenwich).
          var off = date.tm_gmtoff;
          var ahead = off >= 0;
          off = Math.abs(off) / 60;
          // convert from minutes into hhmm format (which means 60 minutes = 100 units)
          off = (off / 60)*100 + (off % 60);
          return (ahead ? '+' : '-') + String("0000" + off).slice(-4);
        },
        '%Z': function(date) {
          return date.tm_zone;
        },
        '%%': function() {
          return '%';
        }
      };
      for (var rule in EXPANSION_RULES_2) {
        if (pattern.indexOf(rule) >= 0) {
          pattern = pattern.replace(new RegExp(rule, 'g'), EXPANSION_RULES_2[rule](date));
        }
      }
  
      var bytes = intArrayFromString(pattern, false);
      if (bytes.length > maxsize) {
        return 0;
      } 
  
      writeArrayToMemory(bytes, s);
      return bytes.length-1;
    }function _strftime_l(s, maxsize, format, tm) {
      return _strftime(s, maxsize, format, tm); // no locale support yet
    }

  function _abort() {
      Module['abort']();
    }

  
  
  function _free() {
  }
  Module["_free"] = _free;function ___cxa_free_exception(ptr) {
      try {
        return _free(ptr);
      } catch(e) { // XXX FIXME
        Module.printErr('exception during cxa_free_exception: ' + e);
      }
    }function ___cxa_end_catch() {
      if (___cxa_end_catch.rethrown) {
        ___cxa_end_catch.rethrown = false;
        return;
      }
      // Clear state flag.
      asm['setThrew'](0);
      // Call destructor if one is registered then clear it.
      var ptr = EXCEPTIONS.caught.pop();
      if (ptr) {
        EXCEPTIONS.decRef(EXCEPTIONS.deAdjust(ptr));
        EXCEPTIONS.last = 0; // XXX in decRef?
      }
    }


  function _pthread_once(ptr, func) {
      if (!_pthread_once.seen) _pthread_once.seen = {};
      if (ptr in _pthread_once.seen) return;
      Runtime.dynCall('v', func);
      _pthread_once.seen[ptr] = 1;
    }

  
  
  var ERRNO_MESSAGES={0:"Success",1:"Not super-user",2:"No such file or directory",3:"No such process",4:"Interrupted system call",5:"I/O error",6:"No such device or address",7:"Arg list too long",8:"Exec format error",9:"Bad file number",10:"No children",11:"No more processes",12:"Not enough core",13:"Permission denied",14:"Bad address",15:"Block device required",16:"Mount device busy",17:"File exists",18:"Cross-device link",19:"No such device",20:"Not a directory",21:"Is a directory",22:"Invalid argument",23:"Too many open files in system",24:"Too many open files",25:"Not a typewriter",26:"Text file busy",27:"File too large",28:"No space left on device",29:"Illegal seek",30:"Read only file system",31:"Too many links",32:"Broken pipe",33:"Math arg out of domain of func",34:"Math result not representable",35:"File locking deadlock error",36:"File or path name too long",37:"No record locks available",38:"Function not implemented",39:"Directory not empty",40:"Too many symbolic links",42:"No message of desired type",43:"Identifier removed",44:"Channel number out of range",45:"Level 2 not synchronized",46:"Level 3 halted",47:"Level 3 reset",48:"Link number out of range",49:"Protocol driver not attached",50:"No CSI structure available",51:"Level 2 halted",52:"Invalid exchange",53:"Invalid request descriptor",54:"Exchange full",55:"No anode",56:"Invalid request code",57:"Invalid slot",59:"Bad font file fmt",60:"Device not a stream",61:"No data (for no delay io)",62:"Timer expired",63:"Out of streams resources",64:"Machine is not on the network",65:"Package not installed",66:"The object is remote",67:"The link has been severed",68:"Advertise error",69:"Srmount error",70:"Communication error on send",71:"Protocol error",72:"Multihop attempted",73:"Cross mount point (not really error)",74:"Trying to read unreadable message",75:"Value too large for defined data type",76:"Given log. name not unique",77:"f.d. invalid for this operation",78:"Remote address changed",79:"Can   access a needed shared lib",80:"Accessing a corrupted shared lib",81:".lib section in a.out corrupted",82:"Attempting to link in too many libs",83:"Attempting to exec a shared library",84:"Illegal byte sequence",86:"Streams pipe error",87:"Too many users",88:"Socket operation on non-socket",89:"Destination address required",90:"Message too long",91:"Protocol wrong type for socket",92:"Protocol not available",93:"Unknown protocol",94:"Socket type not supported",95:"Not supported",96:"Protocol family not supported",97:"Address family not supported by protocol family",98:"Address already in use",99:"Address not available",100:"Network interface is not configured",101:"Network is unreachable",102:"Connection reset by network",103:"Connection aborted",104:"Connection reset by peer",105:"No buffer space available",106:"Socket is already connected",107:"Socket is not connected",108:"Can't send after socket shutdown",109:"Too many references",110:"Connection timed out",111:"Connection refused",112:"Host is down",113:"Host is unreachable",114:"Socket already connected",115:"Connection already in progress",116:"Stale file handle",122:"Quota exceeded",123:"No medium (in tape drive)",125:"Operation canceled",130:"Previous owner died",131:"State not recoverable"};
  
  var PATH={splitPath:function (filename) {
        var splitPathRe = /^(\/?|)([\s\S]*?)((?:\.{1,2}|[^\/]+?|)(\.[^.\/]*|))(?:[\/]*)$/;
        return splitPathRe.exec(filename).slice(1);
      },normalizeArray:function (parts, allowAboveRoot) {
        // if the path tries to go above the root, `up` ends up > 0
        var up = 0;
        for (var i = parts.length - 1; i >= 0; i--) {
          var last = parts[i];
          if (last === '.') {
            parts.splice(i, 1);
          } else if (last === '..') {
            parts.splice(i, 1);
            up++;
          } else if (up) {
            parts.splice(i, 1);
            up--;
          }
        }
        // if the path is allowed to go above the root, restore leading ..s
        if (allowAboveRoot) {
          for (; up--; up) {
            parts.unshift('..');
          }
        }
        return parts;
      },normalize:function (path) {
        var isAbsolute = path.charAt(0) === '/',
            trailingSlash = path.substr(-1) === '/';
        // Normalize the path
        path = PATH.normalizeArray(path.split('/').filter(function(p) {
          return !!p;
        }), !isAbsolute).join('/');
        if (!path && !isAbsolute) {
          path = '.';
        }
        if (path && trailingSlash) {
          path += '/';
        }
        return (isAbsolute ? '/' : '') + path;
      },dirname:function (path) {
        var result = PATH.splitPath(path),
            root = result[0],
            dir = result[1];
        if (!root && !dir) {
          // No dirname whatsoever
          return '.';
        }
        if (dir) {
          // It has a dirname, strip trailing slash
          dir = dir.substr(0, dir.length - 1);
        }
        return root + dir;
      },basename:function (path) {
        // EMSCRIPTEN return '/'' for '/', not an empty string
        if (path === '/') return '/';
        var lastSlash = path.lastIndexOf('/');
        if (lastSlash === -1) return path;
        return path.substr(lastSlash+1);
      },extname:function (path) {
        return PATH.splitPath(path)[3];
      },join:function () {
        var paths = Array.prototype.slice.call(arguments, 0);
        return PATH.normalize(paths.join('/'));
      },join2:function (l, r) {
        return PATH.normalize(l + '/' + r);
      },resolve:function () {
        var resolvedPath = '',
          resolvedAbsolute = false;
        for (var i = arguments.length - 1; i >= -1 && !resolvedAbsolute; i--) {
          var path = (i >= 0) ? arguments[i] : FS.cwd();
          // Skip empty and invalid entries
          if (typeof path !== 'string') {
            throw new TypeError('Arguments to path.resolve must be strings');
          } else if (!path) {
            return ''; // an invalid portion invalidates the whole thing
          }
          resolvedPath = path + '/' + resolvedPath;
          resolvedAbsolute = path.charAt(0) === '/';
        }
        // At this point the path should be resolved to a full absolute path, but
        // handle relative paths to be safe (might happen when process.cwd() fails)
        resolvedPath = PATH.normalizeArray(resolvedPath.split('/').filter(function(p) {
          return !!p;
        }), !resolvedAbsolute).join('/');
        return ((resolvedAbsolute ? '/' : '') + resolvedPath) || '.';
      },relative:function (from, to) {
        from = PATH.resolve(from).substr(1);
        to = PATH.resolve(to).substr(1);
        function trim(arr) {
          var start = 0;
          for (; start < arr.length; start++) {
            if (arr[start] !== '') break;
          }
          var end = arr.length - 1;
          for (; end >= 0; end--) {
            if (arr[end] !== '') break;
          }
          if (start > end) return [];
          return arr.slice(start, end - start + 1);
        }
        var fromParts = trim(from.split('/'));
        var toParts = trim(to.split('/'));
        var length = Math.min(fromParts.length, toParts.length);
        var samePartsLength = length;
        for (var i = 0; i < length; i++) {
          if (fromParts[i] !== toParts[i]) {
            samePartsLength = i;
            break;
          }
        }
        var outputParts = [];
        for (var i = samePartsLength; i < fromParts.length; i++) {
          outputParts.push('..');
        }
        outputParts = outputParts.concat(toParts.slice(samePartsLength));
        return outputParts.join('/');
      }};
  
  var TTY={ttys:[],init:function () {
        // https://github.com/kripken/emscripten/pull/1555
        // if (ENVIRONMENT_IS_NODE) {
        //   // currently, FS.init does not distinguish if process.stdin is a file or TTY
        //   // device, it always assumes it's a TTY device. because of this, we're forcing
        //   // process.stdin to UTF8 encoding to at least make stdin reading compatible
        //   // with text files until FS.init can be refactored.
        //   process['stdin']['setEncoding']('utf8');
        // }
      },shutdown:function () {
        // https://github.com/kripken/emscripten/pull/1555
        // if (ENVIRONMENT_IS_NODE) {
        //   // inolen: any idea as to why node -e 'process.stdin.read()' wouldn't exit immediately (with process.stdin being a tty)?
        //   // isaacs: because now it's reading from the stream, you've expressed interest in it, so that read() kicks off a _read() which creates a ReadReq operation
        //   // inolen: I thought read() in that case was a synchronous operation that just grabbed some amount of buffered data if it exists?
        //   // isaacs: it is. but it also triggers a _read() call, which calls readStart() on the handle
        //   // isaacs: do process.stdin.pause() and i'd think it'd probably close the pending call
        //   process['stdin']['pause']();
        // }
      },register:function (dev, ops) {
        TTY.ttys[dev] = { input: [], output: [], ops: ops };
        FS.registerDevice(dev, TTY.stream_ops);
      },stream_ops:{open:function (stream) {
          var tty = TTY.ttys[stream.node.rdev];
          if (!tty) {
            throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
          }
          stream.tty = tty;
          stream.seekable = false;
        },close:function (stream) {
          // flush any pending line data
          if (stream.tty.output.length) {
            stream.tty.ops.put_char(stream.tty, 10);
          }
        },read:function (stream, buffer, offset, length, pos /* ignored */) {
          if (!stream.tty || !stream.tty.ops.get_char) {
            throw new FS.ErrnoError(ERRNO_CODES.ENXIO);
          }
          var bytesRead = 0;
          for (var i = 0; i < length; i++) {
            var result;
            try {
              result = stream.tty.ops.get_char(stream.tty);
            } catch (e) {
              throw new FS.ErrnoError(ERRNO_CODES.EIO);
            }
            if (result === undefined && bytesRead === 0) {
              throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
            }
            if (result === null || result === undefined) break;
            bytesRead++;
            buffer[offset+i] = result;
          }
          if (bytesRead) {
            stream.node.timestamp = Date.now();
          }
          return bytesRead;
        },write:function (stream, buffer, offset, length, pos) {
          if (!stream.tty || !stream.tty.ops.put_char) {
            throw new FS.ErrnoError(ERRNO_CODES.ENXIO);
          }
          for (var i = 0; i < length; i++) {
            try {
              stream.tty.ops.put_char(stream.tty, buffer[offset+i]);
            } catch (e) {
              throw new FS.ErrnoError(ERRNO_CODES.EIO);
            }
          }
          if (length) {
            stream.node.timestamp = Date.now();
          }
          return i;
        }},default_tty_ops:{get_char:function (tty) {
          if (!tty.input.length) {
            var result = null;
            if (ENVIRONMENT_IS_NODE) {
              result = process['stdin']['read']();
              if (!result) {
                if (process['stdin']['_readableState'] && process['stdin']['_readableState']['ended']) {
                  return null;  // EOF
                }
                return undefined;  // no data available
              }
            } else if (typeof window != 'undefined' &&
              typeof window.prompt == 'function') {
              // Browser.
              result = window.prompt('Input: ');  // returns null on cancel
              if (result !== null) {
                result += '\n';
              }
            } else if (typeof readline == 'function') {
              // Command line.
              result = readline();
              if (result !== null) {
                result += '\n';
              }
            }
            if (!result) {
              return null;
            }
            tty.input = intArrayFromString(result, true);
          }
          return tty.input.shift();
        },put_char:function (tty, val) {
          if (val === null || val === 10) {
            Module['print'](tty.output.join(''));
            tty.output = [];
          } else {
            tty.output.push(TTY.utf8.processCChar(val));
          }
        }},default_tty1_ops:{put_char:function (tty, val) {
          if (val === null || val === 10) {
            Module['printErr'](tty.output.join(''));
            tty.output = [];
          } else {
            tty.output.push(TTY.utf8.processCChar(val));
          }
        }}};
  
  var MEMFS={ops_table:null,mount:function (mount) {
        return MEMFS.createNode(null, '/', 16384 | 511 /* 0777 */, 0);
      },createNode:function (parent, name, mode, dev) {
        if (FS.isBlkdev(mode) || FS.isFIFO(mode)) {
          // no supported
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (!MEMFS.ops_table) {
          MEMFS.ops_table = {
            dir: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr,
                lookup: MEMFS.node_ops.lookup,
                mknod: MEMFS.node_ops.mknod,
                rename: MEMFS.node_ops.rename,
                unlink: MEMFS.node_ops.unlink,
                rmdir: MEMFS.node_ops.rmdir,
                readdir: MEMFS.node_ops.readdir,
                symlink: MEMFS.node_ops.symlink
              },
              stream: {
                llseek: MEMFS.stream_ops.llseek
              }
            },
            file: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr
              },
              stream: {
                llseek: MEMFS.stream_ops.llseek,
                read: MEMFS.stream_ops.read,
                write: MEMFS.stream_ops.write,
                allocate: MEMFS.stream_ops.allocate,
                mmap: MEMFS.stream_ops.mmap
              }
            },
            link: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr,
                readlink: MEMFS.node_ops.readlink
              },
              stream: {}
            },
            chrdev: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr
              },
              stream: FS.chrdev_stream_ops
            },
          };
        }
        var node = FS.createNode(parent, name, mode, dev);
        if (FS.isDir(node.mode)) {
          node.node_ops = MEMFS.ops_table.dir.node;
          node.stream_ops = MEMFS.ops_table.dir.stream;
          node.contents = {};
        } else if (FS.isFile(node.mode)) {
          node.node_ops = MEMFS.ops_table.file.node;
          node.stream_ops = MEMFS.ops_table.file.stream;
          node.usedBytes = 0; // The actual number of bytes used in the typed array, as opposed to contents.buffer.byteLength which gives the whole capacity.
          // When the byte data of the file is populated, this will point to either a typed array, or a normal JS array. Typed arrays are preferred
          // for performance, and used by default. However, typed arrays are not resizable like normal JS arrays are, so there is a small disk size
          // penalty involved for appending file writes that continuously grow a file similar to std::vector capacity vs used -scheme.
          node.contents = null; 
        } else if (FS.isLink(node.mode)) {
          node.node_ops = MEMFS.ops_table.link.node;
          node.stream_ops = MEMFS.ops_table.link.stream;
        } else if (FS.isChrdev(node.mode)) {
          node.node_ops = MEMFS.ops_table.chrdev.node;
          node.stream_ops = MEMFS.ops_table.chrdev.stream;
        }
        node.timestamp = Date.now();
        // add the new node to the parent
        if (parent) {
          parent.contents[name] = node;
        }
        return node;
      },getFileDataAsRegularArray:function (node) {
        if (node.contents && node.contents.subarray) {
          var arr = [];
          for (var i = 0; i < node.usedBytes; ++i) arr.push(node.contents[i]);
          return arr; // Returns a copy of the original data.
        }
        return node.contents; // No-op, the file contents are already in a JS array. Return as-is.
      },getFileDataAsTypedArray:function (node) {
        if (node.contents && node.contents.subarray) return node.contents.subarray(0, node.usedBytes); // Make sure to not return excess unused bytes.
        return new Uint8Array(node.contents);
      },expandFileStorage:function (node, newCapacity) {
  
        // If we are asked to expand the size of a file that already exists, revert to using a standard JS array to store the file
        // instead of a typed array. This makes resizing the array more flexible because we can just .push() elements at the back to
        // increase the size.
        if (node.contents && node.contents.subarray && newCapacity > node.contents.length) {
          node.contents = MEMFS.getFileDataAsRegularArray(node);
          node.usedBytes = node.contents.length; // We might be writing to a lazy-loaded file which had overridden this property, so force-reset it.
        }
  
        if (!node.contents || node.contents.subarray) { // Keep using a typed array if creating a new storage, or if old one was a typed array as well.
          var prevCapacity = node.contents ? node.contents.buffer.byteLength : 0;
          if (prevCapacity >= newCapacity) return; // No need to expand, the storage was already large enough.
          // Don't expand strictly to the given requested limit if it's only a very small increase, but instead geometrically grow capacity.
          // For small filesizes (<1MB), perform size*2 geometric increase, but for large sizes, do a much more conservative size*1.125 increase to
          // avoid overshooting the allocation cap by a very large margin.
          var CAPACITY_DOUBLING_MAX = 1024 * 1024;
          newCapacity = Math.max(newCapacity, (prevCapacity * (prevCapacity < CAPACITY_DOUBLING_MAX ? 2.0 : 1.125)) | 0);
          if (prevCapacity != 0) newCapacity = Math.max(newCapacity, 256); // At minimum allocate 256b for each file when expanding.
          var oldContents = node.contents;
          node.contents = new Uint8Array(newCapacity); // Allocate new storage.
          if (node.usedBytes > 0) node.contents.set(oldContents.subarray(0, node.usedBytes), 0); // Copy old data over to the new storage.
          return;
        }
        // Not using a typed array to back the file storage. Use a standard JS array instead.
        if (!node.contents && newCapacity > 0) node.contents = [];
        while (node.contents.length < newCapacity) node.contents.push(0);
      },resizeFileStorage:function (node, newSize) {
        if (node.usedBytes == newSize) return;
        if (newSize == 0) {
          node.contents = null; // Fully decommit when requesting a resize to zero.
          node.usedBytes = 0;
          return;
        }
  
        if (!node.contents || node.contents.subarray) { // Resize a typed array if that is being used as the backing store.
          var oldContents = node.contents;
          node.contents = new Uint8Array(new ArrayBuffer(newSize)); // Allocate new storage.
          if (oldContents) {
            node.contents.set(oldContents.subarray(0, Math.min(newSize, node.usedBytes))); // Copy old data over to the new storage.
          }
          node.usedBytes = newSize;
          return;
        }
        // Backing with a JS array.
        if (!node.contents) node.contents = [];
        if (node.contents.length > newSize) node.contents.length = newSize;
        else while (node.contents.length < newSize) node.contents.push(0);
        node.usedBytes = newSize;
      },node_ops:{getattr:function (node) {
          var attr = {};
          // device numbers reuse inode numbers.
          attr.dev = FS.isChrdev(node.mode) ? node.id : 1;
          attr.ino = node.id;
          attr.mode = node.mode;
          attr.nlink = 1;
          attr.uid = 0;
          attr.gid = 0;
          attr.rdev = node.rdev;
          if (FS.isDir(node.mode)) {
            attr.size = 4096;
          } else if (FS.isFile(node.mode)) {
            attr.size = node.usedBytes;
          } else if (FS.isLink(node.mode)) {
            attr.size = node.link.length;
          } else {
            attr.size = 0;
          }
          attr.atime = new Date(node.timestamp);
          attr.mtime = new Date(node.timestamp);
          attr.ctime = new Date(node.timestamp);
          // NOTE: In our implementation, st_blocks = Math.ceil(st_size/st_blksize),
          //       but this is not required by the standard.
          attr.blksize = 4096;
          attr.blocks = Math.ceil(attr.size / attr.blksize);
          return attr;
        },setattr:function (node, attr) {
          if (attr.mode !== undefined) {
            node.mode = attr.mode;
          }
          if (attr.timestamp !== undefined) {
            node.timestamp = attr.timestamp;
          }
          if (attr.size !== undefined) {
            MEMFS.resizeFileStorage(node, attr.size);
          }
        },lookup:function (parent, name) {
          throw FS.genericErrors[ERRNO_CODES.ENOENT];
        },mknod:function (parent, name, mode, dev) {
          return MEMFS.createNode(parent, name, mode, dev);
        },rename:function (old_node, new_dir, new_name) {
          // if we're overwriting a directory at new_name, make sure it's empty.
          if (FS.isDir(old_node.mode)) {
            var new_node;
            try {
              new_node = FS.lookupNode(new_dir, new_name);
            } catch (e) {
            }
            if (new_node) {
              for (var i in new_node.contents) {
                throw new FS.ErrnoError(ERRNO_CODES.ENOTEMPTY);
              }
            }
          }
          // do the internal rewiring
          delete old_node.parent.contents[old_node.name];
          old_node.name = new_name;
          new_dir.contents[new_name] = old_node;
          old_node.parent = new_dir;
        },unlink:function (parent, name) {
          delete parent.contents[name];
        },rmdir:function (parent, name) {
          var node = FS.lookupNode(parent, name);
          for (var i in node.contents) {
            throw new FS.ErrnoError(ERRNO_CODES.ENOTEMPTY);
          }
          delete parent.contents[name];
        },readdir:function (node) {
          var entries = ['.', '..']
          for (var key in node.contents) {
            if (!node.contents.hasOwnProperty(key)) {
              continue;
            }
            entries.push(key);
          }
          return entries;
        },symlink:function (parent, newname, oldpath) {
          var node = MEMFS.createNode(parent, newname, 511 /* 0777 */ | 40960, 0);
          node.link = oldpath;
          return node;
        },readlink:function (node) {
          if (!FS.isLink(node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
          return node.link;
        }},stream_ops:{read:function (stream, buffer, offset, length, position) {
          var contents = stream.node.contents;
          if (position >= stream.node.usedBytes) return 0;
          var size = Math.min(stream.node.usedBytes - position, length);
          assert(size >= 0);
          if (size > 8 && contents.subarray) { // non-trivial, and typed array
            buffer.set(contents.subarray(position, position + size), offset);
          } else
          {
            for (var i = 0; i < size; i++) buffer[offset + i] = contents[position + i];
          }
          return size;
        },write:function (stream, buffer, offset, length, position, canOwn) {
          if (!length) return 0;
          var node = stream.node;
          node.timestamp = Date.now();
  
          if (buffer.subarray && (!node.contents || node.contents.subarray)) { // This write is from a typed array to a typed array?
            if (canOwn) { // Can we just reuse the buffer we are given?
              assert(position === 0, 'canOwn must imply no weird position inside the file');
              node.contents = buffer.subarray(offset, offset + length);
              node.usedBytes = length;
              return length;
            } else if (node.usedBytes === 0 && position === 0) { // If this is a simple first write to an empty file, do a fast set since we don't need to care about old data.
              node.contents = new Uint8Array(buffer.subarray(offset, offset + length));
              node.usedBytes = length;
              return length;
            } else if (position + length <= node.usedBytes) { // Writing to an already allocated and used subrange of the file?
              node.contents.set(buffer.subarray(offset, offset + length), position);
              return length;
            }
          }
          // Appending to an existing file and we need to reallocate, or source data did not come as a typed array.
          MEMFS.expandFileStorage(node, position+length);
          if (node.contents.subarray && buffer.subarray) node.contents.set(buffer.subarray(offset, offset + length), position); // Use typed array write if available.
          else
            for (var i = 0; i < length; i++) {
             node.contents[position + i] = buffer[offset + i]; // Or fall back to manual write if not.
            }
          node.usedBytes = Math.max(node.usedBytes, position+length);
          return length;
        },llseek:function (stream, offset, whence) {
          var position = offset;
          if (whence === 1) {  // SEEK_CUR.
            position += stream.position;
          } else if (whence === 2) {  // SEEK_END.
            if (FS.isFile(stream.node.mode)) {
              position += stream.node.usedBytes;
            }
          }
          if (position < 0) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
          stream.ungotten = [];
          stream.position = position;
          return position;
        },allocate:function (stream, offset, length) {
          MEMFS.expandFileStorage(stream.node, offset + length);
          stream.node.usedBytes = Math.max(stream.node.usedBytes, offset + length);
        },mmap:function (stream, buffer, offset, length, position, prot, flags) {
          if (!FS.isFile(stream.node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
          }
          var ptr;
          var allocated;
          var contents = stream.node.contents;
          // Only make a new copy when MAP_PRIVATE is specified.
          if ( !(flags & 2) &&
                (contents.buffer === buffer || contents.buffer === buffer.buffer) ) {
            // We can't emulate MAP_SHARED when the file is not backed by the buffer
            // we're mapping to (e.g. the HEAP buffer).
            allocated = false;
            ptr = contents.byteOffset;
          } else {
            // Try to avoid unnecessary slices.
            if (position > 0 || position + length < stream.node.usedBytes) {
              if (contents.subarray) {
                contents = contents.subarray(position, position + length);
              } else {
                contents = Array.prototype.slice.call(contents, position, position + length);
              }
            }
            allocated = true;
            ptr = _malloc(length);
            if (!ptr) {
              throw new FS.ErrnoError(ERRNO_CODES.ENOMEM);
            }
            buffer.set(contents, ptr);
          }
          return { ptr: ptr, allocated: allocated };
        }}};
  
  var IDBFS={dbs:{},indexedDB:function () {
        if (typeof indexedDB !== 'undefined') return indexedDB;
        var ret = null;
        if (typeof window === 'object') ret = window.indexedDB || window.mozIndexedDB || window.webkitIndexedDB || window.msIndexedDB;
        assert(ret, 'IDBFS used, but indexedDB not supported');
        return ret;
      },DB_VERSION:21,DB_STORE_NAME:"FILE_DATA",mount:function (mount) {
        // reuse all of the core MEMFS functionality
        return MEMFS.mount.apply(null, arguments);
      },syncfs:function (mount, populate, callback) {
        IDBFS.getLocalSet(mount, function(err, local) {
          if (err) return callback(err);
  
          IDBFS.getRemoteSet(mount, function(err, remote) {
            if (err) return callback(err);
  
            var src = populate ? remote : local;
            var dst = populate ? local : remote;
  
            IDBFS.reconcile(src, dst, callback);
          });
        });
      },getDB:function (name, callback) {
        // check the cache first
        var db = IDBFS.dbs[name];
        if (db) {
          return callback(null, db);
        }
  
        var req;
        try {
          req = IDBFS.indexedDB().open(name, IDBFS.DB_VERSION);
        } catch (e) {
          return callback(e);
        }
        req.onupgradeneeded = function(e) {
          var db = e.target.result;
          var transaction = e.target.transaction;
  
          var fileStore;
  
          if (db.objectStoreNames.contains(IDBFS.DB_STORE_NAME)) {
            fileStore = transaction.objectStore(IDBFS.DB_STORE_NAME);
          } else {
            fileStore = db.createObjectStore(IDBFS.DB_STORE_NAME);
          }
  
          fileStore.createIndex('timestamp', 'timestamp', { unique: false });
        };
        req.onsuccess = function() {
          db = req.result;
  
          // add to the cache
          IDBFS.dbs[name] = db;
          callback(null, db);
        };
        req.onerror = function() {
          callback(this.error);
        };
      },getLocalSet:function (mount, callback) {
        var entries = {};
  
        function isRealDir(p) {
          return p !== '.' && p !== '..';
        };
        function toAbsolute(root) {
          return function(p) {
            return PATH.join2(root, p);
          }
        };
  
        var check = FS.readdir(mount.mountpoint).filter(isRealDir).map(toAbsolute(mount.mountpoint));
  
        while (check.length) {
          var path = check.pop();
          var stat;
  
          try {
            stat = FS.stat(path);
          } catch (e) {
            return callback(e);
          }
  
          if (FS.isDir(stat.mode)) {
            check.push.apply(check, FS.readdir(path).filter(isRealDir).map(toAbsolute(path)));
          }
  
          entries[path] = { timestamp: stat.mtime };
        }
  
        return callback(null, { type: 'local', entries: entries });
      },getRemoteSet:function (mount, callback) {
        var entries = {};
  
        IDBFS.getDB(mount.mountpoint, function(err, db) {
          if (err) return callback(err);
  
          var transaction = db.transaction([IDBFS.DB_STORE_NAME], 'readonly');
          transaction.onerror = function() { callback(this.error); };
  
          var store = transaction.objectStore(IDBFS.DB_STORE_NAME);
          var index = store.index('timestamp');
  
          index.openKeyCursor().onsuccess = function(event) {
            var cursor = event.target.result;
  
            if (!cursor) {
              return callback(null, { type: 'remote', db: db, entries: entries });
            }
  
            entries[cursor.primaryKey] = { timestamp: cursor.key };
  
            cursor.continue();
          };
        });
      },loadLocalEntry:function (path, callback) {
        var stat, node;
  
        try {
          var lookup = FS.lookupPath(path);
          node = lookup.node;
          stat = FS.stat(path);
        } catch (e) {
          return callback(e);
        }
  
        if (FS.isDir(stat.mode)) {
          return callback(null, { timestamp: stat.mtime, mode: stat.mode });
        } else if (FS.isFile(stat.mode)) {
          // Performance consideration: storing a normal JavaScript array to a IndexedDB is much slower than storing a typed array.
          // Therefore always convert the file contents to a typed array first before writing the data to IndexedDB.
          node.contents = MEMFS.getFileDataAsTypedArray(node);
          return callback(null, { timestamp: stat.mtime, mode: stat.mode, contents: node.contents });
        } else {
          return callback(new Error('node type not supported'));
        }
      },storeLocalEntry:function (path, entry, callback) {
        try {
          if (FS.isDir(entry.mode)) {
            FS.mkdir(path, entry.mode);
          } else if (FS.isFile(entry.mode)) {
            FS.writeFile(path, entry.contents, { encoding: 'binary', canOwn: true });
          } else {
            return callback(new Error('node type not supported'));
          }
  
          FS.chmod(path, entry.mode);
          FS.utime(path, entry.timestamp, entry.timestamp);
        } catch (e) {
          return callback(e);
        }
  
        callback(null);
      },removeLocalEntry:function (path, callback) {
        try {
          var lookup = FS.lookupPath(path);
          var stat = FS.stat(path);
  
          if (FS.isDir(stat.mode)) {
            FS.rmdir(path);
          } else if (FS.isFile(stat.mode)) {
            FS.unlink(path);
          }
        } catch (e) {
          return callback(e);
        }
  
        callback(null);
      },loadRemoteEntry:function (store, path, callback) {
        var req = store.get(path);
        req.onsuccess = function(event) { callback(null, event.target.result); };
        req.onerror = function() { callback(this.error); };
      },storeRemoteEntry:function (store, path, entry, callback) {
        var req = store.put(entry, path);
        req.onsuccess = function() { callback(null); };
        req.onerror = function() { callback(this.error); };
      },removeRemoteEntry:function (store, path, callback) {
        var req = store.delete(path);
        req.onsuccess = function() { callback(null); };
        req.onerror = function() { callback(this.error); };
      },reconcile:function (src, dst, callback) {
        var total = 0;
  
        var create = [];
        Object.keys(src.entries).forEach(function (key) {
          var e = src.entries[key];
          var e2 = dst.entries[key];
          if (!e2 || e.timestamp > e2.timestamp) {
            create.push(key);
            total++;
          }
        });
  
        var remove = [];
        Object.keys(dst.entries).forEach(function (key) {
          var e = dst.entries[key];
          var e2 = src.entries[key];
          if (!e2) {
            remove.push(key);
            total++;
          }
        });
  
        if (!total) {
          return callback(null);
        }
  
        var errored = false;
        var completed = 0;
        var db = src.type === 'remote' ? src.db : dst.db;
        var transaction = db.transaction([IDBFS.DB_STORE_NAME], 'readwrite');
        var store = transaction.objectStore(IDBFS.DB_STORE_NAME);
  
        function done(err) {
          if (err) {
            if (!done.errored) {
              done.errored = true;
              return callback(err);
            }
            return;
          }
          if (++completed >= total) {
            return callback(null);
          }
        };
  
        transaction.onerror = function() { done(this.error); };
  
        // sort paths in ascending order so directory entries are created
        // before the files inside them
        create.sort().forEach(function (path) {
          if (dst.type === 'local') {
            IDBFS.loadRemoteEntry(store, path, function (err, entry) {
              if (err) return done(err);
              IDBFS.storeLocalEntry(path, entry, done);
            });
          } else {
            IDBFS.loadLocalEntry(path, function (err, entry) {
              if (err) return done(err);
              IDBFS.storeRemoteEntry(store, path, entry, done);
            });
          }
        });
  
        // sort paths in descending order so files are deleted before their
        // parent directories
        remove.sort().reverse().forEach(function(path) {
          if (dst.type === 'local') {
            IDBFS.removeLocalEntry(path, done);
          } else {
            IDBFS.removeRemoteEntry(store, path, done);
          }
        });
      }};
  
  var NODEFS={isWindows:false,staticInit:function () {
        NODEFS.isWindows = !!process.platform.match(/^win/);
      },mount:function (mount) {
        assert(ENVIRONMENT_IS_NODE);
        return NODEFS.createNode(null, '/', NODEFS.getMode(mount.opts.root), 0);
      },createNode:function (parent, name, mode, dev) {
        if (!FS.isDir(mode) && !FS.isFile(mode) && !FS.isLink(mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var node = FS.createNode(parent, name, mode);
        node.node_ops = NODEFS.node_ops;
        node.stream_ops = NODEFS.stream_ops;
        return node;
      },getMode:function (path) {
        var stat;
        try {
          stat = fs.lstatSync(path);
          if (NODEFS.isWindows) {
            // On Windows, directories return permission bits 'rw-rw-rw-', even though they have 'rwxrwxrwx', so 
            // propagate write bits to execute bits.
            stat.mode = stat.mode | ((stat.mode & 146) >> 1);
          }
        } catch (e) {
          if (!e.code) throw e;
          throw new FS.ErrnoError(ERRNO_CODES[e.code]);
        }
        return stat.mode;
      },realPath:function (node) {
        var parts = [];
        while (node.parent !== node) {
          parts.push(node.name);
          node = node.parent;
        }
        parts.push(node.mount.opts.root);
        parts.reverse();
        return PATH.join.apply(null, parts);
      },flagsToPermissionStringMap:{0:"r",1:"r+",2:"r+",64:"r",65:"r+",66:"r+",129:"rx+",193:"rx+",514:"w+",577:"w",578:"w+",705:"wx",706:"wx+",1024:"a",1025:"a",1026:"a+",1089:"a",1090:"a+",1153:"ax",1154:"ax+",1217:"ax",1218:"ax+",4096:"rs",4098:"rs+"},flagsToPermissionString:function (flags) {
        if (flags in NODEFS.flagsToPermissionStringMap) {
          return NODEFS.flagsToPermissionStringMap[flags];
        } else {
          return flags;
        }
      },node_ops:{getattr:function (node) {
          var path = NODEFS.realPath(node);
          var stat;
          try {
            stat = fs.lstatSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          // node.js v0.10.20 doesn't report blksize and blocks on Windows. Fake them with default blksize of 4096.
          // See http://support.microsoft.com/kb/140365
          if (NODEFS.isWindows && !stat.blksize) {
            stat.blksize = 4096;
          }
          if (NODEFS.isWindows && !stat.blocks) {
            stat.blocks = (stat.size+stat.blksize-1)/stat.blksize|0;
          }
          return {
            dev: stat.dev,
            ino: stat.ino,
            mode: stat.mode,
            nlink: stat.nlink,
            uid: stat.uid,
            gid: stat.gid,
            rdev: stat.rdev,
            size: stat.size,
            atime: stat.atime,
            mtime: stat.mtime,
            ctime: stat.ctime,
            blksize: stat.blksize,
            blocks: stat.blocks
          };
        },setattr:function (node, attr) {
          var path = NODEFS.realPath(node);
          try {
            if (attr.mode !== undefined) {
              fs.chmodSync(path, attr.mode);
              // update the common node structure mode as well
              node.mode = attr.mode;
            }
            if (attr.timestamp !== undefined) {
              var date = new Date(attr.timestamp);
              fs.utimesSync(path, date, date);
            }
            if (attr.size !== undefined) {
              fs.truncateSync(path, attr.size);
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },lookup:function (parent, name) {
          var path = PATH.join2(NODEFS.realPath(parent), name);
          var mode = NODEFS.getMode(path);
          return NODEFS.createNode(parent, name, mode);
        },mknod:function (parent, name, mode, dev) {
          var node = NODEFS.createNode(parent, name, mode, dev);
          // create the backing node for this in the fs root as well
          var path = NODEFS.realPath(node);
          try {
            if (FS.isDir(node.mode)) {
              fs.mkdirSync(path, node.mode);
            } else {
              fs.writeFileSync(path, '', { mode: node.mode });
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          return node;
        },rename:function (oldNode, newDir, newName) {
          var oldPath = NODEFS.realPath(oldNode);
          var newPath = PATH.join2(NODEFS.realPath(newDir), newName);
          try {
            fs.renameSync(oldPath, newPath);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },unlink:function (parent, name) {
          var path = PATH.join2(NODEFS.realPath(parent), name);
          try {
            fs.unlinkSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },rmdir:function (parent, name) {
          var path = PATH.join2(NODEFS.realPath(parent), name);
          try {
            fs.rmdirSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },readdir:function (node) {
          var path = NODEFS.realPath(node);
          try {
            return fs.readdirSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },symlink:function (parent, newName, oldPath) {
          var newPath = PATH.join2(NODEFS.realPath(parent), newName);
          try {
            fs.symlinkSync(oldPath, newPath);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },readlink:function (node) {
          var path = NODEFS.realPath(node);
          try {
            return fs.readlinkSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        }},stream_ops:{open:function (stream) {
          var path = NODEFS.realPath(stream.node);
          try {
            if (FS.isFile(stream.node.mode)) {
              stream.nfd = fs.openSync(path, NODEFS.flagsToPermissionString(stream.flags));
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },close:function (stream) {
          try {
            if (FS.isFile(stream.node.mode) && stream.nfd) {
              fs.closeSync(stream.nfd);
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },read:function (stream, buffer, offset, length, position) {
          // FIXME this is terrible.
          var nbuffer = new Buffer(length);
          var res;
          try {
            res = fs.readSync(stream.nfd, nbuffer, 0, length, position);
          } catch (e) {
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          if (res > 0) {
            for (var i = 0; i < res; i++) {
              buffer[offset + i] = nbuffer[i];
            }
          }
          return res;
        },write:function (stream, buffer, offset, length, position) {
          // FIXME this is terrible.
          var nbuffer = new Buffer(buffer.subarray(offset, offset + length));
          var res;
          try {
            res = fs.writeSync(stream.nfd, nbuffer, 0, length, position);
          } catch (e) {
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          return res;
        },llseek:function (stream, offset, whence) {
          var position = offset;
          if (whence === 1) {  // SEEK_CUR.
            position += stream.position;
          } else if (whence === 2) {  // SEEK_END.
            if (FS.isFile(stream.node.mode)) {
              try {
                var stat = fs.fstatSync(stream.nfd);
                position += stat.size;
              } catch (e) {
                throw new FS.ErrnoError(ERRNO_CODES[e.code]);
              }
            }
          }
  
          if (position < 0) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
  
          stream.position = position;
          return position;
        }}};
  
  var _stdin=allocate(1, "i32*", ALLOC_STATIC);
  
  var _stdout=allocate(1, "i32*", ALLOC_STATIC);
  
  var _stderr=allocate(1, "i32*", ALLOC_STATIC);var FS={root:null,mounts:[],devices:[null],streams:[],nextInode:1,nameTable:null,currentPath:"/",initialized:false,ignorePermissions:true,trackingDelegate:{},tracking:{openFlags:{READ:1,WRITE:2}},ErrnoError:null,genericErrors:{},handleFSError:function (e) {
        if (!(e instanceof FS.ErrnoError)) throw e + ' : ' + stackTrace();
        return ___setErrNo(e.errno);
      },lookupPath:function (path, opts) {
        path = PATH.resolve(FS.cwd(), path);
        opts = opts || {};
  
        if (!path) return { path: '', node: null };
  
        var defaults = {
          follow_mount: true,
          recurse_count: 0
        };
        for (var key in defaults) {
          if (opts[key] === undefined) {
            opts[key] = defaults[key];
          }
        }
  
        if (opts.recurse_count > 8) {  // max recursive lookup of 8
          throw new FS.ErrnoError(ERRNO_CODES.ELOOP);
        }
  
        // split the path
        var parts = PATH.normalizeArray(path.split('/').filter(function(p) {
          return !!p;
        }), false);
  
        // start at the root
        var current = FS.root;
        var current_path = '/';
  
        for (var i = 0; i < parts.length; i++) {
          var islast = (i === parts.length-1);
          if (islast && opts.parent) {
            // stop resolving
            break;
          }
  
          current = FS.lookupNode(current, parts[i]);
          current_path = PATH.join2(current_path, parts[i]);
  
          // jump to the mount's root node if this is a mountpoint
          if (FS.isMountpoint(current)) {
            if (!islast || (islast && opts.follow_mount)) {
              current = current.mounted.root;
            }
          }
  
          // by default, lookupPath will not follow a symlink if it is the final path component.
          // setting opts.follow = true will override this behavior.
          if (!islast || opts.follow) {
            var count = 0;
            while (FS.isLink(current.mode)) {
              var link = FS.readlink(current_path);
              current_path = PATH.resolve(PATH.dirname(current_path), link);
              
              var lookup = FS.lookupPath(current_path, { recurse_count: opts.recurse_count });
              current = lookup.node;
  
              if (count++ > 40) {  // limit max consecutive symlinks to 40 (SYMLOOP_MAX).
                throw new FS.ErrnoError(ERRNO_CODES.ELOOP);
              }
            }
          }
        }
  
        return { path: current_path, node: current };
      },getPath:function (node) {
        var path;
        while (true) {
          if (FS.isRoot(node)) {
            var mount = node.mount.mountpoint;
            if (!path) return mount;
            return mount[mount.length-1] !== '/' ? mount + '/' + path : mount + path;
          }
          path = path ? node.name + '/' + path : node.name;
          node = node.parent;
        }
      },hashName:function (parentid, name) {
        var hash = 0;
  
  
        for (var i = 0; i < name.length; i++) {
          hash = ((hash << 5) - hash + name.charCodeAt(i)) | 0;
        }
        return ((parentid + hash) >>> 0) % FS.nameTable.length;
      },hashAddNode:function (node) {
        var hash = FS.hashName(node.parent.id, node.name);
        node.name_next = FS.nameTable[hash];
        FS.nameTable[hash] = node;
      },hashRemoveNode:function (node) {
        var hash = FS.hashName(node.parent.id, node.name);
        if (FS.nameTable[hash] === node) {
          FS.nameTable[hash] = node.name_next;
        } else {
          var current = FS.nameTable[hash];
          while (current) {
            if (current.name_next === node) {
              current.name_next = node.name_next;
              break;
            }
            current = current.name_next;
          }
        }
      },lookupNode:function (parent, name) {
        var err = FS.mayLookup(parent);
        if (err) {
          throw new FS.ErrnoError(err, parent);
        }
        var hash = FS.hashName(parent.id, name);
        for (var node = FS.nameTable[hash]; node; node = node.name_next) {
          var nodeName = node.name;
          if (node.parent.id === parent.id && nodeName === name) {
            return node;
          }
        }
        // if we failed to find it in the cache, call into the VFS
        return FS.lookup(parent, name);
      },createNode:function (parent, name, mode, rdev) {
        if (!FS.FSNode) {
          FS.FSNode = function(parent, name, mode, rdev) {
            if (!parent) {
              parent = this;  // root node sets parent to itself
            }
            this.parent = parent;
            this.mount = parent.mount;
            this.mounted = null;
            this.id = FS.nextInode++;
            this.name = name;
            this.mode = mode;
            this.node_ops = {};
            this.stream_ops = {};
            this.rdev = rdev;
          };
  
          FS.FSNode.prototype = {};
  
          // compatibility
          var readMode = 292 | 73;
          var writeMode = 146;
  
          // NOTE we must use Object.defineProperties instead of individual calls to
          // Object.defineProperty in order to make closure compiler happy
          Object.defineProperties(FS.FSNode.prototype, {
            read: {
              get: function() { return (this.mode & readMode) === readMode; },
              set: function(val) { val ? this.mode |= readMode : this.mode &= ~readMode; }
            },
            write: {
              get: function() { return (this.mode & writeMode) === writeMode; },
              set: function(val) { val ? this.mode |= writeMode : this.mode &= ~writeMode; }
            },
            isFolder: {
              get: function() { return FS.isDir(this.mode); },
            },
            isDevice: {
              get: function() { return FS.isChrdev(this.mode); },
            },
          });
        }
  
        var node = new FS.FSNode(parent, name, mode, rdev);
  
        FS.hashAddNode(node);
  
        return node;
      },destroyNode:function (node) {
        FS.hashRemoveNode(node);
      },isRoot:function (node) {
        return node === node.parent;
      },isMountpoint:function (node) {
        return !!node.mounted;
      },isFile:function (mode) {
        return (mode & 61440) === 32768;
      },isDir:function (mode) {
        return (mode & 61440) === 16384;
      },isLink:function (mode) {
        return (mode & 61440) === 40960;
      },isChrdev:function (mode) {
        return (mode & 61440) === 8192;
      },isBlkdev:function (mode) {
        return (mode & 61440) === 24576;
      },isFIFO:function (mode) {
        return (mode & 61440) === 4096;
      },isSocket:function (mode) {
        return (mode & 49152) === 49152;
      },flagModes:{"r":0,"rs":1052672,"r+":2,"w":577,"wx":705,"xw":705,"w+":578,"wx+":706,"xw+":706,"a":1089,"ax":1217,"xa":1217,"a+":1090,"ax+":1218,"xa+":1218},modeStringToFlags:function (str) {
        var flags = FS.flagModes[str];
        if (typeof flags === 'undefined') {
          throw new Error('Unknown file open mode: ' + str);
        }
        return flags;
      },flagsToPermissionString:function (flag) {
        var accmode = flag & 2097155;
        var perms = ['r', 'w', 'rw'][accmode];
        if ((flag & 512)) {
          perms += 'w';
        }
        return perms;
      },nodePermissions:function (node, perms) {
        if (FS.ignorePermissions) {
          return 0;
        }
        // return 0 if any user, group or owner bits are set.
        if (perms.indexOf('r') !== -1 && !(node.mode & 292)) {
          return ERRNO_CODES.EACCES;
        } else if (perms.indexOf('w') !== -1 && !(node.mode & 146)) {
          return ERRNO_CODES.EACCES;
        } else if (perms.indexOf('x') !== -1 && !(node.mode & 73)) {
          return ERRNO_CODES.EACCES;
        }
        return 0;
      },mayLookup:function (dir) {
        var err = FS.nodePermissions(dir, 'x');
        if (err) return err;
        if (!dir.node_ops.lookup) return ERRNO_CODES.EACCES;
        return 0;
      },mayCreate:function (dir, name) {
        try {
          var node = FS.lookupNode(dir, name);
          return ERRNO_CODES.EEXIST;
        } catch (e) {
        }
        return FS.nodePermissions(dir, 'wx');
      },mayDelete:function (dir, name, isdir) {
        var node;
        try {
          node = FS.lookupNode(dir, name);
        } catch (e) {
          return e.errno;
        }
        var err = FS.nodePermissions(dir, 'wx');
        if (err) {
          return err;
        }
        if (isdir) {
          if (!FS.isDir(node.mode)) {
            return ERRNO_CODES.ENOTDIR;
          }
          if (FS.isRoot(node) || FS.getPath(node) === FS.cwd()) {
            return ERRNO_CODES.EBUSY;
          }
        } else {
          if (FS.isDir(node.mode)) {
            return ERRNO_CODES.EISDIR;
          }
        }
        return 0;
      },mayOpen:function (node, flags) {
        if (!node) {
          return ERRNO_CODES.ENOENT;
        }
        if (FS.isLink(node.mode)) {
          return ERRNO_CODES.ELOOP;
        } else if (FS.isDir(node.mode)) {
          if ((flags & 2097155) !== 0 ||  // opening for write
              (flags & 512)) {
            return ERRNO_CODES.EISDIR;
          }
        }
        return FS.nodePermissions(node, FS.flagsToPermissionString(flags));
      },MAX_OPEN_FDS:4096,nextfd:function (fd_start, fd_end) {
        fd_start = fd_start || 0;
        fd_end = fd_end || FS.MAX_OPEN_FDS;
        for (var fd = fd_start; fd <= fd_end; fd++) {
          if (!FS.streams[fd]) {
            return fd;
          }
        }
        throw new FS.ErrnoError(ERRNO_CODES.EMFILE);
      },getStream:function (fd) {
        return FS.streams[fd];
      },createStream:function (stream, fd_start, fd_end) {
        if (!FS.FSStream) {
          FS.FSStream = function(){};
          FS.FSStream.prototype = {};
          // compatibility
          Object.defineProperties(FS.FSStream.prototype, {
            object: {
              get: function() { return this.node; },
              set: function(val) { this.node = val; }
            },
            isRead: {
              get: function() { return (this.flags & 2097155) !== 1; }
            },
            isWrite: {
              get: function() { return (this.flags & 2097155) !== 0; }
            },
            isAppend: {
              get: function() { return (this.flags & 1024); }
            }
          });
        }
        // clone it, so we can return an instance of FSStream
        var newStream = new FS.FSStream();
        for (var p in stream) {
          newStream[p] = stream[p];
        }
        stream = newStream;
        var fd = FS.nextfd(fd_start, fd_end);
        stream.fd = fd;
        FS.streams[fd] = stream;
        return stream;
      },closeStream:function (fd) {
        FS.streams[fd] = null;
      },getStreamFromPtr:function (ptr) {
        return FS.streams[ptr - 1];
      },getPtrForStream:function (stream) {
        return stream ? stream.fd + 1 : 0;
      },chrdev_stream_ops:{open:function (stream) {
          var device = FS.getDevice(stream.node.rdev);
          // override node's stream ops with the device's
          stream.stream_ops = device.stream_ops;
          // forward the open call
          if (stream.stream_ops.open) {
            stream.stream_ops.open(stream);
          }
        },llseek:function () {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }},major:function (dev) {
        return ((dev) >> 8);
      },minor:function (dev) {
        return ((dev) & 0xff);
      },makedev:function (ma, mi) {
        return ((ma) << 8 | (mi));
      },registerDevice:function (dev, ops) {
        FS.devices[dev] = { stream_ops: ops };
      },getDevice:function (dev) {
        return FS.devices[dev];
      },getMounts:function (mount) {
        var mounts = [];
        var check = [mount];
  
        while (check.length) {
          var m = check.pop();
  
          mounts.push(m);
  
          check.push.apply(check, m.mounts);
        }
  
        return mounts;
      },syncfs:function (populate, callback) {
        if (typeof(populate) === 'function') {
          callback = populate;
          populate = false;
        }
  
        var mounts = FS.getMounts(FS.root.mount);
        var completed = 0;
  
        function done(err) {
          if (err) {
            if (!done.errored) {
              done.errored = true;
              return callback(err);
            }
            return;
          }
          if (++completed >= mounts.length) {
            callback(null);
          }
        };
  
        // sync all mounts
        mounts.forEach(function (mount) {
          if (!mount.type.syncfs) {
            return done(null);
          }
          mount.type.syncfs(mount, populate, done);
        });
      },mount:function (type, opts, mountpoint) {
        var root = mountpoint === '/';
        var pseudo = !mountpoint;
        var node;
  
        if (root && FS.root) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        } else if (!root && !pseudo) {
          var lookup = FS.lookupPath(mountpoint, { follow_mount: false });
  
          mountpoint = lookup.path;  // use the absolute path
          node = lookup.node;
  
          if (FS.isMountpoint(node)) {
            throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
          }
  
          if (!FS.isDir(node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
          }
        }
  
        var mount = {
          type: type,
          opts: opts,
          mountpoint: mountpoint,
          mounts: []
        };
  
        // create a root node for the fs
        var mountRoot = type.mount(mount);
        mountRoot.mount = mount;
        mount.root = mountRoot;
  
        if (root) {
          FS.root = mountRoot;
        } else if (node) {
          // set as a mountpoint
          node.mounted = mount;
  
          // add the new mount to the current mount's children
          if (node.mount) {
            node.mount.mounts.push(mount);
          }
        }
  
        return mountRoot;
      },unmount:function (mountpoint) {
        var lookup = FS.lookupPath(mountpoint, { follow_mount: false });
  
        if (!FS.isMountpoint(lookup.node)) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
  
        // destroy the nodes for this mount, and all its child mounts
        var node = lookup.node;
        var mount = node.mounted;
        var mounts = FS.getMounts(mount);
  
        Object.keys(FS.nameTable).forEach(function (hash) {
          var current = FS.nameTable[hash];
  
          while (current) {
            var next = current.name_next;
  
            if (mounts.indexOf(current.mount) !== -1) {
              FS.destroyNode(current);
            }
  
            current = next;
          }
        });
  
        // no longer a mountpoint
        node.mounted = null;
  
        // remove this mount from the child mounts
        var idx = node.mount.mounts.indexOf(mount);
        assert(idx !== -1);
        node.mount.mounts.splice(idx, 1);
      },lookup:function (parent, name) {
        return parent.node_ops.lookup(parent, name);
      },mknod:function (path, mode, dev) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        if (!name || name === '.' || name === '..') {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var err = FS.mayCreate(parent, name);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.mknod) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        return parent.node_ops.mknod(parent, name, mode, dev);
      },create:function (path, mode) {
        mode = mode !== undefined ? mode : 438 /* 0666 */;
        mode &= 4095;
        mode |= 32768;
        return FS.mknod(path, mode, 0);
      },mkdir:function (path, mode) {
        mode = mode !== undefined ? mode : 511 /* 0777 */;
        mode &= 511 | 512;
        mode |= 16384;
        return FS.mknod(path, mode, 0);
      },mkdev:function (path, mode, dev) {
        if (typeof(dev) === 'undefined') {
          dev = mode;
          mode = 438 /* 0666 */;
        }
        mode |= 8192;
        return FS.mknod(path, mode, dev);
      },symlink:function (oldpath, newpath) {
        if (!PATH.resolve(oldpath)) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        var lookup = FS.lookupPath(newpath, { parent: true });
        var parent = lookup.node;
        if (!parent) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        var newname = PATH.basename(newpath);
        var err = FS.mayCreate(parent, newname);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.symlink) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        return parent.node_ops.symlink(parent, newname, oldpath);
      },rename:function (old_path, new_path) {
        var old_dirname = PATH.dirname(old_path);
        var new_dirname = PATH.dirname(new_path);
        var old_name = PATH.basename(old_path);
        var new_name = PATH.basename(new_path);
        // parents must exist
        var lookup, old_dir, new_dir;
        try {
          lookup = FS.lookupPath(old_path, { parent: true });
          old_dir = lookup.node;
          lookup = FS.lookupPath(new_path, { parent: true });
          new_dir = lookup.node;
        } catch (e) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        if (!old_dir || !new_dir) throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        // need to be part of the same mount
        if (old_dir.mount !== new_dir.mount) {
          throw new FS.ErrnoError(ERRNO_CODES.EXDEV);
        }
        // source must exist
        var old_node = FS.lookupNode(old_dir, old_name);
        // old path should not be an ancestor of the new path
        var relative = PATH.relative(old_path, new_dirname);
        if (relative.charAt(0) !== '.') {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        // new path should not be an ancestor of the old path
        relative = PATH.relative(new_path, old_dirname);
        if (relative.charAt(0) !== '.') {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTEMPTY);
        }
        // see if the new path already exists
        var new_node;
        try {
          new_node = FS.lookupNode(new_dir, new_name);
        } catch (e) {
          // not fatal
        }
        // early out if nothing needs to change
        if (old_node === new_node) {
          return;
        }
        // we'll need to delete the old entry
        var isdir = FS.isDir(old_node.mode);
        var err = FS.mayDelete(old_dir, old_name, isdir);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        // need delete permissions if we'll be overwriting.
        // need create permissions if new doesn't already exist.
        err = new_node ?
          FS.mayDelete(new_dir, new_name, isdir) :
          FS.mayCreate(new_dir, new_name);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!old_dir.node_ops.rename) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isMountpoint(old_node) || (new_node && FS.isMountpoint(new_node))) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        // if we are going to change the parent, check write permissions
        if (new_dir !== old_dir) {
          err = FS.nodePermissions(old_dir, 'w');
          if (err) {
            throw new FS.ErrnoError(err);
          }
        }
        try {
          if (FS.trackingDelegate['willMovePath']) {
            FS.trackingDelegate['willMovePath'](old_path, new_path);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['willMovePath']('"+old_path+"', '"+new_path+"') threw an exception: " + e.message);
        }
        // remove the node from the lookup hash
        FS.hashRemoveNode(old_node);
        // do the underlying fs rename
        try {
          old_dir.node_ops.rename(old_node, new_dir, new_name);
        } catch (e) {
          throw e;
        } finally {
          // add the node back to the hash (in case node_ops.rename
          // changed its name)
          FS.hashAddNode(old_node);
        }
        try {
          if (FS.trackingDelegate['onMovePath']) FS.trackingDelegate['onMovePath'](old_path, new_path);
        } catch(e) {
          console.log("FS.trackingDelegate['onMovePath']('"+old_path+"', '"+new_path+"') threw an exception: " + e.message);
        }
      },rmdir:function (path) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        var node = FS.lookupNode(parent, name);
        var err = FS.mayDelete(parent, name, true);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.rmdir) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isMountpoint(node)) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        try {
          if (FS.trackingDelegate['willDeletePath']) {
            FS.trackingDelegate['willDeletePath'](path);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['willDeletePath']('"+path+"') threw an exception: " + e.message);
        }
        parent.node_ops.rmdir(parent, name);
        FS.destroyNode(node);
        try {
          if (FS.trackingDelegate['onDeletePath']) FS.trackingDelegate['onDeletePath'](path);
        } catch(e) {
          console.log("FS.trackingDelegate['onDeletePath']('"+path+"') threw an exception: " + e.message);
        }
      },readdir:function (path) {
        var lookup = FS.lookupPath(path, { follow: true });
        var node = lookup.node;
        if (!node.node_ops.readdir) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
        }
        return node.node_ops.readdir(node);
      },unlink:function (path) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        var node = FS.lookupNode(parent, name);
        var err = FS.mayDelete(parent, name, false);
        if (err) {
          // POSIX says unlink should set EPERM, not EISDIR
          if (err === ERRNO_CODES.EISDIR) err = ERRNO_CODES.EPERM;
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.unlink) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isMountpoint(node)) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        try {
          if (FS.trackingDelegate['willDeletePath']) {
            FS.trackingDelegate['willDeletePath'](path);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['willDeletePath']('"+path+"') threw an exception: " + e.message);
        }
        parent.node_ops.unlink(parent, name);
        FS.destroyNode(node);
        try {
          if (FS.trackingDelegate['onDeletePath']) FS.trackingDelegate['onDeletePath'](path);
        } catch(e) {
          console.log("FS.trackingDelegate['onDeletePath']('"+path+"') threw an exception: " + e.message);
        }
      },readlink:function (path) {
        var lookup = FS.lookupPath(path);
        var link = lookup.node;
        if (!link) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        if (!link.node_ops.readlink) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        return link.node_ops.readlink(link);
      },stat:function (path, dontFollow) {
        var lookup = FS.lookupPath(path, { follow: !dontFollow });
        var node = lookup.node;
        if (!node) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        if (!node.node_ops.getattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        return node.node_ops.getattr(node);
      },lstat:function (path) {
        return FS.stat(path, true);
      },chmod:function (path, mode, dontFollow) {
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: !dontFollow });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        node.node_ops.setattr(node, {
          mode: (mode & 4095) | (node.mode & ~4095),
          timestamp: Date.now()
        });
      },lchmod:function (path, mode) {
        FS.chmod(path, mode, true);
      },fchmod:function (fd, mode) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        FS.chmod(stream.node, mode);
      },chown:function (path, uid, gid, dontFollow) {
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: !dontFollow });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        node.node_ops.setattr(node, {
          timestamp: Date.now()
          // we ignore the uid / gid for now
        });
      },lchown:function (path, uid, gid) {
        FS.chown(path, uid, gid, true);
      },fchown:function (fd, uid, gid) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        FS.chown(stream.node, uid, gid);
      },truncate:function (path, len) {
        if (len < 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: true });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isDir(node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EISDIR);
        }
        if (!FS.isFile(node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var err = FS.nodePermissions(node, 'w');
        if (err) {
          throw new FS.ErrnoError(err);
        }
        node.node_ops.setattr(node, {
          size: len,
          timestamp: Date.now()
        });
      },ftruncate:function (fd, len) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        FS.truncate(stream.node, len);
      },utime:function (path, atime, mtime) {
        var lookup = FS.lookupPath(path, { follow: true });
        var node = lookup.node;
        node.node_ops.setattr(node, {
          timestamp: Math.max(atime, mtime)
        });
      },open:function (path, flags, mode, fd_start, fd_end) {
        if (path === "") {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        flags = typeof flags === 'string' ? FS.modeStringToFlags(flags) : flags;
        mode = typeof mode === 'undefined' ? 438 /* 0666 */ : mode;
        if ((flags & 64)) {
          mode = (mode & 4095) | 32768;
        } else {
          mode = 0;
        }
        var node;
        if (typeof path === 'object') {
          node = path;
        } else {
          path = PATH.normalize(path);
          try {
            var lookup = FS.lookupPath(path, {
              follow: !(flags & 131072)
            });
            node = lookup.node;
          } catch (e) {
            // ignore
          }
        }
        // perhaps we need to create the node
        var created = false;
        if ((flags & 64)) {
          if (node) {
            // if O_CREAT and O_EXCL are set, error out if the node already exists
            if ((flags & 128)) {
              throw new FS.ErrnoError(ERRNO_CODES.EEXIST);
            }
          } else {
            // node doesn't exist, try to create it
            node = FS.mknod(path, mode, 0);
            created = true;
          }
        }
        if (!node) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        // can't truncate a device
        if (FS.isChrdev(node.mode)) {
          flags &= ~512;
        }
        // check permissions, if this is not a file we just created now (it is ok to
        // create and write to a file with read-only permissions; it is read-only
        // for later use)
        if (!created) {
          var err = FS.mayOpen(node, flags);
          if (err) {
            throw new FS.ErrnoError(err);
          }
        }
        // do truncation if necessary
        if ((flags & 512)) {
          FS.truncate(node, 0);
        }
        // we've already handled these, don't pass down to the underlying vfs
        flags &= ~(128 | 512);
  
        // register the stream with the filesystem
        var stream = FS.createStream({
          node: node,
          path: FS.getPath(node),  // we want the absolute path to the node
          flags: flags,
          seekable: true,
          position: 0,
          stream_ops: node.stream_ops,
          // used by the file family libc calls (fopen, fwrite, ferror, etc.)
          ungotten: [],
          error: false
        }, fd_start, fd_end);
        // call the new stream's open function
        if (stream.stream_ops.open) {
          stream.stream_ops.open(stream);
        }
        if (Module['logReadFiles'] && !(flags & 1)) {
          if (!FS.readFiles) FS.readFiles = {};
          if (!(path in FS.readFiles)) {
            FS.readFiles[path] = 1;
            Module['printErr']('read file: ' + path);
          }
        }
        try {
          if (FS.trackingDelegate['onOpenFile']) {
            var trackingFlags = 0;
            if ((flags & 2097155) !== 1) {
              trackingFlags |= FS.tracking.openFlags.READ;
            }
            if ((flags & 2097155) !== 0) {
              trackingFlags |= FS.tracking.openFlags.WRITE;
            }
            FS.trackingDelegate['onOpenFile'](path, trackingFlags);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['onOpenFile']('"+path+"', flags) threw an exception: " + e.message);
        }
        return stream;
      },close:function (stream) {
        try {
          if (stream.stream_ops.close) {
            stream.stream_ops.close(stream);
          }
        } catch (e) {
          throw e;
        } finally {
          FS.closeStream(stream.fd);
        }
      },llseek:function (stream, offset, whence) {
        if (!stream.seekable || !stream.stream_ops.llseek) {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }
        return stream.stream_ops.llseek(stream, offset, whence);
      },read:function (stream, buffer, offset, length, position) {
        if (length < 0 || position < 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if ((stream.flags & 2097155) === 1) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if (FS.isDir(stream.node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EISDIR);
        }
        if (!stream.stream_ops.read) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var seeking = true;
        if (typeof position === 'undefined') {
          position = stream.position;
          seeking = false;
        } else if (!stream.seekable) {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }
        var bytesRead = stream.stream_ops.read(stream, buffer, offset, length, position);
        if (!seeking) stream.position += bytesRead;
        return bytesRead;
      },write:function (stream, buffer, offset, length, position, canOwn) {
        if (length < 0 || position < 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if (FS.isDir(stream.node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EISDIR);
        }
        if (!stream.stream_ops.write) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if (stream.flags & 1024) {
          // seek to the end before writing in append mode
          FS.llseek(stream, 0, 2);
        }
        var seeking = true;
        if (typeof position === 'undefined') {
          position = stream.position;
          seeking = false;
        } else if (!stream.seekable) {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }
        var bytesWritten = stream.stream_ops.write(stream, buffer, offset, length, position, canOwn);
        if (!seeking) stream.position += bytesWritten;
        try {
          if (stream.path && FS.trackingDelegate['onWriteToFile']) FS.trackingDelegate['onWriteToFile'](stream.path);
        } catch(e) {
          console.log("FS.trackingDelegate['onWriteToFile']('"+path+"') threw an exception: " + e.message);
        }
        return bytesWritten;
      },allocate:function (stream, offset, length) {
        if (offset < 0 || length <= 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if (!FS.isFile(stream.node.mode) && !FS.isDir(node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
        }
        if (!stream.stream_ops.allocate) {
          throw new FS.ErrnoError(ERRNO_CODES.EOPNOTSUPP);
        }
        stream.stream_ops.allocate(stream, offset, length);
      },mmap:function (stream, buffer, offset, length, position, prot, flags) {
        // TODO if PROT is PROT_WRITE, make sure we have write access
        if ((stream.flags & 2097155) === 1) {
          throw new FS.ErrnoError(ERRNO_CODES.EACCES);
        }
        if (!stream.stream_ops.mmap) {
          throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
        }
        return stream.stream_ops.mmap(stream, buffer, offset, length, position, prot, flags);
      },ioctl:function (stream, cmd, arg) {
        if (!stream.stream_ops.ioctl) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTTY);
        }
        return stream.stream_ops.ioctl(stream, cmd, arg);
      },readFile:function (path, opts) {
        opts = opts || {};
        opts.flags = opts.flags || 'r';
        opts.encoding = opts.encoding || 'binary';
        if (opts.encoding !== 'utf8' && opts.encoding !== 'binary') {
          throw new Error('Invalid encoding type "' + opts.encoding + '"');
        }
        var ret;
        var stream = FS.open(path, opts.flags);
        var stat = FS.stat(path);
        var length = stat.size;
        var buf = new Uint8Array(length);
        FS.read(stream, buf, 0, length, 0);
        if (opts.encoding === 'utf8') {
          ret = '';
          var utf8 = new Runtime.UTF8Processor();
          for (var i = 0; i < length; i++) {
            ret += utf8.processCChar(buf[i]);
          }
        } else if (opts.encoding === 'binary') {
          ret = buf;
        }
        FS.close(stream);
        return ret;
      },writeFile:function (path, data, opts) {
        opts = opts || {};
        opts.flags = opts.flags || 'w';
        opts.encoding = opts.encoding || 'utf8';
        if (opts.encoding !== 'utf8' && opts.encoding !== 'binary') {
          throw new Error('Invalid encoding type "' + opts.encoding + '"');
        }
        var stream = FS.open(path, opts.flags, opts.mode);
        if (opts.encoding === 'utf8') {
          var utf8 = new Runtime.UTF8Processor();
          var buf = new Uint8Array(utf8.processJSString(data));
          FS.write(stream, buf, 0, buf.length, 0, opts.canOwn);
        } else if (opts.encoding === 'binary') {
          FS.write(stream, data, 0, data.length, 0, opts.canOwn);
        }
        FS.close(stream);
      },cwd:function () {
        return FS.currentPath;
      },chdir:function (path) {
        var lookup = FS.lookupPath(path, { follow: true });
        if (!FS.isDir(lookup.node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
        }
        var err = FS.nodePermissions(lookup.node, 'x');
        if (err) {
          throw new FS.ErrnoError(err);
        }
        FS.currentPath = lookup.path;
      },createDefaultDirectories:function () {
        FS.mkdir('/tmp');
        FS.mkdir('/home');
        FS.mkdir('/home/web_user');
      },createDefaultDevices:function () {
        // create /dev
        FS.mkdir('/dev');
        // setup /dev/null
        FS.registerDevice(FS.makedev(1, 3), {
          read: function() { return 0; },
          write: function() { return 0; }
        });
        FS.mkdev('/dev/null', FS.makedev(1, 3));
        // setup /dev/tty and /dev/tty1
        // stderr needs to print output using Module['printErr']
        // so we register a second tty just for it.
        TTY.register(FS.makedev(5, 0), TTY.default_tty_ops);
        TTY.register(FS.makedev(6, 0), TTY.default_tty1_ops);
        FS.mkdev('/dev/tty', FS.makedev(5, 0));
        FS.mkdev('/dev/tty1', FS.makedev(6, 0));
        // setup /dev/[u]random
        var random_device;
        if (typeof crypto !== 'undefined') {
          // for modern web browsers
          var randomBuffer = new Uint8Array(1);
          random_device = function() { crypto.getRandomValues(randomBuffer); return randomBuffer[0]; };
        } else if (ENVIRONMENT_IS_NODE) {
          // for nodejs
          random_device = function() { return require('crypto').randomBytes(1)[0]; };
        } else {
          // default for ES5 platforms
          random_device = function() { return (Math.random()*256)|0; };
        }
        FS.createDevice('/dev', 'random', random_device);
        FS.createDevice('/dev', 'urandom', random_device);
        // we're not going to emulate the actual shm device,
        // just create the tmp dirs that reside in it commonly
        FS.mkdir('/dev/shm');
        FS.mkdir('/dev/shm/tmp');
      },createStandardStreams:function () {
        // TODO deprecate the old functionality of a single
        // input / output callback and that utilizes FS.createDevice
        // and instead require a unique set of stream ops
  
        // by default, we symlink the standard streams to the
        // default tty devices. however, if the standard streams
        // have been overwritten we create a unique device for
        // them instead.
        if (Module['stdin']) {
          FS.createDevice('/dev', 'stdin', Module['stdin']);
        } else {
          FS.symlink('/dev/tty', '/dev/stdin');
        }
        if (Module['stdout']) {
          FS.createDevice('/dev', 'stdout', null, Module['stdout']);
        } else {
          FS.symlink('/dev/tty', '/dev/stdout');
        }
        if (Module['stderr']) {
          FS.createDevice('/dev', 'stderr', null, Module['stderr']);
        } else {
          FS.symlink('/dev/tty1', '/dev/stderr');
        }
  
        // open default streams for the stdin, stdout and stderr devices
        var stdin = FS.open('/dev/stdin', 'r');
        HEAP32[((_stdin)>>2)]=FS.getPtrForStream(stdin);
        assert(stdin.fd === 0, 'invalid handle for stdin (' + stdin.fd + ')');
  
        var stdout = FS.open('/dev/stdout', 'w');
        HEAP32[((_stdout)>>2)]=FS.getPtrForStream(stdout);
        assert(stdout.fd === 1, 'invalid handle for stdout (' + stdout.fd + ')');
  
        var stderr = FS.open('/dev/stderr', 'w');
        HEAP32[((_stderr)>>2)]=FS.getPtrForStream(stderr);
        assert(stderr.fd === 2, 'invalid handle for stderr (' + stderr.fd + ')');
      },ensureErrnoError:function () {
        if (FS.ErrnoError) return;
        FS.ErrnoError = function ErrnoError(errno, node) {
          this.node = node;
          this.setErrno = function(errno) {
            this.errno = errno;
            for (var key in ERRNO_CODES) {
              if (ERRNO_CODES[key] === errno) {
                this.code = key;
                break;
              }
            }
          };
          this.setErrno(errno);
          this.message = ERRNO_MESSAGES[errno];
          if (this.stack) this.stack = demangleAll(this.stack);
        };
        FS.ErrnoError.prototype = new Error();
        FS.ErrnoError.prototype.constructor = FS.ErrnoError;
        // Some errors may happen quite a bit, to avoid overhead we reuse them (and suffer a lack of stack info)
        [ERRNO_CODES.ENOENT].forEach(function(code) {
          FS.genericErrors[code] = new FS.ErrnoError(code);
          FS.genericErrors[code].stack = '<generic error, no stack>';
        });
      },staticInit:function () {
        FS.ensureErrnoError();
  
        FS.nameTable = new Array(4096);
  
        FS.mount(MEMFS, {}, '/');
  
        FS.createDefaultDirectories();
        FS.createDefaultDevices();
      },init:function (input, output, error) {
        assert(!FS.init.initialized, 'FS.init was previously called. If you want to initialize later with custom parameters, remove any earlier calls (note that one is automatically added to the generated code)');
        FS.init.initialized = true;
  
        FS.ensureErrnoError();
  
        // Allow Module.stdin etc. to provide defaults, if none explicitly passed to us here
        Module['stdin'] = input || Module['stdin'];
        Module['stdout'] = output || Module['stdout'];
        Module['stderr'] = error || Module['stderr'];
  
        FS.createStandardStreams();
      },quit:function () {
        FS.init.initialized = false;
        for (var i = 0; i < FS.streams.length; i++) {
          var stream = FS.streams[i];
          if (!stream) {
            continue;
          }
          FS.close(stream);
        }
      },getMode:function (canRead, canWrite) {
        var mode = 0;
        if (canRead) mode |= 292 | 73;
        if (canWrite) mode |= 146;
        return mode;
      },joinPath:function (parts, forceRelative) {
        var path = PATH.join.apply(null, parts);
        if (forceRelative && path[0] == '/') path = path.substr(1);
        return path;
      },absolutePath:function (relative, base) {
        return PATH.resolve(base, relative);
      },standardizePath:function (path) {
        return PATH.normalize(path);
      },findObject:function (path, dontResolveLastLink) {
        var ret = FS.analyzePath(path, dontResolveLastLink);
        if (ret.exists) {
          return ret.object;
        } else {
          ___setErrNo(ret.error);
          return null;
        }
      },analyzePath:function (path, dontResolveLastLink) {
        // operate from within the context of the symlink's target
        try {
          var lookup = FS.lookupPath(path, { follow: !dontResolveLastLink });
          path = lookup.path;
        } catch (e) {
        }
        var ret = {
          isRoot: false, exists: false, error: 0, name: null, path: null, object: null,
          parentExists: false, parentPath: null, parentObject: null
        };
        try {
          var lookup = FS.lookupPath(path, { parent: true });
          ret.parentExists = true;
          ret.parentPath = lookup.path;
          ret.parentObject = lookup.node;
          ret.name = PATH.basename(path);
          lookup = FS.lookupPath(path, { follow: !dontResolveLastLink });
          ret.exists = true;
          ret.path = lookup.path;
          ret.object = lookup.node;
          ret.name = lookup.node.name;
          ret.isRoot = lookup.path === '/';
        } catch (e) {
          ret.error = e.errno;
        };
        return ret;
      },createFolder:function (parent, name, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(canRead, canWrite);
        return FS.mkdir(path, mode);
      },createPath:function (parent, path, canRead, canWrite) {
        parent = typeof parent === 'string' ? parent : FS.getPath(parent);
        var parts = path.split('/').reverse();
        while (parts.length) {
          var part = parts.pop();
          if (!part) continue;
          var current = PATH.join2(parent, part);
          try {
            FS.mkdir(current);
          } catch (e) {
            // ignore EEXIST
          }
          parent = current;
        }
        return current;
      },createFile:function (parent, name, properties, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(canRead, canWrite);
        return FS.create(path, mode);
      },createDataFile:function (parent, name, data, canRead, canWrite, canOwn) {
        var path = name ? PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name) : parent;
        var mode = FS.getMode(canRead, canWrite);
        var node = FS.create(path, mode);
        if (data) {
          if (typeof data === 'string') {
            var arr = new Array(data.length);
            for (var i = 0, len = data.length; i < len; ++i) arr[i] = data.charCodeAt(i);
            data = arr;
          }
          // make sure we can write to the file
          FS.chmod(node, mode | 146);
          var stream = FS.open(node, 'w');
          FS.write(stream, data, 0, data.length, 0, canOwn);
          FS.close(stream);
          FS.chmod(node, mode);
        }
        return node;
      },createDevice:function (parent, name, input, output) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(!!input, !!output);
        if (!FS.createDevice.major) FS.createDevice.major = 64;
        var dev = FS.makedev(FS.createDevice.major++, 0);
        // Create a fake device that a set of stream ops to emulate
        // the old behavior.
        FS.registerDevice(dev, {
          open: function(stream) {
            stream.seekable = false;
          },
          close: function(stream) {
            // flush any pending line data
            if (output && output.buffer && output.buffer.length) {
              output(10);
            }
          },
          read: function(stream, buffer, offset, length, pos /* ignored */) {
            var bytesRead = 0;
            for (var i = 0; i < length; i++) {
              var result;
              try {
                result = input();
              } catch (e) {
                throw new FS.ErrnoError(ERRNO_CODES.EIO);
              }
              if (result === undefined && bytesRead === 0) {
                throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
              }
              if (result === null || result === undefined) break;
              bytesRead++;
              buffer[offset+i] = result;
            }
            if (bytesRead) {
              stream.node.timestamp = Date.now();
            }
            return bytesRead;
          },
          write: function(stream, buffer, offset, length, pos) {
            for (var i = 0; i < length; i++) {
              try {
                output(buffer[offset+i]);
              } catch (e) {
                throw new FS.ErrnoError(ERRNO_CODES.EIO);
              }
            }
            if (length) {
              stream.node.timestamp = Date.now();
            }
            return i;
          }
        });
        return FS.mkdev(path, mode, dev);
      },createLink:function (parent, name, target, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        return FS.symlink(target, path);
      },forceLoadFile:function (obj) {
        if (obj.isDevice || obj.isFolder || obj.link || obj.contents) return true;
        var success = true;
        if (typeof XMLHttpRequest !== 'undefined') {
          throw new Error("Lazy loading should have been performed (contents set) in createLazyFile, but it was not. Lazy loading only works in web workers. Use --embed-file or --preload-file in emcc on the main thread.");
        } else if (Module['read']) {
          // Command-line.
          try {
            // WARNING: Can't read binary files in V8's d8 or tracemonkey's js, as
            //          read() will try to parse UTF8.
            obj.contents = intArrayFromString(Module['read'](obj.url), true);
            obj.usedBytes = obj.contents.length;
          } catch (e) {
            success = false;
          }
        } else {
          throw new Error('Cannot load without read() or XMLHttpRequest.');
        }
        if (!success) ___setErrNo(ERRNO_CODES.EIO);
        return success;
      },createLazyFile:function (parent, name, url, canRead, canWrite) {
        // Lazy chunked Uint8Array (implements get and length from Uint8Array). Actual getting is abstracted away for eventual reuse.
        function LazyUint8Array() {
          this.lengthKnown = false;
          this.chunks = []; // Loaded chunks. Index is the chunk number
        }
        LazyUint8Array.prototype.get = function LazyUint8Array_get(idx) {
          if (idx > this.length-1 || idx < 0) {
            return undefined;
          }
          var chunkOffset = idx % this.chunkSize;
          var chunkNum = (idx / this.chunkSize)|0;
          return this.getter(chunkNum)[chunkOffset];
        }
        LazyUint8Array.prototype.setDataGetter = function LazyUint8Array_setDataGetter(getter) {
          this.getter = getter;
        }
        LazyUint8Array.prototype.cacheLength = function LazyUint8Array_cacheLength() {
          // Find length
          var xhr = new XMLHttpRequest();
          xhr.open('HEAD', url, false);
          xhr.send(null);
          if (!(xhr.status >= 200 && xhr.status < 300 || xhr.status === 304)) throw new Error("Couldn't load " + url + ". Status: " + xhr.status);
          var datalength = Number(xhr.getResponseHeader("Content-length"));
          var header;
          var hasByteServing = (header = xhr.getResponseHeader("Accept-Ranges")) && header === "bytes";
          var chunkSize = 1024*1024; // Chunk size in bytes
  
          if (!hasByteServing) chunkSize = datalength;
  
          // Function to get a range from the remote URL.
          var doXHR = (function(from, to) {
            if (from > to) throw new Error("invalid range (" + from + ", " + to + ") or no bytes requested!");
            if (to > datalength-1) throw new Error("only " + datalength + " bytes available! programmer error!");
  
            // TODO: Use mozResponseArrayBuffer, responseStream, etc. if available.
            var xhr = new XMLHttpRequest();
            xhr.open('GET', url, false);
            if (datalength !== chunkSize) xhr.setRequestHeader("Range", "bytes=" + from + "-" + to);
  
            // Some hints to the browser that we want binary data.
            if (typeof Uint8Array != 'undefined') xhr.responseType = 'arraybuffer';
            if (xhr.overrideMimeType) {
              xhr.overrideMimeType('text/plain; charset=x-user-defined');
            }
  
            xhr.send(null);
            if (!(xhr.status >= 200 && xhr.status < 300 || xhr.status === 304)) throw new Error("Couldn't load " + url + ". Status: " + xhr.status);
            if (xhr.response !== undefined) {
              return new Uint8Array(xhr.response || []);
            } else {
              return intArrayFromString(xhr.responseText || '', true);
            }
          });
          var lazyArray = this;
          lazyArray.setDataGetter(function(chunkNum) {
            var start = chunkNum * chunkSize;
            var end = (chunkNum+1) * chunkSize - 1; // including this byte
            end = Math.min(end, datalength-1); // if datalength-1 is selected, this is the last block
            if (typeof(lazyArray.chunks[chunkNum]) === "undefined") {
              lazyArray.chunks[chunkNum] = doXHR(start, end);
            }
            if (typeof(lazyArray.chunks[chunkNum]) === "undefined") throw new Error("doXHR failed!");
            return lazyArray.chunks[chunkNum];
          });
  
          this._length = datalength;
          this._chunkSize = chunkSize;
          this.lengthKnown = true;
        }
        if (typeof XMLHttpRequest !== 'undefined') {
          if (!ENVIRONMENT_IS_WORKER) throw 'Cannot do synchronous binary XHRs outside webworkers in modern browsers. Use --embed-file or --preload-file in emcc';
          var lazyArray = new LazyUint8Array();
          Object.defineProperty(lazyArray, "length", {
              get: function() {
                  if(!this.lengthKnown) {
                      this.cacheLength();
                  }
                  return this._length;
              }
          });
          Object.defineProperty(lazyArray, "chunkSize", {
              get: function() {
                  if(!this.lengthKnown) {
                      this.cacheLength();
                  }
                  return this._chunkSize;
              }
          });
  
          var properties = { isDevice: false, contents: lazyArray };
        } else {
          var properties = { isDevice: false, url: url };
        }
  
        var node = FS.createFile(parent, name, properties, canRead, canWrite);
        // This is a total hack, but I want to get this lazy file code out of the
        // core of MEMFS. If we want to keep this lazy file concept I feel it should
        // be its own thin LAZYFS proxying calls to MEMFS.
        if (properties.contents) {
          node.contents = properties.contents;
        } else if (properties.url) {
          node.contents = null;
          node.url = properties.url;
        }
        // Add a function that defers querying the file size until it is asked the first time.
        Object.defineProperty(node, "usedBytes", {
            get: function() { return this.contents.length; }
        });
        // override each stream op with one that tries to force load the lazy file first
        var stream_ops = {};
        var keys = Object.keys(node.stream_ops);
        keys.forEach(function(key) {
          var fn = node.stream_ops[key];
          stream_ops[key] = function forceLoadLazyFile() {
            if (!FS.forceLoadFile(node)) {
              throw new FS.ErrnoError(ERRNO_CODES.EIO);
            }
            return fn.apply(null, arguments);
          };
        });
        // use a custom read function
        stream_ops.read = function stream_ops_read(stream, buffer, offset, length, position) {
          if (!FS.forceLoadFile(node)) {
            throw new FS.ErrnoError(ERRNO_CODES.EIO);
          }
          var contents = stream.node.contents;
          if (position >= contents.length)
            return 0;
          var size = Math.min(contents.length - position, length);
          assert(size >= 0);
          if (contents.slice) { // normal array
            for (var i = 0; i < size; i++) {
              buffer[offset + i] = contents[position + i];
            }
          } else {
            for (var i = 0; i < size; i++) { // LazyUint8Array from sync binary XHR
              buffer[offset + i] = contents.get(position + i);
            }
          }
          return size;
        };
        node.stream_ops = stream_ops;
        return node;
      },createPreloadedFile:function (parent, name, url, canRead, canWrite, onload, onerror, dontCreateFile, canOwn) {
        Browser.init();
        // TODO we should allow people to just pass in a complete filename instead
        // of parent and name being that we just join them anyways
        var fullname = name ? PATH.resolve(PATH.join2(parent, name)) : parent;
        function processData(byteArray) {
          function finish(byteArray) {
            if (!dontCreateFile) {
              FS.createDataFile(parent, name, byteArray, canRead, canWrite, canOwn);
            }
            if (onload) onload();
            removeRunDependency('cp ' + fullname);
          }
          var handled = false;
          Module['preloadPlugins'].forEach(function(plugin) {
            if (handled) return;
            if (plugin['canHandle'](fullname)) {
              plugin['handle'](byteArray, fullname, finish, function() {
                if (onerror) onerror();
                removeRunDependency('cp ' + fullname);
              });
              handled = true;
            }
          });
          if (!handled) finish(byteArray);
        }
        addRunDependency('cp ' + fullname);
        if (typeof url == 'string') {
          Browser.asyncLoad(url, function(byteArray) {
            processData(byteArray);
          }, onerror);
        } else {
          processData(url);
        }
      },indexedDB:function () {
        return window.indexedDB || window.mozIndexedDB || window.webkitIndexedDB || window.msIndexedDB;
      },DB_NAME:function () {
        return 'EM_FS_' + window.location.pathname;
      },DB_VERSION:20,DB_STORE_NAME:"FILE_DATA",saveFilesToDB:function (paths, onload, onerror) {
        onload = onload || function(){};
        onerror = onerror || function(){};
        var indexedDB = FS.indexedDB();
        try {
          var openRequest = indexedDB.open(FS.DB_NAME(), FS.DB_VERSION);
        } catch (e) {
          return onerror(e);
        }
        openRequest.onupgradeneeded = function openRequest_onupgradeneeded() {
          console.log('creating db');
          var db = openRequest.result;
          db.createObjectStore(FS.DB_STORE_NAME);
        };
        openRequest.onsuccess = function openRequest_onsuccess() {
          var db = openRequest.result;
          var transaction = db.transaction([FS.DB_STORE_NAME], 'readwrite');
          var files = transaction.objectStore(FS.DB_STORE_NAME);
          var ok = 0, fail = 0, total = paths.length;
          function finish() {
            if (fail == 0) onload(); else onerror();
          }
          paths.forEach(function(path) {
            var putRequest = files.put(FS.analyzePath(path).object.contents, path);
            putRequest.onsuccess = function putRequest_onsuccess() { ok++; if (ok + fail == total) finish() };
            putRequest.onerror = function putRequest_onerror() { fail++; if (ok + fail == total) finish() };
          });
          transaction.onerror = onerror;
        };
        openRequest.onerror = onerror;
      },loadFilesFromDB:function (paths, onload, onerror) {
        onload = onload || function(){};
        onerror = onerror || function(){};
        var indexedDB = FS.indexedDB();
        try {
          var openRequest = indexedDB.open(FS.DB_NAME(), FS.DB_VERSION);
        } catch (e) {
          return onerror(e);
        }
        openRequest.onupgradeneeded = onerror; // no database to load from
        openRequest.onsuccess = function openRequest_onsuccess() {
          var db = openRequest.result;
          try {
            var transaction = db.transaction([FS.DB_STORE_NAME], 'readonly');
          } catch(e) {
            onerror(e);
            return;
          }
          var files = transaction.objectStore(FS.DB_STORE_NAME);
          var ok = 0, fail = 0, total = paths.length;
          function finish() {
            if (fail == 0) onload(); else onerror();
          }
          paths.forEach(function(path) {
            var getRequest = files.get(path);
            getRequest.onsuccess = function getRequest_onsuccess() {
              if (FS.analyzePath(path).exists) {
                FS.unlink(path);
              }
              FS.createDataFile(PATH.dirname(path), PATH.basename(path), getRequest.result, true, true, true);
              ok++;
              if (ok + fail == total) finish();
            };
            getRequest.onerror = function getRequest_onerror() { fail++; if (ok + fail == total) finish() };
          });
          transaction.onerror = onerror;
        };
        openRequest.onerror = onerror;
      }};function _fflush(stream) {
      // int fflush(FILE *stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fflush.html
      // we don't currently perform any user-space buffering of data
    }

   
  Module["_strlen"] = _strlen;

  function ___gxx_personality_v0() {
    }

  
  
  
  
  function _mkport() { throw 'TODO' }var SOCKFS={mount:function (mount) {
        // If Module['websocket'] has already been defined (e.g. for configuring
        // the subprotocol/url) use that, if not initialise it to a new object.
        Module['websocket'] = (Module['websocket'] && 
                               ('object' === typeof Module['websocket'])) ? Module['websocket'] : {};
  
        // Add the Event registration mechanism to the exported websocket configuration
        // object so we can register network callbacks from native JavaScript too.
        // For more documentation see system/include/emscripten/emscripten.h
        Module['websocket']._callbacks = {};
        Module['websocket']['on'] = function(event, callback) {
  	    if ('function' === typeof callback) {
  		  this._callbacks[event] = callback;
          }
  	    return this;
        };
  
        Module['websocket'].emit = function(event, param) {
  	    if ('function' === typeof this._callbacks[event]) {
  		  this._callbacks[event].call(this, param);
          }
        };
  
        // If debug is enabled register simple default logging callbacks for each Event.
  
        return FS.createNode(null, '/', 16384 | 511 /* 0777 */, 0);
      },createSocket:function (family, type, protocol) {
        var streaming = type == 1;
        if (protocol) {
          assert(streaming == (protocol == 6)); // if SOCK_STREAM, must be tcp
        }
  
        // create our internal socket structure
        var sock = {
          family: family,
          type: type,
          protocol: protocol,
          server: null,
          error: null, // Used in getsockopt for SOL_SOCKET/SO_ERROR test
          peers: {},
          pending: [],
          recv_queue: [],
          sock_ops: SOCKFS.websocket_sock_ops
        };
  
        // create the filesystem node to store the socket structure
        var name = SOCKFS.nextname();
        var node = FS.createNode(SOCKFS.root, name, 49152, 0);
        node.sock = sock;
  
        // and the wrapping stream that enables library functions such
        // as read and write to indirectly interact with the socket
        var stream = FS.createStream({
          path: name,
          node: node,
          flags: FS.modeStringToFlags('r+'),
          seekable: false,
          stream_ops: SOCKFS.stream_ops
        });
  
        // map the new stream to the socket structure (sockets have a 1:1
        // relationship with a stream)
        sock.stream = stream;
  
        return sock;
      },getSocket:function (fd) {
        var stream = FS.getStream(fd);
        if (!stream || !FS.isSocket(stream.node.mode)) {
          return null;
        }
        return stream.node.sock;
      },stream_ops:{poll:function (stream) {
          var sock = stream.node.sock;
          return sock.sock_ops.poll(sock);
        },ioctl:function (stream, request, varargs) {
          var sock = stream.node.sock;
          return sock.sock_ops.ioctl(sock, request, varargs);
        },read:function (stream, buffer, offset, length, position /* ignored */) {
          var sock = stream.node.sock;
          var msg = sock.sock_ops.recvmsg(sock, length);
          if (!msg) {
            // socket is closed
            return 0;
          }
          buffer.set(msg.buffer, offset);
          return msg.buffer.length;
        },write:function (stream, buffer, offset, length, position /* ignored */) {
          var sock = stream.node.sock;
          return sock.sock_ops.sendmsg(sock, buffer, offset, length);
        },close:function (stream) {
          var sock = stream.node.sock;
          sock.sock_ops.close(sock);
        }},nextname:function () {
        if (!SOCKFS.nextname.current) {
          SOCKFS.nextname.current = 0;
        }
        return 'socket[' + (SOCKFS.nextname.current++) + ']';
      },websocket_sock_ops:{createPeer:function (sock, addr, port) {
          var ws;
  
          if (typeof addr === 'object') {
            ws = addr;
            addr = null;
            port = null;
          }
  
          if (ws) {
            // for sockets that've already connected (e.g. we're the server)
            // we can inspect the _socket property for the address
            if (ws._socket) {
              addr = ws._socket.remoteAddress;
              port = ws._socket.remotePort;
            }
            // if we're just now initializing a connection to the remote,
            // inspect the url property
            else {
              var result = /ws[s]?:\/\/([^:]+):(\d+)/.exec(ws.url);
              if (!result) {
                throw new Error('WebSocket URL must be in the format ws(s)://address:port');
              }
              addr = result[1];
              port = parseInt(result[2], 10);
            }
          } else {
            // create the actual websocket object and connect
            try {
              // runtimeConfig gets set to true if WebSocket runtime configuration is available.
              var runtimeConfig = (Module['websocket'] && ('object' === typeof Module['websocket']));
  
              // The default value is 'ws://' the replace is needed because the compiler replaces '//' comments with '#'
              // comments without checking context, so we'd end up with ws:#, the replace swaps the '#' for '//' again.
              var url = 'ws:#'.replace('#', '//');
  
              if (runtimeConfig) {
                if ('string' === typeof Module['websocket']['url']) {
                  url = Module['websocket']['url']; // Fetch runtime WebSocket URL config.
                }
              }
  
              if (url === 'ws://' || url === 'wss://') { // Is the supplied URL config just a prefix, if so complete it.
                var parts = addr.split('/');
                url = url + parts[0] + ":" + port + "/" + parts.slice(1).join('/');
              }
  
              // Make the WebSocket subprotocol (Sec-WebSocket-Protocol) default to binary if no configuration is set.
              var subProtocols = 'binary'; // The default value is 'binary'
  
              if (runtimeConfig) {
                if ('string' === typeof Module['websocket']['subprotocol']) {
                  subProtocols = Module['websocket']['subprotocol']; // Fetch runtime WebSocket subprotocol config.
                }
              }
  
              // The regex trims the string (removes spaces at the beginning and end, then splits the string by
              // <any space>,<any space> into an Array. Whitespace removal is important for Websockify and ws.
              subProtocols = subProtocols.replace(/^ +| +$/g,"").split(/ *, */);
  
              // The node ws library API for specifying optional subprotocol is slightly different than the browser's.
              var opts = ENVIRONMENT_IS_NODE ? {'protocol': subProtocols.toString()} : subProtocols;
  
              // If node we use the ws library.
              var WebSocket = ENVIRONMENT_IS_NODE ? require('ws') : window['WebSocket'];
              ws = new WebSocket(url, opts);
              ws.binaryType = 'arraybuffer';
            } catch (e) {
              throw new FS.ErrnoError(ERRNO_CODES.EHOSTUNREACH);
            }
          }
  
  
          var peer = {
            addr: addr,
            port: port,
            socket: ws,
            dgram_send_queue: []
          };
  
          SOCKFS.websocket_sock_ops.addPeer(sock, peer);
          SOCKFS.websocket_sock_ops.handlePeerEvents(sock, peer);
  
          // if this is a bound dgram socket, send the port number first to allow
          // us to override the ephemeral port reported to us by remotePort on the
          // remote end.
          if (sock.type === 2 && typeof sock.sport !== 'undefined') {
            peer.dgram_send_queue.push(new Uint8Array([
                255, 255, 255, 255,
                'p'.charCodeAt(0), 'o'.charCodeAt(0), 'r'.charCodeAt(0), 't'.charCodeAt(0),
                ((sock.sport & 0xff00) >> 8) , (sock.sport & 0xff)
            ]));
          }
  
          return peer;
        },getPeer:function (sock, addr, port) {
          return sock.peers[addr + ':' + port];
        },addPeer:function (sock, peer) {
          sock.peers[peer.addr + ':' + peer.port] = peer;
        },removePeer:function (sock, peer) {
          delete sock.peers[peer.addr + ':' + peer.port];
        },handlePeerEvents:function (sock, peer) {
          var first = true;
  
          var handleOpen = function () {
  
            Module['websocket'].emit('open', sock.stream.fd);
  
            try {
              var queued = peer.dgram_send_queue.shift();
              while (queued) {
                peer.socket.send(queued);
                queued = peer.dgram_send_queue.shift();
              }
            } catch (e) {
              // not much we can do here in the way of proper error handling as we've already
              // lied and said this data was sent. shut it down.
              peer.socket.close();
            }
          };
  
          function handleMessage(data) {
            assert(typeof data !== 'string' && data.byteLength !== undefined);  // must receive an ArrayBuffer
            data = new Uint8Array(data);  // make a typed array view on the array buffer
  
  
            // if this is the port message, override the peer's port with it
            var wasfirst = first;
            first = false;
            if (wasfirst &&
                data.length === 10 &&
                data[0] === 255 && data[1] === 255 && data[2] === 255 && data[3] === 255 &&
                data[4] === 'p'.charCodeAt(0) && data[5] === 'o'.charCodeAt(0) && data[6] === 'r'.charCodeAt(0) && data[7] === 't'.charCodeAt(0)) {
              // update the peer's port and it's key in the peer map
              var newport = ((data[8] << 8) | data[9]);
              SOCKFS.websocket_sock_ops.removePeer(sock, peer);
              peer.port = newport;
              SOCKFS.websocket_sock_ops.addPeer(sock, peer);
              return;
            }
  
            sock.recv_queue.push({ addr: peer.addr, port: peer.port, data: data });
            Module['websocket'].emit('message', sock.stream.fd);
          };
  
          if (ENVIRONMENT_IS_NODE) {
            peer.socket.on('open', handleOpen);
            peer.socket.on('message', function(data, flags) {
              if (!flags.binary) {
                return;
              }
              handleMessage((new Uint8Array(data)).buffer);  // copy from node Buffer -> ArrayBuffer
            });
            peer.socket.on('close', function() {
              Module['websocket'].emit('close', sock.stream.fd);
            });
            peer.socket.on('error', function(error) {
              // Although the ws library may pass errors that may be more descriptive than
              // ECONNREFUSED they are not necessarily the expected error code e.g. 
              // ENOTFOUND on getaddrinfo seems to be node.js specific, so using ECONNREFUSED
              // is still probably the most useful thing to do.
              sock.error = ERRNO_CODES.ECONNREFUSED; // Used in getsockopt for SOL_SOCKET/SO_ERROR test.
              Module['websocket'].emit('error', [sock.stream.fd, sock.error, 'ECONNREFUSED: Connection refused']);
              // don't throw
            });
          } else {
            peer.socket.onopen = handleOpen;
            peer.socket.onclose = function() {
              Module['websocket'].emit('close', sock.stream.fd);
            };
            peer.socket.onmessage = function peer_socket_onmessage(event) {
              handleMessage(event.data);
            };
            peer.socket.onerror = function(error) {
              // The WebSocket spec only allows a 'simple event' to be thrown on error,
              // so we only really know as much as ECONNREFUSED.
              sock.error = ERRNO_CODES.ECONNREFUSED; // Used in getsockopt for SOL_SOCKET/SO_ERROR test.
              Module['websocket'].emit('error', [sock.stream.fd, sock.error, 'ECONNREFUSED: Connection refused']);
            };
          }
        },poll:function (sock) {
          if (sock.type === 1 && sock.server) {
            // listen sockets should only say they're available for reading
            // if there are pending clients.
            return sock.pending.length ? (64 | 1) : 0;
          }
  
          var mask = 0;
          var dest = sock.type === 1 ?  // we only care about the socket state for connection-based sockets
            SOCKFS.websocket_sock_ops.getPeer(sock, sock.daddr, sock.dport) :
            null;
  
          if (sock.recv_queue.length ||
              !dest ||  // connection-less sockets are always ready to read
              (dest && dest.socket.readyState === dest.socket.CLOSING) ||
              (dest && dest.socket.readyState === dest.socket.CLOSED)) {  // let recv return 0 once closed
            mask |= (64 | 1);
          }
  
          if (!dest ||  // connection-less sockets are always ready to write
              (dest && dest.socket.readyState === dest.socket.OPEN)) {
            mask |= 4;
          }
  
          if ((dest && dest.socket.readyState === dest.socket.CLOSING) ||
              (dest && dest.socket.readyState === dest.socket.CLOSED)) {
            mask |= 16;
          }
  
          return mask;
        },ioctl:function (sock, request, arg) {
          switch (request) {
            case 21531:
              var bytes = 0;
              if (sock.recv_queue.length) {
                bytes = sock.recv_queue[0].data.length;
              }
              HEAP32[((arg)>>2)]=bytes;
              return 0;
            default:
              return ERRNO_CODES.EINVAL;
          }
        },close:function (sock) {
          // if we've spawned a listen server, close it
          if (sock.server) {
            try {
              sock.server.close();
            } catch (e) {
            }
            sock.server = null;
          }
          // close any peer connections
          var peers = Object.keys(sock.peers);
          for (var i = 0; i < peers.length; i++) {
            var peer = sock.peers[peers[i]];
            try {
              peer.socket.close();
            } catch (e) {
            }
            SOCKFS.websocket_sock_ops.removePeer(sock, peer);
          }
          return 0;
        },bind:function (sock, addr, port) {
          if (typeof sock.saddr !== 'undefined' || typeof sock.sport !== 'undefined') {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);  // already bound
          }
          sock.saddr = addr;
          sock.sport = port || _mkport();
          // in order to emulate dgram sockets, we need to launch a listen server when
          // binding on a connection-less socket
          // note: this is only required on the server side
          if (sock.type === 2) {
            // close the existing server if it exists
            if (sock.server) {
              sock.server.close();
              sock.server = null;
            }
            // swallow error operation not supported error that occurs when binding in the
            // browser where this isn't supported
            try {
              sock.sock_ops.listen(sock, 0);
            } catch (e) {
              if (!(e instanceof FS.ErrnoError)) throw e;
              if (e.errno !== ERRNO_CODES.EOPNOTSUPP) throw e;
            }
          }
        },connect:function (sock, addr, port) {
          if (sock.server) {
            throw new FS.ErrnoError(ERRNO_CODES.EOPNOTSUPP);
          }
  
          // TODO autobind
          // if (!sock.addr && sock.type == 2) {
          // }
  
          // early out if we're already connected / in the middle of connecting
          if (typeof sock.daddr !== 'undefined' && typeof sock.dport !== 'undefined') {
            var dest = SOCKFS.websocket_sock_ops.getPeer(sock, sock.daddr, sock.dport);
            if (dest) {
              if (dest.socket.readyState === dest.socket.CONNECTING) {
                throw new FS.ErrnoError(ERRNO_CODES.EALREADY);
              } else {
                throw new FS.ErrnoError(ERRNO_CODES.EISCONN);
              }
            }
          }
  
          // add the socket to our peer list and set our
          // destination address / port to match
          var peer = SOCKFS.websocket_sock_ops.createPeer(sock, addr, port);
          sock.daddr = peer.addr;
          sock.dport = peer.port;
  
          // always "fail" in non-blocking mode
          throw new FS.ErrnoError(ERRNO_CODES.EINPROGRESS);
        },listen:function (sock, backlog) {
          if (!ENVIRONMENT_IS_NODE) {
            throw new FS.ErrnoError(ERRNO_CODES.EOPNOTSUPP);
          }
          if (sock.server) {
             throw new FS.ErrnoError(ERRNO_CODES.EINVAL);  // already listening
          }
          var WebSocketServer = require('ws').Server;
          var host = sock.saddr;
          sock.server = new WebSocketServer({
            host: host,
            port: sock.sport
            // TODO support backlog
          });
          Module['websocket'].emit('listen', sock.stream.fd); // Send Event with listen fd.
  
          sock.server.on('connection', function(ws) {
            if (sock.type === 1) {
              var newsock = SOCKFS.createSocket(sock.family, sock.type, sock.protocol);
  
              // create a peer on the new socket
              var peer = SOCKFS.websocket_sock_ops.createPeer(newsock, ws);
              newsock.daddr = peer.addr;
              newsock.dport = peer.port;
  
              // push to queue for accept to pick up
              sock.pending.push(newsock);
              Module['websocket'].emit('connection', newsock.stream.fd);
            } else {
              // create a peer on the listen socket so calling sendto
              // with the listen socket and an address will resolve
              // to the correct client
              SOCKFS.websocket_sock_ops.createPeer(sock, ws);
              Module['websocket'].emit('connection', sock.stream.fd);
            }
          });
          sock.server.on('closed', function() {
            Module['websocket'].emit('close', sock.stream.fd);
            sock.server = null;
          });
          sock.server.on('error', function(error) {
            // Although the ws library may pass errors that may be more descriptive than
            // ECONNREFUSED they are not necessarily the expected error code e.g. 
            // ENOTFOUND on getaddrinfo seems to be node.js specific, so using EHOSTUNREACH
            // is still probably the most useful thing to do. This error shouldn't
            // occur in a well written app as errors should get trapped in the compiled
            // app's own getaddrinfo call.
            sock.error = ERRNO_CODES.EHOSTUNREACH; // Used in getsockopt for SOL_SOCKET/SO_ERROR test.
            Module['websocket'].emit('error', [sock.stream.fd, sock.error, 'EHOSTUNREACH: Host is unreachable']);
            // don't throw
          });
        },accept:function (listensock) {
          if (!listensock.server) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
          var newsock = listensock.pending.shift();
          newsock.stream.flags = listensock.stream.flags;
          return newsock;
        },getname:function (sock, peer) {
          var addr, port;
          if (peer) {
            if (sock.daddr === undefined || sock.dport === undefined) {
              throw new FS.ErrnoError(ERRNO_CODES.ENOTCONN);
            }
            addr = sock.daddr;
            port = sock.dport;
          } else {
            // TODO saddr and sport will be set for bind()'d UDP sockets, but what
            // should we be returning for TCP sockets that've been connect()'d?
            addr = sock.saddr || 0;
            port = sock.sport || 0;
          }
          return { addr: addr, port: port };
        },sendmsg:function (sock, buffer, offset, length, addr, port) {
          if (sock.type === 2) {
            // connection-less sockets will honor the message address,
            // and otherwise fall back to the bound destination address
            if (addr === undefined || port === undefined) {
              addr = sock.daddr;
              port = sock.dport;
            }
            // if there was no address to fall back to, error out
            if (addr === undefined || port === undefined) {
              throw new FS.ErrnoError(ERRNO_CODES.EDESTADDRREQ);
            }
          } else {
            // connection-based sockets will only use the bound
            addr = sock.daddr;
            port = sock.dport;
          }
  
          // find the peer for the destination address
          var dest = SOCKFS.websocket_sock_ops.getPeer(sock, addr, port);
  
          // early out if not connected with a connection-based socket
          if (sock.type === 1) {
            if (!dest || dest.socket.readyState === dest.socket.CLOSING || dest.socket.readyState === dest.socket.CLOSED) {
              throw new FS.ErrnoError(ERRNO_CODES.ENOTCONN);
            } else if (dest.socket.readyState === dest.socket.CONNECTING) {
              throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
            }
          }
  
          // create a copy of the incoming data to send, as the WebSocket API
          // doesn't work entirely with an ArrayBufferView, it'll just send
          // the entire underlying buffer
          var data;
          if (buffer instanceof Array || buffer instanceof ArrayBuffer) {
            data = buffer.slice(offset, offset + length);
          } else {  // ArrayBufferView
            data = buffer.buffer.slice(buffer.byteOffset + offset, buffer.byteOffset + offset + length);
          }
  
          // if we're emulating a connection-less dgram socket and don't have
          // a cached connection, queue the buffer to send upon connect and
          // lie, saying the data was sent now.
          if (sock.type === 2) {
            if (!dest || dest.socket.readyState !== dest.socket.OPEN) {
              // if we're not connected, open a new connection
              if (!dest || dest.socket.readyState === dest.socket.CLOSING || dest.socket.readyState === dest.socket.CLOSED) {
                dest = SOCKFS.websocket_sock_ops.createPeer(sock, addr, port);
              }
              dest.dgram_send_queue.push(data);
              return length;
            }
          }
  
          try {
            // send the actual data
            dest.socket.send(data);
            return length;
          } catch (e) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
        },recvmsg:function (sock, length) {
          // http://pubs.opengroup.org/onlinepubs/7908799/xns/recvmsg.html
          if (sock.type === 1 && sock.server) {
            // tcp servers should not be recv()'ing on the listen socket
            throw new FS.ErrnoError(ERRNO_CODES.ENOTCONN);
          }
  
          var queued = sock.recv_queue.shift();
          if (!queued) {
            if (sock.type === 1) {
              var dest = SOCKFS.websocket_sock_ops.getPeer(sock, sock.daddr, sock.dport);
  
              if (!dest) {
                // if we have a destination address but are not connected, error out
                throw new FS.ErrnoError(ERRNO_CODES.ENOTCONN);
              }
              else if (dest.socket.readyState === dest.socket.CLOSING || dest.socket.readyState === dest.socket.CLOSED) {
                // return null if the socket has closed
                return null;
              }
              else {
                // else, our socket is in a valid state but truly has nothing available
                throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
              }
            } else {
              throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
            }
          }
  
          // queued.data will be an ArrayBuffer if it's unadulterated, but if it's
          // requeued TCP data it'll be an ArrayBufferView
          var queuedLength = queued.data.byteLength || queued.data.length;
          var queuedOffset = queued.data.byteOffset || 0;
          var queuedBuffer = queued.data.buffer || queued.data;
          var bytesRead = Math.min(length, queuedLength);
          var res = {
            buffer: new Uint8Array(queuedBuffer, queuedOffset, bytesRead),
            addr: queued.addr,
            port: queued.port
          };
  
  
          // push back any unread data for TCP connections
          if (sock.type === 1 && bytesRead < queuedLength) {
            var bytesRemaining = queuedLength - bytesRead;
            queued.data = new Uint8Array(queuedBuffer, queuedOffset + bytesRead, bytesRemaining);
            sock.recv_queue.unshift(queued);
          }
  
          return res;
        }}};function _send(fd, buf, len, flags) {
      var sock = SOCKFS.getSocket(fd);
      if (!sock) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
      // TODO honor flags
      return _write(fd, buf, len);
    }
  
  function _pwrite(fildes, buf, nbyte, offset) {
      // ssize_t pwrite(int fildes, const void *buf, size_t nbyte, off_t offset);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/write.html
      var stream = FS.getStream(fildes);
      if (!stream) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
      try {
        var slab = HEAP8;
        return FS.write(stream, slab, buf, nbyte, offset);
      } catch (e) {
        FS.handleFSError(e);
        return -1;
      }
    }function _write(fildes, buf, nbyte) {
      // ssize_t write(int fildes, const void *buf, size_t nbyte);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/write.html
      var stream = FS.getStream(fildes);
      if (!stream) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
  
  
      try {
        var slab = HEAP8;
        return FS.write(stream, slab, buf, nbyte);
      } catch (e) {
        FS.handleFSError(e);
        return -1;
      }
    }
  
  function _fileno(stream) {
      // int fileno(FILE *stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fileno.html
      stream = FS.getStreamFromPtr(stream);
      if (!stream) return -1;
      return stream.fd;
    }function _fputc(c, stream) {
      // int fputc(int c, FILE *stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fputc.html
      var chr = unSign(c & 0xFF);
      HEAP8[((_fputc.ret)>>0)]=chr;
      var fd = _fileno(stream);
      var ret = _write(fd, _fputc.ret, 1);
      if (ret == -1) {
        var streamObj = FS.getStreamFromPtr(stream);
        if (streamObj) streamObj.error = true;
        return -1;
      } else {
        return chr;
      }
    }

  
  var PTHREAD_SPECIFIC={};function _pthread_getspecific(key) {
      return PTHREAD_SPECIFIC[key] || 0;
    }

   
  Module["_i64Add"] = _i64Add;

  var _emscripten_postinvoke=true;

  function _fwrite(ptr, size, nitems, stream) {
      // size_t fwrite(const void *restrict ptr, size_t size, size_t nitems, FILE *restrict stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fwrite.html
      var bytesToWrite = nitems * size;
      if (bytesToWrite == 0) return 0;
      var fd = _fileno(stream);
      var bytesWritten = _write(fd, ptr, bytesToWrite);
      if (bytesWritten == -1) {
        var streamObj = FS.getStreamFromPtr(stream);
        if (streamObj) streamObj.error = true;
        return 0;
      } else {
        return (bytesWritten / size)|0;
      }
    }

  
  
  
  
  function _recv(fd, buf, len, flags) {
      var sock = SOCKFS.getSocket(fd);
      if (!sock) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
      // TODO honor flags
      return _read(fd, buf, len);
    }
  
  function _pread(fildes, buf, nbyte, offset) {
      // ssize_t pread(int fildes, void *buf, size_t nbyte, off_t offset);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/read.html
      var stream = FS.getStream(fildes);
      if (!stream) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
      try {
        var slab = HEAP8;
        return FS.read(stream, slab, buf, nbyte, offset);
      } catch (e) {
        FS.handleFSError(e);
        return -1;
      }
    }function _read(fildes, buf, nbyte) {
      // ssize_t read(int fildes, void *buf, size_t nbyte);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/read.html
      var stream = FS.getStream(fildes);
      if (!stream) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
  
  
      try {
        var slab = HEAP8;
        return FS.read(stream, slab, buf, nbyte);
      } catch (e) {
        FS.handleFSError(e);
        return -1;
      }
    }function _fread(ptr, size, nitems, stream) {
      // size_t fread(void *restrict ptr, size_t size, size_t nitems, FILE *restrict stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fread.html
      var bytesToRead = nitems * size;
      if (bytesToRead == 0) {
        return 0;
      }
      var bytesRead = 0;
      var streamObj = FS.getStreamFromPtr(stream);
      if (!streamObj) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return 0;
      }
      while (streamObj.ungotten.length && bytesToRead > 0) {
        HEAP8[((ptr++)>>0)]=streamObj.ungotten.pop();
        bytesToRead--;
        bytesRead++;
      }
      var err = _read(streamObj.fd, ptr, bytesToRead);
      if (err == -1) {
        if (streamObj) streamObj.error = true;
        return 0;
      }
      bytesRead += err;
      if (bytesRead < bytesToRead) streamObj.eof = true;
      return (bytesRead / size)|0;
    }function _fgetc(stream) {
      // int fgetc(FILE *stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fgetc.html
      var streamObj = FS.getStreamFromPtr(stream);
      if (!streamObj) return -1;
      if (streamObj.eof || streamObj.error) return -1;
      var ret = _fread(_fgetc.ret, 1, 1, stream);
      if (ret == 0) {
        return -1;
      } else if (ret == -1) {
        streamObj.error = true;
        return -1;
      } else {
        return HEAPU8[((_fgetc.ret)>>0)];
      }
    }function _getc() {
  return _fgetc.apply(null, arguments)
  }

  var Browser={mainLoop:{scheduler:null,method:"",shouldPause:false,paused:false,queue:[],pause:function () {
          Browser.mainLoop.shouldPause = true;
        },resume:function () {
          if (Browser.mainLoop.paused) {
            Browser.mainLoop.paused = false;
            Browser.mainLoop.scheduler();
          }
          Browser.mainLoop.shouldPause = false;
        },updateStatus:function () {
          if (Module['setStatus']) {
            var message = Module['statusMessage'] || 'Please wait...';
            var remaining = Browser.mainLoop.remainingBlockers;
            var expected = Browser.mainLoop.expectedBlockers;
            if (remaining) {
              if (remaining < expected) {
                Module['setStatus'](message + ' (' + (expected - remaining) + '/' + expected + ')');
              } else {
                Module['setStatus'](message);
              }
            } else {
              Module['setStatus']('');
            }
          }
        },runIter:function (func) {
          if (ABORT) return;
          if (Module['preMainLoop']) {
            var preRet = Module['preMainLoop']();
            if (preRet === false) {
              return; // |return false| skips a frame
            }
          }
          try {
            func();
          } catch (e) {
            if (e instanceof ExitStatus) {
              return;
            } else {
              if (e && typeof e === 'object' && e.stack) Module.printErr('exception thrown: ' + [e, e.stack]);
              throw e;
            }
          }
          if (Module['postMainLoop']) Module['postMainLoop']();
        }},isFullScreen:false,pointerLock:false,moduleContextCreatedCallbacks:[],workers:[],init:function () {
        if (!Module["preloadPlugins"]) Module["preloadPlugins"] = []; // needs to exist even in workers
  
        if (Browser.initted) return;
        Browser.initted = true;
  
        try {
          new Blob();
          Browser.hasBlobConstructor = true;
        } catch(e) {
          Browser.hasBlobConstructor = false;
          console.log("warning: no blob constructor, cannot create blobs with mimetypes");
        }
        Browser.BlobBuilder = typeof MozBlobBuilder != "undefined" ? MozBlobBuilder : (typeof WebKitBlobBuilder != "undefined" ? WebKitBlobBuilder : (!Browser.hasBlobConstructor ? console.log("warning: no BlobBuilder") : null));
        Browser.URLObject = typeof window != "undefined" ? (window.URL ? window.URL : window.webkitURL) : undefined;
        if (!Module.noImageDecoding && typeof Browser.URLObject === 'undefined') {
          console.log("warning: Browser does not support creating object URLs. Built-in browser image decoding will not be available.");
          Module.noImageDecoding = true;
        }
  
        // Support for plugins that can process preloaded files. You can add more of these to
        // your app by creating and appending to Module.preloadPlugins.
        //
        // Each plugin is asked if it can handle a file based on the file's name. If it can,
        // it is given the file's raw data. When it is done, it calls a callback with the file's
        // (possibly modified) data. For example, a plugin might decompress a file, or it
        // might create some side data structure for use later (like an Image element, etc.).
  
        var imagePlugin = {};
        imagePlugin['canHandle'] = function imagePlugin_canHandle(name) {
          return !Module.noImageDecoding && /\.(jpg|jpeg|png|bmp)$/i.test(name);
        };
        imagePlugin['handle'] = function imagePlugin_handle(byteArray, name, onload, onerror) {
          var b = null;
          if (Browser.hasBlobConstructor) {
            try {
              b = new Blob([byteArray], { type: Browser.getMimetype(name) });
              if (b.size !== byteArray.length) { // Safari bug #118630
                // Safari's Blob can only take an ArrayBuffer
                b = new Blob([(new Uint8Array(byteArray)).buffer], { type: Browser.getMimetype(name) });
              }
            } catch(e) {
              Runtime.warnOnce('Blob constructor present but fails: ' + e + '; falling back to blob builder');
            }
          }
          if (!b) {
            var bb = new Browser.BlobBuilder();
            bb.append((new Uint8Array(byteArray)).buffer); // we need to pass a buffer, and must copy the array to get the right data range
            b = bb.getBlob();
          }
          var url = Browser.URLObject.createObjectURL(b);
          assert(typeof url == 'string', 'createObjectURL must return a url as a string');
          var img = new Image();
          img.onload = function img_onload() {
            assert(img.complete, 'Image ' + name + ' could not be decoded');
            var canvas = document.createElement('canvas');
            canvas.width = img.width;
            canvas.height = img.height;
            var ctx = canvas.getContext('2d');
            ctx.drawImage(img, 0, 0);
            Module["preloadedImages"][name] = canvas;
            Browser.URLObject.revokeObjectURL(url);
            if (onload) onload(byteArray);
          };
          img.onerror = function img_onerror(event) {
            console.log('Image ' + url + ' could not be decoded');
            if (onerror) onerror();
          };
          img.src = url;
        };
        Module['preloadPlugins'].push(imagePlugin);
  
        var audioPlugin = {};
        audioPlugin['canHandle'] = function audioPlugin_canHandle(name) {
          return !Module.noAudioDecoding && name.substr(-4) in { '.ogg': 1, '.wav': 1, '.mp3': 1 };
        };
        audioPlugin['handle'] = function audioPlugin_handle(byteArray, name, onload, onerror) {
          var done = false;
          function finish(audio) {
            if (done) return;
            done = true;
            Module["preloadedAudios"][name] = audio;
            if (onload) onload(byteArray);
          }
          function fail() {
            if (done) return;
            done = true;
            Module["preloadedAudios"][name] = new Audio(); // empty shim
            if (onerror) onerror();
          }
          if (Browser.hasBlobConstructor) {
            try {
              var b = new Blob([byteArray], { type: Browser.getMimetype(name) });
            } catch(e) {
              return fail();
            }
            var url = Browser.URLObject.createObjectURL(b); // XXX we never revoke this!
            assert(typeof url == 'string', 'createObjectURL must return a url as a string');
            var audio = new Audio();
            audio.addEventListener('canplaythrough', function() { finish(audio) }, false); // use addEventListener due to chromium bug 124926
            audio.onerror = function audio_onerror(event) {
              if (done) return;
              console.log('warning: browser could not fully decode audio ' + name + ', trying slower base64 approach');
              function encode64(data) {
                var BASE = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';
                var PAD = '=';
                var ret = '';
                var leftchar = 0;
                var leftbits = 0;
                for (var i = 0; i < data.length; i++) {
                  leftchar = (leftchar << 8) | data[i];
                  leftbits += 8;
                  while (leftbits >= 6) {
                    var curr = (leftchar >> (leftbits-6)) & 0x3f;
                    leftbits -= 6;
                    ret += BASE[curr];
                  }
                }
                if (leftbits == 2) {
                  ret += BASE[(leftchar&3) << 4];
                  ret += PAD + PAD;
                } else if (leftbits == 4) {
                  ret += BASE[(leftchar&0xf) << 2];
                  ret += PAD;
                }
                return ret;
              }
              audio.src = 'data:audio/x-' + name.substr(-3) + ';base64,' + encode64(byteArray);
              finish(audio); // we don't wait for confirmation this worked - but it's worth trying
            };
            audio.src = url;
            // workaround for chrome bug 124926 - we do not always get oncanplaythrough or onerror
            Browser.safeSetTimeout(function() {
              finish(audio); // try to use it even though it is not necessarily ready to play
            }, 10000);
          } else {
            return fail();
          }
        };
        Module['preloadPlugins'].push(audioPlugin);
  
        // Canvas event setup
  
        var canvas = Module['canvas'];
        function pointerLockChange() {
          Browser.pointerLock = document['pointerLockElement'] === canvas ||
                                document['mozPointerLockElement'] === canvas ||
                                document['webkitPointerLockElement'] === canvas ||
                                document['msPointerLockElement'] === canvas;
        }
        if (canvas) {
          // forced aspect ratio can be enabled by defining 'forcedAspectRatio' on Module
          // Module['forcedAspectRatio'] = 4 / 3;
          
          canvas.requestPointerLock = canvas['requestPointerLock'] ||
                                      canvas['mozRequestPointerLock'] ||
                                      canvas['webkitRequestPointerLock'] ||
                                      canvas['msRequestPointerLock'] ||
                                      function(){};
          canvas.exitPointerLock = document['exitPointerLock'] ||
                                   document['mozExitPointerLock'] ||
                                   document['webkitExitPointerLock'] ||
                                   document['msExitPointerLock'] ||
                                   function(){}; // no-op if function does not exist
          canvas.exitPointerLock = canvas.exitPointerLock.bind(document);
  
  
          document.addEventListener('pointerlockchange', pointerLockChange, false);
          document.addEventListener('mozpointerlockchange', pointerLockChange, false);
          document.addEventListener('webkitpointerlockchange', pointerLockChange, false);
          document.addEventListener('mspointerlockchange', pointerLockChange, false);
  
          if (Module['elementPointerLock']) {
            canvas.addEventListener("click", function(ev) {
              if (!Browser.pointerLock && canvas.requestPointerLock) {
                canvas.requestPointerLock();
                ev.preventDefault();
              }
            }, false);
          }
        }
      },createContext:function (canvas, useWebGL, setInModule, webGLContextAttributes) {
        if (useWebGL && Module.ctx && canvas == Module.canvas) return Module.ctx; // no need to recreate GL context if it's already been created for this canvas.
  
        var ctx;
        var contextHandle;
        if (useWebGL) {
          // For GLES2/desktop GL compatibility, adjust a few defaults to be different to WebGL defaults, so that they align better with the desktop defaults.
          var contextAttributes = {
            antialias: false,
            alpha: false
          };
  
          if (webGLContextAttributes) {
            for (var attribute in webGLContextAttributes) {
              contextAttributes[attribute] = webGLContextAttributes[attribute];
            }
          }
  
          contextHandle = GL.createContext(canvas, contextAttributes);
          if (contextHandle) {
            ctx = GL.getContext(contextHandle).GLctx;
          }
          // Set the background of the WebGL canvas to black
          canvas.style.backgroundColor = "black";
        } else {
          ctx = canvas.getContext('2d');
        }
  
        if (!ctx) return null;
  
        if (setInModule) {
          if (!useWebGL) assert(typeof GLctx === 'undefined', 'cannot set in module if GLctx is used, but we are a non-GL context that would replace it');
  
          Module.ctx = ctx;
          if (useWebGL) GL.makeContextCurrent(contextHandle);
          Module.useWebGL = useWebGL;
          Browser.moduleContextCreatedCallbacks.forEach(function(callback) { callback() });
          Browser.init();
        }
        return ctx;
      },destroyContext:function (canvas, useWebGL, setInModule) {},fullScreenHandlersInstalled:false,lockPointer:undefined,resizeCanvas:undefined,requestFullScreen:function (lockPointer, resizeCanvas) {
        Browser.lockPointer = lockPointer;
        Browser.resizeCanvas = resizeCanvas;
        if (typeof Browser.lockPointer === 'undefined') Browser.lockPointer = true;
        if (typeof Browser.resizeCanvas === 'undefined') Browser.resizeCanvas = false;
  
        var canvas = Module['canvas'];
        function fullScreenChange() {
          Browser.isFullScreen = false;
          var canvasContainer = canvas.parentNode;
          if ((document['webkitFullScreenElement'] || document['webkitFullscreenElement'] ||
               document['mozFullScreenElement'] || document['mozFullscreenElement'] ||
               document['fullScreenElement'] || document['fullscreenElement'] ||
               document['msFullScreenElement'] || document['msFullscreenElement'] ||
               document['webkitCurrentFullScreenElement']) === canvasContainer) {
            canvas.cancelFullScreen = document['cancelFullScreen'] ||
                                      document['mozCancelFullScreen'] ||
                                      document['webkitCancelFullScreen'] ||
                                      document['msExitFullscreen'] ||
                                      document['exitFullscreen'] ||
                                      function() {};
            canvas.cancelFullScreen = canvas.cancelFullScreen.bind(document);
            if (Browser.lockPointer) canvas.requestPointerLock();
            Browser.isFullScreen = true;
            if (Browser.resizeCanvas) Browser.setFullScreenCanvasSize();
          } else {
            
            // remove the full screen specific parent of the canvas again to restore the HTML structure from before going full screen
            canvasContainer.parentNode.insertBefore(canvas, canvasContainer);
            canvasContainer.parentNode.removeChild(canvasContainer);
            
            if (Browser.resizeCanvas) Browser.setWindowedCanvasSize();
          }
          if (Module['onFullScreen']) Module['onFullScreen'](Browser.isFullScreen);
          Browser.updateCanvasDimensions(canvas);
        }
  
        if (!Browser.fullScreenHandlersInstalled) {
          Browser.fullScreenHandlersInstalled = true;
          document.addEventListener('fullscreenchange', fullScreenChange, false);
          document.addEventListener('mozfullscreenchange', fullScreenChange, false);
          document.addEventListener('webkitfullscreenchange', fullScreenChange, false);
          document.addEventListener('MSFullscreenChange', fullScreenChange, false);
        }
  
        // create a new parent to ensure the canvas has no siblings. this allows browsers to optimize full screen performance when its parent is the full screen root
        var canvasContainer = document.createElement("div");
        canvas.parentNode.insertBefore(canvasContainer, canvas);
        canvasContainer.appendChild(canvas);
        
        // use parent of canvas as full screen root to allow aspect ratio correction (Firefox stretches the root to screen size)
        canvasContainer.requestFullScreen = canvasContainer['requestFullScreen'] ||
                                            canvasContainer['mozRequestFullScreen'] ||
                                            canvasContainer['msRequestFullscreen'] ||
                                           (canvasContainer['webkitRequestFullScreen'] ? function() { canvasContainer['webkitRequestFullScreen'](Element['ALLOW_KEYBOARD_INPUT']) } : null);
        canvasContainer.requestFullScreen();
      },nextRAF:0,fakeRequestAnimationFrame:function (func) {
        // try to keep 60fps between calls to here
        var now = Date.now();
        if (Browser.nextRAF === 0) {
          Browser.nextRAF = now + 1000/60;
        } else {
          while (now + 2 >= Browser.nextRAF) { // fudge a little, to avoid timer jitter causing us to do lots of delay:0
            Browser.nextRAF += 1000/60;
          }
        }
        var delay = Math.max(Browser.nextRAF - now, 0);
        setTimeout(func, delay);
      },requestAnimationFrame:function requestAnimationFrame(func) {
        if (typeof window === 'undefined') { // Provide fallback to setTimeout if window is undefined (e.g. in Node.js)
          Browser.fakeRequestAnimationFrame(func);
        } else {
          if (!window.requestAnimationFrame) {
            window.requestAnimationFrame = window['requestAnimationFrame'] ||
                                           window['mozRequestAnimationFrame'] ||
                                           window['webkitRequestAnimationFrame'] ||
                                           window['msRequestAnimationFrame'] ||
                                           window['oRequestAnimationFrame'] ||
                                           Browser.fakeRequestAnimationFrame;
          }
          window.requestAnimationFrame(func);
        }
      },safeCallback:function (func) {
        return function() {
          if (!ABORT) return func.apply(null, arguments);
        };
      },safeRequestAnimationFrame:function (func) {
        return Browser.requestAnimationFrame(function() {
          if (!ABORT) func();
        });
      },safeSetTimeout:function (func, timeout) {
        Module['noExitRuntime'] = true;
        return setTimeout(function() {
          if (!ABORT) func();
        }, timeout);
      },safeSetInterval:function (func, timeout) {
        Module['noExitRuntime'] = true;
        return setInterval(function() {
          if (!ABORT) func();
        }, timeout);
      },getMimetype:function (name) {
        return {
          'jpg': 'image/jpeg',
          'jpeg': 'image/jpeg',
          'png': 'image/png',
          'bmp': 'image/bmp',
          'ogg': 'audio/ogg',
          'wav': 'audio/wav',
          'mp3': 'audio/mpeg'
        }[name.substr(name.lastIndexOf('.')+1)];
      },getUserMedia:function (func) {
        if(!window.getUserMedia) {
          window.getUserMedia = navigator['getUserMedia'] ||
                                navigator['mozGetUserMedia'];
        }
        window.getUserMedia(func);
      },getMovementX:function (event) {
        return event['movementX'] ||
               event['mozMovementX'] ||
               event['webkitMovementX'] ||
               0;
      },getMovementY:function (event) {
        return event['movementY'] ||
               event['mozMovementY'] ||
               event['webkitMovementY'] ||
               0;
      },getMouseWheelDelta:function (event) {
        var delta = 0;
        switch (event.type) {
          case 'DOMMouseScroll': 
            delta = event.detail;
            break;
          case 'mousewheel': 
            delta = event.wheelDelta;
            break;
          case 'wheel': 
            delta = event['deltaY'];
            break;
          default:
            throw 'unrecognized mouse wheel event: ' + event.type;
        }
        return delta;
      },mouseX:0,mouseY:0,mouseMovementX:0,mouseMovementY:0,touches:{},lastTouches:{},calculateMouseEvent:function (event) { // event should be mousemove, mousedown or mouseup
        if (Browser.pointerLock) {
          // When the pointer is locked, calculate the coordinates
          // based on the movement of the mouse.
          // Workaround for Firefox bug 764498
          if (event.type != 'mousemove' &&
              ('mozMovementX' in event)) {
            Browser.mouseMovementX = Browser.mouseMovementY = 0;
          } else {
            Browser.mouseMovementX = Browser.getMovementX(event);
            Browser.mouseMovementY = Browser.getMovementY(event);
          }
          
          // check if SDL is available
          if (typeof SDL != "undefined") {
          	Browser.mouseX = SDL.mouseX + Browser.mouseMovementX;
          	Browser.mouseY = SDL.mouseY + Browser.mouseMovementY;
          } else {
          	// just add the mouse delta to the current absolut mouse position
          	// FIXME: ideally this should be clamped against the canvas size and zero
          	Browser.mouseX += Browser.mouseMovementX;
          	Browser.mouseY += Browser.mouseMovementY;
          }        
        } else {
          // Otherwise, calculate the movement based on the changes
          // in the coordinates.
          var rect = Module["canvas"].getBoundingClientRect();
          var cw = Module["canvas"].width;
          var ch = Module["canvas"].height;
  
          // Neither .scrollX or .pageXOffset are defined in a spec, but
          // we prefer .scrollX because it is currently in a spec draft.
          // (see: http://www.w3.org/TR/2013/WD-cssom-view-20131217/)
          var scrollX = ((typeof window.scrollX !== 'undefined') ? window.scrollX : window.pageXOffset);
          var scrollY = ((typeof window.scrollY !== 'undefined') ? window.scrollY : window.pageYOffset);
          // If this assert lands, it's likely because the browser doesn't support scrollX or pageXOffset
          // and we have no viable fallback.
          assert((typeof scrollX !== 'undefined') && (typeof scrollY !== 'undefined'), 'Unable to retrieve scroll position, mouse positions likely broken.');
  
          if (event.type === 'touchstart' || event.type === 'touchend' || event.type === 'touchmove') {
            var touch = event.touch;
            if (touch === undefined) {
              return; // the "touch" property is only defined in SDL
  
            }
            var adjustedX = touch.pageX - (scrollX + rect.left);
            var adjustedY = touch.pageY - (scrollY + rect.top);
  
            adjustedX = adjustedX * (cw / rect.width);
            adjustedY = adjustedY * (ch / rect.height);
  
            var coords = { x: adjustedX, y: adjustedY };
            
            if (event.type === 'touchstart') {
              Browser.lastTouches[touch.identifier] = coords;
              Browser.touches[touch.identifier] = coords;
            } else if (event.type === 'touchend' || event.type === 'touchmove') {
              Browser.lastTouches[touch.identifier] = Browser.touches[touch.identifier];
              Browser.touches[touch.identifier] = { x: adjustedX, y: adjustedY };
            } 
            return;
          }
  
          var x = event.pageX - (scrollX + rect.left);
          var y = event.pageY - (scrollY + rect.top);
  
          // the canvas might be CSS-scaled compared to its backbuffer;
          // SDL-using content will want mouse coordinates in terms
          // of backbuffer units.
          x = x * (cw / rect.width);
          y = y * (ch / rect.height);
  
          Browser.mouseMovementX = x - Browser.mouseX;
          Browser.mouseMovementY = y - Browser.mouseY;
          Browser.mouseX = x;
          Browser.mouseY = y;
        }
      },xhrLoad:function (url, onload, onerror) {
        var xhr = new XMLHttpRequest();
        xhr.open('GET', url, true);
        xhr.responseType = 'arraybuffer';
        xhr.onload = function xhr_onload() {
          if (xhr.status == 200 || (xhr.status == 0 && xhr.response)) { // file URLs can return 0
            onload(xhr.response);
          } else {
            onerror();
          }
        };
        xhr.onerror = onerror;
        xhr.send(null);
      },asyncLoad:function (url, onload, onerror, noRunDep) {
        Browser.xhrLoad(url, function(arrayBuffer) {
          assert(arrayBuffer, 'Loading data file "' + url + '" failed (no arrayBuffer).');
          onload(new Uint8Array(arrayBuffer));
          if (!noRunDep) removeRunDependency('al ' + url);
        }, function(event) {
          if (onerror) {
            onerror();
          } else {
            throw 'Loading data file "' + url + '" failed.';
          }
        });
        if (!noRunDep) addRunDependency('al ' + url);
      },resizeListeners:[],updateResizeListeners:function () {
        var canvas = Module['canvas'];
        Browser.resizeListeners.forEach(function(listener) {
          listener(canvas.width, canvas.height);
        });
      },setCanvasSize:function (width, height, noUpdates) {
        var canvas = Module['canvas'];
        Browser.updateCanvasDimensions(canvas, width, height);
        if (!noUpdates) Browser.updateResizeListeners();
      },windowedWidth:0,windowedHeight:0,setFullScreenCanvasSize:function () {
        // check if SDL is available   
        if (typeof SDL != "undefined") {
        	var flags = HEAPU32[((SDL.screen+Runtime.QUANTUM_SIZE*0)>>2)];
        	flags = flags | 0x00800000; // set SDL_FULLSCREEN flag
        	HEAP32[((SDL.screen+Runtime.QUANTUM_SIZE*0)>>2)]=flags
        }
        Browser.updateResizeListeners();
      },setWindowedCanvasSize:function () {
        // check if SDL is available       
        if (typeof SDL != "undefined") {
        	var flags = HEAPU32[((SDL.screen+Runtime.QUANTUM_SIZE*0)>>2)];
        	flags = flags & ~0x00800000; // clear SDL_FULLSCREEN flag
        	HEAP32[((SDL.screen+Runtime.QUANTUM_SIZE*0)>>2)]=flags
        }
        Browser.updateResizeListeners();
      },updateCanvasDimensions:function (canvas, wNative, hNative) {
        if (wNative && hNative) {
          canvas.widthNative = wNative;
          canvas.heightNative = hNative;
        } else {
          wNative = canvas.widthNative;
          hNative = canvas.heightNative;
        }
        var w = wNative;
        var h = hNative;
        if (Module['forcedAspectRatio'] && Module['forcedAspectRatio'] > 0) {
          if (w/h < Module['forcedAspectRatio']) {
            w = Math.round(h * Module['forcedAspectRatio']);
          } else {
            h = Math.round(w / Module['forcedAspectRatio']);
          }
        }
        if (((document['webkitFullScreenElement'] || document['webkitFullscreenElement'] ||
             document['mozFullScreenElement'] || document['mozFullscreenElement'] ||
             document['fullScreenElement'] || document['fullscreenElement'] ||
             document['msFullScreenElement'] || document['msFullscreenElement'] ||
             document['webkitCurrentFullScreenElement']) === canvas.parentNode) && (typeof screen != 'undefined')) {
           var factor = Math.min(screen.width / w, screen.height / h);
           w = Math.round(w * factor);
           h = Math.round(h * factor);
        }
        if (Browser.resizeCanvas) {
          if (canvas.width  != w) canvas.width  = w;
          if (canvas.height != h) canvas.height = h;
          if (typeof canvas.style != 'undefined') {
            canvas.style.removeProperty( "width");
            canvas.style.removeProperty("height");
          }
        } else {
          if (canvas.width  != wNative) canvas.width  = wNative;
          if (canvas.height != hNative) canvas.height = hNative;
          if (typeof canvas.style != 'undefined') {
            if (w != wNative || h != hNative) {
              canvas.style.setProperty( "width", w + "px", "important");
              canvas.style.setProperty("height", h + "px", "important");
            } else {
              canvas.style.removeProperty( "width");
              canvas.style.removeProperty("height");
            }
          }
        }
      },wgetRequests:{},nextWgetRequestHandle:0,getNextWgetRequestHandle:function () {
        var handle = Browser.nextWgetRequestHandle;
        Browser.nextWgetRequestHandle++;
        return handle;
      }};

  function _pthread_setspecific(key, value) {
      if (!(key in PTHREAD_SPECIFIC)) {
        return ERRNO_CODES.EINVAL;
      }
      PTHREAD_SPECIFIC[key] = value;
      return 0;
    }

  function ___ctype_b_loc() {
      // http://refspecs.freestandards.org/LSB_3.0.0/LSB-Core-generic/LSB-Core-generic/baselib---ctype-b-loc.html
      var me = ___ctype_b_loc;
      if (!me.ret) {
        var values = [
          0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
          0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
          0,0,0,0,0,0,0,0,0,0,2,2,2,2,2,2,2,2,2,8195,8194,8194,8194,8194,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,24577,49156,49156,49156,
          49156,49156,49156,49156,49156,49156,49156,49156,49156,49156,49156,49156,55304,55304,55304,55304,55304,55304,55304,55304,
          55304,55304,49156,49156,49156,49156,49156,49156,49156,54536,54536,54536,54536,54536,54536,50440,50440,50440,50440,50440,
          50440,50440,50440,50440,50440,50440,50440,50440,50440,50440,50440,50440,50440,50440,50440,49156,49156,49156,49156,49156,
          49156,54792,54792,54792,54792,54792,54792,50696,50696,50696,50696,50696,50696,50696,50696,50696,50696,50696,50696,50696,
          50696,50696,50696,50696,50696,50696,50696,49156,49156,49156,49156,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
          0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
          0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
        ];
        var i16size = 2;
        var arr = _malloc(values.length * i16size);
        for (var i = 0; i < values.length; i++) {
          HEAP16[(((arr)+(i * i16size))>>1)]=values[i];
        }
        me.ret = allocate([arr + 128 * i16size], 'i16*', ALLOC_NORMAL);
      }
      return me.ret;
    }

  
  var LOCALE={curr:0,check:function (locale) {
        if (locale) locale = Pointer_stringify(locale);
        return locale === 'C' || locale === 'POSIX' || !locale;
      }};function _freelocale(locale) {
      _free(locale);
    }

  
  function _malloc(bytes) {
      /* Over-allocate to make sure it is byte-aligned by 8.
       * This will leak memory, but this is only the dummy
       * implementation (replaced by dlmalloc normally) so
       * not an issue.
       */
      var ptr = Runtime.dynamicAlloc(bytes + 8);
      return (ptr+8) & 0xFFFFFFF8;
    }
  Module["_malloc"] = _malloc;function ___cxa_allocate_exception(size) {
      return _malloc(size);
    }

  
  function _fmod(x, y) {
      return x % y;
    }function _fmodl() {
  return _fmod.apply(null, arguments)
  }

   
  Module["_bitshift64Lshr"] = _bitshift64Lshr;

  var _BDtoIHigh=true;

  function _catgets(catd, set_id, msg_id, s) {
      // char *catgets (nl_catd catd, int set_id, int msg_id, const char *s)
      return s;
    }


  function _pthread_cond_wait() {
      return 0;
    }

  function _time(ptr) {
      var ret = (Date.now()/1000)|0;
      if (ptr) {
        HEAP32[((ptr)>>2)]=ret;
      }
      return ret;
    }

  function _pthread_cond_broadcast() {
      return 0;
    }

  function ___ctype_toupper_loc() {
      // http://refspecs.freestandards.org/LSB_3.1.1/LSB-Core-generic/LSB-Core-generic/libutil---ctype-toupper-loc.html
      var me = ___ctype_toupper_loc;
      if (!me.ret) {
        var values = [
          128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,
          158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,
          188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,
          218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,
          248,249,250,251,252,253,254,-1,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,
          33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,
          73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,
          81,82,83,84,85,86,87,88,89,90,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,
          145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,
          175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,
          205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,
          235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255
        ];
        var i32size = 4;
        var arr = _malloc(values.length * i32size);
        for (var i = 0; i < values.length; i++) {
          HEAP32[(((arr)+(i * i32size))>>2)]=values[i];
        }
        me.ret = allocate([arr + 128 * i32size], 'i32*', ALLOC_NORMAL);
      }
      return me.ret;
    }

  function ___cxa_guard_acquire(variable) {
      if (!HEAP8[((variable)>>0)]) { // ignore SAFE_HEAP stuff because llvm mixes i64 and i8 here
        HEAP8[((variable)>>0)]=1;
        return 1;
      }
      return 0;
    }

  function ___cxa_guard_release() {}

  
  
  
  function __reallyNegative(x) {
      return x < 0 || (x === 0 && (1/x) === -Infinity);
    }function __formatString(format, varargs) {
      var textIndex = format;
      var argIndex = 0;
      function getNextArg(type) {
        // NOTE: Explicitly ignoring type safety. Otherwise this fails:
        //       int x = 4; printf("%c\n", (char)x);
        var ret;
        if (type === 'double') {
          ret = (HEAP32[((tempDoublePtr)>>2)]=HEAP32[(((varargs)+(argIndex))>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[(((varargs)+((argIndex)+(4)))>>2)],(+(HEAPF64[(tempDoublePtr)>>3])));
        } else if (type == 'i64') {
          ret = [HEAP32[(((varargs)+(argIndex))>>2)],
                 HEAP32[(((varargs)+(argIndex+4))>>2)]];
  
        } else {
          type = 'i32'; // varargs are always i32, i64, or double
          ret = HEAP32[(((varargs)+(argIndex))>>2)];
        }
        argIndex += Runtime.getNativeFieldSize(type);
        return ret;
      }
  
      var ret = [];
      var curr, next, currArg;
      while(1) {
        var startTextIndex = textIndex;
        curr = HEAP8[((textIndex)>>0)];
        if (curr === 0) break;
        next = HEAP8[((textIndex+1)>>0)];
        if (curr == 37) {
          // Handle flags.
          var flagAlwaysSigned = false;
          var flagLeftAlign = false;
          var flagAlternative = false;
          var flagZeroPad = false;
          var flagPadSign = false;
          flagsLoop: while (1) {
            switch (next) {
              case 43:
                flagAlwaysSigned = true;
                break;
              case 45:
                flagLeftAlign = true;
                break;
              case 35:
                flagAlternative = true;
                break;
              case 48:
                if (flagZeroPad) {
                  break flagsLoop;
                } else {
                  flagZeroPad = true;
                  break;
                }
              case 32:
                flagPadSign = true;
                break;
              default:
                break flagsLoop;
            }
            textIndex++;
            next = HEAP8[((textIndex+1)>>0)];
          }
  
          // Handle width.
          var width = 0;
          if (next == 42) {
            width = getNextArg('i32');
            textIndex++;
            next = HEAP8[((textIndex+1)>>0)];
          } else {
            while (next >= 48 && next <= 57) {
              width = width * 10 + (next - 48);
              textIndex++;
              next = HEAP8[((textIndex+1)>>0)];
            }
          }
  
          // Handle precision.
          var precisionSet = false, precision = -1;
          if (next == 46) {
            precision = 0;
            precisionSet = true;
            textIndex++;
            next = HEAP8[((textIndex+1)>>0)];
            if (next == 42) {
              precision = getNextArg('i32');
              textIndex++;
            } else {
              while(1) {
                var precisionChr = HEAP8[((textIndex+1)>>0)];
                if (precisionChr < 48 ||
                    precisionChr > 57) break;
                precision = precision * 10 + (precisionChr - 48);
                textIndex++;
              }
            }
            next = HEAP8[((textIndex+1)>>0)];
          }
          if (precision < 0) {
            precision = 6; // Standard default.
            precisionSet = false;
          }
  
          // Handle integer sizes. WARNING: These assume a 32-bit architecture!
          var argSize;
          switch (String.fromCharCode(next)) {
            case 'h':
              var nextNext = HEAP8[((textIndex+2)>>0)];
              if (nextNext == 104) {
                textIndex++;
                argSize = 1; // char (actually i32 in varargs)
              } else {
                argSize = 2; // short (actually i32 in varargs)
              }
              break;
            case 'l':
              var nextNext = HEAP8[((textIndex+2)>>0)];
              if (nextNext == 108) {
                textIndex++;
                argSize = 8; // long long
              } else {
                argSize = 4; // long
              }
              break;
            case 'L': // long long
            case 'q': // int64_t
            case 'j': // intmax_t
              argSize = 8;
              break;
            case 'z': // size_t
            case 't': // ptrdiff_t
            case 'I': // signed ptrdiff_t or unsigned size_t
              argSize = 4;
              break;
            default:
              argSize = null;
          }
          if (argSize) textIndex++;
          next = HEAP8[((textIndex+1)>>0)];
  
          // Handle type specifier.
          switch (String.fromCharCode(next)) {
            case 'd': case 'i': case 'u': case 'o': case 'x': case 'X': case 'p': {
              // Integer.
              var signed = next == 100 || next == 105;
              argSize = argSize || 4;
              var currArg = getNextArg('i' + (argSize * 8));
              var origArg = currArg;
              var argText;
              // Flatten i64-1 [low, high] into a (slightly rounded) double
              if (argSize == 8) {
                currArg = Runtime.makeBigInt(currArg[0], currArg[1], next == 117);
              }
              // Truncate to requested size.
              if (argSize <= 4) {
                var limit = Math.pow(256, argSize) - 1;
                currArg = (signed ? reSign : unSign)(currArg & limit, argSize * 8);
              }
              // Format the number.
              var currAbsArg = Math.abs(currArg);
              var prefix = '';
              if (next == 100 || next == 105) {
                if (argSize == 8 && i64Math) argText = i64Math.stringify(origArg[0], origArg[1], null); else
                argText = reSign(currArg, 8 * argSize, 1).toString(10);
              } else if (next == 117) {
                if (argSize == 8 && i64Math) argText = i64Math.stringify(origArg[0], origArg[1], true); else
                argText = unSign(currArg, 8 * argSize, 1).toString(10);
                currArg = Math.abs(currArg);
              } else if (next == 111) {
                argText = (flagAlternative ? '0' : '') + currAbsArg.toString(8);
              } else if (next == 120 || next == 88) {
                prefix = (flagAlternative && currArg != 0) ? '0x' : '';
                if (argSize == 8 && i64Math) {
                  if (origArg[1]) {
                    argText = (origArg[1]>>>0).toString(16);
                    var lower = (origArg[0]>>>0).toString(16);
                    while (lower.length < 8) lower = '0' + lower;
                    argText += lower;
                  } else {
                    argText = (origArg[0]>>>0).toString(16);
                  }
                } else
                if (currArg < 0) {
                  // Represent negative numbers in hex as 2's complement.
                  currArg = -currArg;
                  argText = (currAbsArg - 1).toString(16);
                  var buffer = [];
                  for (var i = 0; i < argText.length; i++) {
                    buffer.push((0xF - parseInt(argText[i], 16)).toString(16));
                  }
                  argText = buffer.join('');
                  while (argText.length < argSize * 2) argText = 'f' + argText;
                } else {
                  argText = currAbsArg.toString(16);
                }
                if (next == 88) {
                  prefix = prefix.toUpperCase();
                  argText = argText.toUpperCase();
                }
              } else if (next == 112) {
                if (currAbsArg === 0) {
                  argText = '(nil)';
                } else {
                  prefix = '0x';
                  argText = currAbsArg.toString(16);
                }
              }
              if (precisionSet) {
                while (argText.length < precision) {
                  argText = '0' + argText;
                }
              }
  
              // Add sign if needed
              if (currArg >= 0) {
                if (flagAlwaysSigned) {
                  prefix = '+' + prefix;
                } else if (flagPadSign) {
                  prefix = ' ' + prefix;
                }
              }
  
              // Move sign to prefix so we zero-pad after the sign
              if (argText.charAt(0) == '-') {
                prefix = '-' + prefix;
                argText = argText.substr(1);
              }
  
              // Add padding.
              while (prefix.length + argText.length < width) {
                if (flagLeftAlign) {
                  argText += ' ';
                } else {
                  if (flagZeroPad) {
                    argText = '0' + argText;
                  } else {
                    prefix = ' ' + prefix;
                  }
                }
              }
  
              // Insert the result into the buffer.
              argText = prefix + argText;
              argText.split('').forEach(function(chr) {
                ret.push(chr.charCodeAt(0));
              });
              break;
            }
            case 'f': case 'F': case 'e': case 'E': case 'g': case 'G': {
              // Float.
              var currArg = getNextArg('double');
              var argText;
              if (isNaN(currArg)) {
                argText = 'nan';
                flagZeroPad = false;
              } else if (!isFinite(currArg)) {
                argText = (currArg < 0 ? '-' : '') + 'inf';
                flagZeroPad = false;
              } else {
                var isGeneral = false;
                var effectivePrecision = Math.min(precision, 20);
  
                // Convert g/G to f/F or e/E, as per:
                // http://pubs.opengroup.org/onlinepubs/9699919799/functions/printf.html
                if (next == 103 || next == 71) {
                  isGeneral = true;
                  precision = precision || 1;
                  var exponent = parseInt(currArg.toExponential(effectivePrecision).split('e')[1], 10);
                  if (precision > exponent && exponent >= -4) {
                    next = ((next == 103) ? 'f' : 'F').charCodeAt(0);
                    precision -= exponent + 1;
                  } else {
                    next = ((next == 103) ? 'e' : 'E').charCodeAt(0);
                    precision--;
                  }
                  effectivePrecision = Math.min(precision, 20);
                }
  
                if (next == 101 || next == 69) {
                  argText = currArg.toExponential(effectivePrecision);
                  // Make sure the exponent has at least 2 digits.
                  if (/[eE][-+]\d$/.test(argText)) {
                    argText = argText.slice(0, -1) + '0' + argText.slice(-1);
                  }
                } else if (next == 102 || next == 70) {
                  argText = currArg.toFixed(effectivePrecision);
                  if (currArg === 0 && __reallyNegative(currArg)) {
                    argText = '-' + argText;
                  }
                }
  
                var parts = argText.split('e');
                if (isGeneral && !flagAlternative) {
                  // Discard trailing zeros and periods.
                  while (parts[0].length > 1 && parts[0].indexOf('.') != -1 &&
                         (parts[0].slice(-1) == '0' || parts[0].slice(-1) == '.')) {
                    parts[0] = parts[0].slice(0, -1);
                  }
                } else {
                  // Make sure we have a period in alternative mode.
                  if (flagAlternative && argText.indexOf('.') == -1) parts[0] += '.';
                  // Zero pad until required precision.
                  while (precision > effectivePrecision++) parts[0] += '0';
                }
                argText = parts[0] + (parts.length > 1 ? 'e' + parts[1] : '');
  
                // Capitalize 'E' if needed.
                if (next == 69) argText = argText.toUpperCase();
  
                // Add sign.
                if (currArg >= 0) {
                  if (flagAlwaysSigned) {
                    argText = '+' + argText;
                  } else if (flagPadSign) {
                    argText = ' ' + argText;
                  }
                }
              }
  
              // Add padding.
              while (argText.length < width) {
                if (flagLeftAlign) {
                  argText += ' ';
                } else {
                  if (flagZeroPad && (argText[0] == '-' || argText[0] == '+')) {
                    argText = argText[0] + '0' + argText.slice(1);
                  } else {
                    argText = (flagZeroPad ? '0' : ' ') + argText;
                  }
                }
              }
  
              // Adjust case.
              if (next < 97) argText = argText.toUpperCase();
  
              // Insert the result into the buffer.
              argText.split('').forEach(function(chr) {
                ret.push(chr.charCodeAt(0));
              });
              break;
            }
            case 's': {
              // String.
              var arg = getNextArg('i8*');
              var argLength = arg ? _strlen(arg) : '(null)'.length;
              if (precisionSet) argLength = Math.min(argLength, precision);
              if (!flagLeftAlign) {
                while (argLength < width--) {
                  ret.push(32);
                }
              }
              if (arg) {
                for (var i = 0; i < argLength; i++) {
                  ret.push(HEAPU8[((arg++)>>0)]);
                }
              } else {
                ret = ret.concat(intArrayFromString('(null)'.substr(0, argLength), true));
              }
              if (flagLeftAlign) {
                while (argLength < width--) {
                  ret.push(32);
                }
              }
              break;
            }
            case 'c': {
              // Character.
              if (flagLeftAlign) ret.push(getNextArg('i8'));
              while (--width > 0) {
                ret.push(32);
              }
              if (!flagLeftAlign) ret.push(getNextArg('i8'));
              break;
            }
            case 'n': {
              // Write the length written so far to the next parameter.
              var ptr = getNextArg('i32*');
              HEAP32[((ptr)>>2)]=ret.length;
              break;
            }
            case '%': {
              // Literal percent sign.
              ret.push(curr);
              break;
            }
            default: {
              // Unknown specifiers remain untouched.
              for (var i = startTextIndex; i < textIndex + 2; i++) {
                ret.push(HEAP8[((i)>>0)]);
              }
            }
          }
          textIndex += 2;
          // TODO: Support a/A (hex float) and m (last error) specifiers.
          // TODO: Support %1${specifier} for arg selection.
        } else {
          ret.push(curr);
          textIndex += 1;
        }
      }
      return ret;
    }function _fprintf(stream, format, varargs) {
      // int fprintf(FILE *restrict stream, const char *restrict format, ...);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/printf.html
      var result = __formatString(format, varargs);
      var stack = Runtime.stackSave();
      var ret = _fwrite(allocate(result, 'i8', ALLOC_STACK), 1, result.length, stream);
      Runtime.stackRestore(stack);
      return ret;
    }function _vfprintf(s, f, va_arg) {
      return _fprintf(s, f, HEAP32[((va_arg)>>2)]);
    }

  function ___ctype_tolower_loc() {
      // http://refspecs.freestandards.org/LSB_3.1.1/LSB-Core-generic/LSB-Core-generic/libutil---ctype-tolower-loc.html
      var me = ___ctype_tolower_loc;
      if (!me.ret) {
        var values = [
          128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,
          158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,
          188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,
          218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,
          248,249,250,251,252,253,254,-1,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,
          33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,97,98,99,100,101,102,103,
          104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,91,92,93,94,95,96,97,98,99,100,101,102,103,
          104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,
          134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,
          164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,
          194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,
          224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,
          254,255
        ];
        var i32size = 4;
        var arr = _malloc(values.length * i32size);
        for (var i = 0; i < values.length; i++) {
          HEAP32[(((arr)+(i * i32size))>>2)]=values[i];
        }
        me.ret = allocate([arr + 128 * i32size], 'i32*', ALLOC_NORMAL);
      }
      return me.ret;
    }

  function ___cxa_begin_catch(ptr) {
      __ZSt18uncaught_exceptionv.uncaught_exception--;
      EXCEPTIONS.caught.push(ptr);
      EXCEPTIONS.addRef(EXCEPTIONS.deAdjust(ptr));
      return ptr;
    }

  
  var PTHREAD_SPECIFIC_NEXT_KEY=1;function _pthread_key_create(key, destructor) {
      if (key == 0) {
        return ERRNO_CODES.EINVAL;
      }
      HEAP32[((key)>>2)]=PTHREAD_SPECIFIC_NEXT_KEY;
      // values start at 0
      PTHREAD_SPECIFIC[PTHREAD_SPECIFIC_NEXT_KEY] = 0;
      PTHREAD_SPECIFIC_NEXT_KEY++;
      return 0;
    }

  
  function _emscripten_memcpy_big(dest, src, num) {
      HEAPU8.set(HEAPU8.subarray(src, src+num), dest);
      return dest;
    } 
  Module["_memcpy"] = _memcpy;

  function _pthread_mutex_lock() {}

  var _fabs=Math_abs;

  function _sbrk(bytes) {
      // Implement a Linux-like 'memory area' for our 'process'.
      // Changes the size of the memory area by |bytes|; returns the
      // address of the previous top ('break') of the memory area
      // We control the "dynamic" memory - DYNAMIC_BASE to DYNAMICTOP
      var self = _sbrk;
      if (!self.called) {
        DYNAMICTOP = alignMemoryPage(DYNAMICTOP); // make sure we start out aligned
        self.called = true;
        assert(Runtime.dynamicAlloc);
        self.alloc = Runtime.dynamicAlloc;
        Runtime.dynamicAlloc = function() { abort('cannot dynamically allocate, sbrk now has control') };
      }
      var ret = DYNAMICTOP;
      if (bytes != 0) self.alloc(bytes);
      return ret;  // Previous break location.
    }

   
  Module["_bitshift64Shl"] = _bitshift64Shl;

  function ___cxa_guard_abort() {}

  
  function _calloc(n, s) {
      var ret = _malloc(n*s);
      _memset(ret, 0, n*s);
      return ret;
    }
  Module["_calloc"] = _calloc;function _newlocale(mask, locale, base) {
      if (!LOCALE.check(locale)) {
        ___setErrNo(ERRNO_CODES.ENOENT);
        return 0;
      }
      if (!base) base = _calloc(1, 4);
      return base;
    }

   
  Module["_memmove"] = _memmove;

  var _emscripten_preinvoke=true;

  
  function _strerror_r(errnum, strerrbuf, buflen) {
      if (errnum in ERRNO_MESSAGES) {
        if (ERRNO_MESSAGES[errnum].length > buflen - 1) {
          return ___setErrNo(ERRNO_CODES.ERANGE);
        } else {
          var msg = ERRNO_MESSAGES[errnum];
          writeAsciiToMemory(msg, strerrbuf);
          return 0;
        }
      } else {
        return ___setErrNo(ERRNO_CODES.EINVAL);
      }
    }function _strerror(errnum) {
      if (!_strerror.buffer) _strerror.buffer = _malloc(256);
      _strerror_r(errnum, _strerror.buffer, 256);
      return _strerror.buffer;
    }

  function _catopen(name, oflag) {
      // nl_catd catopen (const char *name, int oflag)
      return -1;
    }

  function _catclose(catd) {
      // int catclose (nl_catd catd)
      return 0;
    }

  function ___cxa_rethrow() {
      ___cxa_end_catch.rethrown = true;
      var ptr = EXCEPTIONS.caught.pop();
      EXCEPTIONS.last = ptr;
      throw ptr;
    }

  function _pthread_mutex_unlock() {}

  
  function _copysign(a, b) {
      return __reallyNegative(a) === __reallyNegative(b) ? a : -a;
    }function _copysignl() {
  return _copysign.apply(null, arguments)
  }

  function _ungetc(c, stream) {
      // int ungetc(int c, FILE *stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/ungetc.html
      stream = FS.getStreamFromPtr(stream);
      if (!stream) {
        return -1;
      }
      if (c === -1) {
        // do nothing for EOF character
        return c;
      }
      c = unSign(c & 0xFF);
      stream.ungotten.push(c);
      stream.eof = false;
      return c;
    }

  function _uselocale(locale) {
      var old = LOCALE.curr;
      if (locale) LOCALE.curr = locale;
      return old;
    }

  var ___dso_handle=allocate(1, "i32*", ALLOC_STATIC);



___errno_state = Runtime.staticAlloc(4); HEAP32[((___errno_state)>>2)]=0;
FS.staticInit();__ATINIT__.unshift({ func: function() { if (!Module["noFSInit"] && !FS.init.initialized) FS.init() } });__ATMAIN__.push({ func: function() { FS.ignorePermissions = false } });__ATEXIT__.push({ func: function() { FS.quit() } });Module["FS_createFolder"] = FS.createFolder;Module["FS_createPath"] = FS.createPath;Module["FS_createDataFile"] = FS.createDataFile;Module["FS_createPreloadedFile"] = FS.createPreloadedFile;Module["FS_createLazyFile"] = FS.createLazyFile;Module["FS_createLink"] = FS.createLink;Module["FS_createDevice"] = FS.createDevice;
__ATINIT__.unshift({ func: function() { TTY.init() } });__ATEXIT__.push({ func: function() { TTY.shutdown() } });TTY.utf8 = new Runtime.UTF8Processor();
if (ENVIRONMENT_IS_NODE) { var fs = require("fs"); NODEFS.staticInit(); }
_fputc.ret = allocate([0], "i8", ALLOC_STATIC);
__ATINIT__.push({ func: function() { SOCKFS.root = FS.mount(SOCKFS, {}, null); } });
_fgetc.ret = allocate([0], "i8", ALLOC_STATIC);
Module["requestFullScreen"] = function Module_requestFullScreen(lockPointer, resizeCanvas) { Browser.requestFullScreen(lockPointer, resizeCanvas) };
  Module["requestAnimationFrame"] = function Module_requestAnimationFrame(func) { Browser.requestAnimationFrame(func) };
  Module["setCanvasSize"] = function Module_setCanvasSize(width, height, noUpdates) { Browser.setCanvasSize(width, height, noUpdates) };
  Module["pauseMainLoop"] = function Module_pauseMainLoop() { Browser.mainLoop.pause() };
  Module["resumeMainLoop"] = function Module_resumeMainLoop() { Browser.mainLoop.resume() };
  Module["getUserMedia"] = function Module_getUserMedia() { Browser.getUserMedia() }
STACK_BASE = STACKTOP = Runtime.alignMemory(STATICTOP);

staticSealed = true; // seal the static portion of memory

STACK_MAX = STACK_BASE + TOTAL_STACK;

DYNAMIC_BASE = DYNAMICTOP = Runtime.alignMemory(STACK_MAX);

assert(DYNAMIC_BASE < TOTAL_MEMORY, "TOTAL_MEMORY not big enough for stack");

 var ctlz_i8 = allocate([8,7,6,6,5,5,5,5,4,4,4,4,4,4,4,4,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "i8", ALLOC_DYNAMIC);
 var cttz_i8 = allocate([8,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,6,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,7,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,6,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0], "i8", ALLOC_DYNAMIC);

  var Math_min = Math.min;
function nullFunc_iiiiiiii(x) { Module["printErr"]("Invalid function pointer called with signature 'iiiiiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info."); abort(x) }

function nullFunc_viiiii(x) { Module["printErr"]("Invalid function pointer called with signature 'viiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info."); abort(x) }

function nullFunc_vi(x) { Module["printErr"]("Invalid function pointer called with signature 'vi'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info."); abort(x) }

function nullFunc_vii(x) { Module["printErr"]("Invalid function pointer called with signature 'vii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info."); abort(x) }

function nullFunc_ii(x) { Module["printErr"]("Invalid function pointer called with signature 'ii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info."); abort(x) }

function nullFunc_iiiiiiiiiiii(x) { Module["printErr"]("Invalid function pointer called with signature 'iiiiiiiiiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info."); abort(x) }

function nullFunc_iiii(x) { Module["printErr"]("Invalid function pointer called with signature 'iiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info."); abort(x) }

function nullFunc_viiiiiiiiiiiiiii(x) { Module["printErr"]("Invalid function pointer called with signature 'viiiiiiiiiiiiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info."); abort(x) }

function nullFunc_viiiiid(x) { Module["printErr"]("Invalid function pointer called with signature 'viiiiid'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info."); abort(x) }

function nullFunc_viiiiiiii(x) { Module["printErr"]("Invalid function pointer called with signature 'viiiiiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info."); abort(x) }

function nullFunc_viiiiii(x) { Module["printErr"]("Invalid function pointer called with signature 'viiiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info."); abort(x) }

function nullFunc_viiiiiii(x) { Module["printErr"]("Invalid function pointer called with signature 'viiiiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info."); abort(x) }

function nullFunc_viiiiiid(x) { Module["printErr"]("Invalid function pointer called with signature 'viiiiiid'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info."); abort(x) }

function nullFunc_viiiiiiiii(x) { Module["printErr"]("Invalid function pointer called with signature 'viiiiiiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info."); abort(x) }

function nullFunc_viiiiiiiiii(x) { Module["printErr"]("Invalid function pointer called with signature 'viiiiiiiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info."); abort(x) }

function nullFunc_iii(x) { Module["printErr"]("Invalid function pointer called with signature 'iii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info."); abort(x) }

function nullFunc_iiiiii(x) { Module["printErr"]("Invalid function pointer called with signature 'iiiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info."); abort(x) }

function nullFunc_diii(x) { Module["printErr"]("Invalid function pointer called with signature 'diii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info."); abort(x) }

function nullFunc_i(x) { Module["printErr"]("Invalid function pointer called with signature 'i'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info."); abort(x) }

function nullFunc_iiiii(x) { Module["printErr"]("Invalid function pointer called with signature 'iiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info."); abort(x) }

function nullFunc_viii(x) { Module["printErr"]("Invalid function pointer called with signature 'viii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info."); abort(x) }

function nullFunc_v(x) { Module["printErr"]("Invalid function pointer called with signature 'v'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info."); abort(x) }

function nullFunc_iiiiiiiii(x) { Module["printErr"]("Invalid function pointer called with signature 'iiiiiiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info."); abort(x) }

function nullFunc_viiii(x) { Module["printErr"]("Invalid function pointer called with signature 'viiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info."); abort(x) }

function invoke_iiiiiiii(index,a1,a2,a3,a4,a5,a6,a7) {
  try {
    return Module["dynCall_iiiiiiii"](index,a1,a2,a3,a4,a5,a6,a7);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_viiiii(index,a1,a2,a3,a4,a5) {
  try {
    Module["dynCall_viiiii"](index,a1,a2,a3,a4,a5);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_vi(index,a1) {
  try {
    Module["dynCall_vi"](index,a1);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_vii(index,a1,a2) {
  try {
    Module["dynCall_vii"](index,a1,a2);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_ii(index,a1) {
  try {
    return Module["dynCall_ii"](index,a1);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_iiiiiiiiiiii(index,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11) {
  try {
    return Module["dynCall_iiiiiiiiiiii"](index,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_iiii(index,a1,a2,a3) {
  try {
    return Module["dynCall_iiii"](index,a1,a2,a3);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_viiiiiiiiiiiiiii(index,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11,a12,a13,a14,a15) {
  try {
    Module["dynCall_viiiiiiiiiiiiiii"](index,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11,a12,a13,a14,a15);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_viiiiid(index,a1,a2,a3,a4,a5,a6) {
  try {
    Module["dynCall_viiiiid"](index,a1,a2,a3,a4,a5,a6);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_viiiiiiii(index,a1,a2,a3,a4,a5,a6,a7,a8) {
  try {
    Module["dynCall_viiiiiiii"](index,a1,a2,a3,a4,a5,a6,a7,a8);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_viiiiii(index,a1,a2,a3,a4,a5,a6) {
  try {
    Module["dynCall_viiiiii"](index,a1,a2,a3,a4,a5,a6);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_viiiiiii(index,a1,a2,a3,a4,a5,a6,a7) {
  try {
    Module["dynCall_viiiiiii"](index,a1,a2,a3,a4,a5,a6,a7);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_viiiiiid(index,a1,a2,a3,a4,a5,a6,a7) {
  try {
    Module["dynCall_viiiiiid"](index,a1,a2,a3,a4,a5,a6,a7);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_viiiiiiiii(index,a1,a2,a3,a4,a5,a6,a7,a8,a9) {
  try {
    Module["dynCall_viiiiiiiii"](index,a1,a2,a3,a4,a5,a6,a7,a8,a9);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_viiiiiiiiii(index,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10) {
  try {
    Module["dynCall_viiiiiiiiii"](index,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_iii(index,a1,a2) {
  try {
    return Module["dynCall_iii"](index,a1,a2);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_iiiiii(index,a1,a2,a3,a4,a5) {
  try {
    return Module["dynCall_iiiiii"](index,a1,a2,a3,a4,a5);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_diii(index,a1,a2,a3) {
  try {
    return Module["dynCall_diii"](index,a1,a2,a3);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_i(index) {
  try {
    return Module["dynCall_i"](index);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_iiiii(index,a1,a2,a3,a4) {
  try {
    return Module["dynCall_iiiii"](index,a1,a2,a3,a4);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_viii(index,a1,a2,a3) {
  try {
    Module["dynCall_viii"](index,a1,a2,a3);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_v(index) {
  try {
    Module["dynCall_v"](index);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_iiiiiiiii(index,a1,a2,a3,a4,a5,a6,a7,a8) {
  try {
    return Module["dynCall_iiiiiiiii"](index,a1,a2,a3,a4,a5,a6,a7,a8);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_viiii(index,a1,a2,a3,a4) {
  try {
    Module["dynCall_viiii"](index,a1,a2,a3,a4);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

  // EMSCRIPTEN_START_ASM
  var asm = (function(global, env, buffer) {
    'almost asm';
    
    var HEAP8 = new global.Int8Array(buffer);
    var HEAP16 = new global.Int16Array(buffer);
    var HEAP32 = new global.Int32Array(buffer);
    var HEAPU8 = new global.Uint8Array(buffer);
    var HEAPU16 = new global.Uint16Array(buffer);
    var HEAPU32 = new global.Uint32Array(buffer);
    var HEAPF32 = new global.Float32Array(buffer);
    var HEAPF64 = new global.Float64Array(buffer);

  
  var STACKTOP=env.STACKTOP|0;
  var STACK_MAX=env.STACK_MAX|0;
  var tempDoublePtr=env.tempDoublePtr|0;
  var ABORT=env.ABORT|0;
  var cttz_i8=env.cttz_i8|0;
  var ctlz_i8=env.ctlz_i8|0;
  var ___dso_handle=env.___dso_handle|0;
  var _stderr=env._stderr|0;
  var _stdin=env._stdin|0;
  var _stdout=env._stdout|0;

    var __THREW__ = 0;
    var threwValue = 0;
    var setjmpId = 0;
    var undef = 0;
    var nan = +env.NaN, inf = +env.Infinity;
    var tempInt = 0, tempBigInt = 0, tempBigIntP = 0, tempBigIntS = 0, tempBigIntR = 0.0, tempBigIntI = 0, tempBigIntD = 0, tempValue = 0, tempDouble = 0.0;
  
    var tempRet0 = 0;
    var tempRet1 = 0;
    var tempRet2 = 0;
    var tempRet3 = 0;
    var tempRet4 = 0;
    var tempRet5 = 0;
    var tempRet6 = 0;
    var tempRet7 = 0;
    var tempRet8 = 0;
    var tempRet9 = 0;
  var Math_floor=global.Math.floor;
  var Math_abs=global.Math.abs;
  var Math_sqrt=global.Math.sqrt;
  var Math_pow=global.Math.pow;
  var Math_cos=global.Math.cos;
  var Math_sin=global.Math.sin;
  var Math_tan=global.Math.tan;
  var Math_acos=global.Math.acos;
  var Math_asin=global.Math.asin;
  var Math_atan=global.Math.atan;
  var Math_atan2=global.Math.atan2;
  var Math_exp=global.Math.exp;
  var Math_log=global.Math.log;
  var Math_ceil=global.Math.ceil;
  var Math_imul=global.Math.imul;
  var abort=env.abort;
  var assert=env.assert;
  var Math_min=env.min;
  var nullFunc_iiiiiiii=env.nullFunc_iiiiiiii;
  var nullFunc_viiiii=env.nullFunc_viiiii;
  var nullFunc_vi=env.nullFunc_vi;
  var nullFunc_vii=env.nullFunc_vii;
  var nullFunc_ii=env.nullFunc_ii;
  var nullFunc_iiiiiiiiiiii=env.nullFunc_iiiiiiiiiiii;
  var nullFunc_iiii=env.nullFunc_iiii;
  var nullFunc_viiiiiiiiiiiiiii=env.nullFunc_viiiiiiiiiiiiiii;
  var nullFunc_viiiiid=env.nullFunc_viiiiid;
  var nullFunc_viiiiiiii=env.nullFunc_viiiiiiii;
  var nullFunc_viiiiii=env.nullFunc_viiiiii;
  var nullFunc_viiiiiii=env.nullFunc_viiiiiii;
  var nullFunc_viiiiiid=env.nullFunc_viiiiiid;
  var nullFunc_viiiiiiiii=env.nullFunc_viiiiiiiii;
  var nullFunc_viiiiiiiiii=env.nullFunc_viiiiiiiiii;
  var nullFunc_iii=env.nullFunc_iii;
  var nullFunc_iiiiii=env.nullFunc_iiiiii;
  var nullFunc_diii=env.nullFunc_diii;
  var nullFunc_i=env.nullFunc_i;
  var nullFunc_iiiii=env.nullFunc_iiiii;
  var nullFunc_viii=env.nullFunc_viii;
  var nullFunc_v=env.nullFunc_v;
  var nullFunc_iiiiiiiii=env.nullFunc_iiiiiiiii;
  var nullFunc_viiii=env.nullFunc_viiii;
  var invoke_iiiiiiii=env.invoke_iiiiiiii;
  var invoke_viiiii=env.invoke_viiiii;
  var invoke_vi=env.invoke_vi;
  var invoke_vii=env.invoke_vii;
  var invoke_ii=env.invoke_ii;
  var invoke_iiiiiiiiiiii=env.invoke_iiiiiiiiiiii;
  var invoke_iiii=env.invoke_iiii;
  var invoke_viiiiiiiiiiiiiii=env.invoke_viiiiiiiiiiiiiii;
  var invoke_viiiiid=env.invoke_viiiiid;
  var invoke_viiiiiiii=env.invoke_viiiiiiii;
  var invoke_viiiiii=env.invoke_viiiiii;
  var invoke_viiiiiii=env.invoke_viiiiiii;
  var invoke_viiiiiid=env.invoke_viiiiiid;
  var invoke_viiiiiiiii=env.invoke_viiiiiiiii;
  var invoke_viiiiiiiiii=env.invoke_viiiiiiiiii;
  var invoke_iii=env.invoke_iii;
  var invoke_iiiiii=env.invoke_iiiiii;
  var invoke_diii=env.invoke_diii;
  var invoke_i=env.invoke_i;
  var invoke_iiiii=env.invoke_iiiii;
  var invoke_viii=env.invoke_viii;
  var invoke_v=env.invoke_v;
  var invoke_iiiiiiiii=env.invoke_iiiiiiiii;
  var invoke_viiii=env.invoke_viiii;
  var _fabs=env._fabs;
  var _strftime=env._strftime;
  var _pthread_cond_wait=env._pthread_cond_wait;
  var ___cxa_rethrow=env.___cxa_rethrow;
  var _send=env._send;
  var _vfprintf=env._vfprintf;
  var _fread=env._fread;
  var ___ctype_b_loc=env.___ctype_b_loc;
  var _fmod=env._fmod;
  var ___cxa_guard_acquire=env.___cxa_guard_acquire;
  var __reallyNegative=env.__reallyNegative;
  var ___gxx_personality_v0=env.___gxx_personality_v0;
  var _ungetc=env._ungetc;
  var ___cxa_free_exception=env.___cxa_free_exception;
  var ___cxa_allocate_exception=env.___cxa_allocate_exception;
  var ___cxa_find_matching_catch=env.___cxa_find_matching_catch;
  var ___ctype_toupper_loc=env.___ctype_toupper_loc;
  var _fflush=env._fflush;
  var ___cxa_guard_release=env.___cxa_guard_release;
  var __addDays=env.__addDays;
  var _pwrite=env._pwrite;
  var _strerror_r=env._strerror_r;
  var _strftime_l=env._strftime_l;
  var _fprintf=env._fprintf;
  var ___setErrNo=env.___setErrNo;
  var _sbrk=env._sbrk;
  var _uselocale=env._uselocale;
  var _catgets=env._catgets;
  var _newlocale=env._newlocale;
  var ___cxa_begin_catch=env.___cxa_begin_catch;
  var _emscripten_memcpy_big=env._emscripten_memcpy_big;
  var ___cxa_end_catch=env.___cxa_end_catch;
  var ___resumeException=env.___resumeException;
  var __ZSt18uncaught_exceptionv=env.__ZSt18uncaught_exceptionv;
  var _sysconf=env._sysconf;
  var _pthread_getspecific=env._pthread_getspecific;
  var __arraySum=env.__arraySum;
  var _calloc=env._calloc;
  var ___ctype_tolower_loc=env.___ctype_tolower_loc;
  var _fileno=env._fileno;
  var _pthread_mutex_unlock=env._pthread_mutex_unlock;
  var _pthread_once=env._pthread_once;
  var _pread=env._pread;
  var _mkport=env._mkport;
  var _pthread_key_create=env._pthread_key_create;
  var _getc=env._getc;
  var _write=env._write;
  var __isLeapYear=env.__isLeapYear;
  var ___errno_location=env.___errno_location;
  var _recv=env._recv;
  var _pthread_setspecific=env._pthread_setspecific;
  var _fgetc=env._fgetc;
  var _copysign=env._copysign;
  var _fputc=env._fputc;
  var ___cxa_throw=env.___cxa_throw;
  var _freelocale=env._freelocale;
  var _pthread_cond_broadcast=env._pthread_cond_broadcast;
  var _copysignl=env._copysignl;
  var _abort=env._abort;
  var _catclose=env._catclose;
  var _fwrite=env._fwrite;
  var _time=env._time;
  var _pthread_mutex_lock=env._pthread_mutex_lock;
  var _strerror=env._strerror;
  var ___cxa_atexit=env.___cxa_atexit;
  var __formatString=env.__formatString;
  var _atexit=env._atexit;
  var _catopen=env._catopen;
  var _read=env._read;
  var ___cxa_guard_abort=env.___cxa_guard_abort;
  var _fmodl=env._fmodl;
  var tempFloat = 0.0;

  // EMSCRIPTEN_START_FUNCS
  function stackAlloc(size) {
    size = size|0;
    var ret = 0;
    ret = STACKTOP;
    STACKTOP = (STACKTOP + size)|0;
  STACKTOP = (STACKTOP + 15)&-16;
if ((STACKTOP|0) >= (STACK_MAX|0)) abort();

    return ret|0;
  }
  function stackSave() {
    return STACKTOP|0;
  }
  function stackRestore(top) {
    top = top|0;
    STACKTOP = top;
  }

  function setThrew(threw, value) {
    threw = threw|0;
    value = value|0;
    if ((__THREW__|0) == 0) {
      __THREW__ = threw;
      threwValue = value;
    }
  }
  function copyTempFloat(ptr) {
    ptr = ptr|0;
    HEAP8[tempDoublePtr>>0] = HEAP8[ptr>>0];
    HEAP8[tempDoublePtr+1>>0] = HEAP8[ptr+1>>0];
    HEAP8[tempDoublePtr+2>>0] = HEAP8[ptr+2>>0];
    HEAP8[tempDoublePtr+3>>0] = HEAP8[ptr+3>>0];
  }
  function copyTempDouble(ptr) {
    ptr = ptr|0;
    HEAP8[tempDoublePtr>>0] = HEAP8[ptr>>0];
    HEAP8[tempDoublePtr+1>>0] = HEAP8[ptr+1>>0];
    HEAP8[tempDoublePtr+2>>0] = HEAP8[ptr+2>>0];
    HEAP8[tempDoublePtr+3>>0] = HEAP8[ptr+3>>0];
    HEAP8[tempDoublePtr+4>>0] = HEAP8[ptr+4>>0];
    HEAP8[tempDoublePtr+5>>0] = HEAP8[ptr+5>>0];
    HEAP8[tempDoublePtr+6>>0] = HEAP8[ptr+6>>0];
    HEAP8[tempDoublePtr+7>>0] = HEAP8[ptr+7>>0];
  }
  function setTempRet0(value) {
    value = value|0;
    tempRet0 = value;
  }
  function getTempRet0() {
    return tempRet0|0;
  }
  
function _main() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $__s$addr$i = 0, $__s$addr$i$i = 0, $__s$addr$i$i$i = 0, $__s$addr$i$i$i7 = 0, $__s$addr$i$i13 = 0, $__s$addr$i15 = 0, $agg$tmp = 0, $agg$tmp3 = 0, $call = 0, $call$i$i$i = 0, $call$i$i$i24 = 0, $ehselector$slot = 0, $exn = 0, $exn$slot = 0, $greeter = 0, $isnull = 0, $retval = 0;
 var $sel = 0, $this$addr$i = 0, $this$addr$i$i = 0, $this$addr$i$i$i = 0, $this$addr$i$i$i$i = 0, $this$addr$i$i$i$i$i = 0, $this$addr$i$i$i$i$i$i = 0, $this$addr$i$i$i$i$i$i8 = 0, $this$addr$i$i$i$i$i9 = 0, $this$addr$i$i$i$i10 = 0, $this$addr$i$i$i11 = 0, $this$addr$i$i12 = 0, $this$addr$i14 = 0, $this1$i = 0, $this1$i$i = 0, $this1$i$i$i = 0, $this1$i$i$i$i = 0, $this1$i$i$i$i$i = 0, $this1$i$i$i$i$i21 = 0, $this1$i$i$i$i20 = 0;
 var $this1$i$i$i19 = 0, $this1$i$i17 = 0, $this1$i16 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $agg$tmp = sp + 24|0;
 $agg$tmp3 = sp + 84|0;
 $retval = 0;
 $call = (__Znwj(12)|0);
 ;HEAP32[$call+0>>2]=0|0;HEAP32[$call+4>>2]=0|0;HEAP32[$call+8>>2]=0|0;
 __THREW__ = 0;
 invoke_vi(354,($call|0));
 $0 = __THREW__; __THREW__ = 0;
 $1 = $0&1;
 if ($1) {
  $17 = ___cxa_find_matching_catch()|0;
  $18 = tempRet0;
  $exn$slot = $17;
  $ehselector$slot = $18;
  __ZdlPv($call);
  $exn = $exn$slot;
  $sel = $ehselector$slot;
  ___resumeException($exn|0);
  // unreachable;
 }
 $greeter = $call;
 $2 = $greeter;
 $this$addr$i = $agg$tmp;
 $__s$addr$i = 8;
 $this1$i = $this$addr$i;
 $3 = $__s$addr$i;
 $this$addr$i$i = $this1$i;
 $__s$addr$i$i = $3;
 $this1$i$i = $this$addr$i$i;
 $this$addr$i$i$i = $this1$i$i;
 $this1$i$i$i = $this$addr$i$i$i;
 $this$addr$i$i$i$i = $this1$i$i$i;
 $this1$i$i$i$i = $this$addr$i$i$i$i;
 $this$addr$i$i$i$i$i = $this1$i$i$i$i;
 $this1$i$i$i$i$i = $this$addr$i$i$i$i$i;
 $this$addr$i$i$i$i$i$i = $this1$i$i$i$i$i;
 $4 = $__s$addr$i$i;
 $5 = $__s$addr$i$i;
 $__s$addr$i$i$i = $5;
 $6 = $__s$addr$i$i$i;
 $call$i$i$i = (_strlen(($6|0))|0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj($this1$i$i,$4,$call$i$i$i);
 __THREW__ = 0;
 invoke_vii(355,($2|0),($agg$tmp|0));
 $7 = __THREW__; __THREW__ = 0;
 $8 = $7&1;
 if ($8) {
  $19 = ___cxa_find_matching_catch()|0;
  $20 = tempRet0;
  $exn$slot = $19;
  $ehselector$slot = $20;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($agg$tmp);
  $exn = $exn$slot;
  $sel = $ehselector$slot;
  ___resumeException($exn|0);
  // unreachable;
 }
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($agg$tmp);
 $9 = $greeter;
 $this$addr$i14 = $agg$tmp3;
 $__s$addr$i15 = 16;
 $this1$i16 = $this$addr$i14;
 $10 = $__s$addr$i15;
 $this$addr$i$i12 = $this1$i16;
 $__s$addr$i$i13 = $10;
 $this1$i$i17 = $this$addr$i$i12;
 $this$addr$i$i$i11 = $this1$i$i17;
 $this1$i$i$i19 = $this$addr$i$i$i11;
 $this$addr$i$i$i$i10 = $this1$i$i$i19;
 $this1$i$i$i$i20 = $this$addr$i$i$i$i10;
 $this$addr$i$i$i$i$i9 = $this1$i$i$i$i20;
 $this1$i$i$i$i$i21 = $this$addr$i$i$i$i$i9;
 $this$addr$i$i$i$i$i$i8 = $this1$i$i$i$i$i21;
 $11 = $__s$addr$i$i13;
 $12 = $__s$addr$i$i13;
 $__s$addr$i$i$i7 = $12;
 $13 = $__s$addr$i$i$i7;
 $call$i$i$i24 = (_strlen(($13|0))|0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj($this1$i$i17,$11,$call$i$i$i24);
 __THREW__ = 0;
 invoke_vii(355,($9|0),($agg$tmp3|0));
 $14 = __THREW__; __THREW__ = 0;
 $15 = $14&1;
 if ($15) {
  $21 = ___cxa_find_matching_catch()|0;
  $22 = tempRet0;
  $exn$slot = $21;
  $ehselector$slot = $22;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($agg$tmp3);
  $exn = $exn$slot;
  $sel = $ehselector$slot;
  ___resumeException($exn|0);
  // unreachable;
 }
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($agg$tmp3);
 $16 = $greeter;
 $isnull = ($16|0)==(0|0);
 if ($isnull) {
  STACKTOP = sp;return 0;
 }
 __ZN7GreeterD1Ev($16);
 __ZdlPv($16);
 STACKTOP = sp;return 0;
}
function __ZN7GreeterC1Ev($this) {
 $this = $this|0;
 var $this$addr = 0, $this1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $this$addr = $this;
 $this1 = $this$addr;
 __ZN7GreeterC2Ev($this1);
 STACKTOP = sp;return;
}
function __ZN7GreeterD1Ev($this) {
 $this = $this|0;
 var $this$addr = 0, $this1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $this$addr = $this;
 $this1 = $this$addr;
 __ZN7GreeterD2Ev($this1);
 STACKTOP = sp;return;
}
function ___clang_call_terminate($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 (___cxa_begin_catch(($0|0))|0);
 __ZSt9terminatev();
 // unreachable;
}
function __ZN7GreeterD2Ev($this) {
 $this = $this|0;
 var $this$addr = 0, $this1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $this$addr = $this;
 $this1 = $this$addr;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($this1);
 STACKTOP = sp;return;
}
function __ZN7GreeterC2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $__s$addr$i = 0, $__s$addr$i$i = 0, $__s$addr$i$i$i = 0, $call$i$i$i = 0, $this$addr = 0, $this$addr$i = 0, $this$addr$i$i = 0, $this$addr$i$i$i = 0, $this$addr$i$i$i$i = 0, $this$addr$i$i$i$i$i = 0, $this$addr$i$i$i$i$i$i = 0, $this1 = 0, $this1$i = 0, $this1$i$i = 0, $this1$i$i$i = 0, $this1$i$i$i$i = 0;
 var $this1$i$i$i$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $this$addr = $this;
 $this1 = $this$addr;
 $this$addr$i = $this1;
 $__s$addr$i = 24;
 $this1$i = $this$addr$i;
 $0 = $__s$addr$i;
 $this$addr$i$i = $this1$i;
 $__s$addr$i$i = $0;
 $this1$i$i = $this$addr$i$i;
 $this$addr$i$i$i = $this1$i$i;
 $this1$i$i$i = $this$addr$i$i$i;
 $this$addr$i$i$i$i = $this1$i$i$i;
 $this1$i$i$i$i = $this$addr$i$i$i$i;
 $this$addr$i$i$i$i$i = $this1$i$i$i$i;
 $this1$i$i$i$i$i = $this$addr$i$i$i$i$i;
 $this$addr$i$i$i$i$i$i = $this1$i$i$i$i$i;
 $1 = $__s$addr$i$i;
 $2 = $__s$addr$i$i;
 $__s$addr$i$i$i = $2;
 $3 = $__s$addr$i$i$i;
 $call$i$i$i = (_strlen(($3|0))|0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj($this1$i$i,$1,$call$i$i$i);
 STACKTOP = sp;return;
}
function __ZN7Greeter5greetENSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE($this,$name) {
 $this = $this|0;
 $name = $name|0;
 var $0 = 0, $__pf$addr$i = 0, $call = 0, $call2 = 0, $this$addr = 0, $this$addr$i = 0, $this1 = 0, $this1$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $this$addr = $this;
 $this1 = $this$addr;
 $call = (__ZNSt3__1lsIcNS_11char_traitsIcEENS_9allocatorIcEEEERNS_13basic_ostreamIT_T0_EES9_RKNS_12basic_stringIS6_S7_T1_EE(120,$this1)|0);
 $call2 = (__ZNSt3__1lsIcNS_11char_traitsIcEENS_9allocatorIcEEEERNS_13basic_ostreamIT_T0_EES9_RKNS_12basic_stringIS6_S7_T1_EE($call,$name)|0);
 $this$addr$i = $call2;
 $__pf$addr$i = 356;
 $this1$i = $this$addr$i;
 $0 = $__pf$addr$i;
 (FUNCTION_TABLE_ii[$0 & 511]($this1$i)|0);
 STACKTOP = sp;return;
}
function __ZNSt3__1lsIcNS_11char_traitsIcEENS_9allocatorIcEEEERNS_13basic_ostreamIT_T0_EES9_RKNS_12basic_stringIS6_S7_T1_EE($__os,$__str) {
 $__os = $__os|0;
 $__str = $__str|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $9 = 0, $__c$addr$i$i = 0, $__c$addr$i$i$i = 0, $__c1$addr$i$i = 0, $__c2$addr$i$i = 0, $__data_$i$i$i = 0, $__data_$i$i$i106 = 0, $__data_$i$i$i157 = 0, $__data_$i$i$i202 = 0, $__data_$i21$i$i = 0, $__data_$i21$i$i149 = 0, $__data_$i21$i$i194 = 0, $__data_$i21$i$i98 = 0;
 var $__fill_$i = 0, $__fill_4$i = 0, $__fill_5$i = 0, $__fmtflags_$i = 0, $__l$addr$i$i$i = 0, $__len = 0, $__os$addr = 0, $__p$addr$i$i = 0, $__p$addr$i$i117 = 0, $__p$addr$i$i162 = 0, $__p$addr$i$i66 = 0, $__r$addr$i$i$i$i = 0, $__r$addr$i$i$i$i122 = 0, $__r$addr$i$i$i$i167 = 0, $__r$addr$i$i$i$i71 = 0, $__rdbuf_$i$i$i$i = 0, $__rdstate_$i$i = 0, $__s = 0, $__s$addr$i = 0, $__s$addr$i$i = 0;
 var $__size_$i23$i = 0, $__state$addr$i = 0, $__state$addr$i$i = 0, $__str$addr = 0, $__x$addr$i$i$i$i$i = 0, $__x$addr$i$i$i$i$i121 = 0, $__x$addr$i$i$i$i$i166 = 0, $__x$addr$i$i$i$i$i70 = 0, $add$ptr = 0, $add$ptr$i$i = 0, $add$ptr11 = 0, $add$ptr15 = 0, $add$ptr19 = 0, $add$ptr28 = 0, $add$ptr34 = 0, $add$ptr8 = 0, $agg$tmp = 0, $agg$tmp$byval_copy = 0, $and = 0, $and$i$i = 0;
 var $and$i$i$i = 0, $and$i$i$i141 = 0, $and$i$i$i186 = 0, $and$i$i$i90 = 0, $call$i5$i$i = 0, $call$i6$i$i = 0, $cmp = 0, $cmp$i = 0, $cmp$i$i = 0, $cond = 0, $cond$i = 0, $cond$i$i = 0, $cond$i$i109 = 0, $cond$i$i160 = 0, $cond$i$i205 = 0, $conv$i = 0, $conv$i$i = 0, $conv$i$i$i = 0, $conv$i$i$i140 = 0, $conv$i$i$i185 = 0;
 var $conv$i$i$i89 = 0, $conv$i14$i = 0, $conv6$i = 0, $eh$lpad$body$index2Z2D = 0, $eh$lpad$body$indexZ2D = 0, $ehselector$slot = 0, $ehselector$slot$i$i = 0, $exn = 0, $exn$i$i = 0, $exn$slot = 0, $exn$slot$i$i = 0, $exn38 = 0, $or$i$i = 0, $ref$tmp$i$i = 0, $sel = 0, $sel$i$i = 0, $shr$i$i = 0, $this$addr$i = 0, $this$addr$i$i = 0, $this$addr$i$i$i = 0;
 var $this$addr$i$i$i$i = 0, $this$addr$i$i$i$i$i = 0, $this$addr$i$i$i$i$i126 = 0, $this$addr$i$i$i$i$i171 = 0, $this$addr$i$i$i$i$i75 = 0, $this$addr$i$i$i$i127 = 0, $this$addr$i$i$i$i172 = 0, $this$addr$i$i$i$i42 = 0, $this$addr$i$i$i$i50 = 0, $this$addr$i$i$i$i76 = 0, $this$addr$i$i$i111 = 0, $this$addr$i$i$i128 = 0, $this$addr$i$i$i13$i$i = 0, $this$addr$i$i$i13$i$i118 = 0, $this$addr$i$i$i13$i$i163 = 0, $this$addr$i$i$i13$i$i67 = 0, $this$addr$i$i$i15$i = 0, $this$addr$i$i$i173 = 0, $this$addr$i$i$i4$i = 0, $this$addr$i$i$i4$i$i = 0;
 var $this$addr$i$i$i4$i$i123 = 0, $this$addr$i$i$i4$i$i168 = 0, $this$addr$i$i$i4$i$i72 = 0, $this$addr$i$i$i43 = 0, $this$addr$i$i$i51 = 0, $this$addr$i$i$i77 = 0, $this$addr$i$i112 = 0, $this$addr$i$i129 = 0, $this$addr$i$i14$i$i = 0, $this$addr$i$i14$i$i119 = 0, $this$addr$i$i14$i$i164 = 0, $this$addr$i$i14$i$i68 = 0, $this$addr$i$i16$i = 0, $this$addr$i$i174 = 0, $this$addr$i$i44 = 0, $this$addr$i$i5$i = 0, $this$addr$i$i5$i$i = 0, $this$addr$i$i5$i$i124 = 0, $this$addr$i$i5$i$i169 = 0, $this$addr$i$i5$i$i73 = 0;
 var $this$addr$i$i52 = 0, $this$addr$i$i58 = 0, $this$addr$i$i78 = 0, $this$addr$i113 = 0, $this$addr$i130 = 0, $this$addr$i15$i$i = 0, $this$addr$i15$i$i120 = 0, $this$addr$i15$i$i165 = 0, $this$addr$i15$i$i69 = 0, $this$addr$i17$i = 0, $this$addr$i175 = 0, $this$addr$i40 = 0, $this$addr$i45 = 0, $this$addr$i53 = 0, $this$addr$i59 = 0, $this$addr$i6$i = 0, $this$addr$i6$i$i = 0, $this$addr$i6$i$i125 = 0, $this$addr$i6$i$i170 = 0, $this$addr$i6$i$i74 = 0;
 var $this$addr$i62 = 0, $this$addr$i64 = 0, $this$addr$i79 = 0, $this1$i = 0, $this1$i$i = 0, $this1$i$i$i = 0, $this1$i$i$i$i = 0, $this1$i$i$i$i$i = 0, $this1$i$i$i$i$i136 = 0, $this1$i$i$i$i$i181 = 0, $this1$i$i$i$i$i85 = 0, $this1$i$i$i$i135 = 0, $this1$i$i$i$i180 = 0, $this1$i$i$i$i49 = 0, $this1$i$i$i$i57 = 0, $this1$i$i$i$i84 = 0, $this1$i$i$i10$i = 0, $this1$i$i$i10$i$i = 0, $this1$i$i$i10$i$i103 = 0, $this1$i$i$i10$i$i154 = 0;
 var $this1$i$i$i10$i$i199 = 0, $this1$i$i$i116 = 0, $this1$i$i$i133 = 0, $this1$i$i$i178 = 0, $this1$i$i$i19$i$i = 0, $this1$i$i$i19$i$i146 = 0, $this1$i$i$i19$i$i191 = 0, $this1$i$i$i19$i$i95 = 0, $this1$i$i$i21$i = 0, $this1$i$i$i48 = 0, $this1$i$i$i56 = 0, $this1$i$i$i82 = 0, $this1$i$i115 = 0, $this1$i$i132 = 0, $this1$i$i177 = 0, $this1$i$i18$i$i = 0, $this1$i$i18$i$i145 = 0, $this1$i$i18$i$i190 = 0, $this1$i$i18$i$i94 = 0, $this1$i$i20$i = 0;
 var $this1$i$i47 = 0, $this1$i$i55 = 0, $this1$i$i61 = 0, $this1$i$i81 = 0, $this1$i$i9$i = 0, $this1$i$i9$i$i = 0, $this1$i$i9$i$i102 = 0, $this1$i$i9$i$i153 = 0, $this1$i$i9$i$i198 = 0, $this1$i114 = 0, $this1$i131 = 0, $this1$i16$i$i = 0, $this1$i16$i$i143 = 0, $this1$i16$i$i188 = 0, $this1$i16$i$i92 = 0, $this1$i176 = 0, $this1$i18$i = 0, $this1$i41 = 0, $this1$i46 = 0, $this1$i54 = 0;
 var $this1$i60 = 0, $this1$i63 = 0, $this1$i65 = 0, $this1$i7$i = 0, $this1$i7$i$i = 0, $this1$i7$i$i100 = 0, $this1$i7$i$i151 = 0, $this1$i7$i$i196 = 0, $this1$i80 = 0, $tmp = 0, $tobool$i = 0, $tobool$i$i = 0, $tobool$i$i$i = 0, $tobool$i$i$i142 = 0, $tobool$i$i$i187 = 0, $tobool$i$i$i91 = 0, $vbase$offset = 0, $vbase$offset$i$i = 0, $vbase$offset14 = 0, $vbase$offset18 = 0;
 var $vbase$offset27 = 0, $vbase$offset33 = 0, $vtable = 0, $vtable$i$i = 0, $vtable$i$i$i = 0, $vtable12 = 0, $vtable16 = 0, $vtable25 = 0, $vtable31 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 400|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $agg$tmp$byval_copy = sp + 180|0;
 $ref$tmp$i$i = sp + 120|0;
 $__s = sp + 152|0;
 $agg$tmp = sp + 116|0;
 $tmp = sp + 104|0;
 $__os$addr = $__os;
 $__str$addr = $__str;
 $0 = $__os$addr;
 __THREW__ = 0;
 invoke_vii(357,($__s|0),($0|0));
 $1 = __THREW__; __THREW__ = 0;
 $2 = $1&1;
 L1: do {
  if ($2) {
   $73 = ___cxa_find_matching_catch(0|0)|0;
   $74 = tempRet0;
   $exn$slot = $73;
   $ehselector$slot = $74;
  } else {
   $this$addr$i = $__s;
   $this1$i = $this$addr$i;
   $3 = HEAP8[$this1$i>>0]|0;
   $tobool$i = $3&1;
   L4: do {
    if ($tobool$i) {
     $4 = $__str$addr;
     $this$addr$i40 = $4;
     $this1$i41 = $this$addr$i40;
     $this$addr$i$i = $this1$i41;
     $this1$i$i = $this$addr$i$i;
     $this$addr$i$i$i = $this1$i$i;
     $this1$i$i$i = $this$addr$i$i$i;
     $this$addr$i$i$i$i = $this1$i$i$i;
     $this1$i$i$i$i = $this$addr$i$i$i$i;
     $5 = HEAP8[$this1$i$i$i$i>>0]|0;
     $conv$i$i = $5&255;
     $and$i$i = $conv$i$i & 1;
     $tobool$i$i = ($and$i$i|0)!=(0);
     if ($tobool$i$i) {
      $this$addr$i17$i = $this1$i41;
      $this1$i18$i = $this$addr$i17$i;
      $this$addr$i$i16$i = $this1$i18$i;
      $this1$i$i20$i = $this$addr$i$i16$i;
      $this$addr$i$i$i15$i = $this1$i$i20$i;
      $this1$i$i$i21$i = $this$addr$i$i$i15$i;
      $__size_$i23$i = (($this1$i$i$i21$i) + 4|0);
      $6 = HEAP32[$__size_$i23$i>>2]|0;
      $cond$i = $6;
     } else {
      $this$addr$i6$i = $this1$i41;
      $this1$i7$i = $this$addr$i6$i;
      $this$addr$i$i5$i = $this1$i7$i;
      $this1$i$i9$i = $this$addr$i$i5$i;
      $this$addr$i$i$i4$i = $this1$i$i9$i;
      $this1$i$i$i10$i = $this$addr$i$i$i4$i;
      $7 = HEAP8[$this1$i$i$i10$i>>0]|0;
      $conv$i14$i = $7&255;
      $shr$i$i = $conv$i14$i >> 1;
      $cond$i = $shr$i$i;
     }
     $__len = $cond$i;
     $8 = $__os$addr;
     $this$addr$i45 = $agg$tmp;
     $__s$addr$i = $8;
     $this1$i46 = $this$addr$i45;
     $9 = $__s$addr$i;
     $this$addr$i$i44 = $this1$i46;
     $__s$addr$i$i = $9;
     $this1$i$i47 = $this$addr$i$i44;
     $10 = $__s$addr$i$i;
     $vtable$i$i = HEAP32[$10>>2]|0;
     $11 = (($vtable$i$i) + -12|0);
     $vbase$offset$i$i = HEAP32[$11>>2]|0;
     $add$ptr$i$i = (($10) + ($vbase$offset$i$i)|0);
     $this$addr$i$i$i43 = $add$ptr$i$i;
     $this1$i$i$i48 = $this$addr$i$i$i43;
     $this$addr$i$i$i$i42 = $this1$i$i$i48;
     $this1$i$i$i$i49 = $this$addr$i$i$i$i42;
     $__rdbuf_$i$i$i$i = (($this1$i$i$i$i49) + 24|0);
     $12 = HEAP32[$__rdbuf_$i$i$i$i>>2]|0;
     HEAP32[$this1$i$i47>>2] = $12;
     $13 = $__str$addr;
     $this$addr$i53 = $13;
     $this1$i54 = $this$addr$i53;
     $this$addr$i$i52 = $this1$i54;
     $this1$i$i55 = $this$addr$i$i52;
     $this$addr$i$i$i51 = $this1$i$i55;
     $this1$i$i$i56 = $this$addr$i$i$i51;
     $this$addr$i$i$i$i50 = $this1$i$i$i56;
     $this1$i$i$i$i57 = $this$addr$i$i$i$i50;
     $this$addr$i$i$i$i$i = $this1$i$i$i$i57;
     $this1$i$i$i$i$i = $this$addr$i$i$i$i$i;
     $14 = HEAP8[$this1$i$i$i$i$i>>0]|0;
     $conv$i$i$i = $14&255;
     $and$i$i$i = $conv$i$i$i & 1;
     $tobool$i$i$i = ($and$i$i$i|0)!=(0);
     if ($tobool$i$i$i) {
      $this$addr$i15$i$i = $this1$i$i55;
      $this1$i16$i$i = $this$addr$i15$i$i;
      $this$addr$i$i14$i$i = $this1$i16$i$i;
      $this1$i$i18$i$i = $this$addr$i$i14$i$i;
      $this$addr$i$i$i13$i$i = $this1$i$i18$i$i;
      $this1$i$i$i19$i$i = $this$addr$i$i$i13$i$i;
      $__data_$i21$i$i = (($this1$i$i$i19$i$i) + 8|0);
      $15 = HEAP32[$__data_$i21$i$i>>2]|0;
      $cond$i$i = $15;
     } else {
      $this$addr$i6$i$i = $this1$i$i55;
      $this1$i7$i$i = $this$addr$i6$i$i;
      $this$addr$i$i5$i$i = $this1$i7$i$i;
      $this1$i$i9$i$i = $this$addr$i$i5$i$i;
      $this$addr$i$i$i4$i$i = $this1$i$i9$i$i;
      $this1$i$i$i10$i$i = $this$addr$i$i$i4$i$i;
      $__data_$i$i$i = (($this1$i$i$i10$i$i) + 1|0);
      $__r$addr$i$i$i$i = $__data_$i$i$i;
      $16 = $__r$addr$i$i$i$i;
      $__x$addr$i$i$i$i$i = $16;
      $17 = $__x$addr$i$i$i$i$i;
      $cond$i$i = $17;
     }
     $__p$addr$i$i = $cond$i$i;
     $18 = $__p$addr$i$i;
     $19 = $__os$addr;
     $vtable = HEAP32[$19>>2]|0;
     $20 = (($vtable) + -12|0);
     $vbase$offset = HEAP32[$20>>2]|0;
     $add$ptr = (($19) + ($vbase$offset)|0);
     $this$addr$i62 = $add$ptr;
     $this1$i63 = $this$addr$i62;
     $__fmtflags_$i = (($this1$i63) + 4|0);
     $21 = HEAP32[$__fmtflags_$i>>2]|0;
     $and = $21 & 176;
     $cmp = ($and|0)==(32);
     if ($cmp) {
      $22 = $__str$addr;
      $this$addr$i79 = $22;
      $this1$i80 = $this$addr$i79;
      $this$addr$i$i78 = $this1$i80;
      $this1$i$i81 = $this$addr$i$i78;
      $this$addr$i$i$i77 = $this1$i$i81;
      $this1$i$i$i82 = $this$addr$i$i$i77;
      $this$addr$i$i$i$i76 = $this1$i$i$i82;
      $this1$i$i$i$i84 = $this$addr$i$i$i$i76;
      $this$addr$i$i$i$i$i75 = $this1$i$i$i$i84;
      $this1$i$i$i$i$i85 = $this$addr$i$i$i$i$i75;
      $23 = HEAP8[$this1$i$i$i$i$i85>>0]|0;
      $conv$i$i$i89 = $23&255;
      $and$i$i$i90 = $conv$i$i$i89 & 1;
      $tobool$i$i$i91 = ($and$i$i$i90|0)!=(0);
      if ($tobool$i$i$i91) {
       $this$addr$i15$i$i69 = $this1$i$i81;
       $this1$i16$i$i92 = $this$addr$i15$i$i69;
       $this$addr$i$i14$i$i68 = $this1$i16$i$i92;
       $this1$i$i18$i$i94 = $this$addr$i$i14$i$i68;
       $this$addr$i$i$i13$i$i67 = $this1$i$i18$i$i94;
       $this1$i$i$i19$i$i95 = $this$addr$i$i$i13$i$i67;
       $__data_$i21$i$i98 = (($this1$i$i$i19$i$i95) + 8|0);
       $24 = HEAP32[$__data_$i21$i$i98>>2]|0;
       $cond$i$i109 = $24;
      } else {
       $this$addr$i6$i$i74 = $this1$i$i81;
       $this1$i7$i$i100 = $this$addr$i6$i$i74;
       $this$addr$i$i5$i$i73 = $this1$i7$i$i100;
       $this1$i$i9$i$i102 = $this$addr$i$i5$i$i73;
       $this$addr$i$i$i4$i$i72 = $this1$i$i9$i$i102;
       $this1$i$i$i10$i$i103 = $this$addr$i$i$i4$i$i72;
       $__data_$i$i$i106 = (($this1$i$i$i10$i$i103) + 1|0);
       $__r$addr$i$i$i$i71 = $__data_$i$i$i106;
       $25 = $__r$addr$i$i$i$i71;
       $__x$addr$i$i$i$i$i70 = $25;
       $26 = $__x$addr$i$i$i$i$i70;
       $cond$i$i109 = $26;
      }
      $__p$addr$i$i66 = $cond$i$i109;
      $27 = $__p$addr$i$i66;
      $28 = $__len;
      $add$ptr8 = (($27) + ($28)|0);
      $cond = $add$ptr8;
     } else {
      $29 = $__str$addr;
      $this$addr$i130 = $29;
      $this1$i131 = $this$addr$i130;
      $this$addr$i$i129 = $this1$i131;
      $this1$i$i132 = $this$addr$i$i129;
      $this$addr$i$i$i128 = $this1$i$i132;
      $this1$i$i$i133 = $this$addr$i$i$i128;
      $this$addr$i$i$i$i127 = $this1$i$i$i133;
      $this1$i$i$i$i135 = $this$addr$i$i$i$i127;
      $this$addr$i$i$i$i$i126 = $this1$i$i$i$i135;
      $this1$i$i$i$i$i136 = $this$addr$i$i$i$i$i126;
      $30 = HEAP8[$this1$i$i$i$i$i136>>0]|0;
      $conv$i$i$i140 = $30&255;
      $and$i$i$i141 = $conv$i$i$i140 & 1;
      $tobool$i$i$i142 = ($and$i$i$i141|0)!=(0);
      if ($tobool$i$i$i142) {
       $this$addr$i15$i$i120 = $this1$i$i132;
       $this1$i16$i$i143 = $this$addr$i15$i$i120;
       $this$addr$i$i14$i$i119 = $this1$i16$i$i143;
       $this1$i$i18$i$i145 = $this$addr$i$i14$i$i119;
       $this$addr$i$i$i13$i$i118 = $this1$i$i18$i$i145;
       $this1$i$i$i19$i$i146 = $this$addr$i$i$i13$i$i118;
       $__data_$i21$i$i149 = (($this1$i$i$i19$i$i146) + 8|0);
       $31 = HEAP32[$__data_$i21$i$i149>>2]|0;
       $cond$i$i160 = $31;
      } else {
       $this$addr$i6$i$i125 = $this1$i$i132;
       $this1$i7$i$i151 = $this$addr$i6$i$i125;
       $this$addr$i$i5$i$i124 = $this1$i7$i$i151;
       $this1$i$i9$i$i153 = $this$addr$i$i5$i$i124;
       $this$addr$i$i$i4$i$i123 = $this1$i$i9$i$i153;
       $this1$i$i$i10$i$i154 = $this$addr$i$i$i4$i$i123;
       $__data_$i$i$i157 = (($this1$i$i$i10$i$i154) + 1|0);
       $__r$addr$i$i$i$i122 = $__data_$i$i$i157;
       $32 = $__r$addr$i$i$i$i122;
       $__x$addr$i$i$i$i$i121 = $32;
       $33 = $__x$addr$i$i$i$i$i121;
       $cond$i$i160 = $33;
      }
      $__p$addr$i$i117 = $cond$i$i160;
      $34 = $__p$addr$i$i117;
      $cond = $34;
     }
     $35 = $__str$addr;
     $this$addr$i175 = $35;
     $this1$i176 = $this$addr$i175;
     $this$addr$i$i174 = $this1$i176;
     $this1$i$i177 = $this$addr$i$i174;
     $this$addr$i$i$i173 = $this1$i$i177;
     $this1$i$i$i178 = $this$addr$i$i$i173;
     $this$addr$i$i$i$i172 = $this1$i$i$i178;
     $this1$i$i$i$i180 = $this$addr$i$i$i$i172;
     $this$addr$i$i$i$i$i171 = $this1$i$i$i$i180;
     $this1$i$i$i$i$i181 = $this$addr$i$i$i$i$i171;
     $36 = HEAP8[$this1$i$i$i$i$i181>>0]|0;
     $conv$i$i$i185 = $36&255;
     $and$i$i$i186 = $conv$i$i$i185 & 1;
     $tobool$i$i$i187 = ($and$i$i$i186|0)!=(0);
     if ($tobool$i$i$i187) {
      $this$addr$i15$i$i165 = $this1$i$i177;
      $this1$i16$i$i188 = $this$addr$i15$i$i165;
      $this$addr$i$i14$i$i164 = $this1$i16$i$i188;
      $this1$i$i18$i$i190 = $this$addr$i$i14$i$i164;
      $this$addr$i$i$i13$i$i163 = $this1$i$i18$i$i190;
      $this1$i$i$i19$i$i191 = $this$addr$i$i$i13$i$i163;
      $__data_$i21$i$i194 = (($this1$i$i$i19$i$i191) + 8|0);
      $37 = HEAP32[$__data_$i21$i$i194>>2]|0;
      $cond$i$i205 = $37;
     } else {
      $this$addr$i6$i$i170 = $this1$i$i177;
      $this1$i7$i$i196 = $this$addr$i6$i$i170;
      $this$addr$i$i5$i$i169 = $this1$i7$i$i196;
      $this1$i$i9$i$i198 = $this$addr$i$i5$i$i169;
      $this$addr$i$i$i4$i$i168 = $this1$i$i9$i$i198;
      $this1$i$i$i10$i$i199 = $this$addr$i$i$i4$i$i168;
      $__data_$i$i$i202 = (($this1$i$i$i10$i$i199) + 1|0);
      $__r$addr$i$i$i$i167 = $__data_$i$i$i202;
      $38 = $__r$addr$i$i$i$i167;
      $__x$addr$i$i$i$i$i166 = $38;
      $39 = $__x$addr$i$i$i$i$i166;
      $cond$i$i205 = $39;
     }
     $__p$addr$i$i162 = $cond$i$i205;
     $40 = $__p$addr$i$i162;
     $41 = $__len;
     $add$ptr11 = (($40) + ($41)|0);
     $42 = $__os$addr;
     $vtable12 = HEAP32[$42>>2]|0;
     $43 = (($vtable12) + -12|0);
     $vbase$offset14 = HEAP32[$43>>2]|0;
     $add$ptr15 = (($42) + ($vbase$offset14)|0);
     $44 = $__os$addr;
     $vtable16 = HEAP32[$44>>2]|0;
     $45 = (($vtable16) + -12|0);
     $vbase$offset18 = HEAP32[$45>>2]|0;
     $add$ptr19 = (($44) + ($vbase$offset18)|0);
     $this$addr$i113 = $add$ptr19;
     $this1$i114 = $this$addr$i113;
     $__fill_$i = (($this1$i114) + 76|0);
     $46 = HEAP32[$__fill_$i>>2]|0;
     $__c1$addr$i$i = -1;
     $__c2$addr$i$i = $46;
     $47 = $__c1$addr$i$i;
     $48 = $__c2$addr$i$i;
     $cmp$i$i = ($47|0)==($48|0);
     do {
      if ($cmp$i$i) {
       $this$addr$i$i112 = $this1$i114;
       $__c$addr$i$i = 32;
       $this1$i$i115 = $this$addr$i$i112;
       __THREW__ = 0;
       invoke_vii(358,($ref$tmp$i$i|0),($this1$i$i115|0));
       $49 = __THREW__; __THREW__ = 0;
       $50 = $49&1;
       if ($50) {
        label = 36;
       } else {
        $__l$addr$i$i$i = $ref$tmp$i$i;
        $51 = $__l$addr$i$i$i;
        __THREW__ = 0;
        $call$i5$i$i = (invoke_iii(359,($51|0),(4616|0))|0);
        $52 = __THREW__; __THREW__ = 0;
        $53 = $52&1;
        if (!($53)) {
         $54 = $__c$addr$i$i;
         $this$addr$i$i$i111 = $call$i5$i$i;
         $__c$addr$i$i$i = $54;
         $this1$i$i$i116 = $this$addr$i$i$i111;
         $vtable$i$i$i = HEAP32[$this1$i$i$i116>>2]|0;
         $55 = (($vtable$i$i$i) + 28|0);
         $56 = HEAP32[$55>>2]|0;
         $57 = $__c$addr$i$i$i;
         __THREW__ = 0;
         $call$i6$i$i = (invoke_iii($56|0,($this1$i$i$i116|0),($57|0))|0);
         $58 = __THREW__; __THREW__ = 0;
         $59 = $58&1;
         if (!($59)) {
          __ZNSt3__16localeD2Ev($ref$tmp$i$i);
          $conv$i = $call$i6$i$i << 24 >> 24;
          $__fill_4$i = (($this1$i114) + 76|0);
          HEAP32[$__fill_4$i>>2] = $conv$i;
          label = 29;
          break;
         }
        }
        $60 = ___cxa_find_matching_catch(0|0,0|0)|0;
        $61 = tempRet0;
        $exn$slot$i$i = $60;
        $ehselector$slot$i$i = $61;
        __ZNSt3__16localeD2Ev($ref$tmp$i$i);
        $exn$i$i = $exn$slot$i$i;
        $sel$i$i = $ehselector$slot$i$i;
        $eh$lpad$body$index2Z2D = $sel$i$i;$eh$lpad$body$indexZ2D = $exn$i$i;
       }
      } else {
       label = 29;
      }
     } while(0);
     do {
      if ((label|0) == 29) {
       $__fill_5$i = (($this1$i114) + 76|0);
       $62 = HEAP32[$__fill_5$i>>2]|0;
       $conv6$i = $62&255;
       __THREW__ = 0;
       ;HEAP32[$agg$tmp$byval_copy+0>>2]=HEAP32[$agg$tmp+0>>2]|0;
       invoke_viiiiiii(360,($tmp|0),($agg$tmp$byval_copy|0),($18|0),($cond|0),($add$ptr11|0),($add$ptr15|0),($conv6$i|0));
       $63 = __THREW__; __THREW__ = 0;
       $64 = $63&1;
       if ($64) {
        label = 36;
       } else {
        $this$addr$i64 = $tmp;
        $this1$i65 = $this$addr$i64;
        $65 = HEAP32[$this1$i65>>2]|0;
        $cmp$i = ($65|0)==(0|0);
        if ($cmp$i) {
         $66 = $__os$addr;
         $vtable25 = HEAP32[$66>>2]|0;
         $67 = (($vtable25) + -12|0);
         $vbase$offset27 = HEAP32[$67>>2]|0;
         $add$ptr28 = (($66) + ($vbase$offset27)|0);
         $this$addr$i59 = $add$ptr28;
         $__state$addr$i = 5;
         $this1$i60 = $this$addr$i59;
         $68 = $__state$addr$i;
         $this$addr$i$i58 = $this1$i60;
         $__state$addr$i$i = $68;
         $this1$i$i61 = $this$addr$i$i58;
         $__rdstate_$i$i = (($this1$i$i61) + 16|0);
         $69 = HEAP32[$__rdstate_$i$i>>2]|0;
         $70 = $__state$addr$i$i;
         $or$i$i = $69 | $70;
         __THREW__ = 0;
         invoke_vii(361,($this1$i$i61|0),($or$i$i|0));
         $71 = __THREW__; __THREW__ = 0;
         $72 = $71&1;
         if ($72) {
          label = 36;
          break;
         }
        }
        break L4;
       }
      }
     } while(0);
     if ((label|0) == 36) {
      $75 = ___cxa_find_matching_catch(0|0)|0;
      $76 = tempRet0;
      $eh$lpad$body$index2Z2D = $76;$eh$lpad$body$indexZ2D = $75;
     }
     $exn$slot = $eh$lpad$body$indexZ2D;
     $ehselector$slot = $eh$lpad$body$index2Z2D;
     __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE6sentryD1Ev($__s);
     break L1;
    }
   } while(0);
   __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE6sentryD1Ev($__s);
   $81 = $__os$addr;
   STACKTOP = sp;return ($81|0);
  }
 } while(0);
 $exn = $exn$slot;
 (___cxa_begin_catch(($exn|0))|0);
 $77 = $__os$addr;
 $vtable31 = HEAP32[$77>>2]|0;
 $78 = (($vtable31) + -12|0);
 $vbase$offset33 = HEAP32[$78>>2]|0;
 $add$ptr34 = (($77) + ($vbase$offset33)|0);
 __THREW__ = 0;
 invoke_vi(362,($add$ptr34|0));
 $79 = __THREW__; __THREW__ = 0;
 $80 = $79&1;
 if (!($80)) {
  ___cxa_end_catch();
  $81 = $__os$addr;
  STACKTOP = sp;return ($81|0);
 }
 $82 = ___cxa_find_matching_catch()|0;
 $83 = tempRet0;
 $exn$slot = $82;
 $ehselector$slot = $83;
 __THREW__ = 0;
 invoke_v(363);
 $84 = __THREW__; __THREW__ = 0;
 $85 = $84&1;
 if ($85) {
  $86 = ___cxa_find_matching_catch(0|0)|0;
  $87 = tempRet0;
  ___clang_call_terminate($86);
  // unreachable;
 }
 $exn38 = $exn$slot;
 $sel = $ehselector$slot;
 ___resumeException($exn38|0);
 // unreachable;
 return 0|0;
}
function __ZNSt3__14endlIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_($__os) {
 $__os = $__os|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__c$addr$i = 0, $__c$addr$i$i = 0, $__l$addr$i$i = 0, $__os$addr = 0;
 var $add$ptr = 0, $call$i5$i = 0, $call$i6$i = 0, $ehselector$slot$i = 0, $exn$i = 0, $exn$slot$i = 0, $ref$tmp$i = 0, $sel$i = 0, $this$addr$i = 0, $this$addr$i$i = 0, $this1$i = 0, $this1$i$i = 0, $vbase$offset = 0, $vtable = 0, $vtable$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $ref$tmp$i = sp;
 $__os$addr = $__os;
 $0 = $__os$addr;
 $1 = $__os$addr;
 $vtable = HEAP32[$1>>2]|0;
 $2 = (($vtable) + -12|0);
 $vbase$offset = HEAP32[$2>>2]|0;
 $add$ptr = (($1) + ($vbase$offset)|0);
 $this$addr$i = $add$ptr;
 $__c$addr$i = 10;
 $this1$i = $this$addr$i;
 __ZNKSt3__18ios_base6getlocEv($ref$tmp$i,$this1$i);
 $__l$addr$i$i = $ref$tmp$i;
 $3 = $__l$addr$i$i;
 __THREW__ = 0;
 $call$i5$i = (invoke_iii(359,($3|0),(4616|0))|0);
 $4 = __THREW__; __THREW__ = 0;
 $5 = $4&1;
 if ($5) {
  $12 = ___cxa_find_matching_catch()|0;
  $13 = tempRet0;
  $exn$slot$i = $12;
  $ehselector$slot$i = $13;
  __ZNSt3__16localeD2Ev($ref$tmp$i);
  $exn$i = $exn$slot$i;
  $sel$i = $ehselector$slot$i;
  ___resumeException($exn$i|0);
  // unreachable;
 }
 $6 = $__c$addr$i;
 $this$addr$i$i = $call$i5$i;
 $__c$addr$i$i = $6;
 $this1$i$i = $this$addr$i$i;
 $vtable$i$i = HEAP32[$this1$i$i>>2]|0;
 $7 = (($vtable$i$i) + 28|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = $__c$addr$i$i;
 __THREW__ = 0;
 $call$i6$i = (invoke_iii($8|0,($this1$i$i|0),($9|0))|0);
 $10 = __THREW__; __THREW__ = 0;
 $11 = $10&1;
 if ($11) {
  $12 = ___cxa_find_matching_catch()|0;
  $13 = tempRet0;
  $exn$slot$i = $12;
  $ehselector$slot$i = $13;
  __ZNSt3__16localeD2Ev($ref$tmp$i);
  $exn$i = $exn$slot$i;
  $sel$i = $ehselector$slot$i;
  ___resumeException($exn$i|0);
  // unreachable;
 } else {
  __ZNSt3__16localeD2Ev($ref$tmp$i);
  (__ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE3putEc($0,$call$i6$i)|0);
  $14 = $__os$addr;
  (__ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE5flushEv($14)|0);
  $15 = $__os$addr;
  STACKTOP = sp;return ($15|0);
 }
 return 0|0;
}
function __ZNSt3__116__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($agg$result,$__s,$__ob,$__op,$__oe,$__iob,$__fl) {
 $agg$result = $agg$result|0;
 $__s = $__s|0;
 $__ob = $__ob|0;
 $__op = $__op|0;
 $__oe = $__oe|0;
 $__iob = $__iob|0;
 $__fl = $__fl|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__c$addr$i = 0, $__c$addr$i$i = 0, $__data_$i$i$i = 0;
 var $__data_$i21$i$i = 0, $__fl$addr = 0, $__iob$addr = 0, $__n$addr$i = 0, $__n$addr$i$i = 0, $__n$addr$i47 = 0, $__n$addr$i53 = 0, $__n$addr$i68 = 0, $__np = 0, $__ns = 0, $__ob$addr = 0, $__oe$addr = 0, $__op$addr = 0, $__p$addr$i$i = 0, $__r$addr$i$i$i$i = 0, $__r$i = 0, $__s$addr$i = 0, $__s$addr$i46 = 0, $__s$addr$i67 = 0, $__sp = 0;
 var $__sz = 0, $__wide$addr$i = 0, $__width_$i = 0, $__width_$i42 = 0, $__width_2$i = 0, $__x$addr$i$i$i$i$i = 0, $and$i$i$i = 0, $call$i = 0, $call$i51 = 0, $call$i7273 = 0, $cleanup$dest = 0, $cleanup$dest$slot = 0, $cmp = 0, $cmp1 = 0, $cmp11 = 0, $cmp16 = 0, $cmp21 = 0, $cmp29 = 0, $cmp33 = 0, $cmp7 = 0;
 var $cond$i$i = 0, $conv$i$i$i = 0, $ehselector$slot = 0, $exn = 0, $exn$slot = 0, $sel = 0, $sub = 0, $sub$ptr$lhs$cast = 0, $sub$ptr$lhs$cast26 = 0, $sub$ptr$lhs$cast4 = 0, $sub$ptr$rhs$cast = 0, $sub$ptr$rhs$cast27 = 0, $sub$ptr$rhs$cast5 = 0, $sub$ptr$sub = 0, $sub$ptr$sub28 = 0, $sub$ptr$sub6 = 0, $this$addr$i = 0, $this$addr$i$i = 0, $this$addr$i$i$i = 0, $this$addr$i$i$i$i = 0;
 var $this$addr$i$i$i$i$i = 0, $this$addr$i$i$i$i$i$i = 0, $this$addr$i$i$i$i$i55 = 0, $this$addr$i$i$i$i56 = 0, $this$addr$i$i$i13$i$i = 0, $this$addr$i$i$i4$i$i = 0, $this$addr$i$i$i57 = 0, $this$addr$i$i14$i$i = 0, $this$addr$i$i5$i$i = 0, $this$addr$i$i58 = 0, $this$addr$i15$i$i = 0, $this$addr$i40 = 0, $this$addr$i43 = 0, $this$addr$i45 = 0, $this$addr$i52 = 0, $this$addr$i59 = 0, $this$addr$i6$i$i = 0, $this$addr$i66 = 0, $this1$i = 0, $this1$i$i = 0;
 var $this1$i$i$i = 0, $this1$i$i$i$i = 0, $this1$i$i$i$i$i = 0, $this1$i$i$i$i$i64 = 0, $this1$i$i$i$i63 = 0, $this1$i$i$i10$i$i = 0, $this1$i$i$i19$i$i = 0, $this1$i$i$i62 = 0, $this1$i$i18$i$i = 0, $this1$i$i61 = 0, $this1$i$i9$i$i = 0, $this1$i16$i$i = 0, $this1$i41 = 0, $this1$i44 = 0, $this1$i48 = 0, $this1$i54 = 0, $this1$i60 = 0, $this1$i69 = 0, $this1$i7$i$i = 0, $tobool$i$i$i = 0;
 var $vtable$i = 0, $vtable$i49 = 0, $vtable$i70 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 208|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__sp = sp + 172|0;
 $__ob$addr = $__ob;
 $__op$addr = $__op;
 $__oe$addr = $__oe;
 $__iob$addr = $__iob;
 $__fl$addr = $__fl;
 $0 = HEAP32[$__s>>2]|0;
 $cmp = ($0|0)==(0|0);
 if ($cmp) {
  ;HEAP32[$agg$result+0>>2]=HEAP32[$__s+0>>2]|0;
  STACKTOP = sp;return;
 }
 $1 = $__oe$addr;
 $2 = $__ob$addr;
 $sub$ptr$lhs$cast = $1;
 $sub$ptr$rhs$cast = $2;
 $sub$ptr$sub = (($sub$ptr$lhs$cast) - ($sub$ptr$rhs$cast))|0;
 $__sz = $sub$ptr$sub;
 $3 = $__iob$addr;
 $this$addr$i = $3;
 $this1$i = $this$addr$i;
 $__width_$i = (($this1$i) + 12|0);
 $4 = HEAP32[$__width_$i>>2]|0;
 $__ns = $4;
 $5 = $__ns;
 $6 = $__sz;
 $cmp1 = ($5|0)>($6|0);
 if ($cmp1) {
  $7 = $__sz;
  $8 = $__ns;
  $sub = (($8) - ($7))|0;
  $__ns = $sub;
 } else {
  $__ns = 0;
 }
 $9 = $__op$addr;
 $10 = $__ob$addr;
 $sub$ptr$lhs$cast4 = $9;
 $sub$ptr$rhs$cast5 = $10;
 $sub$ptr$sub6 = (($sub$ptr$lhs$cast4) - ($sub$ptr$rhs$cast5))|0;
 $__np = $sub$ptr$sub6;
 $11 = $__np;
 $cmp7 = ($11|0)>(0);
 do {
  if ($cmp7) {
   $12 = HEAP32[$__s>>2]|0;
   $13 = $__ob$addr;
   $14 = $__np;
   $this$addr$i45 = $12;
   $__s$addr$i46 = $13;
   $__n$addr$i47 = $14;
   $this1$i48 = $this$addr$i45;
   $vtable$i49 = HEAP32[$this1$i48>>2]|0;
   $15 = (($vtable$i49) + 48|0);
   $16 = HEAP32[$15>>2]|0;
   $17 = $__s$addr$i46;
   $18 = $__n$addr$i47;
   $call$i51 = (FUNCTION_TABLE_iiii[$16 & 511]($this1$i48,$17,$18)|0);
   $19 = $__np;
   $cmp11 = ($call$i51|0)!=($19|0);
   if (!($cmp11)) {
    break;
   }
   HEAP32[$__s>>2] = 0;
   ;HEAP32[$agg$result+0>>2]=HEAP32[$__s+0>>2]|0;
   STACKTOP = sp;return;
  }
 } while(0);
 $20 = $__ns;
 $cmp16 = ($20|0)>(0);
 do {
  if ($cmp16) {
   $21 = $__ns;
   $22 = $__fl$addr;
   $this$addr$i52 = $__sp;
   $__n$addr$i53 = $21;
   $__c$addr$i = $22;
   $this1$i54 = $this$addr$i52;
   $23 = $__n$addr$i53;
   $24 = $__c$addr$i;
   $this$addr$i$i = $this1$i54;
   $__n$addr$i$i = $23;
   $__c$addr$i$i = $24;
   $this1$i$i = $this$addr$i$i;
   $this$addr$i$i$i = $this1$i$i;
   $this1$i$i$i = $this$addr$i$i$i;
   $this$addr$i$i$i$i = $this1$i$i$i;
   $this1$i$i$i$i = $this$addr$i$i$i$i;
   $this$addr$i$i$i$i$i = $this1$i$i$i$i;
   $this1$i$i$i$i$i = $this$addr$i$i$i$i$i;
   $this$addr$i$i$i$i$i$i = $this1$i$i$i$i$i;
   $25 = $__n$addr$i$i;
   $26 = $__c$addr$i$i;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEjc($this1$i$i,$25,$26);
   $27 = HEAP32[$__s>>2]|0;
   $this$addr$i59 = $__sp;
   $this1$i60 = $this$addr$i59;
   $this$addr$i$i58 = $this1$i60;
   $this1$i$i61 = $this$addr$i$i58;
   $this$addr$i$i$i57 = $this1$i$i61;
   $this1$i$i$i62 = $this$addr$i$i$i57;
   $this$addr$i$i$i$i56 = $this1$i$i$i62;
   $this1$i$i$i$i63 = $this$addr$i$i$i$i56;
   $this$addr$i$i$i$i$i55 = $this1$i$i$i$i63;
   $this1$i$i$i$i$i64 = $this$addr$i$i$i$i$i55;
   $28 = HEAP8[$this1$i$i$i$i$i64>>0]|0;
   $conv$i$i$i = $28&255;
   $and$i$i$i = $conv$i$i$i & 1;
   $tobool$i$i$i = ($and$i$i$i|0)!=(0);
   if ($tobool$i$i$i) {
    $this$addr$i15$i$i = $this1$i$i61;
    $this1$i16$i$i = $this$addr$i15$i$i;
    $this$addr$i$i14$i$i = $this1$i16$i$i;
    $this1$i$i18$i$i = $this$addr$i$i14$i$i;
    $this$addr$i$i$i13$i$i = $this1$i$i18$i$i;
    $this1$i$i$i19$i$i = $this$addr$i$i$i13$i$i;
    $__data_$i21$i$i = (($this1$i$i$i19$i$i) + 8|0);
    $29 = HEAP32[$__data_$i21$i$i>>2]|0;
    $cond$i$i = $29;
   } else {
    $this$addr$i6$i$i = $this1$i$i61;
    $this1$i7$i$i = $this$addr$i6$i$i;
    $this$addr$i$i5$i$i = $this1$i7$i$i;
    $this1$i$i9$i$i = $this$addr$i$i5$i$i;
    $this$addr$i$i$i4$i$i = $this1$i$i9$i$i;
    $this1$i$i$i10$i$i = $this$addr$i$i$i4$i$i;
    $__data_$i$i$i = (($this1$i$i$i10$i$i) + 1|0);
    $__r$addr$i$i$i$i = $__data_$i$i$i;
    $30 = $__r$addr$i$i$i$i;
    $__x$addr$i$i$i$i$i = $30;
    $31 = $__x$addr$i$i$i$i$i;
    $cond$i$i = $31;
   }
   $__p$addr$i$i = $cond$i$i;
   $32 = $__p$addr$i$i;
   $33 = $__ns;
   $this$addr$i66 = $27;
   $__s$addr$i67 = $32;
   $__n$addr$i68 = $33;
   $this1$i69 = $this$addr$i66;
   $vtable$i70 = HEAP32[$this1$i69>>2]|0;
   $34 = (($vtable$i70) + 48|0);
   $35 = HEAP32[$34>>2]|0;
   $36 = $__s$addr$i67;
   $37 = $__n$addr$i68;
   __THREW__ = 0;
   $call$i7273 = (invoke_iiii($35|0,($this1$i69|0),($36|0),($37|0))|0);
   $38 = __THREW__; __THREW__ = 0;
   $39 = $38&1;
   if ($39) {
    $41 = ___cxa_find_matching_catch()|0;
    $42 = tempRet0;
    $exn$slot = $41;
    $ehselector$slot = $42;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__sp);
    $exn = $exn$slot;
    $sel = $ehselector$slot;
    ___resumeException($exn|0);
    // unreachable;
   }
   $40 = $__ns;
   $cmp21 = ($call$i7273|0)!=($40|0);
   if ($cmp21) {
    HEAP32[$__s>>2] = 0;
    ;HEAP32[$agg$result+0>>2]=HEAP32[$__s+0>>2]|0;
    $cleanup$dest$slot = 1;
   } else {
    $cleanup$dest$slot = 0;
   }
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__sp);
   $cleanup$dest = $cleanup$dest$slot;
   if ((($cleanup$dest|0) == 1)) {
    STACKTOP = sp;return;
   } else if ((($cleanup$dest|0) == 0)) {
    break;
   } else {
    // unreachable;
   }
  }
 } while(0);
 $43 = $__oe$addr;
 $44 = $__op$addr;
 $sub$ptr$lhs$cast26 = $43;
 $sub$ptr$rhs$cast27 = $44;
 $sub$ptr$sub28 = (($sub$ptr$lhs$cast26) - ($sub$ptr$rhs$cast27))|0;
 $__np = $sub$ptr$sub28;
 $45 = $__np;
 $cmp29 = ($45|0)>(0);
 do {
  if ($cmp29) {
   $46 = HEAP32[$__s>>2]|0;
   $47 = $__op$addr;
   $48 = $__np;
   $this$addr$i43 = $46;
   $__s$addr$i = $47;
   $__n$addr$i = $48;
   $this1$i44 = $this$addr$i43;
   $vtable$i = HEAP32[$this1$i44>>2]|0;
   $49 = (($vtable$i) + 48|0);
   $50 = HEAP32[$49>>2]|0;
   $51 = $__s$addr$i;
   $52 = $__n$addr$i;
   $call$i = (FUNCTION_TABLE_iiii[$50 & 511]($this1$i44,$51,$52)|0);
   $53 = $__np;
   $cmp33 = ($call$i|0)!=($53|0);
   if (!($cmp33)) {
    break;
   }
   HEAP32[$__s>>2] = 0;
   ;HEAP32[$agg$result+0>>2]=HEAP32[$__s+0>>2]|0;
   STACKTOP = sp;return;
  }
 } while(0);
 $54 = $__iob$addr;
 $this$addr$i40 = $54;
 $__wide$addr$i = 0;
 $this1$i41 = $this$addr$i40;
 $__width_$i42 = (($this1$i41) + 12|0);
 $55 = HEAP32[$__width_$i42>>2]|0;
 $__r$i = $55;
 $56 = $__wide$addr$i;
 $__width_2$i = (($this1$i41) + 12|0);
 HEAP32[$__width_2$i>>2] = $56;
 ;HEAP32[$agg$result+0>>2]=HEAP32[$__s+0>>2]|0;
 STACKTOP = sp;return;
}
function __ZNSt3__18ios_base4InitC2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__fmtflags_$i$i = 0;
 var $__fmtflags_$i$i21 = 0, $__rdbuf_$i$i = 0, $__rdbuf_$i$i17 = 0, $__tie_$i = 0, $__tie_$i12 = 0, $__tie_$i20 = 0, $__tie_$i23 = 0, $add$ptr$sum = 0, $add$ptr17$sum = 0, $add$ptr22$sum = 0, $add$ptr27$sum = 0, $add$ptr45$sum = 0, $add$ptr51$sum = 0, $add$ptr56$sum = 0, $add$ptr61$sum = 0, $or$i$i = 0, $or$i$i22 = 0, $vbase$offset = 0, $vbase$offset$ptr = 0, $vbase$offset$ptr15 = 0;
 var $vbase$offset$ptr20 = 0, $vbase$offset$ptr25 = 0, $vbase$offset$ptr43 = 0, $vbase$offset$ptr49 = 0, $vbase$offset$ptr54 = 0, $vbase$offset$ptr59 = 0, $vbase$offset16 = 0, $vbase$offset21 = 0, $vbase$offset26 = 0, $vbase$offset44 = 0, $vbase$offset50 = 0, $vbase$offset55 = 0, $vbase$offset60 = 0, $vtable = 0, $vtable14 = 0, $vtable19 = 0, $vtable24 = 0, $vtable42 = 0, $vtable48 = 0, $vtable53 = 0;
 var $vtable58 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[_stdin>>2]|0;
 __ZNSt3__110__stdinbufIcEC2EP8_IO_FILEP11__mbstate_t(744,$0,800);
 HEAP32[32>>2] = ((1976 + 12|0));
 HEAP32[((32 + 8|0))>>2] = ((1976 + 32|0));
 HEAP32[((32 + 4|0))>>2] = 0;
 __THREW__ = 0;
 invoke_vii(364,(((32 + 8|0))|0),(744|0));
 $1 = __THREW__; __THREW__ = 0;
 $2 = $1&1;
 if ($2) {
  $3 = ___cxa_find_matching_catch()|0;
  $4 = tempRet0;
  __ZNSt3__18ios_baseD2Ev(((32 + 8|0)));
  ___resumeException($3|0);
  // unreachable;
 }
 HEAP32[((32 + 80|0))>>2] = 0;
 HEAP32[((32 + 84|0))>>2] = -1;
 $5 = HEAP32[_stdout>>2]|0;
 __ZNSt3__111__stdoutbufIcEC2EP8_IO_FILEP11__mbstate_t(848,$5,((800 + 8|0)));
 HEAP32[120>>2] = ((2056 + 12|0));
 HEAP32[((120 + 4|0))>>2] = ((2056 + 32|0));
 __THREW__ = 0;
 invoke_vii(364,(((120 + 4|0))|0),(848|0));
 $6 = __THREW__; __THREW__ = 0;
 $7 = $6&1;
 if ($7) {
  $8 = ___cxa_find_matching_catch()|0;
  $9 = tempRet0;
  __ZNSt3__18ios_baseD2Ev(((120 + 4|0)));
  ___resumeException($8|0);
  // unreachable;
 }
 HEAP32[((120 + 76|0))>>2] = 0;
 HEAP32[((120 + 80|0))>>2] = -1;
 $10 = HEAP32[_stderr>>2]|0;
 __ZNSt3__111__stdoutbufIcEC2EP8_IO_FILEP11__mbstate_t(896,$10,((800 + 16|0)));
 HEAP32[208>>2] = ((2056 + 12|0));
 HEAP32[((208 + 4|0))>>2] = ((2056 + 32|0));
 __THREW__ = 0;
 invoke_vii(364,(((208 + 4|0))|0),(896|0));
 $11 = __THREW__; __THREW__ = 0;
 $12 = $11&1;
 if ($12) {
  $13 = ___cxa_find_matching_catch()|0;
  $14 = tempRet0;
  __ZNSt3__18ios_baseD2Ev(((208 + 4|0)));
  ___resumeException($13|0);
  // unreachable;
 }
 HEAP32[((208 + 76|0))>>2] = 0;
 HEAP32[((208 + 80|0))>>2] = -1;
 $vtable = HEAP32[208>>2]|0;
 $vbase$offset$ptr = (($vtable) + -12|0);
 $vbase$offset = HEAP32[$vbase$offset$ptr>>2]|0;
 $add$ptr$sum = (($vbase$offset) + 24)|0;
 $__rdbuf_$i$i = (208 + ($add$ptr$sum)|0);
 $15 = HEAP32[$__rdbuf_$i$i>>2]|0;
 HEAP32[296>>2] = ((2056 + 12|0));
 HEAP32[((296 + 4|0))>>2] = ((2056 + 32|0));
 __THREW__ = 0;
 invoke_vii(364,(((296 + 4|0))|0),($15|0));
 $16 = __THREW__; __THREW__ = 0;
 $17 = $16&1;
 if ($17) {
  $18 = ___cxa_find_matching_catch()|0;
  $19 = tempRet0;
  __ZNSt3__18ios_baseD2Ev(((296 + 4|0)));
  ___resumeException($18|0);
  // unreachable;
 }
 HEAP32[((296 + 76|0))>>2] = 0;
 HEAP32[((296 + 80|0))>>2] = -1;
 $vtable14 = HEAP32[32>>2]|0;
 $vbase$offset$ptr15 = (($vtable14) + -12|0);
 $vbase$offset16 = HEAP32[$vbase$offset$ptr15>>2]|0;
 $add$ptr17$sum = (($vbase$offset16) + 72)|0;
 $__tie_$i = (32 + ($add$ptr17$sum)|0);
 HEAP32[$__tie_$i>>2] = 120;
 $vtable19 = HEAP32[208>>2]|0;
 $vbase$offset$ptr20 = (($vtable19) + -12|0);
 $vbase$offset21 = HEAP32[$vbase$offset$ptr20>>2]|0;
 $add$ptr22$sum = (($vbase$offset21) + 4)|0;
 $__fmtflags_$i$i = (208 + ($add$ptr22$sum)|0);
 $20 = HEAP32[$__fmtflags_$i$i>>2]|0;
 $or$i$i = $20 | 8192;
 HEAP32[$__fmtflags_$i$i>>2] = $or$i$i;
 $vtable24 = HEAP32[208>>2]|0;
 $vbase$offset$ptr25 = (($vtable24) + -12|0);
 $vbase$offset26 = HEAP32[$vbase$offset$ptr25>>2]|0;
 $add$ptr27$sum = (($vbase$offset26) + 72)|0;
 $__tie_$i12 = (208 + ($add$ptr27$sum)|0);
 HEAP32[$__tie_$i12>>2] = 120;
 __ZNSt3__110__stdinbufIwEC2EP8_IO_FILEP11__mbstate_t(944,$0,((800 + 24|0)));
 HEAP32[384>>2] = ((2016 + 12|0));
 HEAP32[((384 + 8|0))>>2] = ((2016 + 32|0));
 HEAP32[((384 + 4|0))>>2] = 0;
 __THREW__ = 0;
 invoke_vii(364,(((384 + 8|0))|0),(944|0));
 $21 = __THREW__; __THREW__ = 0;
 $22 = $21&1;
 if ($22) {
  $23 = ___cxa_find_matching_catch()|0;
  $24 = tempRet0;
  __ZNSt3__18ios_baseD2Ev(((384 + 8|0)));
  ___resumeException($23|0);
  // unreachable;
 }
 HEAP32[((384 + 80|0))>>2] = 0;
 HEAP32[((384 + 84|0))>>2] = -1;
 __ZNSt3__111__stdoutbufIwEC2EP8_IO_FILEP11__mbstate_t(1000,$5,((800 + 32|0)));
 HEAP32[472>>2] = ((2096 + 12|0));
 HEAP32[((472 + 4|0))>>2] = ((2096 + 32|0));
 __THREW__ = 0;
 invoke_vii(364,(((472 + 4|0))|0),(1000|0));
 $25 = __THREW__; __THREW__ = 0;
 $26 = $25&1;
 if ($26) {
  $27 = ___cxa_find_matching_catch()|0;
  $28 = tempRet0;
  __ZNSt3__18ios_baseD2Ev(((472 + 4|0)));
  ___resumeException($27|0);
  // unreachable;
 }
 HEAP32[((472 + 76|0))>>2] = 0;
 HEAP32[((472 + 80|0))>>2] = -1;
 __ZNSt3__111__stdoutbufIwEC2EP8_IO_FILEP11__mbstate_t(1048,$10,((800 + 40|0)));
 HEAP32[560>>2] = ((2096 + 12|0));
 HEAP32[((560 + 4|0))>>2] = ((2096 + 32|0));
 __THREW__ = 0;
 invoke_vii(364,(((560 + 4|0))|0),(1048|0));
 $29 = __THREW__; __THREW__ = 0;
 $30 = $29&1;
 if ($30) {
  $31 = ___cxa_find_matching_catch()|0;
  $32 = tempRet0;
  __ZNSt3__18ios_baseD2Ev(((560 + 4|0)));
  ___resumeException($31|0);
  // unreachable;
 }
 HEAP32[((560 + 76|0))>>2] = 0;
 HEAP32[((560 + 80|0))>>2] = -1;
 $vtable42 = HEAP32[560>>2]|0;
 $vbase$offset$ptr43 = (($vtable42) + -12|0);
 $vbase$offset44 = HEAP32[$vbase$offset$ptr43>>2]|0;
 $add$ptr45$sum = (($vbase$offset44) + 24)|0;
 $__rdbuf_$i$i17 = (560 + ($add$ptr45$sum)|0);
 $33 = HEAP32[$__rdbuf_$i$i17>>2]|0;
 HEAP32[648>>2] = ((2096 + 12|0));
 HEAP32[((648 + 4|0))>>2] = ((2096 + 32|0));
 __THREW__ = 0;
 invoke_vii(364,(((648 + 4|0))|0),($33|0));
 $34 = __THREW__; __THREW__ = 0;
 $35 = $34&1;
 if ($35) {
  $36 = ___cxa_find_matching_catch()|0;
  $37 = tempRet0;
  __ZNSt3__18ios_baseD2Ev(((648 + 4|0)));
  ___resumeException($36|0);
  // unreachable;
 } else {
  HEAP32[((648 + 76|0))>>2] = 0;
  HEAP32[((648 + 80|0))>>2] = -1;
  $vtable48 = HEAP32[384>>2]|0;
  $vbase$offset$ptr49 = (($vtable48) + -12|0);
  $vbase$offset50 = HEAP32[$vbase$offset$ptr49>>2]|0;
  $add$ptr51$sum = (($vbase$offset50) + 72)|0;
  $__tie_$i20 = (384 + ($add$ptr51$sum)|0);
  HEAP32[$__tie_$i20>>2] = 472;
  $vtable53 = HEAP32[560>>2]|0;
  $vbase$offset$ptr54 = (($vtable53) + -12|0);
  $vbase$offset55 = HEAP32[$vbase$offset$ptr54>>2]|0;
  $add$ptr56$sum = (($vbase$offset55) + 4)|0;
  $__fmtflags_$i$i21 = (560 + ($add$ptr56$sum)|0);
  $38 = HEAP32[$__fmtflags_$i$i21>>2]|0;
  $or$i$i22 = $38 | 8192;
  HEAP32[$__fmtflags_$i$i21>>2] = $or$i$i22;
  $vtable58 = HEAP32[560>>2]|0;
  $vbase$offset$ptr59 = (($vtable58) + -12|0);
  $vbase$offset60 = HEAP32[$vbase$offset$ptr59>>2]|0;
  $add$ptr61$sum = (($vbase$offset60) + 72)|0;
  $__tie_$i23 = (560 + ($add$ptr61$sum)|0);
  HEAP32[$__tie_$i23>>2] = 472;
  STACKTOP = sp;return;
 }
}
function __ZNSt3__18ios_base4InitD2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __THREW__ = 0;
 (invoke_ii(365,(120|0))|0);
 $0 = __THREW__; __THREW__ = 0;
 $1 = $0&1;
 if (!($1)) {
  __THREW__ = 0;
  (invoke_ii(365,(296|0))|0);
  $2 = __THREW__; __THREW__ = 0;
  $3 = $2&1;
  if (!($3)) {
   __THREW__ = 0;
   (invoke_ii(366,(472|0))|0);
   $4 = __THREW__; __THREW__ = 0;
   $5 = $4&1;
   if (!($5)) {
    __THREW__ = 0;
    (invoke_ii(366,(648|0))|0);
    $6 = __THREW__; __THREW__ = 0;
    $7 = $6&1;
    if (!($7)) {
     STACKTOP = sp;return;
    }
   }
  }
 }
 $8 = ___cxa_find_matching_catch(0|0)|0;
 $9 = tempRet0;
 ___clang_call_terminate($8);
 // unreachable;
}
function __ZNSt3__111__stdoutbufIwEC2EP8_IO_FILEP11__mbstate_t($this,$__fp,$__st) {
 $this = $this|0;
 $__fp = $__fp|0;
 $__st = $__st|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $__always_noconv_ = 0, $__cv_ = 0, $__file_ = 0, $__loc_$i = 0, $__st_ = 0, $call$i = 0, $call$i1 = 0, $frombool = 0, $ref$tmp = 0, $vfn$i = 0, $vtable$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $ref$tmp = sp;
 __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEEC2Ev($this);
 HEAP32[$this>>2] = ((1096 + 8|0));
 $__file_ = (($this) + 32|0);
 HEAP32[$__file_>>2] = $__fp;
 $__loc_$i = (($this) + 4|0);
 __ZNSt3__16localeC2ERKS0_($ref$tmp,$__loc_$i);
 __THREW__ = 0;
 $call$i1 = (invoke_iii(359,($ref$tmp|0),(4688|0))|0);
 $0 = __THREW__; __THREW__ = 0;
 $1 = $0&1;
 if ($1) {
  $3 = ___cxa_find_matching_catch()|0;
  $4 = tempRet0;
  __ZNSt3__16localeD2Ev($ref$tmp);
  HEAP32[$this>>2] = ((1912 + 8|0));
  __ZNSt3__16localeD2Ev($__loc_$i);
  ___resumeException($3|0);
  // unreachable;
 } else {
  $__cv_ = (($this) + 36|0);
  __ZNSt3__16localeD2Ev($ref$tmp);
  HEAP32[$__cv_>>2] = $call$i1;
  $__st_ = (($this) + 40|0);
  HEAP32[$__st_>>2] = $__st;
  $__always_noconv_ = (($this) + 44|0);
  $vtable$i = HEAP32[$call$i1>>2]|0;
  $vfn$i = (($vtable$i) + 28|0);
  $2 = HEAP32[$vfn$i>>2]|0;
  $call$i = (FUNCTION_TABLE_ii[$2 & 511]($call$i1)|0);
  $frombool = $call$i&1;
  HEAP8[$__always_noconv_>>0] = $frombool;
  STACKTOP = sp;return;
 }
}
function __ZNSt3__111__stdoutbufIwED1Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEED2Ev($this);
 STACKTOP = sp;return;
}
function __ZNSt3__111__stdoutbufIwED0Ev($this) {
 $this = $this|0;
 var $__loc_$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = ((1912 + 8|0));
 $__loc_$i = (($this) + 4|0);
 __ZNSt3__16localeD2Ev($__loc_$i);
 __ZdlPv($this);
 STACKTOP = sp;return;
}
function __ZNSt3__111__stdoutbufIwE5imbueERKNS_6localeE($this,$__loc) {
 $this = $this|0;
 $__loc = $__loc|0;
 var $0 = 0, $1 = 0, $__always_noconv_ = 0, $__cv_ = 0, $call$i = 0, $call$i1 = 0, $frombool = 0, $vfn = 0, $vfn$i = 0, $vtable = 0, $vtable$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $vtable = HEAP32[$this>>2]|0;
 $vfn = (($vtable) + 24|0);
 $0 = HEAP32[$vfn>>2]|0;
 (FUNCTION_TABLE_ii[$0 & 511]($this)|0);
 $call$i = (__ZNKSt3__16locale9use_facetERNS0_2idE($__loc,4688)|0);
 $__cv_ = (($this) + 36|0);
 HEAP32[$__cv_>>2] = $call$i;
 $vtable$i = HEAP32[$call$i>>2]|0;
 $vfn$i = (($vtable$i) + 28|0);
 $1 = HEAP32[$vfn$i>>2]|0;
 $call$i1 = (FUNCTION_TABLE_ii[$1 & 511]($call$i)|0);
 $__always_noconv_ = (($this) + 44|0);
 $frombool = $call$i1&1;
 HEAP8[$__always_noconv_>>0] = $frombool;
 STACKTOP = sp;return;
}
function __ZNSt3__111__stdoutbufIwE4syncEv($this) {
 $this = $this|0;
 var $$ = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $__cv_ = 0, $__extbe = 0, $__extbuf = 0, $__file_ = 0, $__st_ = 0, $add$ptr = 0, $call$i = 0, $call11 = 0, $call5 = 0, $cmp = 0, $not$tobool = 0, $retval$0 = 0, $sub$ptr$lhs$cast = 0;
 var $sub$ptr$rhs$cast = 0, $sub$ptr$sub = 0, $vfn$i = 0, $vtable$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__extbuf = sp + 8|0;
 $__extbe = sp;
 $__cv_ = (($this) + 36|0);
 $__st_ = (($this) + 40|0);
 $add$ptr = (($__extbuf) + 8|0);
 $sub$ptr$rhs$cast = $__extbuf;
 $__file_ = (($this) + 32|0);
 while(1) {
  $0 = HEAP32[$__cv_>>2]|0;
  $1 = HEAP32[$__st_>>2]|0;
  $vtable$i = HEAP32[$0>>2]|0;
  $vfn$i = (($vtable$i) + 20|0);
  $2 = HEAP32[$vfn$i>>2]|0;
  $call$i = (FUNCTION_TABLE_iiiiii[$2 & 511]($0,$1,$__extbuf,$add$ptr,$__extbe)|0);
  $3 = HEAP32[$__extbe>>2]|0;
  $sub$ptr$lhs$cast = $3;
  $sub$ptr$sub = (($sub$ptr$lhs$cast) - ($sub$ptr$rhs$cast))|0;
  $4 = HEAP32[$__file_>>2]|0;
  $call5 = (_fwrite(($__extbuf|0),1,($sub$ptr$sub|0),($4|0))|0);
  $cmp = ($call5|0)==($sub$ptr$sub|0);
  if (!($cmp)) {
   $retval$0 = -1;
   label = 5;
   break;
  }
  if ((($call$i|0) == 2)) {
   $retval$0 = -1;
   label = 5;
   break;
  } else if (!((($call$i|0) == 1))) {
   label = 4;
   break;
  }
 }
 if ((label|0) == 4) {
  $5 = HEAP32[$__file_>>2]|0;
  $call11 = (_fflush(($5|0))|0);
  $not$tobool = ($call11|0)!=(0);
  $$ = $not$tobool << 31 >> 31;
  $retval$0 = $$;
  STACKTOP = sp;return ($retval$0|0);
 }
 else if ((label|0) == 5) {
  STACKTOP = sp;return ($retval$0|0);
 }
 return 0|0;
}
function __ZNSt3__111__stdoutbufIwE6xsputnEPKwi($this,$__s,$__n) {
 $this = $this|0;
 $__s = $__s|0;
 $__n = $__n|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $__always_noconv_ = 0, $__file_ = 0, $__i$08 = 0, $__s$addr$07 = 0, $call = 0, $call3 = 0, $cmp = 0, $cmp5 = 0, $cmp6 = 0, $inc = 0, $incdec$ptr = 0, $retval$0 = 0, $tobool = 0, $vfn = 0, $vtable = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $__always_noconv_ = (($this) + 44|0);
 $0 = HEAP8[$__always_noconv_>>0]|0;
 $tobool = ($0<<24>>24)==(0);
 if (!($tobool)) {
  $__file_ = (($this) + 32|0);
  $1 = HEAP32[$__file_>>2]|0;
  $call = (_fwrite(($__s|0),4,($__n|0),($1|0))|0);
  $retval$0 = $call;
  STACKTOP = sp;return ($retval$0|0);
 }
 $cmp6 = ($__n|0)>(0);
 if ($cmp6) {
  $__i$08 = 0;$__s$addr$07 = $__s;
 } else {
  $retval$0 = 0;
  STACKTOP = sp;return ($retval$0|0);
 }
 while(1) {
  $vtable = HEAP32[$this>>2]|0;
  $vfn = (($vtable) + 52|0);
  $2 = HEAP32[$vfn>>2]|0;
  $3 = HEAP32[$__s$addr$07>>2]|0;
  $call3 = (FUNCTION_TABLE_iii[$2 & 511]($this,$3)|0);
  $cmp5 = ($call3|0)==(-1);
  if ($cmp5) {
   $retval$0 = $__i$08;
   label = 6;
   break;
  }
  $inc = (($__i$08) + 1)|0;
  $incdec$ptr = (($__s$addr$07) + 4|0);
  $cmp = ($inc|0)<($__n|0);
  if ($cmp) {
   $__i$08 = $inc;$__s$addr$07 = $incdec$ptr;
  } else {
   $retval$0 = $inc;
   label = 6;
   break;
  }
 }
 if ((label|0) == 6) {
  STACKTOP = sp;return ($retval$0|0);
 }
 return 0|0;
}
function __ZNSt3__111__stdoutbufIwE8overflowEj($this,$__c) {
 $this = $this|0;
 $__c = $__c|0;
 var $$__c$i = 0, $$pbase$0 = 0, $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__1buf = 0, $__always_noconv_ = 0, $__cv_ = 0, $__e = 0, $__extbe = 0, $__extbuf = 0, $__file_ = 0;
 var $__file_30 = 0, $__st_ = 0, $add$ptr = 0, $add$ptr10 = 0, $call$i = 0, $call19 = 0, $call31 = 0, $call5 = 0, $cmp = 0, $cmp$i = 0, $cmp12 = 0, $cmp16 = 0, $cmp20 = 0, $cmp26 = 0, $cmp32 = 0, $pbase$0 = 0, $retval$0 = 0, $sub$ptr$lhs$cast = 0, $sub$ptr$rhs$cast = 0, $sub$ptr$sub = 0;
 var $tobool = 0, $vfn$i = 0, $vtable$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__extbuf = sp + 16|0;
 $__1buf = sp + 8|0;
 $__extbe = sp + 4|0;
 $__e = sp;
 $cmp$i = ($__c|0)==(-1);
 L1: do {
  if (!($cmp$i)) {
   HEAP32[$__1buf>>2] = $__c;
   $__always_noconv_ = (($this) + 44|0);
   $0 = HEAP8[$__always_noconv_>>0]|0;
   $tobool = ($0<<24>>24)==(0);
   if (!($tobool)) {
    $__file_ = (($this) + 32|0);
    $1 = HEAP32[$__file_>>2]|0;
    $call5 = (_fwrite(($__1buf|0),4,1,($1|0))|0);
    $cmp = ($call5|0)==(1);
    if ($cmp) {
     break;
    } else {
     $retval$0 = -1;
    }
    STACKTOP = sp;return ($retval$0|0);
   }
   HEAP32[$__extbe>>2] = $__extbuf;
   $add$ptr = (($__1buf) + 4|0);
   $__cv_ = (($this) + 36|0);
   $__st_ = (($this) + 40|0);
   $add$ptr10 = (($__extbuf) + 8|0);
   $sub$ptr$rhs$cast = $__extbuf;
   $__file_30 = (($this) + 32|0);
   $pbase$0 = $__1buf;
   while(1) {
    $2 = HEAP32[$__cv_>>2]|0;
    $3 = HEAP32[$__st_>>2]|0;
    $vtable$i = HEAP32[$2>>2]|0;
    $vfn$i = (($vtable$i) + 12|0);
    $4 = HEAP32[$vfn$i>>2]|0;
    $call$i = (FUNCTION_TABLE_iiiiiiiii[$4 & 511]($2,$3,$pbase$0,$add$ptr,$__e,$__extbuf,$add$ptr10,$__extbe)|0);
    $5 = HEAP32[$__e>>2]|0;
    $cmp12 = ($5|0)==($pbase$0|0);
    if ($cmp12) {
     $retval$0 = -1;
     label = 12;
     break;
    }
    $cmp16 = ($call$i|0)==(3);
    if ($cmp16) {
     label = 7;
     break;
    }
    $cmp26 = ($call$i|0)==(1);
    $7 = ($call$i>>>0)<(2);
    if (!($7)) {
     $retval$0 = -1;
     label = 12;
     break;
    }
    $8 = HEAP32[$__extbe>>2]|0;
    $sub$ptr$lhs$cast = $8;
    $sub$ptr$sub = (($sub$ptr$lhs$cast) - ($sub$ptr$rhs$cast))|0;
    $9 = HEAP32[$__file_30>>2]|0;
    $call31 = (_fwrite(($__extbuf|0),1,($sub$ptr$sub|0),($9|0))|0);
    $cmp32 = ($call31|0)==($sub$ptr$sub|0);
    if (!($cmp32)) {
     $retval$0 = -1;
     label = 12;
     break;
    }
    $10 = HEAP32[$__e>>2]|0;
    $$pbase$0 = $cmp26 ? $10 : $pbase$0;
    if ($cmp26) {
     $pbase$0 = $$pbase$0;
    } else {
     break L1;
    }
   }
   if ((label|0) == 7) {
    $6 = HEAP32[$__file_30>>2]|0;
    $call19 = (_fwrite(($pbase$0|0),1,1,($6|0))|0);
    $cmp20 = ($call19|0)==(1);
    if ($cmp20) {
     break;
    } else {
     $retval$0 = -1;
    }
    STACKTOP = sp;return ($retval$0|0);
   }
   else if ((label|0) == 12) {
    STACKTOP = sp;return ($retval$0|0);
   }
  }
 } while(0);
 $$__c$i = $cmp$i ? 0 : $__c;
 $retval$0 = $$__c$i;
 STACKTOP = sp;return ($retval$0|0);
}
function __ZNSt3__110__stdinbufIwEC2EP8_IO_FILEP11__mbstate_t($this,$__fp,$__st) {
 $this = $this|0;
 $__fp = $__fp|0;
 $__st = $__st|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $__file_ = 0, $__last_consumed_ = 0, $__last_consumed_is_next_ = 0, $__loc_$i1 = 0, $__st_ = 0, $ref$tmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $ref$tmp = sp;
 __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEEC2Ev($this);
 HEAP32[$this>>2] = ((1208 + 8|0));
 $__file_ = (($this) + 32|0);
 HEAP32[$__file_>>2] = $__fp;
 $__st_ = (($this) + 40|0);
 HEAP32[$__st_>>2] = $__st;
 $__last_consumed_ = (($this) + 48|0);
 HEAP32[$__last_consumed_>>2] = -1;
 $__last_consumed_is_next_ = (($this) + 52|0);
 HEAP8[$__last_consumed_is_next_>>0] = 0;
 $__loc_$i1 = (($this) + 4|0);
 __ZNSt3__16localeC2ERKS0_($ref$tmp,$__loc_$i1);
 __THREW__ = 0;
 invoke_vii(17,($this|0),($ref$tmp|0));
 $0 = __THREW__; __THREW__ = 0;
 $1 = $0&1;
 if ($1) {
  $2 = ___cxa_find_matching_catch()|0;
  $3 = tempRet0;
  __ZNSt3__16localeD2Ev($ref$tmp);
  HEAP32[$this>>2] = ((1912 + 8|0));
  __ZNSt3__16localeD2Ev($__loc_$i1);
  ___resumeException($2|0);
  // unreachable;
 } else {
  __ZNSt3__16localeD2Ev($ref$tmp);
  STACKTOP = sp;return;
 }
}
function __ZNSt3__110__stdinbufIwED1Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEED2Ev($this);
 STACKTOP = sp;return;
}
function __ZNSt3__110__stdinbufIwED0Ev($this) {
 $this = $this|0;
 var $__loc_$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = ((1912 + 8|0));
 $__loc_$i = (($this) + 4|0);
 __ZNSt3__16localeD2Ev($__loc_$i);
 __ZdlPv($this);
 STACKTOP = sp;return;
}
function __ZNSt3__110__stdinbufIwE5imbueERKNS_6localeE($this,$__loc) {
 $this = $this|0;
 $__loc = $__loc|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $__always_noconv_ = 0, $__cv_ = 0, $__encoding_ = 0, $call$i = 0, $call$i1 = 0, $call$i4 = 0, $cmp = 0, $frombool = 0, $vfn$i = 0, $vfn$i3 = 0, $vtable$i = 0, $vtable$i2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $call$i = (__ZNKSt3__16locale9use_facetERNS0_2idE($__loc,4688)|0);
 $__cv_ = (($this) + 36|0);
 HEAP32[$__cv_>>2] = $call$i;
 $vtable$i = HEAP32[$call$i>>2]|0;
 $vfn$i = (($vtable$i) + 24|0);
 $0 = HEAP32[$vfn$i>>2]|0;
 $call$i1 = (FUNCTION_TABLE_ii[$0 & 511]($call$i)|0);
 $__encoding_ = (($this) + 44|0);
 HEAP32[$__encoding_>>2] = $call$i1;
 $1 = HEAP32[$__cv_>>2]|0;
 $vtable$i2 = HEAP32[$1>>2]|0;
 $vfn$i3 = (($vtable$i2) + 28|0);
 $2 = HEAP32[$vfn$i3>>2]|0;
 $call$i4 = (FUNCTION_TABLE_ii[$2 & 511]($1)|0);
 $__always_noconv_ = (($this) + 53|0);
 $frombool = $call$i4&1;
 HEAP8[$__always_noconv_>>0] = $frombool;
 $3 = HEAP32[$__encoding_>>2]|0;
 $cmp = ($3|0)>(8);
 if (!($cmp)) {
  STACKTOP = sp;return;
 }
 __ZNSt3__121__throw_runtime_errorEPKc(1312);
 STACKTOP = sp;return;
}
function __ZNSt3__110__stdinbufIwE9underflowEv($this) {
 $this = $this|0;
 var $call = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $call = (__ZNSt3__110__stdinbufIwE9__getcharEb($this,0)|0);
 STACKTOP = sp;return ($call|0);
}
function __ZNSt3__110__stdinbufIwE5uflowEv($this) {
 $this = $this|0;
 var $call = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $call = (__ZNSt3__110__stdinbufIwE9__getcharEb($this,1)|0);
 STACKTOP = sp;return ($call|0);
}
function __ZNSt3__110__stdinbufIwE9pbackfailEj($this,$__c) {
 $this = $this|0;
 $__c = $__c|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__ci = 0, $__cv_ = 0, $__enxt = 0, $__extbuf = 0, $__file_ = 0, $__inxt = 0, $__last_consumed_ = 0, $__last_consumed_12 = 0, $__last_consumed_is_next_ = 0, $__st_ = 0;
 var $add$ptr = 0, $add$ptr15 = 0, $add$ptr19 = 0, $call$i = 0, $call24 = 0, $cmp = 0, $cmp$i = 0, $cmp$i4 = 0, $cmp25 = 0, $conv = 0, $conv23 = 0, $frombool = 0, $incdec$ptr = 0, $retval$0 = 0, $tobool = 0, $vfn$i = 0, $vtable$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__extbuf = sp + 16|0;
 $__enxt = sp + 8|0;
 $__ci = sp + 4|0;
 $__inxt = sp;
 $cmp$i = ($__c|0)==(-1);
 $__last_consumed_is_next_ = (($this) + 52|0);
 $0 = HEAP8[$__last_consumed_is_next_>>0]|0;
 $tobool = ($0<<24>>24)!=(0);
 if ($cmp$i) {
  if ($tobool) {
   $retval$0 = -1;
   STACKTOP = sp;return ($retval$0|0);
  }
  $__last_consumed_ = (($this) + 48|0);
  $1 = HEAP32[$__last_consumed_>>2]|0;
  $cmp$i4 = ($1|0)!=(-1);
  $frombool = $cmp$i4&1;
  HEAP8[$__last_consumed_is_next_>>0] = $frombool;
  $retval$0 = $1;
  STACKTOP = sp;return ($retval$0|0);
 }
 $__last_consumed_12 = (($this) + 48|0);
 L8: do {
  if ($tobool) {
   $2 = HEAP32[$__last_consumed_12>>2]|0;
   HEAP32[$__ci>>2] = $2;
   $__cv_ = (($this) + 36|0);
   $3 = HEAP32[$__cv_>>2]|0;
   $__st_ = (($this) + 40|0);
   $4 = HEAP32[$__st_>>2]|0;
   $add$ptr = (($__ci) + 4|0);
   $add$ptr15 = (($__extbuf) + 8|0);
   $vtable$i = HEAP32[$3>>2]|0;
   $vfn$i = (($vtable$i) + 12|0);
   $5 = HEAP32[$vfn$i>>2]|0;
   $call$i = (FUNCTION_TABLE_iiiiiiiii[$5 & 511]($3,$4,$__ci,$add$ptr,$__inxt,$__extbuf,$add$ptr15,$__enxt)|0);
   if ((($call$i|0) == 3)) {
    $6 = HEAP32[$__last_consumed_12>>2]|0;
    $conv = $6&255;
    HEAP8[$__extbuf>>0] = $conv;
    $add$ptr19 = (($__extbuf) + 1|0);
    HEAP32[$__enxt>>2] = $add$ptr19;
   } else if ((($call$i|0) == 1) | (($call$i|0) == 2)) {
    $retval$0 = -1;
    STACKTOP = sp;return ($retval$0|0);
   }
   $__file_ = (($this) + 32|0);
   while(1) {
    $7 = HEAP32[$__enxt>>2]|0;
    $cmp = ($7>>>0)>($__extbuf>>>0);
    if (!($cmp)) {
     break L8;
    }
    $incdec$ptr = (($7) + -1|0);
    HEAP32[$__enxt>>2] = $incdec$ptr;
    $8 = HEAP8[$incdec$ptr>>0]|0;
    $conv23 = $8 << 24 >> 24;
    $9 = HEAP32[$__file_>>2]|0;
    $call24 = (_ungetc(($conv23|0),($9|0))|0);
    $cmp25 = ($call24|0)==(-1);
    if ($cmp25) {
     $retval$0 = -1;
     break;
    }
   }
   STACKTOP = sp;return ($retval$0|0);
  }
 } while(0);
 HEAP32[$__last_consumed_12>>2] = $__c;
 HEAP8[$__last_consumed_is_next_>>0] = 1;
 $retval$0 = $__c;
 STACKTOP = sp;return ($retval$0|0);
}
function __ZNSt3__110__stdinbufIwE9__getcharEb($this,$__consume) {
 $this = $this|0;
 $__consume = $__consume|0;
 var $$pre = 0, $$sroa$speculated = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__1buf = 0, $__always_noconv_ = 0, $__cv_ = 0, $__encoding_ = 0, $__enxt = 0, $__extbuf = 0, $__file_ = 0, $__file_27 = 0, $__file_52 = 0, $__i$022 = 0, $__i45$0 = 0, $__inxt = 0, $__last_consumed_ = 0;
 var $__last_consumed_61 = 0, $__last_consumed_is_next_ = 0, $__nread$0 = 0, $__nread$2 = 0, $__st_ = 0, $add$ptr = 0, $add$ptr19 = 0, $arrayidx = 0, $arrayidx49 = 0, $call$i = 0, $call28 = 0, $call53 = 0, $call8 = 0, $cmp = 0, $cmp$i$i$i = 0, $cmp21 = 0, $cmp22 = 0, $cmp29 = 0, $cmp47 = 0, $cmp54 = 0;
 var $cmp9 = 0, $conv = 0, $conv16 = 0, $conv33 = 0, $conv40 = 0, $conv50 = 0, $dec = 0, $inc = 0, $inc35 = 0, $retval$0 = 0, $tobool = 0, $tobool13 = 0, $vfn$i = 0, $vtable$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__extbuf = sp + 16|0;
 $__1buf = sp + 8|0;
 $__enxt = sp + 4|0;
 $__inxt = sp;
 $__last_consumed_is_next_ = (($this) + 52|0);
 $0 = HEAP8[$__last_consumed_is_next_>>0]|0;
 $tobool = ($0<<24>>24)==(0);
 if (!($tobool)) {
  $__last_consumed_ = (($this) + 48|0);
  $1 = HEAP32[$__last_consumed_>>2]|0;
  if (!($__consume)) {
   $retval$0 = $1;
   STACKTOP = sp;return ($retval$0|0);
  }
  HEAP32[$__last_consumed_>>2] = -1;
  HEAP8[$__last_consumed_is_next_>>0] = 0;
  $retval$0 = $1;
  STACKTOP = sp;return ($retval$0|0);
 }
 $__encoding_ = (($this) + 44|0);
 $2 = HEAP32[$__encoding_>>2]|0;
 $cmp$i$i$i = ($2|0)>(1);
 $$sroa$speculated = $cmp$i$i$i ? $2 : 1;
 $cmp21 = ($$sroa$speculated|0)>(0);
 L8: do {
  if ($cmp21) {
   $__file_ = (($this) + 32|0);
   $__i$022 = 0;
   while(1) {
    $3 = HEAP32[$__file_>>2]|0;
    $call8 = (_getc(($3|0))|0);
    $cmp9 = ($call8|0)==(-1);
    if ($cmp9) {
     $retval$0 = -1;
     break;
    }
    $conv = $call8&255;
    $arrayidx = (($__extbuf) + ($__i$022)|0);
    HEAP8[$arrayidx>>0] = $conv;
    $inc = (($__i$022) + 1)|0;
    $cmp = ($inc|0)<($$sroa$speculated|0);
    if ($cmp) {
     $__i$022 = $inc;
    } else {
     break L8;
    }
   }
   STACKTOP = sp;return ($retval$0|0);
  }
 } while(0);
 $__always_noconv_ = (($this) + 53|0);
 $4 = HEAP8[$__always_noconv_>>0]|0;
 $tobool13 = ($4<<24>>24)==(0);
 L15: do {
  if ($tobool13) {
   $__st_ = (($this) + 40|0);
   $__cv_ = (($this) + 36|0);
   $add$ptr19 = (($__1buf) + 4|0);
   $__file_27 = (($this) + 32|0);
   $__nread$0 = $$sroa$speculated;
   while(1) {
    $6 = HEAP32[$__st_>>2]|0;
    $7 = $6;
    $8 = $7;
    $9 = HEAP32[$8>>2]|0;
    $10 = (($7) + 4)|0;
    $11 = $10;
    $12 = HEAP32[$11>>2]|0;
    $13 = HEAP32[$__cv_>>2]|0;
    $add$ptr = (($__extbuf) + ($__nread$0)|0);
    $vtable$i = HEAP32[$13>>2]|0;
    $vfn$i = (($vtable$i) + 16|0);
    $14 = HEAP32[$vfn$i>>2]|0;
    $call$i = (FUNCTION_TABLE_iiiiiiiii[$14 & 511]($13,$6,$__extbuf,$add$ptr,$__enxt,$__1buf,$add$ptr19,$__inxt)|0);
    if ((($call$i|0) == 3)) {
     label = 14;
     break;
    } else if ((($call$i|0) == 2)) {
     $retval$0 = -1;
     label = 22;
     break;
    } else if (!((($call$i|0) == 1))) {
     $__nread$2 = $__nread$0;
     break L15;
    }
    $15 = HEAP32[$__st_>>2]|0;
    $16 = $15;
    $17 = $16;
    HEAP32[$17>>2] = $9;
    $18 = (($16) + 4)|0;
    $19 = $18;
    HEAP32[$19>>2] = $12;
    $cmp22 = ($__nread$0|0)==(8);
    if ($cmp22) {
     $retval$0 = -1;
     label = 22;
     break;
    }
    $20 = HEAP32[$__file_27>>2]|0;
    $call28 = (_getc(($20|0))|0);
    $cmp29 = ($call28|0)==(-1);
    if ($cmp29) {
     $retval$0 = -1;
     label = 22;
     break;
    }
    $conv33 = $call28&255;
    HEAP8[$add$ptr>>0] = $conv33;
    $inc35 = (($__nread$0) + 1)|0;
    $__nread$0 = $inc35;
   }
   if ((label|0) == 14) {
    $21 = HEAP8[$__extbuf>>0]|0;
    $conv40 = $21 << 24 >> 24;
    HEAP32[$__1buf>>2] = $conv40;
    $__nread$2 = $__nread$0;
    break;
   }
   else if ((label|0) == 22) {
    STACKTOP = sp;return ($retval$0|0);
   }
  } else {
   $5 = HEAP8[$__extbuf>>0]|0;
   $conv16 = $5 << 24 >> 24;
   HEAP32[$__1buf>>2] = $conv16;
   $__nread$2 = $$sroa$speculated;
  }
 } while(0);
 if ($__consume) {
  $24 = HEAP32[$__1buf>>2]|0;
  $__last_consumed_61 = (($this) + 48|0);
  HEAP32[$__last_consumed_61>>2] = $24;
  $retval$0 = $24;
  STACKTOP = sp;return ($retval$0|0);
 }
 $__file_52 = (($this) + 32|0);
 $__i45$0 = $__nread$2;
 while(1) {
  $cmp47 = ($__i45$0|0)>(0);
  if (!($cmp47)) {
   break;
  }
  $dec = (($__i45$0) + -1)|0;
  $arrayidx49 = (($__extbuf) + ($dec)|0);
  $22 = HEAP8[$arrayidx49>>0]|0;
  $conv50 = $22 << 24 >> 24;
  $23 = HEAP32[$__file_52>>2]|0;
  $call53 = (_ungetc(($conv50|0),($23|0))|0);
  $cmp54 = ($call53|0)==(-1);
  if ($cmp54) {
   $retval$0 = -1;
   label = 22;
   break;
  } else {
   $__i45$0 = $dec;
  }
 }
 if ((label|0) == 22) {
  STACKTOP = sp;return ($retval$0|0);
 }
 $$pre = HEAP32[$__1buf>>2]|0;
 $retval$0 = $$pre;
 STACKTOP = sp;return ($retval$0|0);
}
function __ZNSt3__111__stdoutbufIcEC2EP8_IO_FILEP11__mbstate_t($this,$__fp,$__st) {
 $this = $this|0;
 $__fp = $__fp|0;
 $__st = $__st|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $__always_noconv_ = 0, $__cv_ = 0, $__file_ = 0, $__loc_$i = 0, $__st_ = 0, $call$i = 0, $call$i1 = 0, $frombool = 0, $ref$tmp = 0, $vfn$i = 0, $vtable$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $ref$tmp = sp;
 __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEEC2Ev($this);
 HEAP32[$this>>2] = ((1352 + 8|0));
 $__file_ = (($this) + 32|0);
 HEAP32[$__file_>>2] = $__fp;
 $__loc_$i = (($this) + 4|0);
 __ZNSt3__16localeC2ERKS0_($ref$tmp,$__loc_$i);
 __THREW__ = 0;
 $call$i1 = (invoke_iii(359,($ref$tmp|0),(4680|0))|0);
 $0 = __THREW__; __THREW__ = 0;
 $1 = $0&1;
 if ($1) {
  $3 = ___cxa_find_matching_catch()|0;
  $4 = tempRet0;
  __ZNSt3__16localeD2Ev($ref$tmp);
  HEAP32[$this>>2] = ((1848 + 8|0));
  __ZNSt3__16localeD2Ev($__loc_$i);
  ___resumeException($3|0);
  // unreachable;
 } else {
  $__cv_ = (($this) + 36|0);
  __ZNSt3__16localeD2Ev($ref$tmp);
  HEAP32[$__cv_>>2] = $call$i1;
  $__st_ = (($this) + 40|0);
  HEAP32[$__st_>>2] = $__st;
  $__always_noconv_ = (($this) + 44|0);
  $vtable$i = HEAP32[$call$i1>>2]|0;
  $vfn$i = (($vtable$i) + 28|0);
  $2 = HEAP32[$vfn$i>>2]|0;
  $call$i = (FUNCTION_TABLE_ii[$2 & 511]($call$i1)|0);
  $frombool = $call$i&1;
  HEAP8[$__always_noconv_>>0] = $frombool;
  STACKTOP = sp;return;
 }
}
function __ZNSt3__111__stdoutbufIcED1Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEED2Ev($this);
 STACKTOP = sp;return;
}
function __ZNSt3__111__stdoutbufIcED0Ev($this) {
 $this = $this|0;
 var $__loc_$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = ((1848 + 8|0));
 $__loc_$i = (($this) + 4|0);
 __ZNSt3__16localeD2Ev($__loc_$i);
 __ZdlPv($this);
 STACKTOP = sp;return;
}
function __ZNSt3__111__stdoutbufIcE5imbueERKNS_6localeE($this,$__loc) {
 $this = $this|0;
 $__loc = $__loc|0;
 var $0 = 0, $1 = 0, $__always_noconv_ = 0, $__cv_ = 0, $call$i = 0, $call$i1 = 0, $frombool = 0, $vfn = 0, $vfn$i = 0, $vtable = 0, $vtable$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $vtable = HEAP32[$this>>2]|0;
 $vfn = (($vtable) + 24|0);
 $0 = HEAP32[$vfn>>2]|0;
 (FUNCTION_TABLE_ii[$0 & 511]($this)|0);
 $call$i = (__ZNKSt3__16locale9use_facetERNS0_2idE($__loc,4680)|0);
 $__cv_ = (($this) + 36|0);
 HEAP32[$__cv_>>2] = $call$i;
 $vtable$i = HEAP32[$call$i>>2]|0;
 $vfn$i = (($vtable$i) + 28|0);
 $1 = HEAP32[$vfn$i>>2]|0;
 $call$i1 = (FUNCTION_TABLE_ii[$1 & 511]($call$i)|0);
 $__always_noconv_ = (($this) + 44|0);
 $frombool = $call$i1&1;
 HEAP8[$__always_noconv_>>0] = $frombool;
 STACKTOP = sp;return;
}
function __ZNSt3__111__stdoutbufIcE4syncEv($this) {
 $this = $this|0;
 var $$ = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $__cv_ = 0, $__extbe = 0, $__extbuf = 0, $__file_ = 0, $__st_ = 0, $add$ptr = 0, $call$i = 0, $call11 = 0, $call5 = 0, $cmp = 0, $not$tobool = 0, $retval$0 = 0, $sub$ptr$lhs$cast = 0;
 var $sub$ptr$rhs$cast = 0, $sub$ptr$sub = 0, $vfn$i = 0, $vtable$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__extbuf = sp + 8|0;
 $__extbe = sp;
 $__cv_ = (($this) + 36|0);
 $__st_ = (($this) + 40|0);
 $add$ptr = (($__extbuf) + 8|0);
 $sub$ptr$rhs$cast = $__extbuf;
 $__file_ = (($this) + 32|0);
 while(1) {
  $0 = HEAP32[$__cv_>>2]|0;
  $1 = HEAP32[$__st_>>2]|0;
  $vtable$i = HEAP32[$0>>2]|0;
  $vfn$i = (($vtable$i) + 20|0);
  $2 = HEAP32[$vfn$i>>2]|0;
  $call$i = (FUNCTION_TABLE_iiiiii[$2 & 511]($0,$1,$__extbuf,$add$ptr,$__extbe)|0);
  $3 = HEAP32[$__extbe>>2]|0;
  $sub$ptr$lhs$cast = $3;
  $sub$ptr$sub = (($sub$ptr$lhs$cast) - ($sub$ptr$rhs$cast))|0;
  $4 = HEAP32[$__file_>>2]|0;
  $call5 = (_fwrite(($__extbuf|0),1,($sub$ptr$sub|0),($4|0))|0);
  $cmp = ($call5|0)==($sub$ptr$sub|0);
  if (!($cmp)) {
   $retval$0 = -1;
   label = 5;
   break;
  }
  if ((($call$i|0) == 2)) {
   $retval$0 = -1;
   label = 5;
   break;
  } else if (!((($call$i|0) == 1))) {
   label = 4;
   break;
  }
 }
 if ((label|0) == 4) {
  $5 = HEAP32[$__file_>>2]|0;
  $call11 = (_fflush(($5|0))|0);
  $not$tobool = ($call11|0)!=(0);
  $$ = $not$tobool << 31 >> 31;
  $retval$0 = $$;
  STACKTOP = sp;return ($retval$0|0);
 }
 else if ((label|0) == 5) {
  STACKTOP = sp;return ($retval$0|0);
 }
 return 0|0;
}
function __ZNSt3__111__stdoutbufIcE6xsputnEPKci($this,$__s,$__n) {
 $this = $this|0;
 $__s = $__s|0;
 $__n = $__n|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $__always_noconv_ = 0, $__file_ = 0, $__i$08 = 0, $__s$addr$07 = 0, $call = 0, $call3 = 0, $cmp = 0, $cmp5 = 0, $cmp6 = 0, $conv$i = 0, $inc = 0, $incdec$ptr = 0, $retval$0 = 0, $tobool = 0, $vfn = 0, $vtable = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $__always_noconv_ = (($this) + 44|0);
 $0 = HEAP8[$__always_noconv_>>0]|0;
 $tobool = ($0<<24>>24)==(0);
 if (!($tobool)) {
  $__file_ = (($this) + 32|0);
  $1 = HEAP32[$__file_>>2]|0;
  $call = (_fwrite(($__s|0),1,($__n|0),($1|0))|0);
  $retval$0 = $call;
  STACKTOP = sp;return ($retval$0|0);
 }
 $cmp6 = ($__n|0)>(0);
 if ($cmp6) {
  $__i$08 = 0;$__s$addr$07 = $__s;
 } else {
  $retval$0 = 0;
  STACKTOP = sp;return ($retval$0|0);
 }
 while(1) {
  $vtable = HEAP32[$this>>2]|0;
  $vfn = (($vtable) + 52|0);
  $2 = HEAP32[$vfn>>2]|0;
  $3 = HEAP8[$__s$addr$07>>0]|0;
  $conv$i = $3&255;
  $call3 = (FUNCTION_TABLE_iii[$2 & 511]($this,$conv$i)|0);
  $cmp5 = ($call3|0)==(-1);
  if ($cmp5) {
   $retval$0 = $__i$08;
   label = 6;
   break;
  }
  $inc = (($__i$08) + 1)|0;
  $incdec$ptr = (($__s$addr$07) + 1|0);
  $cmp = ($inc|0)<($__n|0);
  if ($cmp) {
   $__i$08 = $inc;$__s$addr$07 = $incdec$ptr;
  } else {
   $retval$0 = $inc;
   label = 6;
   break;
  }
 }
 if ((label|0) == 6) {
  STACKTOP = sp;return ($retval$0|0);
 }
 return 0|0;
}
function __ZNSt3__111__stdoutbufIcE8overflowEi($this,$__c) {
 $this = $this|0;
 $__c = $__c|0;
 var $$__c$i = 0, $$pbase$0 = 0, $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__1buf = 0, $__always_noconv_ = 0, $__cv_ = 0, $__e = 0, $__extbe = 0, $__extbuf = 0, $__file_ = 0;
 var $__file_30 = 0, $__st_ = 0, $add$ptr = 0, $add$ptr10 = 0, $call$i = 0, $call19 = 0, $call31 = 0, $call5 = 0, $cmp = 0, $cmp$i = 0, $cmp12 = 0, $cmp16 = 0, $cmp20 = 0, $cmp26 = 0, $cmp32 = 0, $conv$i = 0, $pbase$0 = 0, $retval$0 = 0, $sub$ptr$lhs$cast = 0, $sub$ptr$rhs$cast = 0;
 var $sub$ptr$sub = 0, $tobool = 0, $vfn$i = 0, $vtable$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__extbuf = sp + 16|0;
 $__1buf = sp + 8|0;
 $__extbe = sp + 4|0;
 $__e = sp;
 $cmp$i = ($__c|0)==(-1);
 L1: do {
  if (!($cmp$i)) {
   $conv$i = $__c&255;
   HEAP8[$__1buf>>0] = $conv$i;
   $__always_noconv_ = (($this) + 44|0);
   $0 = HEAP8[$__always_noconv_>>0]|0;
   $tobool = ($0<<24>>24)==(0);
   if (!($tobool)) {
    $__file_ = (($this) + 32|0);
    $1 = HEAP32[$__file_>>2]|0;
    $call5 = (_fwrite(($__1buf|0),1,1,($1|0))|0);
    $cmp = ($call5|0)==(1);
    if ($cmp) {
     break;
    } else {
     $retval$0 = -1;
    }
    STACKTOP = sp;return ($retval$0|0);
   }
   HEAP32[$__extbe>>2] = $__extbuf;
   $add$ptr = (($__1buf) + 1|0);
   $__cv_ = (($this) + 36|0);
   $__st_ = (($this) + 40|0);
   $add$ptr10 = (($__extbuf) + 8|0);
   $sub$ptr$rhs$cast = $__extbuf;
   $__file_30 = (($this) + 32|0);
   $pbase$0 = $__1buf;
   while(1) {
    $2 = HEAP32[$__cv_>>2]|0;
    $3 = HEAP32[$__st_>>2]|0;
    $vtable$i = HEAP32[$2>>2]|0;
    $vfn$i = (($vtable$i) + 12|0);
    $4 = HEAP32[$vfn$i>>2]|0;
    $call$i = (FUNCTION_TABLE_iiiiiiiii[$4 & 511]($2,$3,$pbase$0,$add$ptr,$__e,$__extbuf,$add$ptr10,$__extbe)|0);
    $5 = HEAP32[$__e>>2]|0;
    $cmp12 = ($5|0)==($pbase$0|0);
    if ($cmp12) {
     $retval$0 = -1;
     label = 12;
     break;
    }
    $cmp16 = ($call$i|0)==(3);
    if ($cmp16) {
     label = 7;
     break;
    }
    $cmp26 = ($call$i|0)==(1);
    $7 = ($call$i>>>0)<(2);
    if (!($7)) {
     $retval$0 = -1;
     label = 12;
     break;
    }
    $8 = HEAP32[$__extbe>>2]|0;
    $sub$ptr$lhs$cast = $8;
    $sub$ptr$sub = (($sub$ptr$lhs$cast) - ($sub$ptr$rhs$cast))|0;
    $9 = HEAP32[$__file_30>>2]|0;
    $call31 = (_fwrite(($__extbuf|0),1,($sub$ptr$sub|0),($9|0))|0);
    $cmp32 = ($call31|0)==($sub$ptr$sub|0);
    if (!($cmp32)) {
     $retval$0 = -1;
     label = 12;
     break;
    }
    $10 = HEAP32[$__e>>2]|0;
    $$pbase$0 = $cmp26 ? $10 : $pbase$0;
    if ($cmp26) {
     $pbase$0 = $$pbase$0;
    } else {
     break L1;
    }
   }
   if ((label|0) == 7) {
    $6 = HEAP32[$__file_30>>2]|0;
    $call19 = (_fwrite(($pbase$0|0),1,1,($6|0))|0);
    $cmp20 = ($call19|0)==(1);
    if ($cmp20) {
     break;
    } else {
     $retval$0 = -1;
    }
    STACKTOP = sp;return ($retval$0|0);
   }
   else if ((label|0) == 12) {
    STACKTOP = sp;return ($retval$0|0);
   }
  }
 } while(0);
 $$__c$i = $cmp$i ? 0 : $__c;
 $retval$0 = $$__c$i;
 STACKTOP = sp;return ($retval$0|0);
}
function __ZNSt3__110__stdinbufIcEC2EP8_IO_FILEP11__mbstate_t($this,$__fp,$__st) {
 $this = $this|0;
 $__fp = $__fp|0;
 $__st = $__st|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $__file_ = 0, $__last_consumed_ = 0, $__last_consumed_is_next_ = 0, $__loc_$i1 = 0, $__st_ = 0, $ref$tmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $ref$tmp = sp;
 __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEEC2Ev($this);
 HEAP32[$this>>2] = ((1464 + 8|0));
 $__file_ = (($this) + 32|0);
 HEAP32[$__file_>>2] = $__fp;
 $__st_ = (($this) + 40|0);
 HEAP32[$__st_>>2] = $__st;
 $__last_consumed_ = (($this) + 48|0);
 HEAP32[$__last_consumed_>>2] = -1;
 $__last_consumed_is_next_ = (($this) + 52|0);
 HEAP8[$__last_consumed_is_next_>>0] = 0;
 $__loc_$i1 = (($this) + 4|0);
 __ZNSt3__16localeC2ERKS0_($ref$tmp,$__loc_$i1);
 __THREW__ = 0;
 invoke_vii(40,($this|0),($ref$tmp|0));
 $0 = __THREW__; __THREW__ = 0;
 $1 = $0&1;
 if ($1) {
  $2 = ___cxa_find_matching_catch()|0;
  $3 = tempRet0;
  __ZNSt3__16localeD2Ev($ref$tmp);
  HEAP32[$this>>2] = ((1848 + 8|0));
  __ZNSt3__16localeD2Ev($__loc_$i1);
  ___resumeException($2|0);
  // unreachable;
 } else {
  __ZNSt3__16localeD2Ev($ref$tmp);
  STACKTOP = sp;return;
 }
}
function __ZNSt3__110__stdinbufIcED1Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEED2Ev($this);
 STACKTOP = sp;return;
}
function __ZNSt3__110__stdinbufIcED0Ev($this) {
 $this = $this|0;
 var $__loc_$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = ((1848 + 8|0));
 $__loc_$i = (($this) + 4|0);
 __ZNSt3__16localeD2Ev($__loc_$i);
 __ZdlPv($this);
 STACKTOP = sp;return;
}
function __ZNSt3__110__stdinbufIcE5imbueERKNS_6localeE($this,$__loc) {
 $this = $this|0;
 $__loc = $__loc|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $__always_noconv_ = 0, $__cv_ = 0, $__encoding_ = 0, $call$i = 0, $call$i1 = 0, $call$i4 = 0, $cmp = 0, $frombool = 0, $vfn$i = 0, $vfn$i3 = 0, $vtable$i = 0, $vtable$i2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $call$i = (__ZNKSt3__16locale9use_facetERNS0_2idE($__loc,4680)|0);
 $__cv_ = (($this) + 36|0);
 HEAP32[$__cv_>>2] = $call$i;
 $vtable$i = HEAP32[$call$i>>2]|0;
 $vfn$i = (($vtable$i) + 24|0);
 $0 = HEAP32[$vfn$i>>2]|0;
 $call$i1 = (FUNCTION_TABLE_ii[$0 & 511]($call$i)|0);
 $__encoding_ = (($this) + 44|0);
 HEAP32[$__encoding_>>2] = $call$i1;
 $1 = HEAP32[$__cv_>>2]|0;
 $vtable$i2 = HEAP32[$1>>2]|0;
 $vfn$i3 = (($vtable$i2) + 28|0);
 $2 = HEAP32[$vfn$i3>>2]|0;
 $call$i4 = (FUNCTION_TABLE_ii[$2 & 511]($1)|0);
 $__always_noconv_ = (($this) + 53|0);
 $frombool = $call$i4&1;
 HEAP8[$__always_noconv_>>0] = $frombool;
 $3 = HEAP32[$__encoding_>>2]|0;
 $cmp = ($3|0)>(8);
 if (!($cmp)) {
  STACKTOP = sp;return;
 }
 __ZNSt3__121__throw_runtime_errorEPKc(1312);
 STACKTOP = sp;return;
}
function __ZNSt3__110__stdinbufIcE9underflowEv($this) {
 $this = $this|0;
 var $call = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $call = (__ZNSt3__110__stdinbufIcE9__getcharEb($this,0)|0);
 STACKTOP = sp;return ($call|0);
}
function __ZNSt3__110__stdinbufIcE5uflowEv($this) {
 $this = $this|0;
 var $call = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $call = (__ZNSt3__110__stdinbufIcE9__getcharEb($this,1)|0);
 STACKTOP = sp;return ($call|0);
}
function __ZNSt3__110__stdinbufIcE9pbackfailEi($this,$__c) {
 $this = $this|0;
 $__c = $__c|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__ci = 0, $__cv_ = 0, $__enxt = 0, $__extbuf = 0, $__file_ = 0, $__inxt = 0, $__last_consumed_ = 0, $__last_consumed_12 = 0, $__last_consumed_is_next_ = 0, $__st_ = 0;
 var $add$ptr = 0, $add$ptr15 = 0, $add$ptr19 = 0, $call$i = 0, $call24 = 0, $cmp = 0, $cmp$i = 0, $cmp$i4 = 0, $cmp25 = 0, $conv = 0, $conv$i = 0, $conv23 = 0, $frombool = 0, $incdec$ptr = 0, $retval$0 = 0, $tobool = 0, $vfn$i = 0, $vtable$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__extbuf = sp + 16|0;
 $__enxt = sp + 4|0;
 $__ci = sp + 8|0;
 $__inxt = sp;
 $cmp$i = ($__c|0)==(-1);
 $__last_consumed_is_next_ = (($this) + 52|0);
 $0 = HEAP8[$__last_consumed_is_next_>>0]|0;
 $tobool = ($0<<24>>24)!=(0);
 if ($cmp$i) {
  if ($tobool) {
   $retval$0 = -1;
   STACKTOP = sp;return ($retval$0|0);
  }
  $__last_consumed_ = (($this) + 48|0);
  $1 = HEAP32[$__last_consumed_>>2]|0;
  $cmp$i4 = ($1|0)!=(-1);
  $frombool = $cmp$i4&1;
  HEAP8[$__last_consumed_is_next_>>0] = $frombool;
  $retval$0 = $1;
  STACKTOP = sp;return ($retval$0|0);
 }
 $__last_consumed_12 = (($this) + 48|0);
 L8: do {
  if ($tobool) {
   $2 = HEAP32[$__last_consumed_12>>2]|0;
   $conv$i = $2&255;
   HEAP8[$__ci>>0] = $conv$i;
   $__cv_ = (($this) + 36|0);
   $3 = HEAP32[$__cv_>>2]|0;
   $__st_ = (($this) + 40|0);
   $4 = HEAP32[$__st_>>2]|0;
   $add$ptr = (($__ci) + 1|0);
   $add$ptr15 = (($__extbuf) + 8|0);
   $vtable$i = HEAP32[$3>>2]|0;
   $vfn$i = (($vtable$i) + 12|0);
   $5 = HEAP32[$vfn$i>>2]|0;
   $call$i = (FUNCTION_TABLE_iiiiiiiii[$5 & 511]($3,$4,$__ci,$add$ptr,$__inxt,$__extbuf,$add$ptr15,$__enxt)|0);
   if ((($call$i|0) == 1) | (($call$i|0) == 2)) {
    $retval$0 = -1;
    STACKTOP = sp;return ($retval$0|0);
   } else if ((($call$i|0) == 3)) {
    $6 = HEAP32[$__last_consumed_12>>2]|0;
    $conv = $6&255;
    HEAP8[$__extbuf>>0] = $conv;
    $add$ptr19 = (($__extbuf) + 1|0);
    HEAP32[$__enxt>>2] = $add$ptr19;
   }
   $__file_ = (($this) + 32|0);
   while(1) {
    $7 = HEAP32[$__enxt>>2]|0;
    $cmp = ($7>>>0)>($__extbuf>>>0);
    if (!($cmp)) {
     break L8;
    }
    $incdec$ptr = (($7) + -1|0);
    HEAP32[$__enxt>>2] = $incdec$ptr;
    $8 = HEAP8[$incdec$ptr>>0]|0;
    $conv23 = $8 << 24 >> 24;
    $9 = HEAP32[$__file_>>2]|0;
    $call24 = (_ungetc(($conv23|0),($9|0))|0);
    $cmp25 = ($call24|0)==(-1);
    if ($cmp25) {
     $retval$0 = -1;
     break;
    }
   }
   STACKTOP = sp;return ($retval$0|0);
  }
 } while(0);
 HEAP32[$__last_consumed_12>>2] = $__c;
 HEAP8[$__last_consumed_is_next_>>0] = 1;
 $retval$0 = $__c;
 STACKTOP = sp;return ($retval$0|0);
}
function __ZNSt3__110__stdinbufIcE9__getcharEb($this,$__consume) {
 $this = $this|0;
 $__consume = $__consume|0;
 var $$pre = 0, $$sroa$speculated = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__1buf = 0, $__always_noconv_ = 0, $__cv_ = 0, $__encoding_ = 0, $__enxt = 0, $__extbuf = 0, $__file_ = 0, $__file_26 = 0, $__file_49 = 0, $__i$024 = 0, $__i43$0 = 0, $__inxt = 0;
 var $__last_consumed_ = 0, $__last_consumed_58 = 0, $__last_consumed_is_next_ = 0, $__nread$0 = 0, $__nread$2 = 0, $__st_ = 0, $add$ptr = 0, $add$ptr18 = 0, $arrayidx = 0, $arrayidx47 = 0, $call$i = 0, $call27 = 0, $call50 = 0, $call8 = 0, $cmp = 0, $cmp$i$i$i = 0, $cmp21 = 0, $cmp23 = 0, $cmp28 = 0, $cmp45 = 0;
 var $cmp51 = 0, $cmp9 = 0, $conv = 0, $conv$i = 0, $conv$i13 = 0, $conv$i14 = 0, $conv32 = 0, $dec = 0, $inc = 0, $inc34 = 0, $retval$0 = 0, $tobool = 0, $tobool13 = 0, $vfn$i = 0, $vtable$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__extbuf = sp + 16|0;
 $__1buf = sp + 8|0;
 $__enxt = sp + 4|0;
 $__inxt = sp;
 $__last_consumed_is_next_ = (($this) + 52|0);
 $0 = HEAP8[$__last_consumed_is_next_>>0]|0;
 $tobool = ($0<<24>>24)==(0);
 if (!($tobool)) {
  $__last_consumed_ = (($this) + 48|0);
  $1 = HEAP32[$__last_consumed_>>2]|0;
  if (!($__consume)) {
   $retval$0 = $1;
   STACKTOP = sp;return ($retval$0|0);
  }
  HEAP32[$__last_consumed_>>2] = -1;
  HEAP8[$__last_consumed_is_next_>>0] = 0;
  $retval$0 = $1;
  STACKTOP = sp;return ($retval$0|0);
 }
 $__encoding_ = (($this) + 44|0);
 $2 = HEAP32[$__encoding_>>2]|0;
 $cmp$i$i$i = ($2|0)>(1);
 $$sroa$speculated = $cmp$i$i$i ? $2 : 1;
 $cmp23 = ($$sroa$speculated|0)>(0);
 L8: do {
  if ($cmp23) {
   $__file_ = (($this) + 32|0);
   $__i$024 = 0;
   while(1) {
    $3 = HEAP32[$__file_>>2]|0;
    $call8 = (_getc(($3|0))|0);
    $cmp9 = ($call8|0)==(-1);
    if ($cmp9) {
     $retval$0 = -1;
     break;
    }
    $conv = $call8&255;
    $arrayidx = (($__extbuf) + ($__i$024)|0);
    HEAP8[$arrayidx>>0] = $conv;
    $inc = (($__i$024) + 1)|0;
    $cmp = ($inc|0)<($$sroa$speculated|0);
    if ($cmp) {
     $__i$024 = $inc;
    } else {
     break L8;
    }
   }
   STACKTOP = sp;return ($retval$0|0);
  }
 } while(0);
 $__always_noconv_ = (($this) + 53|0);
 $4 = HEAP8[$__always_noconv_>>0]|0;
 $tobool13 = ($4<<24>>24)==(0);
 L15: do {
  if ($tobool13) {
   $__st_ = (($this) + 40|0);
   $__cv_ = (($this) + 36|0);
   $add$ptr18 = (($__1buf) + 1|0);
   $__file_26 = (($this) + 32|0);
   $__nread$0 = $$sroa$speculated;
   while(1) {
    $6 = HEAP32[$__st_>>2]|0;
    $7 = $6;
    $8 = $7;
    $9 = HEAP32[$8>>2]|0;
    $10 = (($7) + 4)|0;
    $11 = $10;
    $12 = HEAP32[$11>>2]|0;
    $13 = HEAP32[$__cv_>>2]|0;
    $add$ptr = (($__extbuf) + ($__nread$0)|0);
    $vtable$i = HEAP32[$13>>2]|0;
    $vfn$i = (($vtable$i) + 16|0);
    $14 = HEAP32[$vfn$i>>2]|0;
    $call$i = (FUNCTION_TABLE_iiiiiiiii[$14 & 511]($13,$6,$__extbuf,$add$ptr,$__enxt,$__1buf,$add$ptr18,$__inxt)|0);
    if ((($call$i|0) == 3)) {
     label = 14;
     break;
    } else if ((($call$i|0) == 2)) {
     $retval$0 = -1;
     label = 23;
     break;
    } else if (!((($call$i|0) == 1))) {
     $__nread$2 = $__nread$0;
     break L15;
    }
    $15 = HEAP32[$__st_>>2]|0;
    $16 = $15;
    $17 = $16;
    HEAP32[$17>>2] = $9;
    $18 = (($16) + 4)|0;
    $19 = $18;
    HEAP32[$19>>2] = $12;
    $cmp21 = ($__nread$0|0)==(8);
    if ($cmp21) {
     $retval$0 = -1;
     label = 23;
     break;
    }
    $20 = HEAP32[$__file_26>>2]|0;
    $call27 = (_getc(($20|0))|0);
    $cmp28 = ($call27|0)==(-1);
    if ($cmp28) {
     $retval$0 = -1;
     label = 23;
     break;
    }
    $conv32 = $call27&255;
    HEAP8[$add$ptr>>0] = $conv32;
    $inc34 = (($__nread$0) + 1)|0;
    $__nread$0 = $inc34;
   }
   if ((label|0) == 14) {
    $21 = HEAP8[$__extbuf>>0]|0;
    HEAP8[$__1buf>>0] = $21;
    $__nread$2 = $__nread$0;
    break;
   }
   else if ((label|0) == 23) {
    STACKTOP = sp;return ($retval$0|0);
   }
  } else {
   $5 = HEAP8[$__extbuf>>0]|0;
   HEAP8[$__1buf>>0] = $5;
   $__nread$2 = $$sroa$speculated;
  }
 } while(0);
 do {
  if ($__consume) {
   $24 = HEAP8[$__1buf>>0]|0;
   $conv$i13 = $24&255;
   $__last_consumed_58 = (($this) + 48|0);
   HEAP32[$__last_consumed_58>>2] = $conv$i13;
   $25 = $24;
  } else {
   $__file_49 = (($this) + 32|0);
   $__i43$0 = $__nread$2;
   while(1) {
    $cmp45 = ($__i43$0|0)>(0);
    if (!($cmp45)) {
     label = 21;
     break;
    }
    $dec = (($__i43$0) + -1)|0;
    $arrayidx47 = (($__extbuf) + ($dec)|0);
    $22 = HEAP8[$arrayidx47>>0]|0;
    $conv$i14 = $22&255;
    $23 = HEAP32[$__file_49>>2]|0;
    $call50 = (_ungetc(($conv$i14|0),($23|0))|0);
    $cmp51 = ($call50|0)==(-1);
    if ($cmp51) {
     $retval$0 = -1;
     label = 23;
     break;
    } else {
     $__i43$0 = $dec;
    }
   }
   if ((label|0) == 21) {
    $$pre = HEAP8[$__1buf>>0]|0;
    $25 = $$pre;
    break;
   }
   else if ((label|0) == 23) {
    STACKTOP = sp;return ($retval$0|0);
   }
  }
 } while(0);
 $conv$i = $25&255;
 $retval$0 = $conv$i;
 STACKTOP = sp;return ($retval$0|0);
}
function __GLOBAL__I_a() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__18ios_base4InitC2Ev(0);
 (___cxa_atexit((367|0),(736|0),(___dso_handle|0))|0);
 STACKTOP = sp;return;
}
function __ZNSt3__114__shared_countD2Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return;
}
function __ZNSt3__114__shared_count12__add_sharedEv($this) {
 $this = $this|0;
 var $0 = 0, $__shared_owners_ = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $__shared_owners_ = (($this) + 4|0);
 $0 = HEAP32[$__shared_owners_>>2]|0;HEAP32[$__shared_owners_>>2] = (($0+1)|0);
 STACKTOP = sp;return;
}
function __ZNSt3__114__shared_count16__release_sharedEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $__shared_owners_ = 0, $cmp = 0, $retval$0 = 0, $vfn = 0, $vtable = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $__shared_owners_ = (($this) + 4|0);
 $0 = HEAP32[$__shared_owners_>>2]|0;HEAP32[$__shared_owners_>>2] = (($0+-1)|0);
 $cmp = ($0|0)==(0);
 if (!($cmp)) {
  $retval$0 = 0;
  STACKTOP = sp;return ($retval$0|0);
 }
 $vtable = HEAP32[$this>>2]|0;
 $vfn = (($vtable) + 8|0);
 $1 = HEAP32[$vfn>>2]|0;
 FUNCTION_TABLE_vi[$1 & 511]($this);
 $retval$0 = 1;
 STACKTOP = sp;return ($retval$0|0);
}
function __ZNSt11logic_errorC2EPKc($this,$msg) {
 $this = $this|0;
 $msg = $msg|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $__imp_ = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = ((13064 + 8|0));
 $__imp_ = (($this) + 4|0);
 __THREW__ = 0;
 invoke_vii(368,($__imp_|0),($msg|0));
 $0 = __THREW__; __THREW__ = 0;
 $1 = $0&1;
 if ($1) {
  $2 = ___cxa_find_matching_catch()|0;
  $3 = tempRet0;
  ___resumeException($2|0);
  // unreachable;
 } else {
  STACKTOP = sp;return;
 }
}
function __ZNSt13runtime_errorC2ERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE($this,$msg) {
 $this = $this|0;
 $msg = $msg|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $__data_$i$i$i$i = 0, $__imp_ = 0, $and$i$i$i$i = 0, $arrayidx$i$i$i$i = 0, $cond$i$i$i = 0, $tobool$i$i$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = ((13088 + 8|0));
 $__imp_ = (($this) + 4|0);
 $0 = HEAP8[$msg>>0]|0;
 $and$i$i$i$i = $0 & 1;
 $tobool$i$i$i$i = ($and$i$i$i$i<<24>>24)==(0);
 if ($tobool$i$i$i$i) {
  $arrayidx$i$i$i$i = (($msg) + 1|0);
  $cond$i$i$i = $arrayidx$i$i$i$i;
 } else {
  $__data_$i$i$i$i = (($msg) + 8|0);
  $1 = HEAP32[$__data_$i$i$i$i>>2]|0;
  $cond$i$i$i = $1;
 }
 __THREW__ = 0;
 invoke_vii(368,($__imp_|0),($cond$i$i$i|0));
 $2 = __THREW__; __THREW__ = 0;
 $3 = $2&1;
 if ($3) {
  $4 = ___cxa_find_matching_catch()|0;
  $5 = tempRet0;
  ___resumeException($4|0);
  // unreachable;
 } else {
  STACKTOP = sp;return;
 }
}
function __ZNSt13runtime_errorC2EPKc($this,$msg) {
 $this = $this|0;
 $msg = $msg|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $__imp_ = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = ((13088 + 8|0));
 $__imp_ = (($this) + 4|0);
 __THREW__ = 0;
 invoke_vii(368,($__imp_|0),($msg|0));
 $0 = __THREW__; __THREW__ = 0;
 $1 = $0&1;
 if ($1) {
  $2 = ___cxa_find_matching_catch()|0;
  $3 = tempRet0;
  ___resumeException($2|0);
  // unreachable;
 } else {
  STACKTOP = sp;return;
 }
}
function __ZN12_GLOBAL__N_114__libcpp_nmstrC2EPKc($this,$msg) {
 $this = $this|0;
 $msg = $msg|0;
 var $add = 0, $add$ptr = 0, $add$ptr$i = 0, $add2 = 0, $arrayidx = 0, $call = 0, $call3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $call = (_strlen(($msg|0))|0);
 $add = (($call) + 1)|0;
 $add2 = (($call) + 13)|0;
 $call3 = (__Znaj($add2)|0);
 $arrayidx = (($call3) + 4|0);
 HEAP32[$arrayidx>>2] = $call;
 HEAP32[$call3>>2] = $call;
 $add$ptr = (($call3) + 12|0);
 HEAP32[$this>>2] = $add$ptr;
 $add$ptr$i = (($call3) + 8|0);
 HEAP32[$add$ptr$i>>2] = 0;
 _memcpy(($add$ptr|0),($msg|0),($add|0))|0;
 STACKTOP = sp;return;
}
function __ZNSt3__114error_categoryD2Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return;
}
function __ZNKSt3__114error_category23default_error_conditionEi($agg$result,$this,$ev) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $ev = $ev|0;
 var $__cat_$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$agg$result>>2] = $ev;
 $__cat_$i$i = (($agg$result) + 4|0);
 HEAP32[$__cat_$i$i>>2] = $this;
 STACKTOP = sp;return;
}
function __ZNKSt3__114error_category10equivalentEiRKNS_15error_conditionE($this,$code,$condition) {
 $this = $this|0;
 $code = $code|0;
 $condition = $condition|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $__cat_$i$i = 0, $__cat_$i4$i = 0, $cmp$i = 0, $cmp$i$i = 0, $ref$tmp = 0, $vfn = 0, $vtable = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $ref$tmp = sp;
 $vtable = HEAP32[$this>>2]|0;
 $vfn = (($vtable) + 12|0);
 $0 = HEAP32[$vfn>>2]|0;
 FUNCTION_TABLE_viii[$0 & 511]($ref$tmp,$this,$code);
 $__cat_$i$i = (($ref$tmp) + 4|0);
 $1 = HEAP32[$__cat_$i$i>>2]|0;
 $__cat_$i4$i = (($condition) + 4|0);
 $2 = HEAP32[$__cat_$i4$i>>2]|0;
 $cmp$i$i = ($1|0)==($2|0);
 if (!($cmp$i$i)) {
  $5 = 0;
  STACKTOP = sp;return ($5|0);
 }
 $3 = HEAP32[$ref$tmp>>2]|0;
 $4 = HEAP32[$condition>>2]|0;
 $cmp$i = ($3|0)==($4|0);
 $5 = $cmp$i;
 STACKTOP = sp;return ($5|0);
}
function __ZNKSt3__114error_category10equivalentERKNS_10error_codeEi($this,$code,$condition) {
 $this = $this|0;
 $code = $code|0;
 $condition = $condition|0;
 var $0 = 0, $1 = 0, $2 = 0, $__cat_$i = 0, $cmp = 0, $cmp$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $__cat_$i = (($code) + 4|0);
 $0 = HEAP32[$__cat_$i>>2]|0;
 $cmp$i = ($0|0)==($this|0);
 if (!($cmp$i)) {
  $2 = 0;
  STACKTOP = sp;return ($2|0);
 }
 $1 = HEAP32[$code>>2]|0;
 $cmp = ($1|0)==($condition|0);
 $2 = $cmp;
 STACKTOP = sp;return ($2|0);
}
function __ZNKSt3__112__do_message7messageEi($agg$result,$this,$ev) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $ev = $ev|0;
 var $call = 0, $call$i$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $call = (_strerror(($ev|0))|0);
 $call$i$i$i = (_strlen(($call|0))|0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj($agg$result,$call,$call$i$i$i);
 STACKTOP = sp;return;
}
function __ZNSt3__112system_error6__initERKNS_10error_codeENS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE($agg$result,$ec,$what_arg) {
 $agg$result = $agg$result|0;
 $ec = $ec|0;
 $what_arg = $what_arg|0;
 var $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__cat_$i = 0, $__data_$i$i$i$i$i = 0, $__size_$i2$i$i = 0, $__size_$i2$i$i$i = 0, $and$i$i$i = 0, $and$i$i$i$i$i = 0;
 var $arrayidx$i$i$i$i$i = 0, $cmp$i = 0, $cmp$i2 = 0, $cond$i$i = 0, $cond$i$i$i = 0, $cond$i$i2$i$i = 0, $conv$i$i$i = 0, $conv$i$i$i$i = 0, $ref$tmp = 0, $shr1$i$i$i = 0, $shr1$i$i$i$i = 0, $tobool$i$i$i = 0, $tobool$i$i$i$i$i = 0, $vfn$i = 0, $vtable$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $ref$tmp = sp;
 $0 = HEAP32[$ec>>2]|0;
 $cmp$i = ($0|0)==(0);
 if ($cmp$i) {
  ;HEAP32[$agg$result+0>>2]=HEAP32[$what_arg+0>>2]|0;HEAP32[$agg$result+4>>2]=HEAP32[$what_arg+4>>2]|0;HEAP32[$agg$result+8>>2]=HEAP32[$what_arg+8>>2]|0;
  ;HEAP32[$what_arg+0>>2]=0|0;HEAP32[$what_arg+4>>2]=0|0;HEAP32[$what_arg+8>>2]=0|0;
  STACKTOP = sp;return;
 }
 $1 = HEAP8[$what_arg>>0]|0;
 $and$i$i$i = $1 & 1;
 $tobool$i$i$i = ($and$i$i$i<<24>>24)==(0);
 if ($tobool$i$i$i) {
  $conv$i$i$i = $1&255;
  $shr1$i$i$i = $conv$i$i$i >>> 1;
  $cond$i$i = $shr1$i$i$i;
 } else {
  $__size_$i2$i$i = (($what_arg) + 4|0);
  $2 = HEAP32[$__size_$i2$i$i>>2]|0;
  $cond$i$i = $2;
 }
 $cmp$i2 = ($cond$i$i|0)==(0);
 if ($cmp$i2) {
  $5 = $0;
 } else {
  (__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKc($what_arg,1608)|0);
  $$pre = HEAP32[$ec>>2]|0;
  $5 = $$pre;
 }
 $__cat_$i = (($ec) + 4|0);
 $3 = HEAP32[$__cat_$i>>2]|0;
 $vtable$i = HEAP32[$3>>2]|0;
 $vfn$i = (($vtable$i) + 24|0);
 $4 = HEAP32[$vfn$i>>2]|0;
 FUNCTION_TABLE_viii[$4 & 511]($ref$tmp,$3,$5);
 $6 = HEAP8[$ref$tmp>>0]|0;
 $and$i$i$i$i$i = $6 & 1;
 $tobool$i$i$i$i$i = ($and$i$i$i$i$i<<24>>24)==(0);
 if ($tobool$i$i$i$i$i) {
  $arrayidx$i$i$i$i$i = (($ref$tmp) + 1|0);
  $conv$i$i$i$i = $6&255;
  $shr1$i$i$i$i = $conv$i$i$i$i >>> 1;
  $cond$i$i$i = $shr1$i$i$i$i;$cond$i$i2$i$i = $arrayidx$i$i$i$i$i;
 } else {
  $__data_$i$i$i$i$i = (($ref$tmp) + 8|0);
  $7 = HEAP32[$__data_$i$i$i$i$i>>2]|0;
  $__size_$i2$i$i$i = (($ref$tmp) + 4|0);
  $8 = HEAP32[$__size_$i2$i$i$i>>2]|0;
  $cond$i$i$i = $8;$cond$i$i2$i$i = $7;
 }
 __THREW__ = 0;
 (invoke_iiii(369,($what_arg|0),($cond$i$i2$i$i|0),($cond$i$i$i|0))|0);
 $9 = __THREW__; __THREW__ = 0;
 $10 = $9&1;
 if ($10) {
  $11 = ___cxa_find_matching_catch()|0;
  $12 = tempRet0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($ref$tmp);
  ___resumeException($11|0);
  // unreachable;
 }
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($ref$tmp);
 ;HEAP32[$agg$result+0>>2]=HEAP32[$what_arg+0>>2]|0;HEAP32[$agg$result+4>>2]=HEAP32[$what_arg+4>>2]|0;HEAP32[$agg$result+8>>2]=HEAP32[$what_arg+8>>2]|0;
 ;HEAP32[$what_arg+0>>2]=0|0;HEAP32[$what_arg+4>>2]=0|0;HEAP32[$what_arg+8>>2]=0|0;
 STACKTOP = sp;return;
}
function __ZNSt3__112system_errorC2ENS_10error_codeEPKc($this,$ec,$what_arg) {
 $this = $this|0;
 $ec = $ec|0;
 $what_arg = $what_arg|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__ec_ = 0, $agg$tmp = 0;
 var $call$i$i$i = 0, $ehselector$slot$0 = 0, $exn$slot$0 = 0, $ref$tmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $ref$tmp = sp + 12|0;
 $agg$tmp = sp;
 $call$i$i$i = (_strlen(($what_arg|0))|0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj($agg$tmp,$what_arg,$call$i$i$i);
 __THREW__ = 0;
 invoke_viii(370,($ref$tmp|0),($ec|0),($agg$tmp|0));
 $0 = __THREW__; __THREW__ = 0;
 $1 = $0&1;
 if ($1) {
  $14 = ___cxa_find_matching_catch()|0;
  $15 = tempRet0;
  $ehselector$slot$0 = $15;$exn$slot$0 = $14;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($agg$tmp);
  ___resumeException($exn$slot$0|0);
  // unreachable;
 }
 __THREW__ = 0;
 invoke_vii(371,($this|0),($ref$tmp|0));
 $2 = __THREW__; __THREW__ = 0;
 $3 = $2&1;
 if (!($3)) {
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($ref$tmp);
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($agg$tmp);
  HEAP32[$this>>2] = ((1616 + 8|0));
  $__ec_ = (($this) + 8|0);
  $4 = $ec;
  $5 = $4;
  $6 = HEAP32[$5>>2]|0;
  $7 = (($4) + 4)|0;
  $8 = $7;
  $9 = HEAP32[$8>>2]|0;
  $10 = $__ec_;
  $11 = $10;
  HEAP32[$11>>2] = $6;
  $12 = (($10) + 4)|0;
  $13 = $12;
  HEAP32[$13>>2] = $9;
  STACKTOP = sp;return;
 }
 $16 = ___cxa_find_matching_catch()|0;
 $17 = tempRet0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($ref$tmp);
 $ehselector$slot$0 = $17;$exn$slot$0 = $16;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($agg$tmp);
 ___resumeException($exn$slot$0|0);
 // unreachable;
}
function __ZNSt3__112system_errorD0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt13runtime_errorD2Ev($this);
 __ZdlPv($this);
 STACKTOP = sp;return;
}
function __ZNSt3__112system_errorD2Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt13runtime_errorD2Ev($this);
 STACKTOP = sp;return;
}
function __ZNSt3__111__call_onceERVmPvPFvS2_E($flag,$arg,$func) {
 $flag = $flag|0;
 $arg = $arg|0;
 $func = $func|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $cmp = 0, $cmp2 = 0, $cmp6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 (_pthread_mutex_lock((1760|0))|0);
 $0 = HEAP32[$flag>>2]|0;
 $cmp6 = ($0|0)==(1);
 if ($cmp6) {
  while(1) {
   (_pthread_cond_wait((1784|0),(1760|0))|0);
   $1 = HEAP32[$flag>>2]|0;
   $cmp = ($1|0)==(1);
   if (!($cmp)) {
    break;
   }
  }
 }
 $2 = HEAP32[$flag>>2]|0;
 $cmp2 = ($2|0)==(0);
 if (!($cmp2)) {
  (_pthread_mutex_unlock((1760|0))|0);
  STACKTOP = sp;return;
 }
 HEAP32[$flag>>2] = 1;
 __THREW__ = 0;
 (invoke_ii(372,(1760|0))|0);
 $3 = __THREW__; __THREW__ = 0;
 $4 = $3&1;
 if (!($4)) {
  __THREW__ = 0;
  invoke_vi($func|0,($arg|0));
  $5 = __THREW__; __THREW__ = 0;
  $6 = $5&1;
  if (!($6)) {
   __THREW__ = 0;
   (invoke_ii(373,(1760|0))|0);
   $7 = __THREW__; __THREW__ = 0;
   $8 = $7&1;
   if (!($8)) {
    HEAP32[$flag>>2] = -1;
    __THREW__ = 0;
    (invoke_ii(372,(1760|0))|0);
    $9 = __THREW__; __THREW__ = 0;
    $10 = $9&1;
    if (!($10)) {
     __THREW__ = 0;
     (invoke_ii(374,(1784|0))|0);
     $11 = __THREW__; __THREW__ = 0;
     $12 = $11&1;
     if (!($12)) {
      STACKTOP = sp;return;
     }
    }
   }
  }
 }
 $13 = ___cxa_find_matching_catch(0|0)|0;
 $14 = tempRet0;
 (___cxa_begin_catch(($13|0))|0);
 __THREW__ = 0;
 (invoke_ii(373,(1760|0))|0);
 $15 = __THREW__; __THREW__ = 0;
 $16 = $15&1;
 if (!($16)) {
  HEAP32[$flag>>2] = 0;
  __THREW__ = 0;
  (invoke_ii(372,(1760|0))|0);
  $17 = __THREW__; __THREW__ = 0;
  $18 = $17&1;
  if (!($18)) {
   __THREW__ = 0;
   (invoke_ii(374,(1784|0))|0);
   $19 = __THREW__; __THREW__ = 0;
   $20 = $19&1;
   if (!($20)) {
    __THREW__ = 0;
    invoke_v(375);
    $21 = __THREW__; __THREW__ = 0;
    $22 = $21&1;
    if (!($22)) {
     // unreachable;
    }
   }
  }
 }
 $23 = ___cxa_find_matching_catch()|0;
 $24 = tempRet0;
 __THREW__ = 0;
 invoke_v(363);
 $25 = __THREW__; __THREW__ = 0;
 $26 = $25&1;
 if ($26) {
  $27 = ___cxa_find_matching_catch(0|0)|0;
  $28 = tempRet0;
  ___clang_call_terminate($27);
  // unreachable;
 } else {
  ___resumeException($23|0);
  // unreachable;
 }
}
function __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $exception = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $exception = (___cxa_allocate_exception(8)|0);
 __THREW__ = 0;
 invoke_vii(376,($exception|0),(1832|0));
 $0 = __THREW__; __THREW__ = 0;
 $1 = $0&1;
 if ($1) {
  $2 = ___cxa_find_matching_catch()|0;
  $3 = tempRet0;
  ___cxa_free_exception(($exception|0));
  ___resumeException($2|0);
  // unreachable;
 } else {
  HEAP32[$exception>>2] = ((13144 + 8|0));
  ___cxa_throw(($exception|0),(13192|0),(328|0));
  // unreachable;
 }
}
function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC1ERKS5_($this,$__str) {
 $this = $this|0;
 $__str = $__str|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC2ERKS5_($this,$__str);
 STACKTOP = sp;return;
}
function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC2ERKS5_($this,$__str) {
 $this = $this|0;
 $__str = $__str|0;
 var $0 = 0, $1 = 0, $2 = 0, $__data_$i = 0, $__size_$i = 0, $and$i = 0, $tobool$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[$__str>>0]|0;
 $and$i = $0 & 1;
 $tobool$i = ($and$i<<24>>24)==(0);
 if ($tobool$i) {
  ;HEAP32[$this+0>>2]=HEAP32[$__str+0>>2]|0;HEAP32[$this+4>>2]=HEAP32[$__str+4>>2]|0;HEAP32[$this+8>>2]=HEAP32[$__str+8>>2]|0;
  STACKTOP = sp;return;
 } else {
  $__data_$i = (($__str) + 8|0);
  $1 = HEAP32[$__data_$i>>2]|0;
  $__size_$i = (($__str) + 4|0);
  $2 = HEAP32[$__size_$i>>2]|0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj($this,$1,$2);
  STACKTOP = sp;return;
 }
}
function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj($this,$__s,$__sz) {
 $this = $this|0;
 $__s = $__s|0;
 $__sz = $__sz|0;
 var $__data_$i = 0, $__p$0 = 0, $__size_$i = 0, $add$i$i = 0, $and$i$i = 0, $arrayidx = 0, $arrayidx$i = 0, $call$i$i = 0, $cmp = 0, $cmp2 = 0, $conv$i = 0, $or$i = 0, $shl$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $cmp = ($__sz>>>0)>(4294967279);
 if ($cmp) {
  __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv(0);
  // unreachable;
 }
 $cmp2 = ($__sz>>>0)<(11);
 if ($cmp2) {
  $shl$i = $__sz << 1;
  $conv$i = $shl$i&255;
  HEAP8[$this>>0] = $conv$i;
  $arrayidx$i = (($this) + 1|0);
  $__p$0 = $arrayidx$i;
  _memcpy(($__p$0|0),($__s|0),($__sz|0))|0;
  $arrayidx = (($__p$0) + ($__sz)|0);
  HEAP8[$arrayidx>>0] = 0;
  STACKTOP = sp;return;
 } else {
  $add$i$i = (($__sz) + 16)|0;
  $and$i$i = $add$i$i & -16;
  $call$i$i = (__Znwj($and$i$i)|0);
  $__data_$i = (($this) + 8|0);
  HEAP32[$__data_$i>>2] = $call$i$i;
  $or$i = $and$i$i | 1;
  HEAP32[$this>>2] = $or$i;
  $__size_$i = (($this) + 4|0);
  HEAP32[$__size_$i>>2] = $__sz;
  $__p$0 = $call$i$i;
  _memcpy(($__p$0|0),($__s|0),($__sz|0))|0;
  $arrayidx = (($__p$0) + ($__sz)|0);
  HEAP8[$arrayidx>>0] = 0;
  STACKTOP = sp;return;
 }
}
function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEjc($this,$__n,$__c) {
 $this = $this|0;
 $__n = $__n|0;
 $__c = $__c|0;
 var $__data_$i = 0, $__p$0 = 0, $__size_$i = 0, $add$i$i = 0, $and$i$i = 0, $arrayidx = 0, $arrayidx$i = 0, $call$i$i = 0, $cmp = 0, $cmp2 = 0, $conv$i = 0, $or$i = 0, $shl$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $cmp = ($__n>>>0)>(4294967279);
 if ($cmp) {
  __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv(0);
  // unreachable;
 }
 $cmp2 = ($__n>>>0)<(11);
 if ($cmp2) {
  $shl$i = $__n << 1;
  $conv$i = $shl$i&255;
  HEAP8[$this>>0] = $conv$i;
  $arrayidx$i = (($this) + 1|0);
  $__p$0 = $arrayidx$i;
  _memset(($__p$0|0),($__c|0),($__n|0))|0;
  $arrayidx = (($__p$0) + ($__n)|0);
  HEAP8[$arrayidx>>0] = 0;
  STACKTOP = sp;return;
 } else {
  $add$i$i = (($__n) + 16)|0;
  $and$i$i = $add$i$i & -16;
  $call$i$i = (__Znwj($and$i$i)|0);
  $__data_$i = (($this) + 8|0);
  HEAP32[$__data_$i>>2] = $call$i$i;
  $or$i = $and$i$i | 1;
  HEAP32[$this>>2] = $or$i;
  $__size_$i = (($this) + 4|0);
  HEAP32[$__size_$i>>2] = $__n;
  $__p$0 = $call$i$i;
  _memset(($__p$0|0),($__c|0),($__n|0))|0;
  $arrayidx = (($__p$0) + ($__n)|0);
  HEAP8[$arrayidx>>0] = 0;
  STACKTOP = sp;return;
 }
}
function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initIPKcEENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueEvE4typeESA_SA_($this,$__first,$__last) {
 $this = $this|0;
 $__first = $__first|0;
 $__last = $__last|0;
 var $0 = 0, $1 = 0, $__data_$i = 0, $__first$addr$014 = 0, $__p$0$lcssa = 0, $__p$0$ph = 0, $__p$013 = 0, $__size_$i = 0, $add$i$i = 0, $and$i$i = 0, $arrayidx$i = 0, $call$i$i = 0, $cmp = 0, $cmp11 = 0, $cmp1112 = 0, $cmp3 = 0, $conv$i = 0, $incdec$ptr = 0, $incdec$ptr12 = 0, $or$i = 0;
 var $scevgep = 0, $scevgep15 = 0, $scevgep16 = 0, $shl$i = 0, $sub$ptr$lhs$cast$i$i = 0, $sub$ptr$rhs$cast$i$i = 0, $sub$ptr$sub$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $sub$ptr$rhs$cast$i$i = $__first;
 $sub$ptr$lhs$cast$i$i = $__last;
 $sub$ptr$sub$i$i = (($sub$ptr$lhs$cast$i$i) - ($sub$ptr$rhs$cast$i$i))|0;
 $cmp = ($sub$ptr$sub$i$i>>>0)>(4294967279);
 if ($cmp) {
  __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv(0);
  // unreachable;
 }
 $cmp3 = ($sub$ptr$sub$i$i>>>0)<(11);
 if ($cmp3) {
  $shl$i = $sub$ptr$sub$i$i << 1;
  $conv$i = $shl$i&255;
  HEAP8[$this>>0] = $conv$i;
  $arrayidx$i = (($this) + 1|0);
  $__p$0$ph = $arrayidx$i;
 } else {
  $add$i$i = (($sub$ptr$sub$i$i) + 16)|0;
  $and$i$i = $add$i$i & -16;
  $call$i$i = (__Znwj($and$i$i)|0);
  $__data_$i = (($this) + 8|0);
  HEAP32[$__data_$i>>2] = $call$i$i;
  $or$i = $and$i$i | 1;
  HEAP32[$this>>2] = $or$i;
  $__size_$i = (($this) + 4|0);
  HEAP32[$__size_$i>>2] = $sub$ptr$sub$i$i;
  $__p$0$ph = $call$i$i;
 }
 $cmp1112 = ($__first|0)==($__last|0);
 if ($cmp1112) {
  $__p$0$lcssa = $__p$0$ph;
  HEAP8[$__p$0$lcssa>>0] = 0;
  STACKTOP = sp;return;
 }
 $0 = (0 - ($sub$ptr$rhs$cast$i$i))|0;
 $scevgep = (($__last) + ($0)|0);
 $scevgep15 = $scevgep;
 $__first$addr$014 = $__first;$__p$013 = $__p$0$ph;
 while(1) {
  $1 = HEAP8[$__first$addr$014>>0]|0;
  HEAP8[$__p$013>>0] = $1;
  $incdec$ptr = (($__first$addr$014) + 1|0);
  $incdec$ptr12 = (($__p$013) + 1|0);
  $cmp11 = ($incdec$ptr|0)==($__last|0);
  if ($cmp11) {
   break;
  } else {
   $__first$addr$014 = $incdec$ptr;$__p$013 = $incdec$ptr12;
  }
 }
 $scevgep16 = (($__p$0$ph) + ($scevgep15)|0);
 $__p$0$lcssa = $scevgep16;
 HEAP8[$__p$0$lcssa>>0] = 0;
 STACKTOP = sp;return;
}
function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($this);
 STACKTOP = sp;return;
}
function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $__data_$i = 0, $and$i = 0, $tobool$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[$this>>0]|0;
 $and$i = $0 & 1;
 $tobool$i = ($and$i<<24>>24)==(0);
 if ($tobool$i) {
  STACKTOP = sp;return;
 }
 $__data_$i = (($this) + 8|0);
 $1 = HEAP32[$__data_$i>>2]|0;
 __ZdlPv($1);
 STACKTOP = sp;return;
}
function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc($this,$__s) {
 $this = $this|0;
 $__s = $__s|0;
 var $call$i = 0, $call2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $call$i = (_strlen(($__s|0))|0);
 $call2 = (__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKcj($this,$__s,$call$i)|0);
 STACKTOP = sp;return ($call2|0);
}
function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKcj($this,$__s,$__n) {
 $this = $this|0;
 $__s = $__s|0;
 $__n = $__n|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $__data_$i$i = 0, $__size_$i2$i = 0, $__size_$i2$i26 = 0, $and$i$i = 0, $and$i$i18 = 0, $and$i$i24 = 0, $and$i1$i = 0, $arrayidx = 0, $arrayidx$i$i = 0, $cmp = 0, $cond$i = 0, $cond$i16 = 0, $cond$i22 = 0;
 var $conv$i$i = 0, $conv$i$i27 = 0, $phitmp$i = 0, $shl$i$i = 0, $shr1$i$i = 0, $sub = 0, $tobool$i$i = 0, $tobool$i$i19 = 0, $tobool$i$i25 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[$this>>0]|0;
 $and$i$i = $0 & 1;
 $tobool$i$i = ($and$i$i<<24>>24)==(0);
 if ($tobool$i$i) {
  $3 = $0;$cond$i = 10;
 } else {
  $1 = HEAP32[$this>>2]|0;
  $and$i1$i = $1 & -2;
  $phitmp$i = (($and$i1$i) + -1)|0;
  $2 = $1&255;
  $3 = $2;$cond$i = $phitmp$i;
 }
 $cmp = ($cond$i>>>0)<($__n>>>0);
 $and$i$i18 = $3 & 1;
 $tobool$i$i19 = ($and$i$i18<<24>>24)==(0);
 if ($cmp) {
  if ($tobool$i$i19) {
   $conv$i$i = $3&255;
   $shr1$i$i = $conv$i$i >>> 1;
   $cond$i22 = $shr1$i$i;
  } else {
   $__size_$i2$i = (($this) + 4|0);
   $6 = HEAP32[$__size_$i2$i>>2]|0;
   $cond$i22 = $6;
  }
  $sub = (($__n) - ($cond$i))|0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE21__grow_by_and_replaceEjjjjjjPKc($this,$cond$i,$sub,$cond$i22,0,$cond$i22,$__n,$__s);
  STACKTOP = sp;return ($this|0);
 }
 if ($tobool$i$i19) {
  $arrayidx$i$i = (($this) + 1|0);
  $cond$i16 = $arrayidx$i$i;
 } else {
  $__data_$i$i = (($this) + 8|0);
  $4 = HEAP32[$__data_$i$i>>2]|0;
  $cond$i16 = $4;
 }
 _memmove(($cond$i16|0),($__s|0),($__n|0))|0;
 $arrayidx = (($cond$i16) + ($__n)|0);
 HEAP8[$arrayidx>>0] = 0;
 $5 = HEAP8[$this>>0]|0;
 $and$i$i24 = $5 & 1;
 $tobool$i$i25 = ($and$i$i24<<24>>24)==(0);
 if ($tobool$i$i25) {
  $shl$i$i = $__n << 1;
  $conv$i$i27 = $shl$i$i&255;
  HEAP8[$this>>0] = $conv$i$i27;
  STACKTOP = sp;return ($this|0);
 } else {
  $__size_$i2$i26 = (($this) + 4|0);
  HEAP32[$__size_$i2$i26>>2] = $__n;
  STACKTOP = sp;return ($this|0);
 }
 return 0|0;
}
function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($this,$__n,$__c) {
 $this = $this|0;
 $__n = $__n|0;
 $__c = $__c|0;
 var $0 = 0, $1 = 0, $2 = 0, $__data_$i$i = 0, $__size_$i2$i = 0, $__size_$i6$i = 0, $add$ptr$i = 0, $add$ptr4$i = 0, $and$i$i = 0, $cmp = 0, $cond$i = 0, $conv$i$i = 0, $conv$i$i6 = 0, $shl$i$i = 0, $shr1$i$i = 0, $sub = 0, $tobool$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[$this>>0]|0;
 $and$i$i = $0 & 1;
 $tobool$i$i = ($and$i$i<<24>>24)==(0);
 if ($tobool$i$i) {
  $conv$i$i = $0&255;
  $shr1$i$i = $conv$i$i >>> 1;
  $cond$i = $shr1$i$i;
 } else {
  $__size_$i2$i = (($this) + 4|0);
  $1 = HEAP32[$__size_$i2$i>>2]|0;
  $cond$i = $1;
 }
 $cmp = ($cond$i>>>0)<($__n>>>0);
 if ($cmp) {
  $sub = (($__n) - ($cond$i))|0;
  (__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEjc($this,$sub,$__c)|0);
  STACKTOP = sp;return;
 }
 if ($tobool$i$i) {
  $add$ptr4$i = ((($this) + ($__n)|0) + 1|0);
  HEAP8[$add$ptr4$i>>0] = 0;
  $shl$i$i = $__n << 1;
  $conv$i$i6 = $shl$i$i&255;
  HEAP8[$this>>0] = $conv$i$i6;
  STACKTOP = sp;return;
 } else {
  $__data_$i$i = (($this) + 8|0);
  $2 = HEAP32[$__data_$i$i>>2]|0;
  $add$ptr$i = (($2) + ($__n)|0);
  HEAP8[$add$ptr$i>>0] = 0;
  $__size_$i6$i = (($this) + 4|0);
  HEAP32[$__size_$i6$i>>2] = $__n;
  STACKTOP = sp;return;
 }
}
function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEjc($this,$__n,$__c) {
 $this = $this|0;
 $__n = $__n|0;
 $__c = $__c|0;
 var $$pre = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $__data_$i$i = 0, $__size_$i2$i = 0, $__size_$i2$i26 = 0, $add = 0, $add$ptr = 0, $add8 = 0, $and$i$i = 0, $and$i$i16 = 0, $and$i$i19 = 0, $and$i$i24 = 0, $and$i1$i = 0;
 var $arrayidx = 0, $arrayidx$i$i = 0, $cmp = 0, $cond$i = 0, $cond$i22 = 0, $cond$i30 = 0, $conv$i$i = 0, $conv$i$i28 = 0, $phitmp$i = 0, $shl$i$i = 0, $shr1$i$i = 0, $sub = 0, $sub4 = 0, $tobool = 0, $tobool$i$i = 0, $tobool$i$i17 = 0, $tobool$i$i20 = 0, $tobool$i$i25 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $tobool = ($__n|0)==(0);
 if ($tobool) {
  STACKTOP = sp;return ($this|0);
 }
 $0 = HEAP8[$this>>0]|0;
 $and$i$i = $0 & 1;
 $tobool$i$i = ($and$i$i<<24>>24)==(0);
 if ($tobool$i$i) {
  $3 = $0;$cond$i = 10;
 } else {
  $1 = HEAP32[$this>>2]|0;
  $and$i1$i = $1 & -2;
  $phitmp$i = (($and$i1$i) + -1)|0;
  $2 = $1&255;
  $3 = $2;$cond$i = $phitmp$i;
 }
 $and$i$i24 = $3 & 1;
 $tobool$i$i25 = ($and$i$i24<<24>>24)==(0);
 if ($tobool$i$i25) {
  $conv$i$i28 = $3&255;
  $shr1$i$i = $conv$i$i28 >>> 1;
  $cond$i30 = $shr1$i$i;
 } else {
  $__size_$i2$i26 = (($this) + 4|0);
  $4 = HEAP32[$__size_$i2$i26>>2]|0;
  $cond$i30 = $4;
 }
 $sub = (($cond$i) - ($cond$i30))|0;
 $cmp = ($sub>>>0)<($__n>>>0);
 if ($cmp) {
  $add = (($__n) - ($cond$i))|0;
  $sub4 = (($add) + ($cond$i30))|0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9__grow_byEjjjjjj($this,$cond$i,$sub4,$cond$i30,$cond$i30,0,0);
  $$pre = HEAP8[$this>>0]|0;
  $5 = $$pre;
 } else {
  $5 = $3;
 }
 $and$i$i19 = $5 & 1;
 $tobool$i$i20 = ($and$i$i19<<24>>24)==(0);
 if ($tobool$i$i20) {
  $arrayidx$i$i = (($this) + 1|0);
  $cond$i22 = $arrayidx$i$i;
 } else {
  $__data_$i$i = (($this) + 8|0);
  $6 = HEAP32[$__data_$i$i>>2]|0;
  $cond$i22 = $6;
 }
 $add$ptr = (($cond$i22) + ($cond$i30)|0);
 _memset(($add$ptr|0),($__c|0),($__n|0))|0;
 $add8 = (($cond$i30) + ($__n))|0;
 $7 = HEAP8[$this>>0]|0;
 $and$i$i16 = $7 & 1;
 $tobool$i$i17 = ($and$i$i16<<24>>24)==(0);
 if ($tobool$i$i17) {
  $shl$i$i = $add8 << 1;
  $conv$i$i = $shl$i$i&255;
  HEAP8[$this>>0] = $conv$i$i;
 } else {
  $__size_$i2$i = (($this) + 4|0);
  HEAP32[$__size_$i2$i>>2] = $add8;
 }
 $arrayidx = (($cond$i22) + ($add8)|0);
 HEAP8[$arrayidx>>0] = 0;
 STACKTOP = sp;return ($this|0);
}
function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj($this,$__res_arg) {
 $this = $this|0;
 $__res_arg = $__res_arg|0;
 var $$sroa$speculated = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__data_$i = 0, $__data_$i$i = 0, $__data_$i29 = 0, $__new_data$0 = 0, $__new_data$1 = 0, $__now_long$0$off0 = 0, $__p$0 = 0;
 var $__size_$i2$i = 0, $__size_$i2$i22 = 0, $__size_$i5 = 0, $__was_long$0$off0 = 0, $add = 0, $add$i$i = 0, $add27 = 0, $add35 = 0, $and$i = 0, $and$i$i = 0, $and$i$i20 = 0, $and$i$i30 = 0, $and$i$i7 = 0, $and$i1$i = 0, $arrayidx$i = 0, $arrayidx$i$i = 0, $call$i$i = 0, $call$i$i18 = 0, $cmp = 0, $cmp$i = 0;
 var $cmp$i$i$i = 0, $cmp12 = 0, $cmp6 = 0, $cmp8 = 0, $cond$i = 0, $cond$i10 = 0, $cond$i27 = 0, $cond$i33 = 0, $conv$i = 0, $conv$i$i = 0, $conv$i$i24 = 0, $or$i = 0, $phitmp$i = 0, $phitmp$i31 = 0, $shl$i = 0, $shr1$i$i = 0, $shr1$i$i25 = 0, $tobool$i$i = 0, $tobool$i$i13 = 0, $tobool$i$i21 = 0;
 var $tobool$i$i8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $cmp = ($__res_arg>>>0)>(4294967279);
 if ($cmp) {
  __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv(0);
  // unreachable;
 }
 $0 = HEAP8[$this>>0]|0;
 $and$i$i = $0 & 1;
 $tobool$i$i = ($and$i$i<<24>>24)==(0);
 if ($tobool$i$i) {
  $3 = $0;$cond$i = 10;
 } else {
  $1 = HEAP32[$this>>2]|0;
  $and$i1$i = $1 & -2;
  $phitmp$i = (($and$i1$i) + -1)|0;
  $2 = $1&255;
  $3 = $2;$cond$i = $phitmp$i;
 }
 $and$i$i20 = $3 & 1;
 $tobool$i$i21 = ($and$i$i20<<24>>24)==(0);
 if ($tobool$i$i21) {
  $conv$i$i24 = $3&255;
  $shr1$i$i25 = $conv$i$i24 >>> 1;
  $cond$i27 = $shr1$i$i25;
 } else {
  $__size_$i2$i22 = (($this) + 4|0);
  $4 = HEAP32[$__size_$i2$i22>>2]|0;
  $cond$i27 = $4;
 }
 $cmp$i$i$i = ($cond$i27>>>0)>($__res_arg>>>0);
 $$sroa$speculated = $cmp$i$i$i ? $cond$i27 : $__res_arg;
 $cmp$i = ($$sroa$speculated>>>0)<(11);
 if ($cmp$i) {
  $cond$i33 = 10;
 } else {
  $add$i$i = (($$sroa$speculated) + 16)|0;
  $and$i$i30 = $add$i$i & -16;
  $phitmp$i31 = (($and$i$i30) + -1)|0;
  $cond$i33 = $phitmp$i31;
 }
 $cmp6 = ($cond$i33|0)==($cond$i|0);
 if ($cmp6) {
  STACKTOP = sp;return;
 }
 $cmp8 = ($cond$i33|0)==(10);
 do {
  if ($cmp8) {
   $arrayidx$i = (($this) + 1|0);
   $__data_$i29 = (($this) + 8|0);
   $5 = HEAP32[$__data_$i29>>2]|0;
   $__new_data$1 = $arrayidx$i;$__now_long$0$off0 = 0;$__p$0 = $5;$__was_long$0$off0 = 1;
  } else {
   $cmp12 = ($cond$i33>>>0)>($cond$i>>>0);
   $add = (($cond$i33) + 1)|0;
   if ($cmp12) {
    $call$i$i = (__Znwj($add)|0);
    $__new_data$0 = $call$i$i;
   } else {
    __THREW__ = 0;
    $call$i$i18 = (invoke_ii(377,($add|0))|0);
    $6 = __THREW__; __THREW__ = 0;
    $7 = $6&1;
    if ($7) {
     $8 = ___cxa_find_matching_catch(0|0)|0;
     $9 = tempRet0;
     (___cxa_begin_catch(($8|0))|0);
     ___cxa_end_catch();
     STACKTOP = sp;return;
    } else {
     $__new_data$0 = $call$i$i18;
    }
   }
   $and$i = $3 & 1;
   $tobool$i$i13 = ($and$i<<24>>24)==(0);
   if ($tobool$i$i13) {
    $arrayidx$i$i = (($this) + 1|0);
    $__new_data$1 = $__new_data$0;$__now_long$0$off0 = 1;$__p$0 = $arrayidx$i$i;$__was_long$0$off0 = 0;
    break;
   } else {
    $__data_$i$i = (($this) + 8|0);
    $10 = HEAP32[$__data_$i$i>>2]|0;
    $__new_data$1 = $__new_data$0;$__now_long$0$off0 = 1;$__p$0 = $10;$__was_long$0$off0 = 1;
    break;
   }
  }
 } while(0);
 $and$i$i7 = $3 & 1;
 $tobool$i$i8 = ($and$i$i7<<24>>24)==(0);
 if ($tobool$i$i8) {
  $conv$i$i = $3&255;
  $shr1$i$i = $conv$i$i >>> 1;
  $cond$i10 = $shr1$i$i;
 } else {
  $__size_$i2$i = (($this) + 4|0);
  $11 = HEAP32[$__size_$i2$i>>2]|0;
  $cond$i10 = $11;
 }
 $add27 = (($cond$i10) + 1)|0;
 _memcpy(($__new_data$1|0),($__p$0|0),($add27|0))|0;
 if ($__was_long$0$off0) {
  __ZdlPv($__p$0);
 }
 if ($__now_long$0$off0) {
  $add35 = (($cond$i33) + 1)|0;
  $or$i = $add35 | 1;
  HEAP32[$this>>2] = $or$i;
  $__size_$i5 = (($this) + 4|0);
  HEAP32[$__size_$i5>>2] = $cond$i27;
  $__data_$i = (($this) + 8|0);
  HEAP32[$__data_$i>>2] = $__new_data$1;
  STACKTOP = sp;return;
 } else {
  $shl$i = $cond$i27 << 1;
  $conv$i = $shl$i&255;
  HEAP8[$this>>0] = $conv$i;
  STACKTOP = sp;return;
 }
}
function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKc($this,$__s) {
 $this = $this|0;
 $__s = $__s|0;
 var $call$i = 0, $call2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $call$i = (_strlen(($__s|0))|0);
 $call2 = (__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKcj($this,$__s,$call$i)|0);
 STACKTOP = sp;return ($call2|0);
}
function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9push_backEc($this,$__c) {
 $this = $this|0;
 $__c = $__c|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $__cap$0 = 0, $__data_$i = 0, $__p$0 = 0, $__p$0$sum$pre = 0, $__p$0$sum$pre$phiZZZ2D = 0, $__size_$i11 = 0, $__size_$i18 = 0, $__sz$0 = 0, $add = 0, $add16 = 0, $and$i = 0, $and$i14 = 0, $and$i19 = 0, $arrayidx$i = 0, $call12$pn = 0;
 var $cmp = 0, $conv$i = 0, $conv$i17 = 0, $incdec$ptr = 0, $shl$i = 0, $shr1$i = 0, $sub = 0, $tobool$i = 0, $tobool$i15 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[$this>>0]|0;
 $and$i = $0 & 1;
 $tobool$i = ($and$i<<24>>24)!=(0);
 if ($tobool$i) {
  $1 = HEAP32[$this>>2]|0;
  $and$i19 = $1 & -2;
  $sub = (($and$i19) + -1)|0;
  $__size_$i18 = (($this) + 4|0);
  $2 = HEAP32[$__size_$i18>>2]|0;
  $__cap$0 = $sub;$__sz$0 = $2;
 } else {
  $conv$i17 = $0&255;
  $shr1$i = $conv$i17 >>> 1;
  $__cap$0 = 10;$__sz$0 = $shr1$i;
 }
 $cmp = ($__sz$0|0)==($__cap$0|0);
 if ($cmp) {
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9__grow_byEjjjjjj($this,$__cap$0,1,$__cap$0,$__cap$0,0,0);
  $3 = HEAP8[$this>>0]|0;
  $and$i14 = $3 & 1;
  $tobool$i15 = ($and$i14<<24>>24)==(0);
  if ($tobool$i15) {
   label = 7;
  } else {
   label = 8;
  }
 } else {
  if ($tobool$i) {
   label = 8;
  } else {
   label = 7;
  }
 }
 if ((label|0) == 7) {
  $arrayidx$i = (($this) + 1|0);
  $add = $__sz$0 << 1;
  $shl$i = (($add) + 2)|0;
  $conv$i = $shl$i&255;
  HEAP8[$this>>0] = $conv$i;
  $__p$0$sum$pre = (($__sz$0) + 1)|0;
  $__p$0$sum$pre$phiZZZ2D = $__p$0$sum$pre;$call12$pn = $arrayidx$i;
  $__p$0 = (($call12$pn) + ($__sz$0)|0);
  HEAP8[$__p$0>>0] = $__c;
  $incdec$ptr = (($call12$pn) + ($__p$0$sum$pre$phiZZZ2D)|0);
  HEAP8[$incdec$ptr>>0] = 0;
  STACKTOP = sp;return;
 }
 else if ((label|0) == 8) {
  $__data_$i = (($this) + 8|0);
  $4 = HEAP32[$__data_$i>>2]|0;
  $add16 = (($__sz$0) + 1)|0;
  $__size_$i11 = (($this) + 4|0);
  HEAP32[$__size_$i11>>2] = $add16;
  $__p$0$sum$pre$phiZZZ2D = $add16;$call12$pn = $4;
  $__p$0 = (($call12$pn) + ($__sz$0)|0);
  HEAP8[$__p$0>>0] = $__c;
  $incdec$ptr = (($call12$pn) + ($__p$0$sum$pre$phiZZZ2D)|0);
  HEAP8[$incdec$ptr>>0] = 0;
  STACKTOP = sp;return;
 }
}
function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKcj($this,$__s,$__n) {
 $this = $this|0;
 $__s = $__s|0;
 $__n = $__n|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $__data_$i$i = 0, $__size_$i2$i = 0, $__size_$i2$i25 = 0, $add = 0, $add$ptr = 0, $add7 = 0, $and$i$i = 0, $and$i$i18 = 0, $and$i$i23 = 0, $and$i$i28 = 0, $and$i1$i = 0, $arrayidx = 0, $arrayidx$i$i = 0;
 var $cmp = 0, $cond$i = 0, $cond$i21 = 0, $cond$i32 = 0, $conv$i$i = 0, $conv$i$i26 = 0, $phitmp$i = 0, $shl$i$i = 0, $shr1$i$i = 0, $sub = 0, $sub8 = 0, $tobool = 0, $tobool$i$i = 0, $tobool$i$i19 = 0, $tobool$i$i24 = 0, $tobool$i$i29 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[$this>>0]|0;
 $and$i$i = $0 & 1;
 $tobool$i$i = ($and$i$i<<24>>24)==(0);
 if ($tobool$i$i) {
  $3 = $0;$cond$i = 10;
 } else {
  $1 = HEAP32[$this>>2]|0;
  $and$i1$i = $1 & -2;
  $phitmp$i = (($and$i1$i) + -1)|0;
  $2 = $1&255;
  $3 = $2;$cond$i = $phitmp$i;
 }
 $and$i$i18 = $3 & 1;
 $tobool$i$i19 = ($and$i$i18<<24>>24)==(0);
 if ($tobool$i$i19) {
  $conv$i$i = $3&255;
  $shr1$i$i = $conv$i$i >>> 1;
  $cond$i21 = $shr1$i$i;
 } else {
  $__size_$i2$i = (($this) + 4|0);
  $4 = HEAP32[$__size_$i2$i>>2]|0;
  $cond$i21 = $4;
 }
 $sub = (($cond$i) - ($cond$i21))|0;
 $cmp = ($sub>>>0)<($__n>>>0);
 if ($cmp) {
  $add7 = (($__n) - ($cond$i))|0;
  $sub8 = (($add7) + ($cond$i21))|0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE21__grow_by_and_replaceEjjjjjjPKc($this,$cond$i,$sub8,$cond$i21,$cond$i21,0,$__n,$__s);
  STACKTOP = sp;return ($this|0);
 }
 $tobool = ($__n|0)==(0);
 if ($tobool) {
  STACKTOP = sp;return ($this|0);
 }
 $and$i$i28 = $3 & 1;
 $tobool$i$i29 = ($and$i$i28<<24>>24)==(0);
 if ($tobool$i$i29) {
  $arrayidx$i$i = (($this) + 1|0);
  $cond$i32 = $arrayidx$i$i;
 } else {
  $__data_$i$i = (($this) + 8|0);
  $5 = HEAP32[$__data_$i$i>>2]|0;
  $cond$i32 = $5;
 }
 $add$ptr = (($cond$i32) + ($cond$i21)|0);
 _memcpy(($add$ptr|0),($__s|0),($__n|0))|0;
 $add = (($cond$i21) + ($__n))|0;
 $6 = HEAP8[$this>>0]|0;
 $and$i$i23 = $6 & 1;
 $tobool$i$i24 = ($and$i$i23<<24>>24)==(0);
 if ($tobool$i$i24) {
  $shl$i$i = $add << 1;
  $conv$i$i26 = $shl$i$i&255;
  HEAP8[$this>>0] = $conv$i$i26;
 } else {
  $__size_$i2$i25 = (($this) + 4|0);
  HEAP32[$__size_$i2$i25>>2] = $add;
 }
 $arrayidx = (($cond$i32) + ($add)|0);
 HEAP8[$arrayidx>>0] = 0;
 STACKTOP = sp;return ($this|0);
}
function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE21__grow_by_and_replaceEjjjjjjPKc($this,$__old_cap,$__delta_cap,$__old_sz,$__n_copy,$__n_del,$__n_add,$__p_new_stuff) {
 $this = $this|0;
 $__old_cap = $__old_cap|0;
 $__delta_cap = $__delta_cap|0;
 $__old_sz = $__old_sz|0;
 $__n_copy = $__n_copy|0;
 $__n_del = $__n_del|0;
 $__n_add = $__n_add|0;
 $__p_new_stuff = $__p_new_stuff|0;
 var $$sroa$speculated = 0, $0 = 0, $1 = 0, $__data_$i = 0, $__data_$i$i = 0, $__size_$i = 0, $add = 0, $add$i$i = 0, $add$ptr = 0, $add$ptr29$sum = 0, $add$ptr30 = 0, $add$ptr32$sum = 0, $add$ptr33 = 0, $add44 = 0, $and$i$i = 0, $and$i$i30 = 0, $arrayidx = 0, $arrayidx$i$i = 0, $call$i$i = 0, $cmp = 0;
 var $cmp$i = 0, $cmp$i$i$i = 0, $cmp13 = 0, $cmp19 = 0, $cmp26 = 0, $cmp37 = 0, $cmp5 = 0, $cond = 0, $cond$i = 0, $mul = 0, $or$i = 0, $sub2 = 0, $sub24 = 0, $sub25 = 0, $tobool$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $sub2 = (-18 - ($__old_cap))|0;
 $cmp = ($sub2>>>0)<($__delta_cap>>>0);
 if ($cmp) {
  __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv(0);
  // unreachable;
 }
 $0 = HEAP8[$this>>0]|0;
 $and$i$i = $0 & 1;
 $tobool$i$i = ($and$i$i<<24>>24)==(0);
 if ($tobool$i$i) {
  $arrayidx$i$i = (($this) + 1|0);
  $cond$i = $arrayidx$i$i;
 } else {
  $__data_$i$i = (($this) + 8|0);
  $1 = HEAP32[$__data_$i$i>>2]|0;
  $cond$i = $1;
 }
 $cmp5 = ($__old_cap>>>0)<(2147483623);
 if ($cmp5) {
  $add = (($__delta_cap) + ($__old_cap))|0;
  $mul = $__old_cap << 1;
  $cmp$i$i$i = ($add>>>0)<($mul>>>0);
  $$sroa$speculated = $cmp$i$i$i ? $mul : $add;
  $cmp$i = ($$sroa$speculated>>>0)<(11);
  if ($cmp$i) {
   $cond = 11;
  } else {
   $add$i$i = (($$sroa$speculated) + 16)|0;
   $and$i$i30 = $add$i$i & -16;
   $cond = $and$i$i30;
  }
 } else {
  $cond = -17;
 }
 $call$i$i = (__Znwj($cond)|0);
 $cmp13 = ($__n_copy|0)==(0);
 if (!($cmp13)) {
  _memcpy(($call$i$i|0),($cond$i|0),($__n_copy|0))|0;
 }
 $cmp19 = ($__n_add|0)==(0);
 if (!($cmp19)) {
  $add$ptr = (($call$i$i) + ($__n_copy)|0);
  _memcpy(($add$ptr|0),($__p_new_stuff|0),($__n_add|0))|0;
 }
 $sub24 = (($__old_sz) - ($__n_del))|0;
 $cmp26 = ($sub24|0)==($__n_copy|0);
 if (!($cmp26)) {
  $sub25 = (($sub24) - ($__n_copy))|0;
  $add$ptr29$sum = (($__n_add) + ($__n_copy))|0;
  $add$ptr30 = (($call$i$i) + ($add$ptr29$sum)|0);
  $add$ptr32$sum = (($__n_del) + ($__n_copy))|0;
  $add$ptr33 = (($cond$i) + ($add$ptr32$sum)|0);
  _memcpy(($add$ptr30|0),($add$ptr33|0),($sub25|0))|0;
 }
 $cmp37 = ($__old_cap|0)==(10);
 if ($cmp37) {
  $__data_$i = (($this) + 8|0);
  HEAP32[$__data_$i>>2] = $call$i$i;
  $or$i = $cond | 1;
  HEAP32[$this>>2] = $or$i;
  $add44 = (($sub24) + ($__n_add))|0;
  $__size_$i = (($this) + 4|0);
  HEAP32[$__size_$i>>2] = $add44;
  $arrayidx = (($call$i$i) + ($add44)|0);
  HEAP8[$arrayidx>>0] = 0;
  STACKTOP = sp;return;
 }
 __ZdlPv($cond$i);
 $__data_$i = (($this) + 8|0);
 HEAP32[$__data_$i>>2] = $call$i$i;
 $or$i = $cond | 1;
 HEAP32[$this>>2] = $or$i;
 $add44 = (($sub24) + ($__n_add))|0;
 $__size_$i = (($this) + 4|0);
 HEAP32[$__size_$i>>2] = $add44;
 $arrayidx = (($call$i$i) + ($add44)|0);
 HEAP8[$arrayidx>>0] = 0;
 STACKTOP = sp;return;
}
function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9__grow_byEjjjjjj($this,$__old_cap,$__delta_cap,$__old_sz,$__n_copy,$__n_del,$__n_add) {
 $this = $this|0;
 $__old_cap = $__old_cap|0;
 $__delta_cap = $__delta_cap|0;
 $__old_sz = $__old_sz|0;
 $__n_copy = $__n_copy|0;
 $__n_del = $__n_del|0;
 $__n_add = $__n_add|0;
 var $$sroa$speculated = 0, $0 = 0, $1 = 0, $__data_$i = 0, $__data_$i$i = 0, $add = 0, $add$i$i = 0, $add$ptr$sum = 0, $add$ptr23 = 0, $add$ptr25$sum = 0, $add$ptr26 = 0, $and$i$i = 0, $and$i$i20 = 0, $arrayidx$i$i = 0, $call$i$i = 0, $cmp = 0, $cmp$i = 0, $cmp$i$i$i = 0, $cmp12 = 0, $cmp20 = 0;
 var $cmp30 = 0, $cmp4 = 0, $cond = 0, $cond$i = 0, $mul = 0, $or$i = 0, $sub = 0, $sub18 = 0, $sub19 = 0, $tobool$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $sub = (-17 - ($__old_cap))|0;
 $cmp = ($sub>>>0)<($__delta_cap>>>0);
 if ($cmp) {
  __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv(0);
  // unreachable;
 }
 $0 = HEAP8[$this>>0]|0;
 $and$i$i = $0 & 1;
 $tobool$i$i = ($and$i$i<<24>>24)==(0);
 if ($tobool$i$i) {
  $arrayidx$i$i = (($this) + 1|0);
  $cond$i = $arrayidx$i$i;
 } else {
  $__data_$i$i = (($this) + 8|0);
  $1 = HEAP32[$__data_$i$i>>2]|0;
  $cond$i = $1;
 }
 $cmp4 = ($__old_cap>>>0)<(2147483623);
 if ($cmp4) {
  $add = (($__delta_cap) + ($__old_cap))|0;
  $mul = $__old_cap << 1;
  $cmp$i$i$i = ($add>>>0)<($mul>>>0);
  $$sroa$speculated = $cmp$i$i$i ? $mul : $add;
  $cmp$i = ($$sroa$speculated>>>0)<(11);
  if ($cmp$i) {
   $cond = 11;
  } else {
   $add$i$i = (($$sroa$speculated) + 16)|0;
   $and$i$i20 = $add$i$i & -16;
   $cond = $and$i$i20;
  }
 } else {
  $cond = -17;
 }
 $call$i$i = (__Znwj($cond)|0);
 $cmp12 = ($__n_copy|0)==(0);
 if (!($cmp12)) {
  _memcpy(($call$i$i|0),($cond$i|0),($__n_copy|0))|0;
 }
 $sub18 = (($__old_sz) - ($__n_del))|0;
 $cmp20 = ($sub18|0)==($__n_copy|0);
 if (!($cmp20)) {
  $sub19 = (($sub18) - ($__n_copy))|0;
  $add$ptr$sum = (($__n_add) + ($__n_copy))|0;
  $add$ptr23 = (($call$i$i) + ($add$ptr$sum)|0);
  $add$ptr25$sum = (($__n_del) + ($__n_copy))|0;
  $add$ptr26 = (($cond$i) + ($add$ptr25$sum)|0);
  _memcpy(($add$ptr23|0),($add$ptr26|0),($sub19|0))|0;
 }
 $cmp30 = ($__old_cap|0)==(10);
 if ($cmp30) {
  $__data_$i = (($this) + 8|0);
  HEAP32[$__data_$i>>2] = $call$i$i;
  $or$i = $cond | 1;
  HEAP32[$this>>2] = $or$i;
  STACKTOP = sp;return;
 }
 __ZdlPv($cond$i);
 $__data_$i = (($this) + 8|0);
 HEAP32[$__data_$i>>2] = $call$i$i;
 $or$i = $cond | 1;
 HEAP32[$this>>2] = $or$i;
 STACKTOP = sp;return;
}
function __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6__initEPKwj($this,$__s,$__sz) {
 $this = $this|0;
 $__s = $__s|0;
 $__sz = $__sz|0;
 var $__data_$i = 0, $__data_$i10 = 0, $__p$0 = 0, $__size_$i9 = 0, $add$i$i = 0, $and$i$i = 0, $arrayidx = 0, $call$i$i = 0, $cmp = 0, $cmp2 = 0, $conv$i = 0, $mul$i$i = 0, $or$i = 0, $shl$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $cmp = ($__sz>>>0)>(1073741807);
 if ($cmp) {
  __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv(0);
  // unreachable;
 }
 $cmp2 = ($__sz>>>0)<(2);
 if ($cmp2) {
  $shl$i = $__sz << 1;
  $conv$i = $shl$i&255;
  HEAP8[$this>>0] = $conv$i;
  $__data_$i10 = (($this) + 4|0);
  $__p$0 = $__data_$i10;
  (_wmemcpy($__p$0,$__s,$__sz)|0);
  $arrayidx = (($__p$0) + ($__sz<<2)|0);
  HEAP32[$arrayidx>>2] = 0;
  STACKTOP = sp;return;
 } else {
  $add$i$i = (($__sz) + 4)|0;
  $and$i$i = $add$i$i & -4;
  $mul$i$i = $and$i$i << 2;
  $call$i$i = (__Znwj($mul$i$i)|0);
  $__data_$i = (($this) + 8|0);
  HEAP32[$__data_$i>>2] = $call$i$i;
  $or$i = $and$i$i | 1;
  HEAP32[$this>>2] = $or$i;
  $__size_$i9 = (($this) + 4|0);
  HEAP32[$__size_$i9>>2] = $__sz;
  $__p$0 = $call$i$i;
  (_wmemcpy($__p$0,$__s,$__sz)|0);
  $arrayidx = (($__p$0) + ($__sz<<2)|0);
  HEAP32[$arrayidx>>2] = 0;
  STACKTOP = sp;return;
 }
}
function __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6__initEjw($this,$__n,$__c) {
 $this = $this|0;
 $__n = $__n|0;
 $__c = $__c|0;
 var $__data_$i = 0, $__data_$i10 = 0, $__p$0 = 0, $__size_$i9 = 0, $add$i$i = 0, $and$i$i = 0, $arrayidx = 0, $call$i$i = 0, $cmp = 0, $cmp2 = 0, $conv$i = 0, $mul$i$i = 0, $or$i = 0, $shl$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $cmp = ($__n>>>0)>(1073741807);
 if ($cmp) {
  __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv(0);
  // unreachable;
 }
 $cmp2 = ($__n>>>0)<(2);
 if ($cmp2) {
  $shl$i = $__n << 1;
  $conv$i = $shl$i&255;
  HEAP8[$this>>0] = $conv$i;
  $__data_$i10 = (($this) + 4|0);
  $__p$0 = $__data_$i10;
  (_wmemset($__p$0,$__c,$__n)|0);
  $arrayidx = (($__p$0) + ($__n<<2)|0);
  HEAP32[$arrayidx>>2] = 0;
  STACKTOP = sp;return;
 } else {
  $add$i$i = (($__n) + 4)|0;
  $and$i$i = $add$i$i & -4;
  $mul$i$i = $and$i$i << 2;
  $call$i$i = (__Znwj($mul$i$i)|0);
  $__data_$i = (($this) + 8|0);
  HEAP32[$__data_$i>>2] = $call$i$i;
  $or$i = $and$i$i | 1;
  HEAP32[$this>>2] = $or$i;
  $__size_$i9 = (($this) + 4|0);
  HEAP32[$__size_$i9>>2] = $__n;
  $__p$0 = $call$i$i;
  (_wmemset($__p$0,$__c,$__n)|0);
  $arrayidx = (($__p$0) + ($__n<<2)|0);
  HEAP32[$arrayidx>>2] = 0;
  STACKTOP = sp;return;
 }
}
function __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6__initIPKwEENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueEvE4typeESA_SA_($this,$__first,$__last) {
 $this = $this|0;
 $__first = $__first|0;
 $__last = $__last|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $__data_$i = 0, $__data_$i11 = 0, $__first$addr$016 = 0, $__p$0$lcssa = 0, $__p$0$ph = 0, $__p$015 = 0, $__size_$i = 0, $add$i$i = 0, $and$i$i = 0, $call$i$i = 0, $cmp = 0, $cmp11 = 0, $cmp1114 = 0, $cmp3 = 0, $conv$i = 0, $incdec$ptr = 0;
 var $incdec$ptr12 = 0, $mul$i$i = 0, $or$i = 0, $scevgep = 0, $scevgep19 = 0, $shl$i13 = 0, $sub$ptr$div$i$i = 0, $sub$ptr$lhs$cast$i$i = 0, $sub$ptr$rhs$cast$i$i = 0, $sub$ptr$sub$i$i = 0, $uglygep = 0, $uglygep18 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $sub$ptr$rhs$cast$i$i = $__first;
 $sub$ptr$lhs$cast$i$i = $__last;
 $sub$ptr$sub$i$i = (($sub$ptr$lhs$cast$i$i) - ($sub$ptr$rhs$cast$i$i))|0;
 $sub$ptr$div$i$i = $sub$ptr$sub$i$i >> 2;
 $cmp = ($sub$ptr$div$i$i>>>0)>(1073741807);
 if ($cmp) {
  __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv(0);
  // unreachable;
 }
 $cmp3 = ($sub$ptr$div$i$i>>>0)<(2);
 if ($cmp3) {
  $shl$i13 = $sub$ptr$sub$i$i >>> 1;
  $conv$i = $shl$i13&255;
  HEAP8[$this>>0] = $conv$i;
  $__data_$i11 = (($this) + 4|0);
  $__p$0$ph = $__data_$i11;
 } else {
  $add$i$i = (($sub$ptr$div$i$i) + 4)|0;
  $and$i$i = $add$i$i & -4;
  $mul$i$i = $and$i$i << 2;
  $call$i$i = (__Znwj($mul$i$i)|0);
  $__data_$i = (($this) + 8|0);
  HEAP32[$__data_$i>>2] = $call$i$i;
  $or$i = $and$i$i | 1;
  HEAP32[$this>>2] = $or$i;
  $__size_$i = (($this) + 4|0);
  HEAP32[$__size_$i>>2] = $sub$ptr$div$i$i;
  $__p$0$ph = $call$i$i;
 }
 $cmp1114 = ($__first|0)==($__last|0);
 if ($cmp1114) {
  $__p$0$lcssa = $__p$0$ph;
  HEAP32[$__p$0$lcssa>>2] = 0;
  STACKTOP = sp;return;
 }
 $scevgep = (($__last) + -4|0);
 $0 = (0 - ($sub$ptr$rhs$cast$i$i))|0;
 $uglygep = (($scevgep) + ($0)|0);
 $uglygep18 = $uglygep;
 $1 = $uglygep18 >>> 2;
 $2 = (($1) + 1)|0;
 $__first$addr$016 = $__first;$__p$015 = $__p$0$ph;
 while(1) {
  $3 = HEAP32[$__first$addr$016>>2]|0;
  HEAP32[$__p$015>>2] = $3;
  $incdec$ptr = (($__first$addr$016) + 4|0);
  $incdec$ptr12 = (($__p$015) + 4|0);
  $cmp11 = ($incdec$ptr|0)==($__last|0);
  if ($cmp11) {
   break;
  } else {
   $__first$addr$016 = $incdec$ptr;$__p$015 = $incdec$ptr12;
  }
 }
 $scevgep19 = (($__p$0$ph) + ($2<<2)|0);
 $__p$0$lcssa = $scevgep19;
 HEAP32[$__p$0$lcssa>>2] = 0;
 STACKTOP = sp;return;
}
function __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($this);
 STACKTOP = sp;return;
}
function __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $__data_$i = 0, $and$i = 0, $tobool$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[$this>>0]|0;
 $and$i = $0 & 1;
 $tobool$i = ($and$i<<24>>24)==(0);
 if ($tobool$i) {
  STACKTOP = sp;return;
 }
 $__data_$i = (($this) + 8|0);
 $1 = HEAP32[$__data_$i>>2]|0;
 __ZdlPv($1);
 STACKTOP = sp;return;
}
function __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw($this,$__s) {
 $this = $this|0;
 $__s = $__s|0;
 var $call$i = 0, $call2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $call$i = (_wcslen($__s)|0);
 $call2 = (__ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKwj($this,$__s,$call$i)|0);
 STACKTOP = sp;return ($call2|0);
}
function __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKwj($this,$__s,$__n) {
 $this = $this|0;
 $__s = $__s|0;
 $__n = $__n|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $__data_$i$i = 0, $__data_$i1$i = 0, $__size_$i2$i = 0, $__size_$i2$i26 = 0, $and$i$i = 0, $and$i$i18 = 0, $and$i$i24 = 0, $and$i1$i = 0, $arrayidx = 0, $cmp = 0, $cond$i = 0, $cond$i16 = 0, $cond$i22 = 0;
 var $conv$i$i = 0, $conv$i$i27 = 0, $phitmp$i = 0, $shl$i$i = 0, $shr1$i$i = 0, $sub = 0, $tobool$i$i = 0, $tobool$i$i19 = 0, $tobool$i$i25 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[$this>>0]|0;
 $and$i$i = $0 & 1;
 $tobool$i$i = ($and$i$i<<24>>24)==(0);
 if ($tobool$i$i) {
  $3 = $0;$cond$i = 1;
 } else {
  $1 = HEAP32[$this>>2]|0;
  $and$i1$i = $1 & -2;
  $phitmp$i = (($and$i1$i) + -1)|0;
  $2 = $1&255;
  $3 = $2;$cond$i = $phitmp$i;
 }
 $cmp = ($cond$i>>>0)<($__n>>>0);
 $and$i$i18 = $3 & 1;
 $tobool$i$i19 = ($and$i$i18<<24>>24)==(0);
 if ($cmp) {
  if ($tobool$i$i19) {
   $conv$i$i = $3&255;
   $shr1$i$i = $conv$i$i >>> 1;
   $cond$i22 = $shr1$i$i;
  } else {
   $__size_$i2$i = (($this) + 4|0);
   $6 = HEAP32[$__size_$i2$i>>2]|0;
   $cond$i22 = $6;
  }
  $sub = (($__n) - ($cond$i))|0;
  __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE21__grow_by_and_replaceEjjjjjjPKw($this,$cond$i,$sub,$cond$i22,0,$cond$i22,$__n,$__s);
  STACKTOP = sp;return ($this|0);
 }
 if ($tobool$i$i19) {
  $__data_$i$i = (($this) + 4|0);
  $cond$i16 = $__data_$i$i;
 } else {
  $__data_$i1$i = (($this) + 8|0);
  $4 = HEAP32[$__data_$i1$i>>2]|0;
  $cond$i16 = $4;
 }
 (_wmemmove($cond$i16,$__s,$__n)|0);
 $arrayidx = (($cond$i16) + ($__n<<2)|0);
 HEAP32[$arrayidx>>2] = 0;
 $5 = HEAP8[$this>>0]|0;
 $and$i$i24 = $5 & 1;
 $tobool$i$i25 = ($and$i$i24<<24>>24)==(0);
 if ($tobool$i$i25) {
  $shl$i$i = $__n << 1;
  $conv$i$i27 = $shl$i$i&255;
  HEAP8[$this>>0] = $conv$i$i27;
  STACKTOP = sp;return ($this|0);
 } else {
  $__size_$i2$i26 = (($this) + 4|0);
  HEAP32[$__size_$i2$i26>>2] = $__n;
  STACKTOP = sp;return ($this|0);
 }
 return 0|0;
}
function __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE7reserveEj($this,$__res_arg) {
 $this = $this|0;
 $__res_arg = $__res_arg|0;
 var $$sroa$speculated = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__data_$i = 0, $__data_$i$i = 0, $__data_$i1$i = 0, $__data_$i34 = 0, $__data_$i35 = 0, $__new_data$1 = 0, $__now_long$0$off0 = 0;
 var $__p$0 = 0, $__size_$i2$i = 0, $__size_$i2$i14 = 0, $__size_$i5 = 0, $__was_long$0$off0 = 0, $add = 0, $add$i$i = 0, $add27 = 0, $add35 = 0, $and$i = 0, $and$i$i = 0, $and$i$i12 = 0, $and$i$i30 = 0, $and$i$i7 = 0, $and$i1$i = 0, $call$i$i = 0, $call$i$i$sink = 0, $call$i$i28 = 0, $cmp = 0, $cmp$i = 0;
 var $cmp$i$i$i = 0, $cmp12 = 0, $cmp6 = 0, $cmp8 = 0, $cond$i = 0, $cond$i10 = 0, $cond$i19 = 0, $cond$i33 = 0, $conv$i = 0, $conv$i$i = 0, $conv$i$i16 = 0, $mul$i$i29 = 0, $or$i = 0, $phitmp$i = 0, $phitmp$i31 = 0, $shl$i = 0, $shr1$i$i = 0, $shr1$i$i17 = 0, $tobool$i$i = 0, $tobool$i$i13 = 0;
 var $tobool$i$i23 = 0, $tobool$i$i8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $cmp = ($__res_arg>>>0)>(1073741807);
 if ($cmp) {
  __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv(0);
  // unreachable;
 }
 $0 = HEAP8[$this>>0]|0;
 $and$i$i = $0 & 1;
 $tobool$i$i = ($and$i$i<<24>>24)==(0);
 if ($tobool$i$i) {
  $3 = $0;$cond$i = 1;
 } else {
  $1 = HEAP32[$this>>2]|0;
  $and$i1$i = $1 & -2;
  $phitmp$i = (($and$i1$i) + -1)|0;
  $2 = $1&255;
  $3 = $2;$cond$i = $phitmp$i;
 }
 $and$i$i7 = $3 & 1;
 $tobool$i$i8 = ($and$i$i7<<24>>24)==(0);
 if ($tobool$i$i8) {
  $conv$i$i = $3&255;
  $shr1$i$i = $conv$i$i >>> 1;
  $cond$i10 = $shr1$i$i;
 } else {
  $__size_$i2$i = (($this) + 4|0);
  $4 = HEAP32[$__size_$i2$i>>2]|0;
  $cond$i10 = $4;
 }
 $cmp$i$i$i = ($cond$i10>>>0)>($__res_arg>>>0);
 $$sroa$speculated = $cmp$i$i$i ? $cond$i10 : $__res_arg;
 $cmp$i = ($$sroa$speculated>>>0)<(2);
 if ($cmp$i) {
  $cond$i33 = 1;
 } else {
  $add$i$i = (($$sroa$speculated) + 4)|0;
  $and$i$i30 = $add$i$i & -4;
  $phitmp$i31 = (($and$i$i30) + -1)|0;
  $cond$i33 = $phitmp$i31;
 }
 $cmp6 = ($cond$i33|0)==($cond$i|0);
 if ($cmp6) {
  STACKTOP = sp;return;
 }
 $cmp8 = ($cond$i33|0)==(1);
 do {
  if ($cmp8) {
   $__data_$i35 = (($this) + 4|0);
   $__data_$i34 = (($this) + 8|0);
   $5 = HEAP32[$__data_$i34>>2]|0;
   $__new_data$1 = $__data_$i35;$__now_long$0$off0 = 0;$__p$0 = $5;$__was_long$0$off0 = 1;
  } else {
   $cmp12 = ($cond$i33>>>0)>($cond$i>>>0);
   $add = $cond$i33 << 2;
   $mul$i$i29 = (($add) + 4)|0;
   if ($cmp12) {
    $call$i$i = (__Znwj($mul$i$i29)|0);
    $call$i$i$sink = $call$i$i;
   } else {
    __THREW__ = 0;
    $call$i$i28 = (invoke_ii(377,($mul$i$i29|0))|0);
    $6 = __THREW__; __THREW__ = 0;
    $7 = $6&1;
    if ($7) {
     $8 = ___cxa_find_matching_catch(0|0)|0;
     $9 = tempRet0;
     (___cxa_begin_catch(($8|0))|0);
     ___cxa_end_catch();
     STACKTOP = sp;return;
    } else {
     $call$i$i$sink = $call$i$i28;
    }
   }
   $and$i = $3 & 1;
   $tobool$i$i23 = ($and$i<<24>>24)==(0);
   if ($tobool$i$i23) {
    $__data_$i$i = (($this) + 4|0);
    $__new_data$1 = $call$i$i$sink;$__now_long$0$off0 = 1;$__p$0 = $__data_$i$i;$__was_long$0$off0 = 0;
    break;
   } else {
    $__data_$i1$i = (($this) + 8|0);
    $10 = HEAP32[$__data_$i1$i>>2]|0;
    $__new_data$1 = $call$i$i$sink;$__now_long$0$off0 = 1;$__p$0 = $10;$__was_long$0$off0 = 1;
    break;
   }
  }
 } while(0);
 $and$i$i12 = $3 & 1;
 $tobool$i$i13 = ($and$i$i12<<24>>24)==(0);
 if ($tobool$i$i13) {
  $conv$i$i16 = $3&255;
  $shr1$i$i17 = $conv$i$i16 >>> 1;
  $cond$i19 = $shr1$i$i17;
 } else {
  $__size_$i2$i14 = (($this) + 4|0);
  $11 = HEAP32[$__size_$i2$i14>>2]|0;
  $cond$i19 = $11;
 }
 $add27 = (($cond$i19) + 1)|0;
 (_wmemcpy($__new_data$1,$__p$0,$add27)|0);
 if ($__was_long$0$off0) {
  __ZdlPv($__p$0);
 }
 if ($__now_long$0$off0) {
  $add35 = (($cond$i33) + 1)|0;
  $or$i = $add35 | 1;
  HEAP32[$this>>2] = $or$i;
  $__size_$i5 = (($this) + 4|0);
  HEAP32[$__size_$i5>>2] = $cond$i10;
  $__data_$i = (($this) + 8|0);
  HEAP32[$__data_$i>>2] = $__new_data$1;
  STACKTOP = sp;return;
 } else {
  $shl$i = $cond$i10 << 1;
  $conv$i = $shl$i&255;
  HEAP8[$this>>0] = $conv$i;
  STACKTOP = sp;return;
 }
}
function __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE9push_backEw($this,$__c) {
 $this = $this|0;
 $__c = $__c|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $__cap$0 = 0, $__data_$i = 0, $__data_$i13 = 0, $__p$0 = 0, $__p$0$sum$pre = 0, $__p$0$sum$pre$phiZZZ2D = 0, $__size_$i11 = 0, $__size_$i19 = 0, $__sz$0 = 0, $add = 0, $add16 = 0, $and$i = 0, $and$i15 = 0, $and$i20 = 0, $call12$pn = 0;
 var $cmp = 0, $conv$i = 0, $conv$i18 = 0, $incdec$ptr = 0, $shl$i = 0, $shr1$i = 0, $sub = 0, $tobool$i = 0, $tobool$i16 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[$this>>0]|0;
 $and$i = $0 & 1;
 $tobool$i = ($and$i<<24>>24)!=(0);
 if ($tobool$i) {
  $1 = HEAP32[$this>>2]|0;
  $and$i20 = $1 & -2;
  $sub = (($and$i20) + -1)|0;
  $__size_$i19 = (($this) + 4|0);
  $2 = HEAP32[$__size_$i19>>2]|0;
  $__cap$0 = $sub;$__sz$0 = $2;
 } else {
  $conv$i18 = $0&255;
  $shr1$i = $conv$i18 >>> 1;
  $__cap$0 = 1;$__sz$0 = $shr1$i;
 }
 $cmp = ($__sz$0|0)==($__cap$0|0);
 if ($cmp) {
  __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE9__grow_byEjjjjjj($this,$__cap$0,1,$__cap$0,$__cap$0,0,0);
  $3 = HEAP8[$this>>0]|0;
  $and$i15 = $3 & 1;
  $tobool$i16 = ($and$i15<<24>>24)==(0);
  if ($tobool$i16) {
   label = 7;
  } else {
   label = 8;
  }
 } else {
  if ($tobool$i) {
   label = 8;
  } else {
   label = 7;
  }
 }
 if ((label|0) == 7) {
  $__data_$i13 = (($this) + 4|0);
  $add = $__sz$0 << 1;
  $shl$i = (($add) + 2)|0;
  $conv$i = $shl$i&255;
  HEAP8[$this>>0] = $conv$i;
  $__p$0$sum$pre = (($__sz$0) + 1)|0;
  $__p$0$sum$pre$phiZZZ2D = $__p$0$sum$pre;$call12$pn = $__data_$i13;
  $__p$0 = (($call12$pn) + ($__sz$0<<2)|0);
  HEAP32[$__p$0>>2] = $__c;
  $incdec$ptr = (($call12$pn) + ($__p$0$sum$pre$phiZZZ2D<<2)|0);
  HEAP32[$incdec$ptr>>2] = 0;
  STACKTOP = sp;return;
 }
 else if ((label|0) == 8) {
  $__data_$i = (($this) + 8|0);
  $4 = HEAP32[$__data_$i>>2]|0;
  $add16 = (($__sz$0) + 1)|0;
  $__size_$i11 = (($this) + 4|0);
  HEAP32[$__size_$i11>>2] = $add16;
  $__p$0$sum$pre$phiZZZ2D = $add16;$call12$pn = $4;
  $__p$0 = (($call12$pn) + ($__sz$0<<2)|0);
  HEAP32[$__p$0>>2] = $__c;
  $incdec$ptr = (($call12$pn) + ($__p$0$sum$pre$phiZZZ2D<<2)|0);
  HEAP32[$incdec$ptr>>2] = 0;
  STACKTOP = sp;return;
 }
}
function __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE21__grow_by_and_replaceEjjjjjjPKw($this,$__old_cap,$__delta_cap,$__old_sz,$__n_copy,$__n_del,$__n_add,$__p_new_stuff) {
 $this = $this|0;
 $__old_cap = $__old_cap|0;
 $__delta_cap = $__delta_cap|0;
 $__old_sz = $__old_sz|0;
 $__n_copy = $__n_copy|0;
 $__n_del = $__n_del|0;
 $__n_add = $__n_add|0;
 $__p_new_stuff = $__p_new_stuff|0;
 var $$sroa$speculated = 0, $0 = 0, $1 = 0, $__data_$i = 0, $__data_$i$i = 0, $__data_$i1$i = 0, $__size_$i = 0, $add = 0, $add$i$i = 0, $add$ptr = 0, $add$ptr29$sum = 0, $add$ptr30 = 0, $add$ptr32$sum = 0, $add$ptr33 = 0, $add44 = 0, $and$i$i = 0, $and$i$i31 = 0, $arrayidx = 0, $call$i$i = 0, $cmp = 0;
 var $cmp$i = 0, $cmp$i$i$i = 0, $cmp13 = 0, $cmp19 = 0, $cmp26 = 0, $cmp37 = 0, $cmp5 = 0, $cond = 0, $cond$i = 0, $mul = 0, $mul$i$i = 0, $or$i = 0, $sub2 = 0, $sub24 = 0, $sub25 = 0, $tobool$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $sub2 = (1073741806 - ($__old_cap))|0;
 $cmp = ($sub2>>>0)<($__delta_cap>>>0);
 if ($cmp) {
  __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv(0);
  // unreachable;
 }
 $0 = HEAP8[$this>>0]|0;
 $and$i$i = $0 & 1;
 $tobool$i$i = ($and$i$i<<24>>24)==(0);
 if ($tobool$i$i) {
  $__data_$i$i = (($this) + 4|0);
  $cond$i = $__data_$i$i;
 } else {
  $__data_$i1$i = (($this) + 8|0);
  $1 = HEAP32[$__data_$i1$i>>2]|0;
  $cond$i = $1;
 }
 $cmp5 = ($__old_cap>>>0)<(536870887);
 if ($cmp5) {
  $add = (($__delta_cap) + ($__old_cap))|0;
  $mul = $__old_cap << 1;
  $cmp$i$i$i = ($add>>>0)<($mul>>>0);
  $$sroa$speculated = $cmp$i$i$i ? $mul : $add;
  $cmp$i = ($$sroa$speculated>>>0)<(2);
  if ($cmp$i) {
   $cond = 2;
  } else {
   $add$i$i = (($$sroa$speculated) + 4)|0;
   $and$i$i31 = $add$i$i & -4;
   $cond = $and$i$i31;
  }
 } else {
  $cond = 1073741807;
 }
 $mul$i$i = $cond << 2;
 $call$i$i = (__Znwj($mul$i$i)|0);
 $cmp13 = ($__n_copy|0)==(0);
 if (!($cmp13)) {
  (_wmemcpy($call$i$i,$cond$i,$__n_copy)|0);
 }
 $cmp19 = ($__n_add|0)==(0);
 if (!($cmp19)) {
  $add$ptr = (($call$i$i) + ($__n_copy<<2)|0);
  (_wmemcpy($add$ptr,$__p_new_stuff,$__n_add)|0);
 }
 $sub24 = (($__old_sz) - ($__n_del))|0;
 $cmp26 = ($sub24|0)==($__n_copy|0);
 if (!($cmp26)) {
  $sub25 = (($sub24) - ($__n_copy))|0;
  $add$ptr29$sum = (($__n_add) + ($__n_copy))|0;
  $add$ptr30 = (($call$i$i) + ($add$ptr29$sum<<2)|0);
  $add$ptr32$sum = (($__n_del) + ($__n_copy))|0;
  $add$ptr33 = (($cond$i) + ($add$ptr32$sum<<2)|0);
  (_wmemcpy($add$ptr30,$add$ptr33,$sub25)|0);
 }
 $cmp37 = ($__old_cap|0)==(1);
 if ($cmp37) {
  $__data_$i = (($this) + 8|0);
  HEAP32[$__data_$i>>2] = $call$i$i;
  $or$i = $cond | 1;
  HEAP32[$this>>2] = $or$i;
  $add44 = (($sub24) + ($__n_add))|0;
  $__size_$i = (($this) + 4|0);
  HEAP32[$__size_$i>>2] = $add44;
  $arrayidx = (($call$i$i) + ($add44<<2)|0);
  HEAP32[$arrayidx>>2] = 0;
  STACKTOP = sp;return;
 }
 __ZdlPv($cond$i);
 $__data_$i = (($this) + 8|0);
 HEAP32[$__data_$i>>2] = $call$i$i;
 $or$i = $cond | 1;
 HEAP32[$this>>2] = $or$i;
 $add44 = (($sub24) + ($__n_add))|0;
 $__size_$i = (($this) + 4|0);
 HEAP32[$__size_$i>>2] = $add44;
 $arrayidx = (($call$i$i) + ($add44<<2)|0);
 HEAP32[$arrayidx>>2] = 0;
 STACKTOP = sp;return;
}
function __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE9__grow_byEjjjjjj($this,$__old_cap,$__delta_cap,$__old_sz,$__n_copy,$__n_del,$__n_add) {
 $this = $this|0;
 $__old_cap = $__old_cap|0;
 $__delta_cap = $__delta_cap|0;
 $__old_sz = $__old_sz|0;
 $__n_copy = $__n_copy|0;
 $__n_del = $__n_del|0;
 $__n_add = $__n_add|0;
 var $$sroa$speculated = 0, $0 = 0, $1 = 0, $__data_$i = 0, $__data_$i$i = 0, $__data_$i1$i = 0, $add = 0, $add$i$i = 0, $add$ptr$sum = 0, $add$ptr23 = 0, $add$ptr25$sum = 0, $add$ptr26 = 0, $and$i$i = 0, $and$i$i21 = 0, $call$i$i = 0, $cmp = 0, $cmp$i = 0, $cmp$i$i$i = 0, $cmp12 = 0, $cmp20 = 0;
 var $cmp30 = 0, $cmp4 = 0, $cond = 0, $cond$i = 0, $mul = 0, $mul$i$i = 0, $or$i = 0, $sub = 0, $sub18 = 0, $sub19 = 0, $tobool$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $sub = (1073741807 - ($__old_cap))|0;
 $cmp = ($sub>>>0)<($__delta_cap>>>0);
 if ($cmp) {
  __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv(0);
  // unreachable;
 }
 $0 = HEAP8[$this>>0]|0;
 $and$i$i = $0 & 1;
 $tobool$i$i = ($and$i$i<<24>>24)==(0);
 if ($tobool$i$i) {
  $__data_$i$i = (($this) + 4|0);
  $cond$i = $__data_$i$i;
 } else {
  $__data_$i1$i = (($this) + 8|0);
  $1 = HEAP32[$__data_$i1$i>>2]|0;
  $cond$i = $1;
 }
 $cmp4 = ($__old_cap>>>0)<(536870887);
 if ($cmp4) {
  $add = (($__delta_cap) + ($__old_cap))|0;
  $mul = $__old_cap << 1;
  $cmp$i$i$i = ($add>>>0)<($mul>>>0);
  $$sroa$speculated = $cmp$i$i$i ? $mul : $add;
  $cmp$i = ($$sroa$speculated>>>0)<(2);
  if ($cmp$i) {
   $cond = 2;
  } else {
   $add$i$i = (($$sroa$speculated) + 4)|0;
   $and$i$i21 = $add$i$i & -4;
   $cond = $and$i$i21;
  }
 } else {
  $cond = 1073741807;
 }
 $mul$i$i = $cond << 2;
 $call$i$i = (__Znwj($mul$i$i)|0);
 $cmp12 = ($__n_copy|0)==(0);
 if (!($cmp12)) {
  (_wmemcpy($call$i$i,$cond$i,$__n_copy)|0);
 }
 $sub18 = (($__old_sz) - ($__n_del))|0;
 $cmp20 = ($sub18|0)==($__n_copy|0);
 if (!($cmp20)) {
  $sub19 = (($sub18) - ($__n_copy))|0;
  $add$ptr$sum = (($__n_add) + ($__n_copy))|0;
  $add$ptr23 = (($call$i$i) + ($add$ptr$sum<<2)|0);
  $add$ptr25$sum = (($__n_del) + ($__n_copy))|0;
  $add$ptr26 = (($cond$i) + ($add$ptr25$sum<<2)|0);
  (_wmemcpy($add$ptr23,$add$ptr26,$sub19)|0);
 }
 $cmp30 = ($__old_cap|0)==(1);
 if ($cmp30) {
  $__data_$i = (($this) + 8|0);
  HEAP32[$__data_$i>>2] = $call$i$i;
  $or$i = $cond | 1;
  HEAP32[$this>>2] = $or$i;
  STACKTOP = sp;return;
 }
 __ZdlPv($cond$i);
 $__data_$i = (($this) + 8|0);
 HEAP32[$__data_$i>>2] = $call$i$i;
 $or$i = $cond | 1;
 HEAP32[$this>>2] = $or$i;
 STACKTOP = sp;return;
}
function __ZNSt3__18ios_base5clearEj($this,$state) {
 $this = $this|0;
 $state = $state|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__exceptions_ = 0, $__rdbuf_ = 0, $__rdstate_ = 0, $__rdstate_2 = 0, $and = 0, $cmp = 0, $cond = 0, $exception = 0, $or = 0, $or5 = 0;
 var $ref$tmp = 0, $tobool = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $ref$tmp = sp;
 $__rdbuf_ = (($this) + 24|0);
 $0 = HEAP32[$__rdbuf_>>2]|0;
 $tobool = ($0|0)==(0|0);
 if ($tobool) {
  $or = $state | 1;
  $__rdstate_2 = (($this) + 16|0);
  HEAP32[$__rdstate_2>>2] = $or;
 } else {
  $__rdstate_ = (($this) + 16|0);
  HEAP32[$__rdstate_>>2] = $state;
 }
 $cond = $tobool&1;
 $or5 = $cond | $state;
 $__exceptions_ = (($this) + 20|0);
 $1 = HEAP32[$__exceptions_>>2]|0;
 $and = $or5 & $1;
 $cmp = ($and|0)==(0);
 if ($cmp) {
  STACKTOP = sp;return;
 }
 $exception = (___cxa_allocate_exception(16)|0);
 (__ZNSt3__117iostream_categoryEv()|0);
 $2 = $ref$tmp;
 $3 = $2;
 HEAP32[$3>>2] = 1;
 $4 = (($2) + 4)|0;
 $5 = $4;
 HEAP32[$5>>2] = (2192);
 __THREW__ = 0;
 invoke_viii(378,($exception|0),(2248|0),($ref$tmp|0));
 $6 = __THREW__; __THREW__ = 0;
 $7 = $6&1;
 if ($7) {
  $8 = ___cxa_find_matching_catch()|0;
  $9 = tempRet0;
  ___cxa_free_exception(($exception|0));
  ___resumeException($8|0);
  // unreachable;
 } else {
  ___cxa_throw(($exception|0),(2296|0),(72|0));
  // unreachable;
 }
}
function __ZNSt3__18ios_baseD2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $__fn_ = 0, $__iarray_ = 0, $__index_ = 0, $__loc_ = 0, $__parray_ = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = ((2232 + 8|0));
 __THREW__ = 0;
 invoke_vii(379,($this|0),0);
 $0 = __THREW__; __THREW__ = 0;
 $1 = $0&1;
 if ($1) {
  $6 = ___cxa_find_matching_catch(0|0)|0;
  $7 = tempRet0;
  ___clang_call_terminate($6);
  // unreachable;
 } else {
  $__loc_ = (($this) + 28|0);
  __ZNSt3__16localeD2Ev($__loc_);
  $__fn_ = (($this) + 32|0);
  $2 = HEAP32[$__fn_>>2]|0;
  _free($2);
  $__index_ = (($this) + 36|0);
  $3 = HEAP32[$__index_>>2]|0;
  _free($3);
  $__iarray_ = (($this) + 48|0);
  $4 = HEAP32[$__iarray_>>2]|0;
  _free($4);
  $__parray_ = (($this) + 60|0);
  $5 = HEAP32[$__parray_>>2]|0;
  _free($5);
  STACKTOP = sp;return;
 }
}
function __ZNSt3__18ios_base16__call_callbacksENS0_5eventE($this,$ev) {
 $this = $this|0;
 $ev = $ev|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $__event_size_ = 0, $__fn_ = 0, $__index_ = 0, $arrayidx = 0, $arrayidx2 = 0, $dec = 0, $i$05 = 0, $tobool = 0, $tobool4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $__event_size_ = (($this) + 40|0);
 $0 = HEAP32[$__event_size_>>2]|0;
 $tobool4 = ($0|0)==(0);
 if ($tobool4) {
  STACKTOP = sp;return;
 }
 $__fn_ = (($this) + 32|0);
 $__index_ = (($this) + 36|0);
 $i$05 = $0;
 while(1) {
  $dec = (($i$05) + -1)|0;
  $1 = HEAP32[$__fn_>>2]|0;
  $arrayidx = (($1) + ($dec<<2)|0);
  $2 = HEAP32[$arrayidx>>2]|0;
  $3 = HEAP32[$__index_>>2]|0;
  $arrayidx2 = (($3) + ($dec<<2)|0);
  $4 = HEAP32[$arrayidx2>>2]|0;
  FUNCTION_TABLE_viii[$2 & 511]($ev,$this,$4);
  $tobool = ($dec|0)==(0);
  if ($tobool) {
   break;
  } else {
   $i$05 = $dec;
  }
 }
 STACKTOP = sp;return;
}
function __ZNKSt3__18ios_base6getlocEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var $__loc_ = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $__loc_ = (($this) + 28|0);
 __ZNSt3__16localeC2ERKS0_($agg$result,$__loc_);
 STACKTOP = sp;return;
}
function __ZNSt3__18ios_base4initEPv($this,$sb) {
 $this = $this|0;
 $sb = $sb|0;
 var $__exceptions_ = 0, $__fmtflags_ = 0, $__fn_ = 0, $__loc_ = 0, $__precision_ = 0, $__rdbuf_ = 0, $__rdstate_ = 0, $__width_ = 0, $cond = 0, $not$tobool = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 $__rdbuf_ = (($this) + 24|0);
 HEAP32[$__rdbuf_>>2] = $sb;
 $not$tobool = ($sb|0)==(0|0);
 $cond = $not$tobool&1;
 $__rdstate_ = (($this) + 16|0);
 HEAP32[$__rdstate_>>2] = $cond;
 $__exceptions_ = (($this) + 20|0);
 HEAP32[$__exceptions_>>2] = 0;
 $__fmtflags_ = (($this) + 4|0);
 HEAP32[$__fmtflags_>>2] = 4098;
 $__width_ = (($this) + 12|0);
 HEAP32[$__width_>>2] = 0;
 $__precision_ = (($this) + 8|0);
 HEAP32[$__precision_>>2] = 6;
 $__fn_ = (($this) + 32|0);
 $__loc_ = (($this) + 28|0);
 dest=$__fn_+0|0; stop=dest+40|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 __ZNSt3__16localeC2Ev($__loc_);
 STACKTOP = sp;return;
}
function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEED0Ev($this) {
 $this = $this|0;
 var $__loc_$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = ((1848 + 8|0));
 $__loc_$i$i = (($this) + 4|0);
 __ZNSt3__16localeD2Ev($__loc_$i$i);
 __ZdlPv($this);
 STACKTOP = sp;return;
}
function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEED1Ev($this) {
 $this = $this|0;
 var $__loc_$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = ((1848 + 8|0));
 $__loc_$i = (($this) + 4|0);
 __ZNSt3__16localeD2Ev($__loc_$i);
 STACKTOP = sp;return;
}
function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEED2Ev($this) {
 $this = $this|0;
 var $__loc_ = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = ((1848 + 8|0));
 $__loc_ = (($this) + 4|0);
 __ZNSt3__16localeD2Ev($__loc_);
 STACKTOP = sp;return;
}
function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEEC2Ev($this) {
 $this = $this|0;
 var $__binp_ = 0, $__loc_ = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = ((1848 + 8|0));
 $__loc_ = (($this) + 4|0);
 __ZNSt3__16localeC2Ev($__loc_);
 $__binp_ = (($this) + 8|0);
 ;HEAP32[$__binp_+0>>2]=0|0;HEAP32[$__binp_+4>>2]=0|0;HEAP32[$__binp_+8>>2]=0|0;HEAP32[$__binp_+12>>2]=0|0;HEAP32[$__binp_+16>>2]=0|0;HEAP32[$__binp_+20>>2]=0|0;
 STACKTOP = sp;return;
}
function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE5imbueERKNS_6localeE($this,$0) {
 $this = $this|0;
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return;
}
function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE6setbufEPci($this,$0,$1) {
 $this = $this|0;
 $0 = $0|0;
 $1 = $1|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return ($this|0);
}
function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE7seekoffExNS_8ios_base7seekdirEj($agg$result,$this,$0,$1,$2,$3) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__off_$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = $agg$result;
 $5 = $4;
 HEAP32[$5>>2] = 0;
 $6 = (($4) + 4)|0;
 $7 = $6;
 HEAP32[$7>>2] = 0;
 $__off_$i$i = (($agg$result) + 8|0);
 $8 = $__off_$i$i;
 $9 = $8;
 HEAP32[$9>>2] = -1;
 $10 = (($8) + 4)|0;
 $11 = $10;
 HEAP32[$11>>2] = -1;
 STACKTOP = sp;return;
}
function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE7seekposENS_4fposI11__mbstate_tEEj($agg$result,$this,$0,$1) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__off_$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = $agg$result;
 $3 = $2;
 HEAP32[$3>>2] = 0;
 $4 = (($2) + 4)|0;
 $5 = $4;
 HEAP32[$5>>2] = 0;
 $__off_$i$i = (($agg$result) + 8|0);
 $6 = $__off_$i$i;
 $7 = $6;
 HEAP32[$7>>2] = -1;
 $8 = (($6) + 4)|0;
 $9 = $8;
 HEAP32[$9>>2] = -1;
 STACKTOP = sp;return;
}
function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE4syncEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return 0;
}
function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE9showmanycEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return 0;
}
function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE6xsgetnEPci($this,$__s,$__n) {
 $this = $this|0;
 $__s = $__s|0;
 $__n = $__n|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $__einp_ = 0, $__i$0$lcssa = 0, $__i$08 = 0, $__ninp_ = 0, $__s$addr$07 = 0, $call4 = 0, $cmp = 0, $cmp2 = 0, $cmp5 = 0, $cmp6 = 0, $conv$i = 0, $inc = 0, $incdec$ptr = 0, $incdec$ptr10 = 0, $storemerge = 0, $vfn = 0;
 var $vtable = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $cmp6 = ($__n|0)>(0);
 if (!($cmp6)) {
  $__i$0$lcssa = 0;
  STACKTOP = sp;return ($__i$0$lcssa|0);
 }
 $__ninp_ = (($this) + 12|0);
 $__einp_ = (($this) + 16|0);
 $__i$08 = 0;$__s$addr$07 = $__s;
 while(1) {
  $0 = HEAP32[$__ninp_>>2]|0;
  $1 = HEAP32[$__einp_>>2]|0;
  $cmp2 = ($0>>>0)<($1>>>0);
  if ($cmp2) {
   $incdec$ptr = (($0) + 1|0);
   HEAP32[$__ninp_>>2] = $incdec$ptr;
   $2 = HEAP8[$0>>0]|0;
   $storemerge = $2;
  } else {
   $vtable = HEAP32[$this>>2]|0;
   $vfn = (($vtable) + 40|0);
   $3 = HEAP32[$vfn>>2]|0;
   $call4 = (FUNCTION_TABLE_ii[$3 & 511]($this)|0);
   $cmp5 = ($call4|0)==(-1);
   if ($cmp5) {
    $__i$0$lcssa = $__i$08;
    label = 8;
    break;
   }
   $conv$i = $call4&255;
   $storemerge = $conv$i;
  }
  HEAP8[$__s$addr$07>>0] = $storemerge;
  $inc = (($__i$08) + 1)|0;
  $incdec$ptr10 = (($__s$addr$07) + 1|0);
  $cmp = ($inc|0)<($__n|0);
  if ($cmp) {
   $__i$08 = $inc;$__s$addr$07 = $incdec$ptr10;
  } else {
   $__i$0$lcssa = $inc;
   label = 8;
   break;
  }
 }
 if ((label|0) == 8) {
  STACKTOP = sp;return ($__i$0$lcssa|0);
 }
 return 0|0;
}
function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE9underflowEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return -1;
}
function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE5uflowEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $__ninp_ = 0, $call = 0, $cmp = 0, $conv$i = 0, $incdec$ptr = 0, $retval$0 = 0, $vfn = 0, $vtable = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $vtable = HEAP32[$this>>2]|0;
 $vfn = (($vtable) + 36|0);
 $0 = HEAP32[$vfn>>2]|0;
 $call = (FUNCTION_TABLE_ii[$0 & 511]($this)|0);
 $cmp = ($call|0)==(-1);
 if ($cmp) {
  $retval$0 = -1;
  STACKTOP = sp;return ($retval$0|0);
 }
 $__ninp_ = (($this) + 12|0);
 $1 = HEAP32[$__ninp_>>2]|0;
 $incdec$ptr = (($1) + 1|0);
 HEAP32[$__ninp_>>2] = $incdec$ptr;
 $2 = HEAP8[$1>>0]|0;
 $conv$i = $2&255;
 $retval$0 = $conv$i;
 STACKTOP = sp;return ($retval$0|0);
}
function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE9pbackfailEi($this,$0) {
 $this = $this|0;
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return -1;
}
function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE6xsputnEPKci($this,$__s,$__n) {
 $this = $this|0;
 $__s = $__s|0;
 $__n = $__n|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $__eout_ = 0, $__i$0$lcssa = 0, $__i$06 = 0, $__nout_ = 0, $__s$addr$07 = 0, $call5 = 0, $cmp = 0, $cmp2 = 0, $cmp5 = 0, $cmp6 = 0, $conv$i = 0, $inc = 0, $incdec$ptr = 0, $incdec$ptr9 = 0, $vfn = 0;
 var $vtable = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $cmp5 = ($__n|0)>(0);
 if (!($cmp5)) {
  $__i$0$lcssa = 0;
  STACKTOP = sp;return ($__i$0$lcssa|0);
 }
 $__nout_ = (($this) + 24|0);
 $__eout_ = (($this) + 28|0);
 $__i$06 = 0;$__s$addr$07 = $__s;
 while(1) {
  $0 = HEAP32[$__nout_>>2]|0;
  $1 = HEAP32[$__eout_>>2]|0;
  $cmp2 = ($0>>>0)<($1>>>0);
  if ($cmp2) {
   $2 = HEAP8[$__s$addr$07>>0]|0;
   $incdec$ptr = (($0) + 1|0);
   HEAP32[$__nout_>>2] = $incdec$ptr;
   HEAP8[$0>>0] = $2;
  } else {
   $vtable = HEAP32[$this>>2]|0;
   $vfn = (($vtable) + 52|0);
   $3 = HEAP32[$vfn>>2]|0;
   $4 = HEAP8[$__s$addr$07>>0]|0;
   $conv$i = $4&255;
   $call5 = (FUNCTION_TABLE_iii[$3 & 511]($this,$conv$i)|0);
   $cmp6 = ($call5|0)==(-1);
   if ($cmp6) {
    $__i$0$lcssa = $__i$06;
    label = 7;
    break;
   }
  }
  $incdec$ptr9 = (($__s$addr$07) + 1|0);
  $inc = (($__i$06) + 1)|0;
  $cmp = ($inc|0)<($__n|0);
  if ($cmp) {
   $__i$06 = $inc;$__s$addr$07 = $incdec$ptr9;
  } else {
   $__i$0$lcssa = $inc;
   label = 7;
   break;
  }
 }
 if ((label|0) == 7) {
  STACKTOP = sp;return ($__i$0$lcssa|0);
 }
 return 0|0;
}
function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE8overflowEi($this,$0) {
 $this = $this|0;
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return -1;
}
function __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEED0Ev($this) {
 $this = $this|0;
 var $__loc_$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = ((1912 + 8|0));
 $__loc_$i$i = (($this) + 4|0);
 __ZNSt3__16localeD2Ev($__loc_$i$i);
 __ZdlPv($this);
 STACKTOP = sp;return;
}
function __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEED1Ev($this) {
 $this = $this|0;
 var $__loc_$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = ((1912 + 8|0));
 $__loc_$i = (($this) + 4|0);
 __ZNSt3__16localeD2Ev($__loc_$i);
 STACKTOP = sp;return;
}
function __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEED2Ev($this) {
 $this = $this|0;
 var $__loc_ = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = ((1912 + 8|0));
 $__loc_ = (($this) + 4|0);
 __ZNSt3__16localeD2Ev($__loc_);
 STACKTOP = sp;return;
}
function __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEEC2Ev($this) {
 $this = $this|0;
 var $__binp_ = 0, $__loc_ = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = ((1912 + 8|0));
 $__loc_ = (($this) + 4|0);
 __ZNSt3__16localeC2Ev($__loc_);
 $__binp_ = (($this) + 8|0);
 ;HEAP32[$__binp_+0>>2]=0|0;HEAP32[$__binp_+4>>2]=0|0;HEAP32[$__binp_+8>>2]=0|0;HEAP32[$__binp_+12>>2]=0|0;HEAP32[$__binp_+16>>2]=0|0;HEAP32[$__binp_+20>>2]=0|0;
 STACKTOP = sp;return;
}
function __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE5imbueERKNS_6localeE($this,$0) {
 $this = $this|0;
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return;
}
function __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE6setbufEPwi($this,$0,$1) {
 $this = $this|0;
 $0 = $0|0;
 $1 = $1|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return ($this|0);
}
function __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE7seekoffExNS_8ios_base7seekdirEj($agg$result,$this,$0,$1,$2,$3) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__off_$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = $agg$result;
 $5 = $4;
 HEAP32[$5>>2] = 0;
 $6 = (($4) + 4)|0;
 $7 = $6;
 HEAP32[$7>>2] = 0;
 $__off_$i$i = (($agg$result) + 8|0);
 $8 = $__off_$i$i;
 $9 = $8;
 HEAP32[$9>>2] = -1;
 $10 = (($8) + 4)|0;
 $11 = $10;
 HEAP32[$11>>2] = -1;
 STACKTOP = sp;return;
}
function __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE7seekposENS_4fposI11__mbstate_tEEj($agg$result,$this,$0,$1) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__off_$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = $agg$result;
 $3 = $2;
 HEAP32[$3>>2] = 0;
 $4 = (($2) + 4)|0;
 $5 = $4;
 HEAP32[$5>>2] = 0;
 $__off_$i$i = (($agg$result) + 8|0);
 $6 = $__off_$i$i;
 $7 = $6;
 HEAP32[$7>>2] = -1;
 $8 = (($6) + 4)|0;
 $9 = $8;
 HEAP32[$9>>2] = -1;
 STACKTOP = sp;return;
}
function __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE4syncEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return 0;
}
function __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE9showmanycEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return 0;
}
function __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE6xsgetnEPwi($this,$__s,$__n) {
 $this = $this|0;
 $__s = $__s|0;
 $__n = $__n|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $__einp_ = 0, $__i$0$lcssa = 0, $__i$08 = 0, $__ninp_ = 0, $__s$addr$07 = 0, $call4 = 0, $cmp = 0, $cmp2 = 0, $cmp5 = 0, $cmp6 = 0, $inc = 0, $incdec$ptr = 0, $incdec$ptr10 = 0, $storemerge = 0, $vfn = 0, $vtable = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $cmp6 = ($__n|0)>(0);
 if (!($cmp6)) {
  $__i$0$lcssa = 0;
  STACKTOP = sp;return ($__i$0$lcssa|0);
 }
 $__ninp_ = (($this) + 12|0);
 $__einp_ = (($this) + 16|0);
 $__i$08 = 0;$__s$addr$07 = $__s;
 while(1) {
  $0 = HEAP32[$__ninp_>>2]|0;
  $1 = HEAP32[$__einp_>>2]|0;
  $cmp2 = ($0>>>0)<($1>>>0);
  if ($cmp2) {
   $incdec$ptr = (($0) + 4|0);
   HEAP32[$__ninp_>>2] = $incdec$ptr;
   $2 = HEAP32[$0>>2]|0;
   $storemerge = $2;
  } else {
   $vtable = HEAP32[$this>>2]|0;
   $vfn = (($vtable) + 40|0);
   $3 = HEAP32[$vfn>>2]|0;
   $call4 = (FUNCTION_TABLE_ii[$3 & 511]($this)|0);
   $cmp5 = ($call4|0)==(-1);
   if ($cmp5) {
    $__i$0$lcssa = $__i$08;
    label = 8;
    break;
   } else {
    $storemerge = $call4;
   }
  }
  HEAP32[$__s$addr$07>>2] = $storemerge;
  $inc = (($__i$08) + 1)|0;
  $cmp = ($inc|0)<($__n|0);
  if (!($cmp)) {
   $__i$0$lcssa = $inc;
   label = 8;
   break;
  }
  $incdec$ptr10 = (($__s$addr$07) + 4|0);
  $__i$08 = $inc;$__s$addr$07 = $incdec$ptr10;
 }
 if ((label|0) == 8) {
  STACKTOP = sp;return ($__i$0$lcssa|0);
 }
 return 0|0;
}
function __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE9underflowEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return -1;
}
function __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE5uflowEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $__ninp_ = 0, $call = 0, $cmp = 0, $incdec$ptr = 0, $retval$0 = 0, $vfn = 0, $vtable = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $vtable = HEAP32[$this>>2]|0;
 $vfn = (($vtable) + 36|0);
 $0 = HEAP32[$vfn>>2]|0;
 $call = (FUNCTION_TABLE_ii[$0 & 511]($this)|0);
 $cmp = ($call|0)==(-1);
 if ($cmp) {
  $retval$0 = -1;
  STACKTOP = sp;return ($retval$0|0);
 }
 $__ninp_ = (($this) + 12|0);
 $1 = HEAP32[$__ninp_>>2]|0;
 $incdec$ptr = (($1) + 4|0);
 HEAP32[$__ninp_>>2] = $incdec$ptr;
 $2 = HEAP32[$1>>2]|0;
 $retval$0 = $2;
 STACKTOP = sp;return ($retval$0|0);
}
function __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE9pbackfailEj($this,$0) {
 $this = $this|0;
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return -1;
}
function __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE6xsputnEPKwi($this,$__s,$__n) {
 $this = $this|0;
 $__s = $__s|0;
 $__n = $__n|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $__eout_ = 0, $__i$0$lcssa = 0, $__i$06 = 0, $__nout_ = 0, $__s$addr$07 = 0, $call5 = 0, $cmp = 0, $cmp2 = 0, $cmp5 = 0, $cmp6 = 0, $inc = 0, $incdec$ptr = 0, $incdec$ptr9 = 0, $vfn = 0, $vtable = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $cmp5 = ($__n|0)>(0);
 if (!($cmp5)) {
  $__i$0$lcssa = 0;
  STACKTOP = sp;return ($__i$0$lcssa|0);
 }
 $__nout_ = (($this) + 24|0);
 $__eout_ = (($this) + 28|0);
 $__i$06 = 0;$__s$addr$07 = $__s;
 while(1) {
  $0 = HEAP32[$__nout_>>2]|0;
  $1 = HEAP32[$__eout_>>2]|0;
  $cmp2 = ($0>>>0)<($1>>>0);
  if ($cmp2) {
   $2 = HEAP32[$__s$addr$07>>2]|0;
   $incdec$ptr = (($0) + 4|0);
   HEAP32[$__nout_>>2] = $incdec$ptr;
   HEAP32[$0>>2] = $2;
  } else {
   $vtable = HEAP32[$this>>2]|0;
   $vfn = (($vtable) + 52|0);
   $3 = HEAP32[$vfn>>2]|0;
   $4 = HEAP32[$__s$addr$07>>2]|0;
   $call5 = (FUNCTION_TABLE_iii[$3 & 511]($this,$4)|0);
   $cmp6 = ($call5|0)==(-1);
   if ($cmp6) {
    $__i$0$lcssa = $__i$06;
    label = 8;
    break;
   }
  }
  $inc = (($__i$06) + 1)|0;
  $cmp = ($inc|0)<($__n|0);
  if (!($cmp)) {
   $__i$0$lcssa = $inc;
   label = 8;
   break;
  }
  $incdec$ptr9 = (($__s$addr$07) + 4|0);
  $__i$06 = $inc;$__s$addr$07 = $incdec$ptr9;
 }
 if ((label|0) == 8) {
  STACKTOP = sp;return ($__i$0$lcssa|0);
 }
 return 0|0;
}
function __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE8overflowEj($this,$0) {
 $this = $this|0;
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return -1;
}
function __ZNSt3__113basic_istreamIcNS_11char_traitsIcEEED0Ev($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 8|0);
 __ZNSt3__18ios_baseD2Ev($0);
 __ZdlPv($this);
 STACKTOP = sp;return;
}
function __ZNSt3__113basic_istreamIcNS_11char_traitsIcEEED1Ev($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 8|0);
 __ZNSt3__18ios_baseD2Ev($0);
 STACKTOP = sp;return;
}
function __ZTv0_n12_NSt3__113basic_istreamIcNS_11char_traitsIcEEED0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$this>>2]|0;
 $1 = (($0) + -12|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = (($this) + ($2)|0);
 __ZNSt3__113basic_istreamIcNS_11char_traitsIcEEED0Ev($3);
 STACKTOP = sp;return;
}
function __ZTv0_n12_NSt3__113basic_istreamIcNS_11char_traitsIcEEED1Ev($this) {
 $this = $this|0;
 var $$sum = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$this>>2]|0;
 $1 = (($0) + -12|0);
 $2 = HEAP32[$1>>2]|0;
 $$sum = (($2) + 8)|0;
 $3 = (($this) + ($$sum)|0);
 __ZNSt3__18ios_baseD2Ev($3);
 STACKTOP = sp;return;
}
function __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE5flushEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $__rdbuf_$i$i = 0, $__rdbuf_$i$i2 = 0, $__rdstate_$i$i = 0, $__s = 0, $add$ptr$sum = 0, $add$ptr10$sum = 0, $add$ptr19 = 0, $add$ptr19$sum = 0, $add$ptr26 = 0, $call$i3 = 0, $cmp = 0, $exn$slot$0 = 0, $or$i$i = 0, $tobool = 0, $tobool$i = 0, $vbase$offset = 0, $vbase$offset$ptr = 0;
 var $vbase$offset$ptr17 = 0, $vbase$offset$ptr24 = 0, $vbase$offset$ptr8 = 0, $vbase$offset18 = 0, $vbase$offset25 = 0, $vbase$offset9 = 0, $vfn$i = 0, $vtable = 0, $vtable$i = 0, $vtable16 = 0, $vtable23 = 0, $vtable7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__s = sp;
 $vtable = HEAP32[$this>>2]|0;
 $vbase$offset$ptr = (($vtable) + -12|0);
 $vbase$offset = HEAP32[$vbase$offset$ptr>>2]|0;
 $add$ptr$sum = (($vbase$offset) + 24)|0;
 $__rdbuf_$i$i = (($this) + ($add$ptr$sum)|0);
 $0 = HEAP32[$__rdbuf_$i$i>>2]|0;
 $tobool = ($0|0)==(0|0);
 if ($tobool) {
  STACKTOP = sp;return ($this|0);
 }
 __THREW__ = 0;
 invoke_vii(380,($__s|0),($this|0));
 $1 = __THREW__; __THREW__ = 0;
 $2 = $1&1;
 L4: do {
  if ($2) {
   $11 = ___cxa_find_matching_catch(0|0)|0;
   $12 = tempRet0;
   $exn$slot$0 = $11;
  } else {
   $3 = HEAP8[$__s>>0]|0;
   $tobool$i = ($3<<24>>24)==(0);
   do {
    if (!($tobool$i)) {
     $vtable7 = HEAP32[$this>>2]|0;
     $vbase$offset$ptr8 = (($vtable7) + -12|0);
     $vbase$offset9 = HEAP32[$vbase$offset$ptr8>>2]|0;
     $add$ptr10$sum = (($vbase$offset9) + 24)|0;
     $__rdbuf_$i$i2 = (($this) + ($add$ptr10$sum)|0);
     $4 = HEAP32[$__rdbuf_$i$i2>>2]|0;
     $vtable$i = HEAP32[$4>>2]|0;
     $vfn$i = (($vtable$i) + 24|0);
     $5 = HEAP32[$vfn$i>>2]|0;
     __THREW__ = 0;
     $call$i3 = (invoke_ii($5|0,($4|0))|0);
     $6 = __THREW__; __THREW__ = 0;
     $7 = $6&1;
     if (!($7)) {
      $cmp = ($call$i3|0)==(-1);
      if (!($cmp)) {
       break;
      }
      $vtable16 = HEAP32[$this>>2]|0;
      $vbase$offset$ptr17 = (($vtable16) + -12|0);
      $vbase$offset18 = HEAP32[$vbase$offset$ptr17>>2]|0;
      $add$ptr19 = (($this) + ($vbase$offset18)|0);
      $add$ptr19$sum = (($vbase$offset18) + 16)|0;
      $__rdstate_$i$i = (($this) + ($add$ptr19$sum)|0);
      $8 = HEAP32[$__rdstate_$i$i>>2]|0;
      $or$i$i = $8 | 1;
      __THREW__ = 0;
      invoke_vii(361,($add$ptr19|0),($or$i$i|0));
      $9 = __THREW__; __THREW__ = 0;
      $10 = $9&1;
      if (!($10)) {
       break;
      }
     }
     $13 = ___cxa_find_matching_catch(0|0)|0;
     $14 = tempRet0;
     __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE6sentryD2Ev($__s);
     $exn$slot$0 = $13;
     break L4;
    }
   } while(0);
   __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE6sentryD2Ev($__s);
   STACKTOP = sp;return ($this|0);
  }
 } while(0);
 (___cxa_begin_catch(($exn$slot$0|0))|0);
 $vtable23 = HEAP32[$this>>2]|0;
 $vbase$offset$ptr24 = (($vtable23) + -12|0);
 $vbase$offset25 = HEAP32[$vbase$offset$ptr24>>2]|0;
 $add$ptr26 = (($this) + ($vbase$offset25)|0);
 __THREW__ = 0;
 invoke_vi(362,($add$ptr26|0));
 $15 = __THREW__; __THREW__ = 0;
 $16 = $15&1;
 if (!($16)) {
  ___cxa_end_catch();
  STACKTOP = sp;return ($this|0);
 }
 $17 = ___cxa_find_matching_catch()|0;
 $18 = tempRet0;
 __THREW__ = 0;
 invoke_v(363);
 $19 = __THREW__; __THREW__ = 0;
 $20 = $19&1;
 if ($20) {
  $21 = ___cxa_find_matching_catch(0|0)|0;
  $22 = tempRet0;
  ___clang_call_terminate($21);
  // unreachable;
 } else {
  ___resumeException($17|0);
  // unreachable;
 }
 return 0|0;
}
function __ZNSt3__18ios_base33__set_badbit_and_consider_rethrowEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $__exceptions_ = 0, $__rdstate_ = 0, $and = 0, $or = 0, $tobool = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $__rdstate_ = (($this) + 16|0);
 $0 = HEAP32[$__rdstate_>>2]|0;
 $or = $0 | 1;
 HEAP32[$__rdstate_>>2] = $or;
 $__exceptions_ = (($this) + 20|0);
 $1 = HEAP32[$__exceptions_>>2]|0;
 $and = $1 & 1;
 $tobool = ($and|0)==(0);
 if ($tobool) {
  STACKTOP = sp;return;
 } else {
  ___cxa_rethrow();
  // unreachable;
 }
}
function __ZNSt3__113basic_istreamIwNS_11char_traitsIwEEED0Ev($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 8|0);
 __ZNSt3__18ios_baseD2Ev($0);
 __ZdlPv($this);
 STACKTOP = sp;return;
}
function __ZNSt3__113basic_istreamIwNS_11char_traitsIwEEED1Ev($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 8|0);
 __ZNSt3__18ios_baseD2Ev($0);
 STACKTOP = sp;return;
}
function __ZTv0_n12_NSt3__113basic_istreamIwNS_11char_traitsIwEEED0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$this>>2]|0;
 $1 = (($0) + -12|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = (($this) + ($2)|0);
 __ZNSt3__113basic_istreamIwNS_11char_traitsIwEEED0Ev($3);
 STACKTOP = sp;return;
}
function __ZTv0_n12_NSt3__113basic_istreamIwNS_11char_traitsIwEEED1Ev($this) {
 $this = $this|0;
 var $$sum = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$this>>2]|0;
 $1 = (($0) + -12|0);
 $2 = HEAP32[$1>>2]|0;
 $$sum = (($2) + 8)|0;
 $3 = (($this) + ($$sum)|0);
 __ZNSt3__18ios_baseD2Ev($3);
 STACKTOP = sp;return;
}
function __ZNSt3__113basic_ostreamIwNS_11char_traitsIwEEE5flushEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $__rdbuf_$i$i = 0, $__rdbuf_$i$i2 = 0, $__rdstate_$i$i = 0, $__s = 0, $add$ptr$sum = 0, $add$ptr10$sum = 0, $add$ptr19 = 0, $add$ptr19$sum = 0, $add$ptr26 = 0, $call$i3 = 0, $cmp = 0, $exn$slot$0 = 0, $or$i$i = 0, $tobool = 0, $tobool$i = 0, $vbase$offset = 0, $vbase$offset$ptr = 0;
 var $vbase$offset$ptr17 = 0, $vbase$offset$ptr24 = 0, $vbase$offset$ptr8 = 0, $vbase$offset18 = 0, $vbase$offset25 = 0, $vbase$offset9 = 0, $vfn$i = 0, $vtable = 0, $vtable$i = 0, $vtable16 = 0, $vtable23 = 0, $vtable7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__s = sp;
 $vtable = HEAP32[$this>>2]|0;
 $vbase$offset$ptr = (($vtable) + -12|0);
 $vbase$offset = HEAP32[$vbase$offset$ptr>>2]|0;
 $add$ptr$sum = (($vbase$offset) + 24)|0;
 $__rdbuf_$i$i = (($this) + ($add$ptr$sum)|0);
 $0 = HEAP32[$__rdbuf_$i$i>>2]|0;
 $tobool = ($0|0)==(0|0);
 if ($tobool) {
  STACKTOP = sp;return ($this|0);
 }
 __THREW__ = 0;
 invoke_vii(381,($__s|0),($this|0));
 $1 = __THREW__; __THREW__ = 0;
 $2 = $1&1;
 L4: do {
  if ($2) {
   $11 = ___cxa_find_matching_catch(0|0)|0;
   $12 = tempRet0;
   $exn$slot$0 = $11;
  } else {
   $3 = HEAP8[$__s>>0]|0;
   $tobool$i = ($3<<24>>24)==(0);
   do {
    if (!($tobool$i)) {
     $vtable7 = HEAP32[$this>>2]|0;
     $vbase$offset$ptr8 = (($vtable7) + -12|0);
     $vbase$offset9 = HEAP32[$vbase$offset$ptr8>>2]|0;
     $add$ptr10$sum = (($vbase$offset9) + 24)|0;
     $__rdbuf_$i$i2 = (($this) + ($add$ptr10$sum)|0);
     $4 = HEAP32[$__rdbuf_$i$i2>>2]|0;
     $vtable$i = HEAP32[$4>>2]|0;
     $vfn$i = (($vtable$i) + 24|0);
     $5 = HEAP32[$vfn$i>>2]|0;
     __THREW__ = 0;
     $call$i3 = (invoke_ii($5|0,($4|0))|0);
     $6 = __THREW__; __THREW__ = 0;
     $7 = $6&1;
     if (!($7)) {
      $cmp = ($call$i3|0)==(-1);
      if (!($cmp)) {
       break;
      }
      $vtable16 = HEAP32[$this>>2]|0;
      $vbase$offset$ptr17 = (($vtable16) + -12|0);
      $vbase$offset18 = HEAP32[$vbase$offset$ptr17>>2]|0;
      $add$ptr19 = (($this) + ($vbase$offset18)|0);
      $add$ptr19$sum = (($vbase$offset18) + 16)|0;
      $__rdstate_$i$i = (($this) + ($add$ptr19$sum)|0);
      $8 = HEAP32[$__rdstate_$i$i>>2]|0;
      $or$i$i = $8 | 1;
      __THREW__ = 0;
      invoke_vii(361,($add$ptr19|0),($or$i$i|0));
      $9 = __THREW__; __THREW__ = 0;
      $10 = $9&1;
      if (!($10)) {
       break;
      }
     }
     $13 = ___cxa_find_matching_catch(0|0)|0;
     $14 = tempRet0;
     __ZNSt3__113basic_ostreamIwNS_11char_traitsIwEEE6sentryD2Ev($__s);
     $exn$slot$0 = $13;
     break L4;
    }
   } while(0);
   __ZNSt3__113basic_ostreamIwNS_11char_traitsIwEEE6sentryD2Ev($__s);
   STACKTOP = sp;return ($this|0);
  }
 } while(0);
 (___cxa_begin_catch(($exn$slot$0|0))|0);
 $vtable23 = HEAP32[$this>>2]|0;
 $vbase$offset$ptr24 = (($vtable23) + -12|0);
 $vbase$offset25 = HEAP32[$vbase$offset$ptr24>>2]|0;
 $add$ptr26 = (($this) + ($vbase$offset25)|0);
 __THREW__ = 0;
 invoke_vi(362,($add$ptr26|0));
 $15 = __THREW__; __THREW__ = 0;
 $16 = $15&1;
 if (!($16)) {
  ___cxa_end_catch();
  STACKTOP = sp;return ($this|0);
 }
 $17 = ___cxa_find_matching_catch()|0;
 $18 = tempRet0;
 __THREW__ = 0;
 invoke_v(363);
 $19 = __THREW__; __THREW__ = 0;
 $20 = $19&1;
 if ($20) {
  $21 = ___cxa_find_matching_catch(0|0)|0;
  $22 = tempRet0;
  ___clang_call_terminate($21);
  // unreachable;
 } else {
  ___resumeException($17|0);
  // unreachable;
 }
 return 0|0;
}
function __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEED0Ev($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 4|0);
 __ZNSt3__18ios_baseD2Ev($0);
 __ZdlPv($this);
 STACKTOP = sp;return;
}
function __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEED1Ev($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 4|0);
 __ZNSt3__18ios_baseD2Ev($0);
 STACKTOP = sp;return;
}
function __ZTv0_n12_NSt3__113basic_ostreamIcNS_11char_traitsIcEEED0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$this>>2]|0;
 $1 = (($0) + -12|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = (($this) + ($2)|0);
 __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEED0Ev($3);
 STACKTOP = sp;return;
}
function __ZTv0_n12_NSt3__113basic_ostreamIcNS_11char_traitsIcEEED1Ev($this) {
 $this = $this|0;
 var $$sum = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$this>>2]|0;
 $1 = (($0) + -12|0);
 $2 = HEAP32[$1>>2]|0;
 $$sum = (($2) + 4)|0;
 $3 = (($this) + ($$sum)|0);
 __ZNSt3__18ios_baseD2Ev($3);
 STACKTOP = sp;return;
}
function __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE6sentryC1ERS3_($this,$__os) {
 $this = $this|0;
 $__os = $__os|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE6sentryC2ERS3_($this,$__os);
 STACKTOP = sp;return;
}
function __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE6sentryC2ERS3_($this,$__os) {
 $this = $this|0;
 $__os = $__os|0;
 var $0 = 0, $1 = 0, $2 = 0, $__rdstate_$i$i = 0, $__tie_$i = 0, $add$ptr$sum = 0, $add$ptr$sum5 = 0, $cmp$i$i = 0, $tobool = 0, $vbase$offset = 0, $vbase$offset$ptr = 0, $vtable = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP8[$this>>0] = 0;
 $0 = (($this) + 4|0);
 HEAP32[$0>>2] = $__os;
 $vtable = HEAP32[$__os>>2]|0;
 $vbase$offset$ptr = (($vtable) + -12|0);
 $vbase$offset = HEAP32[$vbase$offset$ptr>>2]|0;
 $add$ptr$sum = (($vbase$offset) + 16)|0;
 $__rdstate_$i$i = (($__os) + ($add$ptr$sum)|0);
 $1 = HEAP32[$__rdstate_$i$i>>2]|0;
 $cmp$i$i = ($1|0)==(0);
 if (!($cmp$i$i)) {
  STACKTOP = sp;return;
 }
 $add$ptr$sum5 = (($vbase$offset) + 72)|0;
 $__tie_$i = (($__os) + ($add$ptr$sum5)|0);
 $2 = HEAP32[$__tie_$i>>2]|0;
 $tobool = ($2|0)==(0|0);
 if (!($tobool)) {
  (__ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE5flushEv($2)|0);
 }
 HEAP8[$this>>0] = 1;
 STACKTOP = sp;return;
}
function __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE6sentryD1Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE6sentryD2Ev($this);
 STACKTOP = sp;return;
}
function __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE6sentryD2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__fmtflags_$i = 0, $__os_ = 0, $__rdbuf_$i$i = 0, $__rdbuf_$i$i3 = 0;
 var $__rdstate_$i$i = 0, $__rdstate_$i$i1 = 0, $add$ptr$sum = 0, $add$ptr$sum4 = 0, $add$ptr$sum5 = 0, $add$ptr27$sum = 0, $add$ptr38 = 0, $add$ptr38$sum = 0, $and = 0, $call$i2 = 0, $call21 = 0, $cmp = 0, $cmp$i$i = 0, $or$i$i = 0, $ref = 0, $ref23 = 0, $ref34 = 0, $tobool = 0, $tobool19 = 0, $vbase$offset = 0;
 var $vbase$offset$ptr = 0, $vbase$offset$ptr25 = 0, $vbase$offset$ptr36 = 0, $vbase$offset26 = 0, $vbase$offset37 = 0, $vfn$i = 0, $vtable = 0, $vtable$i = 0, $vtable24 = 0, $vtable35 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $__os_ = (($this) + 4|0);
 $ref = HEAP32[$__os_>>2]|0;
 $vtable = HEAP32[$ref>>2]|0;
 $vbase$offset$ptr = (($vtable) + -12|0);
 $vbase$offset = HEAP32[$vbase$offset$ptr>>2]|0;
 $add$ptr$sum = (($vbase$offset) + 24)|0;
 $__rdbuf_$i$i = (($ref) + ($add$ptr$sum)|0);
 $0 = HEAP32[$__rdbuf_$i$i>>2]|0;
 $tobool = ($0|0)==(0|0);
 if ($tobool) {
  STACKTOP = sp;return;
 }
 $add$ptr$sum4 = (($vbase$offset) + 16)|0;
 $__rdstate_$i$i = (($ref) + ($add$ptr$sum4)|0);
 $1 = HEAP32[$__rdstate_$i$i>>2]|0;
 $cmp$i$i = ($1|0)==(0);
 if (!($cmp$i$i)) {
  STACKTOP = sp;return;
 }
 $add$ptr$sum5 = (($vbase$offset) + 4)|0;
 $__fmtflags_$i = (($ref) + ($add$ptr$sum5)|0);
 $2 = HEAP32[$__fmtflags_$i>>2]|0;
 $and = $2 & 8192;
 $tobool19 = ($and|0)==(0);
 if ($tobool19) {
  STACKTOP = sp;return;
 }
 $call21 = (__ZSt18uncaught_exceptionv()|0);
 if ($call21) {
  STACKTOP = sp;return;
 }
 $ref23 = HEAP32[$__os_>>2]|0;
 $vtable24 = HEAP32[$ref23>>2]|0;
 $vbase$offset$ptr25 = (($vtable24) + -12|0);
 $vbase$offset26 = HEAP32[$vbase$offset$ptr25>>2]|0;
 $add$ptr27$sum = (($vbase$offset26) + 24)|0;
 $__rdbuf_$i$i3 = (($ref23) + ($add$ptr27$sum)|0);
 $3 = HEAP32[$__rdbuf_$i$i3>>2]|0;
 $vtable$i = HEAP32[$3>>2]|0;
 $vfn$i = (($vtable$i) + 24|0);
 $4 = HEAP32[$vfn$i>>2]|0;
 __THREW__ = 0;
 $call$i2 = (invoke_ii($4|0,($3|0))|0);
 $5 = __THREW__; __THREW__ = 0;
 $6 = $5&1;
 if (!($6)) {
  $cmp = ($call$i2|0)==(-1);
  if (!($cmp)) {
   STACKTOP = sp;return;
  }
  $ref34 = HEAP32[$__os_>>2]|0;
  $vtable35 = HEAP32[$ref34>>2]|0;
  $vbase$offset$ptr36 = (($vtable35) + -12|0);
  $vbase$offset37 = HEAP32[$vbase$offset$ptr36>>2]|0;
  $add$ptr38 = (($ref34) + ($vbase$offset37)|0);
  $add$ptr38$sum = (($vbase$offset37) + 16)|0;
  $__rdstate_$i$i1 = (($ref34) + ($add$ptr38$sum)|0);
  $7 = HEAP32[$__rdstate_$i$i1>>2]|0;
  $or$i$i = $7 | 1;
  __THREW__ = 0;
  invoke_vii(361,($add$ptr38|0),($or$i$i|0));
  $8 = __THREW__; __THREW__ = 0;
  $9 = $8&1;
  if (!($9)) {
   STACKTOP = sp;return;
  }
 }
 $10 = ___cxa_find_matching_catch(0|0)|0;
 $11 = tempRet0;
 (___cxa_begin_catch(($10|0))|0);
 __THREW__ = 0;
 invoke_v(363);
 $12 = __THREW__; __THREW__ = 0;
 $13 = $12&1;
 if ($13) {
  $14 = ___cxa_find_matching_catch(0|0)|0;
  $15 = tempRet0;
  ___clang_call_terminate($14);
  // unreachable;
 } else {
  STACKTOP = sp;return;
 }
}
function __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE3putEc($this,$__c) {
 $this = $this|0;
 $__c = $__c|0;
 var $$pre$phi11Z2D = 0, $$pre$phiZ2D = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__eout_$i$i = 0, $__nout_$i$i = 0, $__rdbuf_$i$i$i$i = 0, $__rdstate_$i$i = 0, $__s = 0, $add$ptr = 0, $add$ptr$sum = 0, $add$ptr$sum$i$i = 0, $add$ptr15 = 0, $call2$i$i4 = 0, $cmp$i$i = 0, $cmp$i1$i = 0, $conv$i$i$i = 0, $exn$slot$0 = 0;
 var $incdec$ptr$i$i = 0, $or$i$i = 0, $tobool$i = 0, $tobool$i2 = 0, $vbase$offset = 0, $vbase$offset$i$i = 0, $vbase$offset$ptr = 0, $vbase$offset$ptr$i$i = 0, $vbase$offset$ptr13 = 0, $vbase$offset14 = 0, $vfn$i$i = 0, $vtable = 0, $vtable$i$i = 0, $vtable$i$i3 = 0, $vtable$pre = 0, $vtable12 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__s = sp;
 __THREW__ = 0;
 invoke_vii(380,($__s|0),($this|0));
 $0 = __THREW__; __THREW__ = 0;
 $1 = $0&1;
 L1: do {
  if ($1) {
   $12 = ___cxa_find_matching_catch(0|0)|0;
   $13 = tempRet0;
   $$pre$phi11Z2D = $this;$$pre$phiZ2D = $this;$exn$slot$0 = $12;
  } else {
   $2 = HEAP8[$__s>>0]|0;
   $tobool$i = ($2<<24>>24)==(0);
   do {
    if (!($tobool$i)) {
     $vtable$i$i = HEAP32[$this>>2]|0;
     $vbase$offset$ptr$i$i = (($vtable$i$i) + -12|0);
     $vbase$offset$i$i = HEAP32[$vbase$offset$ptr$i$i>>2]|0;
     $add$ptr$sum$i$i = (($vbase$offset$i$i) + 24)|0;
     $__rdbuf_$i$i$i$i = (($this) + ($add$ptr$sum$i$i)|0);
     $3 = HEAP32[$__rdbuf_$i$i$i$i>>2]|0;
     $tobool$i2 = ($3|0)==(0|0);
     if ($tobool$i2) {
      $vtable = $vtable$i$i;
      label = 9;
     } else {
      $__nout_$i$i = (($3) + 24|0);
      $4 = HEAP32[$__nout_$i$i>>2]|0;
      $__eout_$i$i = (($3) + 28|0);
      $5 = HEAP32[$__eout_$i$i>>2]|0;
      $cmp$i$i = ($4|0)==($5|0);
      if (!($cmp$i$i)) {
       $incdec$ptr$i$i = (($4) + 1|0);
       HEAP32[$__nout_$i$i>>2] = $incdec$ptr$i$i;
       HEAP8[$4>>0] = $__c;
       break;
      }
      $vtable$i$i3 = HEAP32[$3>>2]|0;
      $vfn$i$i = (($vtable$i$i3) + 52|0);
      $6 = HEAP32[$vfn$i$i>>2]|0;
      $conv$i$i$i = $__c&255;
      __THREW__ = 0;
      $call2$i$i4 = (invoke_iii($6|0,($3|0),($conv$i$i$i|0))|0);
      $7 = __THREW__; __THREW__ = 0;
      $8 = $7&1;
      if (!($8)) {
       $cmp$i1$i = ($call2$i$i4|0)==(-1);
       if (!($cmp$i1$i)) {
        break;
       }
       $vtable$pre = HEAP32[$this>>2]|0;
       $vtable = $vtable$pre;
       label = 9;
      }
     }
     if ((label|0) == 9) {
      $vbase$offset$ptr = (($vtable) + -12|0);
      $vbase$offset = HEAP32[$vbase$offset$ptr>>2]|0;
      $add$ptr = (($this) + ($vbase$offset)|0);
      $add$ptr$sum = (($vbase$offset) + 16)|0;
      $__rdstate_$i$i = (($this) + ($add$ptr$sum)|0);
      $9 = HEAP32[$__rdstate_$i$i>>2]|0;
      $or$i$i = $9 | 1;
      __THREW__ = 0;
      invoke_vii(361,($add$ptr|0),($or$i$i|0));
      $10 = __THREW__; __THREW__ = 0;
      $11 = $10&1;
      if (!($11)) {
       break;
      }
     }
     $14 = ___cxa_find_matching_catch(0|0)|0;
     $15 = tempRet0;
     __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE6sentryD2Ev($__s);
     $$pre$phi11Z2D = $this;$$pre$phiZ2D = $this;$exn$slot$0 = $14;
     break L1;
    }
   } while(0);
   __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE6sentryD2Ev($__s);
   STACKTOP = sp;return ($this|0);
  }
 } while(0);
 (___cxa_begin_catch(($exn$slot$0|0))|0);
 $vtable12 = HEAP32[$$pre$phiZ2D>>2]|0;
 $vbase$offset$ptr13 = (($vtable12) + -12|0);
 $vbase$offset14 = HEAP32[$vbase$offset$ptr13>>2]|0;
 $add$ptr15 = (($$pre$phi11Z2D) + ($vbase$offset14)|0);
 __THREW__ = 0;
 invoke_vi(362,($add$ptr15|0));
 $16 = __THREW__; __THREW__ = 0;
 $17 = $16&1;
 if (!($17)) {
  ___cxa_end_catch();
  STACKTOP = sp;return ($this|0);
 }
 $18 = ___cxa_find_matching_catch()|0;
 $19 = tempRet0;
 __THREW__ = 0;
 invoke_v(363);
 $20 = __THREW__; __THREW__ = 0;
 $21 = $20&1;
 if ($21) {
  $22 = ___cxa_find_matching_catch(0|0)|0;
  $23 = tempRet0;
  ___clang_call_terminate($22);
  // unreachable;
 } else {
  ___resumeException($18|0);
  // unreachable;
 }
 return 0|0;
}
function __ZNSt3__113basic_ostreamIwNS_11char_traitsIwEEED0Ev($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 4|0);
 __ZNSt3__18ios_baseD2Ev($0);
 __ZdlPv($this);
 STACKTOP = sp;return;
}
function __ZNSt3__113basic_ostreamIwNS_11char_traitsIwEEED1Ev($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 4|0);
 __ZNSt3__18ios_baseD2Ev($0);
 STACKTOP = sp;return;
}
function __ZTv0_n12_NSt3__113basic_ostreamIwNS_11char_traitsIwEEED0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$this>>2]|0;
 $1 = (($0) + -12|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = (($this) + ($2)|0);
 __ZNSt3__113basic_ostreamIwNS_11char_traitsIwEEED0Ev($3);
 STACKTOP = sp;return;
}
function __ZTv0_n12_NSt3__113basic_ostreamIwNS_11char_traitsIwEEED1Ev($this) {
 $this = $this|0;
 var $$sum = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$this>>2]|0;
 $1 = (($0) + -12|0);
 $2 = HEAP32[$1>>2]|0;
 $$sum = (($2) + 4)|0;
 $3 = (($this) + ($$sum)|0);
 __ZNSt3__18ios_baseD2Ev($3);
 STACKTOP = sp;return;
}
function __ZNSt3__113basic_ostreamIwNS_11char_traitsIwEEE6sentryC2ERS3_($this,$__os) {
 $this = $this|0;
 $__os = $__os|0;
 var $0 = 0, $1 = 0, $2 = 0, $__rdstate_$i$i = 0, $__tie_$i = 0, $add$ptr$sum = 0, $add$ptr$sum5 = 0, $cmp$i$i = 0, $tobool = 0, $vbase$offset = 0, $vbase$offset$ptr = 0, $vtable = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP8[$this>>0] = 0;
 $0 = (($this) + 4|0);
 HEAP32[$0>>2] = $__os;
 $vtable = HEAP32[$__os>>2]|0;
 $vbase$offset$ptr = (($vtable) + -12|0);
 $vbase$offset = HEAP32[$vbase$offset$ptr>>2]|0;
 $add$ptr$sum = (($vbase$offset) + 16)|0;
 $__rdstate_$i$i = (($__os) + ($add$ptr$sum)|0);
 $1 = HEAP32[$__rdstate_$i$i>>2]|0;
 $cmp$i$i = ($1|0)==(0);
 if (!($cmp$i$i)) {
  STACKTOP = sp;return;
 }
 $add$ptr$sum5 = (($vbase$offset) + 72)|0;
 $__tie_$i = (($__os) + ($add$ptr$sum5)|0);
 $2 = HEAP32[$__tie_$i>>2]|0;
 $tobool = ($2|0)==(0|0);
 if (!($tobool)) {
  (__ZNSt3__113basic_ostreamIwNS_11char_traitsIwEEE5flushEv($2)|0);
 }
 HEAP8[$this>>0] = 1;
 STACKTOP = sp;return;
}
function __ZNSt3__113basic_ostreamIwNS_11char_traitsIwEEE6sentryD2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__fmtflags_$i = 0, $__os_ = 0, $__rdbuf_$i$i = 0, $__rdbuf_$i$i3 = 0;
 var $__rdstate_$i$i = 0, $__rdstate_$i$i1 = 0, $add$ptr$sum = 0, $add$ptr$sum4 = 0, $add$ptr$sum5 = 0, $add$ptr27$sum = 0, $add$ptr38 = 0, $add$ptr38$sum = 0, $and = 0, $call$i2 = 0, $call21 = 0, $cmp = 0, $cmp$i$i = 0, $or$i$i = 0, $ref = 0, $ref23 = 0, $ref34 = 0, $tobool = 0, $tobool19 = 0, $vbase$offset = 0;
 var $vbase$offset$ptr = 0, $vbase$offset$ptr25 = 0, $vbase$offset$ptr36 = 0, $vbase$offset26 = 0, $vbase$offset37 = 0, $vfn$i = 0, $vtable = 0, $vtable$i = 0, $vtable24 = 0, $vtable35 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $__os_ = (($this) + 4|0);
 $ref = HEAP32[$__os_>>2]|0;
 $vtable = HEAP32[$ref>>2]|0;
 $vbase$offset$ptr = (($vtable) + -12|0);
 $vbase$offset = HEAP32[$vbase$offset$ptr>>2]|0;
 $add$ptr$sum = (($vbase$offset) + 24)|0;
 $__rdbuf_$i$i = (($ref) + ($add$ptr$sum)|0);
 $0 = HEAP32[$__rdbuf_$i$i>>2]|0;
 $tobool = ($0|0)==(0|0);
 if ($tobool) {
  STACKTOP = sp;return;
 }
 $add$ptr$sum4 = (($vbase$offset) + 16)|0;
 $__rdstate_$i$i = (($ref) + ($add$ptr$sum4)|0);
 $1 = HEAP32[$__rdstate_$i$i>>2]|0;
 $cmp$i$i = ($1|0)==(0);
 if (!($cmp$i$i)) {
  STACKTOP = sp;return;
 }
 $add$ptr$sum5 = (($vbase$offset) + 4)|0;
 $__fmtflags_$i = (($ref) + ($add$ptr$sum5)|0);
 $2 = HEAP32[$__fmtflags_$i>>2]|0;
 $and = $2 & 8192;
 $tobool19 = ($and|0)==(0);
 if ($tobool19) {
  STACKTOP = sp;return;
 }
 $call21 = (__ZSt18uncaught_exceptionv()|0);
 if ($call21) {
  STACKTOP = sp;return;
 }
 $ref23 = HEAP32[$__os_>>2]|0;
 $vtable24 = HEAP32[$ref23>>2]|0;
 $vbase$offset$ptr25 = (($vtable24) + -12|0);
 $vbase$offset26 = HEAP32[$vbase$offset$ptr25>>2]|0;
 $add$ptr27$sum = (($vbase$offset26) + 24)|0;
 $__rdbuf_$i$i3 = (($ref23) + ($add$ptr27$sum)|0);
 $3 = HEAP32[$__rdbuf_$i$i3>>2]|0;
 $vtable$i = HEAP32[$3>>2]|0;
 $vfn$i = (($vtable$i) + 24|0);
 $4 = HEAP32[$vfn$i>>2]|0;
 __THREW__ = 0;
 $call$i2 = (invoke_ii($4|0,($3|0))|0);
 $5 = __THREW__; __THREW__ = 0;
 $6 = $5&1;
 if (!($6)) {
  $cmp = ($call$i2|0)==(-1);
  if (!($cmp)) {
   STACKTOP = sp;return;
  }
  $ref34 = HEAP32[$__os_>>2]|0;
  $vtable35 = HEAP32[$ref34>>2]|0;
  $vbase$offset$ptr36 = (($vtable35) + -12|0);
  $vbase$offset37 = HEAP32[$vbase$offset$ptr36>>2]|0;
  $add$ptr38 = (($ref34) + ($vbase$offset37)|0);
  $add$ptr38$sum = (($vbase$offset37) + 16)|0;
  $__rdstate_$i$i1 = (($ref34) + ($add$ptr38$sum)|0);
  $7 = HEAP32[$__rdstate_$i$i1>>2]|0;
  $or$i$i = $7 | 1;
  __THREW__ = 0;
  invoke_vii(361,($add$ptr38|0),($or$i$i|0));
  $8 = __THREW__; __THREW__ = 0;
  $9 = $8&1;
  if (!($9)) {
   STACKTOP = sp;return;
  }
 }
 $10 = ___cxa_find_matching_catch(0|0)|0;
 $11 = tempRet0;
 (___cxa_begin_catch(($10|0))|0);
 __THREW__ = 0;
 invoke_v(363);
 $12 = __THREW__; __THREW__ = 0;
 $13 = $12&1;
 if ($13) {
  $14 = ___cxa_find_matching_catch(0|0)|0;
  $15 = tempRet0;
  ___clang_call_terminate($14);
  // unreachable;
 } else {
  STACKTOP = sp;return;
 }
}
function __ZNKSt3__119__iostream_category4nameEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return (2136|0);
}
function __ZNKSt3__119__iostream_category7messageEi($agg$result,$this,$ev) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $ev = $ev|0;
 var $cmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $cmp = ($ev|0)==(1);
 if ($cmp) {
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj($agg$result,2152,35);
  STACKTOP = sp;return;
 } else {
  __ZNKSt3__112__do_message7messageEi($agg$result,$this,$ev);
  STACKTOP = sp;return;
 }
}
function __ZNSt3__117iostream_categoryEv() {
 var $0 = 0, $1 = 0, $guard$uninitialized = 0, $tobool = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[2200>>0]|0;
 $guard$uninitialized = ($0<<24>>24)==(0);
 if ($guard$uninitialized) {
  $1 = (___cxa_guard_acquire((2200|0))|0);
  $tobool = ($1|0)==(0);
  if (!($tobool)) {
   HEAP32[2192>>2] = ((2888 + 8|0));
   (___cxa_atexit((76|0),(2192|0),(___dso_handle|0))|0);
   ___cxa_guard_release((2200|0));
  }
 }
 STACKTOP = sp;return (2192|0);
}
function __ZNSt3__119__iostream_categoryD1Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return;
}
function __ZNSt3__18ios_base7failureC2EPKcRKNS_10error_codeE($this,$msg,$ec) {
 $this = $this|0;
 $msg = $msg|0;
 $ec = $ec|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $agg$tmp = 0, $tmpcast$byval_copy = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $tmpcast$byval_copy = sp + 8|0;
 $agg$tmp = sp;
 $0 = $ec;
 $1 = $0;
 $2 = HEAP32[$1>>2]|0;
 $3 = (($0) + 4)|0;
 $4 = $3;
 $5 = HEAP32[$4>>2]|0;
 $6 = $agg$tmp;
 $7 = $6;
 HEAP32[$7>>2] = $2;
 $8 = (($6) + 4)|0;
 $9 = $8;
 HEAP32[$9>>2] = $5;
 ;HEAP32[$tmpcast$byval_copy+0>>2]=HEAP32[$agg$tmp+0>>2]|0;HEAP32[$tmpcast$byval_copy+4>>2]=HEAP32[$agg$tmp+4>>2]|0;
 __ZNSt3__112system_errorC2ENS_10error_codeEPKc($this,$tmpcast$byval_copy,$msg);
 HEAP32[$this>>2] = ((2208 + 8|0));
 STACKTOP = sp;return;
}
function __ZNSt3__18ios_base7failureD0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__112system_errorD2Ev($this);
 __ZdlPv($this);
 STACKTOP = sp;return;
}
function __ZNSt3__18ios_base7failureD2Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__112system_errorD2Ev($this);
 STACKTOP = sp;return;
}
function __ZNSt3__18ios_baseD0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__18ios_baseD2Ev($this);
 __ZdlPv($this);
 STACKTOP = sp;return;
}
function __ZNSt3__119__iostream_categoryD0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 STACKTOP = sp;return;
}
function __ZNSt3__17collateIcED0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 STACKTOP = sp;return;
}
function __ZNSt3__17collateIcED1Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return;
}
function __ZNSt3__16locale5facetD2Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return;
}
function __ZNKSt3__17collateIcE10do_compareEPKcS3_S3_S3_($this,$__lo1,$__hi1,$__lo2,$__hi2) {
 $this = $this|0;
 $__lo1 = $__lo1|0;
 $__hi1 = $__hi1|0;
 $__lo2 = $__lo2|0;
 $__hi2 = $__hi2|0;
 var $0 = 0, $1 = 0, $__lo1$addr$0$lcssa = 0, $__lo1$addr$09 = 0, $__lo2$addr$010 = 0, $cmp = 0, $cmp11 = 0, $cmp2 = 0, $cmp4 = 0, $cmp7 = 0, $cmp8 = 0, $conv12 = 0, $incdec$ptr = 0, $incdec$ptr10 = 0, $retval$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $cmp8 = ($__lo2|0)==($__hi2|0);
 L1: do {
  if ($cmp8) {
   $__lo1$addr$0$lcssa = $__lo1;
   label = 6;
  } else {
   $__lo1$addr$09 = $__lo1;$__lo2$addr$010 = $__lo2;
   while(1) {
    $cmp2 = ($__lo1$addr$09|0)==($__hi1|0);
    if ($cmp2) {
     $retval$0 = -1;
     break L1;
    }
    $0 = HEAP8[$__lo1$addr$09>>0]|0;
    $1 = HEAP8[$__lo2$addr$010>>0]|0;
    $cmp4 = ($0<<24>>24)<($1<<24>>24);
    if ($cmp4) {
     $retval$0 = -1;
     break L1;
    }
    $cmp7 = ($1<<24>>24)<($0<<24>>24);
    if ($cmp7) {
     $retval$0 = 1;
     break L1;
    }
    $incdec$ptr = (($__lo1$addr$09) + 1|0);
    $incdec$ptr10 = (($__lo2$addr$010) + 1|0);
    $cmp = ($incdec$ptr10|0)==($__hi2|0);
    if ($cmp) {
     $__lo1$addr$0$lcssa = $incdec$ptr;
     label = 6;
     break;
    } else {
     $__lo1$addr$09 = $incdec$ptr;$__lo2$addr$010 = $incdec$ptr10;
    }
   }
  }
 } while(0);
 if ((label|0) == 6) {
  $cmp11 = ($__lo1$addr$0$lcssa|0)!=($__hi1|0);
  $conv12 = $cmp11&1;
  $retval$0 = $conv12;
 }
 STACKTOP = sp;return ($retval$0|0);
}
function __ZNKSt3__17collateIcE12do_transformEPKcS3_($agg$result,$this,$__lo,$__hi) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__lo = $__lo|0;
 $__hi = $__hi|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initIPKcEENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueEvE4typeESA_SA_($agg$result,$__lo,$__hi);
 STACKTOP = sp;return;
}
function __ZNKSt3__17collateIcE7do_hashEPKcS3_($this,$__lo,$__hi) {
 $this = $this|0;
 $__lo = $__lo|0;
 $__hi = $__hi|0;
 var $0 = 0, $__h$0$lcssa = 0, $__h$08 = 0, $__p$07 = 0, $add = 0, $and = 0, $cmp = 0, $cmp6 = 0, $conv = 0, $incdec$ptr = 0, $or = 0, $shl = 0, $shr = 0, $xor = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $cmp6 = ($__lo|0)==($__hi|0);
 if ($cmp6) {
  $__h$0$lcssa = 0;
  STACKTOP = sp;return ($__h$0$lcssa|0);
 } else {
  $__h$08 = 0;$__p$07 = $__lo;
 }
 while(1) {
  $shl = $__h$08 << 4;
  $0 = HEAP8[$__p$07>>0]|0;
  $conv = $0 << 24 >> 24;
  $add = (($conv) + ($shl))|0;
  $and = $add & -268435456;
  $shr = $and >>> 24;
  $or = $shr | $and;
  $xor = $or ^ $add;
  $incdec$ptr = (($__p$07) + 1|0);
  $cmp = ($incdec$ptr|0)==($__hi|0);
  if ($cmp) {
   $__h$0$lcssa = $xor;
   break;
  } else {
   $__h$08 = $xor;$__p$07 = $incdec$ptr;
  }
 }
 STACKTOP = sp;return ($__h$0$lcssa|0);
}
function __ZNSt3__17collateIwED0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 STACKTOP = sp;return;
}
function __ZNSt3__17collateIwED1Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return;
}
function __ZNKSt3__17collateIwE10do_compareEPKwS3_S3_S3_($this,$__lo1,$__hi1,$__lo2,$__hi2) {
 $this = $this|0;
 $__lo1 = $__lo1|0;
 $__hi1 = $__hi1|0;
 $__lo2 = $__lo2|0;
 $__hi2 = $__hi2|0;
 var $0 = 0, $1 = 0, $__lo1$addr$0$lcssa = 0, $__lo1$addr$010 = 0, $__lo2$addr$011 = 0, $cmp = 0, $cmp2 = 0, $cmp3 = 0, $cmp4 = 0, $cmp8 = 0, $cmp9 = 0, $conv = 0, $incdec$ptr = 0, $incdec$ptr7 = 0, $retval$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $cmp9 = ($__lo2|0)==($__hi2|0);
 L1: do {
  if ($cmp9) {
   $__lo1$addr$0$lcssa = $__lo1;
   label = 6;
  } else {
   $__lo1$addr$010 = $__lo1;$__lo2$addr$011 = $__lo2;
   while(1) {
    $cmp2 = ($__lo1$addr$010|0)==($__hi1|0);
    if ($cmp2) {
     $retval$0 = -1;
     break L1;
    }
    $0 = HEAP32[$__lo1$addr$010>>2]|0;
    $1 = HEAP32[$__lo2$addr$011>>2]|0;
    $cmp3 = ($0|0)<($1|0);
    if ($cmp3) {
     $retval$0 = -1;
     break L1;
    }
    $cmp4 = ($1|0)<($0|0);
    if ($cmp4) {
     $retval$0 = 1;
     break L1;
    }
    $incdec$ptr = (($__lo1$addr$010) + 4|0);
    $incdec$ptr7 = (($__lo2$addr$011) + 4|0);
    $cmp = ($incdec$ptr7|0)==($__hi2|0);
    if ($cmp) {
     $__lo1$addr$0$lcssa = $incdec$ptr;
     label = 6;
     break;
    } else {
     $__lo1$addr$010 = $incdec$ptr;$__lo2$addr$011 = $incdec$ptr7;
    }
   }
  }
 } while(0);
 if ((label|0) == 6) {
  $cmp8 = ($__lo1$addr$0$lcssa|0)!=($__hi1|0);
  $conv = $cmp8&1;
  $retval$0 = $conv;
 }
 STACKTOP = sp;return ($retval$0|0);
}
function __ZNKSt3__17collateIwE12do_transformEPKwS3_($agg$result,$this,$__lo,$__hi) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__lo = $__lo|0;
 $__hi = $__hi|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6__initIPKwEENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueEvE4typeESA_SA_($agg$result,$__lo,$__hi);
 STACKTOP = sp;return;
}
function __ZNKSt3__17collateIwE7do_hashEPKwS3_($this,$__lo,$__hi) {
 $this = $this|0;
 $__lo = $__lo|0;
 $__hi = $__hi|0;
 var $0 = 0, $__h$0$lcssa = 0, $__h$08 = 0, $__p$07 = 0, $add = 0, $and = 0, $cmp = 0, $cmp6 = 0, $incdec$ptr = 0, $or = 0, $shl = 0, $shr = 0, $xor = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $cmp6 = ($__lo|0)==($__hi|0);
 if ($cmp6) {
  $__h$0$lcssa = 0;
  STACKTOP = sp;return ($__h$0$lcssa|0);
 } else {
  $__h$08 = 0;$__p$07 = $__lo;
 }
 while(1) {
  $shl = $__h$08 << 4;
  $0 = HEAP32[$__p$07>>2]|0;
  $add = (($0) + ($shl))|0;
  $and = $add & -268435456;
  $shr = $and >>> 24;
  $or = $shr | $and;
  $xor = $or ^ $add;
  $incdec$ptr = (($__p$07) + 4|0);
  $cmp = ($incdec$ptr|0)==($__hi|0);
  if ($cmp) {
   $__h$0$lcssa = $xor;
   break;
  } else {
   $__h$08 = $xor;$__p$07 = $incdec$ptr;
  }
 }
 STACKTOP = sp;return ($__h$0$lcssa|0);
}
function __ZNSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 STACKTOP = sp;return;
}
function __ZNSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED1Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return;
}
function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRb($agg$result,$this,$__b,$__e,$__iob,$__err,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__fmtflags_$i = 0, $__lv = 0, $__names = 0, $add$ptr = 0, $agg$tmp = 0, $agg$tmp$byval_copy = 0, $agg$tmp14 = 0, $agg$tmp14$byval_copy = 0;
 var $agg$tmp2 = 0, $agg$tmp2$byval_copy = 0, $and = 0, $arraydestroy$done = 0, $arraydestroy$element = 0, $arraydestroy$element23 = 0, $arraydestroy$element29 = 0, $arraydestroy$elementPast = 0, $arraydestroy$isempty = 0, $arrayinit$element = 0, $arrayinit$endOfInit$0 = 0, $call$i1011 = 0, $call$i1415 = 0, $call18 = 0, $cmp = 0, $cmp20 = 0, $ehselector$slot$0 = 0, $exn$slot$0 = 0, $frombool = 0, $ref$tmp = 0;
 var $ref$tmp4 = 0, $ref$tmp6 = 0, $vfn = 0, $vfn$i = 0, $vfn$i19 = 0, $vtable = 0, $vtable$i = 0, $vtable$i18 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $agg$tmp14$byval_copy = sp + 56|0;
 $agg$tmp2$byval_copy = sp + 36|0;
 $agg$tmp$byval_copy = sp;
 $__lv = sp + 48|0;
 $ref$tmp = sp + 52|0;
 $agg$tmp = sp + 60|0;
 $agg$tmp2 = sp + 32|0;
 $ref$tmp4 = sp + 44|0;
 $ref$tmp6 = sp + 40|0;
 $__names = sp + 8|0;
 $agg$tmp14 = sp + 4|0;
 $__fmtflags_$i = (($__iob) + 4|0);
 $0 = HEAP32[$__fmtflags_$i>>2]|0;
 $and = $0 & 1;
 $cmp = ($and|0)==(0);
 if ($cmp) {
  HEAP32[$__lv>>2] = -1;
  $vtable = HEAP32[$this>>2]|0;
  $vfn = (($vtable) + 16|0);
  $1 = HEAP32[$vfn>>2]|0;
  $2 = HEAP32[$__b>>2]|0;
  HEAP32[$agg$tmp>>2] = $2;
  $3 = HEAP32[$__e>>2]|0;
  HEAP32[$agg$tmp2>>2] = $3;
  ;HEAP32[$agg$tmp$byval_copy+0>>2]=HEAP32[$agg$tmp+0>>2]|0;
  ;HEAP32[$agg$tmp2$byval_copy+0>>2]=HEAP32[$agg$tmp2+0>>2]|0;
  FUNCTION_TABLE_viiiiiii[$1 & 511]($ref$tmp,$this,$agg$tmp$byval_copy,$agg$tmp2$byval_copy,$__iob,$__err,$__lv);
  $4 = HEAP32[$ref$tmp>>2]|0;
  HEAP32[$__b>>2] = $4;
  $5 = HEAP32[$__lv>>2]|0;
  if ((($5|0) == 1)) {
   HEAP8[$__v>>0] = 1;
  } else if ((($5|0) == 0)) {
   HEAP8[$__v>>0] = 0;
  } else {
   HEAP8[$__v>>0] = 1;
   HEAP32[$__err>>2] = 4;
  }
  HEAP32[$agg$result>>2] = $4;
  STACKTOP = sp;return;
 }
 __ZNKSt3__18ios_base6getlocEv($ref$tmp4,$__iob);
 __THREW__ = 0;
 $call$i1011 = (invoke_iii(359,($ref$tmp4|0),(4616|0))|0);
 $6 = __THREW__; __THREW__ = 0;
 $7 = $6&1;
 if ($7) {
  $22 = ___cxa_find_matching_catch()|0;
  $23 = tempRet0;
  $24 = HEAP32[$ref$tmp4>>2]|0;
  (__ZNSt3__114__shared_count16__release_sharedEv($24)|0);
  $ehselector$slot$0 = $23;$exn$slot$0 = $22;
  ___resumeException($exn$slot$0|0);
  // unreachable;
 }
 $8 = HEAP32[$ref$tmp4>>2]|0;
 (__ZNSt3__114__shared_count16__release_sharedEv($8)|0);
 __ZNKSt3__18ios_base6getlocEv($ref$tmp6,$__iob);
 __THREW__ = 0;
 $call$i1415 = (invoke_iii(359,($ref$tmp6|0),(4760|0))|0);
 $9 = __THREW__; __THREW__ = 0;
 $10 = $9&1;
 if ($10) {
  $25 = ___cxa_find_matching_catch()|0;
  $26 = tempRet0;
  $27 = HEAP32[$ref$tmp6>>2]|0;
  (__ZNSt3__114__shared_count16__release_sharedEv($27)|0);
  $ehselector$slot$0 = $26;$exn$slot$0 = $25;
  ___resumeException($exn$slot$0|0);
  // unreachable;
 }
 $11 = HEAP32[$ref$tmp6>>2]|0;
 (__ZNSt3__114__shared_count16__release_sharedEv($11)|0);
 $vtable$i = HEAP32[$call$i1415>>2]|0;
 $vfn$i = (($vtable$i) + 24|0);
 $12 = HEAP32[$vfn$i>>2]|0;
 __THREW__ = 0;
 invoke_vii($12|0,($__names|0),($call$i1415|0));
 $13 = __THREW__; __THREW__ = 0;
 $14 = $13&1;
 if ($14) {
  $arrayinit$endOfInit$0 = $__names;
 } else {
  $arrayinit$element = (($__names) + 12|0);
  $vtable$i18 = HEAP32[$call$i1415>>2]|0;
  $vfn$i19 = (($vtable$i18) + 28|0);
  $15 = HEAP32[$vfn$i19>>2]|0;
  __THREW__ = 0;
  invoke_vii($15|0,($arrayinit$element|0),($call$i1415|0));
  $16 = __THREW__; __THREW__ = 0;
  $17 = $16&1;
  if ($17) {
   $arrayinit$endOfInit$0 = $arrayinit$element;
  } else {
   $18 = HEAP32[$__e>>2]|0;
   HEAP32[$agg$tmp14>>2] = $18;
   $add$ptr = (($__names) + 24|0);
   __THREW__ = 0;
   ;HEAP32[$agg$tmp14$byval_copy+0>>2]=HEAP32[$agg$tmp14+0>>2]|0;
   $call18 = (invoke_iiiiiiii(382,($__b|0),($agg$tmp14$byval_copy|0),($__names|0),($add$ptr|0),($call$i1011|0),($__err|0),1)|0);
   $19 = __THREW__; __THREW__ = 0;
   $20 = $19&1;
   if ($20) {
    $30 = ___cxa_find_matching_catch()|0;
    $31 = tempRet0;
    $arraydestroy$element29 = (($__names) + 12|0);
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($arraydestroy$element29);
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__names);
    $ehselector$slot$0 = $31;$exn$slot$0 = $30;
    ___resumeException($exn$slot$0|0);
    // unreachable;
   } else {
    $cmp20 = ($call18|0)==($__names|0);
    $frombool = $cmp20&1;
    HEAP8[$__v>>0] = $frombool;
    $21 = HEAP32[$__b>>2]|0;
    HEAP32[$agg$result>>2] = $21;
    $arraydestroy$element23 = (($__names) + 12|0);
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($arraydestroy$element23);
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__names);
    STACKTOP = sp;return;
   }
  }
 }
 $28 = ___cxa_find_matching_catch()|0;
 $29 = tempRet0;
 $arraydestroy$isempty = ($__names|0)==($arrayinit$endOfInit$0|0);
 if ($arraydestroy$isempty) {
  $ehselector$slot$0 = $29;$exn$slot$0 = $28;
  ___resumeException($exn$slot$0|0);
  // unreachable;
 } else {
  $arraydestroy$elementPast = $arrayinit$endOfInit$0;
 }
 while(1) {
  $arraydestroy$element = (($arraydestroy$elementPast) + -12|0);
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($arraydestroy$element);
  $arraydestroy$done = ($arraydestroy$element|0)==($__names|0);
  if ($arraydestroy$done) {
   $ehselector$slot$0 = $29;$exn$slot$0 = $28;
   break;
  } else {
   $arraydestroy$elementPast = $arraydestroy$element;
  }
 }
 ___resumeException($exn$slot$0|0);
 // unreachable;
}
function __ZNSt3__114__scan_keywordINS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEPKNS_12basic_stringIcS3_NS_9allocatorIcEEEENS_5ctypeIcEEEET0_RT_SE_SD_SD_RKT1_Rjb($__b,$__e,$__kb,$__ke,$__ct,$__err,$__case_sensitive) {
 $__b = $__b|0;
 $__e = $__e|0;
 $__kb = $__kb|0;
 $__ke = $__ke|0;
 $__ct = $__ct|0;
 $__err = $__err|0;
 $__case_sensitive = $__case_sensitive|0;
 var $$index = 0, $$index10 = 0, $$pre$i$i$i = 0, $$pre$i$i$i106 = 0, $$pre$i12$i$i121 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
 var $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $8 = 0;
 var $9 = 0, $__c$0 = 0, $__consume$0$off0157 = 0, $__consume$1$off0 = 0, $__data_$i$i$i$i = 0, $__einp_$i$i = 0, $__einp_$i$i$i$i = 0, $__einp_$i$i$i$i99 = 0, $__einp_$i$i4$i$i = 0, $__einp_$i$i4$i$i114 = 0, $__einp_$i$i78 = 0, $__indx$0 = 0, $__kb$addr$0142 = 0, $__kb$addr$0145190 = 0, $__kc$0 = 0, $__ky$0179 = 0, $__ky22$0158 = 0, $__ky60$0166 = 0, $__n_does_match$0$lcssa = 0, $__n_does_match$0177 = 0;
 var $__n_does_match$1 = 0, $__n_does_match$2 = 0, $__n_does_match$2$phi = 0, $__n_does_match$3154 = 0, $__n_does_match$4 = 0, $__n_does_match$5164 = 0, $__n_does_match$6 = 0, $__n_might_match$0$lcssa = 0, $__n_might_match$0176 = 0, $__n_might_match$1 = 0, $__n_might_match$2 = 0, $__n_might_match$2$phi = 0, $__n_might_match$3153 = 0, $__n_might_match$4 = 0, $__ninp_$i$i = 0, $__ninp_$i$i$i$i = 0, $__ninp_$i$i$i$i98 = 0, $__ninp_$i$i3$i$i = 0, $__ninp_$i$i3$i$i113 = 0, $__ninp_$i$i77 = 0;
 var $__size_$i2$i = 0, $__size_$i2$i$i = 0, $__size_$i2$i89 = 0, $__st$0178 = 0, $__st$1155 = 0, $__st$2165 = 0, $__st$3144191 = 0, $__statbuf = 0, $__status$0 = 0, $add$ptr$i = 0, $add57 = 0, $and$i$i = 0, $and$i$i$i = 0, $and$i$i$i$i = 0, $and$i$i87 = 0, $arrayidx$i$i$i$i = 0, $call$i$i$i$i128 = 0, $call$i$i$i$i67 = 0, $call$i$i70 = 0, $call$i$i9$i$i130 = 0;
 var $call$i$i9$i$i68 = 0, $call$i71 = 0, $call$i74 = 0, $call1 = 0, $call1135 = 0, $cmp = 0, $cmp$i = 0, $cmp$i$i = 0, $cmp$i$i$i = 0, $cmp$i$i$i$i = 0, $cmp$i$i$i$i100 = 0, $cmp$i$i$i109 = 0, $cmp$i$i5$i$i = 0, $cmp$i$i5$i$i115 = 0, $cmp$i$i79 = 0, $cmp$i1$i$i$i = 0, $cmp$i1$i$i$i104 = 0, $cmp$i1$i10$i$i = 0, $cmp$i1$i10$i$i119 = 0, $cmp$i15$i$i = 0;
 var $cmp14 = 0, $cmp14$ = 0, $cmp2 = 0, $cmp24 = 0, $cmp26 = 0, $cmp37 = 0, $cmp40 = 0, $cmp58$not = 0, $cmp6 = 0, $cmp6175 = 0, $cmp62 = 0, $cmp65 = 0, $cmp68 = 0, $cmp86 = 0, $cmp89 = 0, $cmp89189 = 0, $cmptmp$i$i = 0, $cond$i = 0, $cond$i$i = 0, $cond$i$i$i = 0;
 var $cond$i94 = 0, $conv$i = 0, $conv$i$i = 0, $conv$i$i$i = 0, $conv$i$i$i69 = 0, $conv$i$i91 = 0, $dec = 0, $dec42 = 0, $dec46 = 0, $dec70 = 0, $inc = 0, $inc43 = 0, $inc79$pre = 0, $incdec$ptr = 0, $incdec$ptr$i$i = 0, $incdec$ptr10 = 0, $incdec$ptr50 = 0, $incdec$ptr51 = 0, $incdec$ptr73 = 0, $incdec$ptr74 = 0;
 var $incdec$ptr93 = 0, $incdec$ptr94 = 0, $lpad$phi$index = 0, $lpad$phi$index3 = 0, $or = 0, $or98 = 0, $retval$0$i$i = 0, $shr1$i$i = 0, $shr1$i$i$i = 0, $shr1$i$i92 = 0, $sub$ptr$div$i$i = 0, $sub$ptr$lhs$cast$i$i = 0, $sub$ptr$rhs$cast$i$i = 0, $sub$ptr$sub$i$i = 0, $tobool$i$i = 0, $tobool$i$i$i = 0, $tobool$i$i$i$i = 0, $tobool$i$i$i59 = 0, $tobool$i$i$i64 = 0, $tobool$i$i$i65 = 0;
 var $tobool$i$i$i97 = 0, $tobool$i$i88 = 0, $tobool$i2$i$i = 0, $vfn$i = 0, $vfn$i$i = 0, $vfn$i$i$i$i = 0, $vfn$i$i$i$i103 = 0, $vfn$i$i8$i$i = 0, $vfn$i$i8$i$i118 = 0, $vfn$i$i81 = 0, $vfn$i73 = 0, $vtable$i = 0, $vtable$i$i = 0, $vtable$i$i$i$i = 0, $vtable$i$i$i$i102 = 0, $vtable$i$i7$i$i = 0, $vtable$i$i7$i$i117 = 0, $vtable$i$i80 = 0, $vtable$i72 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__statbuf = sp;
 $sub$ptr$lhs$cast$i$i = $__ke;
 $sub$ptr$rhs$cast$i$i = $__kb;
 $sub$ptr$sub$i$i = (($sub$ptr$lhs$cast$i$i) - ($sub$ptr$rhs$cast$i$i))|0;
 $sub$ptr$div$i$i = (($sub$ptr$sub$i$i|0) / 12)&-1;
 $cmp = ($sub$ptr$div$i$i>>>0)>(100);
 if ($cmp) {
  $call1 = (_malloc($sub$ptr$div$i$i)|0);
  $cmp2 = ($call1|0)==(0|0);
  if ($cmp2) {
   __THREW__ = 0;
   invoke_v(383);
   $0 = __THREW__; __THREW__ = 0;
   $1 = $0&1;
   if ($1) {
    $2 = ___cxa_find_matching_catch()|0;
    $3 = tempRet0;
    $$index = $2;$$index10 = $3;
    ___resumeException($$index|0);
    // unreachable;
   } else {
    $__status$0 = 0;$call1135 = 0;
   }
  } else {
   $__status$0 = $call1;$call1135 = $call1;
  }
 } else {
  $__status$0 = $__statbuf;$call1135 = 0;
 }
 $cmp6175 = ($__kb|0)==($__ke|0);
 if ($cmp6175) {
  $__n_does_match$0$lcssa = 0;$__n_might_match$0$lcssa = $sub$ptr$div$i$i;
 } else {
  $__ky$0179 = $__kb;$__n_does_match$0177 = 0;$__n_might_match$0176 = $sub$ptr$div$i$i;$__st$0178 = $__status$0;
  while(1) {
   $14 = HEAP8[$__ky$0179>>0]|0;
   $and$i$i$i = $14 & 1;
   $tobool$i$i$i64 = ($and$i$i$i<<24>>24)==(0);
   if ($tobool$i$i$i64) {
    $conv$i$i$i = $14&255;
    $shr1$i$i$i = $conv$i$i$i >>> 1;
    $cond$i$i = $shr1$i$i$i;
   } else {
    $__size_$i2$i$i = (($__ky$0179) + 4|0);
    $15 = HEAP32[$__size_$i2$i$i>>2]|0;
    $cond$i$i = $15;
   }
   $cmp$i = ($cond$i$i|0)==(0);
   if ($cmp$i) {
    HEAP8[$__st$0178>>0] = 2;
    $dec = (($__n_might_match$0176) + -1)|0;
    $inc = (($__n_does_match$0177) + 1)|0;
    $__n_does_match$1 = $inc;$__n_might_match$1 = $dec;
   } else {
    HEAP8[$__st$0178>>0] = 1;
    $__n_does_match$1 = $__n_does_match$0177;$__n_might_match$1 = $__n_might_match$0176;
   }
   $incdec$ptr = (($__ky$0179) + 12|0);
   $incdec$ptr10 = (($__st$0178) + 1|0);
   $cmp6 = ($incdec$ptr|0)==($__ke|0);
   if ($cmp6) {
    $__n_does_match$0$lcssa = $__n_does_match$1;$__n_might_match$0$lcssa = $__n_might_match$1;
    break;
   } else {
    $__ky$0179 = $incdec$ptr;$__n_does_match$0177 = $__n_does_match$1;$__n_might_match$0176 = $__n_might_match$1;$__st$0178 = $incdec$ptr10;
   }
  }
 }
 $__indx$0 = 0;$__n_does_match$2 = $__n_does_match$0$lcssa;$__n_might_match$2 = $__n_might_match$0$lcssa;
 L19: while(1) {
  $16 = HEAP32[$__b>>2]|0;
  $tobool$i$i$i65 = ($16|0)==(0|0);
  do {
   if ($tobool$i$i$i65) {
    $22 = 0;
   } else {
    $__ninp_$i$i$i$i = (($16) + 12|0);
    $17 = HEAP32[$__ninp_$i$i$i$i>>2]|0;
    $__einp_$i$i$i$i = (($16) + 16|0);
    $18 = HEAP32[$__einp_$i$i$i$i>>2]|0;
    $cmp$i$i$i$i = ($17|0)==($18|0);
    if ($cmp$i$i$i$i) {
     $vtable$i$i$i$i = HEAP32[$16>>2]|0;
     $vfn$i$i$i$i = (($vtable$i$i$i$i) + 36|0);
     $19 = HEAP32[$vfn$i$i$i$i>>2]|0;
     __THREW__ = 0;
     $call$i$i$i$i67 = (invoke_ii($19|0,($16|0))|0);
     $20 = __THREW__; __THREW__ = 0;
     $21 = $20&1;
     if ($21) {
      label = 6;
      break L19;
     }
     $cmp$i1$i$i$i = ($call$i$i$i$i67|0)==(-1);
     if ($cmp$i1$i$i$i) {
      HEAP32[$__b>>2] = 0;
      $22 = 0;
      break;
     } else {
      $$pre$i$i$i = HEAP32[$__b>>2]|0;
      $22 = $$pre$i$i$i;
      break;
     }
    } else {
     $22 = $16;
    }
   }
  } while(0);
  $cmp$i$i$i = ($22|0)==(0|0);
  $23 = HEAP32[$__e>>2]|0;
  $tobool$i2$i$i = ($23|0)==(0|0);
  if ($tobool$i2$i$i) {
   $$pre$i12$i$i121 = 0;
  } else {
   $__ninp_$i$i3$i$i = (($23) + 12|0);
   $24 = HEAP32[$__ninp_$i$i3$i$i>>2]|0;
   $__einp_$i$i4$i$i = (($23) + 16|0);
   $25 = HEAP32[$__einp_$i$i4$i$i>>2]|0;
   $cmp$i$i5$i$i = ($24|0)==($25|0);
   if ($cmp$i$i5$i$i) {
    $vtable$i$i7$i$i = HEAP32[$23>>2]|0;
    $vfn$i$i8$i$i = (($vtable$i$i7$i$i) + 36|0);
    $26 = HEAP32[$vfn$i$i8$i$i>>2]|0;
    __THREW__ = 0;
    $call$i$i9$i$i68 = (invoke_ii($26|0,($23|0))|0);
    $27 = __THREW__; __THREW__ = 0;
    $28 = $27&1;
    if ($28) {
     label = 6;
     break;
    }
    $cmp$i1$i10$i$i = ($call$i$i9$i$i68|0)==(-1);
    if ($cmp$i1$i10$i$i) {
     HEAP32[$__e>>2] = 0;
     $$pre$i12$i$i121 = 0;
    } else {
     $$pre$i12$i$i121 = $23;
    }
   } else {
    $$pre$i12$i$i121 = $23;
   }
  }
  $cmp$i15$i$i = ($$pre$i12$i$i121|0)==(0|0);
  $cmptmp$i$i = $cmp$i$i$i ^ $cmp$i15$i$i;
  $cmp14 = ($__n_might_match$2|0)!=(0);
  $cmp14$ = $cmptmp$i$i & $cmp14;
  $29 = HEAP32[$__b>>2]|0;
  if (!($cmp14$)) {
   label = 66;
   break;
  }
  $__ninp_$i$i = (($29) + 12|0);
  $30 = HEAP32[$__ninp_$i$i>>2]|0;
  $__einp_$i$i = (($29) + 16|0);
  $31 = HEAP32[$__einp_$i$i>>2]|0;
  $cmp$i$i = ($30|0)==($31|0);
  if ($cmp$i$i) {
   $vtable$i$i = HEAP32[$29>>2]|0;
   $vfn$i$i = (($vtable$i$i) + 36|0);
   $32 = HEAP32[$vfn$i$i>>2]|0;
   __THREW__ = 0;
   $call$i$i70 = (invoke_ii($32|0,($29|0))|0);
   $33 = __THREW__; __THREW__ = 0;
   $34 = $33&1;
   if ($34) {
    label = 6;
    break;
   } else {
    $retval$0$i$i = $call$i$i70;
   }
  } else {
   $35 = HEAP8[$30>>0]|0;
   $conv$i$i$i69 = $35&255;
   $retval$0$i$i = $conv$i$i$i69;
  }
  $conv$i = $retval$0$i$i&255;
  if ($__case_sensitive) {
   $__c$0 = $conv$i;
  } else {
   $vtable$i = HEAP32[$__ct>>2]|0;
   $vfn$i = (($vtable$i) + 12|0);
   $36 = HEAP32[$vfn$i>>2]|0;
   __THREW__ = 0;
   $call$i71 = (invoke_iii($36|0,($__ct|0),($conv$i|0))|0);
   $37 = __THREW__; __THREW__ = 0;
   $38 = $37&1;
   if ($38) {
    label = 6;
    break;
   } else {
    $__c$0 = $call$i71;
   }
  }
  $inc79$pre = (($__indx$0) + 1)|0;
  if ($cmp6175) {
   $__n_might_match$2$phi = $__n_might_match$2;$__n_does_match$2$phi = $__n_does_match$2;$__indx$0 = $inc79$pre;$__n_might_match$2 = $__n_might_match$2$phi;$__n_does_match$2 = $__n_does_match$2$phi;
   continue;
  } else {
   $__consume$0$off0157 = 0;$__ky22$0158 = $__kb;$__n_does_match$3154 = $__n_does_match$2;$__n_might_match$3153 = $__n_might_match$2;$__st$1155 = $__status$0;
  }
  while(1) {
   $39 = HEAP8[$__st$1155>>0]|0;
   $cmp26 = ($39<<24>>24)==(1);
   do {
    if ($cmp26) {
     $40 = HEAP8[$__ky22$0158>>0]|0;
     $and$i$i$i$i = $40 & 1;
     $tobool$i$i$i$i = ($and$i$i$i$i<<24>>24)==(0);
     if ($tobool$i$i$i$i) {
      $arrayidx$i$i$i$i = (($__ky22$0158) + 1|0);
      $cond$i$i$i = $arrayidx$i$i$i$i;
     } else {
      $__data_$i$i$i$i = (($__ky22$0158) + 8|0);
      $41 = HEAP32[$__data_$i$i$i$i>>2]|0;
      $cond$i$i$i = $41;
     }
     $add$ptr$i = (($cond$i$i$i) + ($__indx$0)|0);
     $42 = HEAP8[$add$ptr$i>>0]|0;
     if ($__case_sensitive) {
      $__kc$0 = $42;
     } else {
      $vtable$i72 = HEAP32[$__ct>>2]|0;
      $vfn$i73 = (($vtable$i72) + 12|0);
      $43 = HEAP32[$vfn$i73>>2]|0;
      __THREW__ = 0;
      $call$i74 = (invoke_iii($43|0,($__ct|0),($42|0))|0);
      $44 = __THREW__; __THREW__ = 0;
      $45 = $44&1;
      if ($45) {
       label = 5;
       break L19;
      } else {
       $__kc$0 = $call$i74;
      }
     }
     $cmp37 = ($__c$0<<24>>24)==($__kc$0<<24>>24);
     if (!($cmp37)) {
      HEAP8[$__st$1155>>0] = 0;
      $dec46 = (($__n_might_match$3153) + -1)|0;
      $__consume$1$off0 = $__consume$0$off0157;$__n_does_match$4 = $__n_does_match$3154;$__n_might_match$4 = $dec46;
      break;
     }
     $46 = HEAP8[$__ky22$0158>>0]|0;
     $and$i$i = $46 & 1;
     $tobool$i$i = ($and$i$i<<24>>24)==(0);
     if ($tobool$i$i) {
      $conv$i$i = $46&255;
      $shr1$i$i = $conv$i$i >>> 1;
      $cond$i = $shr1$i$i;
     } else {
      $__size_$i2$i = (($__ky22$0158) + 4|0);
      $47 = HEAP32[$__size_$i2$i>>2]|0;
      $cond$i = $47;
     }
     $cmp40 = ($cond$i|0)==($inc79$pre|0);
     if ($cmp40) {
      HEAP8[$__st$1155>>0] = 2;
      $dec42 = (($__n_might_match$3153) + -1)|0;
      $inc43 = (($__n_does_match$3154) + 1)|0;
      $__consume$1$off0 = 1;$__n_does_match$4 = $inc43;$__n_might_match$4 = $dec42;
     } else {
      $__consume$1$off0 = 1;$__n_does_match$4 = $__n_does_match$3154;$__n_might_match$4 = $__n_might_match$3153;
     }
    } else {
     $__consume$1$off0 = $__consume$0$off0157;$__n_does_match$4 = $__n_does_match$3154;$__n_might_match$4 = $__n_might_match$3153;
    }
   } while(0);
   $incdec$ptr50 = (($__ky22$0158) + 12|0);
   $cmp24 = ($incdec$ptr50|0)==($__ke|0);
   if ($cmp24) {
    break;
   }
   $incdec$ptr51 = (($__st$1155) + 1|0);
   $__consume$0$off0157 = $__consume$1$off0;$__ky22$0158 = $incdec$ptr50;$__n_does_match$3154 = $__n_does_match$4;$__n_might_match$3153 = $__n_might_match$4;$__st$1155 = $incdec$ptr51;
  }
  if (!($__consume$1$off0)) {
   $__indx$0 = $inc79$pre;$__n_does_match$2 = $__n_does_match$4;$__n_might_match$2 = $__n_might_match$4;
   continue;
  }
  $48 = HEAP32[$__b>>2]|0;
  $__ninp_$i$i77 = (($48) + 12|0);
  $49 = HEAP32[$__ninp_$i$i77>>2]|0;
  $__einp_$i$i78 = (($48) + 16|0);
  $50 = HEAP32[$__einp_$i$i78>>2]|0;
  $cmp$i$i79 = ($49|0)==($50|0);
  if ($cmp$i$i79) {
   $vtable$i$i80 = HEAP32[$48>>2]|0;
   $vfn$i$i81 = (($vtable$i$i80) + 40|0);
   $51 = HEAP32[$vfn$i$i81>>2]|0;
   __THREW__ = 0;
   (invoke_ii($51|0,($48|0))|0);
   $52 = __THREW__; __THREW__ = 0;
   $53 = $52&1;
   if ($53) {
    label = 6;
    break;
   }
  } else {
   $incdec$ptr$i$i = (($49) + 1|0);
   HEAP32[$__ninp_$i$i77>>2] = $incdec$ptr$i$i;
  }
  $add57 = (($__n_does_match$4) + ($__n_might_match$4))|0;
  $cmp58$not = ($add57>>>0)<(2);
  if ($cmp58$not) {
   $__indx$0 = $inc79$pre;$__n_does_match$2 = $__n_does_match$4;$__n_might_match$2 = $__n_might_match$4;
   continue;
  } else {
   $__ky60$0166 = $__kb;$__n_does_match$5164 = $__n_does_match$4;$__st$2165 = $__status$0;
  }
  while(1) {
   $54 = HEAP8[$__st$2165>>0]|0;
   $cmp65 = ($54<<24>>24)==(2);
   if ($cmp65) {
    $55 = HEAP8[$__ky60$0166>>0]|0;
    $and$i$i87 = $55 & 1;
    $tobool$i$i88 = ($and$i$i87<<24>>24)==(0);
    if ($tobool$i$i88) {
     $conv$i$i91 = $55&255;
     $shr1$i$i92 = $conv$i$i91 >>> 1;
     $cond$i94 = $shr1$i$i92;
    } else {
     $__size_$i2$i89 = (($__ky60$0166) + 4|0);
     $56 = HEAP32[$__size_$i2$i89>>2]|0;
     $cond$i94 = $56;
    }
    $cmp68 = ($cond$i94|0)==($inc79$pre|0);
    if ($cmp68) {
     $__n_does_match$6 = $__n_does_match$5164;
    } else {
     HEAP8[$__st$2165>>0] = 0;
     $dec70 = (($__n_does_match$5164) + -1)|0;
     $__n_does_match$6 = $dec70;
    }
   } else {
    $__n_does_match$6 = $__n_does_match$5164;
   }
   $incdec$ptr73 = (($__ky60$0166) + 12|0);
   $incdec$ptr74 = (($__st$2165) + 1|0);
   $cmp62 = ($incdec$ptr73|0)==($__ke|0);
   if ($cmp62) {
    $__indx$0 = $inc79$pre;$__n_does_match$2 = $__n_does_match$6;$__n_might_match$2 = $__n_might_match$4;
    continue L19;
   } else {
    $__ky60$0166 = $incdec$ptr73;$__n_does_match$5164 = $__n_does_match$6;$__st$2165 = $incdec$ptr74;
   }
  }
 }
 if ((label|0) == 5) {
  $4 = ___cxa_find_matching_catch()|0;
  $5 = tempRet0;
  $lpad$phi$index = $4;$lpad$phi$index3 = $5;
 }
 else if ((label|0) == 6) {
  $6 = ___cxa_find_matching_catch()|0;
  $7 = tempRet0;
  $lpad$phi$index = $6;$lpad$phi$index3 = $7;
 }
 else if ((label|0) == 66) {
  $tobool$i$i$i97 = ($29|0)==(0|0);
  do {
   if ($tobool$i$i$i97) {
    $62 = 0;
    label = 72;
   } else {
    $__ninp_$i$i$i$i98 = (($29) + 12|0);
    $57 = HEAP32[$__ninp_$i$i$i$i98>>2]|0;
    $__einp_$i$i$i$i99 = (($29) + 16|0);
    $58 = HEAP32[$__einp_$i$i$i$i99>>2]|0;
    $cmp$i$i$i$i100 = ($57|0)==($58|0);
    if ($cmp$i$i$i$i100) {
     $vtable$i$i$i$i102 = HEAP32[$29>>2]|0;
     $vfn$i$i$i$i103 = (($vtable$i$i$i$i102) + 36|0);
     $59 = HEAP32[$vfn$i$i$i$i103>>2]|0;
     __THREW__ = 0;
     $call$i$i$i$i128 = (invoke_ii($59|0,($29|0))|0);
     $60 = __THREW__; __THREW__ = 0;
     $61 = $60&1;
     if (!($61)) {
      $cmp$i1$i$i$i104 = ($call$i$i$i$i128|0)==(-1);
      if ($cmp$i1$i$i$i104) {
       HEAP32[$__b>>2] = 0;
       $62 = 0;
       label = 72;
       break;
      } else {
       $$pre$i$i$i106 = HEAP32[$__b>>2]|0;
       $62 = $$pre$i$i$i106;
       label = 72;
       break;
      }
     }
    } else {
     $62 = $29;
     label = 72;
    }
   }
  } while(0);
  L90: do {
   if ((label|0) == 72) {
    $cmp$i$i$i109 = ($62|0)==(0|0);
    do {
     if ($cmp$i15$i$i) {
      label = 78;
     } else {
      $__ninp_$i$i3$i$i113 = (($$pre$i12$i$i121) + 12|0);
      $63 = HEAP32[$__ninp_$i$i3$i$i113>>2]|0;
      $__einp_$i$i4$i$i114 = (($$pre$i12$i$i121) + 16|0);
      $64 = HEAP32[$__einp_$i$i4$i$i114>>2]|0;
      $cmp$i$i5$i$i115 = ($63|0)==($64|0);
      if (!($cmp$i$i5$i$i115)) {
       if ($cmp$i$i$i109) {
        break;
       } else {
        label = 80;
        break;
       }
      }
      $vtable$i$i7$i$i117 = HEAP32[$$pre$i12$i$i121>>2]|0;
      $vfn$i$i8$i$i118 = (($vtable$i$i7$i$i117) + 36|0);
      $65 = HEAP32[$vfn$i$i8$i$i118>>2]|0;
      __THREW__ = 0;
      $call$i$i9$i$i130 = (invoke_ii($65|0,($$pre$i12$i$i121|0))|0);
      $66 = __THREW__; __THREW__ = 0;
      $67 = $66&1;
      if ($67) {
       break L90;
      }
      $cmp$i1$i10$i$i119 = ($call$i$i9$i$i130|0)==(-1);
      if ($cmp$i1$i10$i$i119) {
       HEAP32[$__e>>2] = 0;
       label = 78;
       break;
      } else {
       if ($cmp$i$i$i109) {
        break;
       } else {
        label = 80;
        break;
       }
      }
     }
    } while(0);
    if ((label|0) == 78) {
     if ($cmp$i$i$i109) {
      label = 80;
     }
    }
    if ((label|0) == 80) {
     $68 = HEAP32[$__err>>2]|0;
     $or = $68 | 2;
     HEAP32[$__err>>2] = $or;
    }
    L106: do {
     if ($cmp6175) {
      label = 85;
     } else {
      $69 = HEAP8[$__status$0>>0]|0;
      $cmp89189 = ($69<<24>>24)==(2);
      if ($cmp89189) {
       $__kb$addr$0142 = $__kb;
      } else {
       $__kb$addr$0145190 = $__kb;$__st$3144191 = $__status$0;
       while(1) {
        $incdec$ptr93 = (($__kb$addr$0145190) + 12|0);
        $cmp86 = ($incdec$ptr93|0)==($__ke|0);
        $incdec$ptr94 = (($__st$3144191) + 1|0);
        if ($cmp86) {
         label = 85;
         break L106;
        }
        $70 = HEAP8[$incdec$ptr94>>0]|0;
        $cmp89 = ($70<<24>>24)==(2);
        if ($cmp89) {
         $__kb$addr$0142 = $incdec$ptr93;
         break;
        } else {
         $__kb$addr$0145190 = $incdec$ptr93;$__st$3144191 = $incdec$ptr94;
        }
       }
      }
     }
    } while(0);
    if ((label|0) == 85) {
     $71 = HEAP32[$__err>>2]|0;
     $or98 = $71 | 4;
     HEAP32[$__err>>2] = $or98;
     $__kb$addr$0142 = $__ke;
    }
    $tobool$i$i$i = ($call1135|0)==(0|0);
    if ($tobool$i$i$i) {
     STACKTOP = sp;return ($__kb$addr$0142|0);
    }
    __THREW__ = 0;
    invoke_vi(384,($call1135|0));
    $72 = __THREW__; __THREW__ = 0;
    $73 = $72&1;
    if ($73) {
     $74 = ___cxa_find_matching_catch(0|0)|0;
     $75 = tempRet0;
     ___clang_call_terminate($74);
     // unreachable;
    } else {
     STACKTOP = sp;return ($__kb$addr$0142|0);
    }
   }
  } while(0);
  $8 = ___cxa_find_matching_catch()|0;
  $9 = tempRet0;
  $lpad$phi$index = $8;$lpad$phi$index3 = $9;
 }
 $tobool$i$i$i59 = ($call1135|0)==(0|0);
 if ($tobool$i$i$i59) {
  $$index = $lpad$phi$index;$$index10 = $lpad$phi$index3;
  ___resumeException($$index|0);
  // unreachable;
 }
 __THREW__ = 0;
 invoke_vi(384,($call1135|0));
 $10 = __THREW__; __THREW__ = 0;
 $11 = $10&1;
 if ($11) {
  $12 = ___cxa_find_matching_catch(0|0)|0;
  $13 = tempRet0;
  ___clang_call_terminate($12);
  // unreachable;
 } else {
  $$index = $lpad$phi$index;$$index10 = $lpad$phi$index3;
  ___resumeException($$index|0);
  // unreachable;
 }
 return 0|0;
}
function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRl($agg$result,$this,$__b,$__e,$__iob,$__err,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $0 = 0, $1 = 0, $agg$tmp = 0, $agg$tmp$byval_copy = 0, $agg$tmp2 = 0, $agg$tmp2$byval_copy = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $agg$tmp2$byval_copy = sp + 12|0;
 $agg$tmp$byval_copy = sp + 8|0;
 $agg$tmp = sp + 4|0;
 $agg$tmp2 = sp;
 $0 = HEAP32[$__b>>2]|0;
 HEAP32[$agg$tmp>>2] = $0;
 $1 = HEAP32[$__e>>2]|0;
 HEAP32[$agg$tmp2>>2] = $1;
 ;HEAP32[$agg$tmp$byval_copy+0>>2]=HEAP32[$agg$tmp+0>>2]|0;
 ;HEAP32[$agg$tmp2$byval_copy+0>>2]=HEAP32[$agg$tmp2+0>>2]|0;
 __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE15__do_get_signedIlEES4_S4_S4_RNS_8ios_baseERjRT_($agg$result,0,$agg$tmp$byval_copy,$agg$tmp2$byval_copy,$__iob,$__err,$__v);
 STACKTOP = sp;return;
}
function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE15__do_get_signedIlEES4_S4_S4_RNS_8ios_baseERjRT_($agg$result,$this,$__b,$__e,$__iob,$__err,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$pre = 0, $$pre$i$i$i22 = 0, $$pre$i12$i$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $7 = 0, $8 = 0, $9 = 0, $__a$0 = 0, $__a$1 = 0, $__a$2 = 0, $__a_end = 0, $__atoms = 0, $__buf = 0, $__data_$i$i$i = 0, $__data_$i$i$i97$pre = 0, $__data_$i$i$i97$pre$phiZZZZ2D = 0, $__dc = 0, $__einp_$i$i$i$i = 0, $__einp_$i$i$i$i15 = 0;
 var $__einp_$i$i106 = 0, $__einp_$i$i4$i$i = 0, $__einp_$i$i4$i$i30 = 0, $__g = 0, $__g_end = 0, $__grouping = 0, $__ninp_$i$i$i$i = 0, $__ninp_$i$i$i$i14 = 0, $__ninp_$i$i105 = 0, $__ninp_$i$i3$i$i = 0, $__ninp_$i$i3$i$i29 = 0, $__size_$i2$i64 = 0, $__size_$i2$i74 = 0, $__thousands_sep = 0, $add$ptr = 0, $and$i$i$i = 0, $and$i$i$i95 = 0, $and$i$i47 = 0, $and$i$i72 = 0, $and$i$i85 = 0;
 var $and$i1$i88 = 0, $arrayidx$i$i$i = 0, $arrayidx$i$i$i100$pre = 0, $arrayidx$i$i$i100$pre$phiZZZZ2D = 0, $call = 0, $call$i$i$i$i43 = 0, $call$i$i$i$i9 = 0, $call$i$i113 = 0, $call$i$i9$i$i10 = 0, $call$i$i9$i$i45 = 0, $call21 = 0, $call36 = 0, $cmp = 0, $cmp$i$i$i = 0, $cmp$i$i$i$i = 0, $cmp$i$i$i$i16 = 0, $cmp$i$i$i25 = 0, $cmp$i$i107 = 0, $cmp$i$i5$i$i = 0, $cmp$i$i5$i$i31 = 0;
 var $cmp$i$i81 = 0, $cmp$i1$i$i$i = 0, $cmp$i1$i$i$i20 = 0, $cmp$i1$i10$i$i = 0, $cmp$i1$i10$i$i35 = 0, $cmp$i15$i$i = 0, $cmp27 = 0, $cmp32 = 0, $cmptmp$i$i = 0, $cond$i$i = 0, $cond$i$i102 = 0, $cond$i50 = 0, $cond$i59120 = 0, $cond$i69 = 0, $cond$i79 = 0, $cond$i91 = 0, $conv$i = 0, $conv$i$i = 0, $conv$i$i$i = 0, $conv$i$i56 = 0;
 var $conv$i$i66 = 0, $conv$i$i76 = 0, $incdec$ptr = 0, $incdec$ptr$i$i = 0, $lpad$phi$index = 0, $lpad$phi$index2 = 0, $mul = 0, $or = 0, $phitmp$i89 = 0, $retval$0$i$i = 0, $shr1$i$i = 0, $shr1$i$i57 = 0, $shr1$i$i67 = 0, $shr1$i$i77 = 0, $sub$ptr$lhs$cast = 0, $sub$ptr$lhs$cast29 = 0, $sub$ptr$rhs$cast = 0, $sub$ptr$rhs$cast30 = 0, $sub$ptr$sub = 0, $sub$ptr$sub31 = 0;
 var $tobool = 0, $tobool$i$i$i = 0, $tobool$i$i$i11 = 0, $tobool$i$i$i13 = 0, $tobool$i$i$i96 = 0, $tobool$i$i48 = 0, $tobool$i$i73 = 0, $tobool$i$i86 = 0, $tobool$i2$i$i = 0, $tobool$i2$i$i27 = 0, $vfn$i$i = 0, $vfn$i$i$i$i = 0, $vfn$i$i$i$i19 = 0, $vfn$i$i109 = 0, $vfn$i$i8$i$i = 0, $vfn$i$i8$i$i34 = 0, $vtable$i$i = 0, $vtable$i$i$i$i = 0, $vtable$i$i$i$i18 = 0, $vtable$i$i108 = 0;
 var $vtable$i$i7$i$i = 0, $vtable$i$i7$i$i33 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 224|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__atoms = sp + 198|0;
 $__thousands_sep = sp + 196|0;
 $__grouping = sp + 16|0;
 $__buf = sp + 4|0;
 $__a_end = sp + 192|0;
 $__g = sp + 32|0;
 $__g_end = sp;
 $__dc = sp + 28|0;
 $call = (__ZNSt3__114__num_get_base10__get_baseERNS_8ios_baseE($__iob)|0);
 __ZNSt3__19__num_getIcE17__stage2_int_prepERNS_8ios_baseEPcRc($__grouping,$__iob,$__atoms,$__thousands_sep);
 ;HEAP32[$__buf+0>>2]=0|0;HEAP32[$__buf+4>>2]=0|0;HEAP32[$__buf+8>>2]=0|0;
 __THREW__ = 0;
 invoke_viii(385,($__buf|0),10,0);
 $0 = __THREW__; __THREW__ = 0;
 $1 = $0&1;
 L1: do {
  if (!($1)) {
   $2 = HEAP8[$__buf>>0]|0;
   $and$i$i$i = $2 & 1;
   $tobool$i$i$i11 = ($and$i$i$i<<24>>24)==(0);
   if ($tobool$i$i$i11) {
    $arrayidx$i$i$i = (($__buf) + 1|0);
    $__data_$i$i$i97$pre = (($__buf) + 8|0);
    $__data_$i$i$i97$pre$phiZZZZ2D = $__data_$i$i$i97$pre;$arrayidx$i$i$i100$pre$phiZZZZ2D = $arrayidx$i$i$i;$cond$i$i = $arrayidx$i$i$i;
   } else {
    $__data_$i$i$i = (($__buf) + 8|0);
    $3 = HEAP32[$__data_$i$i$i>>2]|0;
    $arrayidx$i$i$i100$pre = (($__buf) + 1|0);
    $__data_$i$i$i97$pre$phiZZZZ2D = $__data_$i$i$i;$arrayidx$i$i$i100$pre$phiZZZZ2D = $arrayidx$i$i$i100$pre;$cond$i$i = $3;
   }
   HEAP32[$__a_end>>2] = $cond$i$i;
   HEAP32[$__g_end>>2] = $__g;
   HEAP32[$__dc>>2] = 0;
   $__size_$i2$i64 = (($__buf) + 4|0);
   $4 = HEAP8[$__thousands_sep>>0]|0;
   $$pre = HEAP32[$__b>>2]|0;
   $$pre$i$i$i22 = $$pre;$__a$0 = $cond$i$i;
   L7: while(1) {
    $tobool$i$i$i13 = ($$pre$i$i$i22|0)==(0|0);
    if ($tobool$i$i$i13) {
     $10 = 0;
    } else {
     $__ninp_$i$i$i$i14 = (($$pre$i$i$i22) + 12|0);
     $5 = HEAP32[$__ninp_$i$i$i$i14>>2]|0;
     $__einp_$i$i$i$i15 = (($$pre$i$i$i22) + 16|0);
     $6 = HEAP32[$__einp_$i$i$i$i15>>2]|0;
     $cmp$i$i$i$i16 = ($5|0)==($6|0);
     if ($cmp$i$i$i$i16) {
      $vtable$i$i$i$i18 = HEAP32[$$pre$i$i$i22>>2]|0;
      $vfn$i$i$i$i19 = (($vtable$i$i$i$i18) + 36|0);
      $7 = HEAP32[$vfn$i$i$i$i19>>2]|0;
      __THREW__ = 0;
      $call$i$i$i$i43 = (invoke_ii($7|0,($$pre$i$i$i22|0))|0);
      $8 = __THREW__; __THREW__ = 0;
      $9 = $8&1;
      if ($9) {
       label = 33;
       break;
      }
      $cmp$i1$i$i$i20 = ($call$i$i$i$i43|0)==(-1);
      if ($cmp$i1$i$i$i20) {
       HEAP32[$__b>>2] = 0;
       $10 = 0;
      } else {
       $10 = $$pre$i$i$i22;
      }
     } else {
      $10 = $$pre$i$i$i22;
     }
    }
    $cmp$i$i$i25 = ($10|0)==(0|0);
    $11 = HEAP32[$__e>>2]|0;
    $tobool$i2$i$i27 = ($11|0)==(0|0);
    do {
     if ($tobool$i2$i$i27) {
      label = 17;
     } else {
      $__ninp_$i$i3$i$i29 = (($11) + 12|0);
      $12 = HEAP32[$__ninp_$i$i3$i$i29>>2]|0;
      $__einp_$i$i4$i$i30 = (($11) + 16|0);
      $13 = HEAP32[$__einp_$i$i4$i$i30>>2]|0;
      $cmp$i$i5$i$i31 = ($12|0)==($13|0);
      if (!($cmp$i$i5$i$i31)) {
       if ($cmp$i$i$i25) {
        $64 = $11;
        break;
       } else {
        $$pre$i12$i$i = $11;$__a$2 = $__a$0;
        break L7;
       }
      }
      $vtable$i$i7$i$i33 = HEAP32[$11>>2]|0;
      $vfn$i$i8$i$i34 = (($vtable$i$i7$i$i33) + 36|0);
      $14 = HEAP32[$vfn$i$i8$i$i34>>2]|0;
      __THREW__ = 0;
      $call$i$i9$i$i45 = (invoke_ii($14|0,($11|0))|0);
      $15 = __THREW__; __THREW__ = 0;
      $16 = $15&1;
      if ($16) {
       label = 33;
       break L7;
      }
      $cmp$i1$i10$i$i35 = ($call$i$i9$i$i45|0)==(-1);
      if ($cmp$i1$i10$i$i35) {
       HEAP32[$__e>>2] = 0;
       label = 17;
       break;
      } else {
       if ($cmp$i$i$i25) {
        $64 = $11;
        break;
       } else {
        $$pre$i12$i$i = $11;$__a$2 = $__a$0;
        break L7;
       }
      }
     }
    } while(0);
    if ((label|0) == 17) {
     label = 0;
     if ($cmp$i$i$i25) {
      $$pre$i12$i$i = 0;$__a$2 = $__a$0;
      break;
     } else {
      $64 = 0;
     }
    }
    $17 = HEAP32[$__a_end>>2]|0;
    $sub$ptr$lhs$cast = $17;
    $sub$ptr$rhs$cast = $__a$0;
    $sub$ptr$sub = (($sub$ptr$lhs$cast) - ($sub$ptr$rhs$cast))|0;
    $18 = HEAP8[$__buf>>0]|0;
    $and$i$i47 = $18 & 1;
    $tobool$i$i48 = ($and$i$i47<<24>>24)==(0);
    if ($tobool$i$i48) {
     $conv$i$i = $18&255;
     $shr1$i$i = $conv$i$i >>> 1;
     $cond$i50 = $shr1$i$i;
    } else {
     $19 = HEAP32[$__size_$i2$i64>>2]|0;
     $cond$i50 = $19;
    }
    $cmp = ($sub$ptr$sub|0)==($cond$i50|0);
    if ($cmp) {
     if ($tobool$i$i48) {
      $conv$i$i56 = $18&255;
      $shr1$i$i57 = $conv$i$i56 >>> 1;
      $conv$i$i66 = $18&255;
      $shr1$i$i67 = $conv$i$i66 >>> 1;
      $cond$i59120 = $shr1$i$i57;$cond$i69 = $shr1$i$i67;
     } else {
      $20 = HEAP32[$__size_$i2$i64>>2]|0;
      $cond$i59120 = $20;$cond$i69 = $20;
     }
     $mul = $cond$i69 << 1;
     __THREW__ = 0;
     invoke_viii(385,($__buf|0),($mul|0),0);
     $21 = __THREW__; __THREW__ = 0;
     $22 = $21&1;
     if ($22) {
      label = 33;
      break;
     }
     $23 = HEAP8[$__buf>>0]|0;
     $and$i$i85 = $23 & 1;
     $tobool$i$i86 = ($and$i$i85<<24>>24)==(0);
     if ($tobool$i$i86) {
      $cond$i91 = 10;
     } else {
      $24 = HEAP32[$__buf>>2]|0;
      $and$i1$i88 = $24 & -2;
      $phitmp$i89 = (($and$i1$i88) + -1)|0;
      $cond$i91 = $phitmp$i89;
     }
     __THREW__ = 0;
     invoke_viii(385,($__buf|0),($cond$i91|0),0);
     $25 = __THREW__; __THREW__ = 0;
     $26 = $25&1;
     if ($26) {
      label = 33;
      break;
     }
     $27 = HEAP8[$__buf>>0]|0;
     $and$i$i$i95 = $27 & 1;
     $tobool$i$i$i96 = ($and$i$i$i95<<24>>24)==(0);
     if ($tobool$i$i$i96) {
      $cond$i$i102 = $arrayidx$i$i$i100$pre$phiZZZZ2D;
     } else {
      $28 = HEAP32[$__data_$i$i$i97$pre$phiZZZZ2D>>2]|0;
      $cond$i$i102 = $28;
     }
     $add$ptr = (($cond$i$i102) + ($cond$i59120)|0);
     HEAP32[$__a_end>>2] = $add$ptr;
     $__a$1 = $cond$i$i102;
    } else {
     $__a$1 = $__a$0;
    }
    $__ninp_$i$i105 = (($10) + 12|0);
    $33 = HEAP32[$__ninp_$i$i105>>2]|0;
    $__einp_$i$i106 = (($10) + 16|0);
    $34 = HEAP32[$__einp_$i$i106>>2]|0;
    $cmp$i$i107 = ($33|0)==($34|0);
    if ($cmp$i$i107) {
     $vtable$i$i108 = HEAP32[$10>>2]|0;
     $vfn$i$i109 = (($vtable$i$i108) + 36|0);
     $35 = HEAP32[$vfn$i$i109>>2]|0;
     __THREW__ = 0;
     $call$i$i113 = (invoke_ii($35|0,($10|0))|0);
     $36 = __THREW__; __THREW__ = 0;
     $37 = $36&1;
     if ($37) {
      label = 33;
      break;
     } else {
      $retval$0$i$i = $call$i$i113;
     }
    } else {
     $38 = HEAP8[$33>>0]|0;
     $conv$i$i$i = $38&255;
     $retval$0$i$i = $conv$i$i$i;
    }
    $conv$i = $retval$0$i$i&255;
    $call21 = (__ZNSt3__19__num_getIcE17__stage2_int_loopEciPcRS2_RjcRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_S2_($conv$i,$call,$__a$1,$__a_end,$__dc,$4,$__grouping,$__g,$__g_end,$__atoms)|0);
    $tobool = ($call21|0)==(0);
    if (!($tobool)) {
     $$pre$i12$i$i = $64;$__a$2 = $__a$1;
     break;
    }
    $39 = HEAP32[$__ninp_$i$i105>>2]|0;
    $40 = HEAP32[$__einp_$i$i106>>2]|0;
    $cmp$i$i81 = ($39|0)==($40|0);
    if ($cmp$i$i81) {
     $vtable$i$i = HEAP32[$10>>2]|0;
     $vfn$i$i = (($vtable$i$i) + 40|0);
     $41 = HEAP32[$vfn$i$i>>2]|0;
     __THREW__ = 0;
     (invoke_ii($41|0,($10|0))|0);
     $42 = __THREW__; __THREW__ = 0;
     $43 = $42&1;
     if ($43) {
      label = 33;
      break;
     } else {
      $$pre$i$i$i22 = $10;$__a$0 = $__a$1;
      continue;
     }
    } else {
     $incdec$ptr$i$i = (($39) + 1|0);
     HEAP32[$__ninp_$i$i105>>2] = $incdec$ptr$i$i;
     $$pre$i$i$i22 = $10;$__a$0 = $__a$1;
     continue;
    }
   }
   if ((label|0) == 33) {
    $29 = ___cxa_find_matching_catch()|0;
    $30 = tempRet0;
    $lpad$phi$index = $29;$lpad$phi$index2 = $30;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
    ___resumeException($lpad$phi$index|0);
    // unreachable;
   }
   $44 = HEAP8[$__grouping>>0]|0;
   $and$i$i72 = $44 & 1;
   $tobool$i$i73 = ($and$i$i72<<24>>24)==(0);
   if ($tobool$i$i73) {
    $conv$i$i76 = $44&255;
    $shr1$i$i77 = $conv$i$i76 >>> 1;
    $cond$i79 = $shr1$i$i77;
   } else {
    $__size_$i2$i74 = (($__grouping) + 4|0);
    $45 = HEAP32[$__size_$i2$i74>>2]|0;
    $cond$i79 = $45;
   }
   $cmp27 = ($cond$i79|0)==(0);
   if (!($cmp27)) {
    $46 = HEAP32[$__g_end>>2]|0;
    $sub$ptr$lhs$cast29 = $46;
    $sub$ptr$rhs$cast30 = $__g;
    $sub$ptr$sub31 = (($sub$ptr$lhs$cast29) - ($sub$ptr$rhs$cast30))|0;
    $cmp32 = ($sub$ptr$sub31|0)<(160);
    if ($cmp32) {
     $47 = HEAP32[$__dc>>2]|0;
     $incdec$ptr = (($46) + 4|0);
     HEAP32[$__g_end>>2] = $incdec$ptr;
     HEAP32[$46>>2] = $47;
    }
   }
   $48 = HEAP32[$__a_end>>2]|0;
   __THREW__ = 0;
   $call36 = (invoke_iiiii(386,($__a$2|0),($48|0),($__err|0),($call|0))|0);
   $49 = __THREW__; __THREW__ = 0;
   $50 = $49&1;
   if (!($50)) {
    HEAP32[$__v>>2] = $call36;
    $51 = HEAP32[$__g_end>>2]|0;
    __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping,$__g,$51,$__err);
    $tobool$i$i$i = ($10|0)==(0|0);
    if ($tobool$i$i$i) {
     $57 = 0;
    } else {
     $__ninp_$i$i$i$i = (($10) + 12|0);
     $52 = HEAP32[$__ninp_$i$i$i$i>>2]|0;
     $__einp_$i$i$i$i = (($10) + 16|0);
     $53 = HEAP32[$__einp_$i$i$i$i>>2]|0;
     $cmp$i$i$i$i = ($52|0)==($53|0);
     if ($cmp$i$i$i$i) {
      $vtable$i$i$i$i = HEAP32[$10>>2]|0;
      $vfn$i$i$i$i = (($vtable$i$i$i$i) + 36|0);
      $54 = HEAP32[$vfn$i$i$i$i>>2]|0;
      __THREW__ = 0;
      $call$i$i$i$i9 = (invoke_ii($54|0,($10|0))|0);
      $55 = __THREW__; __THREW__ = 0;
      $56 = $55&1;
      if ($56) {
       break;
      }
      $cmp$i1$i$i$i = ($call$i$i$i$i9|0)==(-1);
      if ($cmp$i1$i$i$i) {
       HEAP32[$__b>>2] = 0;
       $57 = 0;
      } else {
       $57 = $10;
      }
     } else {
      $57 = $10;
     }
    }
    $cmp$i$i$i = ($57|0)==(0|0);
    $tobool$i2$i$i = ($$pre$i12$i$i|0)==(0|0);
    do {
     if ($tobool$i2$i$i) {
      label = 61;
     } else {
      $__ninp_$i$i3$i$i = (($$pre$i12$i$i) + 12|0);
      $58 = HEAP32[$__ninp_$i$i3$i$i>>2]|0;
      $__einp_$i$i4$i$i = (($$pre$i12$i$i) + 16|0);
      $59 = HEAP32[$__einp_$i$i4$i$i>>2]|0;
      $cmp$i$i5$i$i = ($58|0)==($59|0);
      if (!($cmp$i$i5$i$i)) {
       if (!($cmp$i$i$i)) {
        break;
       }
       HEAP32[$agg$result>>2] = $57;
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
       STACKTOP = sp;return;
      }
      $vtable$i$i7$i$i = HEAP32[$$pre$i12$i$i>>2]|0;
      $vfn$i$i8$i$i = (($vtable$i$i7$i$i) + 36|0);
      $60 = HEAP32[$vfn$i$i8$i$i>>2]|0;
      __THREW__ = 0;
      $call$i$i9$i$i10 = (invoke_ii($60|0,($$pre$i12$i$i|0))|0);
      $61 = __THREW__; __THREW__ = 0;
      $62 = $61&1;
      if ($62) {
       break L1;
      }
      $cmp$i1$i10$i$i = ($call$i$i9$i$i10|0)==(-1);
      if ($cmp$i1$i10$i$i) {
       HEAP32[$__e>>2] = 0;
       label = 61;
       break;
      }
      $cmp$i15$i$i = ($$pre$i12$i$i|0)==(0|0);
      $cmptmp$i$i = $cmp$i$i$i ^ $cmp$i15$i$i;
      if ($cmptmp$i$i) {
       HEAP32[$agg$result>>2] = $57;
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
       STACKTOP = sp;return;
      }
     }
    } while(0);
    if ((label|0) == 61) {
     if (!($cmp$i$i$i)) {
      HEAP32[$agg$result>>2] = $57;
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
      STACKTOP = sp;return;
     }
    }
    $63 = HEAP32[$__err>>2]|0;
    $or = $63 | 2;
    HEAP32[$__err>>2] = $or;
    HEAP32[$agg$result>>2] = $57;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
    STACKTOP = sp;return;
   }
  }
 } while(0);
 $31 = ___cxa_find_matching_catch()|0;
 $32 = tempRet0;
 $lpad$phi$index = $31;$lpad$phi$index2 = $32;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
 ___resumeException($lpad$phi$index|0);
 // unreachable;
}
function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRx($agg$result,$this,$__b,$__e,$__iob,$__err,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $0 = 0, $1 = 0, $agg$tmp = 0, $agg$tmp$byval_copy = 0, $agg$tmp2 = 0, $agg$tmp2$byval_copy = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $agg$tmp2$byval_copy = sp + 12|0;
 $agg$tmp$byval_copy = sp + 8|0;
 $agg$tmp = sp + 4|0;
 $agg$tmp2 = sp;
 $0 = HEAP32[$__b>>2]|0;
 HEAP32[$agg$tmp>>2] = $0;
 $1 = HEAP32[$__e>>2]|0;
 HEAP32[$agg$tmp2>>2] = $1;
 ;HEAP32[$agg$tmp$byval_copy+0>>2]=HEAP32[$agg$tmp+0>>2]|0;
 ;HEAP32[$agg$tmp2$byval_copy+0>>2]=HEAP32[$agg$tmp2+0>>2]|0;
 __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE15__do_get_signedIxEES4_S4_S4_RNS_8ios_baseERjRT_($agg$result,0,$agg$tmp$byval_copy,$agg$tmp2$byval_copy,$__iob,$__err,$__v);
 STACKTOP = sp;return;
}
function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE15__do_get_signedIxEES4_S4_S4_RNS_8ios_baseERjRT_($agg$result,$this,$__b,$__e,$__iob,$__err,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$pre = 0, $$pre$i$i$i22 = 0, $$pre$i12$i$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $8 = 0, $9 = 0, $__a$0 = 0, $__a$1 = 0, $__a$2 = 0, $__a_end = 0, $__atoms = 0, $__buf = 0;
 var $__data_$i$i$i = 0, $__data_$i$i$i97$pre = 0, $__data_$i$i$i97$pre$phiZZZZ2D = 0, $__dc = 0, $__einp_$i$i$i$i = 0, $__einp_$i$i$i$i15 = 0, $__einp_$i$i106 = 0, $__einp_$i$i4$i$i = 0, $__einp_$i$i4$i$i30 = 0, $__g = 0, $__g_end = 0, $__grouping = 0, $__ninp_$i$i$i$i = 0, $__ninp_$i$i$i$i14 = 0, $__ninp_$i$i105 = 0, $__ninp_$i$i3$i$i = 0, $__ninp_$i$i3$i$i29 = 0, $__size_$i2$i64 = 0, $__size_$i2$i74 = 0, $__thousands_sep = 0;
 var $add$ptr = 0, $and$i$i$i = 0, $and$i$i$i95 = 0, $and$i$i47 = 0, $and$i$i72 = 0, $and$i$i85 = 0, $and$i1$i88 = 0, $arrayidx$i$i$i = 0, $arrayidx$i$i$i100$pre = 0, $arrayidx$i$i$i100$pre$phiZZZZ2D = 0, $call = 0, $call$i$i$i$i43 = 0, $call$i$i$i$i9 = 0, $call$i$i113 = 0, $call$i$i9$i$i10 = 0, $call$i$i9$i$i45 = 0, $call21 = 0, $cmp = 0, $cmp$i$i$i = 0, $cmp$i$i$i$i = 0;
 var $cmp$i$i$i$i16 = 0, $cmp$i$i$i25 = 0, $cmp$i$i107 = 0, $cmp$i$i5$i$i = 0, $cmp$i$i5$i$i31 = 0, $cmp$i$i81 = 0, $cmp$i1$i$i$i = 0, $cmp$i1$i$i$i20 = 0, $cmp$i1$i10$i$i = 0, $cmp$i1$i10$i$i35 = 0, $cmp$i15$i$i = 0, $cmp27 = 0, $cmp32 = 0, $cmptmp$i$i = 0, $cond$i$i = 0, $cond$i$i102 = 0, $cond$i50 = 0, $cond$i59120 = 0, $cond$i69 = 0, $cond$i79 = 0;
 var $cond$i91 = 0, $conv$i = 0, $conv$i$i = 0, $conv$i$i$i = 0, $conv$i$i56 = 0, $conv$i$i66 = 0, $conv$i$i76 = 0, $incdec$ptr = 0, $incdec$ptr$i$i = 0, $lpad$phi$index = 0, $lpad$phi$index2 = 0, $mul = 0, $or = 0, $phitmp$i89 = 0, $retval$0$i$i = 0, $shr1$i$i = 0, $shr1$i$i57 = 0, $shr1$i$i67 = 0, $shr1$i$i77 = 0, $sub$ptr$lhs$cast = 0;
 var $sub$ptr$lhs$cast29 = 0, $sub$ptr$rhs$cast = 0, $sub$ptr$rhs$cast30 = 0, $sub$ptr$sub = 0, $sub$ptr$sub31 = 0, $tobool = 0, $tobool$i$i$i = 0, $tobool$i$i$i11 = 0, $tobool$i$i$i13 = 0, $tobool$i$i$i96 = 0, $tobool$i$i48 = 0, $tobool$i$i73 = 0, $tobool$i$i86 = 0, $tobool$i2$i$i = 0, $tobool$i2$i$i27 = 0, $vfn$i$i = 0, $vfn$i$i$i$i = 0, $vfn$i$i$i$i19 = 0, $vfn$i$i109 = 0, $vfn$i$i8$i$i = 0;
 var $vfn$i$i8$i$i34 = 0, $vtable$i$i = 0, $vtable$i$i$i$i = 0, $vtable$i$i$i$i18 = 0, $vtable$i$i108 = 0, $vtable$i$i7$i$i = 0, $vtable$i$i7$i$i33 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 224|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__atoms = sp + 198|0;
 $__thousands_sep = sp + 196|0;
 $__grouping = sp + 16|0;
 $__buf = sp + 4|0;
 $__a_end = sp + 192|0;
 $__g = sp + 32|0;
 $__g_end = sp;
 $__dc = sp + 28|0;
 $call = (__ZNSt3__114__num_get_base10__get_baseERNS_8ios_baseE($__iob)|0);
 __ZNSt3__19__num_getIcE17__stage2_int_prepERNS_8ios_baseEPcRc($__grouping,$__iob,$__atoms,$__thousands_sep);
 ;HEAP32[$__buf+0>>2]=0|0;HEAP32[$__buf+4>>2]=0|0;HEAP32[$__buf+8>>2]=0|0;
 __THREW__ = 0;
 invoke_viii(385,($__buf|0),10,0);
 $0 = __THREW__; __THREW__ = 0;
 $1 = $0&1;
 L1: do {
  if (!($1)) {
   $2 = HEAP8[$__buf>>0]|0;
   $and$i$i$i = $2 & 1;
   $tobool$i$i$i11 = ($and$i$i$i<<24>>24)==(0);
   if ($tobool$i$i$i11) {
    $arrayidx$i$i$i = (($__buf) + 1|0);
    $__data_$i$i$i97$pre = (($__buf) + 8|0);
    $__data_$i$i$i97$pre$phiZZZZ2D = $__data_$i$i$i97$pre;$arrayidx$i$i$i100$pre$phiZZZZ2D = $arrayidx$i$i$i;$cond$i$i = $arrayidx$i$i$i;
   } else {
    $__data_$i$i$i = (($__buf) + 8|0);
    $3 = HEAP32[$__data_$i$i$i>>2]|0;
    $arrayidx$i$i$i100$pre = (($__buf) + 1|0);
    $__data_$i$i$i97$pre$phiZZZZ2D = $__data_$i$i$i;$arrayidx$i$i$i100$pre$phiZZZZ2D = $arrayidx$i$i$i100$pre;$cond$i$i = $3;
   }
   HEAP32[$__a_end>>2] = $cond$i$i;
   HEAP32[$__g_end>>2] = $__g;
   HEAP32[$__dc>>2] = 0;
   $__size_$i2$i64 = (($__buf) + 4|0);
   $4 = HEAP8[$__thousands_sep>>0]|0;
   $$pre = HEAP32[$__b>>2]|0;
   $$pre$i$i$i22 = $$pre;$__a$0 = $cond$i$i;
   L7: while(1) {
    $tobool$i$i$i13 = ($$pre$i$i$i22|0)==(0|0);
    if ($tobool$i$i$i13) {
     $10 = 0;
    } else {
     $__ninp_$i$i$i$i14 = (($$pre$i$i$i22) + 12|0);
     $5 = HEAP32[$__ninp_$i$i$i$i14>>2]|0;
     $__einp_$i$i$i$i15 = (($$pre$i$i$i22) + 16|0);
     $6 = HEAP32[$__einp_$i$i$i$i15>>2]|0;
     $cmp$i$i$i$i16 = ($5|0)==($6|0);
     if ($cmp$i$i$i$i16) {
      $vtable$i$i$i$i18 = HEAP32[$$pre$i$i$i22>>2]|0;
      $vfn$i$i$i$i19 = (($vtable$i$i$i$i18) + 36|0);
      $7 = HEAP32[$vfn$i$i$i$i19>>2]|0;
      __THREW__ = 0;
      $call$i$i$i$i43 = (invoke_ii($7|0,($$pre$i$i$i22|0))|0);
      $8 = __THREW__; __THREW__ = 0;
      $9 = $8&1;
      if ($9) {
       label = 33;
       break;
      }
      $cmp$i1$i$i$i20 = ($call$i$i$i$i43|0)==(-1);
      if ($cmp$i1$i$i$i20) {
       HEAP32[$__b>>2] = 0;
       $10 = 0;
      } else {
       $10 = $$pre$i$i$i22;
      }
     } else {
      $10 = $$pre$i$i$i22;
     }
    }
    $cmp$i$i$i25 = ($10|0)==(0|0);
    $11 = HEAP32[$__e>>2]|0;
    $tobool$i2$i$i27 = ($11|0)==(0|0);
    do {
     if ($tobool$i2$i$i27) {
      label = 17;
     } else {
      $__ninp_$i$i3$i$i29 = (($11) + 12|0);
      $12 = HEAP32[$__ninp_$i$i3$i$i29>>2]|0;
      $__einp_$i$i4$i$i30 = (($11) + 16|0);
      $13 = HEAP32[$__einp_$i$i4$i$i30>>2]|0;
      $cmp$i$i5$i$i31 = ($12|0)==($13|0);
      if (!($cmp$i$i5$i$i31)) {
       if ($cmp$i$i$i25) {
        $70 = $11;
        break;
       } else {
        $$pre$i12$i$i = $11;$__a$2 = $__a$0;
        break L7;
       }
      }
      $vtable$i$i7$i$i33 = HEAP32[$11>>2]|0;
      $vfn$i$i8$i$i34 = (($vtable$i$i7$i$i33) + 36|0);
      $14 = HEAP32[$vfn$i$i8$i$i34>>2]|0;
      __THREW__ = 0;
      $call$i$i9$i$i45 = (invoke_ii($14|0,($11|0))|0);
      $15 = __THREW__; __THREW__ = 0;
      $16 = $15&1;
      if ($16) {
       label = 33;
       break L7;
      }
      $cmp$i1$i10$i$i35 = ($call$i$i9$i$i45|0)==(-1);
      if ($cmp$i1$i10$i$i35) {
       HEAP32[$__e>>2] = 0;
       label = 17;
       break;
      } else {
       if ($cmp$i$i$i25) {
        $70 = $11;
        break;
       } else {
        $$pre$i12$i$i = $11;$__a$2 = $__a$0;
        break L7;
       }
      }
     }
    } while(0);
    if ((label|0) == 17) {
     label = 0;
     if ($cmp$i$i$i25) {
      $$pre$i12$i$i = 0;$__a$2 = $__a$0;
      break;
     } else {
      $70 = 0;
     }
    }
    $17 = HEAP32[$__a_end>>2]|0;
    $sub$ptr$lhs$cast = $17;
    $sub$ptr$rhs$cast = $__a$0;
    $sub$ptr$sub = (($sub$ptr$lhs$cast) - ($sub$ptr$rhs$cast))|0;
    $18 = HEAP8[$__buf>>0]|0;
    $and$i$i47 = $18 & 1;
    $tobool$i$i48 = ($and$i$i47<<24>>24)==(0);
    if ($tobool$i$i48) {
     $conv$i$i = $18&255;
     $shr1$i$i = $conv$i$i >>> 1;
     $cond$i50 = $shr1$i$i;
    } else {
     $19 = HEAP32[$__size_$i2$i64>>2]|0;
     $cond$i50 = $19;
    }
    $cmp = ($sub$ptr$sub|0)==($cond$i50|0);
    if ($cmp) {
     if ($tobool$i$i48) {
      $conv$i$i56 = $18&255;
      $shr1$i$i57 = $conv$i$i56 >>> 1;
      $conv$i$i66 = $18&255;
      $shr1$i$i67 = $conv$i$i66 >>> 1;
      $cond$i59120 = $shr1$i$i57;$cond$i69 = $shr1$i$i67;
     } else {
      $20 = HEAP32[$__size_$i2$i64>>2]|0;
      $cond$i59120 = $20;$cond$i69 = $20;
     }
     $mul = $cond$i69 << 1;
     __THREW__ = 0;
     invoke_viii(385,($__buf|0),($mul|0),0);
     $21 = __THREW__; __THREW__ = 0;
     $22 = $21&1;
     if ($22) {
      label = 33;
      break;
     }
     $23 = HEAP8[$__buf>>0]|0;
     $and$i$i85 = $23 & 1;
     $tobool$i$i86 = ($and$i$i85<<24>>24)==(0);
     if ($tobool$i$i86) {
      $cond$i91 = 10;
     } else {
      $24 = HEAP32[$__buf>>2]|0;
      $and$i1$i88 = $24 & -2;
      $phitmp$i89 = (($and$i1$i88) + -1)|0;
      $cond$i91 = $phitmp$i89;
     }
     __THREW__ = 0;
     invoke_viii(385,($__buf|0),($cond$i91|0),0);
     $25 = __THREW__; __THREW__ = 0;
     $26 = $25&1;
     if ($26) {
      label = 33;
      break;
     }
     $27 = HEAP8[$__buf>>0]|0;
     $and$i$i$i95 = $27 & 1;
     $tobool$i$i$i96 = ($and$i$i$i95<<24>>24)==(0);
     if ($tobool$i$i$i96) {
      $cond$i$i102 = $arrayidx$i$i$i100$pre$phiZZZZ2D;
     } else {
      $28 = HEAP32[$__data_$i$i$i97$pre$phiZZZZ2D>>2]|0;
      $cond$i$i102 = $28;
     }
     $add$ptr = (($cond$i$i102) + ($cond$i59120)|0);
     HEAP32[$__a_end>>2] = $add$ptr;
     $__a$1 = $cond$i$i102;
    } else {
     $__a$1 = $__a$0;
    }
    $__ninp_$i$i105 = (($10) + 12|0);
    $33 = HEAP32[$__ninp_$i$i105>>2]|0;
    $__einp_$i$i106 = (($10) + 16|0);
    $34 = HEAP32[$__einp_$i$i106>>2]|0;
    $cmp$i$i107 = ($33|0)==($34|0);
    if ($cmp$i$i107) {
     $vtable$i$i108 = HEAP32[$10>>2]|0;
     $vfn$i$i109 = (($vtable$i$i108) + 36|0);
     $35 = HEAP32[$vfn$i$i109>>2]|0;
     __THREW__ = 0;
     $call$i$i113 = (invoke_ii($35|0,($10|0))|0);
     $36 = __THREW__; __THREW__ = 0;
     $37 = $36&1;
     if ($37) {
      label = 33;
      break;
     } else {
      $retval$0$i$i = $call$i$i113;
     }
    } else {
     $38 = HEAP8[$33>>0]|0;
     $conv$i$i$i = $38&255;
     $retval$0$i$i = $conv$i$i$i;
    }
    $conv$i = $retval$0$i$i&255;
    $call21 = (__ZNSt3__19__num_getIcE17__stage2_int_loopEciPcRS2_RjcRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_S2_($conv$i,$call,$__a$1,$__a_end,$__dc,$4,$__grouping,$__g,$__g_end,$__atoms)|0);
    $tobool = ($call21|0)==(0);
    if (!($tobool)) {
     $$pre$i12$i$i = $70;$__a$2 = $__a$1;
     break;
    }
    $39 = HEAP32[$__ninp_$i$i105>>2]|0;
    $40 = HEAP32[$__einp_$i$i106>>2]|0;
    $cmp$i$i81 = ($39|0)==($40|0);
    if ($cmp$i$i81) {
     $vtable$i$i = HEAP32[$10>>2]|0;
     $vfn$i$i = (($vtable$i$i) + 40|0);
     $41 = HEAP32[$vfn$i$i>>2]|0;
     __THREW__ = 0;
     (invoke_ii($41|0,($10|0))|0);
     $42 = __THREW__; __THREW__ = 0;
     $43 = $42&1;
     if ($43) {
      label = 33;
      break;
     } else {
      $$pre$i$i$i22 = $10;$__a$0 = $__a$1;
      continue;
     }
    } else {
     $incdec$ptr$i$i = (($39) + 1|0);
     HEAP32[$__ninp_$i$i105>>2] = $incdec$ptr$i$i;
     $$pre$i$i$i22 = $10;$__a$0 = $__a$1;
     continue;
    }
   }
   if ((label|0) == 33) {
    $29 = ___cxa_find_matching_catch()|0;
    $30 = tempRet0;
    $lpad$phi$index = $29;$lpad$phi$index2 = $30;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
    ___resumeException($lpad$phi$index|0);
    // unreachable;
   }
   $44 = HEAP8[$__grouping>>0]|0;
   $and$i$i72 = $44 & 1;
   $tobool$i$i73 = ($and$i$i72<<24>>24)==(0);
   if ($tobool$i$i73) {
    $conv$i$i76 = $44&255;
    $shr1$i$i77 = $conv$i$i76 >>> 1;
    $cond$i79 = $shr1$i$i77;
   } else {
    $__size_$i2$i74 = (($__grouping) + 4|0);
    $45 = HEAP32[$__size_$i2$i74>>2]|0;
    $cond$i79 = $45;
   }
   $cmp27 = ($cond$i79|0)==(0);
   if (!($cmp27)) {
    $46 = HEAP32[$__g_end>>2]|0;
    $sub$ptr$lhs$cast29 = $46;
    $sub$ptr$rhs$cast30 = $__g;
    $sub$ptr$sub31 = (($sub$ptr$lhs$cast29) - ($sub$ptr$rhs$cast30))|0;
    $cmp32 = ($sub$ptr$sub31|0)<(160);
    if ($cmp32) {
     $47 = HEAP32[$__dc>>2]|0;
     $incdec$ptr = (($46) + 4|0);
     HEAP32[$__g_end>>2] = $incdec$ptr;
     HEAP32[$46>>2] = $47;
    }
   }
   $48 = HEAP32[$__a_end>>2]|0;
   __THREW__ = 0;
   $49 = (invoke_iiiii(387,($__a$2|0),($48|0),($__err|0),($call|0))|0);
   $50 = tempRet0;
   $51 = __THREW__; __THREW__ = 0;
   $52 = $51&1;
   if (!($52)) {
    $53 = $__v;
    $54 = $53;
    HEAP32[$54>>2] = $49;
    $55 = (($53) + 4)|0;
    $56 = $55;
    HEAP32[$56>>2] = $50;
    $57 = HEAP32[$__g_end>>2]|0;
    __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping,$__g,$57,$__err);
    $tobool$i$i$i = ($10|0)==(0|0);
    if ($tobool$i$i$i) {
     $63 = 0;
    } else {
     $__ninp_$i$i$i$i = (($10) + 12|0);
     $58 = HEAP32[$__ninp_$i$i$i$i>>2]|0;
     $__einp_$i$i$i$i = (($10) + 16|0);
     $59 = HEAP32[$__einp_$i$i$i$i>>2]|0;
     $cmp$i$i$i$i = ($58|0)==($59|0);
     if ($cmp$i$i$i$i) {
      $vtable$i$i$i$i = HEAP32[$10>>2]|0;
      $vfn$i$i$i$i = (($vtable$i$i$i$i) + 36|0);
      $60 = HEAP32[$vfn$i$i$i$i>>2]|0;
      __THREW__ = 0;
      $call$i$i$i$i9 = (invoke_ii($60|0,($10|0))|0);
      $61 = __THREW__; __THREW__ = 0;
      $62 = $61&1;
      if ($62) {
       break;
      }
      $cmp$i1$i$i$i = ($call$i$i$i$i9|0)==(-1);
      if ($cmp$i1$i$i$i) {
       HEAP32[$__b>>2] = 0;
       $63 = 0;
      } else {
       $63 = $10;
      }
     } else {
      $63 = $10;
     }
    }
    $cmp$i$i$i = ($63|0)==(0|0);
    $tobool$i2$i$i = ($$pre$i12$i$i|0)==(0|0);
    do {
     if ($tobool$i2$i$i) {
      label = 61;
     } else {
      $__ninp_$i$i3$i$i = (($$pre$i12$i$i) + 12|0);
      $64 = HEAP32[$__ninp_$i$i3$i$i>>2]|0;
      $__einp_$i$i4$i$i = (($$pre$i12$i$i) + 16|0);
      $65 = HEAP32[$__einp_$i$i4$i$i>>2]|0;
      $cmp$i$i5$i$i = ($64|0)==($65|0);
      if (!($cmp$i$i5$i$i)) {
       if (!($cmp$i$i$i)) {
        break;
       }
       HEAP32[$agg$result>>2] = $63;
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
       STACKTOP = sp;return;
      }
      $vtable$i$i7$i$i = HEAP32[$$pre$i12$i$i>>2]|0;
      $vfn$i$i8$i$i = (($vtable$i$i7$i$i) + 36|0);
      $66 = HEAP32[$vfn$i$i8$i$i>>2]|0;
      __THREW__ = 0;
      $call$i$i9$i$i10 = (invoke_ii($66|0,($$pre$i12$i$i|0))|0);
      $67 = __THREW__; __THREW__ = 0;
      $68 = $67&1;
      if ($68) {
       break L1;
      }
      $cmp$i1$i10$i$i = ($call$i$i9$i$i10|0)==(-1);
      if ($cmp$i1$i10$i$i) {
       HEAP32[$__e>>2] = 0;
       label = 61;
       break;
      }
      $cmp$i15$i$i = ($$pre$i12$i$i|0)==(0|0);
      $cmptmp$i$i = $cmp$i$i$i ^ $cmp$i15$i$i;
      if ($cmptmp$i$i) {
       HEAP32[$agg$result>>2] = $63;
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
       STACKTOP = sp;return;
      }
     }
    } while(0);
    if ((label|0) == 61) {
     if (!($cmp$i$i$i)) {
      HEAP32[$agg$result>>2] = $63;
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
      STACKTOP = sp;return;
     }
    }
    $69 = HEAP32[$__err>>2]|0;
    $or = $69 | 2;
    HEAP32[$__err>>2] = $or;
    HEAP32[$agg$result>>2] = $63;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
    STACKTOP = sp;return;
   }
  }
 } while(0);
 $31 = ___cxa_find_matching_catch()|0;
 $32 = tempRet0;
 $lpad$phi$index = $31;$lpad$phi$index2 = $32;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
 ___resumeException($lpad$phi$index|0);
 // unreachable;
}
function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRt($agg$result,$this,$__b,$__e,$__iob,$__err,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $0 = 0, $1 = 0, $agg$tmp = 0, $agg$tmp$byval_copy = 0, $agg$tmp2 = 0, $agg$tmp2$byval_copy = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $agg$tmp2$byval_copy = sp + 12|0;
 $agg$tmp$byval_copy = sp + 8|0;
 $agg$tmp = sp + 4|0;
 $agg$tmp2 = sp;
 $0 = HEAP32[$__b>>2]|0;
 HEAP32[$agg$tmp>>2] = $0;
 $1 = HEAP32[$__e>>2]|0;
 HEAP32[$agg$tmp2>>2] = $1;
 ;HEAP32[$agg$tmp$byval_copy+0>>2]=HEAP32[$agg$tmp+0>>2]|0;
 ;HEAP32[$agg$tmp2$byval_copy+0>>2]=HEAP32[$agg$tmp2+0>>2]|0;
 __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__do_get_unsignedItEES4_S4_S4_RNS_8ios_baseERjRT_($agg$result,0,$agg$tmp$byval_copy,$agg$tmp2$byval_copy,$__iob,$__err,$__v);
 STACKTOP = sp;return;
}
function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__do_get_unsignedItEES4_S4_S4_RNS_8ios_baseERjRT_($agg$result,$this,$__b,$__e,$__iob,$__err,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$pre = 0, $$pre$i$i$i22 = 0, $$pre$i12$i$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $7 = 0, $8 = 0, $9 = 0, $__a$0 = 0, $__a$1 = 0, $__a$2 = 0, $__a_end = 0, $__atoms = 0, $__buf = 0, $__data_$i$i$i = 0, $__data_$i$i$i97$pre = 0, $__data_$i$i$i97$pre$phiZZZZ2D = 0, $__dc = 0, $__einp_$i$i$i$i = 0, $__einp_$i$i$i$i15 = 0;
 var $__einp_$i$i106 = 0, $__einp_$i$i4$i$i = 0, $__einp_$i$i4$i$i30 = 0, $__g = 0, $__g_end = 0, $__grouping = 0, $__ninp_$i$i$i$i = 0, $__ninp_$i$i$i$i14 = 0, $__ninp_$i$i105 = 0, $__ninp_$i$i3$i$i = 0, $__ninp_$i$i3$i$i29 = 0, $__size_$i2$i64 = 0, $__size_$i2$i74 = 0, $__thousands_sep = 0, $add$ptr = 0, $and$i$i$i = 0, $and$i$i$i95 = 0, $and$i$i47 = 0, $and$i$i72 = 0, $and$i$i85 = 0;
 var $and$i1$i88 = 0, $arrayidx$i$i$i = 0, $arrayidx$i$i$i100$pre = 0, $arrayidx$i$i$i100$pre$phiZZZZ2D = 0, $call = 0, $call$i$i$i$i43 = 0, $call$i$i$i$i9 = 0, $call$i$i113 = 0, $call$i$i9$i$i10 = 0, $call$i$i9$i$i45 = 0, $call21 = 0, $call36 = 0, $cmp = 0, $cmp$i$i$i = 0, $cmp$i$i$i$i = 0, $cmp$i$i$i$i16 = 0, $cmp$i$i$i25 = 0, $cmp$i$i107 = 0, $cmp$i$i5$i$i = 0, $cmp$i$i5$i$i31 = 0;
 var $cmp$i$i81 = 0, $cmp$i1$i$i$i = 0, $cmp$i1$i$i$i20 = 0, $cmp$i1$i10$i$i = 0, $cmp$i1$i10$i$i35 = 0, $cmp$i15$i$i = 0, $cmp27 = 0, $cmp32 = 0, $cmptmp$i$i = 0, $cond$i$i = 0, $cond$i$i102 = 0, $cond$i50 = 0, $cond$i59120 = 0, $cond$i69 = 0, $cond$i79 = 0, $cond$i91 = 0, $conv$i = 0, $conv$i$i = 0, $conv$i$i$i = 0, $conv$i$i56 = 0;
 var $conv$i$i66 = 0, $conv$i$i76 = 0, $incdec$ptr = 0, $incdec$ptr$i$i = 0, $lpad$phi$index = 0, $lpad$phi$index2 = 0, $mul = 0, $or = 0, $phitmp$i89 = 0, $retval$0$i$i = 0, $shr1$i$i = 0, $shr1$i$i57 = 0, $shr1$i$i67 = 0, $shr1$i$i77 = 0, $sub$ptr$lhs$cast = 0, $sub$ptr$lhs$cast29 = 0, $sub$ptr$rhs$cast = 0, $sub$ptr$rhs$cast30 = 0, $sub$ptr$sub = 0, $sub$ptr$sub31 = 0;
 var $tobool = 0, $tobool$i$i$i = 0, $tobool$i$i$i11 = 0, $tobool$i$i$i13 = 0, $tobool$i$i$i96 = 0, $tobool$i$i48 = 0, $tobool$i$i73 = 0, $tobool$i$i86 = 0, $tobool$i2$i$i = 0, $tobool$i2$i$i27 = 0, $vfn$i$i = 0, $vfn$i$i$i$i = 0, $vfn$i$i$i$i19 = 0, $vfn$i$i109 = 0, $vfn$i$i8$i$i = 0, $vfn$i$i8$i$i34 = 0, $vtable$i$i = 0, $vtable$i$i$i$i = 0, $vtable$i$i$i$i18 = 0, $vtable$i$i108 = 0;
 var $vtable$i$i7$i$i = 0, $vtable$i$i7$i$i33 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 224|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__atoms = sp + 198|0;
 $__thousands_sep = sp + 196|0;
 $__grouping = sp + 16|0;
 $__buf = sp + 4|0;
 $__a_end = sp + 192|0;
 $__g = sp + 32|0;
 $__g_end = sp;
 $__dc = sp + 28|0;
 $call = (__ZNSt3__114__num_get_base10__get_baseERNS_8ios_baseE($__iob)|0);
 __ZNSt3__19__num_getIcE17__stage2_int_prepERNS_8ios_baseEPcRc($__grouping,$__iob,$__atoms,$__thousands_sep);
 ;HEAP32[$__buf+0>>2]=0|0;HEAP32[$__buf+4>>2]=0|0;HEAP32[$__buf+8>>2]=0|0;
 __THREW__ = 0;
 invoke_viii(385,($__buf|0),10,0);
 $0 = __THREW__; __THREW__ = 0;
 $1 = $0&1;
 L1: do {
  if (!($1)) {
   $2 = HEAP8[$__buf>>0]|0;
   $and$i$i$i = $2 & 1;
   $tobool$i$i$i11 = ($and$i$i$i<<24>>24)==(0);
   if ($tobool$i$i$i11) {
    $arrayidx$i$i$i = (($__buf) + 1|0);
    $__data_$i$i$i97$pre = (($__buf) + 8|0);
    $__data_$i$i$i97$pre$phiZZZZ2D = $__data_$i$i$i97$pre;$arrayidx$i$i$i100$pre$phiZZZZ2D = $arrayidx$i$i$i;$cond$i$i = $arrayidx$i$i$i;
   } else {
    $__data_$i$i$i = (($__buf) + 8|0);
    $3 = HEAP32[$__data_$i$i$i>>2]|0;
    $arrayidx$i$i$i100$pre = (($__buf) + 1|0);
    $__data_$i$i$i97$pre$phiZZZZ2D = $__data_$i$i$i;$arrayidx$i$i$i100$pre$phiZZZZ2D = $arrayidx$i$i$i100$pre;$cond$i$i = $3;
   }
   HEAP32[$__a_end>>2] = $cond$i$i;
   HEAP32[$__g_end>>2] = $__g;
   HEAP32[$__dc>>2] = 0;
   $__size_$i2$i64 = (($__buf) + 4|0);
   $4 = HEAP8[$__thousands_sep>>0]|0;
   $$pre = HEAP32[$__b>>2]|0;
   $$pre$i$i$i22 = $$pre;$__a$0 = $cond$i$i;
   L7: while(1) {
    $tobool$i$i$i13 = ($$pre$i$i$i22|0)==(0|0);
    if ($tobool$i$i$i13) {
     $10 = 0;
    } else {
     $__ninp_$i$i$i$i14 = (($$pre$i$i$i22) + 12|0);
     $5 = HEAP32[$__ninp_$i$i$i$i14>>2]|0;
     $__einp_$i$i$i$i15 = (($$pre$i$i$i22) + 16|0);
     $6 = HEAP32[$__einp_$i$i$i$i15>>2]|0;
     $cmp$i$i$i$i16 = ($5|0)==($6|0);
     if ($cmp$i$i$i$i16) {
      $vtable$i$i$i$i18 = HEAP32[$$pre$i$i$i22>>2]|0;
      $vfn$i$i$i$i19 = (($vtable$i$i$i$i18) + 36|0);
      $7 = HEAP32[$vfn$i$i$i$i19>>2]|0;
      __THREW__ = 0;
      $call$i$i$i$i43 = (invoke_ii($7|0,($$pre$i$i$i22|0))|0);
      $8 = __THREW__; __THREW__ = 0;
      $9 = $8&1;
      if ($9) {
       label = 33;
       break;
      }
      $cmp$i1$i$i$i20 = ($call$i$i$i$i43|0)==(-1);
      if ($cmp$i1$i$i$i20) {
       HEAP32[$__b>>2] = 0;
       $10 = 0;
      } else {
       $10 = $$pre$i$i$i22;
      }
     } else {
      $10 = $$pre$i$i$i22;
     }
    }
    $cmp$i$i$i25 = ($10|0)==(0|0);
    $11 = HEAP32[$__e>>2]|0;
    $tobool$i2$i$i27 = ($11|0)==(0|0);
    do {
     if ($tobool$i2$i$i27) {
      label = 17;
     } else {
      $__ninp_$i$i3$i$i29 = (($11) + 12|0);
      $12 = HEAP32[$__ninp_$i$i3$i$i29>>2]|0;
      $__einp_$i$i4$i$i30 = (($11) + 16|0);
      $13 = HEAP32[$__einp_$i$i4$i$i30>>2]|0;
      $cmp$i$i5$i$i31 = ($12|0)==($13|0);
      if (!($cmp$i$i5$i$i31)) {
       if ($cmp$i$i$i25) {
        $64 = $11;
        break;
       } else {
        $$pre$i12$i$i = $11;$__a$2 = $__a$0;
        break L7;
       }
      }
      $vtable$i$i7$i$i33 = HEAP32[$11>>2]|0;
      $vfn$i$i8$i$i34 = (($vtable$i$i7$i$i33) + 36|0);
      $14 = HEAP32[$vfn$i$i8$i$i34>>2]|0;
      __THREW__ = 0;
      $call$i$i9$i$i45 = (invoke_ii($14|0,($11|0))|0);
      $15 = __THREW__; __THREW__ = 0;
      $16 = $15&1;
      if ($16) {
       label = 33;
       break L7;
      }
      $cmp$i1$i10$i$i35 = ($call$i$i9$i$i45|0)==(-1);
      if ($cmp$i1$i10$i$i35) {
       HEAP32[$__e>>2] = 0;
       label = 17;
       break;
      } else {
       if ($cmp$i$i$i25) {
        $64 = $11;
        break;
       } else {
        $$pre$i12$i$i = $11;$__a$2 = $__a$0;
        break L7;
       }
      }
     }
    } while(0);
    if ((label|0) == 17) {
     label = 0;
     if ($cmp$i$i$i25) {
      $$pre$i12$i$i = 0;$__a$2 = $__a$0;
      break;
     } else {
      $64 = 0;
     }
    }
    $17 = HEAP32[$__a_end>>2]|0;
    $sub$ptr$lhs$cast = $17;
    $sub$ptr$rhs$cast = $__a$0;
    $sub$ptr$sub = (($sub$ptr$lhs$cast) - ($sub$ptr$rhs$cast))|0;
    $18 = HEAP8[$__buf>>0]|0;
    $and$i$i47 = $18 & 1;
    $tobool$i$i48 = ($and$i$i47<<24>>24)==(0);
    if ($tobool$i$i48) {
     $conv$i$i = $18&255;
     $shr1$i$i = $conv$i$i >>> 1;
     $cond$i50 = $shr1$i$i;
    } else {
     $19 = HEAP32[$__size_$i2$i64>>2]|0;
     $cond$i50 = $19;
    }
    $cmp = ($sub$ptr$sub|0)==($cond$i50|0);
    if ($cmp) {
     if ($tobool$i$i48) {
      $conv$i$i56 = $18&255;
      $shr1$i$i57 = $conv$i$i56 >>> 1;
      $conv$i$i66 = $18&255;
      $shr1$i$i67 = $conv$i$i66 >>> 1;
      $cond$i59120 = $shr1$i$i57;$cond$i69 = $shr1$i$i67;
     } else {
      $20 = HEAP32[$__size_$i2$i64>>2]|0;
      $cond$i59120 = $20;$cond$i69 = $20;
     }
     $mul = $cond$i69 << 1;
     __THREW__ = 0;
     invoke_viii(385,($__buf|0),($mul|0),0);
     $21 = __THREW__; __THREW__ = 0;
     $22 = $21&1;
     if ($22) {
      label = 33;
      break;
     }
     $23 = HEAP8[$__buf>>0]|0;
     $and$i$i85 = $23 & 1;
     $tobool$i$i86 = ($and$i$i85<<24>>24)==(0);
     if ($tobool$i$i86) {
      $cond$i91 = 10;
     } else {
      $24 = HEAP32[$__buf>>2]|0;
      $and$i1$i88 = $24 & -2;
      $phitmp$i89 = (($and$i1$i88) + -1)|0;
      $cond$i91 = $phitmp$i89;
     }
     __THREW__ = 0;
     invoke_viii(385,($__buf|0),($cond$i91|0),0);
     $25 = __THREW__; __THREW__ = 0;
     $26 = $25&1;
     if ($26) {
      label = 33;
      break;
     }
     $27 = HEAP8[$__buf>>0]|0;
     $and$i$i$i95 = $27 & 1;
     $tobool$i$i$i96 = ($and$i$i$i95<<24>>24)==(0);
     if ($tobool$i$i$i96) {
      $cond$i$i102 = $arrayidx$i$i$i100$pre$phiZZZZ2D;
     } else {
      $28 = HEAP32[$__data_$i$i$i97$pre$phiZZZZ2D>>2]|0;
      $cond$i$i102 = $28;
     }
     $add$ptr = (($cond$i$i102) + ($cond$i59120)|0);
     HEAP32[$__a_end>>2] = $add$ptr;
     $__a$1 = $cond$i$i102;
    } else {
     $__a$1 = $__a$0;
    }
    $__ninp_$i$i105 = (($10) + 12|0);
    $33 = HEAP32[$__ninp_$i$i105>>2]|0;
    $__einp_$i$i106 = (($10) + 16|0);
    $34 = HEAP32[$__einp_$i$i106>>2]|0;
    $cmp$i$i107 = ($33|0)==($34|0);
    if ($cmp$i$i107) {
     $vtable$i$i108 = HEAP32[$10>>2]|0;
     $vfn$i$i109 = (($vtable$i$i108) + 36|0);
     $35 = HEAP32[$vfn$i$i109>>2]|0;
     __THREW__ = 0;
     $call$i$i113 = (invoke_ii($35|0,($10|0))|0);
     $36 = __THREW__; __THREW__ = 0;
     $37 = $36&1;
     if ($37) {
      label = 33;
      break;
     } else {
      $retval$0$i$i = $call$i$i113;
     }
    } else {
     $38 = HEAP8[$33>>0]|0;
     $conv$i$i$i = $38&255;
     $retval$0$i$i = $conv$i$i$i;
    }
    $conv$i = $retval$0$i$i&255;
    $call21 = (__ZNSt3__19__num_getIcE17__stage2_int_loopEciPcRS2_RjcRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_S2_($conv$i,$call,$__a$1,$__a_end,$__dc,$4,$__grouping,$__g,$__g_end,$__atoms)|0);
    $tobool = ($call21|0)==(0);
    if (!($tobool)) {
     $$pre$i12$i$i = $64;$__a$2 = $__a$1;
     break;
    }
    $39 = HEAP32[$__ninp_$i$i105>>2]|0;
    $40 = HEAP32[$__einp_$i$i106>>2]|0;
    $cmp$i$i81 = ($39|0)==($40|0);
    if ($cmp$i$i81) {
     $vtable$i$i = HEAP32[$10>>2]|0;
     $vfn$i$i = (($vtable$i$i) + 40|0);
     $41 = HEAP32[$vfn$i$i>>2]|0;
     __THREW__ = 0;
     (invoke_ii($41|0,($10|0))|0);
     $42 = __THREW__; __THREW__ = 0;
     $43 = $42&1;
     if ($43) {
      label = 33;
      break;
     } else {
      $$pre$i$i$i22 = $10;$__a$0 = $__a$1;
      continue;
     }
    } else {
     $incdec$ptr$i$i = (($39) + 1|0);
     HEAP32[$__ninp_$i$i105>>2] = $incdec$ptr$i$i;
     $$pre$i$i$i22 = $10;$__a$0 = $__a$1;
     continue;
    }
   }
   if ((label|0) == 33) {
    $29 = ___cxa_find_matching_catch()|0;
    $30 = tempRet0;
    $lpad$phi$index = $29;$lpad$phi$index2 = $30;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
    ___resumeException($lpad$phi$index|0);
    // unreachable;
   }
   $44 = HEAP8[$__grouping>>0]|0;
   $and$i$i72 = $44 & 1;
   $tobool$i$i73 = ($and$i$i72<<24>>24)==(0);
   if ($tobool$i$i73) {
    $conv$i$i76 = $44&255;
    $shr1$i$i77 = $conv$i$i76 >>> 1;
    $cond$i79 = $shr1$i$i77;
   } else {
    $__size_$i2$i74 = (($__grouping) + 4|0);
    $45 = HEAP32[$__size_$i2$i74>>2]|0;
    $cond$i79 = $45;
   }
   $cmp27 = ($cond$i79|0)==(0);
   if (!($cmp27)) {
    $46 = HEAP32[$__g_end>>2]|0;
    $sub$ptr$lhs$cast29 = $46;
    $sub$ptr$rhs$cast30 = $__g;
    $sub$ptr$sub31 = (($sub$ptr$lhs$cast29) - ($sub$ptr$rhs$cast30))|0;
    $cmp32 = ($sub$ptr$sub31|0)<(160);
    if ($cmp32) {
     $47 = HEAP32[$__dc>>2]|0;
     $incdec$ptr = (($46) + 4|0);
     HEAP32[$__g_end>>2] = $incdec$ptr;
     HEAP32[$46>>2] = $47;
    }
   }
   $48 = HEAP32[$__a_end>>2]|0;
   __THREW__ = 0;
   $call36 = (invoke_iiiii(388,($__a$2|0),($48|0),($__err|0),($call|0))|0);
   $49 = __THREW__; __THREW__ = 0;
   $50 = $49&1;
   if (!($50)) {
    HEAP16[$__v>>1] = $call36;
    $51 = HEAP32[$__g_end>>2]|0;
    __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping,$__g,$51,$__err);
    $tobool$i$i$i = ($10|0)==(0|0);
    if ($tobool$i$i$i) {
     $57 = 0;
    } else {
     $__ninp_$i$i$i$i = (($10) + 12|0);
     $52 = HEAP32[$__ninp_$i$i$i$i>>2]|0;
     $__einp_$i$i$i$i = (($10) + 16|0);
     $53 = HEAP32[$__einp_$i$i$i$i>>2]|0;
     $cmp$i$i$i$i = ($52|0)==($53|0);
     if ($cmp$i$i$i$i) {
      $vtable$i$i$i$i = HEAP32[$10>>2]|0;
      $vfn$i$i$i$i = (($vtable$i$i$i$i) + 36|0);
      $54 = HEAP32[$vfn$i$i$i$i>>2]|0;
      __THREW__ = 0;
      $call$i$i$i$i9 = (invoke_ii($54|0,($10|0))|0);
      $55 = __THREW__; __THREW__ = 0;
      $56 = $55&1;
      if ($56) {
       break;
      }
      $cmp$i1$i$i$i = ($call$i$i$i$i9|0)==(-1);
      if ($cmp$i1$i$i$i) {
       HEAP32[$__b>>2] = 0;
       $57 = 0;
      } else {
       $57 = $10;
      }
     } else {
      $57 = $10;
     }
    }
    $cmp$i$i$i = ($57|0)==(0|0);
    $tobool$i2$i$i = ($$pre$i12$i$i|0)==(0|0);
    do {
     if ($tobool$i2$i$i) {
      label = 61;
     } else {
      $__ninp_$i$i3$i$i = (($$pre$i12$i$i) + 12|0);
      $58 = HEAP32[$__ninp_$i$i3$i$i>>2]|0;
      $__einp_$i$i4$i$i = (($$pre$i12$i$i) + 16|0);
      $59 = HEAP32[$__einp_$i$i4$i$i>>2]|0;
      $cmp$i$i5$i$i = ($58|0)==($59|0);
      if (!($cmp$i$i5$i$i)) {
       if (!($cmp$i$i$i)) {
        break;
       }
       HEAP32[$agg$result>>2] = $57;
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
       STACKTOP = sp;return;
      }
      $vtable$i$i7$i$i = HEAP32[$$pre$i12$i$i>>2]|0;
      $vfn$i$i8$i$i = (($vtable$i$i7$i$i) + 36|0);
      $60 = HEAP32[$vfn$i$i8$i$i>>2]|0;
      __THREW__ = 0;
      $call$i$i9$i$i10 = (invoke_ii($60|0,($$pre$i12$i$i|0))|0);
      $61 = __THREW__; __THREW__ = 0;
      $62 = $61&1;
      if ($62) {
       break L1;
      }
      $cmp$i1$i10$i$i = ($call$i$i9$i$i10|0)==(-1);
      if ($cmp$i1$i10$i$i) {
       HEAP32[$__e>>2] = 0;
       label = 61;
       break;
      }
      $cmp$i15$i$i = ($$pre$i12$i$i|0)==(0|0);
      $cmptmp$i$i = $cmp$i$i$i ^ $cmp$i15$i$i;
      if ($cmptmp$i$i) {
       HEAP32[$agg$result>>2] = $57;
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
       STACKTOP = sp;return;
      }
     }
    } while(0);
    if ((label|0) == 61) {
     if (!($cmp$i$i$i)) {
      HEAP32[$agg$result>>2] = $57;
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
      STACKTOP = sp;return;
     }
    }
    $63 = HEAP32[$__err>>2]|0;
    $or = $63 | 2;
    HEAP32[$__err>>2] = $or;
    HEAP32[$agg$result>>2] = $57;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
    STACKTOP = sp;return;
   }
  }
 } while(0);
 $31 = ___cxa_find_matching_catch()|0;
 $32 = tempRet0;
 $lpad$phi$index = $31;$lpad$phi$index2 = $32;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
 ___resumeException($lpad$phi$index|0);
 // unreachable;
}
function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjS8_($agg$result,$this,$__b,$__e,$__iob,$__err,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $0 = 0, $1 = 0, $agg$tmp = 0, $agg$tmp$byval_copy = 0, $agg$tmp2 = 0, $agg$tmp2$byval_copy = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $agg$tmp2$byval_copy = sp + 12|0;
 $agg$tmp$byval_copy = sp + 8|0;
 $agg$tmp = sp + 4|0;
 $agg$tmp2 = sp;
 $0 = HEAP32[$__b>>2]|0;
 HEAP32[$agg$tmp>>2] = $0;
 $1 = HEAP32[$__e>>2]|0;
 HEAP32[$agg$tmp2>>2] = $1;
 ;HEAP32[$agg$tmp$byval_copy+0>>2]=HEAP32[$agg$tmp+0>>2]|0;
 ;HEAP32[$agg$tmp2$byval_copy+0>>2]=HEAP32[$agg$tmp2+0>>2]|0;
 __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__do_get_unsignedIjEES4_S4_S4_RNS_8ios_baseERjRT_($agg$result,0,$agg$tmp$byval_copy,$agg$tmp2$byval_copy,$__iob,$__err,$__v);
 STACKTOP = sp;return;
}
function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__do_get_unsignedIjEES4_S4_S4_RNS_8ios_baseERjRT_($agg$result,$this,$__b,$__e,$__iob,$__err,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$pre = 0, $$pre$i$i$i22 = 0, $$pre$i12$i$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $7 = 0, $8 = 0, $9 = 0, $__a$0 = 0, $__a$1 = 0, $__a$2 = 0, $__a_end = 0, $__atoms = 0, $__buf = 0, $__data_$i$i$i = 0, $__data_$i$i$i97$pre = 0, $__data_$i$i$i97$pre$phiZZZZ2D = 0, $__dc = 0, $__einp_$i$i$i$i = 0, $__einp_$i$i$i$i15 = 0;
 var $__einp_$i$i106 = 0, $__einp_$i$i4$i$i = 0, $__einp_$i$i4$i$i30 = 0, $__g = 0, $__g_end = 0, $__grouping = 0, $__ninp_$i$i$i$i = 0, $__ninp_$i$i$i$i14 = 0, $__ninp_$i$i105 = 0, $__ninp_$i$i3$i$i = 0, $__ninp_$i$i3$i$i29 = 0, $__size_$i2$i64 = 0, $__size_$i2$i74 = 0, $__thousands_sep = 0, $add$ptr = 0, $and$i$i$i = 0, $and$i$i$i95 = 0, $and$i$i47 = 0, $and$i$i72 = 0, $and$i$i85 = 0;
 var $and$i1$i88 = 0, $arrayidx$i$i$i = 0, $arrayidx$i$i$i100$pre = 0, $arrayidx$i$i$i100$pre$phiZZZZ2D = 0, $call = 0, $call$i$i$i$i43 = 0, $call$i$i$i$i9 = 0, $call$i$i113 = 0, $call$i$i9$i$i10 = 0, $call$i$i9$i$i45 = 0, $call21 = 0, $call36 = 0, $cmp = 0, $cmp$i$i$i = 0, $cmp$i$i$i$i = 0, $cmp$i$i$i$i16 = 0, $cmp$i$i$i25 = 0, $cmp$i$i107 = 0, $cmp$i$i5$i$i = 0, $cmp$i$i5$i$i31 = 0;
 var $cmp$i$i81 = 0, $cmp$i1$i$i$i = 0, $cmp$i1$i$i$i20 = 0, $cmp$i1$i10$i$i = 0, $cmp$i1$i10$i$i35 = 0, $cmp$i15$i$i = 0, $cmp27 = 0, $cmp32 = 0, $cmptmp$i$i = 0, $cond$i$i = 0, $cond$i$i102 = 0, $cond$i50 = 0, $cond$i59120 = 0, $cond$i69 = 0, $cond$i79 = 0, $cond$i91 = 0, $conv$i = 0, $conv$i$i = 0, $conv$i$i$i = 0, $conv$i$i56 = 0;
 var $conv$i$i66 = 0, $conv$i$i76 = 0, $incdec$ptr = 0, $incdec$ptr$i$i = 0, $lpad$phi$index = 0, $lpad$phi$index2 = 0, $mul = 0, $or = 0, $phitmp$i89 = 0, $retval$0$i$i = 0, $shr1$i$i = 0, $shr1$i$i57 = 0, $shr1$i$i67 = 0, $shr1$i$i77 = 0, $sub$ptr$lhs$cast = 0, $sub$ptr$lhs$cast29 = 0, $sub$ptr$rhs$cast = 0, $sub$ptr$rhs$cast30 = 0, $sub$ptr$sub = 0, $sub$ptr$sub31 = 0;
 var $tobool = 0, $tobool$i$i$i = 0, $tobool$i$i$i11 = 0, $tobool$i$i$i13 = 0, $tobool$i$i$i96 = 0, $tobool$i$i48 = 0, $tobool$i$i73 = 0, $tobool$i$i86 = 0, $tobool$i2$i$i = 0, $tobool$i2$i$i27 = 0, $vfn$i$i = 0, $vfn$i$i$i$i = 0, $vfn$i$i$i$i19 = 0, $vfn$i$i109 = 0, $vfn$i$i8$i$i = 0, $vfn$i$i8$i$i34 = 0, $vtable$i$i = 0, $vtable$i$i$i$i = 0, $vtable$i$i$i$i18 = 0, $vtable$i$i108 = 0;
 var $vtable$i$i7$i$i = 0, $vtable$i$i7$i$i33 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 224|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__atoms = sp + 198|0;
 $__thousands_sep = sp + 196|0;
 $__grouping = sp + 16|0;
 $__buf = sp + 4|0;
 $__a_end = sp + 192|0;
 $__g = sp + 32|0;
 $__g_end = sp;
 $__dc = sp + 28|0;
 $call = (__ZNSt3__114__num_get_base10__get_baseERNS_8ios_baseE($__iob)|0);
 __ZNSt3__19__num_getIcE17__stage2_int_prepERNS_8ios_baseEPcRc($__grouping,$__iob,$__atoms,$__thousands_sep);
 ;HEAP32[$__buf+0>>2]=0|0;HEAP32[$__buf+4>>2]=0|0;HEAP32[$__buf+8>>2]=0|0;
 __THREW__ = 0;
 invoke_viii(385,($__buf|0),10,0);
 $0 = __THREW__; __THREW__ = 0;
 $1 = $0&1;
 L1: do {
  if (!($1)) {
   $2 = HEAP8[$__buf>>0]|0;
   $and$i$i$i = $2 & 1;
   $tobool$i$i$i11 = ($and$i$i$i<<24>>24)==(0);
   if ($tobool$i$i$i11) {
    $arrayidx$i$i$i = (($__buf) + 1|0);
    $__data_$i$i$i97$pre = (($__buf) + 8|0);
    $__data_$i$i$i97$pre$phiZZZZ2D = $__data_$i$i$i97$pre;$arrayidx$i$i$i100$pre$phiZZZZ2D = $arrayidx$i$i$i;$cond$i$i = $arrayidx$i$i$i;
   } else {
    $__data_$i$i$i = (($__buf) + 8|0);
    $3 = HEAP32[$__data_$i$i$i>>2]|0;
    $arrayidx$i$i$i100$pre = (($__buf) + 1|0);
    $__data_$i$i$i97$pre$phiZZZZ2D = $__data_$i$i$i;$arrayidx$i$i$i100$pre$phiZZZZ2D = $arrayidx$i$i$i100$pre;$cond$i$i = $3;
   }
   HEAP32[$__a_end>>2] = $cond$i$i;
   HEAP32[$__g_end>>2] = $__g;
   HEAP32[$__dc>>2] = 0;
   $__size_$i2$i64 = (($__buf) + 4|0);
   $4 = HEAP8[$__thousands_sep>>0]|0;
   $$pre = HEAP32[$__b>>2]|0;
   $$pre$i$i$i22 = $$pre;$__a$0 = $cond$i$i;
   L7: while(1) {
    $tobool$i$i$i13 = ($$pre$i$i$i22|0)==(0|0);
    if ($tobool$i$i$i13) {
     $10 = 0;
    } else {
     $__ninp_$i$i$i$i14 = (($$pre$i$i$i22) + 12|0);
     $5 = HEAP32[$__ninp_$i$i$i$i14>>2]|0;
     $__einp_$i$i$i$i15 = (($$pre$i$i$i22) + 16|0);
     $6 = HEAP32[$__einp_$i$i$i$i15>>2]|0;
     $cmp$i$i$i$i16 = ($5|0)==($6|0);
     if ($cmp$i$i$i$i16) {
      $vtable$i$i$i$i18 = HEAP32[$$pre$i$i$i22>>2]|0;
      $vfn$i$i$i$i19 = (($vtable$i$i$i$i18) + 36|0);
      $7 = HEAP32[$vfn$i$i$i$i19>>2]|0;
      __THREW__ = 0;
      $call$i$i$i$i43 = (invoke_ii($7|0,($$pre$i$i$i22|0))|0);
      $8 = __THREW__; __THREW__ = 0;
      $9 = $8&1;
      if ($9) {
       label = 33;
       break;
      }
      $cmp$i1$i$i$i20 = ($call$i$i$i$i43|0)==(-1);
      if ($cmp$i1$i$i$i20) {
       HEAP32[$__b>>2] = 0;
       $10 = 0;
      } else {
       $10 = $$pre$i$i$i22;
      }
     } else {
      $10 = $$pre$i$i$i22;
     }
    }
    $cmp$i$i$i25 = ($10|0)==(0|0);
    $11 = HEAP32[$__e>>2]|0;
    $tobool$i2$i$i27 = ($11|0)==(0|0);
    do {
     if ($tobool$i2$i$i27) {
      label = 17;
     } else {
      $__ninp_$i$i3$i$i29 = (($11) + 12|0);
      $12 = HEAP32[$__ninp_$i$i3$i$i29>>2]|0;
      $__einp_$i$i4$i$i30 = (($11) + 16|0);
      $13 = HEAP32[$__einp_$i$i4$i$i30>>2]|0;
      $cmp$i$i5$i$i31 = ($12|0)==($13|0);
      if (!($cmp$i$i5$i$i31)) {
       if ($cmp$i$i$i25) {
        $64 = $11;
        break;
       } else {
        $$pre$i12$i$i = $11;$__a$2 = $__a$0;
        break L7;
       }
      }
      $vtable$i$i7$i$i33 = HEAP32[$11>>2]|0;
      $vfn$i$i8$i$i34 = (($vtable$i$i7$i$i33) + 36|0);
      $14 = HEAP32[$vfn$i$i8$i$i34>>2]|0;
      __THREW__ = 0;
      $call$i$i9$i$i45 = (invoke_ii($14|0,($11|0))|0);
      $15 = __THREW__; __THREW__ = 0;
      $16 = $15&1;
      if ($16) {
       label = 33;
       break L7;
      }
      $cmp$i1$i10$i$i35 = ($call$i$i9$i$i45|0)==(-1);
      if ($cmp$i1$i10$i$i35) {
       HEAP32[$__e>>2] = 0;
       label = 17;
       break;
      } else {
       if ($cmp$i$i$i25) {
        $64 = $11;
        break;
       } else {
        $$pre$i12$i$i = $11;$__a$2 = $__a$0;
        break L7;
       }
      }
     }
    } while(0);
    if ((label|0) == 17) {
     label = 0;
     if ($cmp$i$i$i25) {
      $$pre$i12$i$i = 0;$__a$2 = $__a$0;
      break;
     } else {
      $64 = 0;
     }
    }
    $17 = HEAP32[$__a_end>>2]|0;
    $sub$ptr$lhs$cast = $17;
    $sub$ptr$rhs$cast = $__a$0;
    $sub$ptr$sub = (($sub$ptr$lhs$cast) - ($sub$ptr$rhs$cast))|0;
    $18 = HEAP8[$__buf>>0]|0;
    $and$i$i47 = $18 & 1;
    $tobool$i$i48 = ($and$i$i47<<24>>24)==(0);
    if ($tobool$i$i48) {
     $conv$i$i = $18&255;
     $shr1$i$i = $conv$i$i >>> 1;
     $cond$i50 = $shr1$i$i;
    } else {
     $19 = HEAP32[$__size_$i2$i64>>2]|0;
     $cond$i50 = $19;
    }
    $cmp = ($sub$ptr$sub|0)==($cond$i50|0);
    if ($cmp) {
     if ($tobool$i$i48) {
      $conv$i$i56 = $18&255;
      $shr1$i$i57 = $conv$i$i56 >>> 1;
      $conv$i$i66 = $18&255;
      $shr1$i$i67 = $conv$i$i66 >>> 1;
      $cond$i59120 = $shr1$i$i57;$cond$i69 = $shr1$i$i67;
     } else {
      $20 = HEAP32[$__size_$i2$i64>>2]|0;
      $cond$i59120 = $20;$cond$i69 = $20;
     }
     $mul = $cond$i69 << 1;
     __THREW__ = 0;
     invoke_viii(385,($__buf|0),($mul|0),0);
     $21 = __THREW__; __THREW__ = 0;
     $22 = $21&1;
     if ($22) {
      label = 33;
      break;
     }
     $23 = HEAP8[$__buf>>0]|0;
     $and$i$i85 = $23 & 1;
     $tobool$i$i86 = ($and$i$i85<<24>>24)==(0);
     if ($tobool$i$i86) {
      $cond$i91 = 10;
     } else {
      $24 = HEAP32[$__buf>>2]|0;
      $and$i1$i88 = $24 & -2;
      $phitmp$i89 = (($and$i1$i88) + -1)|0;
      $cond$i91 = $phitmp$i89;
     }
     __THREW__ = 0;
     invoke_viii(385,($__buf|0),($cond$i91|0),0);
     $25 = __THREW__; __THREW__ = 0;
     $26 = $25&1;
     if ($26) {
      label = 33;
      break;
     }
     $27 = HEAP8[$__buf>>0]|0;
     $and$i$i$i95 = $27 & 1;
     $tobool$i$i$i96 = ($and$i$i$i95<<24>>24)==(0);
     if ($tobool$i$i$i96) {
      $cond$i$i102 = $arrayidx$i$i$i100$pre$phiZZZZ2D;
     } else {
      $28 = HEAP32[$__data_$i$i$i97$pre$phiZZZZ2D>>2]|0;
      $cond$i$i102 = $28;
     }
     $add$ptr = (($cond$i$i102) + ($cond$i59120)|0);
     HEAP32[$__a_end>>2] = $add$ptr;
     $__a$1 = $cond$i$i102;
    } else {
     $__a$1 = $__a$0;
    }
    $__ninp_$i$i105 = (($10) + 12|0);
    $33 = HEAP32[$__ninp_$i$i105>>2]|0;
    $__einp_$i$i106 = (($10) + 16|0);
    $34 = HEAP32[$__einp_$i$i106>>2]|0;
    $cmp$i$i107 = ($33|0)==($34|0);
    if ($cmp$i$i107) {
     $vtable$i$i108 = HEAP32[$10>>2]|0;
     $vfn$i$i109 = (($vtable$i$i108) + 36|0);
     $35 = HEAP32[$vfn$i$i109>>2]|0;
     __THREW__ = 0;
     $call$i$i113 = (invoke_ii($35|0,($10|0))|0);
     $36 = __THREW__; __THREW__ = 0;
     $37 = $36&1;
     if ($37) {
      label = 33;
      break;
     } else {
      $retval$0$i$i = $call$i$i113;
     }
    } else {
     $38 = HEAP8[$33>>0]|0;
     $conv$i$i$i = $38&255;
     $retval$0$i$i = $conv$i$i$i;
    }
    $conv$i = $retval$0$i$i&255;
    $call21 = (__ZNSt3__19__num_getIcE17__stage2_int_loopEciPcRS2_RjcRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_S2_($conv$i,$call,$__a$1,$__a_end,$__dc,$4,$__grouping,$__g,$__g_end,$__atoms)|0);
    $tobool = ($call21|0)==(0);
    if (!($tobool)) {
     $$pre$i12$i$i = $64;$__a$2 = $__a$1;
     break;
    }
    $39 = HEAP32[$__ninp_$i$i105>>2]|0;
    $40 = HEAP32[$__einp_$i$i106>>2]|0;
    $cmp$i$i81 = ($39|0)==($40|0);
    if ($cmp$i$i81) {
     $vtable$i$i = HEAP32[$10>>2]|0;
     $vfn$i$i = (($vtable$i$i) + 40|0);
     $41 = HEAP32[$vfn$i$i>>2]|0;
     __THREW__ = 0;
     (invoke_ii($41|0,($10|0))|0);
     $42 = __THREW__; __THREW__ = 0;
     $43 = $42&1;
     if ($43) {
      label = 33;
      break;
     } else {
      $$pre$i$i$i22 = $10;$__a$0 = $__a$1;
      continue;
     }
    } else {
     $incdec$ptr$i$i = (($39) + 1|0);
     HEAP32[$__ninp_$i$i105>>2] = $incdec$ptr$i$i;
     $$pre$i$i$i22 = $10;$__a$0 = $__a$1;
     continue;
    }
   }
   if ((label|0) == 33) {
    $29 = ___cxa_find_matching_catch()|0;
    $30 = tempRet0;
    $lpad$phi$index = $29;$lpad$phi$index2 = $30;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
    ___resumeException($lpad$phi$index|0);
    // unreachable;
   }
   $44 = HEAP8[$__grouping>>0]|0;
   $and$i$i72 = $44 & 1;
   $tobool$i$i73 = ($and$i$i72<<24>>24)==(0);
   if ($tobool$i$i73) {
    $conv$i$i76 = $44&255;
    $shr1$i$i77 = $conv$i$i76 >>> 1;
    $cond$i79 = $shr1$i$i77;
   } else {
    $__size_$i2$i74 = (($__grouping) + 4|0);
    $45 = HEAP32[$__size_$i2$i74>>2]|0;
    $cond$i79 = $45;
   }
   $cmp27 = ($cond$i79|0)==(0);
   if (!($cmp27)) {
    $46 = HEAP32[$__g_end>>2]|0;
    $sub$ptr$lhs$cast29 = $46;
    $sub$ptr$rhs$cast30 = $__g;
    $sub$ptr$sub31 = (($sub$ptr$lhs$cast29) - ($sub$ptr$rhs$cast30))|0;
    $cmp32 = ($sub$ptr$sub31|0)<(160);
    if ($cmp32) {
     $47 = HEAP32[$__dc>>2]|0;
     $incdec$ptr = (($46) + 4|0);
     HEAP32[$__g_end>>2] = $incdec$ptr;
     HEAP32[$46>>2] = $47;
    }
   }
   $48 = HEAP32[$__a_end>>2]|0;
   __THREW__ = 0;
   $call36 = (invoke_iiiii(389,($__a$2|0),($48|0),($__err|0),($call|0))|0);
   $49 = __THREW__; __THREW__ = 0;
   $50 = $49&1;
   if (!($50)) {
    HEAP32[$__v>>2] = $call36;
    $51 = HEAP32[$__g_end>>2]|0;
    __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping,$__g,$51,$__err);
    $tobool$i$i$i = ($10|0)==(0|0);
    if ($tobool$i$i$i) {
     $57 = 0;
    } else {
     $__ninp_$i$i$i$i = (($10) + 12|0);
     $52 = HEAP32[$__ninp_$i$i$i$i>>2]|0;
     $__einp_$i$i$i$i = (($10) + 16|0);
     $53 = HEAP32[$__einp_$i$i$i$i>>2]|0;
     $cmp$i$i$i$i = ($52|0)==($53|0);
     if ($cmp$i$i$i$i) {
      $vtable$i$i$i$i = HEAP32[$10>>2]|0;
      $vfn$i$i$i$i = (($vtable$i$i$i$i) + 36|0);
      $54 = HEAP32[$vfn$i$i$i$i>>2]|0;
      __THREW__ = 0;
      $call$i$i$i$i9 = (invoke_ii($54|0,($10|0))|0);
      $55 = __THREW__; __THREW__ = 0;
      $56 = $55&1;
      if ($56) {
       break;
      }
      $cmp$i1$i$i$i = ($call$i$i$i$i9|0)==(-1);
      if ($cmp$i1$i$i$i) {
       HEAP32[$__b>>2] = 0;
       $57 = 0;
      } else {
       $57 = $10;
      }
     } else {
      $57 = $10;
     }
    }
    $cmp$i$i$i = ($57|0)==(0|0);
    $tobool$i2$i$i = ($$pre$i12$i$i|0)==(0|0);
    do {
     if ($tobool$i2$i$i) {
      label = 61;
     } else {
      $__ninp_$i$i3$i$i = (($$pre$i12$i$i) + 12|0);
      $58 = HEAP32[$__ninp_$i$i3$i$i>>2]|0;
      $__einp_$i$i4$i$i = (($$pre$i12$i$i) + 16|0);
      $59 = HEAP32[$__einp_$i$i4$i$i>>2]|0;
      $cmp$i$i5$i$i = ($58|0)==($59|0);
      if (!($cmp$i$i5$i$i)) {
       if (!($cmp$i$i$i)) {
        break;
       }
       HEAP32[$agg$result>>2] = $57;
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
       STACKTOP = sp;return;
      }
      $vtable$i$i7$i$i = HEAP32[$$pre$i12$i$i>>2]|0;
      $vfn$i$i8$i$i = (($vtable$i$i7$i$i) + 36|0);
      $60 = HEAP32[$vfn$i$i8$i$i>>2]|0;
      __THREW__ = 0;
      $call$i$i9$i$i10 = (invoke_ii($60|0,($$pre$i12$i$i|0))|0);
      $61 = __THREW__; __THREW__ = 0;
      $62 = $61&1;
      if ($62) {
       break L1;
      }
      $cmp$i1$i10$i$i = ($call$i$i9$i$i10|0)==(-1);
      if ($cmp$i1$i10$i$i) {
       HEAP32[$__e>>2] = 0;
       label = 61;
       break;
      }
      $cmp$i15$i$i = ($$pre$i12$i$i|0)==(0|0);
      $cmptmp$i$i = $cmp$i$i$i ^ $cmp$i15$i$i;
      if ($cmptmp$i$i) {
       HEAP32[$agg$result>>2] = $57;
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
       STACKTOP = sp;return;
      }
     }
    } while(0);
    if ((label|0) == 61) {
     if (!($cmp$i$i$i)) {
      HEAP32[$agg$result>>2] = $57;
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
      STACKTOP = sp;return;
     }
    }
    $63 = HEAP32[$__err>>2]|0;
    $or = $63 | 2;
    HEAP32[$__err>>2] = $or;
    HEAP32[$agg$result>>2] = $57;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
    STACKTOP = sp;return;
   }
  }
 } while(0);
 $31 = ___cxa_find_matching_catch()|0;
 $32 = tempRet0;
 $lpad$phi$index = $31;$lpad$phi$index2 = $32;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
 ___resumeException($lpad$phi$index|0);
 // unreachable;
}
function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRm($agg$result,$this,$__b,$__e,$__iob,$__err,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $0 = 0, $1 = 0, $agg$tmp = 0, $agg$tmp$byval_copy = 0, $agg$tmp2 = 0, $agg$tmp2$byval_copy = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $agg$tmp2$byval_copy = sp + 12|0;
 $agg$tmp$byval_copy = sp + 8|0;
 $agg$tmp = sp + 4|0;
 $agg$tmp2 = sp;
 $0 = HEAP32[$__b>>2]|0;
 HEAP32[$agg$tmp>>2] = $0;
 $1 = HEAP32[$__e>>2]|0;
 HEAP32[$agg$tmp2>>2] = $1;
 ;HEAP32[$agg$tmp$byval_copy+0>>2]=HEAP32[$agg$tmp+0>>2]|0;
 ;HEAP32[$agg$tmp2$byval_copy+0>>2]=HEAP32[$agg$tmp2+0>>2]|0;
 __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__do_get_unsignedImEES4_S4_S4_RNS_8ios_baseERjRT_($agg$result,0,$agg$tmp$byval_copy,$agg$tmp2$byval_copy,$__iob,$__err,$__v);
 STACKTOP = sp;return;
}
function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__do_get_unsignedImEES4_S4_S4_RNS_8ios_baseERjRT_($agg$result,$this,$__b,$__e,$__iob,$__err,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$pre = 0, $$pre$i$i$i22 = 0, $$pre$i12$i$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $7 = 0, $8 = 0, $9 = 0, $__a$0 = 0, $__a$1 = 0, $__a$2 = 0, $__a_end = 0, $__atoms = 0, $__buf = 0, $__data_$i$i$i = 0, $__data_$i$i$i97$pre = 0, $__data_$i$i$i97$pre$phiZZZZ2D = 0, $__dc = 0, $__einp_$i$i$i$i = 0, $__einp_$i$i$i$i15 = 0;
 var $__einp_$i$i106 = 0, $__einp_$i$i4$i$i = 0, $__einp_$i$i4$i$i30 = 0, $__g = 0, $__g_end = 0, $__grouping = 0, $__ninp_$i$i$i$i = 0, $__ninp_$i$i$i$i14 = 0, $__ninp_$i$i105 = 0, $__ninp_$i$i3$i$i = 0, $__ninp_$i$i3$i$i29 = 0, $__size_$i2$i64 = 0, $__size_$i2$i74 = 0, $__thousands_sep = 0, $add$ptr = 0, $and$i$i$i = 0, $and$i$i$i95 = 0, $and$i$i47 = 0, $and$i$i72 = 0, $and$i$i85 = 0;
 var $and$i1$i88 = 0, $arrayidx$i$i$i = 0, $arrayidx$i$i$i100$pre = 0, $arrayidx$i$i$i100$pre$phiZZZZ2D = 0, $call = 0, $call$i$i$i$i43 = 0, $call$i$i$i$i9 = 0, $call$i$i113 = 0, $call$i$i9$i$i10 = 0, $call$i$i9$i$i45 = 0, $call21 = 0, $call36 = 0, $cmp = 0, $cmp$i$i$i = 0, $cmp$i$i$i$i = 0, $cmp$i$i$i$i16 = 0, $cmp$i$i$i25 = 0, $cmp$i$i107 = 0, $cmp$i$i5$i$i = 0, $cmp$i$i5$i$i31 = 0;
 var $cmp$i$i81 = 0, $cmp$i1$i$i$i = 0, $cmp$i1$i$i$i20 = 0, $cmp$i1$i10$i$i = 0, $cmp$i1$i10$i$i35 = 0, $cmp$i15$i$i = 0, $cmp27 = 0, $cmp32 = 0, $cmptmp$i$i = 0, $cond$i$i = 0, $cond$i$i102 = 0, $cond$i50 = 0, $cond$i59120 = 0, $cond$i69 = 0, $cond$i79 = 0, $cond$i91 = 0, $conv$i = 0, $conv$i$i = 0, $conv$i$i$i = 0, $conv$i$i56 = 0;
 var $conv$i$i66 = 0, $conv$i$i76 = 0, $incdec$ptr = 0, $incdec$ptr$i$i = 0, $lpad$phi$index = 0, $lpad$phi$index2 = 0, $mul = 0, $or = 0, $phitmp$i89 = 0, $retval$0$i$i = 0, $shr1$i$i = 0, $shr1$i$i57 = 0, $shr1$i$i67 = 0, $shr1$i$i77 = 0, $sub$ptr$lhs$cast = 0, $sub$ptr$lhs$cast29 = 0, $sub$ptr$rhs$cast = 0, $sub$ptr$rhs$cast30 = 0, $sub$ptr$sub = 0, $sub$ptr$sub31 = 0;
 var $tobool = 0, $tobool$i$i$i = 0, $tobool$i$i$i11 = 0, $tobool$i$i$i13 = 0, $tobool$i$i$i96 = 0, $tobool$i$i48 = 0, $tobool$i$i73 = 0, $tobool$i$i86 = 0, $tobool$i2$i$i = 0, $tobool$i2$i$i27 = 0, $vfn$i$i = 0, $vfn$i$i$i$i = 0, $vfn$i$i$i$i19 = 0, $vfn$i$i109 = 0, $vfn$i$i8$i$i = 0, $vfn$i$i8$i$i34 = 0, $vtable$i$i = 0, $vtable$i$i$i$i = 0, $vtable$i$i$i$i18 = 0, $vtable$i$i108 = 0;
 var $vtable$i$i7$i$i = 0, $vtable$i$i7$i$i33 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 224|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__atoms = sp + 198|0;
 $__thousands_sep = sp + 196|0;
 $__grouping = sp + 16|0;
 $__buf = sp + 4|0;
 $__a_end = sp + 192|0;
 $__g = sp + 32|0;
 $__g_end = sp;
 $__dc = sp + 28|0;
 $call = (__ZNSt3__114__num_get_base10__get_baseERNS_8ios_baseE($__iob)|0);
 __ZNSt3__19__num_getIcE17__stage2_int_prepERNS_8ios_baseEPcRc($__grouping,$__iob,$__atoms,$__thousands_sep);
 ;HEAP32[$__buf+0>>2]=0|0;HEAP32[$__buf+4>>2]=0|0;HEAP32[$__buf+8>>2]=0|0;
 __THREW__ = 0;
 invoke_viii(385,($__buf|0),10,0);
 $0 = __THREW__; __THREW__ = 0;
 $1 = $0&1;
 L1: do {
  if (!($1)) {
   $2 = HEAP8[$__buf>>0]|0;
   $and$i$i$i = $2 & 1;
   $tobool$i$i$i11 = ($and$i$i$i<<24>>24)==(0);
   if ($tobool$i$i$i11) {
    $arrayidx$i$i$i = (($__buf) + 1|0);
    $__data_$i$i$i97$pre = (($__buf) + 8|0);
    $__data_$i$i$i97$pre$phiZZZZ2D = $__data_$i$i$i97$pre;$arrayidx$i$i$i100$pre$phiZZZZ2D = $arrayidx$i$i$i;$cond$i$i = $arrayidx$i$i$i;
   } else {
    $__data_$i$i$i = (($__buf) + 8|0);
    $3 = HEAP32[$__data_$i$i$i>>2]|0;
    $arrayidx$i$i$i100$pre = (($__buf) + 1|0);
    $__data_$i$i$i97$pre$phiZZZZ2D = $__data_$i$i$i;$arrayidx$i$i$i100$pre$phiZZZZ2D = $arrayidx$i$i$i100$pre;$cond$i$i = $3;
   }
   HEAP32[$__a_end>>2] = $cond$i$i;
   HEAP32[$__g_end>>2] = $__g;
   HEAP32[$__dc>>2] = 0;
   $__size_$i2$i64 = (($__buf) + 4|0);
   $4 = HEAP8[$__thousands_sep>>0]|0;
   $$pre = HEAP32[$__b>>2]|0;
   $$pre$i$i$i22 = $$pre;$__a$0 = $cond$i$i;
   L7: while(1) {
    $tobool$i$i$i13 = ($$pre$i$i$i22|0)==(0|0);
    if ($tobool$i$i$i13) {
     $10 = 0;
    } else {
     $__ninp_$i$i$i$i14 = (($$pre$i$i$i22) + 12|0);
     $5 = HEAP32[$__ninp_$i$i$i$i14>>2]|0;
     $__einp_$i$i$i$i15 = (($$pre$i$i$i22) + 16|0);
     $6 = HEAP32[$__einp_$i$i$i$i15>>2]|0;
     $cmp$i$i$i$i16 = ($5|0)==($6|0);
     if ($cmp$i$i$i$i16) {
      $vtable$i$i$i$i18 = HEAP32[$$pre$i$i$i22>>2]|0;
      $vfn$i$i$i$i19 = (($vtable$i$i$i$i18) + 36|0);
      $7 = HEAP32[$vfn$i$i$i$i19>>2]|0;
      __THREW__ = 0;
      $call$i$i$i$i43 = (invoke_ii($7|0,($$pre$i$i$i22|0))|0);
      $8 = __THREW__; __THREW__ = 0;
      $9 = $8&1;
      if ($9) {
       label = 33;
       break;
      }
      $cmp$i1$i$i$i20 = ($call$i$i$i$i43|0)==(-1);
      if ($cmp$i1$i$i$i20) {
       HEAP32[$__b>>2] = 0;
       $10 = 0;
      } else {
       $10 = $$pre$i$i$i22;
      }
     } else {
      $10 = $$pre$i$i$i22;
     }
    }
    $cmp$i$i$i25 = ($10|0)==(0|0);
    $11 = HEAP32[$__e>>2]|0;
    $tobool$i2$i$i27 = ($11|0)==(0|0);
    do {
     if ($tobool$i2$i$i27) {
      label = 17;
     } else {
      $__ninp_$i$i3$i$i29 = (($11) + 12|0);
      $12 = HEAP32[$__ninp_$i$i3$i$i29>>2]|0;
      $__einp_$i$i4$i$i30 = (($11) + 16|0);
      $13 = HEAP32[$__einp_$i$i4$i$i30>>2]|0;
      $cmp$i$i5$i$i31 = ($12|0)==($13|0);
      if (!($cmp$i$i5$i$i31)) {
       if ($cmp$i$i$i25) {
        $64 = $11;
        break;
       } else {
        $$pre$i12$i$i = $11;$__a$2 = $__a$0;
        break L7;
       }
      }
      $vtable$i$i7$i$i33 = HEAP32[$11>>2]|0;
      $vfn$i$i8$i$i34 = (($vtable$i$i7$i$i33) + 36|0);
      $14 = HEAP32[$vfn$i$i8$i$i34>>2]|0;
      __THREW__ = 0;
      $call$i$i9$i$i45 = (invoke_ii($14|0,($11|0))|0);
      $15 = __THREW__; __THREW__ = 0;
      $16 = $15&1;
      if ($16) {
       label = 33;
       break L7;
      }
      $cmp$i1$i10$i$i35 = ($call$i$i9$i$i45|0)==(-1);
      if ($cmp$i1$i10$i$i35) {
       HEAP32[$__e>>2] = 0;
       label = 17;
       break;
      } else {
       if ($cmp$i$i$i25) {
        $64 = $11;
        break;
       } else {
        $$pre$i12$i$i = $11;$__a$2 = $__a$0;
        break L7;
       }
      }
     }
    } while(0);
    if ((label|0) == 17) {
     label = 0;
     if ($cmp$i$i$i25) {
      $$pre$i12$i$i = 0;$__a$2 = $__a$0;
      break;
     } else {
      $64 = 0;
     }
    }
    $17 = HEAP32[$__a_end>>2]|0;
    $sub$ptr$lhs$cast = $17;
    $sub$ptr$rhs$cast = $__a$0;
    $sub$ptr$sub = (($sub$ptr$lhs$cast) - ($sub$ptr$rhs$cast))|0;
    $18 = HEAP8[$__buf>>0]|0;
    $and$i$i47 = $18 & 1;
    $tobool$i$i48 = ($and$i$i47<<24>>24)==(0);
    if ($tobool$i$i48) {
     $conv$i$i = $18&255;
     $shr1$i$i = $conv$i$i >>> 1;
     $cond$i50 = $shr1$i$i;
    } else {
     $19 = HEAP32[$__size_$i2$i64>>2]|0;
     $cond$i50 = $19;
    }
    $cmp = ($sub$ptr$sub|0)==($cond$i50|0);
    if ($cmp) {
     if ($tobool$i$i48) {
      $conv$i$i56 = $18&255;
      $shr1$i$i57 = $conv$i$i56 >>> 1;
      $conv$i$i66 = $18&255;
      $shr1$i$i67 = $conv$i$i66 >>> 1;
      $cond$i59120 = $shr1$i$i57;$cond$i69 = $shr1$i$i67;
     } else {
      $20 = HEAP32[$__size_$i2$i64>>2]|0;
      $cond$i59120 = $20;$cond$i69 = $20;
     }
     $mul = $cond$i69 << 1;
     __THREW__ = 0;
     invoke_viii(385,($__buf|0),($mul|0),0);
     $21 = __THREW__; __THREW__ = 0;
     $22 = $21&1;
     if ($22) {
      label = 33;
      break;
     }
     $23 = HEAP8[$__buf>>0]|0;
     $and$i$i85 = $23 & 1;
     $tobool$i$i86 = ($and$i$i85<<24>>24)==(0);
     if ($tobool$i$i86) {
      $cond$i91 = 10;
     } else {
      $24 = HEAP32[$__buf>>2]|0;
      $and$i1$i88 = $24 & -2;
      $phitmp$i89 = (($and$i1$i88) + -1)|0;
      $cond$i91 = $phitmp$i89;
     }
     __THREW__ = 0;
     invoke_viii(385,($__buf|0),($cond$i91|0),0);
     $25 = __THREW__; __THREW__ = 0;
     $26 = $25&1;
     if ($26) {
      label = 33;
      break;
     }
     $27 = HEAP8[$__buf>>0]|0;
     $and$i$i$i95 = $27 & 1;
     $tobool$i$i$i96 = ($and$i$i$i95<<24>>24)==(0);
     if ($tobool$i$i$i96) {
      $cond$i$i102 = $arrayidx$i$i$i100$pre$phiZZZZ2D;
     } else {
      $28 = HEAP32[$__data_$i$i$i97$pre$phiZZZZ2D>>2]|0;
      $cond$i$i102 = $28;
     }
     $add$ptr = (($cond$i$i102) + ($cond$i59120)|0);
     HEAP32[$__a_end>>2] = $add$ptr;
     $__a$1 = $cond$i$i102;
    } else {
     $__a$1 = $__a$0;
    }
    $__ninp_$i$i105 = (($10) + 12|0);
    $33 = HEAP32[$__ninp_$i$i105>>2]|0;
    $__einp_$i$i106 = (($10) + 16|0);
    $34 = HEAP32[$__einp_$i$i106>>2]|0;
    $cmp$i$i107 = ($33|0)==($34|0);
    if ($cmp$i$i107) {
     $vtable$i$i108 = HEAP32[$10>>2]|0;
     $vfn$i$i109 = (($vtable$i$i108) + 36|0);
     $35 = HEAP32[$vfn$i$i109>>2]|0;
     __THREW__ = 0;
     $call$i$i113 = (invoke_ii($35|0,($10|0))|0);
     $36 = __THREW__; __THREW__ = 0;
     $37 = $36&1;
     if ($37) {
      label = 33;
      break;
     } else {
      $retval$0$i$i = $call$i$i113;
     }
    } else {
     $38 = HEAP8[$33>>0]|0;
     $conv$i$i$i = $38&255;
     $retval$0$i$i = $conv$i$i$i;
    }
    $conv$i = $retval$0$i$i&255;
    $call21 = (__ZNSt3__19__num_getIcE17__stage2_int_loopEciPcRS2_RjcRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_S2_($conv$i,$call,$__a$1,$__a_end,$__dc,$4,$__grouping,$__g,$__g_end,$__atoms)|0);
    $tobool = ($call21|0)==(0);
    if (!($tobool)) {
     $$pre$i12$i$i = $64;$__a$2 = $__a$1;
     break;
    }
    $39 = HEAP32[$__ninp_$i$i105>>2]|0;
    $40 = HEAP32[$__einp_$i$i106>>2]|0;
    $cmp$i$i81 = ($39|0)==($40|0);
    if ($cmp$i$i81) {
     $vtable$i$i = HEAP32[$10>>2]|0;
     $vfn$i$i = (($vtable$i$i) + 40|0);
     $41 = HEAP32[$vfn$i$i>>2]|0;
     __THREW__ = 0;
     (invoke_ii($41|0,($10|0))|0);
     $42 = __THREW__; __THREW__ = 0;
     $43 = $42&1;
     if ($43) {
      label = 33;
      break;
     } else {
      $$pre$i$i$i22 = $10;$__a$0 = $__a$1;
      continue;
     }
    } else {
     $incdec$ptr$i$i = (($39) + 1|0);
     HEAP32[$__ninp_$i$i105>>2] = $incdec$ptr$i$i;
     $$pre$i$i$i22 = $10;$__a$0 = $__a$1;
     continue;
    }
   }
   if ((label|0) == 33) {
    $29 = ___cxa_find_matching_catch()|0;
    $30 = tempRet0;
    $lpad$phi$index = $29;$lpad$phi$index2 = $30;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
    ___resumeException($lpad$phi$index|0);
    // unreachable;
   }
   $44 = HEAP8[$__grouping>>0]|0;
   $and$i$i72 = $44 & 1;
   $tobool$i$i73 = ($and$i$i72<<24>>24)==(0);
   if ($tobool$i$i73) {
    $conv$i$i76 = $44&255;
    $shr1$i$i77 = $conv$i$i76 >>> 1;
    $cond$i79 = $shr1$i$i77;
   } else {
    $__size_$i2$i74 = (($__grouping) + 4|0);
    $45 = HEAP32[$__size_$i2$i74>>2]|0;
    $cond$i79 = $45;
   }
   $cmp27 = ($cond$i79|0)==(0);
   if (!($cmp27)) {
    $46 = HEAP32[$__g_end>>2]|0;
    $sub$ptr$lhs$cast29 = $46;
    $sub$ptr$rhs$cast30 = $__g;
    $sub$ptr$sub31 = (($sub$ptr$lhs$cast29) - ($sub$ptr$rhs$cast30))|0;
    $cmp32 = ($sub$ptr$sub31|0)<(160);
    if ($cmp32) {
     $47 = HEAP32[$__dc>>2]|0;
     $incdec$ptr = (($46) + 4|0);
     HEAP32[$__g_end>>2] = $incdec$ptr;
     HEAP32[$46>>2] = $47;
    }
   }
   $48 = HEAP32[$__a_end>>2]|0;
   __THREW__ = 0;
   $call36 = (invoke_iiiii(390,($__a$2|0),($48|0),($__err|0),($call|0))|0);
   $49 = __THREW__; __THREW__ = 0;
   $50 = $49&1;
   if (!($50)) {
    HEAP32[$__v>>2] = $call36;
    $51 = HEAP32[$__g_end>>2]|0;
    __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping,$__g,$51,$__err);
    $tobool$i$i$i = ($10|0)==(0|0);
    if ($tobool$i$i$i) {
     $57 = 0;
    } else {
     $__ninp_$i$i$i$i = (($10) + 12|0);
     $52 = HEAP32[$__ninp_$i$i$i$i>>2]|0;
     $__einp_$i$i$i$i = (($10) + 16|0);
     $53 = HEAP32[$__einp_$i$i$i$i>>2]|0;
     $cmp$i$i$i$i = ($52|0)==($53|0);
     if ($cmp$i$i$i$i) {
      $vtable$i$i$i$i = HEAP32[$10>>2]|0;
      $vfn$i$i$i$i = (($vtable$i$i$i$i) + 36|0);
      $54 = HEAP32[$vfn$i$i$i$i>>2]|0;
      __THREW__ = 0;
      $call$i$i$i$i9 = (invoke_ii($54|0,($10|0))|0);
      $55 = __THREW__; __THREW__ = 0;
      $56 = $55&1;
      if ($56) {
       break;
      }
      $cmp$i1$i$i$i = ($call$i$i$i$i9|0)==(-1);
      if ($cmp$i1$i$i$i) {
       HEAP32[$__b>>2] = 0;
       $57 = 0;
      } else {
       $57 = $10;
      }
     } else {
      $57 = $10;
     }
    }
    $cmp$i$i$i = ($57|0)==(0|0);
    $tobool$i2$i$i = ($$pre$i12$i$i|0)==(0|0);
    do {
     if ($tobool$i2$i$i) {
      label = 61;
     } else {
      $__ninp_$i$i3$i$i = (($$pre$i12$i$i) + 12|0);
      $58 = HEAP32[$__ninp_$i$i3$i$i>>2]|0;
      $__einp_$i$i4$i$i = (($$pre$i12$i$i) + 16|0);
      $59 = HEAP32[$__einp_$i$i4$i$i>>2]|0;
      $cmp$i$i5$i$i = ($58|0)==($59|0);
      if (!($cmp$i$i5$i$i)) {
       if (!($cmp$i$i$i)) {
        break;
       }
       HEAP32[$agg$result>>2] = $57;
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
       STACKTOP = sp;return;
      }
      $vtable$i$i7$i$i = HEAP32[$$pre$i12$i$i>>2]|0;
      $vfn$i$i8$i$i = (($vtable$i$i7$i$i) + 36|0);
      $60 = HEAP32[$vfn$i$i8$i$i>>2]|0;
      __THREW__ = 0;
      $call$i$i9$i$i10 = (invoke_ii($60|0,($$pre$i12$i$i|0))|0);
      $61 = __THREW__; __THREW__ = 0;
      $62 = $61&1;
      if ($62) {
       break L1;
      }
      $cmp$i1$i10$i$i = ($call$i$i9$i$i10|0)==(-1);
      if ($cmp$i1$i10$i$i) {
       HEAP32[$__e>>2] = 0;
       label = 61;
       break;
      }
      $cmp$i15$i$i = ($$pre$i12$i$i|0)==(0|0);
      $cmptmp$i$i = $cmp$i$i$i ^ $cmp$i15$i$i;
      if ($cmptmp$i$i) {
       HEAP32[$agg$result>>2] = $57;
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
       STACKTOP = sp;return;
      }
     }
    } while(0);
    if ((label|0) == 61) {
     if (!($cmp$i$i$i)) {
      HEAP32[$agg$result>>2] = $57;
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
      STACKTOP = sp;return;
     }
    }
    $63 = HEAP32[$__err>>2]|0;
    $or = $63 | 2;
    HEAP32[$__err>>2] = $or;
    HEAP32[$agg$result>>2] = $57;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
    STACKTOP = sp;return;
   }
  }
 } while(0);
 $31 = ___cxa_find_matching_catch()|0;
 $32 = tempRet0;
 $lpad$phi$index = $31;$lpad$phi$index2 = $32;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
 ___resumeException($lpad$phi$index|0);
 // unreachable;
}
function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRy($agg$result,$this,$__b,$__e,$__iob,$__err,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $0 = 0, $1 = 0, $agg$tmp = 0, $agg$tmp$byval_copy = 0, $agg$tmp2 = 0, $agg$tmp2$byval_copy = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $agg$tmp2$byval_copy = sp + 12|0;
 $agg$tmp$byval_copy = sp + 8|0;
 $agg$tmp = sp + 4|0;
 $agg$tmp2 = sp;
 $0 = HEAP32[$__b>>2]|0;
 HEAP32[$agg$tmp>>2] = $0;
 $1 = HEAP32[$__e>>2]|0;
 HEAP32[$agg$tmp2>>2] = $1;
 ;HEAP32[$agg$tmp$byval_copy+0>>2]=HEAP32[$agg$tmp+0>>2]|0;
 ;HEAP32[$agg$tmp2$byval_copy+0>>2]=HEAP32[$agg$tmp2+0>>2]|0;
 __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__do_get_unsignedIyEES4_S4_S4_RNS_8ios_baseERjRT_($agg$result,0,$agg$tmp$byval_copy,$agg$tmp2$byval_copy,$__iob,$__err,$__v);
 STACKTOP = sp;return;
}
function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__do_get_unsignedIyEES4_S4_S4_RNS_8ios_baseERjRT_($agg$result,$this,$__b,$__e,$__iob,$__err,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$pre = 0, $$pre$i$i$i22 = 0, $$pre$i12$i$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $8 = 0, $9 = 0, $__a$0 = 0, $__a$1 = 0, $__a$2 = 0, $__a_end = 0, $__atoms = 0, $__buf = 0;
 var $__data_$i$i$i = 0, $__data_$i$i$i97$pre = 0, $__data_$i$i$i97$pre$phiZZZZ2D = 0, $__dc = 0, $__einp_$i$i$i$i = 0, $__einp_$i$i$i$i15 = 0, $__einp_$i$i106 = 0, $__einp_$i$i4$i$i = 0, $__einp_$i$i4$i$i30 = 0, $__g = 0, $__g_end = 0, $__grouping = 0, $__ninp_$i$i$i$i = 0, $__ninp_$i$i$i$i14 = 0, $__ninp_$i$i105 = 0, $__ninp_$i$i3$i$i = 0, $__ninp_$i$i3$i$i29 = 0, $__size_$i2$i64 = 0, $__size_$i2$i74 = 0, $__thousands_sep = 0;
 var $add$ptr = 0, $and$i$i$i = 0, $and$i$i$i95 = 0, $and$i$i47 = 0, $and$i$i72 = 0, $and$i$i85 = 0, $and$i1$i88 = 0, $arrayidx$i$i$i = 0, $arrayidx$i$i$i100$pre = 0, $arrayidx$i$i$i100$pre$phiZZZZ2D = 0, $call = 0, $call$i$i$i$i43 = 0, $call$i$i$i$i9 = 0, $call$i$i113 = 0, $call$i$i9$i$i10 = 0, $call$i$i9$i$i45 = 0, $call21 = 0, $cmp = 0, $cmp$i$i$i = 0, $cmp$i$i$i$i = 0;
 var $cmp$i$i$i$i16 = 0, $cmp$i$i$i25 = 0, $cmp$i$i107 = 0, $cmp$i$i5$i$i = 0, $cmp$i$i5$i$i31 = 0, $cmp$i$i81 = 0, $cmp$i1$i$i$i = 0, $cmp$i1$i$i$i20 = 0, $cmp$i1$i10$i$i = 0, $cmp$i1$i10$i$i35 = 0, $cmp$i15$i$i = 0, $cmp27 = 0, $cmp32 = 0, $cmptmp$i$i = 0, $cond$i$i = 0, $cond$i$i102 = 0, $cond$i50 = 0, $cond$i59120 = 0, $cond$i69 = 0, $cond$i79 = 0;
 var $cond$i91 = 0, $conv$i = 0, $conv$i$i = 0, $conv$i$i$i = 0, $conv$i$i56 = 0, $conv$i$i66 = 0, $conv$i$i76 = 0, $incdec$ptr = 0, $incdec$ptr$i$i = 0, $lpad$phi$index = 0, $lpad$phi$index2 = 0, $mul = 0, $or = 0, $phitmp$i89 = 0, $retval$0$i$i = 0, $shr1$i$i = 0, $shr1$i$i57 = 0, $shr1$i$i67 = 0, $shr1$i$i77 = 0, $sub$ptr$lhs$cast = 0;
 var $sub$ptr$lhs$cast29 = 0, $sub$ptr$rhs$cast = 0, $sub$ptr$rhs$cast30 = 0, $sub$ptr$sub = 0, $sub$ptr$sub31 = 0, $tobool = 0, $tobool$i$i$i = 0, $tobool$i$i$i11 = 0, $tobool$i$i$i13 = 0, $tobool$i$i$i96 = 0, $tobool$i$i48 = 0, $tobool$i$i73 = 0, $tobool$i$i86 = 0, $tobool$i2$i$i = 0, $tobool$i2$i$i27 = 0, $vfn$i$i = 0, $vfn$i$i$i$i = 0, $vfn$i$i$i$i19 = 0, $vfn$i$i109 = 0, $vfn$i$i8$i$i = 0;
 var $vfn$i$i8$i$i34 = 0, $vtable$i$i = 0, $vtable$i$i$i$i = 0, $vtable$i$i$i$i18 = 0, $vtable$i$i108 = 0, $vtable$i$i7$i$i = 0, $vtable$i$i7$i$i33 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 224|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__atoms = sp + 198|0;
 $__thousands_sep = sp + 196|0;
 $__grouping = sp + 16|0;
 $__buf = sp + 4|0;
 $__a_end = sp + 192|0;
 $__g = sp + 32|0;
 $__g_end = sp;
 $__dc = sp + 28|0;
 $call = (__ZNSt3__114__num_get_base10__get_baseERNS_8ios_baseE($__iob)|0);
 __ZNSt3__19__num_getIcE17__stage2_int_prepERNS_8ios_baseEPcRc($__grouping,$__iob,$__atoms,$__thousands_sep);
 ;HEAP32[$__buf+0>>2]=0|0;HEAP32[$__buf+4>>2]=0|0;HEAP32[$__buf+8>>2]=0|0;
 __THREW__ = 0;
 invoke_viii(385,($__buf|0),10,0);
 $0 = __THREW__; __THREW__ = 0;
 $1 = $0&1;
 L1: do {
  if (!($1)) {
   $2 = HEAP8[$__buf>>0]|0;
   $and$i$i$i = $2 & 1;
   $tobool$i$i$i11 = ($and$i$i$i<<24>>24)==(0);
   if ($tobool$i$i$i11) {
    $arrayidx$i$i$i = (($__buf) + 1|0);
    $__data_$i$i$i97$pre = (($__buf) + 8|0);
    $__data_$i$i$i97$pre$phiZZZZ2D = $__data_$i$i$i97$pre;$arrayidx$i$i$i100$pre$phiZZZZ2D = $arrayidx$i$i$i;$cond$i$i = $arrayidx$i$i$i;
   } else {
    $__data_$i$i$i = (($__buf) + 8|0);
    $3 = HEAP32[$__data_$i$i$i>>2]|0;
    $arrayidx$i$i$i100$pre = (($__buf) + 1|0);
    $__data_$i$i$i97$pre$phiZZZZ2D = $__data_$i$i$i;$arrayidx$i$i$i100$pre$phiZZZZ2D = $arrayidx$i$i$i100$pre;$cond$i$i = $3;
   }
   HEAP32[$__a_end>>2] = $cond$i$i;
   HEAP32[$__g_end>>2] = $__g;
   HEAP32[$__dc>>2] = 0;
   $__size_$i2$i64 = (($__buf) + 4|0);
   $4 = HEAP8[$__thousands_sep>>0]|0;
   $$pre = HEAP32[$__b>>2]|0;
   $$pre$i$i$i22 = $$pre;$__a$0 = $cond$i$i;
   L7: while(1) {
    $tobool$i$i$i13 = ($$pre$i$i$i22|0)==(0|0);
    if ($tobool$i$i$i13) {
     $10 = 0;
    } else {
     $__ninp_$i$i$i$i14 = (($$pre$i$i$i22) + 12|0);
     $5 = HEAP32[$__ninp_$i$i$i$i14>>2]|0;
     $__einp_$i$i$i$i15 = (($$pre$i$i$i22) + 16|0);
     $6 = HEAP32[$__einp_$i$i$i$i15>>2]|0;
     $cmp$i$i$i$i16 = ($5|0)==($6|0);
     if ($cmp$i$i$i$i16) {
      $vtable$i$i$i$i18 = HEAP32[$$pre$i$i$i22>>2]|0;
      $vfn$i$i$i$i19 = (($vtable$i$i$i$i18) + 36|0);
      $7 = HEAP32[$vfn$i$i$i$i19>>2]|0;
      __THREW__ = 0;
      $call$i$i$i$i43 = (invoke_ii($7|0,($$pre$i$i$i22|0))|0);
      $8 = __THREW__; __THREW__ = 0;
      $9 = $8&1;
      if ($9) {
       label = 33;
       break;
      }
      $cmp$i1$i$i$i20 = ($call$i$i$i$i43|0)==(-1);
      if ($cmp$i1$i$i$i20) {
       HEAP32[$__b>>2] = 0;
       $10 = 0;
      } else {
       $10 = $$pre$i$i$i22;
      }
     } else {
      $10 = $$pre$i$i$i22;
     }
    }
    $cmp$i$i$i25 = ($10|0)==(0|0);
    $11 = HEAP32[$__e>>2]|0;
    $tobool$i2$i$i27 = ($11|0)==(0|0);
    do {
     if ($tobool$i2$i$i27) {
      label = 17;
     } else {
      $__ninp_$i$i3$i$i29 = (($11) + 12|0);
      $12 = HEAP32[$__ninp_$i$i3$i$i29>>2]|0;
      $__einp_$i$i4$i$i30 = (($11) + 16|0);
      $13 = HEAP32[$__einp_$i$i4$i$i30>>2]|0;
      $cmp$i$i5$i$i31 = ($12|0)==($13|0);
      if (!($cmp$i$i5$i$i31)) {
       if ($cmp$i$i$i25) {
        $70 = $11;
        break;
       } else {
        $$pre$i12$i$i = $11;$__a$2 = $__a$0;
        break L7;
       }
      }
      $vtable$i$i7$i$i33 = HEAP32[$11>>2]|0;
      $vfn$i$i8$i$i34 = (($vtable$i$i7$i$i33) + 36|0);
      $14 = HEAP32[$vfn$i$i8$i$i34>>2]|0;
      __THREW__ = 0;
      $call$i$i9$i$i45 = (invoke_ii($14|0,($11|0))|0);
      $15 = __THREW__; __THREW__ = 0;
      $16 = $15&1;
      if ($16) {
       label = 33;
       break L7;
      }
      $cmp$i1$i10$i$i35 = ($call$i$i9$i$i45|0)==(-1);
      if ($cmp$i1$i10$i$i35) {
       HEAP32[$__e>>2] = 0;
       label = 17;
       break;
      } else {
       if ($cmp$i$i$i25) {
        $70 = $11;
        break;
       } else {
        $$pre$i12$i$i = $11;$__a$2 = $__a$0;
        break L7;
       }
      }
     }
    } while(0);
    if ((label|0) == 17) {
     label = 0;
     if ($cmp$i$i$i25) {
      $$pre$i12$i$i = 0;$__a$2 = $__a$0;
      break;
     } else {
      $70 = 0;
     }
    }
    $17 = HEAP32[$__a_end>>2]|0;
    $sub$ptr$lhs$cast = $17;
    $sub$ptr$rhs$cast = $__a$0;
    $sub$ptr$sub = (($sub$ptr$lhs$cast) - ($sub$ptr$rhs$cast))|0;
    $18 = HEAP8[$__buf>>0]|0;
    $and$i$i47 = $18 & 1;
    $tobool$i$i48 = ($and$i$i47<<24>>24)==(0);
    if ($tobool$i$i48) {
     $conv$i$i = $18&255;
     $shr1$i$i = $conv$i$i >>> 1;
     $cond$i50 = $shr1$i$i;
    } else {
     $19 = HEAP32[$__size_$i2$i64>>2]|0;
     $cond$i50 = $19;
    }
    $cmp = ($sub$ptr$sub|0)==($cond$i50|0);
    if ($cmp) {
     if ($tobool$i$i48) {
      $conv$i$i56 = $18&255;
      $shr1$i$i57 = $conv$i$i56 >>> 1;
      $conv$i$i66 = $18&255;
      $shr1$i$i67 = $conv$i$i66 >>> 1;
      $cond$i59120 = $shr1$i$i57;$cond$i69 = $shr1$i$i67;
     } else {
      $20 = HEAP32[$__size_$i2$i64>>2]|0;
      $cond$i59120 = $20;$cond$i69 = $20;
     }
     $mul = $cond$i69 << 1;
     __THREW__ = 0;
     invoke_viii(385,($__buf|0),($mul|0),0);
     $21 = __THREW__; __THREW__ = 0;
     $22 = $21&1;
     if ($22) {
      label = 33;
      break;
     }
     $23 = HEAP8[$__buf>>0]|0;
     $and$i$i85 = $23 & 1;
     $tobool$i$i86 = ($and$i$i85<<24>>24)==(0);
     if ($tobool$i$i86) {
      $cond$i91 = 10;
     } else {
      $24 = HEAP32[$__buf>>2]|0;
      $and$i1$i88 = $24 & -2;
      $phitmp$i89 = (($and$i1$i88) + -1)|0;
      $cond$i91 = $phitmp$i89;
     }
     __THREW__ = 0;
     invoke_viii(385,($__buf|0),($cond$i91|0),0);
     $25 = __THREW__; __THREW__ = 0;
     $26 = $25&1;
     if ($26) {
      label = 33;
      break;
     }
     $27 = HEAP8[$__buf>>0]|0;
     $and$i$i$i95 = $27 & 1;
     $tobool$i$i$i96 = ($and$i$i$i95<<24>>24)==(0);
     if ($tobool$i$i$i96) {
      $cond$i$i102 = $arrayidx$i$i$i100$pre$phiZZZZ2D;
     } else {
      $28 = HEAP32[$__data_$i$i$i97$pre$phiZZZZ2D>>2]|0;
      $cond$i$i102 = $28;
     }
     $add$ptr = (($cond$i$i102) + ($cond$i59120)|0);
     HEAP32[$__a_end>>2] = $add$ptr;
     $__a$1 = $cond$i$i102;
    } else {
     $__a$1 = $__a$0;
    }
    $__ninp_$i$i105 = (($10) + 12|0);
    $33 = HEAP32[$__ninp_$i$i105>>2]|0;
    $__einp_$i$i106 = (($10) + 16|0);
    $34 = HEAP32[$__einp_$i$i106>>2]|0;
    $cmp$i$i107 = ($33|0)==($34|0);
    if ($cmp$i$i107) {
     $vtable$i$i108 = HEAP32[$10>>2]|0;
     $vfn$i$i109 = (($vtable$i$i108) + 36|0);
     $35 = HEAP32[$vfn$i$i109>>2]|0;
     __THREW__ = 0;
     $call$i$i113 = (invoke_ii($35|0,($10|0))|0);
     $36 = __THREW__; __THREW__ = 0;
     $37 = $36&1;
     if ($37) {
      label = 33;
      break;
     } else {
      $retval$0$i$i = $call$i$i113;
     }
    } else {
     $38 = HEAP8[$33>>0]|0;
     $conv$i$i$i = $38&255;
     $retval$0$i$i = $conv$i$i$i;
    }
    $conv$i = $retval$0$i$i&255;
    $call21 = (__ZNSt3__19__num_getIcE17__stage2_int_loopEciPcRS2_RjcRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_S2_($conv$i,$call,$__a$1,$__a_end,$__dc,$4,$__grouping,$__g,$__g_end,$__atoms)|0);
    $tobool = ($call21|0)==(0);
    if (!($tobool)) {
     $$pre$i12$i$i = $70;$__a$2 = $__a$1;
     break;
    }
    $39 = HEAP32[$__ninp_$i$i105>>2]|0;
    $40 = HEAP32[$__einp_$i$i106>>2]|0;
    $cmp$i$i81 = ($39|0)==($40|0);
    if ($cmp$i$i81) {
     $vtable$i$i = HEAP32[$10>>2]|0;
     $vfn$i$i = (($vtable$i$i) + 40|0);
     $41 = HEAP32[$vfn$i$i>>2]|0;
     __THREW__ = 0;
     (invoke_ii($41|0,($10|0))|0);
     $42 = __THREW__; __THREW__ = 0;
     $43 = $42&1;
     if ($43) {
      label = 33;
      break;
     } else {
      $$pre$i$i$i22 = $10;$__a$0 = $__a$1;
      continue;
     }
    } else {
     $incdec$ptr$i$i = (($39) + 1|0);
     HEAP32[$__ninp_$i$i105>>2] = $incdec$ptr$i$i;
     $$pre$i$i$i22 = $10;$__a$0 = $__a$1;
     continue;
    }
   }
   if ((label|0) == 33) {
    $29 = ___cxa_find_matching_catch()|0;
    $30 = tempRet0;
    $lpad$phi$index = $29;$lpad$phi$index2 = $30;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
    ___resumeException($lpad$phi$index|0);
    // unreachable;
   }
   $44 = HEAP8[$__grouping>>0]|0;
   $and$i$i72 = $44 & 1;
   $tobool$i$i73 = ($and$i$i72<<24>>24)==(0);
   if ($tobool$i$i73) {
    $conv$i$i76 = $44&255;
    $shr1$i$i77 = $conv$i$i76 >>> 1;
    $cond$i79 = $shr1$i$i77;
   } else {
    $__size_$i2$i74 = (($__grouping) + 4|0);
    $45 = HEAP32[$__size_$i2$i74>>2]|0;
    $cond$i79 = $45;
   }
   $cmp27 = ($cond$i79|0)==(0);
   if (!($cmp27)) {
    $46 = HEAP32[$__g_end>>2]|0;
    $sub$ptr$lhs$cast29 = $46;
    $sub$ptr$rhs$cast30 = $__g;
    $sub$ptr$sub31 = (($sub$ptr$lhs$cast29) - ($sub$ptr$rhs$cast30))|0;
    $cmp32 = ($sub$ptr$sub31|0)<(160);
    if ($cmp32) {
     $47 = HEAP32[$__dc>>2]|0;
     $incdec$ptr = (($46) + 4|0);
     HEAP32[$__g_end>>2] = $incdec$ptr;
     HEAP32[$46>>2] = $47;
    }
   }
   $48 = HEAP32[$__a_end>>2]|0;
   __THREW__ = 0;
   $49 = (invoke_iiiii(391,($__a$2|0),($48|0),($__err|0),($call|0))|0);
   $50 = tempRet0;
   $51 = __THREW__; __THREW__ = 0;
   $52 = $51&1;
   if (!($52)) {
    $53 = $__v;
    $54 = $53;
    HEAP32[$54>>2] = $49;
    $55 = (($53) + 4)|0;
    $56 = $55;
    HEAP32[$56>>2] = $50;
    $57 = HEAP32[$__g_end>>2]|0;
    __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping,$__g,$57,$__err);
    $tobool$i$i$i = ($10|0)==(0|0);
    if ($tobool$i$i$i) {
     $63 = 0;
    } else {
     $__ninp_$i$i$i$i = (($10) + 12|0);
     $58 = HEAP32[$__ninp_$i$i$i$i>>2]|0;
     $__einp_$i$i$i$i = (($10) + 16|0);
     $59 = HEAP32[$__einp_$i$i$i$i>>2]|0;
     $cmp$i$i$i$i = ($58|0)==($59|0);
     if ($cmp$i$i$i$i) {
      $vtable$i$i$i$i = HEAP32[$10>>2]|0;
      $vfn$i$i$i$i = (($vtable$i$i$i$i) + 36|0);
      $60 = HEAP32[$vfn$i$i$i$i>>2]|0;
      __THREW__ = 0;
      $call$i$i$i$i9 = (invoke_ii($60|0,($10|0))|0);
      $61 = __THREW__; __THREW__ = 0;
      $62 = $61&1;
      if ($62) {
       break;
      }
      $cmp$i1$i$i$i = ($call$i$i$i$i9|0)==(-1);
      if ($cmp$i1$i$i$i) {
       HEAP32[$__b>>2] = 0;
       $63 = 0;
      } else {
       $63 = $10;
      }
     } else {
      $63 = $10;
     }
    }
    $cmp$i$i$i = ($63|0)==(0|0);
    $tobool$i2$i$i = ($$pre$i12$i$i|0)==(0|0);
    do {
     if ($tobool$i2$i$i) {
      label = 61;
     } else {
      $__ninp_$i$i3$i$i = (($$pre$i12$i$i) + 12|0);
      $64 = HEAP32[$__ninp_$i$i3$i$i>>2]|0;
      $__einp_$i$i4$i$i = (($$pre$i12$i$i) + 16|0);
      $65 = HEAP32[$__einp_$i$i4$i$i>>2]|0;
      $cmp$i$i5$i$i = ($64|0)==($65|0);
      if (!($cmp$i$i5$i$i)) {
       if (!($cmp$i$i$i)) {
        break;
       }
       HEAP32[$agg$result>>2] = $63;
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
       STACKTOP = sp;return;
      }
      $vtable$i$i7$i$i = HEAP32[$$pre$i12$i$i>>2]|0;
      $vfn$i$i8$i$i = (($vtable$i$i7$i$i) + 36|0);
      $66 = HEAP32[$vfn$i$i8$i$i>>2]|0;
      __THREW__ = 0;
      $call$i$i9$i$i10 = (invoke_ii($66|0,($$pre$i12$i$i|0))|0);
      $67 = __THREW__; __THREW__ = 0;
      $68 = $67&1;
      if ($68) {
       break L1;
      }
      $cmp$i1$i10$i$i = ($call$i$i9$i$i10|0)==(-1);
      if ($cmp$i1$i10$i$i) {
       HEAP32[$__e>>2] = 0;
       label = 61;
       break;
      }
      $cmp$i15$i$i = ($$pre$i12$i$i|0)==(0|0);
      $cmptmp$i$i = $cmp$i$i$i ^ $cmp$i15$i$i;
      if ($cmptmp$i$i) {
       HEAP32[$agg$result>>2] = $63;
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
       STACKTOP = sp;return;
      }
     }
    } while(0);
    if ((label|0) == 61) {
     if (!($cmp$i$i$i)) {
      HEAP32[$agg$result>>2] = $63;
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
      STACKTOP = sp;return;
     }
    }
    $69 = HEAP32[$__err>>2]|0;
    $or = $69 | 2;
    HEAP32[$__err>>2] = $or;
    HEAP32[$agg$result>>2] = $63;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
    STACKTOP = sp;return;
   }
  }
 } while(0);
 $31 = ___cxa_find_matching_catch()|0;
 $32 = tempRet0;
 $lpad$phi$index = $31;$lpad$phi$index2 = $32;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
 ___resumeException($lpad$phi$index|0);
 // unreachable;
}
function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRf($agg$result,$this,$__b,$__e,$__iob,$__err,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $0 = 0, $1 = 0, $agg$tmp = 0, $agg$tmp$byval_copy = 0, $agg$tmp2 = 0, $agg$tmp2$byval_copy = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $agg$tmp2$byval_copy = sp + 12|0;
 $agg$tmp$byval_copy = sp + 8|0;
 $agg$tmp = sp + 4|0;
 $agg$tmp2 = sp;
 $0 = HEAP32[$__b>>2]|0;
 HEAP32[$agg$tmp>>2] = $0;
 $1 = HEAP32[$__e>>2]|0;
 HEAP32[$agg$tmp2>>2] = $1;
 ;HEAP32[$agg$tmp$byval_copy+0>>2]=HEAP32[$agg$tmp+0>>2]|0;
 ;HEAP32[$agg$tmp2$byval_copy+0>>2]=HEAP32[$agg$tmp2+0>>2]|0;
 __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE23__do_get_floating_pointIfEES4_S4_S4_RNS_8ios_baseERjRT_($agg$result,0,$agg$tmp$byval_copy,$agg$tmp2$byval_copy,$__iob,$__err,$__v);
 STACKTOP = sp;return;
}
function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE23__do_get_floating_pointIfEES4_S4_S4_RNS_8ios_baseERjRT_($agg$result,$this,$__b,$__e,$__iob,$__err,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$pre = 0, $$pre$i$i$i20 = 0, $$pre$i12$i$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $7 = 0, $8 = 0, $9 = 0, $__a$0 = 0, $__a$1 = 0, $__a$2 = 0, $__a_end = 0, $__atoms = 0, $__buf = 0, $__data_$i$i$i = 0, $__data_$i$i$i95$pre = 0, $__data_$i$i$i95$pre$phiZZZZ2D = 0, $__dc = 0;
 var $__decimal_point = 0, $__einp_$i$i$i$i = 0, $__einp_$i$i$i$i13 = 0, $__einp_$i$i104 = 0, $__einp_$i$i4$i$i = 0, $__einp_$i$i4$i$i28 = 0, $__exp = 0, $__g = 0, $__g_end = 0, $__grouping = 0, $__in_units = 0, $__ninp_$i$i$i$i = 0, $__ninp_$i$i$i$i12 = 0, $__ninp_$i$i103 = 0, $__ninp_$i$i3$i$i = 0, $__ninp_$i$i3$i$i27 = 0, $__size_$i2$i62 = 0, $__size_$i2$i72 = 0, $__thousands_sep = 0, $add$ptr = 0;
 var $and$i$i$i = 0, $and$i$i$i93 = 0, $and$i$i45 = 0, $and$i$i70 = 0, $and$i$i83 = 0, $and$i1$i86 = 0, $arrayidx$i$i$i = 0, $arrayidx$i$i$i98$pre = 0, $arrayidx$i$i$i98$pre$phiZZZZ2D = 0, $call$i$i$i$i41 = 0, $call$i$i$i$i7 = 0, $call$i$i111 = 0, $call$i$i9$i$i43 = 0, $call$i$i9$i$i8 = 0, $call20 = 0, $call37 = 0.0, $cmp = 0, $cmp$i$i$i = 0, $cmp$i$i$i$i = 0, $cmp$i$i$i$i14 = 0;
 var $cmp$i$i$i23 = 0, $cmp$i$i105 = 0, $cmp$i$i5$i$i = 0, $cmp$i$i5$i$i29 = 0, $cmp$i$i79 = 0, $cmp$i1$i$i$i = 0, $cmp$i1$i$i$i18 = 0, $cmp$i1$i10$i$i = 0, $cmp$i1$i10$i$i33 = 0, $cmp$i15$i$i = 0, $cmp26 = 0, $cmp33 = 0, $cmptmp$i$i = 0, $cond$i$i = 0, $cond$i$i100 = 0, $cond$i48 = 0, $cond$i57118 = 0, $cond$i67 = 0, $cond$i77 = 0, $cond$i89 = 0;
 var $conv$i = 0, $conv$i$i = 0, $conv$i$i$i = 0, $conv$i$i54 = 0, $conv$i$i64 = 0, $conv$i$i74 = 0, $incdec$ptr = 0, $incdec$ptr$i$i = 0, $lpad$phi$index = 0, $lpad$phi$index2 = 0, $mul = 0, $or = 0, $phitmp$i87 = 0, $retval$0$i$i = 0, $shr1$i$i = 0, $shr1$i$i55 = 0, $shr1$i$i65 = 0, $shr1$i$i75 = 0, $sub$ptr$lhs$cast = 0, $sub$ptr$lhs$cast30 = 0;
 var $sub$ptr$rhs$cast = 0, $sub$ptr$rhs$cast31 = 0, $sub$ptr$sub = 0, $sub$ptr$sub32 = 0, $tobool = 0, $tobool$i$i$i = 0, $tobool$i$i$i11 = 0, $tobool$i$i$i9 = 0, $tobool$i$i$i94 = 0, $tobool$i$i46 = 0, $tobool$i$i71 = 0, $tobool$i$i84 = 0, $tobool$i2$i$i = 0, $tobool$i2$i$i25 = 0, $tobool27 = 0, $vfn$i$i = 0, $vfn$i$i$i$i = 0, $vfn$i$i$i$i17 = 0, $vfn$i$i107 = 0, $vfn$i$i8$i$i = 0;
 var $vfn$i$i8$i$i32 = 0, $vtable$i$i = 0, $vtable$i$i$i$i = 0, $vtable$i$i$i$i16 = 0, $vtable$i$i106 = 0, $vtable$i$i7$i$i = 0, $vtable$i$i7$i$i31 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 256|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__atoms = sp + 208|0;
 $__decimal_point = sp + 200|0;
 $__thousands_sep = sp + 240|0;
 $__grouping = sp;
 $__buf = sp + 188|0;
 $__a_end = sp + 184|0;
 $__g = sp + 16|0;
 $__g_end = sp + 176|0;
 $__dc = sp + 180|0;
 $__in_units = sp + 241|0;
 $__exp = sp + 242|0;
 __ZNSt3__19__num_getIcE19__stage2_float_prepERNS_8ios_baseEPcRcS5_($__grouping,$__iob,$__atoms,$__decimal_point,$__thousands_sep);
 ;HEAP32[$__buf+0>>2]=0|0;HEAP32[$__buf+4>>2]=0|0;HEAP32[$__buf+8>>2]=0|0;
 __THREW__ = 0;
 invoke_viii(385,($__buf|0),10,0);
 $0 = __THREW__; __THREW__ = 0;
 $1 = $0&1;
 L1: do {
  if (!($1)) {
   $2 = HEAP8[$__buf>>0]|0;
   $and$i$i$i = $2 & 1;
   $tobool$i$i$i9 = ($and$i$i$i<<24>>24)==(0);
   if ($tobool$i$i$i9) {
    $arrayidx$i$i$i = (($__buf) + 1|0);
    $__data_$i$i$i95$pre = (($__buf) + 8|0);
    $__data_$i$i$i95$pre$phiZZZZ2D = $__data_$i$i$i95$pre;$arrayidx$i$i$i98$pre$phiZZZZ2D = $arrayidx$i$i$i;$cond$i$i = $arrayidx$i$i$i;
   } else {
    $__data_$i$i$i = (($__buf) + 8|0);
    $3 = HEAP32[$__data_$i$i$i>>2]|0;
    $arrayidx$i$i$i98$pre = (($__buf) + 1|0);
    $__data_$i$i$i95$pre$phiZZZZ2D = $__data_$i$i$i;$arrayidx$i$i$i98$pre$phiZZZZ2D = $arrayidx$i$i$i98$pre;$cond$i$i = $3;
   }
   HEAP32[$__a_end>>2] = $cond$i$i;
   HEAP32[$__g_end>>2] = $__g;
   HEAP32[$__dc>>2] = 0;
   HEAP8[$__in_units>>0] = 1;
   HEAP8[$__exp>>0] = 69;
   $__size_$i2$i62 = (($__buf) + 4|0);
   $4 = HEAP8[$__decimal_point>>0]|0;
   $5 = HEAP8[$__thousands_sep>>0]|0;
   $$pre = HEAP32[$__b>>2]|0;
   $$pre$i$i$i20 = $$pre;$__a$0 = $cond$i$i;
   L7: while(1) {
    $tobool$i$i$i11 = ($$pre$i$i$i20|0)==(0|0);
    if ($tobool$i$i$i11) {
     $11 = 0;
    } else {
     $__ninp_$i$i$i$i12 = (($$pre$i$i$i20) + 12|0);
     $6 = HEAP32[$__ninp_$i$i$i$i12>>2]|0;
     $__einp_$i$i$i$i13 = (($$pre$i$i$i20) + 16|0);
     $7 = HEAP32[$__einp_$i$i$i$i13>>2]|0;
     $cmp$i$i$i$i14 = ($6|0)==($7|0);
     if ($cmp$i$i$i$i14) {
      $vtable$i$i$i$i16 = HEAP32[$$pre$i$i$i20>>2]|0;
      $vfn$i$i$i$i17 = (($vtable$i$i$i$i16) + 36|0);
      $8 = HEAP32[$vfn$i$i$i$i17>>2]|0;
      __THREW__ = 0;
      $call$i$i$i$i41 = (invoke_ii($8|0,($$pre$i$i$i20|0))|0);
      $9 = __THREW__; __THREW__ = 0;
      $10 = $9&1;
      if ($10) {
       label = 33;
       break;
      }
      $cmp$i1$i$i$i18 = ($call$i$i$i$i41|0)==(-1);
      if ($cmp$i1$i$i$i18) {
       HEAP32[$__b>>2] = 0;
       $11 = 0;
      } else {
       $11 = $$pre$i$i$i20;
      }
     } else {
      $11 = $$pre$i$i$i20;
     }
    }
    $cmp$i$i$i23 = ($11|0)==(0|0);
    $12 = HEAP32[$__e>>2]|0;
    $tobool$i2$i$i25 = ($12|0)==(0|0);
    do {
     if ($tobool$i2$i$i25) {
      label = 17;
     } else {
      $__ninp_$i$i3$i$i27 = (($12) + 12|0);
      $13 = HEAP32[$__ninp_$i$i3$i$i27>>2]|0;
      $__einp_$i$i4$i$i28 = (($12) + 16|0);
      $14 = HEAP32[$__einp_$i$i4$i$i28>>2]|0;
      $cmp$i$i5$i$i29 = ($13|0)==($14|0);
      if (!($cmp$i$i5$i$i29)) {
       if ($cmp$i$i$i23) {
        $66 = $12;
        break;
       } else {
        $$pre$i12$i$i = $12;$__a$2 = $__a$0;
        break L7;
       }
      }
      $vtable$i$i7$i$i31 = HEAP32[$12>>2]|0;
      $vfn$i$i8$i$i32 = (($vtable$i$i7$i$i31) + 36|0);
      $15 = HEAP32[$vfn$i$i8$i$i32>>2]|0;
      __THREW__ = 0;
      $call$i$i9$i$i43 = (invoke_ii($15|0,($12|0))|0);
      $16 = __THREW__; __THREW__ = 0;
      $17 = $16&1;
      if ($17) {
       label = 33;
       break L7;
      }
      $cmp$i1$i10$i$i33 = ($call$i$i9$i$i43|0)==(-1);
      if ($cmp$i1$i10$i$i33) {
       HEAP32[$__e>>2] = 0;
       label = 17;
       break;
      } else {
       if ($cmp$i$i$i23) {
        $66 = $12;
        break;
       } else {
        $$pre$i12$i$i = $12;$__a$2 = $__a$0;
        break L7;
       }
      }
     }
    } while(0);
    if ((label|0) == 17) {
     label = 0;
     if ($cmp$i$i$i23) {
      $$pre$i12$i$i = 0;$__a$2 = $__a$0;
      break;
     } else {
      $66 = 0;
     }
    }
    $18 = HEAP32[$__a_end>>2]|0;
    $sub$ptr$lhs$cast = $18;
    $sub$ptr$rhs$cast = $__a$0;
    $sub$ptr$sub = (($sub$ptr$lhs$cast) - ($sub$ptr$rhs$cast))|0;
    $19 = HEAP8[$__buf>>0]|0;
    $and$i$i45 = $19 & 1;
    $tobool$i$i46 = ($and$i$i45<<24>>24)==(0);
    if ($tobool$i$i46) {
     $conv$i$i = $19&255;
     $shr1$i$i = $conv$i$i >>> 1;
     $cond$i48 = $shr1$i$i;
    } else {
     $20 = HEAP32[$__size_$i2$i62>>2]|0;
     $cond$i48 = $20;
    }
    $cmp = ($sub$ptr$sub|0)==($cond$i48|0);
    if ($cmp) {
     if ($tobool$i$i46) {
      $conv$i$i54 = $19&255;
      $shr1$i$i55 = $conv$i$i54 >>> 1;
      $conv$i$i64 = $19&255;
      $shr1$i$i65 = $conv$i$i64 >>> 1;
      $cond$i57118 = $shr1$i$i55;$cond$i67 = $shr1$i$i65;
     } else {
      $21 = HEAP32[$__size_$i2$i62>>2]|0;
      $cond$i57118 = $21;$cond$i67 = $21;
     }
     $mul = $cond$i67 << 1;
     __THREW__ = 0;
     invoke_viii(385,($__buf|0),($mul|0),0);
     $22 = __THREW__; __THREW__ = 0;
     $23 = $22&1;
     if ($23) {
      label = 33;
      break;
     }
     $24 = HEAP8[$__buf>>0]|0;
     $and$i$i83 = $24 & 1;
     $tobool$i$i84 = ($and$i$i83<<24>>24)==(0);
     if ($tobool$i$i84) {
      $cond$i89 = 10;
     } else {
      $25 = HEAP32[$__buf>>2]|0;
      $and$i1$i86 = $25 & -2;
      $phitmp$i87 = (($and$i1$i86) + -1)|0;
      $cond$i89 = $phitmp$i87;
     }
     __THREW__ = 0;
     invoke_viii(385,($__buf|0),($cond$i89|0),0);
     $26 = __THREW__; __THREW__ = 0;
     $27 = $26&1;
     if ($27) {
      label = 33;
      break;
     }
     $28 = HEAP8[$__buf>>0]|0;
     $and$i$i$i93 = $28 & 1;
     $tobool$i$i$i94 = ($and$i$i$i93<<24>>24)==(0);
     if ($tobool$i$i$i94) {
      $cond$i$i100 = $arrayidx$i$i$i98$pre$phiZZZZ2D;
     } else {
      $29 = HEAP32[$__data_$i$i$i95$pre$phiZZZZ2D>>2]|0;
      $cond$i$i100 = $29;
     }
     $add$ptr = (($cond$i$i100) + ($cond$i57118)|0);
     HEAP32[$__a_end>>2] = $add$ptr;
     $__a$1 = $cond$i$i100;
    } else {
     $__a$1 = $__a$0;
    }
    $__ninp_$i$i103 = (($11) + 12|0);
    $34 = HEAP32[$__ninp_$i$i103>>2]|0;
    $__einp_$i$i104 = (($11) + 16|0);
    $35 = HEAP32[$__einp_$i$i104>>2]|0;
    $cmp$i$i105 = ($34|0)==($35|0);
    if ($cmp$i$i105) {
     $vtable$i$i106 = HEAP32[$11>>2]|0;
     $vfn$i$i107 = (($vtable$i$i106) + 36|0);
     $36 = HEAP32[$vfn$i$i107>>2]|0;
     __THREW__ = 0;
     $call$i$i111 = (invoke_ii($36|0,($11|0))|0);
     $37 = __THREW__; __THREW__ = 0;
     $38 = $37&1;
     if ($38) {
      label = 33;
      break;
     } else {
      $retval$0$i$i = $call$i$i111;
     }
    } else {
     $39 = HEAP8[$34>>0]|0;
     $conv$i$i$i = $39&255;
     $retval$0$i$i = $conv$i$i$i;
    }
    $conv$i = $retval$0$i$i&255;
    $call20 = (__ZNSt3__19__num_getIcE19__stage2_float_loopEcRbRcPcRS4_ccRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSE_RjS4_($conv$i,$__in_units,$__exp,$__a$1,$__a_end,$4,$5,$__grouping,$__g,$__g_end,$__dc,$__atoms)|0);
    $tobool = ($call20|0)==(0);
    if (!($tobool)) {
     $$pre$i12$i$i = $66;$__a$2 = $__a$1;
     break;
    }
    $40 = HEAP32[$__ninp_$i$i103>>2]|0;
    $41 = HEAP32[$__einp_$i$i104>>2]|0;
    $cmp$i$i79 = ($40|0)==($41|0);
    if ($cmp$i$i79) {
     $vtable$i$i = HEAP32[$11>>2]|0;
     $vfn$i$i = (($vtable$i$i) + 40|0);
     $42 = HEAP32[$vfn$i$i>>2]|0;
     __THREW__ = 0;
     (invoke_ii($42|0,($11|0))|0);
     $43 = __THREW__; __THREW__ = 0;
     $44 = $43&1;
     if ($44) {
      label = 33;
      break;
     } else {
      $$pre$i$i$i20 = $11;$__a$0 = $__a$1;
      continue;
     }
    } else {
     $incdec$ptr$i$i = (($40) + 1|0);
     HEAP32[$__ninp_$i$i103>>2] = $incdec$ptr$i$i;
     $$pre$i$i$i20 = $11;$__a$0 = $__a$1;
     continue;
    }
   }
   if ((label|0) == 33) {
    $30 = ___cxa_find_matching_catch()|0;
    $31 = tempRet0;
    $lpad$phi$index = $30;$lpad$phi$index2 = $31;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
    ___resumeException($lpad$phi$index|0);
    // unreachable;
   }
   $45 = HEAP8[$__grouping>>0]|0;
   $and$i$i70 = $45 & 1;
   $tobool$i$i71 = ($and$i$i70<<24>>24)==(0);
   if ($tobool$i$i71) {
    $conv$i$i74 = $45&255;
    $shr1$i$i75 = $conv$i$i74 >>> 1;
    $cond$i77 = $shr1$i$i75;
   } else {
    $__size_$i2$i72 = (($__grouping) + 4|0);
    $46 = HEAP32[$__size_$i2$i72>>2]|0;
    $cond$i77 = $46;
   }
   $cmp26 = ($cond$i77|0)==(0);
   if (!($cmp26)) {
    $47 = HEAP8[$__in_units>>0]|0;
    $tobool27 = ($47<<24>>24)==(0);
    if (!($tobool27)) {
     $48 = HEAP32[$__g_end>>2]|0;
     $sub$ptr$lhs$cast30 = $48;
     $sub$ptr$rhs$cast31 = $__g;
     $sub$ptr$sub32 = (($sub$ptr$lhs$cast30) - ($sub$ptr$rhs$cast31))|0;
     $cmp33 = ($sub$ptr$sub32|0)<(160);
     if ($cmp33) {
      $49 = HEAP32[$__dc>>2]|0;
      $incdec$ptr = (($48) + 4|0);
      HEAP32[$__g_end>>2] = $incdec$ptr;
      HEAP32[$48>>2] = $49;
     }
    }
   }
   $50 = HEAP32[$__a_end>>2]|0;
   __THREW__ = 0;
   $call37 = (+invoke_diii(392,($__a$2|0),($50|0),($__err|0)));
   $51 = __THREW__; __THREW__ = 0;
   $52 = $51&1;
   if (!($52)) {
    HEAPF32[$__v>>2] = $call37;
    $53 = HEAP32[$__g_end>>2]|0;
    __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping,$__g,$53,$__err);
    $tobool$i$i$i = ($11|0)==(0|0);
    if ($tobool$i$i$i) {
     $59 = 0;
    } else {
     $__ninp_$i$i$i$i = (($11) + 12|0);
     $54 = HEAP32[$__ninp_$i$i$i$i>>2]|0;
     $__einp_$i$i$i$i = (($11) + 16|0);
     $55 = HEAP32[$__einp_$i$i$i$i>>2]|0;
     $cmp$i$i$i$i = ($54|0)==($55|0);
     if ($cmp$i$i$i$i) {
      $vtable$i$i$i$i = HEAP32[$11>>2]|0;
      $vfn$i$i$i$i = (($vtable$i$i$i$i) + 36|0);
      $56 = HEAP32[$vfn$i$i$i$i>>2]|0;
      __THREW__ = 0;
      $call$i$i$i$i7 = (invoke_ii($56|0,($11|0))|0);
      $57 = __THREW__; __THREW__ = 0;
      $58 = $57&1;
      if ($58) {
       break;
      }
      $cmp$i1$i$i$i = ($call$i$i$i$i7|0)==(-1);
      if ($cmp$i1$i$i$i) {
       HEAP32[$__b>>2] = 0;
       $59 = 0;
      } else {
       $59 = $11;
      }
     } else {
      $59 = $11;
     }
    }
    $cmp$i$i$i = ($59|0)==(0|0);
    $tobool$i2$i$i = ($$pre$i12$i$i|0)==(0|0);
    do {
     if ($tobool$i2$i$i) {
      label = 62;
     } else {
      $__ninp_$i$i3$i$i = (($$pre$i12$i$i) + 12|0);
      $60 = HEAP32[$__ninp_$i$i3$i$i>>2]|0;
      $__einp_$i$i4$i$i = (($$pre$i12$i$i) + 16|0);
      $61 = HEAP32[$__einp_$i$i4$i$i>>2]|0;
      $cmp$i$i5$i$i = ($60|0)==($61|0);
      if (!($cmp$i$i5$i$i)) {
       if (!($cmp$i$i$i)) {
        break;
       }
       HEAP32[$agg$result>>2] = $59;
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
       STACKTOP = sp;return;
      }
      $vtable$i$i7$i$i = HEAP32[$$pre$i12$i$i>>2]|0;
      $vfn$i$i8$i$i = (($vtable$i$i7$i$i) + 36|0);
      $62 = HEAP32[$vfn$i$i8$i$i>>2]|0;
      __THREW__ = 0;
      $call$i$i9$i$i8 = (invoke_ii($62|0,($$pre$i12$i$i|0))|0);
      $63 = __THREW__; __THREW__ = 0;
      $64 = $63&1;
      if ($64) {
       break L1;
      }
      $cmp$i1$i10$i$i = ($call$i$i9$i$i8|0)==(-1);
      if ($cmp$i1$i10$i$i) {
       HEAP32[$__e>>2] = 0;
       label = 62;
       break;
      }
      $cmp$i15$i$i = ($$pre$i12$i$i|0)==(0|0);
      $cmptmp$i$i = $cmp$i$i$i ^ $cmp$i15$i$i;
      if ($cmptmp$i$i) {
       HEAP32[$agg$result>>2] = $59;
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
       STACKTOP = sp;return;
      }
     }
    } while(0);
    if ((label|0) == 62) {
     if (!($cmp$i$i$i)) {
      HEAP32[$agg$result>>2] = $59;
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
      STACKTOP = sp;return;
     }
    }
    $65 = HEAP32[$__err>>2]|0;
    $or = $65 | 2;
    HEAP32[$__err>>2] = $or;
    HEAP32[$agg$result>>2] = $59;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
    STACKTOP = sp;return;
   }
  }
 } while(0);
 $32 = ___cxa_find_matching_catch()|0;
 $33 = tempRet0;
 $lpad$phi$index = $32;$lpad$phi$index2 = $33;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
 ___resumeException($lpad$phi$index|0);
 // unreachable;
}
function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRd($agg$result,$this,$__b,$__e,$__iob,$__err,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $0 = 0, $1 = 0, $agg$tmp = 0, $agg$tmp$byval_copy = 0, $agg$tmp2 = 0, $agg$tmp2$byval_copy = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $agg$tmp2$byval_copy = sp + 12|0;
 $agg$tmp$byval_copy = sp + 8|0;
 $agg$tmp = sp + 4|0;
 $agg$tmp2 = sp;
 $0 = HEAP32[$__b>>2]|0;
 HEAP32[$agg$tmp>>2] = $0;
 $1 = HEAP32[$__e>>2]|0;
 HEAP32[$agg$tmp2>>2] = $1;
 ;HEAP32[$agg$tmp$byval_copy+0>>2]=HEAP32[$agg$tmp+0>>2]|0;
 ;HEAP32[$agg$tmp2$byval_copy+0>>2]=HEAP32[$agg$tmp2+0>>2]|0;
 __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE23__do_get_floating_pointIdEES4_S4_S4_RNS_8ios_baseERjRT_($agg$result,0,$agg$tmp$byval_copy,$agg$tmp2$byval_copy,$__iob,$__err,$__v);
 STACKTOP = sp;return;
}
function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE23__do_get_floating_pointIdEES4_S4_S4_RNS_8ios_baseERjRT_($agg$result,$this,$__b,$__e,$__iob,$__err,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$pre = 0, $$pre$i$i$i20 = 0, $$pre$i12$i$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $7 = 0, $8 = 0, $9 = 0, $__a$0 = 0, $__a$1 = 0, $__a$2 = 0, $__a_end = 0, $__atoms = 0, $__buf = 0, $__data_$i$i$i = 0, $__data_$i$i$i95$pre = 0, $__data_$i$i$i95$pre$phiZZZZ2D = 0, $__dc = 0;
 var $__decimal_point = 0, $__einp_$i$i$i$i = 0, $__einp_$i$i$i$i13 = 0, $__einp_$i$i104 = 0, $__einp_$i$i4$i$i = 0, $__einp_$i$i4$i$i28 = 0, $__exp = 0, $__g = 0, $__g_end = 0, $__grouping = 0, $__in_units = 0, $__ninp_$i$i$i$i = 0, $__ninp_$i$i$i$i12 = 0, $__ninp_$i$i103 = 0, $__ninp_$i$i3$i$i = 0, $__ninp_$i$i3$i$i27 = 0, $__size_$i2$i62 = 0, $__size_$i2$i72 = 0, $__thousands_sep = 0, $add$ptr = 0;
 var $and$i$i$i = 0, $and$i$i$i93 = 0, $and$i$i45 = 0, $and$i$i70 = 0, $and$i$i83 = 0, $and$i1$i86 = 0, $arrayidx$i$i$i = 0, $arrayidx$i$i$i98$pre = 0, $arrayidx$i$i$i98$pre$phiZZZZ2D = 0, $call$i$i$i$i41 = 0, $call$i$i$i$i7 = 0, $call$i$i111 = 0, $call$i$i9$i$i43 = 0, $call$i$i9$i$i8 = 0, $call20 = 0, $call37 = 0.0, $cmp = 0, $cmp$i$i$i = 0, $cmp$i$i$i$i = 0, $cmp$i$i$i$i14 = 0;
 var $cmp$i$i$i23 = 0, $cmp$i$i105 = 0, $cmp$i$i5$i$i = 0, $cmp$i$i5$i$i29 = 0, $cmp$i$i79 = 0, $cmp$i1$i$i$i = 0, $cmp$i1$i$i$i18 = 0, $cmp$i1$i10$i$i = 0, $cmp$i1$i10$i$i33 = 0, $cmp$i15$i$i = 0, $cmp26 = 0, $cmp33 = 0, $cmptmp$i$i = 0, $cond$i$i = 0, $cond$i$i100 = 0, $cond$i48 = 0, $cond$i57118 = 0, $cond$i67 = 0, $cond$i77 = 0, $cond$i89 = 0;
 var $conv$i = 0, $conv$i$i = 0, $conv$i$i$i = 0, $conv$i$i54 = 0, $conv$i$i64 = 0, $conv$i$i74 = 0, $incdec$ptr = 0, $incdec$ptr$i$i = 0, $lpad$phi$index = 0, $lpad$phi$index2 = 0, $mul = 0, $or = 0, $phitmp$i87 = 0, $retval$0$i$i = 0, $shr1$i$i = 0, $shr1$i$i55 = 0, $shr1$i$i65 = 0, $shr1$i$i75 = 0, $sub$ptr$lhs$cast = 0, $sub$ptr$lhs$cast30 = 0;
 var $sub$ptr$rhs$cast = 0, $sub$ptr$rhs$cast31 = 0, $sub$ptr$sub = 0, $sub$ptr$sub32 = 0, $tobool = 0, $tobool$i$i$i = 0, $tobool$i$i$i11 = 0, $tobool$i$i$i9 = 0, $tobool$i$i$i94 = 0, $tobool$i$i46 = 0, $tobool$i$i71 = 0, $tobool$i$i84 = 0, $tobool$i2$i$i = 0, $tobool$i2$i$i25 = 0, $tobool27 = 0, $vfn$i$i = 0, $vfn$i$i$i$i = 0, $vfn$i$i$i$i17 = 0, $vfn$i$i107 = 0, $vfn$i$i8$i$i = 0;
 var $vfn$i$i8$i$i32 = 0, $vtable$i$i = 0, $vtable$i$i$i$i = 0, $vtable$i$i$i$i16 = 0, $vtable$i$i106 = 0, $vtable$i$i7$i$i = 0, $vtable$i$i7$i$i31 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 256|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__atoms = sp + 208|0;
 $__decimal_point = sp + 200|0;
 $__thousands_sep = sp + 240|0;
 $__grouping = sp;
 $__buf = sp + 188|0;
 $__a_end = sp + 184|0;
 $__g = sp + 16|0;
 $__g_end = sp + 176|0;
 $__dc = sp + 180|0;
 $__in_units = sp + 241|0;
 $__exp = sp + 242|0;
 __ZNSt3__19__num_getIcE19__stage2_float_prepERNS_8ios_baseEPcRcS5_($__grouping,$__iob,$__atoms,$__decimal_point,$__thousands_sep);
 ;HEAP32[$__buf+0>>2]=0|0;HEAP32[$__buf+4>>2]=0|0;HEAP32[$__buf+8>>2]=0|0;
 __THREW__ = 0;
 invoke_viii(385,($__buf|0),10,0);
 $0 = __THREW__; __THREW__ = 0;
 $1 = $0&1;
 L1: do {
  if (!($1)) {
   $2 = HEAP8[$__buf>>0]|0;
   $and$i$i$i = $2 & 1;
   $tobool$i$i$i9 = ($and$i$i$i<<24>>24)==(0);
   if ($tobool$i$i$i9) {
    $arrayidx$i$i$i = (($__buf) + 1|0);
    $__data_$i$i$i95$pre = (($__buf) + 8|0);
    $__data_$i$i$i95$pre$phiZZZZ2D = $__data_$i$i$i95$pre;$arrayidx$i$i$i98$pre$phiZZZZ2D = $arrayidx$i$i$i;$cond$i$i = $arrayidx$i$i$i;
   } else {
    $__data_$i$i$i = (($__buf) + 8|0);
    $3 = HEAP32[$__data_$i$i$i>>2]|0;
    $arrayidx$i$i$i98$pre = (($__buf) + 1|0);
    $__data_$i$i$i95$pre$phiZZZZ2D = $__data_$i$i$i;$arrayidx$i$i$i98$pre$phiZZZZ2D = $arrayidx$i$i$i98$pre;$cond$i$i = $3;
   }
   HEAP32[$__a_end>>2] = $cond$i$i;
   HEAP32[$__g_end>>2] = $__g;
   HEAP32[$__dc>>2] = 0;
   HEAP8[$__in_units>>0] = 1;
   HEAP8[$__exp>>0] = 69;
   $__size_$i2$i62 = (($__buf) + 4|0);
   $4 = HEAP8[$__decimal_point>>0]|0;
   $5 = HEAP8[$__thousands_sep>>0]|0;
   $$pre = HEAP32[$__b>>2]|0;
   $$pre$i$i$i20 = $$pre;$__a$0 = $cond$i$i;
   L7: while(1) {
    $tobool$i$i$i11 = ($$pre$i$i$i20|0)==(0|0);
    if ($tobool$i$i$i11) {
     $11 = 0;
    } else {
     $__ninp_$i$i$i$i12 = (($$pre$i$i$i20) + 12|0);
     $6 = HEAP32[$__ninp_$i$i$i$i12>>2]|0;
     $__einp_$i$i$i$i13 = (($$pre$i$i$i20) + 16|0);
     $7 = HEAP32[$__einp_$i$i$i$i13>>2]|0;
     $cmp$i$i$i$i14 = ($6|0)==($7|0);
     if ($cmp$i$i$i$i14) {
      $vtable$i$i$i$i16 = HEAP32[$$pre$i$i$i20>>2]|0;
      $vfn$i$i$i$i17 = (($vtable$i$i$i$i16) + 36|0);
      $8 = HEAP32[$vfn$i$i$i$i17>>2]|0;
      __THREW__ = 0;
      $call$i$i$i$i41 = (invoke_ii($8|0,($$pre$i$i$i20|0))|0);
      $9 = __THREW__; __THREW__ = 0;
      $10 = $9&1;
      if ($10) {
       label = 33;
       break;
      }
      $cmp$i1$i$i$i18 = ($call$i$i$i$i41|0)==(-1);
      if ($cmp$i1$i$i$i18) {
       HEAP32[$__b>>2] = 0;
       $11 = 0;
      } else {
       $11 = $$pre$i$i$i20;
      }
     } else {
      $11 = $$pre$i$i$i20;
     }
    }
    $cmp$i$i$i23 = ($11|0)==(0|0);
    $12 = HEAP32[$__e>>2]|0;
    $tobool$i2$i$i25 = ($12|0)==(0|0);
    do {
     if ($tobool$i2$i$i25) {
      label = 17;
     } else {
      $__ninp_$i$i3$i$i27 = (($12) + 12|0);
      $13 = HEAP32[$__ninp_$i$i3$i$i27>>2]|0;
      $__einp_$i$i4$i$i28 = (($12) + 16|0);
      $14 = HEAP32[$__einp_$i$i4$i$i28>>2]|0;
      $cmp$i$i5$i$i29 = ($13|0)==($14|0);
      if (!($cmp$i$i5$i$i29)) {
       if ($cmp$i$i$i23) {
        $66 = $12;
        break;
       } else {
        $$pre$i12$i$i = $12;$__a$2 = $__a$0;
        break L7;
       }
      }
      $vtable$i$i7$i$i31 = HEAP32[$12>>2]|0;
      $vfn$i$i8$i$i32 = (($vtable$i$i7$i$i31) + 36|0);
      $15 = HEAP32[$vfn$i$i8$i$i32>>2]|0;
      __THREW__ = 0;
      $call$i$i9$i$i43 = (invoke_ii($15|0,($12|0))|0);
      $16 = __THREW__; __THREW__ = 0;
      $17 = $16&1;
      if ($17) {
       label = 33;
       break L7;
      }
      $cmp$i1$i10$i$i33 = ($call$i$i9$i$i43|0)==(-1);
      if ($cmp$i1$i10$i$i33) {
       HEAP32[$__e>>2] = 0;
       label = 17;
       break;
      } else {
       if ($cmp$i$i$i23) {
        $66 = $12;
        break;
       } else {
        $$pre$i12$i$i = $12;$__a$2 = $__a$0;
        break L7;
       }
      }
     }
    } while(0);
    if ((label|0) == 17) {
     label = 0;
     if ($cmp$i$i$i23) {
      $$pre$i12$i$i = 0;$__a$2 = $__a$0;
      break;
     } else {
      $66 = 0;
     }
    }
    $18 = HEAP32[$__a_end>>2]|0;
    $sub$ptr$lhs$cast = $18;
    $sub$ptr$rhs$cast = $__a$0;
    $sub$ptr$sub = (($sub$ptr$lhs$cast) - ($sub$ptr$rhs$cast))|0;
    $19 = HEAP8[$__buf>>0]|0;
    $and$i$i45 = $19 & 1;
    $tobool$i$i46 = ($and$i$i45<<24>>24)==(0);
    if ($tobool$i$i46) {
     $conv$i$i = $19&255;
     $shr1$i$i = $conv$i$i >>> 1;
     $cond$i48 = $shr1$i$i;
    } else {
     $20 = HEAP32[$__size_$i2$i62>>2]|0;
     $cond$i48 = $20;
    }
    $cmp = ($sub$ptr$sub|0)==($cond$i48|0);
    if ($cmp) {
     if ($tobool$i$i46) {
      $conv$i$i54 = $19&255;
      $shr1$i$i55 = $conv$i$i54 >>> 1;
      $conv$i$i64 = $19&255;
      $shr1$i$i65 = $conv$i$i64 >>> 1;
      $cond$i57118 = $shr1$i$i55;$cond$i67 = $shr1$i$i65;
     } else {
      $21 = HEAP32[$__size_$i2$i62>>2]|0;
      $cond$i57118 = $21;$cond$i67 = $21;
     }
     $mul = $cond$i67 << 1;
     __THREW__ = 0;
     invoke_viii(385,($__buf|0),($mul|0),0);
     $22 = __THREW__; __THREW__ = 0;
     $23 = $22&1;
     if ($23) {
      label = 33;
      break;
     }
     $24 = HEAP8[$__buf>>0]|0;
     $and$i$i83 = $24 & 1;
     $tobool$i$i84 = ($and$i$i83<<24>>24)==(0);
     if ($tobool$i$i84) {
      $cond$i89 = 10;
     } else {
      $25 = HEAP32[$__buf>>2]|0;
      $and$i1$i86 = $25 & -2;
      $phitmp$i87 = (($and$i1$i86) + -1)|0;
      $cond$i89 = $phitmp$i87;
     }
     __THREW__ = 0;
     invoke_viii(385,($__buf|0),($cond$i89|0),0);
     $26 = __THREW__; __THREW__ = 0;
     $27 = $26&1;
     if ($27) {
      label = 33;
      break;
     }
     $28 = HEAP8[$__buf>>0]|0;
     $and$i$i$i93 = $28 & 1;
     $tobool$i$i$i94 = ($and$i$i$i93<<24>>24)==(0);
     if ($tobool$i$i$i94) {
      $cond$i$i100 = $arrayidx$i$i$i98$pre$phiZZZZ2D;
     } else {
      $29 = HEAP32[$__data_$i$i$i95$pre$phiZZZZ2D>>2]|0;
      $cond$i$i100 = $29;
     }
     $add$ptr = (($cond$i$i100) + ($cond$i57118)|0);
     HEAP32[$__a_end>>2] = $add$ptr;
     $__a$1 = $cond$i$i100;
    } else {
     $__a$1 = $__a$0;
    }
    $__ninp_$i$i103 = (($11) + 12|0);
    $34 = HEAP32[$__ninp_$i$i103>>2]|0;
    $__einp_$i$i104 = (($11) + 16|0);
    $35 = HEAP32[$__einp_$i$i104>>2]|0;
    $cmp$i$i105 = ($34|0)==($35|0);
    if ($cmp$i$i105) {
     $vtable$i$i106 = HEAP32[$11>>2]|0;
     $vfn$i$i107 = (($vtable$i$i106) + 36|0);
     $36 = HEAP32[$vfn$i$i107>>2]|0;
     __THREW__ = 0;
     $call$i$i111 = (invoke_ii($36|0,($11|0))|0);
     $37 = __THREW__; __THREW__ = 0;
     $38 = $37&1;
     if ($38) {
      label = 33;
      break;
     } else {
      $retval$0$i$i = $call$i$i111;
     }
    } else {
     $39 = HEAP8[$34>>0]|0;
     $conv$i$i$i = $39&255;
     $retval$0$i$i = $conv$i$i$i;
    }
    $conv$i = $retval$0$i$i&255;
    $call20 = (__ZNSt3__19__num_getIcE19__stage2_float_loopEcRbRcPcRS4_ccRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSE_RjS4_($conv$i,$__in_units,$__exp,$__a$1,$__a_end,$4,$5,$__grouping,$__g,$__g_end,$__dc,$__atoms)|0);
    $tobool = ($call20|0)==(0);
    if (!($tobool)) {
     $$pre$i12$i$i = $66;$__a$2 = $__a$1;
     break;
    }
    $40 = HEAP32[$__ninp_$i$i103>>2]|0;
    $41 = HEAP32[$__einp_$i$i104>>2]|0;
    $cmp$i$i79 = ($40|0)==($41|0);
    if ($cmp$i$i79) {
     $vtable$i$i = HEAP32[$11>>2]|0;
     $vfn$i$i = (($vtable$i$i) + 40|0);
     $42 = HEAP32[$vfn$i$i>>2]|0;
     __THREW__ = 0;
     (invoke_ii($42|0,($11|0))|0);
     $43 = __THREW__; __THREW__ = 0;
     $44 = $43&1;
     if ($44) {
      label = 33;
      break;
     } else {
      $$pre$i$i$i20 = $11;$__a$0 = $__a$1;
      continue;
     }
    } else {
     $incdec$ptr$i$i = (($40) + 1|0);
     HEAP32[$__ninp_$i$i103>>2] = $incdec$ptr$i$i;
     $$pre$i$i$i20 = $11;$__a$0 = $__a$1;
     continue;
    }
   }
   if ((label|0) == 33) {
    $30 = ___cxa_find_matching_catch()|0;
    $31 = tempRet0;
    $lpad$phi$index = $30;$lpad$phi$index2 = $31;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
    ___resumeException($lpad$phi$index|0);
    // unreachable;
   }
   $45 = HEAP8[$__grouping>>0]|0;
   $and$i$i70 = $45 & 1;
   $tobool$i$i71 = ($and$i$i70<<24>>24)==(0);
   if ($tobool$i$i71) {
    $conv$i$i74 = $45&255;
    $shr1$i$i75 = $conv$i$i74 >>> 1;
    $cond$i77 = $shr1$i$i75;
   } else {
    $__size_$i2$i72 = (($__grouping) + 4|0);
    $46 = HEAP32[$__size_$i2$i72>>2]|0;
    $cond$i77 = $46;
   }
   $cmp26 = ($cond$i77|0)==(0);
   if (!($cmp26)) {
    $47 = HEAP8[$__in_units>>0]|0;
    $tobool27 = ($47<<24>>24)==(0);
    if (!($tobool27)) {
     $48 = HEAP32[$__g_end>>2]|0;
     $sub$ptr$lhs$cast30 = $48;
     $sub$ptr$rhs$cast31 = $__g;
     $sub$ptr$sub32 = (($sub$ptr$lhs$cast30) - ($sub$ptr$rhs$cast31))|0;
     $cmp33 = ($sub$ptr$sub32|0)<(160);
     if ($cmp33) {
      $49 = HEAP32[$__dc>>2]|0;
      $incdec$ptr = (($48) + 4|0);
      HEAP32[$__g_end>>2] = $incdec$ptr;
      HEAP32[$48>>2] = $49;
     }
    }
   }
   $50 = HEAP32[$__a_end>>2]|0;
   __THREW__ = 0;
   $call37 = (+invoke_diii(393,($__a$2|0),($50|0),($__err|0)));
   $51 = __THREW__; __THREW__ = 0;
   $52 = $51&1;
   if (!($52)) {
    HEAPF64[$__v>>3] = $call37;
    $53 = HEAP32[$__g_end>>2]|0;
    __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping,$__g,$53,$__err);
    $tobool$i$i$i = ($11|0)==(0|0);
    if ($tobool$i$i$i) {
     $59 = 0;
    } else {
     $__ninp_$i$i$i$i = (($11) + 12|0);
     $54 = HEAP32[$__ninp_$i$i$i$i>>2]|0;
     $__einp_$i$i$i$i = (($11) + 16|0);
     $55 = HEAP32[$__einp_$i$i$i$i>>2]|0;
     $cmp$i$i$i$i = ($54|0)==($55|0);
     if ($cmp$i$i$i$i) {
      $vtable$i$i$i$i = HEAP32[$11>>2]|0;
      $vfn$i$i$i$i = (($vtable$i$i$i$i) + 36|0);
      $56 = HEAP32[$vfn$i$i$i$i>>2]|0;
      __THREW__ = 0;
      $call$i$i$i$i7 = (invoke_ii($56|0,($11|0))|0);
      $57 = __THREW__; __THREW__ = 0;
      $58 = $57&1;
      if ($58) {
       break;
      }
      $cmp$i1$i$i$i = ($call$i$i$i$i7|0)==(-1);
      if ($cmp$i1$i$i$i) {
       HEAP32[$__b>>2] = 0;
       $59 = 0;
      } else {
       $59 = $11;
      }
     } else {
      $59 = $11;
     }
    }
    $cmp$i$i$i = ($59|0)==(0|0);
    $tobool$i2$i$i = ($$pre$i12$i$i|0)==(0|0);
    do {
     if ($tobool$i2$i$i) {
      label = 62;
     } else {
      $__ninp_$i$i3$i$i = (($$pre$i12$i$i) + 12|0);
      $60 = HEAP32[$__ninp_$i$i3$i$i>>2]|0;
      $__einp_$i$i4$i$i = (($$pre$i12$i$i) + 16|0);
      $61 = HEAP32[$__einp_$i$i4$i$i>>2]|0;
      $cmp$i$i5$i$i = ($60|0)==($61|0);
      if (!($cmp$i$i5$i$i)) {
       if (!($cmp$i$i$i)) {
        break;
       }
       HEAP32[$agg$result>>2] = $59;
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
       STACKTOP = sp;return;
      }
      $vtable$i$i7$i$i = HEAP32[$$pre$i12$i$i>>2]|0;
      $vfn$i$i8$i$i = (($vtable$i$i7$i$i) + 36|0);
      $62 = HEAP32[$vfn$i$i8$i$i>>2]|0;
      __THREW__ = 0;
      $call$i$i9$i$i8 = (invoke_ii($62|0,($$pre$i12$i$i|0))|0);
      $63 = __THREW__; __THREW__ = 0;
      $64 = $63&1;
      if ($64) {
       break L1;
      }
      $cmp$i1$i10$i$i = ($call$i$i9$i$i8|0)==(-1);
      if ($cmp$i1$i10$i$i) {
       HEAP32[$__e>>2] = 0;
       label = 62;
       break;
      }
      $cmp$i15$i$i = ($$pre$i12$i$i|0)==(0|0);
      $cmptmp$i$i = $cmp$i$i$i ^ $cmp$i15$i$i;
      if ($cmptmp$i$i) {
       HEAP32[$agg$result>>2] = $59;
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
       STACKTOP = sp;return;
      }
     }
    } while(0);
    if ((label|0) == 62) {
     if (!($cmp$i$i$i)) {
      HEAP32[$agg$result>>2] = $59;
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
      STACKTOP = sp;return;
     }
    }
    $65 = HEAP32[$__err>>2]|0;
    $or = $65 | 2;
    HEAP32[$__err>>2] = $or;
    HEAP32[$agg$result>>2] = $59;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
    STACKTOP = sp;return;
   }
  }
 } while(0);
 $32 = ___cxa_find_matching_catch()|0;
 $33 = tempRet0;
 $lpad$phi$index = $32;$lpad$phi$index2 = $33;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
 ___resumeException($lpad$phi$index|0);
 // unreachable;
}
function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRe($agg$result,$this,$__b,$__e,$__iob,$__err,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $0 = 0, $1 = 0, $agg$tmp = 0, $agg$tmp$byval_copy = 0, $agg$tmp2 = 0, $agg$tmp2$byval_copy = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $agg$tmp2$byval_copy = sp + 12|0;
 $agg$tmp$byval_copy = sp + 8|0;
 $agg$tmp = sp + 4|0;
 $agg$tmp2 = sp;
 $0 = HEAP32[$__b>>2]|0;
 HEAP32[$agg$tmp>>2] = $0;
 $1 = HEAP32[$__e>>2]|0;
 HEAP32[$agg$tmp2>>2] = $1;
 ;HEAP32[$agg$tmp$byval_copy+0>>2]=HEAP32[$agg$tmp+0>>2]|0;
 ;HEAP32[$agg$tmp2$byval_copy+0>>2]=HEAP32[$agg$tmp2+0>>2]|0;
 __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE23__do_get_floating_pointIeEES4_S4_S4_RNS_8ios_baseERjRT_($agg$result,0,$agg$tmp$byval_copy,$agg$tmp2$byval_copy,$__iob,$__err,$__v);
 STACKTOP = sp;return;
}
function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE23__do_get_floating_pointIeEES4_S4_S4_RNS_8ios_baseERjRT_($agg$result,$this,$__b,$__e,$__iob,$__err,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$pre = 0, $$pre$i$i$i20 = 0, $$pre$i12$i$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $7 = 0, $8 = 0, $9 = 0, $__a$0 = 0, $__a$1 = 0, $__a$2 = 0, $__a_end = 0, $__atoms = 0, $__buf = 0, $__data_$i$i$i = 0, $__data_$i$i$i95$pre = 0, $__data_$i$i$i95$pre$phiZZZZ2D = 0, $__dc = 0;
 var $__decimal_point = 0, $__einp_$i$i$i$i = 0, $__einp_$i$i$i$i13 = 0, $__einp_$i$i104 = 0, $__einp_$i$i4$i$i = 0, $__einp_$i$i4$i$i28 = 0, $__exp = 0, $__g = 0, $__g_end = 0, $__grouping = 0, $__in_units = 0, $__ninp_$i$i$i$i = 0, $__ninp_$i$i$i$i12 = 0, $__ninp_$i$i103 = 0, $__ninp_$i$i3$i$i = 0, $__ninp_$i$i3$i$i27 = 0, $__size_$i2$i62 = 0, $__size_$i2$i72 = 0, $__thousands_sep = 0, $add$ptr = 0;
 var $and$i$i$i = 0, $and$i$i$i93 = 0, $and$i$i45 = 0, $and$i$i70 = 0, $and$i$i83 = 0, $and$i1$i86 = 0, $arrayidx$i$i$i = 0, $arrayidx$i$i$i98$pre = 0, $arrayidx$i$i$i98$pre$phiZZZZ2D = 0, $call$i$i$i$i41 = 0, $call$i$i$i$i7 = 0, $call$i$i111 = 0, $call$i$i9$i$i43 = 0, $call$i$i9$i$i8 = 0, $call20 = 0, $call37 = 0.0, $cmp = 0, $cmp$i$i$i = 0, $cmp$i$i$i$i = 0, $cmp$i$i$i$i14 = 0;
 var $cmp$i$i$i23 = 0, $cmp$i$i105 = 0, $cmp$i$i5$i$i = 0, $cmp$i$i5$i$i29 = 0, $cmp$i$i79 = 0, $cmp$i1$i$i$i = 0, $cmp$i1$i$i$i18 = 0, $cmp$i1$i10$i$i = 0, $cmp$i1$i10$i$i33 = 0, $cmp$i15$i$i = 0, $cmp26 = 0, $cmp33 = 0, $cmptmp$i$i = 0, $cond$i$i = 0, $cond$i$i100 = 0, $cond$i48 = 0, $cond$i57118 = 0, $cond$i67 = 0, $cond$i77 = 0, $cond$i89 = 0;
 var $conv$i = 0, $conv$i$i = 0, $conv$i$i$i = 0, $conv$i$i54 = 0, $conv$i$i64 = 0, $conv$i$i74 = 0, $incdec$ptr = 0, $incdec$ptr$i$i = 0, $lpad$phi$index = 0, $lpad$phi$index2 = 0, $mul = 0, $or = 0, $phitmp$i87 = 0, $retval$0$i$i = 0, $shr1$i$i = 0, $shr1$i$i55 = 0, $shr1$i$i65 = 0, $shr1$i$i75 = 0, $sub$ptr$lhs$cast = 0, $sub$ptr$lhs$cast30 = 0;
 var $sub$ptr$rhs$cast = 0, $sub$ptr$rhs$cast31 = 0, $sub$ptr$sub = 0, $sub$ptr$sub32 = 0, $tobool = 0, $tobool$i$i$i = 0, $tobool$i$i$i11 = 0, $tobool$i$i$i9 = 0, $tobool$i$i$i94 = 0, $tobool$i$i46 = 0, $tobool$i$i71 = 0, $tobool$i$i84 = 0, $tobool$i2$i$i = 0, $tobool$i2$i$i25 = 0, $tobool27 = 0, $vfn$i$i = 0, $vfn$i$i$i$i = 0, $vfn$i$i$i$i17 = 0, $vfn$i$i107 = 0, $vfn$i$i8$i$i = 0;
 var $vfn$i$i8$i$i32 = 0, $vtable$i$i = 0, $vtable$i$i$i$i = 0, $vtable$i$i$i$i16 = 0, $vtable$i$i106 = 0, $vtable$i$i7$i$i = 0, $vtable$i$i7$i$i31 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 256|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__atoms = sp + 208|0;
 $__decimal_point = sp + 200|0;
 $__thousands_sep = sp + 240|0;
 $__grouping = sp;
 $__buf = sp + 188|0;
 $__a_end = sp + 184|0;
 $__g = sp + 16|0;
 $__g_end = sp + 176|0;
 $__dc = sp + 180|0;
 $__in_units = sp + 241|0;
 $__exp = sp + 242|0;
 __ZNSt3__19__num_getIcE19__stage2_float_prepERNS_8ios_baseEPcRcS5_($__grouping,$__iob,$__atoms,$__decimal_point,$__thousands_sep);
 ;HEAP32[$__buf+0>>2]=0|0;HEAP32[$__buf+4>>2]=0|0;HEAP32[$__buf+8>>2]=0|0;
 __THREW__ = 0;
 invoke_viii(385,($__buf|0),10,0);
 $0 = __THREW__; __THREW__ = 0;
 $1 = $0&1;
 L1: do {
  if (!($1)) {
   $2 = HEAP8[$__buf>>0]|0;
   $and$i$i$i = $2 & 1;
   $tobool$i$i$i9 = ($and$i$i$i<<24>>24)==(0);
   if ($tobool$i$i$i9) {
    $arrayidx$i$i$i = (($__buf) + 1|0);
    $__data_$i$i$i95$pre = (($__buf) + 8|0);
    $__data_$i$i$i95$pre$phiZZZZ2D = $__data_$i$i$i95$pre;$arrayidx$i$i$i98$pre$phiZZZZ2D = $arrayidx$i$i$i;$cond$i$i = $arrayidx$i$i$i;
   } else {
    $__data_$i$i$i = (($__buf) + 8|0);
    $3 = HEAP32[$__data_$i$i$i>>2]|0;
    $arrayidx$i$i$i98$pre = (($__buf) + 1|0);
    $__data_$i$i$i95$pre$phiZZZZ2D = $__data_$i$i$i;$arrayidx$i$i$i98$pre$phiZZZZ2D = $arrayidx$i$i$i98$pre;$cond$i$i = $3;
   }
   HEAP32[$__a_end>>2] = $cond$i$i;
   HEAP32[$__g_end>>2] = $__g;
   HEAP32[$__dc>>2] = 0;
   HEAP8[$__in_units>>0] = 1;
   HEAP8[$__exp>>0] = 69;
   $__size_$i2$i62 = (($__buf) + 4|0);
   $4 = HEAP8[$__decimal_point>>0]|0;
   $5 = HEAP8[$__thousands_sep>>0]|0;
   $$pre = HEAP32[$__b>>2]|0;
   $$pre$i$i$i20 = $$pre;$__a$0 = $cond$i$i;
   L7: while(1) {
    $tobool$i$i$i11 = ($$pre$i$i$i20|0)==(0|0);
    if ($tobool$i$i$i11) {
     $11 = 0;
    } else {
     $__ninp_$i$i$i$i12 = (($$pre$i$i$i20) + 12|0);
     $6 = HEAP32[$__ninp_$i$i$i$i12>>2]|0;
     $__einp_$i$i$i$i13 = (($$pre$i$i$i20) + 16|0);
     $7 = HEAP32[$__einp_$i$i$i$i13>>2]|0;
     $cmp$i$i$i$i14 = ($6|0)==($7|0);
     if ($cmp$i$i$i$i14) {
      $vtable$i$i$i$i16 = HEAP32[$$pre$i$i$i20>>2]|0;
      $vfn$i$i$i$i17 = (($vtable$i$i$i$i16) + 36|0);
      $8 = HEAP32[$vfn$i$i$i$i17>>2]|0;
      __THREW__ = 0;
      $call$i$i$i$i41 = (invoke_ii($8|0,($$pre$i$i$i20|0))|0);
      $9 = __THREW__; __THREW__ = 0;
      $10 = $9&1;
      if ($10) {
       label = 33;
       break;
      }
      $cmp$i1$i$i$i18 = ($call$i$i$i$i41|0)==(-1);
      if ($cmp$i1$i$i$i18) {
       HEAP32[$__b>>2] = 0;
       $11 = 0;
      } else {
       $11 = $$pre$i$i$i20;
      }
     } else {
      $11 = $$pre$i$i$i20;
     }
    }
    $cmp$i$i$i23 = ($11|0)==(0|0);
    $12 = HEAP32[$__e>>2]|0;
    $tobool$i2$i$i25 = ($12|0)==(0|0);
    do {
     if ($tobool$i2$i$i25) {
      label = 17;
     } else {
      $__ninp_$i$i3$i$i27 = (($12) + 12|0);
      $13 = HEAP32[$__ninp_$i$i3$i$i27>>2]|0;
      $__einp_$i$i4$i$i28 = (($12) + 16|0);
      $14 = HEAP32[$__einp_$i$i4$i$i28>>2]|0;
      $cmp$i$i5$i$i29 = ($13|0)==($14|0);
      if (!($cmp$i$i5$i$i29)) {
       if ($cmp$i$i$i23) {
        $66 = $12;
        break;
       } else {
        $$pre$i12$i$i = $12;$__a$2 = $__a$0;
        break L7;
       }
      }
      $vtable$i$i7$i$i31 = HEAP32[$12>>2]|0;
      $vfn$i$i8$i$i32 = (($vtable$i$i7$i$i31) + 36|0);
      $15 = HEAP32[$vfn$i$i8$i$i32>>2]|0;
      __THREW__ = 0;
      $call$i$i9$i$i43 = (invoke_ii($15|0,($12|0))|0);
      $16 = __THREW__; __THREW__ = 0;
      $17 = $16&1;
      if ($17) {
       label = 33;
       break L7;
      }
      $cmp$i1$i10$i$i33 = ($call$i$i9$i$i43|0)==(-1);
      if ($cmp$i1$i10$i$i33) {
       HEAP32[$__e>>2] = 0;
       label = 17;
       break;
      } else {
       if ($cmp$i$i$i23) {
        $66 = $12;
        break;
       } else {
        $$pre$i12$i$i = $12;$__a$2 = $__a$0;
        break L7;
       }
      }
     }
    } while(0);
    if ((label|0) == 17) {
     label = 0;
     if ($cmp$i$i$i23) {
      $$pre$i12$i$i = 0;$__a$2 = $__a$0;
      break;
     } else {
      $66 = 0;
     }
    }
    $18 = HEAP32[$__a_end>>2]|0;
    $sub$ptr$lhs$cast = $18;
    $sub$ptr$rhs$cast = $__a$0;
    $sub$ptr$sub = (($sub$ptr$lhs$cast) - ($sub$ptr$rhs$cast))|0;
    $19 = HEAP8[$__buf>>0]|0;
    $and$i$i45 = $19 & 1;
    $tobool$i$i46 = ($and$i$i45<<24>>24)==(0);
    if ($tobool$i$i46) {
     $conv$i$i = $19&255;
     $shr1$i$i = $conv$i$i >>> 1;
     $cond$i48 = $shr1$i$i;
    } else {
     $20 = HEAP32[$__size_$i2$i62>>2]|0;
     $cond$i48 = $20;
    }
    $cmp = ($sub$ptr$sub|0)==($cond$i48|0);
    if ($cmp) {
     if ($tobool$i$i46) {
      $conv$i$i54 = $19&255;
      $shr1$i$i55 = $conv$i$i54 >>> 1;
      $conv$i$i64 = $19&255;
      $shr1$i$i65 = $conv$i$i64 >>> 1;
      $cond$i57118 = $shr1$i$i55;$cond$i67 = $shr1$i$i65;
     } else {
      $21 = HEAP32[$__size_$i2$i62>>2]|0;
      $cond$i57118 = $21;$cond$i67 = $21;
     }
     $mul = $cond$i67 << 1;
     __THREW__ = 0;
     invoke_viii(385,($__buf|0),($mul|0),0);
     $22 = __THREW__; __THREW__ = 0;
     $23 = $22&1;
     if ($23) {
      label = 33;
      break;
     }
     $24 = HEAP8[$__buf>>0]|0;
     $and$i$i83 = $24 & 1;
     $tobool$i$i84 = ($and$i$i83<<24>>24)==(0);
     if ($tobool$i$i84) {
      $cond$i89 = 10;
     } else {
      $25 = HEAP32[$__buf>>2]|0;
      $and$i1$i86 = $25 & -2;
      $phitmp$i87 = (($and$i1$i86) + -1)|0;
      $cond$i89 = $phitmp$i87;
     }
     __THREW__ = 0;
     invoke_viii(385,($__buf|0),($cond$i89|0),0);
     $26 = __THREW__; __THREW__ = 0;
     $27 = $26&1;
     if ($27) {
      label = 33;
      break;
     }
     $28 = HEAP8[$__buf>>0]|0;
     $and$i$i$i93 = $28 & 1;
     $tobool$i$i$i94 = ($and$i$i$i93<<24>>24)==(0);
     if ($tobool$i$i$i94) {
      $cond$i$i100 = $arrayidx$i$i$i98$pre$phiZZZZ2D;
     } else {
      $29 = HEAP32[$__data_$i$i$i95$pre$phiZZZZ2D>>2]|0;
      $cond$i$i100 = $29;
     }
     $add$ptr = (($cond$i$i100) + ($cond$i57118)|0);
     HEAP32[$__a_end>>2] = $add$ptr;
     $__a$1 = $cond$i$i100;
    } else {
     $__a$1 = $__a$0;
    }
    $__ninp_$i$i103 = (($11) + 12|0);
    $34 = HEAP32[$__ninp_$i$i103>>2]|0;
    $__einp_$i$i104 = (($11) + 16|0);
    $35 = HEAP32[$__einp_$i$i104>>2]|0;
    $cmp$i$i105 = ($34|0)==($35|0);
    if ($cmp$i$i105) {
     $vtable$i$i106 = HEAP32[$11>>2]|0;
     $vfn$i$i107 = (($vtable$i$i106) + 36|0);
     $36 = HEAP32[$vfn$i$i107>>2]|0;
     __THREW__ = 0;
     $call$i$i111 = (invoke_ii($36|0,($11|0))|0);
     $37 = __THREW__; __THREW__ = 0;
     $38 = $37&1;
     if ($38) {
      label = 33;
      break;
     } else {
      $retval$0$i$i = $call$i$i111;
     }
    } else {
     $39 = HEAP8[$34>>0]|0;
     $conv$i$i$i = $39&255;
     $retval$0$i$i = $conv$i$i$i;
    }
    $conv$i = $retval$0$i$i&255;
    $call20 = (__ZNSt3__19__num_getIcE19__stage2_float_loopEcRbRcPcRS4_ccRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSE_RjS4_($conv$i,$__in_units,$__exp,$__a$1,$__a_end,$4,$5,$__grouping,$__g,$__g_end,$__dc,$__atoms)|0);
    $tobool = ($call20|0)==(0);
    if (!($tobool)) {
     $$pre$i12$i$i = $66;$__a$2 = $__a$1;
     break;
    }
    $40 = HEAP32[$__ninp_$i$i103>>2]|0;
    $41 = HEAP32[$__einp_$i$i104>>2]|0;
    $cmp$i$i79 = ($40|0)==($41|0);
    if ($cmp$i$i79) {
     $vtable$i$i = HEAP32[$11>>2]|0;
     $vfn$i$i = (($vtable$i$i) + 40|0);
     $42 = HEAP32[$vfn$i$i>>2]|0;
     __THREW__ = 0;
     (invoke_ii($42|0,($11|0))|0);
     $43 = __THREW__; __THREW__ = 0;
     $44 = $43&1;
     if ($44) {
      label = 33;
      break;
     } else {
      $$pre$i$i$i20 = $11;$__a$0 = $__a$1;
      continue;
     }
    } else {
     $incdec$ptr$i$i = (($40) + 1|0);
     HEAP32[$__ninp_$i$i103>>2] = $incdec$ptr$i$i;
     $$pre$i$i$i20 = $11;$__a$0 = $__a$1;
     continue;
    }
   }
   if ((label|0) == 33) {
    $30 = ___cxa_find_matching_catch()|0;
    $31 = tempRet0;
    $lpad$phi$index = $30;$lpad$phi$index2 = $31;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
    ___resumeException($lpad$phi$index|0);
    // unreachable;
   }
   $45 = HEAP8[$__grouping>>0]|0;
   $and$i$i70 = $45 & 1;
   $tobool$i$i71 = ($and$i$i70<<24>>24)==(0);
   if ($tobool$i$i71) {
    $conv$i$i74 = $45&255;
    $shr1$i$i75 = $conv$i$i74 >>> 1;
    $cond$i77 = $shr1$i$i75;
   } else {
    $__size_$i2$i72 = (($__grouping) + 4|0);
    $46 = HEAP32[$__size_$i2$i72>>2]|0;
    $cond$i77 = $46;
   }
   $cmp26 = ($cond$i77|0)==(0);
   if (!($cmp26)) {
    $47 = HEAP8[$__in_units>>0]|0;
    $tobool27 = ($47<<24>>24)==(0);
    if (!($tobool27)) {
     $48 = HEAP32[$__g_end>>2]|0;
     $sub$ptr$lhs$cast30 = $48;
     $sub$ptr$rhs$cast31 = $__g;
     $sub$ptr$sub32 = (($sub$ptr$lhs$cast30) - ($sub$ptr$rhs$cast31))|0;
     $cmp33 = ($sub$ptr$sub32|0)<(160);
     if ($cmp33) {
      $49 = HEAP32[$__dc>>2]|0;
      $incdec$ptr = (($48) + 4|0);
      HEAP32[$__g_end>>2] = $incdec$ptr;
      HEAP32[$48>>2] = $49;
     }
    }
   }
   $50 = HEAP32[$__a_end>>2]|0;
   __THREW__ = 0;
   $call37 = (+invoke_diii(394,($__a$2|0),($50|0),($__err|0)));
   $51 = __THREW__; __THREW__ = 0;
   $52 = $51&1;
   if (!($52)) {
    HEAPF64[$__v>>3] = $call37;
    $53 = HEAP32[$__g_end>>2]|0;
    __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping,$__g,$53,$__err);
    $tobool$i$i$i = ($11|0)==(0|0);
    if ($tobool$i$i$i) {
     $59 = 0;
    } else {
     $__ninp_$i$i$i$i = (($11) + 12|0);
     $54 = HEAP32[$__ninp_$i$i$i$i>>2]|0;
     $__einp_$i$i$i$i = (($11) + 16|0);
     $55 = HEAP32[$__einp_$i$i$i$i>>2]|0;
     $cmp$i$i$i$i = ($54|0)==($55|0);
     if ($cmp$i$i$i$i) {
      $vtable$i$i$i$i = HEAP32[$11>>2]|0;
      $vfn$i$i$i$i = (($vtable$i$i$i$i) + 36|0);
      $56 = HEAP32[$vfn$i$i$i$i>>2]|0;
      __THREW__ = 0;
      $call$i$i$i$i7 = (invoke_ii($56|0,($11|0))|0);
      $57 = __THREW__; __THREW__ = 0;
      $58 = $57&1;
      if ($58) {
       break;
      }
      $cmp$i1$i$i$i = ($call$i$i$i$i7|0)==(-1);
      if ($cmp$i1$i$i$i) {
       HEAP32[$__b>>2] = 0;
       $59 = 0;
      } else {
       $59 = $11;
      }
     } else {
      $59 = $11;
     }
    }
    $cmp$i$i$i = ($59|0)==(0|0);
    $tobool$i2$i$i = ($$pre$i12$i$i|0)==(0|0);
    do {
     if ($tobool$i2$i$i) {
      label = 62;
     } else {
      $__ninp_$i$i3$i$i = (($$pre$i12$i$i) + 12|0);
      $60 = HEAP32[$__ninp_$i$i3$i$i>>2]|0;
      $__einp_$i$i4$i$i = (($$pre$i12$i$i) + 16|0);
      $61 = HEAP32[$__einp_$i$i4$i$i>>2]|0;
      $cmp$i$i5$i$i = ($60|0)==($61|0);
      if (!($cmp$i$i5$i$i)) {
       if (!($cmp$i$i$i)) {
        break;
       }
       HEAP32[$agg$result>>2] = $59;
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
       STACKTOP = sp;return;
      }
      $vtable$i$i7$i$i = HEAP32[$$pre$i12$i$i>>2]|0;
      $vfn$i$i8$i$i = (($vtable$i$i7$i$i) + 36|0);
      $62 = HEAP32[$vfn$i$i8$i$i>>2]|0;
      __THREW__ = 0;
      $call$i$i9$i$i8 = (invoke_ii($62|0,($$pre$i12$i$i|0))|0);
      $63 = __THREW__; __THREW__ = 0;
      $64 = $63&1;
      if ($64) {
       break L1;
      }
      $cmp$i1$i10$i$i = ($call$i$i9$i$i8|0)==(-1);
      if ($cmp$i1$i10$i$i) {
       HEAP32[$__e>>2] = 0;
       label = 62;
       break;
      }
      $cmp$i15$i$i = ($$pre$i12$i$i|0)==(0|0);
      $cmptmp$i$i = $cmp$i$i$i ^ $cmp$i15$i$i;
      if ($cmptmp$i$i) {
       HEAP32[$agg$result>>2] = $59;
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
       STACKTOP = sp;return;
      }
     }
    } while(0);
    if ((label|0) == 62) {
     if (!($cmp$i$i$i)) {
      HEAP32[$agg$result>>2] = $59;
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
      STACKTOP = sp;return;
     }
    }
    $65 = HEAP32[$__err>>2]|0;
    $or = $65 | 2;
    HEAP32[$__err>>2] = $or;
    HEAP32[$agg$result>>2] = $59;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
    STACKTOP = sp;return;
   }
  }
 } while(0);
 $32 = ___cxa_find_matching_catch()|0;
 $33 = tempRet0;
 $lpad$phi$index = $32;$lpad$phi$index2 = $33;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
 ___resumeException($lpad$phi$index|0);
 // unreachable;
}
function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRPv($agg$result,$this,$__b,$__e,$__iob,$__err,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$pre = 0, $$pre$i$i$i23 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $8 = 0, $9 = 0, $__a$0 = 0, $__a$1 = 0, $__a$2 = 0, $__a_end = 0;
 var $__atoms = 0, $__buf = 0, $__data_$i$i$i = 0, $__data_$i$i$i98$pre = 0, $__data_$i$i$i98$pre$phiZZZZ2D = 0, $__dc = 0, $__einp_$i$i$i$i = 0, $__einp_$i$i$i$i16 = 0, $__einp_$i$i4$i$i = 0, $__einp_$i$i4$i$i31 = 0, $__einp_$i$i86 = 0, $__g = 0, $__g_end = 0, $__grouping = 0, $__ninp_$i$i$i$i = 0, $__ninp_$i$i$i$i15 = 0, $__ninp_$i$i3$i$i = 0, $__ninp_$i$i3$i$i30 = 0, $__ninp_$i$i85 = 0, $__size_$i2$i67 = 0;
 var $add$ptr = 0, $and$i$i$i = 0, $and$i$i$i96 = 0, $and$i$i48 = 0, $and$i$i76 = 0, $and$i1$i79 = 0, $arrayidx = 0, $arrayidx$i$i$i = 0, $arrayidx$i$i$i101$pre = 0, $arrayidx$i$i$i101$pre$phiZZZZ2D = 0, $call$i$i$i$i44 = 0, $call$i$i$i$i7 = 0, $call$i$i9$i$i46 = 0, $call$i$i9$i$i8 = 0, $call$i$i93 = 0, $call$i9 = 0, $call27 = 0, $call33 = 0, $call35 = 0, $cmp = 0;
 var $cmp$i$i$i = 0, $cmp$i$i$i$i = 0, $cmp$i$i$i$i17 = 0, $cmp$i$i$i26 = 0, $cmp$i$i5$i$i = 0, $cmp$i$i5$i$i32 = 0, $cmp$i$i62 = 0, $cmp$i$i87 = 0, $cmp$i1$i$i$i = 0, $cmp$i1$i$i$i21 = 0, $cmp$i1$i10$i$i = 0, $cmp$i1$i10$i$i36 = 0, $cmp$i15$i$i = 0, $cmp36 = 0, $cmptmp$i$i = 0, $cond$i$i = 0, $cond$i$i103 = 0, $cond$i51 = 0, $cond$i60111 = 0, $cond$i72 = 0;
 var $cond$i82 = 0, $conv$i = 0, $conv$i$i = 0, $conv$i$i$i = 0, $conv$i$i57 = 0, $conv$i$i69 = 0, $ehselector$slot$0 = 0, $exn$slot$0 = 0, $incdec$ptr$i$i = 0, $lpad$phi$index = 0, $lpad$phi$index2 = 0, $mul = 0, $or = 0, $phitmp$i80 = 0, $ref$tmp = 0, $retval$0$i$i = 0, $shr1$i$i = 0, $shr1$i$i58 = 0, $shr1$i$i70 = 0, $sub$ptr$lhs$cast = 0;
 var $sub$ptr$rhs$cast = 0, $sub$ptr$sub = 0, $tobool = 0, $tobool$i$i$i = 0, $tobool$i$i$i12 = 0, $tobool$i$i$i14 = 0, $tobool$i$i$i97 = 0, $tobool$i$i49 = 0, $tobool$i$i77 = 0, $tobool$i2$i$i = 0, $tobool$i2$i$i28 = 0, $vararg_buffer = 0, $vfn$i = 0, $vfn$i$i = 0, $vfn$i$i$i$i = 0, $vfn$i$i$i$i20 = 0, $vfn$i$i8$i$i = 0, $vfn$i$i8$i$i35 = 0, $vfn$i$i89 = 0, $vtable$i = 0;
 var $vtable$i$i = 0, $vtable$i$i$i$i = 0, $vtable$i$i$i$i19 = 0, $vtable$i$i7$i$i = 0, $vtable$i$i7$i$i34 = 0, $vtable$i$i88 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 240|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $__atoms = sp + 208|0;
 $__grouping = sp + 188|0;
 $ref$tmp = sp + 200|0;
 $__buf = sp + 8|0;
 $__a_end = sp + 4|0;
 $__g = sp + 24|0;
 $__g_end = sp + 184|0;
 $__dc = sp + 204|0;
 ;HEAP32[$__grouping+0>>2]=0|0;HEAP32[$__grouping+4>>2]=0|0;HEAP32[$__grouping+8>>2]=0|0;
 __THREW__ = 0;
 invoke_vii(358,($ref$tmp|0),($__iob|0));
 $0 = __THREW__; __THREW__ = 0;
 $1 = $0&1;
 if ($1) {
  $36 = ___cxa_find_matching_catch()|0;
  $37 = tempRet0;
  $ehselector$slot$0 = $37;$exn$slot$0 = $36;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
  ___resumeException($exn$slot$0|0);
  // unreachable;
 }
 __THREW__ = 0;
 $call$i9 = (invoke_iii(359,($ref$tmp|0),(4616|0))|0);
 $2 = __THREW__; __THREW__ = 0;
 $3 = $2&1;
 if (!($3)) {
  $vtable$i = HEAP32[$call$i9>>2]|0;
  $vfn$i = (($vtable$i) + 32|0);
  $4 = HEAP32[$vfn$i>>2]|0;
  __THREW__ = 0;
  (invoke_iiiii($4|0,($call$i9|0),(3128|0),(((3128 + 26|0))|0),($__atoms|0))|0);
  $5 = __THREW__; __THREW__ = 0;
  $6 = $5&1;
  if (!($6)) {
   $7 = HEAP32[$ref$tmp>>2]|0;
   (__ZNSt3__114__shared_count16__release_sharedEv($7)|0);
   ;HEAP32[$__buf+0>>2]=0|0;HEAP32[$__buf+4>>2]=0|0;HEAP32[$__buf+8>>2]=0|0;
   __THREW__ = 0;
   invoke_viii(385,($__buf|0),10,0);
   $8 = __THREW__; __THREW__ = 0;
   $9 = $8&1;
   L8: do {
    if ($9) {
     label = 39;
    } else {
     $10 = HEAP8[$__buf>>0]|0;
     $and$i$i$i = $10 & 1;
     $tobool$i$i$i12 = ($and$i$i$i<<24>>24)==(0);
     if ($tobool$i$i$i12) {
      $arrayidx$i$i$i = (($__buf) + 1|0);
      $__data_$i$i$i98$pre = (($__buf) + 8|0);
      $__data_$i$i$i98$pre$phiZZZZ2D = $__data_$i$i$i98$pre;$arrayidx$i$i$i101$pre$phiZZZZ2D = $arrayidx$i$i$i;$cond$i$i = $arrayidx$i$i$i;
     } else {
      $__data_$i$i$i = (($__buf) + 8|0);
      $11 = HEAP32[$__data_$i$i$i>>2]|0;
      $arrayidx$i$i$i101$pre = (($__buf) + 1|0);
      $__data_$i$i$i98$pre$phiZZZZ2D = $__data_$i$i$i;$arrayidx$i$i$i101$pre$phiZZZZ2D = $arrayidx$i$i$i101$pre;$cond$i$i = $11;
     }
     HEAP32[$__a_end>>2] = $cond$i$i;
     HEAP32[$__g_end>>2] = $__g;
     HEAP32[$__dc>>2] = 0;
     $__size_$i2$i67 = (($__buf) + 4|0);
     $$pre = HEAP32[$__b>>2]|0;
     $$pre$i$i$i23 = $$pre;$__a$0 = $cond$i$i;
     L14: while(1) {
      $tobool$i$i$i14 = ($$pre$i$i$i23|0)==(0|0);
      if ($tobool$i$i$i14) {
       $17 = 0;
      } else {
       $__ninp_$i$i$i$i15 = (($$pre$i$i$i23) + 12|0);
       $12 = HEAP32[$__ninp_$i$i$i$i15>>2]|0;
       $__einp_$i$i$i$i16 = (($$pre$i$i$i23) + 16|0);
       $13 = HEAP32[$__einp_$i$i$i$i16>>2]|0;
       $cmp$i$i$i$i17 = ($12|0)==($13|0);
       if ($cmp$i$i$i$i17) {
        $vtable$i$i$i$i19 = HEAP32[$$pre$i$i$i23>>2]|0;
        $vfn$i$i$i$i20 = (($vtable$i$i$i$i19) + 36|0);
        $14 = HEAP32[$vfn$i$i$i$i20>>2]|0;
        __THREW__ = 0;
        $call$i$i$i$i44 = (invoke_ii($14|0,($$pre$i$i$i23|0))|0);
        $15 = __THREW__; __THREW__ = 0;
        $16 = $15&1;
        if ($16) {
         label = 38;
         break;
        }
        $cmp$i1$i$i$i21 = ($call$i$i$i$i44|0)==(-1);
        if ($cmp$i1$i$i$i21) {
         HEAP32[$__b>>2] = 0;
         $17 = 0;
        } else {
         $17 = $$pre$i$i$i23;
        }
       } else {
        $17 = $$pre$i$i$i23;
       }
      }
      $cmp$i$i$i26 = ($17|0)==(0|0);
      $18 = HEAP32[$__e>>2]|0;
      $tobool$i2$i$i28 = ($18|0)==(0|0);
      do {
       if ($tobool$i2$i$i28) {
        label = 20;
       } else {
        $__ninp_$i$i3$i$i30 = (($18) + 12|0);
        $19 = HEAP32[$__ninp_$i$i3$i$i30>>2]|0;
        $__einp_$i$i4$i$i31 = (($18) + 16|0);
        $20 = HEAP32[$__einp_$i$i4$i$i31>>2]|0;
        $cmp$i$i5$i$i32 = ($19|0)==($20|0);
        if (!($cmp$i$i5$i$i32)) {
         if ($cmp$i$i$i26) {
          break;
         } else {
          $__a$2 = $__a$0;
          break L14;
         }
        }
        $vtable$i$i7$i$i34 = HEAP32[$18>>2]|0;
        $vfn$i$i8$i$i35 = (($vtable$i$i7$i$i34) + 36|0);
        $21 = HEAP32[$vfn$i$i8$i$i35>>2]|0;
        __THREW__ = 0;
        $call$i$i9$i$i46 = (invoke_ii($21|0,($18|0))|0);
        $22 = __THREW__; __THREW__ = 0;
        $23 = $22&1;
        if ($23) {
         label = 38;
         break L14;
        }
        $cmp$i1$i10$i$i36 = ($call$i$i9$i$i46|0)==(-1);
        if ($cmp$i1$i10$i$i36) {
         HEAP32[$__e>>2] = 0;
         label = 20;
         break;
        } else {
         if ($cmp$i$i$i26) {
          break;
         } else {
          $__a$2 = $__a$0;
          break L14;
         }
        }
       }
      } while(0);
      if ((label|0) == 20) {
       label = 0;
       if ($cmp$i$i$i26) {
        $__a$2 = $__a$0;
        break;
       }
      }
      $24 = HEAP32[$__a_end>>2]|0;
      $sub$ptr$lhs$cast = $24;
      $sub$ptr$rhs$cast = $__a$0;
      $sub$ptr$sub = (($sub$ptr$lhs$cast) - ($sub$ptr$rhs$cast))|0;
      $25 = HEAP8[$__buf>>0]|0;
      $and$i$i48 = $25 & 1;
      $tobool$i$i49 = ($and$i$i48<<24>>24)==(0);
      if ($tobool$i$i49) {
       $conv$i$i = $25&255;
       $shr1$i$i = $conv$i$i >>> 1;
       $cond$i51 = $shr1$i$i;
      } else {
       $26 = HEAP32[$__size_$i2$i67>>2]|0;
       $cond$i51 = $26;
      }
      $cmp = ($sub$ptr$sub|0)==($cond$i51|0);
      if ($cmp) {
       if ($tobool$i$i49) {
        $conv$i$i57 = $25&255;
        $shr1$i$i58 = $conv$i$i57 >>> 1;
        $conv$i$i69 = $25&255;
        $shr1$i$i70 = $conv$i$i69 >>> 1;
        $cond$i60111 = $shr1$i$i58;$cond$i72 = $shr1$i$i70;
       } else {
        $27 = HEAP32[$__size_$i2$i67>>2]|0;
        $cond$i60111 = $27;$cond$i72 = $27;
       }
       $mul = $cond$i72 << 1;
       __THREW__ = 0;
       invoke_viii(385,($__buf|0),($mul|0),0);
       $28 = __THREW__; __THREW__ = 0;
       $29 = $28&1;
       if ($29) {
        label = 38;
        break;
       }
       $30 = HEAP8[$__buf>>0]|0;
       $and$i$i76 = $30 & 1;
       $tobool$i$i77 = ($and$i$i76<<24>>24)==(0);
       if ($tobool$i$i77) {
        $cond$i82 = 10;
       } else {
        $31 = HEAP32[$__buf>>2]|0;
        $and$i1$i79 = $31 & -2;
        $phitmp$i80 = (($and$i1$i79) + -1)|0;
        $cond$i82 = $phitmp$i80;
       }
       __THREW__ = 0;
       invoke_viii(385,($__buf|0),($cond$i82|0),0);
       $32 = __THREW__; __THREW__ = 0;
       $33 = $32&1;
       if ($33) {
        label = 38;
        break;
       }
       $34 = HEAP8[$__buf>>0]|0;
       $and$i$i$i96 = $34 & 1;
       $tobool$i$i$i97 = ($and$i$i$i96<<24>>24)==(0);
       if ($tobool$i$i$i97) {
        $cond$i$i103 = $arrayidx$i$i$i101$pre$phiZZZZ2D;
       } else {
        $35 = HEAP32[$__data_$i$i$i98$pre$phiZZZZ2D>>2]|0;
        $cond$i$i103 = $35;
       }
       $add$ptr = (($cond$i$i103) + ($cond$i60111)|0);
       HEAP32[$__a_end>>2] = $add$ptr;
       $__a$1 = $cond$i$i103;
      } else {
       $__a$1 = $__a$0;
      }
      $__ninp_$i$i85 = (($17) + 12|0);
      $45 = HEAP32[$__ninp_$i$i85>>2]|0;
      $__einp_$i$i86 = (($17) + 16|0);
      $46 = HEAP32[$__einp_$i$i86>>2]|0;
      $cmp$i$i87 = ($45|0)==($46|0);
      if ($cmp$i$i87) {
       $vtable$i$i88 = HEAP32[$17>>2]|0;
       $vfn$i$i89 = (($vtable$i$i88) + 36|0);
       $47 = HEAP32[$vfn$i$i89>>2]|0;
       __THREW__ = 0;
       $call$i$i93 = (invoke_ii($47|0,($17|0))|0);
       $48 = __THREW__; __THREW__ = 0;
       $49 = $48&1;
       if ($49) {
        label = 38;
        break;
       } else {
        $retval$0$i$i = $call$i$i93;
       }
      } else {
       $50 = HEAP8[$45>>0]|0;
       $conv$i$i$i = $50&255;
       $retval$0$i$i = $conv$i$i$i;
      }
      $conv$i = $retval$0$i$i&255;
      $call27 = (__ZNSt3__19__num_getIcE17__stage2_int_loopEciPcRS2_RjcRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_S2_($conv$i,16,$__a$1,$__a_end,$__dc,0,$__grouping,$__g,$__g_end,$__atoms)|0);
      $tobool = ($call27|0)==(0);
      if (!($tobool)) {
       $__a$2 = $__a$1;
       break;
      }
      $51 = HEAP32[$__ninp_$i$i85>>2]|0;
      $52 = HEAP32[$__einp_$i$i86>>2]|0;
      $cmp$i$i62 = ($51|0)==($52|0);
      if ($cmp$i$i62) {
       $vtable$i$i = HEAP32[$17>>2]|0;
       $vfn$i$i = (($vtable$i$i) + 40|0);
       $53 = HEAP32[$vfn$i$i>>2]|0;
       __THREW__ = 0;
       (invoke_ii($53|0,($17|0))|0);
       $54 = __THREW__; __THREW__ = 0;
       $55 = $54&1;
       if ($55) {
        label = 38;
        break;
       } else {
        $$pre$i$i$i23 = $17;$__a$0 = $__a$1;
        continue;
       }
      } else {
       $incdec$ptr$i$i = (($51) + 1|0);
       HEAP32[$__ninp_$i$i85>>2] = $incdec$ptr$i$i;
       $$pre$i$i$i23 = $17;$__a$0 = $__a$1;
       continue;
      }
     }
     if ((label|0) == 38) {
      $41 = ___cxa_find_matching_catch()|0;
      $42 = tempRet0;
      $lpad$phi$index = $41;$lpad$phi$index2 = $42;
      break;
     }
     $arrayidx = (($__a$2) + 3|0);
     HEAP8[$arrayidx>>0] = 0;
     __THREW__ = 0;
     $call33 = (invoke_i(395)|0);
     $56 = __THREW__; __THREW__ = 0;
     $57 = $56&1;
     if ($57) {
      label = 39;
     } else {
      __THREW__ = 0;
      HEAP32[$vararg_buffer>>2] = $__v;
      $call35 = (invoke_iiiii(396,($__a$2|0),($call33|0),(3168|0),($vararg_buffer|0))|0);
      $58 = __THREW__; __THREW__ = 0;
      $59 = $58&1;
      if ($59) {
       label = 39;
      } else {
       $cmp36 = ($call35|0)==(1);
       if (!($cmp36)) {
        HEAP32[$__err>>2] = 4;
       }
       $60 = HEAP32[$__b>>2]|0;
       $tobool$i$i$i = ($60|0)==(0|0);
       if ($tobool$i$i$i) {
        $66 = 0;
       } else {
        $__ninp_$i$i$i$i = (($60) + 12|0);
        $61 = HEAP32[$__ninp_$i$i$i$i>>2]|0;
        $__einp_$i$i$i$i = (($60) + 16|0);
        $62 = HEAP32[$__einp_$i$i$i$i>>2]|0;
        $cmp$i$i$i$i = ($61|0)==($62|0);
        if ($cmp$i$i$i$i) {
         $vtable$i$i$i$i = HEAP32[$60>>2]|0;
         $vfn$i$i$i$i = (($vtable$i$i$i$i) + 36|0);
         $63 = HEAP32[$vfn$i$i$i$i>>2]|0;
         __THREW__ = 0;
         $call$i$i$i$i7 = (invoke_ii($63|0,($60|0))|0);
         $64 = __THREW__; __THREW__ = 0;
         $65 = $64&1;
         if ($65) {
          label = 39;
          break;
         }
         $cmp$i1$i$i$i = ($call$i$i$i$i7|0)==(-1);
         if ($cmp$i1$i$i$i) {
          HEAP32[$__b>>2] = 0;
          $66 = 0;
         } else {
          $66 = $60;
         }
        } else {
         $66 = $60;
        }
       }
       $cmp$i$i$i = ($66|0)==(0|0);
       $67 = HEAP32[$__e>>2]|0;
       $tobool$i2$i$i = ($67|0)==(0|0);
       do {
        if ($tobool$i2$i$i) {
         label = 63;
        } else {
         $__ninp_$i$i3$i$i = (($67) + 12|0);
         $68 = HEAP32[$__ninp_$i$i3$i$i>>2]|0;
         $__einp_$i$i4$i$i = (($67) + 16|0);
         $69 = HEAP32[$__einp_$i$i4$i$i>>2]|0;
         $cmp$i$i5$i$i = ($68|0)==($69|0);
         if (!($cmp$i$i5$i$i)) {
          if (!($cmp$i$i$i)) {
           break;
          }
          HEAP32[$agg$result>>2] = $66;
          __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
          __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
          STACKTOP = sp;return;
         }
         $vtable$i$i7$i$i = HEAP32[$67>>2]|0;
         $vfn$i$i8$i$i = (($vtable$i$i7$i$i) + 36|0);
         $70 = HEAP32[$vfn$i$i8$i$i>>2]|0;
         __THREW__ = 0;
         $call$i$i9$i$i8 = (invoke_ii($70|0,($67|0))|0);
         $71 = __THREW__; __THREW__ = 0;
         $72 = $71&1;
         if ($72) {
          label = 39;
          break L8;
         }
         $cmp$i1$i10$i$i = ($call$i$i9$i$i8|0)==(-1);
         if ($cmp$i1$i10$i$i) {
          HEAP32[$__e>>2] = 0;
          label = 63;
          break;
         }
         $cmp$i15$i$i = ($67|0)==(0|0);
         $cmptmp$i$i = $cmp$i$i$i ^ $cmp$i15$i$i;
         if ($cmptmp$i$i) {
          HEAP32[$agg$result>>2] = $66;
          __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
          __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
          STACKTOP = sp;return;
         }
        }
       } while(0);
       if ((label|0) == 63) {
        if (!($cmp$i$i$i)) {
         HEAP32[$agg$result>>2] = $66;
         __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
         __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
         STACKTOP = sp;return;
        }
       }
       $73 = HEAP32[$__err>>2]|0;
       $or = $73 | 2;
       HEAP32[$__err>>2] = $or;
       HEAP32[$agg$result>>2] = $66;
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
       STACKTOP = sp;return;
      }
     }
    }
   } while(0);
   if ((label|0) == 39) {
    $43 = ___cxa_find_matching_catch()|0;
    $44 = tempRet0;
    $lpad$phi$index = $43;$lpad$phi$index2 = $44;
   }
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
   $ehselector$slot$0 = $lpad$phi$index2;$exn$slot$0 = $lpad$phi$index;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
   ___resumeException($exn$slot$0|0);
   // unreachable;
  }
 }
 $38 = ___cxa_find_matching_catch()|0;
 $39 = tempRet0;
 $40 = HEAP32[$ref$tmp>>2]|0;
 (__ZNSt3__114__shared_count16__release_sharedEv($40)|0);
 $ehselector$slot$0 = $39;$exn$slot$0 = $38;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
 ___resumeException($exn$slot$0|0);
 // unreachable;
}
function __ZNSt3__19__num_getIcE17__stage2_int_loopEciPcRS2_RjcRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_S2_($__ct,$__base,$__a,$__a_end,$__dc,$__thousands_sep,$__grouping,$__g,$__g_end,$__atoms) {
 $__ct = $__ct|0;
 $__base = $__base|0;
 $__a = $__a|0;
 $__a_end = $__a_end|0;
 $__dc = $__dc|0;
 $__thousands_sep = $__thousands_sep|0;
 $__grouping = $__grouping|0;
 $__g = $__g|0;
 $__g_end = $__g_end|0;
 $__atoms = $__atoms|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__first$addr$0$lcssa$i = 0, $__first$addr$05$i = 0, $__size_$i2$i = 0, $add$ptr = 0, $and$i$i = 0, $arrayidx = 0, $arrayidx4 = 0, $arrayidx43 = 0;
 var $arrayidx47 = 0, $arrayidx50 = 0, $cmp = 0, $cmp$i = 0, $cmp11 = 0, $cmp15 = 0, $cmp17 = 0, $cmp2 = 0, $cmp2$i = 0, $cmp26 = 0, $cmp29 = 0, $cmp33 = 0, $cmp41 = 0, $cmp45 = 0, $cmp6 = 0, $cond = 0, $cond$i = 0, $conv$i$i = 0, $inc = 0, $incdec$ptr = 0;
 var $incdec$ptr$i = 0, $incdec$ptr19 = 0, $incdec$ptr48 = 0, $incdec$ptr51 = 0, $or$cond = 0, $retval$0 = 0, $shr1$i$i = 0, $sub$ptr$lhs$cast = 0, $sub$ptr$lhs$cast23 = 0, $sub$ptr$lhs$cast38 = 0, $sub$ptr$rhs$cast = 0, $sub$ptr$rhs$cast24 = 0, $sub$ptr$rhs$cast39 = 0, $sub$ptr$sub = 0, $sub$ptr$sub25 = 0, $sub$ptr$sub40 = 0, $tobool$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$__a_end>>2]|0;
 $cmp = ($0|0)==($__a|0);
 do {
  if ($cmp) {
   $arrayidx = (($__atoms) + 24|0);
   $1 = HEAP8[$arrayidx>>0]|0;
   $cmp2 = ($1<<24>>24)==($__ct<<24>>24);
   if (!($cmp2)) {
    $arrayidx4 = (($__atoms) + 25|0);
    $2 = HEAP8[$arrayidx4>>0]|0;
    $cmp6 = ($2<<24>>24)==($__ct<<24>>24);
    if (!($cmp6)) {
     break;
    }
   }
   $cond = $cmp2 ? 43 : 45;
   $incdec$ptr = (($__a) + 1|0);
   HEAP32[$__a_end>>2] = $incdec$ptr;
   HEAP8[$__a>>0] = $cond;
   HEAP32[$__dc>>2] = 0;
   $retval$0 = 0;
   STACKTOP = sp;return ($retval$0|0);
  }
 } while(0);
 $3 = HEAP8[$__grouping>>0]|0;
 $and$i$i = $3 & 1;
 $tobool$i$i = ($and$i$i<<24>>24)==(0);
 if ($tobool$i$i) {
  $conv$i$i = $3&255;
  $shr1$i$i = $conv$i$i >>> 1;
  $cond$i = $shr1$i$i;
 } else {
  $__size_$i2$i = (($__grouping) + 4|0);
  $4 = HEAP32[$__size_$i2$i>>2]|0;
  $cond$i = $4;
 }
 $cmp11 = ($cond$i|0)!=(0);
 $cmp15 = ($__ct<<24>>24)==($__thousands_sep<<24>>24);
 $or$cond = $cmp11 & $cmp15;
 if ($or$cond) {
  $5 = HEAP32[$__g_end>>2]|0;
  $sub$ptr$lhs$cast = $5;
  $sub$ptr$rhs$cast = $__g;
  $sub$ptr$sub = (($sub$ptr$lhs$cast) - ($sub$ptr$rhs$cast))|0;
  $cmp17 = ($sub$ptr$sub|0)<(160);
  if (!($cmp17)) {
   $retval$0 = 0;
   STACKTOP = sp;return ($retval$0|0);
  }
  $6 = HEAP32[$__dc>>2]|0;
  $incdec$ptr19 = (($5) + 4|0);
  HEAP32[$__g_end>>2] = $incdec$ptr19;
  HEAP32[$5>>2] = $6;
  HEAP32[$__dc>>2] = 0;
  $retval$0 = 0;
  STACKTOP = sp;return ($retval$0|0);
 }
 $add$ptr = (($__atoms) + 26|0);
 $__first$addr$05$i = $__atoms;
 while(1) {
  $7 = HEAP8[$__first$addr$05$i>>0]|0;
  $cmp2$i = ($7<<24>>24)==($__ct<<24>>24);
  $incdec$ptr$i = (($__first$addr$05$i) + 1|0);
  if ($cmp2$i) {
   $__first$addr$0$lcssa$i = $__first$addr$05$i;
   break;
  }
  $cmp$i = ($incdec$ptr$i|0)==($add$ptr|0);
  if ($cmp$i) {
   $__first$addr$0$lcssa$i = $add$ptr;
   break;
  } else {
   $__first$addr$05$i = $incdec$ptr$i;
  }
 }
 $sub$ptr$lhs$cast23 = $__first$addr$0$lcssa$i;
 $sub$ptr$rhs$cast24 = $__atoms;
 $sub$ptr$sub25 = (($sub$ptr$lhs$cast23) - ($sub$ptr$rhs$cast24))|0;
 $cmp26 = ($sub$ptr$sub25|0)>(23);
 if ($cmp26) {
  $retval$0 = -1;
  STACKTOP = sp;return ($retval$0|0);
 }
 if ((($__base|0) == 10) | (($__base|0) == 8)) {
  $cmp29 = ($sub$ptr$sub25|0)<($__base|0);
  if (!($cmp29)) {
   $retval$0 = -1;
   STACKTOP = sp;return ($retval$0|0);
  }
 } else if ((($__base|0) == 16)) {
  $cmp33 = ($sub$ptr$sub25|0)<(22);
  if (!($cmp33)) {
   if ($cmp) {
    $retval$0 = -1;
    STACKTOP = sp;return ($retval$0|0);
   }
   $sub$ptr$lhs$cast38 = $0;
   $sub$ptr$rhs$cast39 = $__a;
   $sub$ptr$sub40 = (($sub$ptr$lhs$cast38) - ($sub$ptr$rhs$cast39))|0;
   $cmp41 = ($sub$ptr$sub40|0)<(3);
   if (!($cmp41)) {
    $retval$0 = -1;
    STACKTOP = sp;return ($retval$0|0);
   }
   $arrayidx43 = (($0) + -1|0);
   $8 = HEAP8[$arrayidx43>>0]|0;
   $cmp45 = ($8<<24>>24)==(48);
   if (!($cmp45)) {
    $retval$0 = -1;
    STACKTOP = sp;return ($retval$0|0);
   }
   HEAP32[$__dc>>2] = 0;
   $arrayidx47 = (3128 + ($sub$ptr$sub25)|0);
   $9 = HEAP8[$arrayidx47>>0]|0;
   $incdec$ptr48 = (($0) + 1|0);
   HEAP32[$__a_end>>2] = $incdec$ptr48;
   HEAP8[$0>>0] = $9;
   $retval$0 = 0;
   STACKTOP = sp;return ($retval$0|0);
  }
 }
 $arrayidx50 = (3128 + ($sub$ptr$sub25)|0);
 $10 = HEAP8[$arrayidx50>>0]|0;
 $incdec$ptr51 = (($0) + 1|0);
 HEAP32[$__a_end>>2] = $incdec$ptr51;
 HEAP8[$0>>0] = $10;
 $11 = HEAP32[$__dc>>2]|0;
 $inc = (($11) + 1)|0;
 HEAP32[$__dc>>2] = $inc;
 $retval$0 = 0;
 STACKTOP = sp;return ($retval$0|0);
}
function __ZNSt3__110__sscanf_lEPKcP15__locale_structS1_z($__s,$__l,$__format,$varargs) {
 $__s = $__s|0;
 $__l = $__l|0;
 $__format = $__format|0;
 $varargs = $varargs|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $__va = 0, $call = 0, $call3 = 0, $tobool$i$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__va = sp;
 HEAP32[$__va>>2] = $varargs;
 $call = (_uselocale(($__l|0))|0);
 $call3 = (_vsscanf($__s,$__format,$__va)|0);
 $tobool$i$i$i = ($call|0)==(0|0);
 if ($tobool$i$i$i) {
  STACKTOP = sp;return ($call3|0);
 }
 __THREW__ = 0;
 (invoke_ii(397,($call|0))|0);
 $0 = __THREW__; __THREW__ = 0;
 $1 = $0&1;
 if ($1) {
  $2 = ___cxa_find_matching_catch(0|0)|0;
  $3 = tempRet0;
  ___clang_call_terminate($2);
  // unreachable;
 } else {
  STACKTOP = sp;return ($call3|0);
 }
 return 0|0;
}
function __ZNSt3__16__clocEv() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $call = 0, $guard$uninitialized = 0, $tobool = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[4512>>0]|0;
 $guard$uninitialized = ($0<<24>>24)==(0);
 do {
  if ($guard$uninitialized) {
   $1 = (___cxa_guard_acquire((4512|0))|0);
   $tobool = ($1|0)==(0);
   if (!($tobool)) {
    __THREW__ = 0;
    $call = (invoke_iiii(398,2147483647,(4520|0),(0|0))|0);
    $2 = __THREW__; __THREW__ = 0;
    $3 = $2&1;
    if ($3) {
     $5 = ___cxa_find_matching_catch()|0;
     $6 = tempRet0;
     ___cxa_guard_abort((4512|0));
     ___resumeException($5|0);
     // unreachable;
    } else {
     HEAP32[4504>>2] = $call;
     ___cxa_guard_release((4512|0));
     break;
    }
   }
  }
 } while(0);
 $4 = HEAP32[4504>>2]|0;
 STACKTOP = sp;return ($4|0);
}
function __ZNSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 STACKTOP = sp;return;
}
function __ZNSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED1Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return;
}
function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRb($agg$result,$this,$__b,$__e,$__iob,$__err,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__fmtflags_$i = 0, $__lv = 0, $__names = 0, $add$ptr = 0, $agg$tmp = 0, $agg$tmp$byval_copy = 0, $agg$tmp14 = 0, $agg$tmp14$byval_copy = 0;
 var $agg$tmp2 = 0, $agg$tmp2$byval_copy = 0, $and = 0, $arraydestroy$done = 0, $arraydestroy$element = 0, $arraydestroy$element23 = 0, $arraydestroy$element29 = 0, $arraydestroy$elementPast = 0, $arraydestroy$isempty = 0, $arrayinit$element = 0, $arrayinit$endOfInit$0 = 0, $call$i1011 = 0, $call$i1415 = 0, $call18 = 0, $cmp = 0, $cmp20 = 0, $ehselector$slot$0 = 0, $exn$slot$0 = 0, $frombool = 0, $ref$tmp = 0;
 var $ref$tmp4 = 0, $ref$tmp6 = 0, $vfn = 0, $vfn$i = 0, $vfn$i19 = 0, $vtable = 0, $vtable$i = 0, $vtable$i18 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $agg$tmp14$byval_copy = sp + 56|0;
 $agg$tmp2$byval_copy = sp + 36|0;
 $agg$tmp$byval_copy = sp;
 $__lv = sp + 48|0;
 $ref$tmp = sp + 52|0;
 $agg$tmp = sp + 60|0;
 $agg$tmp2 = sp + 32|0;
 $ref$tmp4 = sp + 44|0;
 $ref$tmp6 = sp + 40|0;
 $__names = sp + 8|0;
 $agg$tmp14 = sp + 4|0;
 $__fmtflags_$i = (($__iob) + 4|0);
 $0 = HEAP32[$__fmtflags_$i>>2]|0;
 $and = $0 & 1;
 $cmp = ($and|0)==(0);
 if ($cmp) {
  HEAP32[$__lv>>2] = -1;
  $vtable = HEAP32[$this>>2]|0;
  $vfn = (($vtable) + 16|0);
  $1 = HEAP32[$vfn>>2]|0;
  $2 = HEAP32[$__b>>2]|0;
  HEAP32[$agg$tmp>>2] = $2;
  $3 = HEAP32[$__e>>2]|0;
  HEAP32[$agg$tmp2>>2] = $3;
  ;HEAP32[$agg$tmp$byval_copy+0>>2]=HEAP32[$agg$tmp+0>>2]|0;
  ;HEAP32[$agg$tmp2$byval_copy+0>>2]=HEAP32[$agg$tmp2+0>>2]|0;
  FUNCTION_TABLE_viiiiiii[$1 & 511]($ref$tmp,$this,$agg$tmp$byval_copy,$agg$tmp2$byval_copy,$__iob,$__err,$__lv);
  $4 = HEAP32[$ref$tmp>>2]|0;
  HEAP32[$__b>>2] = $4;
  $5 = HEAP32[$__lv>>2]|0;
  if ((($5|0) == 1)) {
   HEAP8[$__v>>0] = 1;
  } else if ((($5|0) == 0)) {
   HEAP8[$__v>>0] = 0;
  } else {
   HEAP8[$__v>>0] = 1;
   HEAP32[$__err>>2] = 4;
  }
  HEAP32[$agg$result>>2] = $4;
  STACKTOP = sp;return;
 }
 __ZNKSt3__18ios_base6getlocEv($ref$tmp4,$__iob);
 __THREW__ = 0;
 $call$i1011 = (invoke_iii(359,($ref$tmp4|0),(4608|0))|0);
 $6 = __THREW__; __THREW__ = 0;
 $7 = $6&1;
 if ($7) {
  $22 = ___cxa_find_matching_catch()|0;
  $23 = tempRet0;
  $24 = HEAP32[$ref$tmp4>>2]|0;
  (__ZNSt3__114__shared_count16__release_sharedEv($24)|0);
  $ehselector$slot$0 = $23;$exn$slot$0 = $22;
  ___resumeException($exn$slot$0|0);
  // unreachable;
 }
 $8 = HEAP32[$ref$tmp4>>2]|0;
 (__ZNSt3__114__shared_count16__release_sharedEv($8)|0);
 __ZNKSt3__18ios_base6getlocEv($ref$tmp6,$__iob);
 __THREW__ = 0;
 $call$i1415 = (invoke_iii(359,($ref$tmp6|0),(4768|0))|0);
 $9 = __THREW__; __THREW__ = 0;
 $10 = $9&1;
 if ($10) {
  $25 = ___cxa_find_matching_catch()|0;
  $26 = tempRet0;
  $27 = HEAP32[$ref$tmp6>>2]|0;
  (__ZNSt3__114__shared_count16__release_sharedEv($27)|0);
  $ehselector$slot$0 = $26;$exn$slot$0 = $25;
  ___resumeException($exn$slot$0|0);
  // unreachable;
 }
 $11 = HEAP32[$ref$tmp6>>2]|0;
 (__ZNSt3__114__shared_count16__release_sharedEv($11)|0);
 $vtable$i = HEAP32[$call$i1415>>2]|0;
 $vfn$i = (($vtable$i) + 24|0);
 $12 = HEAP32[$vfn$i>>2]|0;
 __THREW__ = 0;
 invoke_vii($12|0,($__names|0),($call$i1415|0));
 $13 = __THREW__; __THREW__ = 0;
 $14 = $13&1;
 if ($14) {
  $arrayinit$endOfInit$0 = $__names;
 } else {
  $arrayinit$element = (($__names) + 12|0);
  $vtable$i18 = HEAP32[$call$i1415>>2]|0;
  $vfn$i19 = (($vtable$i18) + 28|0);
  $15 = HEAP32[$vfn$i19>>2]|0;
  __THREW__ = 0;
  invoke_vii($15|0,($arrayinit$element|0),($call$i1415|0));
  $16 = __THREW__; __THREW__ = 0;
  $17 = $16&1;
  if ($17) {
   $arrayinit$endOfInit$0 = $arrayinit$element;
  } else {
   $18 = HEAP32[$__e>>2]|0;
   HEAP32[$agg$tmp14>>2] = $18;
   $add$ptr = (($__names) + 24|0);
   __THREW__ = 0;
   ;HEAP32[$agg$tmp14$byval_copy+0>>2]=HEAP32[$agg$tmp14+0>>2]|0;
   $call18 = (invoke_iiiiiiii(399,($__b|0),($agg$tmp14$byval_copy|0),($__names|0),($add$ptr|0),($call$i1011|0),($__err|0),1)|0);
   $19 = __THREW__; __THREW__ = 0;
   $20 = $19&1;
   if ($20) {
    $30 = ___cxa_find_matching_catch()|0;
    $31 = tempRet0;
    $arraydestroy$element29 = (($__names) + 12|0);
    __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($arraydestroy$element29);
    __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($__names);
    $ehselector$slot$0 = $31;$exn$slot$0 = $30;
    ___resumeException($exn$slot$0|0);
    // unreachable;
   } else {
    $cmp20 = ($call18|0)==($__names|0);
    $frombool = $cmp20&1;
    HEAP8[$__v>>0] = $frombool;
    $21 = HEAP32[$__b>>2]|0;
    HEAP32[$agg$result>>2] = $21;
    $arraydestroy$element23 = (($__names) + 12|0);
    __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($arraydestroy$element23);
    __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($__names);
    STACKTOP = sp;return;
   }
  }
 }
 $28 = ___cxa_find_matching_catch()|0;
 $29 = tempRet0;
 $arraydestroy$isempty = ($__names|0)==($arrayinit$endOfInit$0|0);
 if ($arraydestroy$isempty) {
  $ehselector$slot$0 = $29;$exn$slot$0 = $28;
  ___resumeException($exn$slot$0|0);
  // unreachable;
 } else {
  $arraydestroy$elementPast = $arrayinit$endOfInit$0;
 }
 while(1) {
  $arraydestroy$element = (($arraydestroy$elementPast) + -12|0);
  __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($arraydestroy$element);
  $arraydestroy$done = ($arraydestroy$element|0)==($__names|0);
  if ($arraydestroy$done) {
   $ehselector$slot$0 = $29;$exn$slot$0 = $28;
   break;
  } else {
   $arraydestroy$elementPast = $arraydestroy$element;
  }
 }
 ___resumeException($exn$slot$0|0);
 // unreachable;
}
function __ZNSt3__114__scan_keywordINS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEPKNS_12basic_stringIwS3_NS_9allocatorIwEEEENS_5ctypeIwEEEET0_RT_SE_SD_SD_RKT1_Rjb($__b,$__e,$__kb,$__ke,$__ct,$__err,$__case_sensitive) {
 $__b = $__b|0;
 $__e = $__e|0;
 $__kb = $__kb|0;
 $__ke = $__ke|0;
 $__ct = $__ct|0;
 $__err = $__err|0;
 $__case_sensitive = $__case_sensitive|0;
 var $$index = 0, $$index10 = 0, $$pre$i$i$i = 0, $$pre$i$i$i108 = 0, $$pre$i15$i$i126 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
 var $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0;
 var $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $9 = 0, $__c$0 = 0, $__consume$0$off0162 = 0, $__consume$1$off0 = 0, $__data_$i$i$i$i = 0, $__data_$i1$i$i$i = 0, $__einp_$i$i = 0, $__einp_$i$i$i$i = 0, $__einp_$i$i$i$i98 = 0, $__einp_$i$i4$i$i = 0, $__einp_$i$i4$i$i116 = 0, $__einp_$i$i77 = 0, $__indx$0 = 0, $__kb$addr$0147 = 0, $__kb$addr$0150193 = 0;
 var $__kc$0 = 0, $__ky$0184 = 0, $__ky22$0163 = 0, $__ky58$0171 = 0, $__n_does_match$0$lcssa = 0, $__n_does_match$0182 = 0, $__n_does_match$1 = 0, $__n_does_match$2 = 0, $__n_does_match$2$phi = 0, $__n_does_match$3159 = 0, $__n_does_match$4 = 0, $__n_does_match$5169 = 0, $__n_does_match$6 = 0, $__n_might_match$0$lcssa = 0, $__n_might_match$0181 = 0, $__n_might_match$1 = 0, $__n_might_match$2 = 0, $__n_might_match$2$phi = 0, $__n_might_match$3158 = 0, $__n_might_match$4 = 0;
 var $__ninp_$i$i = 0, $__ninp_$i$i$i$i = 0, $__ninp_$i$i$i$i97 = 0, $__ninp_$i$i3$i$i = 0, $__ninp_$i$i3$i$i115 = 0, $__ninp_$i$i76 = 0, $__size_$i2$i = 0, $__size_$i2$i$i = 0, $__size_$i2$i88 = 0, $__st$0183 = 0, $__st$1160 = 0, $__st$2170 = 0, $__st$3149194 = 0, $__statbuf = 0, $__status$0 = 0, $add$ptr$i = 0, $add55 = 0, $and$i$i = 0, $and$i$i$i = 0, $and$i$i$i$i = 0;
 var $and$i$i86 = 0, $call$i$i$i$i133 = 0, $call$i$i$i$i67 = 0, $call$i$i69 = 0, $call$i$i9$i$i135 = 0, $call$i$i9$i$i68 = 0, $call$i70 = 0, $call$i73 = 0, $call1 = 0, $call1140 = 0, $cmp = 0, $cmp$i = 0, $cmp$i$i = 0, $cmp$i$i$i$i = 0, $cmp$i$i$i$i99 = 0, $cmp$i$i5$i$i = 0, $cmp$i$i5$i$i117 = 0, $cmp$i$i78 = 0, $cmp$i1$i$i$i = 0, $cmp$i1$i$i$i106 = 0;
 var $cmp$i1$i13$i$i = 0, $cmp$i1$i13$i$i124 = 0, $cmp14 = 0, $cmp14$ = 0, $cmp2 = 0, $cmp24 = 0, $cmp26 = 0, $cmp35 = 0, $cmp38 = 0, $cmp56$not = 0, $cmp6 = 0, $cmp60 = 0, $cmp6180 = 0, $cmp63 = 0, $cmp66 = 0, $cmp84 = 0, $cmp87 = 0, $cmp87192 = 0, $cmptmp$i$i = 0, $cond$i = 0;
 var $cond$i$i = 0, $cond$i$i$i = 0, $cond$i93 = 0, $conv$i$i = 0, $conv$i$i$i = 0, $conv$i$i90 = 0, $dec = 0, $dec40 = 0, $dec44 = 0, $dec68 = 0, $inc = 0, $inc41 = 0, $inc77$pre = 0, $incdec$ptr = 0, $incdec$ptr$i$i = 0, $incdec$ptr10 = 0, $incdec$ptr48 = 0, $incdec$ptr49 = 0, $incdec$ptr71 = 0, $incdec$ptr72 = 0;
 var $incdec$ptr91 = 0, $incdec$ptr92 = 0, $lpad$phi$index = 0, $lpad$phi$index3 = 0, $or = 0, $or96 = 0, $phitmp$i$i$i = 0, $phitmp$i$i$i109 = 0, $retval$0$i$i = 0, $retval$0$i$i$i$i = 0, $retval$0$i$i$i$i105 = 0, $retval$0$i$i12$i$i = 0, $retval$0$i$i12$i$i123 = 0, $shr1$i$i = 0, $shr1$i$i$i = 0, $shr1$i$i91 = 0, $sub$ptr$div$i$i = 0, $sub$ptr$lhs$cast$i$i = 0, $sub$ptr$rhs$cast$i$i = 0, $sub$ptr$sub$i$i = 0;
 var $tobool$i$i = 0, $tobool$i$i$i = 0, $tobool$i$i$i$i = 0, $tobool$i$i$i59 = 0, $tobool$i$i$i64 = 0, $tobool$i$i$i65 = 0, $tobool$i$i$i96 = 0, $tobool$i$i87 = 0, $tobool$i2$i$i = 0, $tobool$i2$i$i113 = 0, $vfn$i = 0, $vfn$i$i = 0, $vfn$i$i$i$i = 0, $vfn$i$i$i$i102 = 0, $vfn$i$i8$i$i = 0, $vfn$i$i8$i$i120 = 0, $vfn$i$i80 = 0, $vfn$i72 = 0, $vtable$i = 0, $vtable$i$i = 0;
 var $vtable$i$i$i$i = 0, $vtable$i$i$i$i101 = 0, $vtable$i$i7$i$i = 0, $vtable$i$i7$i$i119 = 0, $vtable$i$i79 = 0, $vtable$i71 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__statbuf = sp;
 $sub$ptr$lhs$cast$i$i = $__ke;
 $sub$ptr$rhs$cast$i$i = $__kb;
 $sub$ptr$sub$i$i = (($sub$ptr$lhs$cast$i$i) - ($sub$ptr$rhs$cast$i$i))|0;
 $sub$ptr$div$i$i = (($sub$ptr$sub$i$i|0) / 12)&-1;
 $cmp = ($sub$ptr$div$i$i>>>0)>(100);
 if ($cmp) {
  $call1 = (_malloc($sub$ptr$div$i$i)|0);
  $cmp2 = ($call1|0)==(0|0);
  if ($cmp2) {
   __THREW__ = 0;
   invoke_v(383);
   $0 = __THREW__; __THREW__ = 0;
   $1 = $0&1;
   if ($1) {
    $2 = ___cxa_find_matching_catch()|0;
    $3 = tempRet0;
    $$index = $2;$$index10 = $3;
    ___resumeException($$index|0);
    // unreachable;
   } else {
    $__status$0 = 0;$call1140 = 0;
   }
  } else {
   $__status$0 = $call1;$call1140 = $call1;
  }
 } else {
  $__status$0 = $__statbuf;$call1140 = 0;
 }
 $cmp6180 = ($__kb|0)==($__ke|0);
 if ($cmp6180) {
  $__n_does_match$0$lcssa = 0;$__n_might_match$0$lcssa = $sub$ptr$div$i$i;
 } else {
  $__ky$0184 = $__kb;$__n_does_match$0182 = 0;$__n_might_match$0181 = $sub$ptr$div$i$i;$__st$0183 = $__status$0;
  while(1) {
   $14 = HEAP8[$__ky$0184>>0]|0;
   $and$i$i$i = $14 & 1;
   $tobool$i$i$i64 = ($and$i$i$i<<24>>24)==(0);
   if ($tobool$i$i$i64) {
    $conv$i$i$i = $14&255;
    $shr1$i$i$i = $conv$i$i$i >>> 1;
    $cond$i$i = $shr1$i$i$i;
   } else {
    $__size_$i2$i$i = (($__ky$0184) + 4|0);
    $15 = HEAP32[$__size_$i2$i$i>>2]|0;
    $cond$i$i = $15;
   }
   $cmp$i = ($cond$i$i|0)==(0);
   if ($cmp$i) {
    HEAP8[$__st$0183>>0] = 2;
    $dec = (($__n_might_match$0181) + -1)|0;
    $inc = (($__n_does_match$0182) + 1)|0;
    $__n_does_match$1 = $inc;$__n_might_match$1 = $dec;
   } else {
    HEAP8[$__st$0183>>0] = 1;
    $__n_does_match$1 = $__n_does_match$0182;$__n_might_match$1 = $__n_might_match$0181;
   }
   $incdec$ptr = (($__ky$0184) + 12|0);
   $incdec$ptr10 = (($__st$0183) + 1|0);
   $cmp6 = ($incdec$ptr|0)==($__ke|0);
   if ($cmp6) {
    $__n_does_match$0$lcssa = $__n_does_match$1;$__n_might_match$0$lcssa = $__n_might_match$1;
    break;
   } else {
    $__ky$0184 = $incdec$ptr;$__n_does_match$0182 = $__n_does_match$1;$__n_might_match$0181 = $__n_might_match$1;$__st$0183 = $incdec$ptr10;
   }
  }
 }
 $__indx$0 = 0;$__n_does_match$2 = $__n_does_match$0$lcssa;$__n_might_match$2 = $__n_might_match$0$lcssa;
 L19: while(1) {
  $16 = HEAP32[$__b>>2]|0;
  $tobool$i$i$i65 = ($16|0)==(0|0);
  do {
   if ($tobool$i$i$i65) {
    $30 = 1;
   } else {
    $__ninp_$i$i$i$i = (($16) + 12|0);
    $17 = HEAP32[$__ninp_$i$i$i$i>>2]|0;
    $__einp_$i$i$i$i = (($16) + 16|0);
    $18 = HEAP32[$__einp_$i$i$i$i>>2]|0;
    $cmp$i$i$i$i = ($17|0)==($18|0);
    if ($cmp$i$i$i$i) {
     $vtable$i$i$i$i = HEAP32[$16>>2]|0;
     $vfn$i$i$i$i = (($vtable$i$i$i$i) + 36|0);
     $19 = HEAP32[$vfn$i$i$i$i>>2]|0;
     __THREW__ = 0;
     $call$i$i$i$i67 = (invoke_ii($19|0,($16|0))|0);
     $20 = __THREW__; __THREW__ = 0;
     $21 = $20&1;
     if ($21) {
      label = 6;
      break L19;
     } else {
      $retval$0$i$i$i$i = $call$i$i$i$i67;
     }
    } else {
     $22 = HEAP32[$17>>2]|0;
     $retval$0$i$i$i$i = $22;
    }
    $cmp$i1$i$i$i = ($retval$0$i$i$i$i|0)==(-1);
    if ($cmp$i1$i$i$i) {
     HEAP32[$__b>>2] = 0;
     $30 = 1;
     break;
    } else {
     $$pre$i$i$i = HEAP32[$__b>>2]|0;
     $phitmp$i$i$i = ($$pre$i$i$i|0)==(0|0);
     $30 = $phitmp$i$i$i;
     break;
    }
   }
  } while(0);
  $23 = HEAP32[$__e>>2]|0;
  $tobool$i2$i$i = ($23|0)==(0|0);
  if ($tobool$i2$i$i) {
   $$pre$i15$i$i126 = 0;$31 = 1;
  } else {
   $__ninp_$i$i3$i$i = (($23) + 12|0);
   $24 = HEAP32[$__ninp_$i$i3$i$i>>2]|0;
   $__einp_$i$i4$i$i = (($23) + 16|0);
   $25 = HEAP32[$__einp_$i$i4$i$i>>2]|0;
   $cmp$i$i5$i$i = ($24|0)==($25|0);
   if ($cmp$i$i5$i$i) {
    $vtable$i$i7$i$i = HEAP32[$23>>2]|0;
    $vfn$i$i8$i$i = (($vtable$i$i7$i$i) + 36|0);
    $26 = HEAP32[$vfn$i$i8$i$i>>2]|0;
    __THREW__ = 0;
    $call$i$i9$i$i68 = (invoke_ii($26|0,($23|0))|0);
    $27 = __THREW__; __THREW__ = 0;
    $28 = $27&1;
    if ($28) {
     label = 6;
     break;
    } else {
     $retval$0$i$i12$i$i = $call$i$i9$i$i68;
    }
   } else {
    $29 = HEAP32[$24>>2]|0;
    $retval$0$i$i12$i$i = $29;
   }
   $cmp$i1$i13$i$i = ($retval$0$i$i12$i$i|0)==(-1);
   if ($cmp$i1$i13$i$i) {
    HEAP32[$__e>>2] = 0;
    $$pre$i15$i$i126 = 0;$31 = 1;
   } else {
    $$pre$i15$i$i126 = $23;$31 = 0;
   }
  }
  $cmptmp$i$i = $30 ^ $31;
  $cmp14 = ($__n_might_match$2|0)!=(0);
  $cmp14$ = $cmptmp$i$i & $cmp14;
  $32 = HEAP32[$__b>>2]|0;
  if (!($cmp14$)) {
   label = 68;
   break;
  }
  $__ninp_$i$i = (($32) + 12|0);
  $33 = HEAP32[$__ninp_$i$i>>2]|0;
  $__einp_$i$i = (($32) + 16|0);
  $34 = HEAP32[$__einp_$i$i>>2]|0;
  $cmp$i$i = ($33|0)==($34|0);
  if ($cmp$i$i) {
   $vtable$i$i = HEAP32[$32>>2]|0;
   $vfn$i$i = (($vtable$i$i) + 36|0);
   $35 = HEAP32[$vfn$i$i>>2]|0;
   __THREW__ = 0;
   $call$i$i69 = (invoke_ii($35|0,($32|0))|0);
   $36 = __THREW__; __THREW__ = 0;
   $37 = $36&1;
   if ($37) {
    label = 6;
    break;
   } else {
    $retval$0$i$i = $call$i$i69;
   }
  } else {
   $38 = HEAP32[$33>>2]|0;
   $retval$0$i$i = $38;
  }
  if ($__case_sensitive) {
   $__c$0 = $retval$0$i$i;
  } else {
   $vtable$i = HEAP32[$__ct>>2]|0;
   $vfn$i = (($vtable$i) + 28|0);
   $39 = HEAP32[$vfn$i>>2]|0;
   __THREW__ = 0;
   $call$i70 = (invoke_iii($39|0,($__ct|0),($retval$0$i$i|0))|0);
   $40 = __THREW__; __THREW__ = 0;
   $41 = $40&1;
   if ($41) {
    label = 6;
    break;
   } else {
    $__c$0 = $call$i70;
   }
  }
  $inc77$pre = (($__indx$0) + 1)|0;
  if ($cmp6180) {
   $__n_might_match$2$phi = $__n_might_match$2;$__n_does_match$2$phi = $__n_does_match$2;$__indx$0 = $inc77$pre;$__n_might_match$2 = $__n_might_match$2$phi;$__n_does_match$2 = $__n_does_match$2$phi;
   continue;
  } else {
   $__consume$0$off0162 = 0;$__ky22$0163 = $__kb;$__n_does_match$3159 = $__n_does_match$2;$__n_might_match$3158 = $__n_might_match$2;$__st$1160 = $__status$0;
  }
  while(1) {
   $42 = HEAP8[$__st$1160>>0]|0;
   $cmp26 = ($42<<24>>24)==(1);
   do {
    if ($cmp26) {
     $43 = HEAP8[$__ky22$0163>>0]|0;
     $and$i$i$i$i = $43 & 1;
     $tobool$i$i$i$i = ($and$i$i$i$i<<24>>24)==(0);
     if ($tobool$i$i$i$i) {
      $__data_$i$i$i$i = (($__ky22$0163) + 4|0);
      $cond$i$i$i = $__data_$i$i$i$i;
     } else {
      $__data_$i1$i$i$i = (($__ky22$0163) + 8|0);
      $44 = HEAP32[$__data_$i1$i$i$i>>2]|0;
      $cond$i$i$i = $44;
     }
     $add$ptr$i = (($cond$i$i$i) + ($__indx$0<<2)|0);
     $45 = HEAP32[$add$ptr$i>>2]|0;
     if ($__case_sensitive) {
      $__kc$0 = $45;
     } else {
      $vtable$i71 = HEAP32[$__ct>>2]|0;
      $vfn$i72 = (($vtable$i71) + 28|0);
      $46 = HEAP32[$vfn$i72>>2]|0;
      __THREW__ = 0;
      $call$i73 = (invoke_iii($46|0,($__ct|0),($45|0))|0);
      $47 = __THREW__; __THREW__ = 0;
      $48 = $47&1;
      if ($48) {
       label = 5;
       break L19;
      } else {
       $__kc$0 = $call$i73;
      }
     }
     $cmp35 = ($__c$0|0)==($__kc$0|0);
     if (!($cmp35)) {
      HEAP8[$__st$1160>>0] = 0;
      $dec44 = (($__n_might_match$3158) + -1)|0;
      $__consume$1$off0 = $__consume$0$off0162;$__n_does_match$4 = $__n_does_match$3159;$__n_might_match$4 = $dec44;
      break;
     }
     $49 = HEAP8[$__ky22$0163>>0]|0;
     $and$i$i = $49 & 1;
     $tobool$i$i = ($and$i$i<<24>>24)==(0);
     if ($tobool$i$i) {
      $conv$i$i = $49&255;
      $shr1$i$i = $conv$i$i >>> 1;
      $cond$i = $shr1$i$i;
     } else {
      $__size_$i2$i = (($__ky22$0163) + 4|0);
      $50 = HEAP32[$__size_$i2$i>>2]|0;
      $cond$i = $50;
     }
     $cmp38 = ($cond$i|0)==($inc77$pre|0);
     if ($cmp38) {
      HEAP8[$__st$1160>>0] = 2;
      $dec40 = (($__n_might_match$3158) + -1)|0;
      $inc41 = (($__n_does_match$3159) + 1)|0;
      $__consume$1$off0 = 1;$__n_does_match$4 = $inc41;$__n_might_match$4 = $dec40;
     } else {
      $__consume$1$off0 = 1;$__n_does_match$4 = $__n_does_match$3159;$__n_might_match$4 = $__n_might_match$3158;
     }
    } else {
     $__consume$1$off0 = $__consume$0$off0162;$__n_does_match$4 = $__n_does_match$3159;$__n_might_match$4 = $__n_might_match$3158;
    }
   } while(0);
   $incdec$ptr48 = (($__ky22$0163) + 12|0);
   $cmp24 = ($incdec$ptr48|0)==($__ke|0);
   if ($cmp24) {
    break;
   }
   $incdec$ptr49 = (($__st$1160) + 1|0);
   $__consume$0$off0162 = $__consume$1$off0;$__ky22$0163 = $incdec$ptr48;$__n_does_match$3159 = $__n_does_match$4;$__n_might_match$3158 = $__n_might_match$4;$__st$1160 = $incdec$ptr49;
  }
  if (!($__consume$1$off0)) {
   $__indx$0 = $inc77$pre;$__n_does_match$2 = $__n_does_match$4;$__n_might_match$2 = $__n_might_match$4;
   continue;
  }
  $51 = HEAP32[$__b>>2]|0;
  $__ninp_$i$i76 = (($51) + 12|0);
  $52 = HEAP32[$__ninp_$i$i76>>2]|0;
  $__einp_$i$i77 = (($51) + 16|0);
  $53 = HEAP32[$__einp_$i$i77>>2]|0;
  $cmp$i$i78 = ($52|0)==($53|0);
  if ($cmp$i$i78) {
   $vtable$i$i79 = HEAP32[$51>>2]|0;
   $vfn$i$i80 = (($vtable$i$i79) + 40|0);
   $54 = HEAP32[$vfn$i$i80>>2]|0;
   __THREW__ = 0;
   (invoke_ii($54|0,($51|0))|0);
   $55 = __THREW__; __THREW__ = 0;
   $56 = $55&1;
   if ($56) {
    label = 6;
    break;
   }
  } else {
   $incdec$ptr$i$i = (($52) + 4|0);
   HEAP32[$__ninp_$i$i76>>2] = $incdec$ptr$i$i;
  }
  $add55 = (($__n_does_match$4) + ($__n_might_match$4))|0;
  $cmp56$not = ($add55>>>0)<(2);
  if ($cmp56$not) {
   $__indx$0 = $inc77$pre;$__n_does_match$2 = $__n_does_match$4;$__n_might_match$2 = $__n_might_match$4;
   continue;
  } else {
   $__ky58$0171 = $__kb;$__n_does_match$5169 = $__n_does_match$4;$__st$2170 = $__status$0;
  }
  while(1) {
   $57 = HEAP8[$__st$2170>>0]|0;
   $cmp63 = ($57<<24>>24)==(2);
   if ($cmp63) {
    $58 = HEAP8[$__ky58$0171>>0]|0;
    $and$i$i86 = $58 & 1;
    $tobool$i$i87 = ($and$i$i86<<24>>24)==(0);
    if ($tobool$i$i87) {
     $conv$i$i90 = $58&255;
     $shr1$i$i91 = $conv$i$i90 >>> 1;
     $cond$i93 = $shr1$i$i91;
    } else {
     $__size_$i2$i88 = (($__ky58$0171) + 4|0);
     $59 = HEAP32[$__size_$i2$i88>>2]|0;
     $cond$i93 = $59;
    }
    $cmp66 = ($cond$i93|0)==($inc77$pre|0);
    if ($cmp66) {
     $__n_does_match$6 = $__n_does_match$5169;
    } else {
     HEAP8[$__st$2170>>0] = 0;
     $dec68 = (($__n_does_match$5169) + -1)|0;
     $__n_does_match$6 = $dec68;
    }
   } else {
    $__n_does_match$6 = $__n_does_match$5169;
   }
   $incdec$ptr71 = (($__ky58$0171) + 12|0);
   $incdec$ptr72 = (($__st$2170) + 1|0);
   $cmp60 = ($incdec$ptr71|0)==($__ke|0);
   if ($cmp60) {
    $__indx$0 = $inc77$pre;$__n_does_match$2 = $__n_does_match$6;$__n_might_match$2 = $__n_might_match$4;
    continue L19;
   } else {
    $__ky58$0171 = $incdec$ptr71;$__n_does_match$5169 = $__n_does_match$6;$__st$2170 = $incdec$ptr72;
   }
  }
 }
 if ((label|0) == 5) {
  $4 = ___cxa_find_matching_catch()|0;
  $5 = tempRet0;
  $lpad$phi$index = $4;$lpad$phi$index3 = $5;
 }
 else if ((label|0) == 6) {
  $6 = ___cxa_find_matching_catch()|0;
  $7 = tempRet0;
  $lpad$phi$index = $6;$lpad$phi$index3 = $7;
 }
 else if ((label|0) == 68) {
  $tobool$i$i$i96 = ($32|0)==(0|0);
  do {
   if ($tobool$i$i$i96) {
    $80 = 1;
    label = 75;
   } else {
    $__ninp_$i$i$i$i97 = (($32) + 12|0);
    $60 = HEAP32[$__ninp_$i$i$i$i97>>2]|0;
    $__einp_$i$i$i$i98 = (($32) + 16|0);
    $61 = HEAP32[$__einp_$i$i$i$i98>>2]|0;
    $cmp$i$i$i$i99 = ($60|0)==($61|0);
    if ($cmp$i$i$i$i99) {
     $vtable$i$i$i$i101 = HEAP32[$32>>2]|0;
     $vfn$i$i$i$i102 = (($vtable$i$i$i$i101) + 36|0);
     $62 = HEAP32[$vfn$i$i$i$i102>>2]|0;
     __THREW__ = 0;
     $call$i$i$i$i133 = (invoke_ii($62|0,($32|0))|0);
     $63 = __THREW__; __THREW__ = 0;
     $64 = $63&1;
     if ($64) {
      break;
     } else {
      $retval$0$i$i$i$i105 = $call$i$i$i$i133;
     }
    } else {
     $65 = HEAP32[$60>>2]|0;
     $retval$0$i$i$i$i105 = $65;
    }
    $cmp$i1$i$i$i106 = ($retval$0$i$i$i$i105|0)==(-1);
    if ($cmp$i1$i$i$i106) {
     HEAP32[$__b>>2] = 0;
     $80 = 1;
     label = 75;
     break;
    } else {
     $$pre$i$i$i108 = HEAP32[$__b>>2]|0;
     $phitmp$i$i$i109 = ($$pre$i$i$i108|0)==(0|0);
     $80 = $phitmp$i$i$i109;
     label = 75;
     break;
    }
   }
  } while(0);
  L97: do {
   if ((label|0) == 75) {
    $tobool$i2$i$i113 = ($$pre$i15$i$i126|0)==(0|0);
    do {
     if ($tobool$i2$i$i113) {
      label = 81;
     } else {
      $__ninp_$i$i3$i$i115 = (($$pre$i15$i$i126) + 12|0);
      $66 = HEAP32[$__ninp_$i$i3$i$i115>>2]|0;
      $__einp_$i$i4$i$i116 = (($$pre$i15$i$i126) + 16|0);
      $67 = HEAP32[$__einp_$i$i4$i$i116>>2]|0;
      $cmp$i$i5$i$i117 = ($66|0)==($67|0);
      if ($cmp$i$i5$i$i117) {
       $vtable$i$i7$i$i119 = HEAP32[$$pre$i15$i$i126>>2]|0;
       $vfn$i$i8$i$i120 = (($vtable$i$i7$i$i119) + 36|0);
       $68 = HEAP32[$vfn$i$i8$i$i120>>2]|0;
       __THREW__ = 0;
       $call$i$i9$i$i135 = (invoke_ii($68|0,($$pre$i15$i$i126|0))|0);
       $69 = __THREW__; __THREW__ = 0;
       $70 = $69&1;
       if ($70) {
        break L97;
       } else {
        $retval$0$i$i12$i$i123 = $call$i$i9$i$i135;
       }
      } else {
       $71 = HEAP32[$66>>2]|0;
       $retval$0$i$i12$i$i123 = $71;
      }
      $cmp$i1$i13$i$i124 = ($retval$0$i$i12$i$i123|0)==(-1);
      if ($cmp$i1$i13$i$i124) {
       HEAP32[$__e>>2] = 0;
       label = 81;
       break;
      } else {
       if ($80) {
        break;
       } else {
        label = 83;
        break;
       }
      }
     }
    } while(0);
    if ((label|0) == 81) {
     if ($80) {
      label = 83;
     }
    }
    if ((label|0) == 83) {
     $72 = HEAP32[$__err>>2]|0;
     $or = $72 | 2;
     HEAP32[$__err>>2] = $or;
    }
    L113: do {
     if ($cmp6180) {
      label = 88;
     } else {
      $73 = HEAP8[$__status$0>>0]|0;
      $cmp87192 = ($73<<24>>24)==(2);
      if ($cmp87192) {
       $__kb$addr$0147 = $__kb;
      } else {
       $__kb$addr$0150193 = $__kb;$__st$3149194 = $__status$0;
       while(1) {
        $incdec$ptr91 = (($__kb$addr$0150193) + 12|0);
        $cmp84 = ($incdec$ptr91|0)==($__ke|0);
        $incdec$ptr92 = (($__st$3149194) + 1|0);
        if ($cmp84) {
         label = 88;
         break L113;
        }
        $74 = HEAP8[$incdec$ptr92>>0]|0;
        $cmp87 = ($74<<24>>24)==(2);
        if ($cmp87) {
         $__kb$addr$0147 = $incdec$ptr91;
         break;
        } else {
         $__kb$addr$0150193 = $incdec$ptr91;$__st$3149194 = $incdec$ptr92;
        }
       }
      }
     }
    } while(0);
    if ((label|0) == 88) {
     $75 = HEAP32[$__err>>2]|0;
     $or96 = $75 | 4;
     HEAP32[$__err>>2] = $or96;
     $__kb$addr$0147 = $__ke;
    }
    $tobool$i$i$i = ($call1140|0)==(0|0);
    if ($tobool$i$i$i) {
     STACKTOP = sp;return ($__kb$addr$0147|0);
    }
    __THREW__ = 0;
    invoke_vi(384,($call1140|0));
    $76 = __THREW__; __THREW__ = 0;
    $77 = $76&1;
    if ($77) {
     $78 = ___cxa_find_matching_catch(0|0)|0;
     $79 = tempRet0;
     ___clang_call_terminate($78);
     // unreachable;
    } else {
     STACKTOP = sp;return ($__kb$addr$0147|0);
    }
   }
  } while(0);
  $8 = ___cxa_find_matching_catch()|0;
  $9 = tempRet0;
  $lpad$phi$index = $8;$lpad$phi$index3 = $9;
 }
 $tobool$i$i$i59 = ($call1140|0)==(0|0);
 if ($tobool$i$i$i59) {
  $$index = $lpad$phi$index;$$index10 = $lpad$phi$index3;
  ___resumeException($$index|0);
  // unreachable;
 }
 __THREW__ = 0;
 invoke_vi(384,($call1140|0));
 $10 = __THREW__; __THREW__ = 0;
 $11 = $10&1;
 if ($11) {
  $12 = ___cxa_find_matching_catch(0|0)|0;
  $13 = tempRet0;
  ___clang_call_terminate($12);
  // unreachable;
 } else {
  $$index = $lpad$phi$index;$$index10 = $lpad$phi$index3;
  ___resumeException($$index|0);
  // unreachable;
 }
 return 0|0;
}
function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRl($agg$result,$this,$__b,$__e,$__iob,$__err,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $0 = 0, $1 = 0, $agg$tmp = 0, $agg$tmp$byval_copy = 0, $agg$tmp2 = 0, $agg$tmp2$byval_copy = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $agg$tmp2$byval_copy = sp + 12|0;
 $agg$tmp$byval_copy = sp + 8|0;
 $agg$tmp = sp + 4|0;
 $agg$tmp2 = sp;
 $0 = HEAP32[$__b>>2]|0;
 HEAP32[$agg$tmp>>2] = $0;
 $1 = HEAP32[$__e>>2]|0;
 HEAP32[$agg$tmp2>>2] = $1;
 ;HEAP32[$agg$tmp$byval_copy+0>>2]=HEAP32[$agg$tmp+0>>2]|0;
 ;HEAP32[$agg$tmp2$byval_copy+0>>2]=HEAP32[$agg$tmp2+0>>2]|0;
 __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE15__do_get_signedIlEES4_S4_S4_RNS_8ios_baseERjRT_($agg$result,0,$agg$tmp$byval_copy,$agg$tmp2$byval_copy,$__iob,$__err,$__v);
 STACKTOP = sp;return;
}
function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE15__do_get_signedIlEES4_S4_S4_RNS_8ios_baseERjRT_($agg$result,$this,$__b,$__e,$__iob,$__err,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$pre = 0, $$pre$i$i$i25 = 0, $$pre$i15$i$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $8 = 0, $9 = 0, $__a$0 = 0, $__a$1 = 0, $__a$2 = 0, $__a_end = 0, $__atoms = 0, $__buf = 0;
 var $__data_$i$i$i = 0, $__data_$i$i$i103$pre = 0, $__data_$i$i$i103$pre$phiZZZZ2D = 0, $__dc = 0, $__einp_$i$i$i$i = 0, $__einp_$i$i$i$i15 = 0, $__einp_$i$i112 = 0, $__einp_$i$i4$i$i = 0, $__einp_$i$i4$i$i33 = 0, $__g = 0, $__g_end = 0, $__grouping = 0, $__ninp_$i$i$i$i = 0, $__ninp_$i$i$i$i14 = 0, $__ninp_$i$i111 = 0, $__ninp_$i$i3$i$i = 0, $__ninp_$i$i3$i$i32 = 0, $__size_$i2$i70 = 0, $__size_$i2$i80 = 0, $__thousands_sep = 0;
 var $add$ptr = 0, $and$i$i$i = 0, $and$i$i$i101 = 0, $and$i$i53 = 0, $and$i$i78 = 0, $and$i$i91 = 0, $and$i1$i94 = 0, $arrayidx$i$i$i = 0, $arrayidx$i$i$i106$pre = 0, $arrayidx$i$i$i106$pre$phiZZZZ2D = 0, $call = 0, $call$i$i$i$i49 = 0, $call$i$i$i$i9 = 0, $call$i$i119 = 0, $call$i$i9$i$i10 = 0, $call$i$i9$i$i51 = 0, $call21 = 0, $call36 = 0, $cmp = 0, $cmp$i$i$i$i = 0;
 var $cmp$i$i$i$i16 = 0, $cmp$i$i113 = 0, $cmp$i$i5$i$i = 0, $cmp$i$i5$i$i34 = 0, $cmp$i$i87 = 0, $cmp$i1$i$i$i = 0, $cmp$i1$i$i$i23 = 0, $cmp$i1$i13$i$i = 0, $cmp$i1$i13$i$i41 = 0, $cmp27 = 0, $cmp32 = 0, $cond$i$i = 0, $cond$i$i108 = 0, $cond$i56 = 0, $cond$i65124 = 0, $cond$i75 = 0, $cond$i85 = 0, $cond$i97 = 0, $conv$i$i = 0, $conv$i$i62 = 0;
 var $conv$i$i72 = 0, $conv$i$i82 = 0, $incdec$ptr = 0, $incdec$ptr$i$i = 0, $lpad$phi$index = 0, $lpad$phi$index2 = 0, $mul = 0, $or = 0, $phitmp$i95 = 0, $retval$0$i$i = 0, $retval$0$i$i$i$i = 0, $retval$0$i$i$i$i22 = 0, $retval$0$i$i12$i$i = 0, $retval$0$i$i12$i$i40 = 0, $shr1$i$i = 0, $shr1$i$i63 = 0, $shr1$i$i73 = 0, $shr1$i$i83 = 0, $sub$ptr$lhs$cast = 0, $sub$ptr$lhs$cast29 = 0;
 var $sub$ptr$rhs$cast = 0, $sub$ptr$rhs$cast30 = 0, $sub$ptr$sub = 0, $sub$ptr$sub31 = 0, $tobool = 0, $tobool$i$i$i = 0, $tobool$i$i$i102 = 0, $tobool$i$i$i11 = 0, $tobool$i$i$i13 = 0, $tobool$i$i54 = 0, $tobool$i$i79 = 0, $tobool$i$i92 = 0, $tobool$i2$i$i = 0, $tobool$i2$i$i30 = 0, $vfn$i$i = 0, $vfn$i$i$i$i = 0, $vfn$i$i$i$i19 = 0, $vfn$i$i115 = 0, $vfn$i$i8$i$i = 0, $vfn$i$i8$i$i37 = 0;
 var $vtable$i$i = 0, $vtable$i$i$i$i = 0, $vtable$i$i$i$i18 = 0, $vtable$i$i114 = 0, $vtable$i$i7$i$i = 0, $vtable$i$i7$i$i36 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 304|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__atoms = sp + 160|0;
 $__thousands_sep = sp + 280|0;
 $__grouping = sp + 264|0;
 $__buf = sp + 284|0;
 $__a_end = sp + 300|0;
 $__g = sp;
 $__g_end = sp + 276|0;
 $__dc = sp + 296|0;
 $call = (__ZNSt3__114__num_get_base10__get_baseERNS_8ios_baseE($__iob)|0);
 __ZNSt3__19__num_getIwE17__stage2_int_prepERNS_8ios_baseEPwRw($__grouping,$__iob,$__atoms,$__thousands_sep);
 ;HEAP32[$__buf+0>>2]=0|0;HEAP32[$__buf+4>>2]=0|0;HEAP32[$__buf+8>>2]=0|0;
 __THREW__ = 0;
 invoke_viii(385,($__buf|0),10,0);
 $0 = __THREW__; __THREW__ = 0;
 $1 = $0&1;
 L1: do {
  if (!($1)) {
   $2 = HEAP8[$__buf>>0]|0;
   $and$i$i$i = $2 & 1;
   $tobool$i$i$i11 = ($and$i$i$i<<24>>24)==(0);
   if ($tobool$i$i$i11) {
    $arrayidx$i$i$i = (($__buf) + 1|0);
    $__data_$i$i$i103$pre = (($__buf) + 8|0);
    $__data_$i$i$i103$pre$phiZZZZ2D = $__data_$i$i$i103$pre;$arrayidx$i$i$i106$pre$phiZZZZ2D = $arrayidx$i$i$i;$cond$i$i = $arrayidx$i$i$i;
   } else {
    $__data_$i$i$i = (($__buf) + 8|0);
    $3 = HEAP32[$__data_$i$i$i>>2]|0;
    $arrayidx$i$i$i106$pre = (($__buf) + 1|0);
    $__data_$i$i$i103$pre$phiZZZZ2D = $__data_$i$i$i;$arrayidx$i$i$i106$pre$phiZZZZ2D = $arrayidx$i$i$i106$pre;$cond$i$i = $3;
   }
   HEAP32[$__a_end>>2] = $cond$i$i;
   HEAP32[$__g_end>>2] = $__g;
   HEAP32[$__dc>>2] = 0;
   $__size_$i2$i70 = (($__buf) + 4|0);
   $4 = HEAP32[$__thousands_sep>>2]|0;
   $$pre = HEAP32[$__b>>2]|0;
   $$pre$i$i$i25 = $$pre;$__a$0 = $cond$i$i;
   L7: while(1) {
    $tobool$i$i$i13 = ($$pre$i$i$i25|0)==(0|0);
    if ($tobool$i$i$i13) {
     $34 = 0;$68 = 1;
    } else {
     $__ninp_$i$i$i$i14 = (($$pre$i$i$i25) + 12|0);
     $5 = HEAP32[$__ninp_$i$i$i$i14>>2]|0;
     $__einp_$i$i$i$i15 = (($$pre$i$i$i25) + 16|0);
     $6 = HEAP32[$__einp_$i$i$i$i15>>2]|0;
     $cmp$i$i$i$i16 = ($5|0)==($6|0);
     if ($cmp$i$i$i$i16) {
      $vtable$i$i$i$i18 = HEAP32[$$pre$i$i$i25>>2]|0;
      $vfn$i$i$i$i19 = (($vtable$i$i$i$i18) + 36|0);
      $7 = HEAP32[$vfn$i$i$i$i19>>2]|0;
      __THREW__ = 0;
      $call$i$i$i$i49 = (invoke_ii($7|0,($$pre$i$i$i25|0))|0);
      $8 = __THREW__; __THREW__ = 0;
      $9 = $8&1;
      if ($9) {
       label = 34;
       break;
      } else {
       $retval$0$i$i$i$i22 = $call$i$i$i$i49;
      }
     } else {
      $10 = HEAP32[$5>>2]|0;
      $retval$0$i$i$i$i22 = $10;
     }
     $cmp$i1$i$i$i23 = ($retval$0$i$i$i$i22|0)==(-1);
     if ($cmp$i1$i$i$i23) {
      HEAP32[$__b>>2] = 0;
      $34 = 0;$68 = 1;
     } else {
      $34 = $$pre$i$i$i25;$68 = 0;
     }
    }
    $11 = HEAP32[$__e>>2]|0;
    $tobool$i2$i$i30 = ($11|0)==(0|0);
    do {
     if ($tobool$i2$i$i30) {
      label = 18;
     } else {
      $__ninp_$i$i3$i$i32 = (($11) + 12|0);
      $12 = HEAP32[$__ninp_$i$i3$i$i32>>2]|0;
      $__einp_$i$i4$i$i33 = (($11) + 16|0);
      $13 = HEAP32[$__einp_$i$i4$i$i33>>2]|0;
      $cmp$i$i5$i$i34 = ($12|0)==($13|0);
      if ($cmp$i$i5$i$i34) {
       $vtable$i$i7$i$i36 = HEAP32[$11>>2]|0;
       $vfn$i$i8$i$i37 = (($vtable$i$i7$i$i36) + 36|0);
       $14 = HEAP32[$vfn$i$i8$i$i37>>2]|0;
       __THREW__ = 0;
       $call$i$i9$i$i51 = (invoke_ii($14|0,($11|0))|0);
       $15 = __THREW__; __THREW__ = 0;
       $16 = $15&1;
       if ($16) {
        label = 34;
        break L7;
       } else {
        $retval$0$i$i12$i$i40 = $call$i$i9$i$i51;
       }
      } else {
       $17 = HEAP32[$12>>2]|0;
       $retval$0$i$i12$i$i40 = $17;
      }
      $cmp$i1$i13$i$i41 = ($retval$0$i$i12$i$i40|0)==(-1);
      if ($cmp$i1$i13$i$i41) {
       HEAP32[$__e>>2] = 0;
       label = 18;
       break;
      } else {
       if ($68) {
        $69 = $11;
        break;
       } else {
        $$pre$i15$i$i = $11;$__a$2 = $__a$0;
        break L7;
       }
      }
     }
    } while(0);
    if ((label|0) == 18) {
     label = 0;
     if ($68) {
      $$pre$i15$i$i = 0;$__a$2 = $__a$0;
      break;
     } else {
      $69 = 0;
     }
    }
    $18 = HEAP32[$__a_end>>2]|0;
    $sub$ptr$lhs$cast = $18;
    $sub$ptr$rhs$cast = $__a$0;
    $sub$ptr$sub = (($sub$ptr$lhs$cast) - ($sub$ptr$rhs$cast))|0;
    $19 = HEAP8[$__buf>>0]|0;
    $and$i$i53 = $19 & 1;
    $tobool$i$i54 = ($and$i$i53<<24>>24)==(0);
    if ($tobool$i$i54) {
     $conv$i$i = $19&255;
     $shr1$i$i = $conv$i$i >>> 1;
     $cond$i56 = $shr1$i$i;
    } else {
     $20 = HEAP32[$__size_$i2$i70>>2]|0;
     $cond$i56 = $20;
    }
    $cmp = ($sub$ptr$sub|0)==($cond$i56|0);
    if ($cmp) {
     if ($tobool$i$i54) {
      $conv$i$i62 = $19&255;
      $shr1$i$i63 = $conv$i$i62 >>> 1;
      $conv$i$i72 = $19&255;
      $shr1$i$i73 = $conv$i$i72 >>> 1;
      $cond$i65124 = $shr1$i$i63;$cond$i75 = $shr1$i$i73;
     } else {
      $21 = HEAP32[$__size_$i2$i70>>2]|0;
      $cond$i65124 = $21;$cond$i75 = $21;
     }
     $mul = $cond$i75 << 1;
     __THREW__ = 0;
     invoke_viii(385,($__buf|0),($mul|0),0);
     $22 = __THREW__; __THREW__ = 0;
     $23 = $22&1;
     if ($23) {
      label = 34;
      break;
     }
     $24 = HEAP8[$__buf>>0]|0;
     $and$i$i91 = $24 & 1;
     $tobool$i$i92 = ($and$i$i91<<24>>24)==(0);
     if ($tobool$i$i92) {
      $cond$i97 = 10;
     } else {
      $25 = HEAP32[$__buf>>2]|0;
      $and$i1$i94 = $25 & -2;
      $phitmp$i95 = (($and$i1$i94) + -1)|0;
      $cond$i97 = $phitmp$i95;
     }
     __THREW__ = 0;
     invoke_viii(385,($__buf|0),($cond$i97|0),0);
     $26 = __THREW__; __THREW__ = 0;
     $27 = $26&1;
     if ($27) {
      label = 34;
      break;
     }
     $28 = HEAP8[$__buf>>0]|0;
     $and$i$i$i101 = $28 & 1;
     $tobool$i$i$i102 = ($and$i$i$i101<<24>>24)==(0);
     if ($tobool$i$i$i102) {
      $cond$i$i108 = $arrayidx$i$i$i106$pre$phiZZZZ2D;
     } else {
      $29 = HEAP32[$__data_$i$i$i103$pre$phiZZZZ2D>>2]|0;
      $cond$i$i108 = $29;
     }
     $add$ptr = (($cond$i$i108) + ($cond$i65124)|0);
     HEAP32[$__a_end>>2] = $add$ptr;
     $__a$1 = $cond$i$i108;
    } else {
     $__a$1 = $__a$0;
    }
    $__ninp_$i$i111 = (($34) + 12|0);
    $35 = HEAP32[$__ninp_$i$i111>>2]|0;
    $__einp_$i$i112 = (($34) + 16|0);
    $36 = HEAP32[$__einp_$i$i112>>2]|0;
    $cmp$i$i113 = ($35|0)==($36|0);
    if ($cmp$i$i113) {
     $vtable$i$i114 = HEAP32[$34>>2]|0;
     $vfn$i$i115 = (($vtable$i$i114) + 36|0);
     $37 = HEAP32[$vfn$i$i115>>2]|0;
     __THREW__ = 0;
     $call$i$i119 = (invoke_ii($37|0,($34|0))|0);
     $38 = __THREW__; __THREW__ = 0;
     $39 = $38&1;
     if ($39) {
      label = 34;
      break;
     } else {
      $retval$0$i$i = $call$i$i119;
     }
    } else {
     $40 = HEAP32[$35>>2]|0;
     $retval$0$i$i = $40;
    }
    $call21 = (__ZNSt3__19__num_getIwE17__stage2_int_loopEwiPcRS2_RjwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_Pw($retval$0$i$i,$call,$__a$1,$__a_end,$__dc,$4,$__grouping,$__g,$__g_end,$__atoms)|0);
    $tobool = ($call21|0)==(0);
    if (!($tobool)) {
     $$pre$i15$i$i = $69;$__a$2 = $__a$1;
     break;
    }
    $41 = HEAP32[$__ninp_$i$i111>>2]|0;
    $42 = HEAP32[$__einp_$i$i112>>2]|0;
    $cmp$i$i87 = ($41|0)==($42|0);
    if ($cmp$i$i87) {
     $vtable$i$i = HEAP32[$34>>2]|0;
     $vfn$i$i = (($vtable$i$i) + 40|0);
     $43 = HEAP32[$vfn$i$i>>2]|0;
     __THREW__ = 0;
     (invoke_ii($43|0,($34|0))|0);
     $44 = __THREW__; __THREW__ = 0;
     $45 = $44&1;
     if ($45) {
      label = 34;
      break;
     } else {
      $$pre$i$i$i25 = $34;$__a$0 = $__a$1;
      continue;
     }
    } else {
     $incdec$ptr$i$i = (($41) + 4|0);
     HEAP32[$__ninp_$i$i111>>2] = $incdec$ptr$i$i;
     $$pre$i$i$i25 = $34;$__a$0 = $__a$1;
     continue;
    }
   }
   if ((label|0) == 34) {
    $30 = ___cxa_find_matching_catch()|0;
    $31 = tempRet0;
    $lpad$phi$index = $30;$lpad$phi$index2 = $31;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
    ___resumeException($lpad$phi$index|0);
    // unreachable;
   }
   $46 = HEAP8[$__grouping>>0]|0;
   $and$i$i78 = $46 & 1;
   $tobool$i$i79 = ($and$i$i78<<24>>24)==(0);
   if ($tobool$i$i79) {
    $conv$i$i82 = $46&255;
    $shr1$i$i83 = $conv$i$i82 >>> 1;
    $cond$i85 = $shr1$i$i83;
   } else {
    $__size_$i2$i80 = (($__grouping) + 4|0);
    $47 = HEAP32[$__size_$i2$i80>>2]|0;
    $cond$i85 = $47;
   }
   $cmp27 = ($cond$i85|0)==(0);
   if (!($cmp27)) {
    $48 = HEAP32[$__g_end>>2]|0;
    $sub$ptr$lhs$cast29 = $48;
    $sub$ptr$rhs$cast30 = $__g;
    $sub$ptr$sub31 = (($sub$ptr$lhs$cast29) - ($sub$ptr$rhs$cast30))|0;
    $cmp32 = ($sub$ptr$sub31|0)<(160);
    if ($cmp32) {
     $49 = HEAP32[$__dc>>2]|0;
     $incdec$ptr = (($48) + 4|0);
     HEAP32[$__g_end>>2] = $incdec$ptr;
     HEAP32[$48>>2] = $49;
    }
   }
   $50 = HEAP32[$__a_end>>2]|0;
   __THREW__ = 0;
   $call36 = (invoke_iiiii(386,($__a$2|0),($50|0),($__err|0),($call|0))|0);
   $51 = __THREW__; __THREW__ = 0;
   $52 = $51&1;
   if (!($52)) {
    HEAP32[$__v>>2] = $call36;
    $53 = HEAP32[$__g_end>>2]|0;
    __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping,$__g,$53,$__err);
    $tobool$i$i$i = ($34|0)==(0|0);
    if ($tobool$i$i$i) {
     $67 = 0;$70 = 1;
    } else {
     $__ninp_$i$i$i$i = (($34) + 12|0);
     $54 = HEAP32[$__ninp_$i$i$i$i>>2]|0;
     $__einp_$i$i$i$i = (($34) + 16|0);
     $55 = HEAP32[$__einp_$i$i$i$i>>2]|0;
     $cmp$i$i$i$i = ($54|0)==($55|0);
     if ($cmp$i$i$i$i) {
      $vtable$i$i$i$i = HEAP32[$34>>2]|0;
      $vfn$i$i$i$i = (($vtable$i$i$i$i) + 36|0);
      $56 = HEAP32[$vfn$i$i$i$i>>2]|0;
      __THREW__ = 0;
      $call$i$i$i$i9 = (invoke_ii($56|0,($34|0))|0);
      $57 = __THREW__; __THREW__ = 0;
      $58 = $57&1;
      if ($58) {
       break;
      } else {
       $retval$0$i$i$i$i = $call$i$i$i$i9;
      }
     } else {
      $59 = HEAP32[$54>>2]|0;
      $retval$0$i$i$i$i = $59;
     }
     $cmp$i1$i$i$i = ($retval$0$i$i$i$i|0)==(-1);
     if ($cmp$i1$i$i$i) {
      HEAP32[$__b>>2] = 0;
      $67 = 0;$70 = 1;
     } else {
      $67 = $34;$70 = 0;
     }
    }
    $tobool$i2$i$i = ($$pre$i15$i$i|0)==(0|0);
    do {
     if ($tobool$i2$i$i) {
      label = 63;
     } else {
      $__ninp_$i$i3$i$i = (($$pre$i15$i$i) + 12|0);
      $60 = HEAP32[$__ninp_$i$i3$i$i>>2]|0;
      $__einp_$i$i4$i$i = (($$pre$i15$i$i) + 16|0);
      $61 = HEAP32[$__einp_$i$i4$i$i>>2]|0;
      $cmp$i$i5$i$i = ($60|0)==($61|0);
      if ($cmp$i$i5$i$i) {
       $vtable$i$i7$i$i = HEAP32[$$pre$i15$i$i>>2]|0;
       $vfn$i$i8$i$i = (($vtable$i$i7$i$i) + 36|0);
       $62 = HEAP32[$vfn$i$i8$i$i>>2]|0;
       __THREW__ = 0;
       $call$i$i9$i$i10 = (invoke_ii($62|0,($$pre$i15$i$i|0))|0);
       $63 = __THREW__; __THREW__ = 0;
       $64 = $63&1;
       if ($64) {
        break L1;
       } else {
        $retval$0$i$i12$i$i = $call$i$i9$i$i10;
       }
      } else {
       $65 = HEAP32[$60>>2]|0;
       $retval$0$i$i12$i$i = $65;
      }
      $cmp$i1$i13$i$i = ($retval$0$i$i12$i$i|0)==(-1);
      if ($cmp$i1$i13$i$i) {
       HEAP32[$__e>>2] = 0;
       label = 63;
       break;
      }
      if ($70) {
       HEAP32[$agg$result>>2] = $67;
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
       STACKTOP = sp;return;
      }
     }
    } while(0);
    if ((label|0) == 63) {
     if (!($70)) {
      HEAP32[$agg$result>>2] = $67;
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
      STACKTOP = sp;return;
     }
    }
    $66 = HEAP32[$__err>>2]|0;
    $or = $66 | 2;
    HEAP32[$__err>>2] = $or;
    HEAP32[$agg$result>>2] = $67;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
    STACKTOP = sp;return;
   }
  }
 } while(0);
 $32 = ___cxa_find_matching_catch()|0;
 $33 = tempRet0;
 $lpad$phi$index = $32;$lpad$phi$index2 = $33;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
 ___resumeException($lpad$phi$index|0);
 // unreachable;
}
function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRx($agg$result,$this,$__b,$__e,$__iob,$__err,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $0 = 0, $1 = 0, $agg$tmp = 0, $agg$tmp$byval_copy = 0, $agg$tmp2 = 0, $agg$tmp2$byval_copy = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $agg$tmp2$byval_copy = sp + 12|0;
 $agg$tmp$byval_copy = sp + 8|0;
 $agg$tmp = sp + 4|0;
 $agg$tmp2 = sp;
 $0 = HEAP32[$__b>>2]|0;
 HEAP32[$agg$tmp>>2] = $0;
 $1 = HEAP32[$__e>>2]|0;
 HEAP32[$agg$tmp2>>2] = $1;
 ;HEAP32[$agg$tmp$byval_copy+0>>2]=HEAP32[$agg$tmp+0>>2]|0;
 ;HEAP32[$agg$tmp2$byval_copy+0>>2]=HEAP32[$agg$tmp2+0>>2]|0;
 __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE15__do_get_signedIxEES4_S4_S4_RNS_8ios_baseERjRT_($agg$result,0,$agg$tmp$byval_copy,$agg$tmp2$byval_copy,$__iob,$__err,$__v);
 STACKTOP = sp;return;
}
function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE15__do_get_signedIxEES4_S4_S4_RNS_8ios_baseERjRT_($agg$result,$this,$__b,$__e,$__iob,$__err,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$pre = 0, $$pre$i$i$i25 = 0, $$pre$i15$i$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $8 = 0, $9 = 0;
 var $__a$0 = 0, $__a$1 = 0, $__a$2 = 0, $__a_end = 0, $__atoms = 0, $__buf = 0, $__data_$i$i$i = 0, $__data_$i$i$i103$pre = 0, $__data_$i$i$i103$pre$phiZZZZ2D = 0, $__dc = 0, $__einp_$i$i$i$i = 0, $__einp_$i$i$i$i15 = 0, $__einp_$i$i112 = 0, $__einp_$i$i4$i$i = 0, $__einp_$i$i4$i$i33 = 0, $__g = 0, $__g_end = 0, $__grouping = 0, $__ninp_$i$i$i$i = 0, $__ninp_$i$i$i$i14 = 0;
 var $__ninp_$i$i111 = 0, $__ninp_$i$i3$i$i = 0, $__ninp_$i$i3$i$i32 = 0, $__size_$i2$i70 = 0, $__size_$i2$i80 = 0, $__thousands_sep = 0, $add$ptr = 0, $and$i$i$i = 0, $and$i$i$i101 = 0, $and$i$i53 = 0, $and$i$i78 = 0, $and$i$i91 = 0, $and$i1$i94 = 0, $arrayidx$i$i$i = 0, $arrayidx$i$i$i106$pre = 0, $arrayidx$i$i$i106$pre$phiZZZZ2D = 0, $call = 0, $call$i$i$i$i49 = 0, $call$i$i$i$i9 = 0, $call$i$i119 = 0;
 var $call$i$i9$i$i10 = 0, $call$i$i9$i$i51 = 0, $call21 = 0, $cmp = 0, $cmp$i$i$i$i = 0, $cmp$i$i$i$i16 = 0, $cmp$i$i113 = 0, $cmp$i$i5$i$i = 0, $cmp$i$i5$i$i34 = 0, $cmp$i$i87 = 0, $cmp$i1$i$i$i = 0, $cmp$i1$i$i$i23 = 0, $cmp$i1$i13$i$i = 0, $cmp$i1$i13$i$i41 = 0, $cmp27 = 0, $cmp32 = 0, $cond$i$i = 0, $cond$i$i108 = 0, $cond$i56 = 0, $cond$i65124 = 0;
 var $cond$i75 = 0, $cond$i85 = 0, $cond$i97 = 0, $conv$i$i = 0, $conv$i$i62 = 0, $conv$i$i72 = 0, $conv$i$i82 = 0, $incdec$ptr = 0, $incdec$ptr$i$i = 0, $lpad$phi$index = 0, $lpad$phi$index2 = 0, $mul = 0, $or = 0, $phitmp$i95 = 0, $retval$0$i$i = 0, $retval$0$i$i$i$i = 0, $retval$0$i$i$i$i22 = 0, $retval$0$i$i12$i$i = 0, $retval$0$i$i12$i$i40 = 0, $shr1$i$i = 0;
 var $shr1$i$i63 = 0, $shr1$i$i73 = 0, $shr1$i$i83 = 0, $sub$ptr$lhs$cast = 0, $sub$ptr$lhs$cast29 = 0, $sub$ptr$rhs$cast = 0, $sub$ptr$rhs$cast30 = 0, $sub$ptr$sub = 0, $sub$ptr$sub31 = 0, $tobool = 0, $tobool$i$i$i = 0, $tobool$i$i$i102 = 0, $tobool$i$i$i11 = 0, $tobool$i$i$i13 = 0, $tobool$i$i54 = 0, $tobool$i$i79 = 0, $tobool$i$i92 = 0, $tobool$i2$i$i = 0, $tobool$i2$i$i30 = 0, $vfn$i$i = 0;
 var $vfn$i$i$i$i = 0, $vfn$i$i$i$i19 = 0, $vfn$i$i115 = 0, $vfn$i$i8$i$i = 0, $vfn$i$i8$i$i37 = 0, $vtable$i$i = 0, $vtable$i$i$i$i = 0, $vtable$i$i$i$i18 = 0, $vtable$i$i114 = 0, $vtable$i$i7$i$i = 0, $vtable$i$i7$i$i36 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 304|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__atoms = sp + 160|0;
 $__thousands_sep = sp + 280|0;
 $__grouping = sp + 264|0;
 $__buf = sp + 284|0;
 $__a_end = sp + 300|0;
 $__g = sp;
 $__g_end = sp + 276|0;
 $__dc = sp + 296|0;
 $call = (__ZNSt3__114__num_get_base10__get_baseERNS_8ios_baseE($__iob)|0);
 __ZNSt3__19__num_getIwE17__stage2_int_prepERNS_8ios_baseEPwRw($__grouping,$__iob,$__atoms,$__thousands_sep);
 ;HEAP32[$__buf+0>>2]=0|0;HEAP32[$__buf+4>>2]=0|0;HEAP32[$__buf+8>>2]=0|0;
 __THREW__ = 0;
 invoke_viii(385,($__buf|0),10,0);
 $0 = __THREW__; __THREW__ = 0;
 $1 = $0&1;
 L1: do {
  if (!($1)) {
   $2 = HEAP8[$__buf>>0]|0;
   $and$i$i$i = $2 & 1;
   $tobool$i$i$i11 = ($and$i$i$i<<24>>24)==(0);
   if ($tobool$i$i$i11) {
    $arrayidx$i$i$i = (($__buf) + 1|0);
    $__data_$i$i$i103$pre = (($__buf) + 8|0);
    $__data_$i$i$i103$pre$phiZZZZ2D = $__data_$i$i$i103$pre;$arrayidx$i$i$i106$pre$phiZZZZ2D = $arrayidx$i$i$i;$cond$i$i = $arrayidx$i$i$i;
   } else {
    $__data_$i$i$i = (($__buf) + 8|0);
    $3 = HEAP32[$__data_$i$i$i>>2]|0;
    $arrayidx$i$i$i106$pre = (($__buf) + 1|0);
    $__data_$i$i$i103$pre$phiZZZZ2D = $__data_$i$i$i;$arrayidx$i$i$i106$pre$phiZZZZ2D = $arrayidx$i$i$i106$pre;$cond$i$i = $3;
   }
   HEAP32[$__a_end>>2] = $cond$i$i;
   HEAP32[$__g_end>>2] = $__g;
   HEAP32[$__dc>>2] = 0;
   $__size_$i2$i70 = (($__buf) + 4|0);
   $4 = HEAP32[$__thousands_sep>>2]|0;
   $$pre = HEAP32[$__b>>2]|0;
   $$pre$i$i$i25 = $$pre;$__a$0 = $cond$i$i;
   L7: while(1) {
    $tobool$i$i$i13 = ($$pre$i$i$i25|0)==(0|0);
    if ($tobool$i$i$i13) {
     $34 = 0;$74 = 1;
    } else {
     $__ninp_$i$i$i$i14 = (($$pre$i$i$i25) + 12|0);
     $5 = HEAP32[$__ninp_$i$i$i$i14>>2]|0;
     $__einp_$i$i$i$i15 = (($$pre$i$i$i25) + 16|0);
     $6 = HEAP32[$__einp_$i$i$i$i15>>2]|0;
     $cmp$i$i$i$i16 = ($5|0)==($6|0);
     if ($cmp$i$i$i$i16) {
      $vtable$i$i$i$i18 = HEAP32[$$pre$i$i$i25>>2]|0;
      $vfn$i$i$i$i19 = (($vtable$i$i$i$i18) + 36|0);
      $7 = HEAP32[$vfn$i$i$i$i19>>2]|0;
      __THREW__ = 0;
      $call$i$i$i$i49 = (invoke_ii($7|0,($$pre$i$i$i25|0))|0);
      $8 = __THREW__; __THREW__ = 0;
      $9 = $8&1;
      if ($9) {
       label = 34;
       break;
      } else {
       $retval$0$i$i$i$i22 = $call$i$i$i$i49;
      }
     } else {
      $10 = HEAP32[$5>>2]|0;
      $retval$0$i$i$i$i22 = $10;
     }
     $cmp$i1$i$i$i23 = ($retval$0$i$i$i$i22|0)==(-1);
     if ($cmp$i1$i$i$i23) {
      HEAP32[$__b>>2] = 0;
      $34 = 0;$74 = 1;
     } else {
      $34 = $$pre$i$i$i25;$74 = 0;
     }
    }
    $11 = HEAP32[$__e>>2]|0;
    $tobool$i2$i$i30 = ($11|0)==(0|0);
    do {
     if ($tobool$i2$i$i30) {
      label = 18;
     } else {
      $__ninp_$i$i3$i$i32 = (($11) + 12|0);
      $12 = HEAP32[$__ninp_$i$i3$i$i32>>2]|0;
      $__einp_$i$i4$i$i33 = (($11) + 16|0);
      $13 = HEAP32[$__einp_$i$i4$i$i33>>2]|0;
      $cmp$i$i5$i$i34 = ($12|0)==($13|0);
      if ($cmp$i$i5$i$i34) {
       $vtable$i$i7$i$i36 = HEAP32[$11>>2]|0;
       $vfn$i$i8$i$i37 = (($vtable$i$i7$i$i36) + 36|0);
       $14 = HEAP32[$vfn$i$i8$i$i37>>2]|0;
       __THREW__ = 0;
       $call$i$i9$i$i51 = (invoke_ii($14|0,($11|0))|0);
       $15 = __THREW__; __THREW__ = 0;
       $16 = $15&1;
       if ($16) {
        label = 34;
        break L7;
       } else {
        $retval$0$i$i12$i$i40 = $call$i$i9$i$i51;
       }
      } else {
       $17 = HEAP32[$12>>2]|0;
       $retval$0$i$i12$i$i40 = $17;
      }
      $cmp$i1$i13$i$i41 = ($retval$0$i$i12$i$i40|0)==(-1);
      if ($cmp$i1$i13$i$i41) {
       HEAP32[$__e>>2] = 0;
       label = 18;
       break;
      } else {
       if ($74) {
        $75 = $11;
        break;
       } else {
        $$pre$i15$i$i = $11;$__a$2 = $__a$0;
        break L7;
       }
      }
     }
    } while(0);
    if ((label|0) == 18) {
     label = 0;
     if ($74) {
      $$pre$i15$i$i = 0;$__a$2 = $__a$0;
      break;
     } else {
      $75 = 0;
     }
    }
    $18 = HEAP32[$__a_end>>2]|0;
    $sub$ptr$lhs$cast = $18;
    $sub$ptr$rhs$cast = $__a$0;
    $sub$ptr$sub = (($sub$ptr$lhs$cast) - ($sub$ptr$rhs$cast))|0;
    $19 = HEAP8[$__buf>>0]|0;
    $and$i$i53 = $19 & 1;
    $tobool$i$i54 = ($and$i$i53<<24>>24)==(0);
    if ($tobool$i$i54) {
     $conv$i$i = $19&255;
     $shr1$i$i = $conv$i$i >>> 1;
     $cond$i56 = $shr1$i$i;
    } else {
     $20 = HEAP32[$__size_$i2$i70>>2]|0;
     $cond$i56 = $20;
    }
    $cmp = ($sub$ptr$sub|0)==($cond$i56|0);
    if ($cmp) {
     if ($tobool$i$i54) {
      $conv$i$i62 = $19&255;
      $shr1$i$i63 = $conv$i$i62 >>> 1;
      $conv$i$i72 = $19&255;
      $shr1$i$i73 = $conv$i$i72 >>> 1;
      $cond$i65124 = $shr1$i$i63;$cond$i75 = $shr1$i$i73;
     } else {
      $21 = HEAP32[$__size_$i2$i70>>2]|0;
      $cond$i65124 = $21;$cond$i75 = $21;
     }
     $mul = $cond$i75 << 1;
     __THREW__ = 0;
     invoke_viii(385,($__buf|0),($mul|0),0);
     $22 = __THREW__; __THREW__ = 0;
     $23 = $22&1;
     if ($23) {
      label = 34;
      break;
     }
     $24 = HEAP8[$__buf>>0]|0;
     $and$i$i91 = $24 & 1;
     $tobool$i$i92 = ($and$i$i91<<24>>24)==(0);
     if ($tobool$i$i92) {
      $cond$i97 = 10;
     } else {
      $25 = HEAP32[$__buf>>2]|0;
      $and$i1$i94 = $25 & -2;
      $phitmp$i95 = (($and$i1$i94) + -1)|0;
      $cond$i97 = $phitmp$i95;
     }
     __THREW__ = 0;
     invoke_viii(385,($__buf|0),($cond$i97|0),0);
     $26 = __THREW__; __THREW__ = 0;
     $27 = $26&1;
     if ($27) {
      label = 34;
      break;
     }
     $28 = HEAP8[$__buf>>0]|0;
     $and$i$i$i101 = $28 & 1;
     $tobool$i$i$i102 = ($and$i$i$i101<<24>>24)==(0);
     if ($tobool$i$i$i102) {
      $cond$i$i108 = $arrayidx$i$i$i106$pre$phiZZZZ2D;
     } else {
      $29 = HEAP32[$__data_$i$i$i103$pre$phiZZZZ2D>>2]|0;
      $cond$i$i108 = $29;
     }
     $add$ptr = (($cond$i$i108) + ($cond$i65124)|0);
     HEAP32[$__a_end>>2] = $add$ptr;
     $__a$1 = $cond$i$i108;
    } else {
     $__a$1 = $__a$0;
    }
    $__ninp_$i$i111 = (($34) + 12|0);
    $35 = HEAP32[$__ninp_$i$i111>>2]|0;
    $__einp_$i$i112 = (($34) + 16|0);
    $36 = HEAP32[$__einp_$i$i112>>2]|0;
    $cmp$i$i113 = ($35|0)==($36|0);
    if ($cmp$i$i113) {
     $vtable$i$i114 = HEAP32[$34>>2]|0;
     $vfn$i$i115 = (($vtable$i$i114) + 36|0);
     $37 = HEAP32[$vfn$i$i115>>2]|0;
     __THREW__ = 0;
     $call$i$i119 = (invoke_ii($37|0,($34|0))|0);
     $38 = __THREW__; __THREW__ = 0;
     $39 = $38&1;
     if ($39) {
      label = 34;
      break;
     } else {
      $retval$0$i$i = $call$i$i119;
     }
    } else {
     $40 = HEAP32[$35>>2]|0;
     $retval$0$i$i = $40;
    }
    $call21 = (__ZNSt3__19__num_getIwE17__stage2_int_loopEwiPcRS2_RjwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_Pw($retval$0$i$i,$call,$__a$1,$__a_end,$__dc,$4,$__grouping,$__g,$__g_end,$__atoms)|0);
    $tobool = ($call21|0)==(0);
    if (!($tobool)) {
     $$pre$i15$i$i = $75;$__a$2 = $__a$1;
     break;
    }
    $41 = HEAP32[$__ninp_$i$i111>>2]|0;
    $42 = HEAP32[$__einp_$i$i112>>2]|0;
    $cmp$i$i87 = ($41|0)==($42|0);
    if ($cmp$i$i87) {
     $vtable$i$i = HEAP32[$34>>2]|0;
     $vfn$i$i = (($vtable$i$i) + 40|0);
     $43 = HEAP32[$vfn$i$i>>2]|0;
     __THREW__ = 0;
     (invoke_ii($43|0,($34|0))|0);
     $44 = __THREW__; __THREW__ = 0;
     $45 = $44&1;
     if ($45) {
      label = 34;
      break;
     } else {
      $$pre$i$i$i25 = $34;$__a$0 = $__a$1;
      continue;
     }
    } else {
     $incdec$ptr$i$i = (($41) + 4|0);
     HEAP32[$__ninp_$i$i111>>2] = $incdec$ptr$i$i;
     $$pre$i$i$i25 = $34;$__a$0 = $__a$1;
     continue;
    }
   }
   if ((label|0) == 34) {
    $30 = ___cxa_find_matching_catch()|0;
    $31 = tempRet0;
    $lpad$phi$index = $30;$lpad$phi$index2 = $31;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
    ___resumeException($lpad$phi$index|0);
    // unreachable;
   }
   $46 = HEAP8[$__grouping>>0]|0;
   $and$i$i78 = $46 & 1;
   $tobool$i$i79 = ($and$i$i78<<24>>24)==(0);
   if ($tobool$i$i79) {
    $conv$i$i82 = $46&255;
    $shr1$i$i83 = $conv$i$i82 >>> 1;
    $cond$i85 = $shr1$i$i83;
   } else {
    $__size_$i2$i80 = (($__grouping) + 4|0);
    $47 = HEAP32[$__size_$i2$i80>>2]|0;
    $cond$i85 = $47;
   }
   $cmp27 = ($cond$i85|0)==(0);
   if (!($cmp27)) {
    $48 = HEAP32[$__g_end>>2]|0;
    $sub$ptr$lhs$cast29 = $48;
    $sub$ptr$rhs$cast30 = $__g;
    $sub$ptr$sub31 = (($sub$ptr$lhs$cast29) - ($sub$ptr$rhs$cast30))|0;
    $cmp32 = ($sub$ptr$sub31|0)<(160);
    if ($cmp32) {
     $49 = HEAP32[$__dc>>2]|0;
     $incdec$ptr = (($48) + 4|0);
     HEAP32[$__g_end>>2] = $incdec$ptr;
     HEAP32[$48>>2] = $49;
    }
   }
   $50 = HEAP32[$__a_end>>2]|0;
   __THREW__ = 0;
   $51 = (invoke_iiiii(387,($__a$2|0),($50|0),($__err|0),($call|0))|0);
   $52 = tempRet0;
   $53 = __THREW__; __THREW__ = 0;
   $54 = $53&1;
   if (!($54)) {
    $55 = $__v;
    $56 = $55;
    HEAP32[$56>>2] = $51;
    $57 = (($55) + 4)|0;
    $58 = $57;
    HEAP32[$58>>2] = $52;
    $59 = HEAP32[$__g_end>>2]|0;
    __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping,$__g,$59,$__err);
    $tobool$i$i$i = ($34|0)==(0|0);
    if ($tobool$i$i$i) {
     $73 = 0;$76 = 1;
    } else {
     $__ninp_$i$i$i$i = (($34) + 12|0);
     $60 = HEAP32[$__ninp_$i$i$i$i>>2]|0;
     $__einp_$i$i$i$i = (($34) + 16|0);
     $61 = HEAP32[$__einp_$i$i$i$i>>2]|0;
     $cmp$i$i$i$i = ($60|0)==($61|0);
     if ($cmp$i$i$i$i) {
      $vtable$i$i$i$i = HEAP32[$34>>2]|0;
      $vfn$i$i$i$i = (($vtable$i$i$i$i) + 36|0);
      $62 = HEAP32[$vfn$i$i$i$i>>2]|0;
      __THREW__ = 0;
      $call$i$i$i$i9 = (invoke_ii($62|0,($34|0))|0);
      $63 = __THREW__; __THREW__ = 0;
      $64 = $63&1;
      if ($64) {
       break;
      } else {
       $retval$0$i$i$i$i = $call$i$i$i$i9;
      }
     } else {
      $65 = HEAP32[$60>>2]|0;
      $retval$0$i$i$i$i = $65;
     }
     $cmp$i1$i$i$i = ($retval$0$i$i$i$i|0)==(-1);
     if ($cmp$i1$i$i$i) {
      HEAP32[$__b>>2] = 0;
      $73 = 0;$76 = 1;
     } else {
      $73 = $34;$76 = 0;
     }
    }
    $tobool$i2$i$i = ($$pre$i15$i$i|0)==(0|0);
    do {
     if ($tobool$i2$i$i) {
      label = 63;
     } else {
      $__ninp_$i$i3$i$i = (($$pre$i15$i$i) + 12|0);
      $66 = HEAP32[$__ninp_$i$i3$i$i>>2]|0;
      $__einp_$i$i4$i$i = (($$pre$i15$i$i) + 16|0);
      $67 = HEAP32[$__einp_$i$i4$i$i>>2]|0;
      $cmp$i$i5$i$i = ($66|0)==($67|0);
      if ($cmp$i$i5$i$i) {
       $vtable$i$i7$i$i = HEAP32[$$pre$i15$i$i>>2]|0;
       $vfn$i$i8$i$i = (($vtable$i$i7$i$i) + 36|0);
       $68 = HEAP32[$vfn$i$i8$i$i>>2]|0;
       __THREW__ = 0;
       $call$i$i9$i$i10 = (invoke_ii($68|0,($$pre$i15$i$i|0))|0);
       $69 = __THREW__; __THREW__ = 0;
       $70 = $69&1;
       if ($70) {
        break L1;
       } else {
        $retval$0$i$i12$i$i = $call$i$i9$i$i10;
       }
      } else {
       $71 = HEAP32[$66>>2]|0;
       $retval$0$i$i12$i$i = $71;
      }
      $cmp$i1$i13$i$i = ($retval$0$i$i12$i$i|0)==(-1);
      if ($cmp$i1$i13$i$i) {
       HEAP32[$__e>>2] = 0;
       label = 63;
       break;
      }
      if ($76) {
       HEAP32[$agg$result>>2] = $73;
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
       STACKTOP = sp;return;
      }
     }
    } while(0);
    if ((label|0) == 63) {
     if (!($76)) {
      HEAP32[$agg$result>>2] = $73;
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
      STACKTOP = sp;return;
     }
    }
    $72 = HEAP32[$__err>>2]|0;
    $or = $72 | 2;
    HEAP32[$__err>>2] = $or;
    HEAP32[$agg$result>>2] = $73;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
    STACKTOP = sp;return;
   }
  }
 } while(0);
 $32 = ___cxa_find_matching_catch()|0;
 $33 = tempRet0;
 $lpad$phi$index = $32;$lpad$phi$index2 = $33;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
 ___resumeException($lpad$phi$index|0);
 // unreachable;
}
function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRt($agg$result,$this,$__b,$__e,$__iob,$__err,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $0 = 0, $1 = 0, $agg$tmp = 0, $agg$tmp$byval_copy = 0, $agg$tmp2 = 0, $agg$tmp2$byval_copy = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $agg$tmp2$byval_copy = sp + 12|0;
 $agg$tmp$byval_copy = sp + 8|0;
 $agg$tmp = sp + 4|0;
 $agg$tmp2 = sp;
 $0 = HEAP32[$__b>>2]|0;
 HEAP32[$agg$tmp>>2] = $0;
 $1 = HEAP32[$__e>>2]|0;
 HEAP32[$agg$tmp2>>2] = $1;
 ;HEAP32[$agg$tmp$byval_copy+0>>2]=HEAP32[$agg$tmp+0>>2]|0;
 ;HEAP32[$agg$tmp2$byval_copy+0>>2]=HEAP32[$agg$tmp2+0>>2]|0;
 __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__do_get_unsignedItEES4_S4_S4_RNS_8ios_baseERjRT_($agg$result,0,$agg$tmp$byval_copy,$agg$tmp2$byval_copy,$__iob,$__err,$__v);
 STACKTOP = sp;return;
}
function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__do_get_unsignedItEES4_S4_S4_RNS_8ios_baseERjRT_($agg$result,$this,$__b,$__e,$__iob,$__err,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$pre = 0, $$pre$i$i$i25 = 0, $$pre$i15$i$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $8 = 0, $9 = 0, $__a$0 = 0, $__a$1 = 0, $__a$2 = 0, $__a_end = 0, $__atoms = 0, $__buf = 0;
 var $__data_$i$i$i = 0, $__data_$i$i$i103$pre = 0, $__data_$i$i$i103$pre$phiZZZZ2D = 0, $__dc = 0, $__einp_$i$i$i$i = 0, $__einp_$i$i$i$i15 = 0, $__einp_$i$i112 = 0, $__einp_$i$i4$i$i = 0, $__einp_$i$i4$i$i33 = 0, $__g = 0, $__g_end = 0, $__grouping = 0, $__ninp_$i$i$i$i = 0, $__ninp_$i$i$i$i14 = 0, $__ninp_$i$i111 = 0, $__ninp_$i$i3$i$i = 0, $__ninp_$i$i3$i$i32 = 0, $__size_$i2$i70 = 0, $__size_$i2$i80 = 0, $__thousands_sep = 0;
 var $add$ptr = 0, $and$i$i$i = 0, $and$i$i$i101 = 0, $and$i$i53 = 0, $and$i$i78 = 0, $and$i$i91 = 0, $and$i1$i94 = 0, $arrayidx$i$i$i = 0, $arrayidx$i$i$i106$pre = 0, $arrayidx$i$i$i106$pre$phiZZZZ2D = 0, $call = 0, $call$i$i$i$i49 = 0, $call$i$i$i$i9 = 0, $call$i$i119 = 0, $call$i$i9$i$i10 = 0, $call$i$i9$i$i51 = 0, $call21 = 0, $call36 = 0, $cmp = 0, $cmp$i$i$i$i = 0;
 var $cmp$i$i$i$i16 = 0, $cmp$i$i113 = 0, $cmp$i$i5$i$i = 0, $cmp$i$i5$i$i34 = 0, $cmp$i$i87 = 0, $cmp$i1$i$i$i = 0, $cmp$i1$i$i$i23 = 0, $cmp$i1$i13$i$i = 0, $cmp$i1$i13$i$i41 = 0, $cmp27 = 0, $cmp32 = 0, $cond$i$i = 0, $cond$i$i108 = 0, $cond$i56 = 0, $cond$i65124 = 0, $cond$i75 = 0, $cond$i85 = 0, $cond$i97 = 0, $conv$i$i = 0, $conv$i$i62 = 0;
 var $conv$i$i72 = 0, $conv$i$i82 = 0, $incdec$ptr = 0, $incdec$ptr$i$i = 0, $lpad$phi$index = 0, $lpad$phi$index2 = 0, $mul = 0, $or = 0, $phitmp$i95 = 0, $retval$0$i$i = 0, $retval$0$i$i$i$i = 0, $retval$0$i$i$i$i22 = 0, $retval$0$i$i12$i$i = 0, $retval$0$i$i12$i$i40 = 0, $shr1$i$i = 0, $shr1$i$i63 = 0, $shr1$i$i73 = 0, $shr1$i$i83 = 0, $sub$ptr$lhs$cast = 0, $sub$ptr$lhs$cast29 = 0;
 var $sub$ptr$rhs$cast = 0, $sub$ptr$rhs$cast30 = 0, $sub$ptr$sub = 0, $sub$ptr$sub31 = 0, $tobool = 0, $tobool$i$i$i = 0, $tobool$i$i$i102 = 0, $tobool$i$i$i11 = 0, $tobool$i$i$i13 = 0, $tobool$i$i54 = 0, $tobool$i$i79 = 0, $tobool$i$i92 = 0, $tobool$i2$i$i = 0, $tobool$i2$i$i30 = 0, $vfn$i$i = 0, $vfn$i$i$i$i = 0, $vfn$i$i$i$i19 = 0, $vfn$i$i115 = 0, $vfn$i$i8$i$i = 0, $vfn$i$i8$i$i37 = 0;
 var $vtable$i$i = 0, $vtable$i$i$i$i = 0, $vtable$i$i$i$i18 = 0, $vtable$i$i114 = 0, $vtable$i$i7$i$i = 0, $vtable$i$i7$i$i36 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 304|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__atoms = sp + 160|0;
 $__thousands_sep = sp + 280|0;
 $__grouping = sp + 264|0;
 $__buf = sp + 284|0;
 $__a_end = sp + 300|0;
 $__g = sp;
 $__g_end = sp + 276|0;
 $__dc = sp + 296|0;
 $call = (__ZNSt3__114__num_get_base10__get_baseERNS_8ios_baseE($__iob)|0);
 __ZNSt3__19__num_getIwE17__stage2_int_prepERNS_8ios_baseEPwRw($__grouping,$__iob,$__atoms,$__thousands_sep);
 ;HEAP32[$__buf+0>>2]=0|0;HEAP32[$__buf+4>>2]=0|0;HEAP32[$__buf+8>>2]=0|0;
 __THREW__ = 0;
 invoke_viii(385,($__buf|0),10,0);
 $0 = __THREW__; __THREW__ = 0;
 $1 = $0&1;
 L1: do {
  if (!($1)) {
   $2 = HEAP8[$__buf>>0]|0;
   $and$i$i$i = $2 & 1;
   $tobool$i$i$i11 = ($and$i$i$i<<24>>24)==(0);
   if ($tobool$i$i$i11) {
    $arrayidx$i$i$i = (($__buf) + 1|0);
    $__data_$i$i$i103$pre = (($__buf) + 8|0);
    $__data_$i$i$i103$pre$phiZZZZ2D = $__data_$i$i$i103$pre;$arrayidx$i$i$i106$pre$phiZZZZ2D = $arrayidx$i$i$i;$cond$i$i = $arrayidx$i$i$i;
   } else {
    $__data_$i$i$i = (($__buf) + 8|0);
    $3 = HEAP32[$__data_$i$i$i>>2]|0;
    $arrayidx$i$i$i106$pre = (($__buf) + 1|0);
    $__data_$i$i$i103$pre$phiZZZZ2D = $__data_$i$i$i;$arrayidx$i$i$i106$pre$phiZZZZ2D = $arrayidx$i$i$i106$pre;$cond$i$i = $3;
   }
   HEAP32[$__a_end>>2] = $cond$i$i;
   HEAP32[$__g_end>>2] = $__g;
   HEAP32[$__dc>>2] = 0;
   $__size_$i2$i70 = (($__buf) + 4|0);
   $4 = HEAP32[$__thousands_sep>>2]|0;
   $$pre = HEAP32[$__b>>2]|0;
   $$pre$i$i$i25 = $$pre;$__a$0 = $cond$i$i;
   L7: while(1) {
    $tobool$i$i$i13 = ($$pre$i$i$i25|0)==(0|0);
    if ($tobool$i$i$i13) {
     $34 = 0;$68 = 1;
    } else {
     $__ninp_$i$i$i$i14 = (($$pre$i$i$i25) + 12|0);
     $5 = HEAP32[$__ninp_$i$i$i$i14>>2]|0;
     $__einp_$i$i$i$i15 = (($$pre$i$i$i25) + 16|0);
     $6 = HEAP32[$__einp_$i$i$i$i15>>2]|0;
     $cmp$i$i$i$i16 = ($5|0)==($6|0);
     if ($cmp$i$i$i$i16) {
      $vtable$i$i$i$i18 = HEAP32[$$pre$i$i$i25>>2]|0;
      $vfn$i$i$i$i19 = (($vtable$i$i$i$i18) + 36|0);
      $7 = HEAP32[$vfn$i$i$i$i19>>2]|0;
      __THREW__ = 0;
      $call$i$i$i$i49 = (invoke_ii($7|0,($$pre$i$i$i25|0))|0);
      $8 = __THREW__; __THREW__ = 0;
      $9 = $8&1;
      if ($9) {
       label = 34;
       break;
      } else {
       $retval$0$i$i$i$i22 = $call$i$i$i$i49;
      }
     } else {
      $10 = HEAP32[$5>>2]|0;
      $retval$0$i$i$i$i22 = $10;
     }
     $cmp$i1$i$i$i23 = ($retval$0$i$i$i$i22|0)==(-1);
     if ($cmp$i1$i$i$i23) {
      HEAP32[$__b>>2] = 0;
      $34 = 0;$68 = 1;
     } else {
      $34 = $$pre$i$i$i25;$68 = 0;
     }
    }
    $11 = HEAP32[$__e>>2]|0;
    $tobool$i2$i$i30 = ($11|0)==(0|0);
    do {
     if ($tobool$i2$i$i30) {
      label = 18;
     } else {
      $__ninp_$i$i3$i$i32 = (($11) + 12|0);
      $12 = HEAP32[$__ninp_$i$i3$i$i32>>2]|0;
      $__einp_$i$i4$i$i33 = (($11) + 16|0);
      $13 = HEAP32[$__einp_$i$i4$i$i33>>2]|0;
      $cmp$i$i5$i$i34 = ($12|0)==($13|0);
      if ($cmp$i$i5$i$i34) {
       $vtable$i$i7$i$i36 = HEAP32[$11>>2]|0;
       $vfn$i$i8$i$i37 = (($vtable$i$i7$i$i36) + 36|0);
       $14 = HEAP32[$vfn$i$i8$i$i37>>2]|0;
       __THREW__ = 0;
       $call$i$i9$i$i51 = (invoke_ii($14|0,($11|0))|0);
       $15 = __THREW__; __THREW__ = 0;
       $16 = $15&1;
       if ($16) {
        label = 34;
        break L7;
       } else {
        $retval$0$i$i12$i$i40 = $call$i$i9$i$i51;
       }
      } else {
       $17 = HEAP32[$12>>2]|0;
       $retval$0$i$i12$i$i40 = $17;
      }
      $cmp$i1$i13$i$i41 = ($retval$0$i$i12$i$i40|0)==(-1);
      if ($cmp$i1$i13$i$i41) {
       HEAP32[$__e>>2] = 0;
       label = 18;
       break;
      } else {
       if ($68) {
        $69 = $11;
        break;
       } else {
        $$pre$i15$i$i = $11;$__a$2 = $__a$0;
        break L7;
       }
      }
     }
    } while(0);
    if ((label|0) == 18) {
     label = 0;
     if ($68) {
      $$pre$i15$i$i = 0;$__a$2 = $__a$0;
      break;
     } else {
      $69 = 0;
     }
    }
    $18 = HEAP32[$__a_end>>2]|0;
    $sub$ptr$lhs$cast = $18;
    $sub$ptr$rhs$cast = $__a$0;
    $sub$ptr$sub = (($sub$ptr$lhs$cast) - ($sub$ptr$rhs$cast))|0;
    $19 = HEAP8[$__buf>>0]|0;
    $and$i$i53 = $19 & 1;
    $tobool$i$i54 = ($and$i$i53<<24>>24)==(0);
    if ($tobool$i$i54) {
     $conv$i$i = $19&255;
     $shr1$i$i = $conv$i$i >>> 1;
     $cond$i56 = $shr1$i$i;
    } else {
     $20 = HEAP32[$__size_$i2$i70>>2]|0;
     $cond$i56 = $20;
    }
    $cmp = ($sub$ptr$sub|0)==($cond$i56|0);
    if ($cmp) {
     if ($tobool$i$i54) {
      $conv$i$i62 = $19&255;
      $shr1$i$i63 = $conv$i$i62 >>> 1;
      $conv$i$i72 = $19&255;
      $shr1$i$i73 = $conv$i$i72 >>> 1;
      $cond$i65124 = $shr1$i$i63;$cond$i75 = $shr1$i$i73;
     } else {
      $21 = HEAP32[$__size_$i2$i70>>2]|0;
      $cond$i65124 = $21;$cond$i75 = $21;
     }
     $mul = $cond$i75 << 1;
     __THREW__ = 0;
     invoke_viii(385,($__buf|0),($mul|0),0);
     $22 = __THREW__; __THREW__ = 0;
     $23 = $22&1;
     if ($23) {
      label = 34;
      break;
     }
     $24 = HEAP8[$__buf>>0]|0;
     $and$i$i91 = $24 & 1;
     $tobool$i$i92 = ($and$i$i91<<24>>24)==(0);
     if ($tobool$i$i92) {
      $cond$i97 = 10;
     } else {
      $25 = HEAP32[$__buf>>2]|0;
      $and$i1$i94 = $25 & -2;
      $phitmp$i95 = (($and$i1$i94) + -1)|0;
      $cond$i97 = $phitmp$i95;
     }
     __THREW__ = 0;
     invoke_viii(385,($__buf|0),($cond$i97|0),0);
     $26 = __THREW__; __THREW__ = 0;
     $27 = $26&1;
     if ($27) {
      label = 34;
      break;
     }
     $28 = HEAP8[$__buf>>0]|0;
     $and$i$i$i101 = $28 & 1;
     $tobool$i$i$i102 = ($and$i$i$i101<<24>>24)==(0);
     if ($tobool$i$i$i102) {
      $cond$i$i108 = $arrayidx$i$i$i106$pre$phiZZZZ2D;
     } else {
      $29 = HEAP32[$__data_$i$i$i103$pre$phiZZZZ2D>>2]|0;
      $cond$i$i108 = $29;
     }
     $add$ptr = (($cond$i$i108) + ($cond$i65124)|0);
     HEAP32[$__a_end>>2] = $add$ptr;
     $__a$1 = $cond$i$i108;
    } else {
     $__a$1 = $__a$0;
    }
    $__ninp_$i$i111 = (($34) + 12|0);
    $35 = HEAP32[$__ninp_$i$i111>>2]|0;
    $__einp_$i$i112 = (($34) + 16|0);
    $36 = HEAP32[$__einp_$i$i112>>2]|0;
    $cmp$i$i113 = ($35|0)==($36|0);
    if ($cmp$i$i113) {
     $vtable$i$i114 = HEAP32[$34>>2]|0;
     $vfn$i$i115 = (($vtable$i$i114) + 36|0);
     $37 = HEAP32[$vfn$i$i115>>2]|0;
     __THREW__ = 0;
     $call$i$i119 = (invoke_ii($37|0,($34|0))|0);
     $38 = __THREW__; __THREW__ = 0;
     $39 = $38&1;
     if ($39) {
      label = 34;
      break;
     } else {
      $retval$0$i$i = $call$i$i119;
     }
    } else {
     $40 = HEAP32[$35>>2]|0;
     $retval$0$i$i = $40;
    }
    $call21 = (__ZNSt3__19__num_getIwE17__stage2_int_loopEwiPcRS2_RjwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_Pw($retval$0$i$i,$call,$__a$1,$__a_end,$__dc,$4,$__grouping,$__g,$__g_end,$__atoms)|0);
    $tobool = ($call21|0)==(0);
    if (!($tobool)) {
     $$pre$i15$i$i = $69;$__a$2 = $__a$1;
     break;
    }
    $41 = HEAP32[$__ninp_$i$i111>>2]|0;
    $42 = HEAP32[$__einp_$i$i112>>2]|0;
    $cmp$i$i87 = ($41|0)==($42|0);
    if ($cmp$i$i87) {
     $vtable$i$i = HEAP32[$34>>2]|0;
     $vfn$i$i = (($vtable$i$i) + 40|0);
     $43 = HEAP32[$vfn$i$i>>2]|0;
     __THREW__ = 0;
     (invoke_ii($43|0,($34|0))|0);
     $44 = __THREW__; __THREW__ = 0;
     $45 = $44&1;
     if ($45) {
      label = 34;
      break;
     } else {
      $$pre$i$i$i25 = $34;$__a$0 = $__a$1;
      continue;
     }
    } else {
     $incdec$ptr$i$i = (($41) + 4|0);
     HEAP32[$__ninp_$i$i111>>2] = $incdec$ptr$i$i;
     $$pre$i$i$i25 = $34;$__a$0 = $__a$1;
     continue;
    }
   }
   if ((label|0) == 34) {
    $30 = ___cxa_find_matching_catch()|0;
    $31 = tempRet0;
    $lpad$phi$index = $30;$lpad$phi$index2 = $31;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
    ___resumeException($lpad$phi$index|0);
    // unreachable;
   }
   $46 = HEAP8[$__grouping>>0]|0;
   $and$i$i78 = $46 & 1;
   $tobool$i$i79 = ($and$i$i78<<24>>24)==(0);
   if ($tobool$i$i79) {
    $conv$i$i82 = $46&255;
    $shr1$i$i83 = $conv$i$i82 >>> 1;
    $cond$i85 = $shr1$i$i83;
   } else {
    $__size_$i2$i80 = (($__grouping) + 4|0);
    $47 = HEAP32[$__size_$i2$i80>>2]|0;
    $cond$i85 = $47;
   }
   $cmp27 = ($cond$i85|0)==(0);
   if (!($cmp27)) {
    $48 = HEAP32[$__g_end>>2]|0;
    $sub$ptr$lhs$cast29 = $48;
    $sub$ptr$rhs$cast30 = $__g;
    $sub$ptr$sub31 = (($sub$ptr$lhs$cast29) - ($sub$ptr$rhs$cast30))|0;
    $cmp32 = ($sub$ptr$sub31|0)<(160);
    if ($cmp32) {
     $49 = HEAP32[$__dc>>2]|0;
     $incdec$ptr = (($48) + 4|0);
     HEAP32[$__g_end>>2] = $incdec$ptr;
     HEAP32[$48>>2] = $49;
    }
   }
   $50 = HEAP32[$__a_end>>2]|0;
   __THREW__ = 0;
   $call36 = (invoke_iiiii(388,($__a$2|0),($50|0),($__err|0),($call|0))|0);
   $51 = __THREW__; __THREW__ = 0;
   $52 = $51&1;
   if (!($52)) {
    HEAP16[$__v>>1] = $call36;
    $53 = HEAP32[$__g_end>>2]|0;
    __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping,$__g,$53,$__err);
    $tobool$i$i$i = ($34|0)==(0|0);
    if ($tobool$i$i$i) {
     $67 = 0;$70 = 1;
    } else {
     $__ninp_$i$i$i$i = (($34) + 12|0);
     $54 = HEAP32[$__ninp_$i$i$i$i>>2]|0;
     $__einp_$i$i$i$i = (($34) + 16|0);
     $55 = HEAP32[$__einp_$i$i$i$i>>2]|0;
     $cmp$i$i$i$i = ($54|0)==($55|0);
     if ($cmp$i$i$i$i) {
      $vtable$i$i$i$i = HEAP32[$34>>2]|0;
      $vfn$i$i$i$i = (($vtable$i$i$i$i) + 36|0);
      $56 = HEAP32[$vfn$i$i$i$i>>2]|0;
      __THREW__ = 0;
      $call$i$i$i$i9 = (invoke_ii($56|0,($34|0))|0);
      $57 = __THREW__; __THREW__ = 0;
      $58 = $57&1;
      if ($58) {
       break;
      } else {
       $retval$0$i$i$i$i = $call$i$i$i$i9;
      }
     } else {
      $59 = HEAP32[$54>>2]|0;
      $retval$0$i$i$i$i = $59;
     }
     $cmp$i1$i$i$i = ($retval$0$i$i$i$i|0)==(-1);
     if ($cmp$i1$i$i$i) {
      HEAP32[$__b>>2] = 0;
      $67 = 0;$70 = 1;
     } else {
      $67 = $34;$70 = 0;
     }
    }
    $tobool$i2$i$i = ($$pre$i15$i$i|0)==(0|0);
    do {
     if ($tobool$i2$i$i) {
      label = 63;
     } else {
      $__ninp_$i$i3$i$i = (($$pre$i15$i$i) + 12|0);
      $60 = HEAP32[$__ninp_$i$i3$i$i>>2]|0;
      $__einp_$i$i4$i$i = (($$pre$i15$i$i) + 16|0);
      $61 = HEAP32[$__einp_$i$i4$i$i>>2]|0;
      $cmp$i$i5$i$i = ($60|0)==($61|0);
      if ($cmp$i$i5$i$i) {
       $vtable$i$i7$i$i = HEAP32[$$pre$i15$i$i>>2]|0;
       $vfn$i$i8$i$i = (($vtable$i$i7$i$i) + 36|0);
       $62 = HEAP32[$vfn$i$i8$i$i>>2]|0;
       __THREW__ = 0;
       $call$i$i9$i$i10 = (invoke_ii($62|0,($$pre$i15$i$i|0))|0);
       $63 = __THREW__; __THREW__ = 0;
       $64 = $63&1;
       if ($64) {
        break L1;
       } else {
        $retval$0$i$i12$i$i = $call$i$i9$i$i10;
       }
      } else {
       $65 = HEAP32[$60>>2]|0;
       $retval$0$i$i12$i$i = $65;
      }
      $cmp$i1$i13$i$i = ($retval$0$i$i12$i$i|0)==(-1);
      if ($cmp$i1$i13$i$i) {
       HEAP32[$__e>>2] = 0;
       label = 63;
       break;
      }
      if ($70) {
       HEAP32[$agg$result>>2] = $67;
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
       STACKTOP = sp;return;
      }
     }
    } while(0);
    if ((label|0) == 63) {
     if (!($70)) {
      HEAP32[$agg$result>>2] = $67;
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
      STACKTOP = sp;return;
     }
    }
    $66 = HEAP32[$__err>>2]|0;
    $or = $66 | 2;
    HEAP32[$__err>>2] = $or;
    HEAP32[$agg$result>>2] = $67;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
    STACKTOP = sp;return;
   }
  }
 } while(0);
 $32 = ___cxa_find_matching_catch()|0;
 $33 = tempRet0;
 $lpad$phi$index = $32;$lpad$phi$index2 = $33;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
 ___resumeException($lpad$phi$index|0);
 // unreachable;
}
function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjS8_($agg$result,$this,$__b,$__e,$__iob,$__err,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $0 = 0, $1 = 0, $agg$tmp = 0, $agg$tmp$byval_copy = 0, $agg$tmp2 = 0, $agg$tmp2$byval_copy = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $agg$tmp2$byval_copy = sp + 12|0;
 $agg$tmp$byval_copy = sp + 8|0;
 $agg$tmp = sp + 4|0;
 $agg$tmp2 = sp;
 $0 = HEAP32[$__b>>2]|0;
 HEAP32[$agg$tmp>>2] = $0;
 $1 = HEAP32[$__e>>2]|0;
 HEAP32[$agg$tmp2>>2] = $1;
 ;HEAP32[$agg$tmp$byval_copy+0>>2]=HEAP32[$agg$tmp+0>>2]|0;
 ;HEAP32[$agg$tmp2$byval_copy+0>>2]=HEAP32[$agg$tmp2+0>>2]|0;
 __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__do_get_unsignedIjEES4_S4_S4_RNS_8ios_baseERjRT_($agg$result,0,$agg$tmp$byval_copy,$agg$tmp2$byval_copy,$__iob,$__err,$__v);
 STACKTOP = sp;return;
}
function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__do_get_unsignedIjEES4_S4_S4_RNS_8ios_baseERjRT_($agg$result,$this,$__b,$__e,$__iob,$__err,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$pre = 0, $$pre$i$i$i25 = 0, $$pre$i15$i$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $8 = 0, $9 = 0, $__a$0 = 0, $__a$1 = 0, $__a$2 = 0, $__a_end = 0, $__atoms = 0, $__buf = 0;
 var $__data_$i$i$i = 0, $__data_$i$i$i103$pre = 0, $__data_$i$i$i103$pre$phiZZZZ2D = 0, $__dc = 0, $__einp_$i$i$i$i = 0, $__einp_$i$i$i$i15 = 0, $__einp_$i$i112 = 0, $__einp_$i$i4$i$i = 0, $__einp_$i$i4$i$i33 = 0, $__g = 0, $__g_end = 0, $__grouping = 0, $__ninp_$i$i$i$i = 0, $__ninp_$i$i$i$i14 = 0, $__ninp_$i$i111 = 0, $__ninp_$i$i3$i$i = 0, $__ninp_$i$i3$i$i32 = 0, $__size_$i2$i70 = 0, $__size_$i2$i80 = 0, $__thousands_sep = 0;
 var $add$ptr = 0, $and$i$i$i = 0, $and$i$i$i101 = 0, $and$i$i53 = 0, $and$i$i78 = 0, $and$i$i91 = 0, $and$i1$i94 = 0, $arrayidx$i$i$i = 0, $arrayidx$i$i$i106$pre = 0, $arrayidx$i$i$i106$pre$phiZZZZ2D = 0, $call = 0, $call$i$i$i$i49 = 0, $call$i$i$i$i9 = 0, $call$i$i119 = 0, $call$i$i9$i$i10 = 0, $call$i$i9$i$i51 = 0, $call21 = 0, $call36 = 0, $cmp = 0, $cmp$i$i$i$i = 0;
 var $cmp$i$i$i$i16 = 0, $cmp$i$i113 = 0, $cmp$i$i5$i$i = 0, $cmp$i$i5$i$i34 = 0, $cmp$i$i87 = 0, $cmp$i1$i$i$i = 0, $cmp$i1$i$i$i23 = 0, $cmp$i1$i13$i$i = 0, $cmp$i1$i13$i$i41 = 0, $cmp27 = 0, $cmp32 = 0, $cond$i$i = 0, $cond$i$i108 = 0, $cond$i56 = 0, $cond$i65124 = 0, $cond$i75 = 0, $cond$i85 = 0, $cond$i97 = 0, $conv$i$i = 0, $conv$i$i62 = 0;
 var $conv$i$i72 = 0, $conv$i$i82 = 0, $incdec$ptr = 0, $incdec$ptr$i$i = 0, $lpad$phi$index = 0, $lpad$phi$index2 = 0, $mul = 0, $or = 0, $phitmp$i95 = 0, $retval$0$i$i = 0, $retval$0$i$i$i$i = 0, $retval$0$i$i$i$i22 = 0, $retval$0$i$i12$i$i = 0, $retval$0$i$i12$i$i40 = 0, $shr1$i$i = 0, $shr1$i$i63 = 0, $shr1$i$i73 = 0, $shr1$i$i83 = 0, $sub$ptr$lhs$cast = 0, $sub$ptr$lhs$cast29 = 0;
 var $sub$ptr$rhs$cast = 0, $sub$ptr$rhs$cast30 = 0, $sub$ptr$sub = 0, $sub$ptr$sub31 = 0, $tobool = 0, $tobool$i$i$i = 0, $tobool$i$i$i102 = 0, $tobool$i$i$i11 = 0, $tobool$i$i$i13 = 0, $tobool$i$i54 = 0, $tobool$i$i79 = 0, $tobool$i$i92 = 0, $tobool$i2$i$i = 0, $tobool$i2$i$i30 = 0, $vfn$i$i = 0, $vfn$i$i$i$i = 0, $vfn$i$i$i$i19 = 0, $vfn$i$i115 = 0, $vfn$i$i8$i$i = 0, $vfn$i$i8$i$i37 = 0;
 var $vtable$i$i = 0, $vtable$i$i$i$i = 0, $vtable$i$i$i$i18 = 0, $vtable$i$i114 = 0, $vtable$i$i7$i$i = 0, $vtable$i$i7$i$i36 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 304|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__atoms = sp + 160|0;
 $__thousands_sep = sp + 280|0;
 $__grouping = sp + 264|0;
 $__buf = sp + 284|0;
 $__a_end = sp + 300|0;
 $__g = sp;
 $__g_end = sp + 276|0;
 $__dc = sp + 296|0;
 $call = (__ZNSt3__114__num_get_base10__get_baseERNS_8ios_baseE($__iob)|0);
 __ZNSt3__19__num_getIwE17__stage2_int_prepERNS_8ios_baseEPwRw($__grouping,$__iob,$__atoms,$__thousands_sep);
 ;HEAP32[$__buf+0>>2]=0|0;HEAP32[$__buf+4>>2]=0|0;HEAP32[$__buf+8>>2]=0|0;
 __THREW__ = 0;
 invoke_viii(385,($__buf|0),10,0);
 $0 = __THREW__; __THREW__ = 0;
 $1 = $0&1;
 L1: do {
  if (!($1)) {
   $2 = HEAP8[$__buf>>0]|0;
   $and$i$i$i = $2 & 1;
   $tobool$i$i$i11 = ($and$i$i$i<<24>>24)==(0);
   if ($tobool$i$i$i11) {
    $arrayidx$i$i$i = (($__buf) + 1|0);
    $__data_$i$i$i103$pre = (($__buf) + 8|0);
    $__data_$i$i$i103$pre$phiZZZZ2D = $__data_$i$i$i103$pre;$arrayidx$i$i$i106$pre$phiZZZZ2D = $arrayidx$i$i$i;$cond$i$i = $arrayidx$i$i$i;
   } else {
    $__data_$i$i$i = (($__buf) + 8|0);
    $3 = HEAP32[$__data_$i$i$i>>2]|0;
    $arrayidx$i$i$i106$pre = (($__buf) + 1|0);
    $__data_$i$i$i103$pre$phiZZZZ2D = $__data_$i$i$i;$arrayidx$i$i$i106$pre$phiZZZZ2D = $arrayidx$i$i$i106$pre;$cond$i$i = $3;
   }
   HEAP32[$__a_end>>2] = $cond$i$i;
   HEAP32[$__g_end>>2] = $__g;
   HEAP32[$__dc>>2] = 0;
   $__size_$i2$i70 = (($__buf) + 4|0);
   $4 = HEAP32[$__thousands_sep>>2]|0;
   $$pre = HEAP32[$__b>>2]|0;
   $$pre$i$i$i25 = $$pre;$__a$0 = $cond$i$i;
   L7: while(1) {
    $tobool$i$i$i13 = ($$pre$i$i$i25|0)==(0|0);
    if ($tobool$i$i$i13) {
     $34 = 0;$68 = 1;
    } else {
     $__ninp_$i$i$i$i14 = (($$pre$i$i$i25) + 12|0);
     $5 = HEAP32[$__ninp_$i$i$i$i14>>2]|0;
     $__einp_$i$i$i$i15 = (($$pre$i$i$i25) + 16|0);
     $6 = HEAP32[$__einp_$i$i$i$i15>>2]|0;
     $cmp$i$i$i$i16 = ($5|0)==($6|0);
     if ($cmp$i$i$i$i16) {
      $vtable$i$i$i$i18 = HEAP32[$$pre$i$i$i25>>2]|0;
      $vfn$i$i$i$i19 = (($vtable$i$i$i$i18) + 36|0);
      $7 = HEAP32[$vfn$i$i$i$i19>>2]|0;
      __THREW__ = 0;
      $call$i$i$i$i49 = (invoke_ii($7|0,($$pre$i$i$i25|0))|0);
      $8 = __THREW__; __THREW__ = 0;
      $9 = $8&1;
      if ($9) {
       label = 34;
       break;
      } else {
       $retval$0$i$i$i$i22 = $call$i$i$i$i49;
      }
     } else {
      $10 = HEAP32[$5>>2]|0;
      $retval$0$i$i$i$i22 = $10;
     }
     $cmp$i1$i$i$i23 = ($retval$0$i$i$i$i22|0)==(-1);
     if ($cmp$i1$i$i$i23) {
      HEAP32[$__b>>2] = 0;
      $34 = 0;$68 = 1;
     } else {
      $34 = $$pre$i$i$i25;$68 = 0;
     }
    }
    $11 = HEAP32[$__e>>2]|0;
    $tobool$i2$i$i30 = ($11|0)==(0|0);
    do {
     if ($tobool$i2$i$i30) {
      label = 18;
     } else {
      $__ninp_$i$i3$i$i32 = (($11) + 12|0);
      $12 = HEAP32[$__ninp_$i$i3$i$i32>>2]|0;
      $__einp_$i$i4$i$i33 = (($11) + 16|0);
      $13 = HEAP32[$__einp_$i$i4$i$i33>>2]|0;
      $cmp$i$i5$i$i34 = ($12|0)==($13|0);
      if ($cmp$i$i5$i$i34) {
       $vtable$i$i7$i$i36 = HEAP32[$11>>2]|0;
       $vfn$i$i8$i$i37 = (($vtable$i$i7$i$i36) + 36|0);
       $14 = HEAP32[$vfn$i$i8$i$i37>>2]|0;
       __THREW__ = 0;
       $call$i$i9$i$i51 = (invoke_ii($14|0,($11|0))|0);
       $15 = __THREW__; __THREW__ = 0;
       $16 = $15&1;
       if ($16) {
        label = 34;
        break L7;
       } else {
        $retval$0$i$i12$i$i40 = $call$i$i9$i$i51;
       }
      } else {
       $17 = HEAP32[$12>>2]|0;
       $retval$0$i$i12$i$i40 = $17;
      }
      $cmp$i1$i13$i$i41 = ($retval$0$i$i12$i$i40|0)==(-1);
      if ($cmp$i1$i13$i$i41) {
       HEAP32[$__e>>2] = 0;
       label = 18;
       break;
      } else {
       if ($68) {
        $69 = $11;
        break;
       } else {
        $$pre$i15$i$i = $11;$__a$2 = $__a$0;
        break L7;
       }
      }
     }
    } while(0);
    if ((label|0) == 18) {
     label = 0;
     if ($68) {
      $$pre$i15$i$i = 0;$__a$2 = $__a$0;
      break;
     } else {
      $69 = 0;
     }
    }
    $18 = HEAP32[$__a_end>>2]|0;
    $sub$ptr$lhs$cast = $18;
    $sub$ptr$rhs$cast = $__a$0;
    $sub$ptr$sub = (($sub$ptr$lhs$cast) - ($sub$ptr$rhs$cast))|0;
    $19 = HEAP8[$__buf>>0]|0;
    $and$i$i53 = $19 & 1;
    $tobool$i$i54 = ($and$i$i53<<24>>24)==(0);
    if ($tobool$i$i54) {
     $conv$i$i = $19&255;
     $shr1$i$i = $conv$i$i >>> 1;
     $cond$i56 = $shr1$i$i;
    } else {
     $20 = HEAP32[$__size_$i2$i70>>2]|0;
     $cond$i56 = $20;
    }
    $cmp = ($sub$ptr$sub|0)==($cond$i56|0);
    if ($cmp) {
     if ($tobool$i$i54) {
      $conv$i$i62 = $19&255;
      $shr1$i$i63 = $conv$i$i62 >>> 1;
      $conv$i$i72 = $19&255;
      $shr1$i$i73 = $conv$i$i72 >>> 1;
      $cond$i65124 = $shr1$i$i63;$cond$i75 = $shr1$i$i73;
     } else {
      $21 = HEAP32[$__size_$i2$i70>>2]|0;
      $cond$i65124 = $21;$cond$i75 = $21;
     }
     $mul = $cond$i75 << 1;
     __THREW__ = 0;
     invoke_viii(385,($__buf|0),($mul|0),0);
     $22 = __THREW__; __THREW__ = 0;
     $23 = $22&1;
     if ($23) {
      label = 34;
      break;
     }
     $24 = HEAP8[$__buf>>0]|0;
     $and$i$i91 = $24 & 1;
     $tobool$i$i92 = ($and$i$i91<<24>>24)==(0);
     if ($tobool$i$i92) {
      $cond$i97 = 10;
     } else {
      $25 = HEAP32[$__buf>>2]|0;
      $and$i1$i94 = $25 & -2;
      $phitmp$i95 = (($and$i1$i94) + -1)|0;
      $cond$i97 = $phitmp$i95;
     }
     __THREW__ = 0;
     invoke_viii(385,($__buf|0),($cond$i97|0),0);
     $26 = __THREW__; __THREW__ = 0;
     $27 = $26&1;
     if ($27) {
      label = 34;
      break;
     }
     $28 = HEAP8[$__buf>>0]|0;
     $and$i$i$i101 = $28 & 1;
     $tobool$i$i$i102 = ($and$i$i$i101<<24>>24)==(0);
     if ($tobool$i$i$i102) {
      $cond$i$i108 = $arrayidx$i$i$i106$pre$phiZZZZ2D;
     } else {
      $29 = HEAP32[$__data_$i$i$i103$pre$phiZZZZ2D>>2]|0;
      $cond$i$i108 = $29;
     }
     $add$ptr = (($cond$i$i108) + ($cond$i65124)|0);
     HEAP32[$__a_end>>2] = $add$ptr;
     $__a$1 = $cond$i$i108;
    } else {
     $__a$1 = $__a$0;
    }
    $__ninp_$i$i111 = (($34) + 12|0);
    $35 = HEAP32[$__ninp_$i$i111>>2]|0;
    $__einp_$i$i112 = (($34) + 16|0);
    $36 = HEAP32[$__einp_$i$i112>>2]|0;
    $cmp$i$i113 = ($35|0)==($36|0);
    if ($cmp$i$i113) {
     $vtable$i$i114 = HEAP32[$34>>2]|0;
     $vfn$i$i115 = (($vtable$i$i114) + 36|0);
     $37 = HEAP32[$vfn$i$i115>>2]|0;
     __THREW__ = 0;
     $call$i$i119 = (invoke_ii($37|0,($34|0))|0);
     $38 = __THREW__; __THREW__ = 0;
     $39 = $38&1;
     if ($39) {
      label = 34;
      break;
     } else {
      $retval$0$i$i = $call$i$i119;
     }
    } else {
     $40 = HEAP32[$35>>2]|0;
     $retval$0$i$i = $40;
    }
    $call21 = (__ZNSt3__19__num_getIwE17__stage2_int_loopEwiPcRS2_RjwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_Pw($retval$0$i$i,$call,$__a$1,$__a_end,$__dc,$4,$__grouping,$__g,$__g_end,$__atoms)|0);
    $tobool = ($call21|0)==(0);
    if (!($tobool)) {
     $$pre$i15$i$i = $69;$__a$2 = $__a$1;
     break;
    }
    $41 = HEAP32[$__ninp_$i$i111>>2]|0;
    $42 = HEAP32[$__einp_$i$i112>>2]|0;
    $cmp$i$i87 = ($41|0)==($42|0);
    if ($cmp$i$i87) {
     $vtable$i$i = HEAP32[$34>>2]|0;
     $vfn$i$i = (($vtable$i$i) + 40|0);
     $43 = HEAP32[$vfn$i$i>>2]|0;
     __THREW__ = 0;
     (invoke_ii($43|0,($34|0))|0);
     $44 = __THREW__; __THREW__ = 0;
     $45 = $44&1;
     if ($45) {
      label = 34;
      break;
     } else {
      $$pre$i$i$i25 = $34;$__a$0 = $__a$1;
      continue;
     }
    } else {
     $incdec$ptr$i$i = (($41) + 4|0);
     HEAP32[$__ninp_$i$i111>>2] = $incdec$ptr$i$i;
     $$pre$i$i$i25 = $34;$__a$0 = $__a$1;
     continue;
    }
   }
   if ((label|0) == 34) {
    $30 = ___cxa_find_matching_catch()|0;
    $31 = tempRet0;
    $lpad$phi$index = $30;$lpad$phi$index2 = $31;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
    ___resumeException($lpad$phi$index|0);
    // unreachable;
   }
   $46 = HEAP8[$__grouping>>0]|0;
   $and$i$i78 = $46 & 1;
   $tobool$i$i79 = ($and$i$i78<<24>>24)==(0);
   if ($tobool$i$i79) {
    $conv$i$i82 = $46&255;
    $shr1$i$i83 = $conv$i$i82 >>> 1;
    $cond$i85 = $shr1$i$i83;
   } else {
    $__size_$i2$i80 = (($__grouping) + 4|0);
    $47 = HEAP32[$__size_$i2$i80>>2]|0;
    $cond$i85 = $47;
   }
   $cmp27 = ($cond$i85|0)==(0);
   if (!($cmp27)) {
    $48 = HEAP32[$__g_end>>2]|0;
    $sub$ptr$lhs$cast29 = $48;
    $sub$ptr$rhs$cast30 = $__g;
    $sub$ptr$sub31 = (($sub$ptr$lhs$cast29) - ($sub$ptr$rhs$cast30))|0;
    $cmp32 = ($sub$ptr$sub31|0)<(160);
    if ($cmp32) {
     $49 = HEAP32[$__dc>>2]|0;
     $incdec$ptr = (($48) + 4|0);
     HEAP32[$__g_end>>2] = $incdec$ptr;
     HEAP32[$48>>2] = $49;
    }
   }
   $50 = HEAP32[$__a_end>>2]|0;
   __THREW__ = 0;
   $call36 = (invoke_iiiii(389,($__a$2|0),($50|0),($__err|0),($call|0))|0);
   $51 = __THREW__; __THREW__ = 0;
   $52 = $51&1;
   if (!($52)) {
    HEAP32[$__v>>2] = $call36;
    $53 = HEAP32[$__g_end>>2]|0;
    __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping,$__g,$53,$__err);
    $tobool$i$i$i = ($34|0)==(0|0);
    if ($tobool$i$i$i) {
     $67 = 0;$70 = 1;
    } else {
     $__ninp_$i$i$i$i = (($34) + 12|0);
     $54 = HEAP32[$__ninp_$i$i$i$i>>2]|0;
     $__einp_$i$i$i$i = (($34) + 16|0);
     $55 = HEAP32[$__einp_$i$i$i$i>>2]|0;
     $cmp$i$i$i$i = ($54|0)==($55|0);
     if ($cmp$i$i$i$i) {
      $vtable$i$i$i$i = HEAP32[$34>>2]|0;
      $vfn$i$i$i$i = (($vtable$i$i$i$i) + 36|0);
      $56 = HEAP32[$vfn$i$i$i$i>>2]|0;
      __THREW__ = 0;
      $call$i$i$i$i9 = (invoke_ii($56|0,($34|0))|0);
      $57 = __THREW__; __THREW__ = 0;
      $58 = $57&1;
      if ($58) {
       break;
      } else {
       $retval$0$i$i$i$i = $call$i$i$i$i9;
      }
     } else {
      $59 = HEAP32[$54>>2]|0;
      $retval$0$i$i$i$i = $59;
     }
     $cmp$i1$i$i$i = ($retval$0$i$i$i$i|0)==(-1);
     if ($cmp$i1$i$i$i) {
      HEAP32[$__b>>2] = 0;
      $67 = 0;$70 = 1;
     } else {
      $67 = $34;$70 = 0;
     }
    }
    $tobool$i2$i$i = ($$pre$i15$i$i|0)==(0|0);
    do {
     if ($tobool$i2$i$i) {
      label = 63;
     } else {
      $__ninp_$i$i3$i$i = (($$pre$i15$i$i) + 12|0);
      $60 = HEAP32[$__ninp_$i$i3$i$i>>2]|0;
      $__einp_$i$i4$i$i = (($$pre$i15$i$i) + 16|0);
      $61 = HEAP32[$__einp_$i$i4$i$i>>2]|0;
      $cmp$i$i5$i$i = ($60|0)==($61|0);
      if ($cmp$i$i5$i$i) {
       $vtable$i$i7$i$i = HEAP32[$$pre$i15$i$i>>2]|0;
       $vfn$i$i8$i$i = (($vtable$i$i7$i$i) + 36|0);
       $62 = HEAP32[$vfn$i$i8$i$i>>2]|0;
       __THREW__ = 0;
       $call$i$i9$i$i10 = (invoke_ii($62|0,($$pre$i15$i$i|0))|0);
       $63 = __THREW__; __THREW__ = 0;
       $64 = $63&1;
       if ($64) {
        break L1;
       } else {
        $retval$0$i$i12$i$i = $call$i$i9$i$i10;
       }
      } else {
       $65 = HEAP32[$60>>2]|0;
       $retval$0$i$i12$i$i = $65;
      }
      $cmp$i1$i13$i$i = ($retval$0$i$i12$i$i|0)==(-1);
      if ($cmp$i1$i13$i$i) {
       HEAP32[$__e>>2] = 0;
       label = 63;
       break;
      }
      if ($70) {
       HEAP32[$agg$result>>2] = $67;
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
       STACKTOP = sp;return;
      }
     }
    } while(0);
    if ((label|0) == 63) {
     if (!($70)) {
      HEAP32[$agg$result>>2] = $67;
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
      STACKTOP = sp;return;
     }
    }
    $66 = HEAP32[$__err>>2]|0;
    $or = $66 | 2;
    HEAP32[$__err>>2] = $or;
    HEAP32[$agg$result>>2] = $67;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
    STACKTOP = sp;return;
   }
  }
 } while(0);
 $32 = ___cxa_find_matching_catch()|0;
 $33 = tempRet0;
 $lpad$phi$index = $32;$lpad$phi$index2 = $33;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
 ___resumeException($lpad$phi$index|0);
 // unreachable;
}
function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRm($agg$result,$this,$__b,$__e,$__iob,$__err,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $0 = 0, $1 = 0, $agg$tmp = 0, $agg$tmp$byval_copy = 0, $agg$tmp2 = 0, $agg$tmp2$byval_copy = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $agg$tmp2$byval_copy = sp + 12|0;
 $agg$tmp$byval_copy = sp + 8|0;
 $agg$tmp = sp + 4|0;
 $agg$tmp2 = sp;
 $0 = HEAP32[$__b>>2]|0;
 HEAP32[$agg$tmp>>2] = $0;
 $1 = HEAP32[$__e>>2]|0;
 HEAP32[$agg$tmp2>>2] = $1;
 ;HEAP32[$agg$tmp$byval_copy+0>>2]=HEAP32[$agg$tmp+0>>2]|0;
 ;HEAP32[$agg$tmp2$byval_copy+0>>2]=HEAP32[$agg$tmp2+0>>2]|0;
 __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__do_get_unsignedImEES4_S4_S4_RNS_8ios_baseERjRT_($agg$result,0,$agg$tmp$byval_copy,$agg$tmp2$byval_copy,$__iob,$__err,$__v);
 STACKTOP = sp;return;
}
function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__do_get_unsignedImEES4_S4_S4_RNS_8ios_baseERjRT_($agg$result,$this,$__b,$__e,$__iob,$__err,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$pre = 0, $$pre$i$i$i25 = 0, $$pre$i15$i$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $8 = 0, $9 = 0, $__a$0 = 0, $__a$1 = 0, $__a$2 = 0, $__a_end = 0, $__atoms = 0, $__buf = 0;
 var $__data_$i$i$i = 0, $__data_$i$i$i103$pre = 0, $__data_$i$i$i103$pre$phiZZZZ2D = 0, $__dc = 0, $__einp_$i$i$i$i = 0, $__einp_$i$i$i$i15 = 0, $__einp_$i$i112 = 0, $__einp_$i$i4$i$i = 0, $__einp_$i$i4$i$i33 = 0, $__g = 0, $__g_end = 0, $__grouping = 0, $__ninp_$i$i$i$i = 0, $__ninp_$i$i$i$i14 = 0, $__ninp_$i$i111 = 0, $__ninp_$i$i3$i$i = 0, $__ninp_$i$i3$i$i32 = 0, $__size_$i2$i70 = 0, $__size_$i2$i80 = 0, $__thousands_sep = 0;
 var $add$ptr = 0, $and$i$i$i = 0, $and$i$i$i101 = 0, $and$i$i53 = 0, $and$i$i78 = 0, $and$i$i91 = 0, $and$i1$i94 = 0, $arrayidx$i$i$i = 0, $arrayidx$i$i$i106$pre = 0, $arrayidx$i$i$i106$pre$phiZZZZ2D = 0, $call = 0, $call$i$i$i$i49 = 0, $call$i$i$i$i9 = 0, $call$i$i119 = 0, $call$i$i9$i$i10 = 0, $call$i$i9$i$i51 = 0, $call21 = 0, $call36 = 0, $cmp = 0, $cmp$i$i$i$i = 0;
 var $cmp$i$i$i$i16 = 0, $cmp$i$i113 = 0, $cmp$i$i5$i$i = 0, $cmp$i$i5$i$i34 = 0, $cmp$i$i87 = 0, $cmp$i1$i$i$i = 0, $cmp$i1$i$i$i23 = 0, $cmp$i1$i13$i$i = 0, $cmp$i1$i13$i$i41 = 0, $cmp27 = 0, $cmp32 = 0, $cond$i$i = 0, $cond$i$i108 = 0, $cond$i56 = 0, $cond$i65124 = 0, $cond$i75 = 0, $cond$i85 = 0, $cond$i97 = 0, $conv$i$i = 0, $conv$i$i62 = 0;
 var $conv$i$i72 = 0, $conv$i$i82 = 0, $incdec$ptr = 0, $incdec$ptr$i$i = 0, $lpad$phi$index = 0, $lpad$phi$index2 = 0, $mul = 0, $or = 0, $phitmp$i95 = 0, $retval$0$i$i = 0, $retval$0$i$i$i$i = 0, $retval$0$i$i$i$i22 = 0, $retval$0$i$i12$i$i = 0, $retval$0$i$i12$i$i40 = 0, $shr1$i$i = 0, $shr1$i$i63 = 0, $shr1$i$i73 = 0, $shr1$i$i83 = 0, $sub$ptr$lhs$cast = 0, $sub$ptr$lhs$cast29 = 0;
 var $sub$ptr$rhs$cast = 0, $sub$ptr$rhs$cast30 = 0, $sub$ptr$sub = 0, $sub$ptr$sub31 = 0, $tobool = 0, $tobool$i$i$i = 0, $tobool$i$i$i102 = 0, $tobool$i$i$i11 = 0, $tobool$i$i$i13 = 0, $tobool$i$i54 = 0, $tobool$i$i79 = 0, $tobool$i$i92 = 0, $tobool$i2$i$i = 0, $tobool$i2$i$i30 = 0, $vfn$i$i = 0, $vfn$i$i$i$i = 0, $vfn$i$i$i$i19 = 0, $vfn$i$i115 = 0, $vfn$i$i8$i$i = 0, $vfn$i$i8$i$i37 = 0;
 var $vtable$i$i = 0, $vtable$i$i$i$i = 0, $vtable$i$i$i$i18 = 0, $vtable$i$i114 = 0, $vtable$i$i7$i$i = 0, $vtable$i$i7$i$i36 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 304|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__atoms = sp + 160|0;
 $__thousands_sep = sp + 280|0;
 $__grouping = sp + 264|0;
 $__buf = sp + 284|0;
 $__a_end = sp + 300|0;
 $__g = sp;
 $__g_end = sp + 276|0;
 $__dc = sp + 296|0;
 $call = (__ZNSt3__114__num_get_base10__get_baseERNS_8ios_baseE($__iob)|0);
 __ZNSt3__19__num_getIwE17__stage2_int_prepERNS_8ios_baseEPwRw($__grouping,$__iob,$__atoms,$__thousands_sep);
 ;HEAP32[$__buf+0>>2]=0|0;HEAP32[$__buf+4>>2]=0|0;HEAP32[$__buf+8>>2]=0|0;
 __THREW__ = 0;
 invoke_viii(385,($__buf|0),10,0);
 $0 = __THREW__; __THREW__ = 0;
 $1 = $0&1;
 L1: do {
  if (!($1)) {
   $2 = HEAP8[$__buf>>0]|0;
   $and$i$i$i = $2 & 1;
   $tobool$i$i$i11 = ($and$i$i$i<<24>>24)==(0);
   if ($tobool$i$i$i11) {
    $arrayidx$i$i$i = (($__buf) + 1|0);
    $__data_$i$i$i103$pre = (($__buf) + 8|0);
    $__data_$i$i$i103$pre$phiZZZZ2D = $__data_$i$i$i103$pre;$arrayidx$i$i$i106$pre$phiZZZZ2D = $arrayidx$i$i$i;$cond$i$i = $arrayidx$i$i$i;
   } else {
    $__data_$i$i$i = (($__buf) + 8|0);
    $3 = HEAP32[$__data_$i$i$i>>2]|0;
    $arrayidx$i$i$i106$pre = (($__buf) + 1|0);
    $__data_$i$i$i103$pre$phiZZZZ2D = $__data_$i$i$i;$arrayidx$i$i$i106$pre$phiZZZZ2D = $arrayidx$i$i$i106$pre;$cond$i$i = $3;
   }
   HEAP32[$__a_end>>2] = $cond$i$i;
   HEAP32[$__g_end>>2] = $__g;
   HEAP32[$__dc>>2] = 0;
   $__size_$i2$i70 = (($__buf) + 4|0);
   $4 = HEAP32[$__thousands_sep>>2]|0;
   $$pre = HEAP32[$__b>>2]|0;
   $$pre$i$i$i25 = $$pre;$__a$0 = $cond$i$i;
   L7: while(1) {
    $tobool$i$i$i13 = ($$pre$i$i$i25|0)==(0|0);
    if ($tobool$i$i$i13) {
     $34 = 0;$68 = 1;
    } else {
     $__ninp_$i$i$i$i14 = (($$pre$i$i$i25) + 12|0);
     $5 = HEAP32[$__ninp_$i$i$i$i14>>2]|0;
     $__einp_$i$i$i$i15 = (($$pre$i$i$i25) + 16|0);
     $6 = HEAP32[$__einp_$i$i$i$i15>>2]|0;
     $cmp$i$i$i$i16 = ($5|0)==($6|0);
     if ($cmp$i$i$i$i16) {
      $vtable$i$i$i$i18 = HEAP32[$$pre$i$i$i25>>2]|0;
      $vfn$i$i$i$i19 = (($vtable$i$i$i$i18) + 36|0);
      $7 = HEAP32[$vfn$i$i$i$i19>>2]|0;
      __THREW__ = 0;
      $call$i$i$i$i49 = (invoke_ii($7|0,($$pre$i$i$i25|0))|0);
      $8 = __THREW__; __THREW__ = 0;
      $9 = $8&1;
      if ($9) {
       label = 34;
       break;
      } else {
       $retval$0$i$i$i$i22 = $call$i$i$i$i49;
      }
     } else {
      $10 = HEAP32[$5>>2]|0;
      $retval$0$i$i$i$i22 = $10;
     }
     $cmp$i1$i$i$i23 = ($retval$0$i$i$i$i22|0)==(-1);
     if ($cmp$i1$i$i$i23) {
      HEAP32[$__b>>2] = 0;
      $34 = 0;$68 = 1;
     } else {
      $34 = $$pre$i$i$i25;$68 = 0;
     }
    }
    $11 = HEAP32[$__e>>2]|0;
    $tobool$i2$i$i30 = ($11|0)==(0|0);
    do {
     if ($tobool$i2$i$i30) {
      label = 18;
     } else {
      $__ninp_$i$i3$i$i32 = (($11) + 12|0);
      $12 = HEAP32[$__ninp_$i$i3$i$i32>>2]|0;
      $__einp_$i$i4$i$i33 = (($11) + 16|0);
      $13 = HEAP32[$__einp_$i$i4$i$i33>>2]|0;
      $cmp$i$i5$i$i34 = ($12|0)==($13|0);
      if ($cmp$i$i5$i$i34) {
       $vtable$i$i7$i$i36 = HEAP32[$11>>2]|0;
       $vfn$i$i8$i$i37 = (($vtable$i$i7$i$i36) + 36|0);
       $14 = HEAP32[$vfn$i$i8$i$i37>>2]|0;
       __THREW__ = 0;
       $call$i$i9$i$i51 = (invoke_ii($14|0,($11|0))|0);
       $15 = __THREW__; __THREW__ = 0;
       $16 = $15&1;
       if ($16) {
        label = 34;
        break L7;
       } else {
        $retval$0$i$i12$i$i40 = $call$i$i9$i$i51;
       }
      } else {
       $17 = HEAP32[$12>>2]|0;
       $retval$0$i$i12$i$i40 = $17;
      }
      $cmp$i1$i13$i$i41 = ($retval$0$i$i12$i$i40|0)==(-1);
      if ($cmp$i1$i13$i$i41) {
       HEAP32[$__e>>2] = 0;
       label = 18;
       break;
      } else {
       if ($68) {
        $69 = $11;
        break;
       } else {
        $$pre$i15$i$i = $11;$__a$2 = $__a$0;
        break L7;
       }
      }
     }
    } while(0);
    if ((label|0) == 18) {
     label = 0;
     if ($68) {
      $$pre$i15$i$i = 0;$__a$2 = $__a$0;
      break;
     } else {
      $69 = 0;
     }
    }
    $18 = HEAP32[$__a_end>>2]|0;
    $sub$ptr$lhs$cast = $18;
    $sub$ptr$rhs$cast = $__a$0;
    $sub$ptr$sub = (($sub$ptr$lhs$cast) - ($sub$ptr$rhs$cast))|0;
    $19 = HEAP8[$__buf>>0]|0;
    $and$i$i53 = $19 & 1;
    $tobool$i$i54 = ($and$i$i53<<24>>24)==(0);
    if ($tobool$i$i54) {
     $conv$i$i = $19&255;
     $shr1$i$i = $conv$i$i >>> 1;
     $cond$i56 = $shr1$i$i;
    } else {
     $20 = HEAP32[$__size_$i2$i70>>2]|0;
     $cond$i56 = $20;
    }
    $cmp = ($sub$ptr$sub|0)==($cond$i56|0);
    if ($cmp) {
     if ($tobool$i$i54) {
      $conv$i$i62 = $19&255;
      $shr1$i$i63 = $conv$i$i62 >>> 1;
      $conv$i$i72 = $19&255;
      $shr1$i$i73 = $conv$i$i72 >>> 1;
      $cond$i65124 = $shr1$i$i63;$cond$i75 = $shr1$i$i73;
     } else {
      $21 = HEAP32[$__size_$i2$i70>>2]|0;
      $cond$i65124 = $21;$cond$i75 = $21;
     }
     $mul = $cond$i75 << 1;
     __THREW__ = 0;
     invoke_viii(385,($__buf|0),($mul|0),0);
     $22 = __THREW__; __THREW__ = 0;
     $23 = $22&1;
     if ($23) {
      label = 34;
      break;
     }
     $24 = HEAP8[$__buf>>0]|0;
     $and$i$i91 = $24 & 1;
     $tobool$i$i92 = ($and$i$i91<<24>>24)==(0);
     if ($tobool$i$i92) {
      $cond$i97 = 10;
     } else {
      $25 = HEAP32[$__buf>>2]|0;
      $and$i1$i94 = $25 & -2;
      $phitmp$i95 = (($and$i1$i94) + -1)|0;
      $cond$i97 = $phitmp$i95;
     }
     __THREW__ = 0;
     invoke_viii(385,($__buf|0),($cond$i97|0),0);
     $26 = __THREW__; __THREW__ = 0;
     $27 = $26&1;
     if ($27) {
      label = 34;
      break;
     }
     $28 = HEAP8[$__buf>>0]|0;
     $and$i$i$i101 = $28 & 1;
     $tobool$i$i$i102 = ($and$i$i$i101<<24>>24)==(0);
     if ($tobool$i$i$i102) {
      $cond$i$i108 = $arrayidx$i$i$i106$pre$phiZZZZ2D;
     } else {
      $29 = HEAP32[$__data_$i$i$i103$pre$phiZZZZ2D>>2]|0;
      $cond$i$i108 = $29;
     }
     $add$ptr = (($cond$i$i108) + ($cond$i65124)|0);
     HEAP32[$__a_end>>2] = $add$ptr;
     $__a$1 = $cond$i$i108;
    } else {
     $__a$1 = $__a$0;
    }
    $__ninp_$i$i111 = (($34) + 12|0);
    $35 = HEAP32[$__ninp_$i$i111>>2]|0;
    $__einp_$i$i112 = (($34) + 16|0);
    $36 = HEAP32[$__einp_$i$i112>>2]|0;
    $cmp$i$i113 = ($35|0)==($36|0);
    if ($cmp$i$i113) {
     $vtable$i$i114 = HEAP32[$34>>2]|0;
     $vfn$i$i115 = (($vtable$i$i114) + 36|0);
     $37 = HEAP32[$vfn$i$i115>>2]|0;
     __THREW__ = 0;
     $call$i$i119 = (invoke_ii($37|0,($34|0))|0);
     $38 = __THREW__; __THREW__ = 0;
     $39 = $38&1;
     if ($39) {
      label = 34;
      break;
     } else {
      $retval$0$i$i = $call$i$i119;
     }
    } else {
     $40 = HEAP32[$35>>2]|0;
     $retval$0$i$i = $40;
    }
    $call21 = (__ZNSt3__19__num_getIwE17__stage2_int_loopEwiPcRS2_RjwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_Pw($retval$0$i$i,$call,$__a$1,$__a_end,$__dc,$4,$__grouping,$__g,$__g_end,$__atoms)|0);
    $tobool = ($call21|0)==(0);
    if (!($tobool)) {
     $$pre$i15$i$i = $69;$__a$2 = $__a$1;
     break;
    }
    $41 = HEAP32[$__ninp_$i$i111>>2]|0;
    $42 = HEAP32[$__einp_$i$i112>>2]|0;
    $cmp$i$i87 = ($41|0)==($42|0);
    if ($cmp$i$i87) {
     $vtable$i$i = HEAP32[$34>>2]|0;
     $vfn$i$i = (($vtable$i$i) + 40|0);
     $43 = HEAP32[$vfn$i$i>>2]|0;
     __THREW__ = 0;
     (invoke_ii($43|0,($34|0))|0);
     $44 = __THREW__; __THREW__ = 0;
     $45 = $44&1;
     if ($45) {
      label = 34;
      break;
     } else {
      $$pre$i$i$i25 = $34;$__a$0 = $__a$1;
      continue;
     }
    } else {
     $incdec$ptr$i$i = (($41) + 4|0);
     HEAP32[$__ninp_$i$i111>>2] = $incdec$ptr$i$i;
     $$pre$i$i$i25 = $34;$__a$0 = $__a$1;
     continue;
    }
   }
   if ((label|0) == 34) {
    $30 = ___cxa_find_matching_catch()|0;
    $31 = tempRet0;
    $lpad$phi$index = $30;$lpad$phi$index2 = $31;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
    ___resumeException($lpad$phi$index|0);
    // unreachable;
   }
   $46 = HEAP8[$__grouping>>0]|0;
   $and$i$i78 = $46 & 1;
   $tobool$i$i79 = ($and$i$i78<<24>>24)==(0);
   if ($tobool$i$i79) {
    $conv$i$i82 = $46&255;
    $shr1$i$i83 = $conv$i$i82 >>> 1;
    $cond$i85 = $shr1$i$i83;
   } else {
    $__size_$i2$i80 = (($__grouping) + 4|0);
    $47 = HEAP32[$__size_$i2$i80>>2]|0;
    $cond$i85 = $47;
   }
   $cmp27 = ($cond$i85|0)==(0);
   if (!($cmp27)) {
    $48 = HEAP32[$__g_end>>2]|0;
    $sub$ptr$lhs$cast29 = $48;
    $sub$ptr$rhs$cast30 = $__g;
    $sub$ptr$sub31 = (($sub$ptr$lhs$cast29) - ($sub$ptr$rhs$cast30))|0;
    $cmp32 = ($sub$ptr$sub31|0)<(160);
    if ($cmp32) {
     $49 = HEAP32[$__dc>>2]|0;
     $incdec$ptr = (($48) + 4|0);
     HEAP32[$__g_end>>2] = $incdec$ptr;
     HEAP32[$48>>2] = $49;
    }
   }
   $50 = HEAP32[$__a_end>>2]|0;
   __THREW__ = 0;
   $call36 = (invoke_iiiii(390,($__a$2|0),($50|0),($__err|0),($call|0))|0);
   $51 = __THREW__; __THREW__ = 0;
   $52 = $51&1;
   if (!($52)) {
    HEAP32[$__v>>2] = $call36;
    $53 = HEAP32[$__g_end>>2]|0;
    __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping,$__g,$53,$__err);
    $tobool$i$i$i = ($34|0)==(0|0);
    if ($tobool$i$i$i) {
     $67 = 0;$70 = 1;
    } else {
     $__ninp_$i$i$i$i = (($34) + 12|0);
     $54 = HEAP32[$__ninp_$i$i$i$i>>2]|0;
     $__einp_$i$i$i$i = (($34) + 16|0);
     $55 = HEAP32[$__einp_$i$i$i$i>>2]|0;
     $cmp$i$i$i$i = ($54|0)==($55|0);
     if ($cmp$i$i$i$i) {
      $vtable$i$i$i$i = HEAP32[$34>>2]|0;
      $vfn$i$i$i$i = (($vtable$i$i$i$i) + 36|0);
      $56 = HEAP32[$vfn$i$i$i$i>>2]|0;
      __THREW__ = 0;
      $call$i$i$i$i9 = (invoke_ii($56|0,($34|0))|0);
      $57 = __THREW__; __THREW__ = 0;
      $58 = $57&1;
      if ($58) {
       break;
      } else {
       $retval$0$i$i$i$i = $call$i$i$i$i9;
      }
     } else {
      $59 = HEAP32[$54>>2]|0;
      $retval$0$i$i$i$i = $59;
     }
     $cmp$i1$i$i$i = ($retval$0$i$i$i$i|0)==(-1);
     if ($cmp$i1$i$i$i) {
      HEAP32[$__b>>2] = 0;
      $67 = 0;$70 = 1;
     } else {
      $67 = $34;$70 = 0;
     }
    }
    $tobool$i2$i$i = ($$pre$i15$i$i|0)==(0|0);
    do {
     if ($tobool$i2$i$i) {
      label = 63;
     } else {
      $__ninp_$i$i3$i$i = (($$pre$i15$i$i) + 12|0);
      $60 = HEAP32[$__ninp_$i$i3$i$i>>2]|0;
      $__einp_$i$i4$i$i = (($$pre$i15$i$i) + 16|0);
      $61 = HEAP32[$__einp_$i$i4$i$i>>2]|0;
      $cmp$i$i5$i$i = ($60|0)==($61|0);
      if ($cmp$i$i5$i$i) {
       $vtable$i$i7$i$i = HEAP32[$$pre$i15$i$i>>2]|0;
       $vfn$i$i8$i$i = (($vtable$i$i7$i$i) + 36|0);
       $62 = HEAP32[$vfn$i$i8$i$i>>2]|0;
       __THREW__ = 0;
       $call$i$i9$i$i10 = (invoke_ii($62|0,($$pre$i15$i$i|0))|0);
       $63 = __THREW__; __THREW__ = 0;
       $64 = $63&1;
       if ($64) {
        break L1;
       } else {
        $retval$0$i$i12$i$i = $call$i$i9$i$i10;
       }
      } else {
       $65 = HEAP32[$60>>2]|0;
       $retval$0$i$i12$i$i = $65;
      }
      $cmp$i1$i13$i$i = ($retval$0$i$i12$i$i|0)==(-1);
      if ($cmp$i1$i13$i$i) {
       HEAP32[$__e>>2] = 0;
       label = 63;
       break;
      }
      if ($70) {
       HEAP32[$agg$result>>2] = $67;
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
       STACKTOP = sp;return;
      }
     }
    } while(0);
    if ((label|0) == 63) {
     if (!($70)) {
      HEAP32[$agg$result>>2] = $67;
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
      STACKTOP = sp;return;
     }
    }
    $66 = HEAP32[$__err>>2]|0;
    $or = $66 | 2;
    HEAP32[$__err>>2] = $or;
    HEAP32[$agg$result>>2] = $67;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
    STACKTOP = sp;return;
   }
  }
 } while(0);
 $32 = ___cxa_find_matching_catch()|0;
 $33 = tempRet0;
 $lpad$phi$index = $32;$lpad$phi$index2 = $33;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
 ___resumeException($lpad$phi$index|0);
 // unreachable;
}
function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRy($agg$result,$this,$__b,$__e,$__iob,$__err,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $0 = 0, $1 = 0, $agg$tmp = 0, $agg$tmp$byval_copy = 0, $agg$tmp2 = 0, $agg$tmp2$byval_copy = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $agg$tmp2$byval_copy = sp + 12|0;
 $agg$tmp$byval_copy = sp + 8|0;
 $agg$tmp = sp + 4|0;
 $agg$tmp2 = sp;
 $0 = HEAP32[$__b>>2]|0;
 HEAP32[$agg$tmp>>2] = $0;
 $1 = HEAP32[$__e>>2]|0;
 HEAP32[$agg$tmp2>>2] = $1;
 ;HEAP32[$agg$tmp$byval_copy+0>>2]=HEAP32[$agg$tmp+0>>2]|0;
 ;HEAP32[$agg$tmp2$byval_copy+0>>2]=HEAP32[$agg$tmp2+0>>2]|0;
 __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__do_get_unsignedIyEES4_S4_S4_RNS_8ios_baseERjRT_($agg$result,0,$agg$tmp$byval_copy,$agg$tmp2$byval_copy,$__iob,$__err,$__v);
 STACKTOP = sp;return;
}
function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__do_get_unsignedIyEES4_S4_S4_RNS_8ios_baseERjRT_($agg$result,$this,$__b,$__e,$__iob,$__err,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$pre = 0, $$pre$i$i$i25 = 0, $$pre$i15$i$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $8 = 0, $9 = 0;
 var $__a$0 = 0, $__a$1 = 0, $__a$2 = 0, $__a_end = 0, $__atoms = 0, $__buf = 0, $__data_$i$i$i = 0, $__data_$i$i$i103$pre = 0, $__data_$i$i$i103$pre$phiZZZZ2D = 0, $__dc = 0, $__einp_$i$i$i$i = 0, $__einp_$i$i$i$i15 = 0, $__einp_$i$i112 = 0, $__einp_$i$i4$i$i = 0, $__einp_$i$i4$i$i33 = 0, $__g = 0, $__g_end = 0, $__grouping = 0, $__ninp_$i$i$i$i = 0, $__ninp_$i$i$i$i14 = 0;
 var $__ninp_$i$i111 = 0, $__ninp_$i$i3$i$i = 0, $__ninp_$i$i3$i$i32 = 0, $__size_$i2$i70 = 0, $__size_$i2$i80 = 0, $__thousands_sep = 0, $add$ptr = 0, $and$i$i$i = 0, $and$i$i$i101 = 0, $and$i$i53 = 0, $and$i$i78 = 0, $and$i$i91 = 0, $and$i1$i94 = 0, $arrayidx$i$i$i = 0, $arrayidx$i$i$i106$pre = 0, $arrayidx$i$i$i106$pre$phiZZZZ2D = 0, $call = 0, $call$i$i$i$i49 = 0, $call$i$i$i$i9 = 0, $call$i$i119 = 0;
 var $call$i$i9$i$i10 = 0, $call$i$i9$i$i51 = 0, $call21 = 0, $cmp = 0, $cmp$i$i$i$i = 0, $cmp$i$i$i$i16 = 0, $cmp$i$i113 = 0, $cmp$i$i5$i$i = 0, $cmp$i$i5$i$i34 = 0, $cmp$i$i87 = 0, $cmp$i1$i$i$i = 0, $cmp$i1$i$i$i23 = 0, $cmp$i1$i13$i$i = 0, $cmp$i1$i13$i$i41 = 0, $cmp27 = 0, $cmp32 = 0, $cond$i$i = 0, $cond$i$i108 = 0, $cond$i56 = 0, $cond$i65124 = 0;
 var $cond$i75 = 0, $cond$i85 = 0, $cond$i97 = 0, $conv$i$i = 0, $conv$i$i62 = 0, $conv$i$i72 = 0, $conv$i$i82 = 0, $incdec$ptr = 0, $incdec$ptr$i$i = 0, $lpad$phi$index = 0, $lpad$phi$index2 = 0, $mul = 0, $or = 0, $phitmp$i95 = 0, $retval$0$i$i = 0, $retval$0$i$i$i$i = 0, $retval$0$i$i$i$i22 = 0, $retval$0$i$i12$i$i = 0, $retval$0$i$i12$i$i40 = 0, $shr1$i$i = 0;
 var $shr1$i$i63 = 0, $shr1$i$i73 = 0, $shr1$i$i83 = 0, $sub$ptr$lhs$cast = 0, $sub$ptr$lhs$cast29 = 0, $sub$ptr$rhs$cast = 0, $sub$ptr$rhs$cast30 = 0, $sub$ptr$sub = 0, $sub$ptr$sub31 = 0, $tobool = 0, $tobool$i$i$i = 0, $tobool$i$i$i102 = 0, $tobool$i$i$i11 = 0, $tobool$i$i$i13 = 0, $tobool$i$i54 = 0, $tobool$i$i79 = 0, $tobool$i$i92 = 0, $tobool$i2$i$i = 0, $tobool$i2$i$i30 = 0, $vfn$i$i = 0;
 var $vfn$i$i$i$i = 0, $vfn$i$i$i$i19 = 0, $vfn$i$i115 = 0, $vfn$i$i8$i$i = 0, $vfn$i$i8$i$i37 = 0, $vtable$i$i = 0, $vtable$i$i$i$i = 0, $vtable$i$i$i$i18 = 0, $vtable$i$i114 = 0, $vtable$i$i7$i$i = 0, $vtable$i$i7$i$i36 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 304|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__atoms = sp + 160|0;
 $__thousands_sep = sp + 280|0;
 $__grouping = sp + 264|0;
 $__buf = sp + 284|0;
 $__a_end = sp + 300|0;
 $__g = sp;
 $__g_end = sp + 276|0;
 $__dc = sp + 296|0;
 $call = (__ZNSt3__114__num_get_base10__get_baseERNS_8ios_baseE($__iob)|0);
 __ZNSt3__19__num_getIwE17__stage2_int_prepERNS_8ios_baseEPwRw($__grouping,$__iob,$__atoms,$__thousands_sep);
 ;HEAP32[$__buf+0>>2]=0|0;HEAP32[$__buf+4>>2]=0|0;HEAP32[$__buf+8>>2]=0|0;
 __THREW__ = 0;
 invoke_viii(385,($__buf|0),10,0);
 $0 = __THREW__; __THREW__ = 0;
 $1 = $0&1;
 L1: do {
  if (!($1)) {
   $2 = HEAP8[$__buf>>0]|0;
   $and$i$i$i = $2 & 1;
   $tobool$i$i$i11 = ($and$i$i$i<<24>>24)==(0);
   if ($tobool$i$i$i11) {
    $arrayidx$i$i$i = (($__buf) + 1|0);
    $__data_$i$i$i103$pre = (($__buf) + 8|0);
    $__data_$i$i$i103$pre$phiZZZZ2D = $__data_$i$i$i103$pre;$arrayidx$i$i$i106$pre$phiZZZZ2D = $arrayidx$i$i$i;$cond$i$i = $arrayidx$i$i$i;
   } else {
    $__data_$i$i$i = (($__buf) + 8|0);
    $3 = HEAP32[$__data_$i$i$i>>2]|0;
    $arrayidx$i$i$i106$pre = (($__buf) + 1|0);
    $__data_$i$i$i103$pre$phiZZZZ2D = $__data_$i$i$i;$arrayidx$i$i$i106$pre$phiZZZZ2D = $arrayidx$i$i$i106$pre;$cond$i$i = $3;
   }
   HEAP32[$__a_end>>2] = $cond$i$i;
   HEAP32[$__g_end>>2] = $__g;
   HEAP32[$__dc>>2] = 0;
   $__size_$i2$i70 = (($__buf) + 4|0);
   $4 = HEAP32[$__thousands_sep>>2]|0;
   $$pre = HEAP32[$__b>>2]|0;
   $$pre$i$i$i25 = $$pre;$__a$0 = $cond$i$i;
   L7: while(1) {
    $tobool$i$i$i13 = ($$pre$i$i$i25|0)==(0|0);
    if ($tobool$i$i$i13) {
     $34 = 0;$74 = 1;
    } else {
     $__ninp_$i$i$i$i14 = (($$pre$i$i$i25) + 12|0);
     $5 = HEAP32[$__ninp_$i$i$i$i14>>2]|0;
     $__einp_$i$i$i$i15 = (($$pre$i$i$i25) + 16|0);
     $6 = HEAP32[$__einp_$i$i$i$i15>>2]|0;
     $cmp$i$i$i$i16 = ($5|0)==($6|0);
     if ($cmp$i$i$i$i16) {
      $vtable$i$i$i$i18 = HEAP32[$$pre$i$i$i25>>2]|0;
      $vfn$i$i$i$i19 = (($vtable$i$i$i$i18) + 36|0);
      $7 = HEAP32[$vfn$i$i$i$i19>>2]|0;
      __THREW__ = 0;
      $call$i$i$i$i49 = (invoke_ii($7|0,($$pre$i$i$i25|0))|0);
      $8 = __THREW__; __THREW__ = 0;
      $9 = $8&1;
      if ($9) {
       label = 34;
       break;
      } else {
       $retval$0$i$i$i$i22 = $call$i$i$i$i49;
      }
     } else {
      $10 = HEAP32[$5>>2]|0;
      $retval$0$i$i$i$i22 = $10;
     }
     $cmp$i1$i$i$i23 = ($retval$0$i$i$i$i22|0)==(-1);
     if ($cmp$i1$i$i$i23) {
      HEAP32[$__b>>2] = 0;
      $34 = 0;$74 = 1;
     } else {
      $34 = $$pre$i$i$i25;$74 = 0;
     }
    }
    $11 = HEAP32[$__e>>2]|0;
    $tobool$i2$i$i30 = ($11|0)==(0|0);
    do {
     if ($tobool$i2$i$i30) {
      label = 18;
     } else {
      $__ninp_$i$i3$i$i32 = (($11) + 12|0);
      $12 = HEAP32[$__ninp_$i$i3$i$i32>>2]|0;
      $__einp_$i$i4$i$i33 = (($11) + 16|0);
      $13 = HEAP32[$__einp_$i$i4$i$i33>>2]|0;
      $cmp$i$i5$i$i34 = ($12|0)==($13|0);
      if ($cmp$i$i5$i$i34) {
       $vtable$i$i7$i$i36 = HEAP32[$11>>2]|0;
       $vfn$i$i8$i$i37 = (($vtable$i$i7$i$i36) + 36|0);
       $14 = HEAP32[$vfn$i$i8$i$i37>>2]|0;
       __THREW__ = 0;
       $call$i$i9$i$i51 = (invoke_ii($14|0,($11|0))|0);
       $15 = __THREW__; __THREW__ = 0;
       $16 = $15&1;
       if ($16) {
        label = 34;
        break L7;
       } else {
        $retval$0$i$i12$i$i40 = $call$i$i9$i$i51;
       }
      } else {
       $17 = HEAP32[$12>>2]|0;
       $retval$0$i$i12$i$i40 = $17;
      }
      $cmp$i1$i13$i$i41 = ($retval$0$i$i12$i$i40|0)==(-1);
      if ($cmp$i1$i13$i$i41) {
       HEAP32[$__e>>2] = 0;
       label = 18;
       break;
      } else {
       if ($74) {
        $75 = $11;
        break;
       } else {
        $$pre$i15$i$i = $11;$__a$2 = $__a$0;
        break L7;
       }
      }
     }
    } while(0);
    if ((label|0) == 18) {
     label = 0;
     if ($74) {
      $$pre$i15$i$i = 0;$__a$2 = $__a$0;
      break;
     } else {
      $75 = 0;
     }
    }
    $18 = HEAP32[$__a_end>>2]|0;
    $sub$ptr$lhs$cast = $18;
    $sub$ptr$rhs$cast = $__a$0;
    $sub$ptr$sub = (($sub$ptr$lhs$cast) - ($sub$ptr$rhs$cast))|0;
    $19 = HEAP8[$__buf>>0]|0;
    $and$i$i53 = $19 & 1;
    $tobool$i$i54 = ($and$i$i53<<24>>24)==(0);
    if ($tobool$i$i54) {
     $conv$i$i = $19&255;
     $shr1$i$i = $conv$i$i >>> 1;
     $cond$i56 = $shr1$i$i;
    } else {
     $20 = HEAP32[$__size_$i2$i70>>2]|0;
     $cond$i56 = $20;
    }
    $cmp = ($sub$ptr$sub|0)==($cond$i56|0);
    if ($cmp) {
     if ($tobool$i$i54) {
      $conv$i$i62 = $19&255;
      $shr1$i$i63 = $conv$i$i62 >>> 1;
      $conv$i$i72 = $19&255;
      $shr1$i$i73 = $conv$i$i72 >>> 1;
      $cond$i65124 = $shr1$i$i63;$cond$i75 = $shr1$i$i73;
     } else {
      $21 = HEAP32[$__size_$i2$i70>>2]|0;
      $cond$i65124 = $21;$cond$i75 = $21;
     }
     $mul = $cond$i75 << 1;
     __THREW__ = 0;
     invoke_viii(385,($__buf|0),($mul|0),0);
     $22 = __THREW__; __THREW__ = 0;
     $23 = $22&1;
     if ($23) {
      label = 34;
      break;
     }
     $24 = HEAP8[$__buf>>0]|0;
     $and$i$i91 = $24 & 1;
     $tobool$i$i92 = ($and$i$i91<<24>>24)==(0);
     if ($tobool$i$i92) {
      $cond$i97 = 10;
     } else {
      $25 = HEAP32[$__buf>>2]|0;
      $and$i1$i94 = $25 & -2;
      $phitmp$i95 = (($and$i1$i94) + -1)|0;
      $cond$i97 = $phitmp$i95;
     }
     __THREW__ = 0;
     invoke_viii(385,($__buf|0),($cond$i97|0),0);
     $26 = __THREW__; __THREW__ = 0;
     $27 = $26&1;
     if ($27) {
      label = 34;
      break;
     }
     $28 = HEAP8[$__buf>>0]|0;
     $and$i$i$i101 = $28 & 1;
     $tobool$i$i$i102 = ($and$i$i$i101<<24>>24)==(0);
     if ($tobool$i$i$i102) {
      $cond$i$i108 = $arrayidx$i$i$i106$pre$phiZZZZ2D;
     } else {
      $29 = HEAP32[$__data_$i$i$i103$pre$phiZZZZ2D>>2]|0;
      $cond$i$i108 = $29;
     }
     $add$ptr = (($cond$i$i108) + ($cond$i65124)|0);
     HEAP32[$__a_end>>2] = $add$ptr;
     $__a$1 = $cond$i$i108;
    } else {
     $__a$1 = $__a$0;
    }
    $__ninp_$i$i111 = (($34) + 12|0);
    $35 = HEAP32[$__ninp_$i$i111>>2]|0;
    $__einp_$i$i112 = (($34) + 16|0);
    $36 = HEAP32[$__einp_$i$i112>>2]|0;
    $cmp$i$i113 = ($35|0)==($36|0);
    if ($cmp$i$i113) {
     $vtable$i$i114 = HEAP32[$34>>2]|0;
     $vfn$i$i115 = (($vtable$i$i114) + 36|0);
     $37 = HEAP32[$vfn$i$i115>>2]|0;
     __THREW__ = 0;
     $call$i$i119 = (invoke_ii($37|0,($34|0))|0);
     $38 = __THREW__; __THREW__ = 0;
     $39 = $38&1;
     if ($39) {
      label = 34;
      break;
     } else {
      $retval$0$i$i = $call$i$i119;
     }
    } else {
     $40 = HEAP32[$35>>2]|0;
     $retval$0$i$i = $40;
    }
    $call21 = (__ZNSt3__19__num_getIwE17__stage2_int_loopEwiPcRS2_RjwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_Pw($retval$0$i$i,$call,$__a$1,$__a_end,$__dc,$4,$__grouping,$__g,$__g_end,$__atoms)|0);
    $tobool = ($call21|0)==(0);
    if (!($tobool)) {
     $$pre$i15$i$i = $75;$__a$2 = $__a$1;
     break;
    }
    $41 = HEAP32[$__ninp_$i$i111>>2]|0;
    $42 = HEAP32[$__einp_$i$i112>>2]|0;
    $cmp$i$i87 = ($41|0)==($42|0);
    if ($cmp$i$i87) {
     $vtable$i$i = HEAP32[$34>>2]|0;
     $vfn$i$i = (($vtable$i$i) + 40|0);
     $43 = HEAP32[$vfn$i$i>>2]|0;
     __THREW__ = 0;
     (invoke_ii($43|0,($34|0))|0);
     $44 = __THREW__; __THREW__ = 0;
     $45 = $44&1;
     if ($45) {
      label = 34;
      break;
     } else {
      $$pre$i$i$i25 = $34;$__a$0 = $__a$1;
      continue;
     }
    } else {
     $incdec$ptr$i$i = (($41) + 4|0);
     HEAP32[$__ninp_$i$i111>>2] = $incdec$ptr$i$i;
     $$pre$i$i$i25 = $34;$__a$0 = $__a$1;
     continue;
    }
   }
   if ((label|0) == 34) {
    $30 = ___cxa_find_matching_catch()|0;
    $31 = tempRet0;
    $lpad$phi$index = $30;$lpad$phi$index2 = $31;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
    ___resumeException($lpad$phi$index|0);
    // unreachable;
   }
   $46 = HEAP8[$__grouping>>0]|0;
   $and$i$i78 = $46 & 1;
   $tobool$i$i79 = ($and$i$i78<<24>>24)==(0);
   if ($tobool$i$i79) {
    $conv$i$i82 = $46&255;
    $shr1$i$i83 = $conv$i$i82 >>> 1;
    $cond$i85 = $shr1$i$i83;
   } else {
    $__size_$i2$i80 = (($__grouping) + 4|0);
    $47 = HEAP32[$__size_$i2$i80>>2]|0;
    $cond$i85 = $47;
   }
   $cmp27 = ($cond$i85|0)==(0);
   if (!($cmp27)) {
    $48 = HEAP32[$__g_end>>2]|0;
    $sub$ptr$lhs$cast29 = $48;
    $sub$ptr$rhs$cast30 = $__g;
    $sub$ptr$sub31 = (($sub$ptr$lhs$cast29) - ($sub$ptr$rhs$cast30))|0;
    $cmp32 = ($sub$ptr$sub31|0)<(160);
    if ($cmp32) {
     $49 = HEAP32[$__dc>>2]|0;
     $incdec$ptr = (($48) + 4|0);
     HEAP32[$__g_end>>2] = $incdec$ptr;
     HEAP32[$48>>2] = $49;
    }
   }
   $50 = HEAP32[$__a_end>>2]|0;
   __THREW__ = 0;
   $51 = (invoke_iiiii(391,($__a$2|0),($50|0),($__err|0),($call|0))|0);
   $52 = tempRet0;
   $53 = __THREW__; __THREW__ = 0;
   $54 = $53&1;
   if (!($54)) {
    $55 = $__v;
    $56 = $55;
    HEAP32[$56>>2] = $51;
    $57 = (($55) + 4)|0;
    $58 = $57;
    HEAP32[$58>>2] = $52;
    $59 = HEAP32[$__g_end>>2]|0;
    __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping,$__g,$59,$__err);
    $tobool$i$i$i = ($34|0)==(0|0);
    if ($tobool$i$i$i) {
     $73 = 0;$76 = 1;
    } else {
     $__ninp_$i$i$i$i = (($34) + 12|0);
     $60 = HEAP32[$__ninp_$i$i$i$i>>2]|0;
     $__einp_$i$i$i$i = (($34) + 16|0);
     $61 = HEAP32[$__einp_$i$i$i$i>>2]|0;
     $cmp$i$i$i$i = ($60|0)==($61|0);
     if ($cmp$i$i$i$i) {
      $vtable$i$i$i$i = HEAP32[$34>>2]|0;
      $vfn$i$i$i$i = (($vtable$i$i$i$i) + 36|0);
      $62 = HEAP32[$vfn$i$i$i$i>>2]|0;
      __THREW__ = 0;
      $call$i$i$i$i9 = (invoke_ii($62|0,($34|0))|0);
      $63 = __THREW__; __THREW__ = 0;
      $64 = $63&1;
      if ($64) {
       break;
      } else {
       $retval$0$i$i$i$i = $call$i$i$i$i9;
      }
     } else {
      $65 = HEAP32[$60>>2]|0;
      $retval$0$i$i$i$i = $65;
     }
     $cmp$i1$i$i$i = ($retval$0$i$i$i$i|0)==(-1);
     if ($cmp$i1$i$i$i) {
      HEAP32[$__b>>2] = 0;
      $73 = 0;$76 = 1;
     } else {
      $73 = $34;$76 = 0;
     }
    }
    $tobool$i2$i$i = ($$pre$i15$i$i|0)==(0|0);
    do {
     if ($tobool$i2$i$i) {
      label = 63;
     } else {
      $__ninp_$i$i3$i$i = (($$pre$i15$i$i) + 12|0);
      $66 = HEAP32[$__ninp_$i$i3$i$i>>2]|0;
      $__einp_$i$i4$i$i = (($$pre$i15$i$i) + 16|0);
      $67 = HEAP32[$__einp_$i$i4$i$i>>2]|0;
      $cmp$i$i5$i$i = ($66|0)==($67|0);
      if ($cmp$i$i5$i$i) {
       $vtable$i$i7$i$i = HEAP32[$$pre$i15$i$i>>2]|0;
       $vfn$i$i8$i$i = (($vtable$i$i7$i$i) + 36|0);
       $68 = HEAP32[$vfn$i$i8$i$i>>2]|0;
       __THREW__ = 0;
       $call$i$i9$i$i10 = (invoke_ii($68|0,($$pre$i15$i$i|0))|0);
       $69 = __THREW__; __THREW__ = 0;
       $70 = $69&1;
       if ($70) {
        break L1;
       } else {
        $retval$0$i$i12$i$i = $call$i$i9$i$i10;
       }
      } else {
       $71 = HEAP32[$66>>2]|0;
       $retval$0$i$i12$i$i = $71;
      }
      $cmp$i1$i13$i$i = ($retval$0$i$i12$i$i|0)==(-1);
      if ($cmp$i1$i13$i$i) {
       HEAP32[$__e>>2] = 0;
       label = 63;
       break;
      }
      if ($76) {
       HEAP32[$agg$result>>2] = $73;
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
       STACKTOP = sp;return;
      }
     }
    } while(0);
    if ((label|0) == 63) {
     if (!($76)) {
      HEAP32[$agg$result>>2] = $73;
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
      STACKTOP = sp;return;
     }
    }
    $72 = HEAP32[$__err>>2]|0;
    $or = $72 | 2;
    HEAP32[$__err>>2] = $or;
    HEAP32[$agg$result>>2] = $73;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
    STACKTOP = sp;return;
   }
  }
 } while(0);
 $32 = ___cxa_find_matching_catch()|0;
 $33 = tempRet0;
 $lpad$phi$index = $32;$lpad$phi$index2 = $33;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
 ___resumeException($lpad$phi$index|0);
 // unreachable;
}
function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRf($agg$result,$this,$__b,$__e,$__iob,$__err,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $0 = 0, $1 = 0, $agg$tmp = 0, $agg$tmp$byval_copy = 0, $agg$tmp2 = 0, $agg$tmp2$byval_copy = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $agg$tmp2$byval_copy = sp + 12|0;
 $agg$tmp$byval_copy = sp + 8|0;
 $agg$tmp = sp + 4|0;
 $agg$tmp2 = sp;
 $0 = HEAP32[$__b>>2]|0;
 HEAP32[$agg$tmp>>2] = $0;
 $1 = HEAP32[$__e>>2]|0;
 HEAP32[$agg$tmp2>>2] = $1;
 ;HEAP32[$agg$tmp$byval_copy+0>>2]=HEAP32[$agg$tmp+0>>2]|0;
 ;HEAP32[$agg$tmp2$byval_copy+0>>2]=HEAP32[$agg$tmp2+0>>2]|0;
 __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE23__do_get_floating_pointIfEES4_S4_S4_RNS_8ios_baseERjRT_($agg$result,0,$agg$tmp$byval_copy,$agg$tmp2$byval_copy,$__iob,$__err,$__v);
 STACKTOP = sp;return;
}
function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE23__do_get_floating_pointIfEES4_S4_S4_RNS_8ios_baseERjRT_($agg$result,$this,$__b,$__e,$__iob,$__err,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$pre = 0, $$pre$i$i$i23 = 0, $$pre$i15$i$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $8 = 0, $9 = 0, $__a$0 = 0, $__a$1 = 0, $__a$2 = 0, $__a_end = 0;
 var $__atoms = 0, $__buf = 0, $__data_$i$i$i = 0, $__data_$i$i$i101$pre = 0, $__data_$i$i$i101$pre$phiZZZZ2D = 0, $__dc = 0, $__decimal_point = 0, $__einp_$i$i$i$i = 0, $__einp_$i$i$i$i13 = 0, $__einp_$i$i110 = 0, $__einp_$i$i4$i$i = 0, $__einp_$i$i4$i$i31 = 0, $__exp = 0, $__g = 0, $__g_end = 0, $__grouping = 0, $__in_units = 0, $__ninp_$i$i$i$i = 0, $__ninp_$i$i$i$i12 = 0, $__ninp_$i$i109 = 0;
 var $__ninp_$i$i3$i$i = 0, $__ninp_$i$i3$i$i30 = 0, $__size_$i2$i68 = 0, $__size_$i2$i78 = 0, $__thousands_sep = 0, $add$ptr = 0, $and$i$i$i = 0, $and$i$i$i99 = 0, $and$i$i51 = 0, $and$i$i76 = 0, $and$i$i89 = 0, $and$i1$i92 = 0, $arrayidx$i$i$i = 0, $arrayidx$i$i$i104$pre = 0, $arrayidx$i$i$i104$pre$phiZZZZ2D = 0, $call$i$i$i$i47 = 0, $call$i$i$i$i7 = 0, $call$i$i117 = 0, $call$i$i9$i$i49 = 0, $call$i$i9$i$i8 = 0;
 var $call20 = 0, $call37 = 0.0, $cmp = 0, $cmp$i$i$i$i = 0, $cmp$i$i$i$i14 = 0, $cmp$i$i111 = 0, $cmp$i$i5$i$i = 0, $cmp$i$i5$i$i32 = 0, $cmp$i$i85 = 0, $cmp$i1$i$i$i = 0, $cmp$i1$i$i$i21 = 0, $cmp$i1$i13$i$i = 0, $cmp$i1$i13$i$i39 = 0, $cmp26 = 0, $cmp33 = 0, $cond$i$i = 0, $cond$i$i106 = 0, $cond$i54 = 0, $cond$i63122 = 0, $cond$i73 = 0;
 var $cond$i83 = 0, $cond$i95 = 0, $conv$i$i = 0, $conv$i$i60 = 0, $conv$i$i70 = 0, $conv$i$i80 = 0, $incdec$ptr = 0, $incdec$ptr$i$i = 0, $lpad$phi$index = 0, $lpad$phi$index2 = 0, $mul = 0, $or = 0, $phitmp$i93 = 0, $retval$0$i$i = 0, $retval$0$i$i$i$i = 0, $retval$0$i$i$i$i20 = 0, $retval$0$i$i12$i$i = 0, $retval$0$i$i12$i$i38 = 0, $shr1$i$i = 0, $shr1$i$i61 = 0;
 var $shr1$i$i71 = 0, $shr1$i$i81 = 0, $sub$ptr$lhs$cast = 0, $sub$ptr$lhs$cast30 = 0, $sub$ptr$rhs$cast = 0, $sub$ptr$rhs$cast31 = 0, $sub$ptr$sub = 0, $sub$ptr$sub32 = 0, $tobool = 0, $tobool$i$i$i = 0, $tobool$i$i$i100 = 0, $tobool$i$i$i11 = 0, $tobool$i$i$i9 = 0, $tobool$i$i52 = 0, $tobool$i$i77 = 0, $tobool$i$i90 = 0, $tobool$i2$i$i = 0, $tobool$i2$i$i28 = 0, $tobool27 = 0, $vfn$i$i = 0;
 var $vfn$i$i$i$i = 0, $vfn$i$i$i$i17 = 0, $vfn$i$i113 = 0, $vfn$i$i8$i$i = 0, $vfn$i$i8$i$i35 = 0, $vtable$i$i = 0, $vtable$i$i$i$i = 0, $vtable$i$i$i$i16 = 0, $vtable$i$i112 = 0, $vtable$i$i7$i$i = 0, $vtable$i$i7$i$i34 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 352|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__atoms = sp + 208|0;
 $__decimal_point = sp + 184|0;
 $__thousands_sep = sp + 4|0;
 $__grouping = sp + 8|0;
 $__buf = sp + 196|0;
 $__a_end = sp;
 $__g = sp + 24|0;
 $__g_end = sp + 192|0;
 $__dc = sp + 188|0;
 $__in_units = sp + 337|0;
 $__exp = sp + 336|0;
 __ZNSt3__19__num_getIwE19__stage2_float_prepERNS_8ios_baseEPwRwS5_($__grouping,$__iob,$__atoms,$__decimal_point,$__thousands_sep);
 ;HEAP32[$__buf+0>>2]=0|0;HEAP32[$__buf+4>>2]=0|0;HEAP32[$__buf+8>>2]=0|0;
 __THREW__ = 0;
 invoke_viii(385,($__buf|0),10,0);
 $0 = __THREW__; __THREW__ = 0;
 $1 = $0&1;
 L1: do {
  if (!($1)) {
   $2 = HEAP8[$__buf>>0]|0;
   $and$i$i$i = $2 & 1;
   $tobool$i$i$i9 = ($and$i$i$i<<24>>24)==(0);
   if ($tobool$i$i$i9) {
    $arrayidx$i$i$i = (($__buf) + 1|0);
    $__data_$i$i$i101$pre = (($__buf) + 8|0);
    $__data_$i$i$i101$pre$phiZZZZ2D = $__data_$i$i$i101$pre;$arrayidx$i$i$i104$pre$phiZZZZ2D = $arrayidx$i$i$i;$cond$i$i = $arrayidx$i$i$i;
   } else {
    $__data_$i$i$i = (($__buf) + 8|0);
    $3 = HEAP32[$__data_$i$i$i>>2]|0;
    $arrayidx$i$i$i104$pre = (($__buf) + 1|0);
    $__data_$i$i$i101$pre$phiZZZZ2D = $__data_$i$i$i;$arrayidx$i$i$i104$pre$phiZZZZ2D = $arrayidx$i$i$i104$pre;$cond$i$i = $3;
   }
   HEAP32[$__a_end>>2] = $cond$i$i;
   HEAP32[$__g_end>>2] = $__g;
   HEAP32[$__dc>>2] = 0;
   HEAP8[$__in_units>>0] = 1;
   HEAP8[$__exp>>0] = 69;
   $__size_$i2$i68 = (($__buf) + 4|0);
   $4 = HEAP32[$__decimal_point>>2]|0;
   $5 = HEAP32[$__thousands_sep>>2]|0;
   $$pre = HEAP32[$__b>>2]|0;
   $$pre$i$i$i23 = $$pre;$__a$0 = $cond$i$i;
   L7: while(1) {
    $tobool$i$i$i11 = ($$pre$i$i$i23|0)==(0|0);
    if ($tobool$i$i$i11) {
     $35 = 0;$70 = 1;
    } else {
     $__ninp_$i$i$i$i12 = (($$pre$i$i$i23) + 12|0);
     $6 = HEAP32[$__ninp_$i$i$i$i12>>2]|0;
     $__einp_$i$i$i$i13 = (($$pre$i$i$i23) + 16|0);
     $7 = HEAP32[$__einp_$i$i$i$i13>>2]|0;
     $cmp$i$i$i$i14 = ($6|0)==($7|0);
     if ($cmp$i$i$i$i14) {
      $vtable$i$i$i$i16 = HEAP32[$$pre$i$i$i23>>2]|0;
      $vfn$i$i$i$i17 = (($vtable$i$i$i$i16) + 36|0);
      $8 = HEAP32[$vfn$i$i$i$i17>>2]|0;
      __THREW__ = 0;
      $call$i$i$i$i47 = (invoke_ii($8|0,($$pre$i$i$i23|0))|0);
      $9 = __THREW__; __THREW__ = 0;
      $10 = $9&1;
      if ($10) {
       label = 34;
       break;
      } else {
       $retval$0$i$i$i$i20 = $call$i$i$i$i47;
      }
     } else {
      $11 = HEAP32[$6>>2]|0;
      $retval$0$i$i$i$i20 = $11;
     }
     $cmp$i1$i$i$i21 = ($retval$0$i$i$i$i20|0)==(-1);
     if ($cmp$i1$i$i$i21) {
      HEAP32[$__b>>2] = 0;
      $35 = 0;$70 = 1;
     } else {
      $35 = $$pre$i$i$i23;$70 = 0;
     }
    }
    $12 = HEAP32[$__e>>2]|0;
    $tobool$i2$i$i28 = ($12|0)==(0|0);
    do {
     if ($tobool$i2$i$i28) {
      label = 18;
     } else {
      $__ninp_$i$i3$i$i30 = (($12) + 12|0);
      $13 = HEAP32[$__ninp_$i$i3$i$i30>>2]|0;
      $__einp_$i$i4$i$i31 = (($12) + 16|0);
      $14 = HEAP32[$__einp_$i$i4$i$i31>>2]|0;
      $cmp$i$i5$i$i32 = ($13|0)==($14|0);
      if ($cmp$i$i5$i$i32) {
       $vtable$i$i7$i$i34 = HEAP32[$12>>2]|0;
       $vfn$i$i8$i$i35 = (($vtable$i$i7$i$i34) + 36|0);
       $15 = HEAP32[$vfn$i$i8$i$i35>>2]|0;
       __THREW__ = 0;
       $call$i$i9$i$i49 = (invoke_ii($15|0,($12|0))|0);
       $16 = __THREW__; __THREW__ = 0;
       $17 = $16&1;
       if ($17) {
        label = 34;
        break L7;
       } else {
        $retval$0$i$i12$i$i38 = $call$i$i9$i$i49;
       }
      } else {
       $18 = HEAP32[$13>>2]|0;
       $retval$0$i$i12$i$i38 = $18;
      }
      $cmp$i1$i13$i$i39 = ($retval$0$i$i12$i$i38|0)==(-1);
      if ($cmp$i1$i13$i$i39) {
       HEAP32[$__e>>2] = 0;
       label = 18;
       break;
      } else {
       if ($70) {
        $71 = $12;
        break;
       } else {
        $$pre$i15$i$i = $12;$__a$2 = $__a$0;
        break L7;
       }
      }
     }
    } while(0);
    if ((label|0) == 18) {
     label = 0;
     if ($70) {
      $$pre$i15$i$i = 0;$__a$2 = $__a$0;
      break;
     } else {
      $71 = 0;
     }
    }
    $19 = HEAP32[$__a_end>>2]|0;
    $sub$ptr$lhs$cast = $19;
    $sub$ptr$rhs$cast = $__a$0;
    $sub$ptr$sub = (($sub$ptr$lhs$cast) - ($sub$ptr$rhs$cast))|0;
    $20 = HEAP8[$__buf>>0]|0;
    $and$i$i51 = $20 & 1;
    $tobool$i$i52 = ($and$i$i51<<24>>24)==(0);
    if ($tobool$i$i52) {
     $conv$i$i = $20&255;
     $shr1$i$i = $conv$i$i >>> 1;
     $cond$i54 = $shr1$i$i;
    } else {
     $21 = HEAP32[$__size_$i2$i68>>2]|0;
     $cond$i54 = $21;
    }
    $cmp = ($sub$ptr$sub|0)==($cond$i54|0);
    if ($cmp) {
     if ($tobool$i$i52) {
      $conv$i$i60 = $20&255;
      $shr1$i$i61 = $conv$i$i60 >>> 1;
      $conv$i$i70 = $20&255;
      $shr1$i$i71 = $conv$i$i70 >>> 1;
      $cond$i63122 = $shr1$i$i61;$cond$i73 = $shr1$i$i71;
     } else {
      $22 = HEAP32[$__size_$i2$i68>>2]|0;
      $cond$i63122 = $22;$cond$i73 = $22;
     }
     $mul = $cond$i73 << 1;
     __THREW__ = 0;
     invoke_viii(385,($__buf|0),($mul|0),0);
     $23 = __THREW__; __THREW__ = 0;
     $24 = $23&1;
     if ($24) {
      label = 34;
      break;
     }
     $25 = HEAP8[$__buf>>0]|0;
     $and$i$i89 = $25 & 1;
     $tobool$i$i90 = ($and$i$i89<<24>>24)==(0);
     if ($tobool$i$i90) {
      $cond$i95 = 10;
     } else {
      $26 = HEAP32[$__buf>>2]|0;
      $and$i1$i92 = $26 & -2;
      $phitmp$i93 = (($and$i1$i92) + -1)|0;
      $cond$i95 = $phitmp$i93;
     }
     __THREW__ = 0;
     invoke_viii(385,($__buf|0),($cond$i95|0),0);
     $27 = __THREW__; __THREW__ = 0;
     $28 = $27&1;
     if ($28) {
      label = 34;
      break;
     }
     $29 = HEAP8[$__buf>>0]|0;
     $and$i$i$i99 = $29 & 1;
     $tobool$i$i$i100 = ($and$i$i$i99<<24>>24)==(0);
     if ($tobool$i$i$i100) {
      $cond$i$i106 = $arrayidx$i$i$i104$pre$phiZZZZ2D;
     } else {
      $30 = HEAP32[$__data_$i$i$i101$pre$phiZZZZ2D>>2]|0;
      $cond$i$i106 = $30;
     }
     $add$ptr = (($cond$i$i106) + ($cond$i63122)|0);
     HEAP32[$__a_end>>2] = $add$ptr;
     $__a$1 = $cond$i$i106;
    } else {
     $__a$1 = $__a$0;
    }
    $__ninp_$i$i109 = (($35) + 12|0);
    $36 = HEAP32[$__ninp_$i$i109>>2]|0;
    $__einp_$i$i110 = (($35) + 16|0);
    $37 = HEAP32[$__einp_$i$i110>>2]|0;
    $cmp$i$i111 = ($36|0)==($37|0);
    if ($cmp$i$i111) {
     $vtable$i$i112 = HEAP32[$35>>2]|0;
     $vfn$i$i113 = (($vtable$i$i112) + 36|0);
     $38 = HEAP32[$vfn$i$i113>>2]|0;
     __THREW__ = 0;
     $call$i$i117 = (invoke_ii($38|0,($35|0))|0);
     $39 = __THREW__; __THREW__ = 0;
     $40 = $39&1;
     if ($40) {
      label = 34;
      break;
     } else {
      $retval$0$i$i = $call$i$i117;
     }
    } else {
     $41 = HEAP32[$36>>2]|0;
     $retval$0$i$i = $41;
    }
    $call20 = (__ZNSt3__19__num_getIwE19__stage2_float_loopEwRbRcPcRS4_wwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSE_RjPw($retval$0$i$i,$__in_units,$__exp,$__a$1,$__a_end,$4,$5,$__grouping,$__g,$__g_end,$__dc,$__atoms)|0);
    $tobool = ($call20|0)==(0);
    if (!($tobool)) {
     $$pre$i15$i$i = $71;$__a$2 = $__a$1;
     break;
    }
    $42 = HEAP32[$__ninp_$i$i109>>2]|0;
    $43 = HEAP32[$__einp_$i$i110>>2]|0;
    $cmp$i$i85 = ($42|0)==($43|0);
    if ($cmp$i$i85) {
     $vtable$i$i = HEAP32[$35>>2]|0;
     $vfn$i$i = (($vtable$i$i) + 40|0);
     $44 = HEAP32[$vfn$i$i>>2]|0;
     __THREW__ = 0;
     (invoke_ii($44|0,($35|0))|0);
     $45 = __THREW__; __THREW__ = 0;
     $46 = $45&1;
     if ($46) {
      label = 34;
      break;
     } else {
      $$pre$i$i$i23 = $35;$__a$0 = $__a$1;
      continue;
     }
    } else {
     $incdec$ptr$i$i = (($42) + 4|0);
     HEAP32[$__ninp_$i$i109>>2] = $incdec$ptr$i$i;
     $$pre$i$i$i23 = $35;$__a$0 = $__a$1;
     continue;
    }
   }
   if ((label|0) == 34) {
    $31 = ___cxa_find_matching_catch()|0;
    $32 = tempRet0;
    $lpad$phi$index = $31;$lpad$phi$index2 = $32;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
    ___resumeException($lpad$phi$index|0);
    // unreachable;
   }
   $47 = HEAP8[$__grouping>>0]|0;
   $and$i$i76 = $47 & 1;
   $tobool$i$i77 = ($and$i$i76<<24>>24)==(0);
   if ($tobool$i$i77) {
    $conv$i$i80 = $47&255;
    $shr1$i$i81 = $conv$i$i80 >>> 1;
    $cond$i83 = $shr1$i$i81;
   } else {
    $__size_$i2$i78 = (($__grouping) + 4|0);
    $48 = HEAP32[$__size_$i2$i78>>2]|0;
    $cond$i83 = $48;
   }
   $cmp26 = ($cond$i83|0)==(0);
   if (!($cmp26)) {
    $49 = HEAP8[$__in_units>>0]|0;
    $tobool27 = ($49<<24>>24)==(0);
    if (!($tobool27)) {
     $50 = HEAP32[$__g_end>>2]|0;
     $sub$ptr$lhs$cast30 = $50;
     $sub$ptr$rhs$cast31 = $__g;
     $sub$ptr$sub32 = (($sub$ptr$lhs$cast30) - ($sub$ptr$rhs$cast31))|0;
     $cmp33 = ($sub$ptr$sub32|0)<(160);
     if ($cmp33) {
      $51 = HEAP32[$__dc>>2]|0;
      $incdec$ptr = (($50) + 4|0);
      HEAP32[$__g_end>>2] = $incdec$ptr;
      HEAP32[$50>>2] = $51;
     }
    }
   }
   $52 = HEAP32[$__a_end>>2]|0;
   __THREW__ = 0;
   $call37 = (+invoke_diii(392,($__a$2|0),($52|0),($__err|0)));
   $53 = __THREW__; __THREW__ = 0;
   $54 = $53&1;
   if (!($54)) {
    HEAPF32[$__v>>2] = $call37;
    $55 = HEAP32[$__g_end>>2]|0;
    __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping,$__g,$55,$__err);
    $tobool$i$i$i = ($35|0)==(0|0);
    if ($tobool$i$i$i) {
     $69 = 0;$72 = 1;
    } else {
     $__ninp_$i$i$i$i = (($35) + 12|0);
     $56 = HEAP32[$__ninp_$i$i$i$i>>2]|0;
     $__einp_$i$i$i$i = (($35) + 16|0);
     $57 = HEAP32[$__einp_$i$i$i$i>>2]|0;
     $cmp$i$i$i$i = ($56|0)==($57|0);
     if ($cmp$i$i$i$i) {
      $vtable$i$i$i$i = HEAP32[$35>>2]|0;
      $vfn$i$i$i$i = (($vtable$i$i$i$i) + 36|0);
      $58 = HEAP32[$vfn$i$i$i$i>>2]|0;
      __THREW__ = 0;
      $call$i$i$i$i7 = (invoke_ii($58|0,($35|0))|0);
      $59 = __THREW__; __THREW__ = 0;
      $60 = $59&1;
      if ($60) {
       break;
      } else {
       $retval$0$i$i$i$i = $call$i$i$i$i7;
      }
     } else {
      $61 = HEAP32[$56>>2]|0;
      $retval$0$i$i$i$i = $61;
     }
     $cmp$i1$i$i$i = ($retval$0$i$i$i$i|0)==(-1);
     if ($cmp$i1$i$i$i) {
      HEAP32[$__b>>2] = 0;
      $69 = 0;$72 = 1;
     } else {
      $69 = $35;$72 = 0;
     }
    }
    $tobool$i2$i$i = ($$pre$i15$i$i|0)==(0|0);
    do {
     if ($tobool$i2$i$i) {
      label = 64;
     } else {
      $__ninp_$i$i3$i$i = (($$pre$i15$i$i) + 12|0);
      $62 = HEAP32[$__ninp_$i$i3$i$i>>2]|0;
      $__einp_$i$i4$i$i = (($$pre$i15$i$i) + 16|0);
      $63 = HEAP32[$__einp_$i$i4$i$i>>2]|0;
      $cmp$i$i5$i$i = ($62|0)==($63|0);
      if ($cmp$i$i5$i$i) {
       $vtable$i$i7$i$i = HEAP32[$$pre$i15$i$i>>2]|0;
       $vfn$i$i8$i$i = (($vtable$i$i7$i$i) + 36|0);
       $64 = HEAP32[$vfn$i$i8$i$i>>2]|0;
       __THREW__ = 0;
       $call$i$i9$i$i8 = (invoke_ii($64|0,($$pre$i15$i$i|0))|0);
       $65 = __THREW__; __THREW__ = 0;
       $66 = $65&1;
       if ($66) {
        break L1;
       } else {
        $retval$0$i$i12$i$i = $call$i$i9$i$i8;
       }
      } else {
       $67 = HEAP32[$62>>2]|0;
       $retval$0$i$i12$i$i = $67;
      }
      $cmp$i1$i13$i$i = ($retval$0$i$i12$i$i|0)==(-1);
      if ($cmp$i1$i13$i$i) {
       HEAP32[$__e>>2] = 0;
       label = 64;
       break;
      }
      if ($72) {
       HEAP32[$agg$result>>2] = $69;
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
       STACKTOP = sp;return;
      }
     }
    } while(0);
    if ((label|0) == 64) {
     if (!($72)) {
      HEAP32[$agg$result>>2] = $69;
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
      STACKTOP = sp;return;
     }
    }
    $68 = HEAP32[$__err>>2]|0;
    $or = $68 | 2;
    HEAP32[$__err>>2] = $or;
    HEAP32[$agg$result>>2] = $69;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
    STACKTOP = sp;return;
   }
  }
 } while(0);
 $33 = ___cxa_find_matching_catch()|0;
 $34 = tempRet0;
 $lpad$phi$index = $33;$lpad$phi$index2 = $34;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
 ___resumeException($lpad$phi$index|0);
 // unreachable;
}
function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRd($agg$result,$this,$__b,$__e,$__iob,$__err,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $0 = 0, $1 = 0, $agg$tmp = 0, $agg$tmp$byval_copy = 0, $agg$tmp2 = 0, $agg$tmp2$byval_copy = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $agg$tmp2$byval_copy = sp + 12|0;
 $agg$tmp$byval_copy = sp + 8|0;
 $agg$tmp = sp + 4|0;
 $agg$tmp2 = sp;
 $0 = HEAP32[$__b>>2]|0;
 HEAP32[$agg$tmp>>2] = $0;
 $1 = HEAP32[$__e>>2]|0;
 HEAP32[$agg$tmp2>>2] = $1;
 ;HEAP32[$agg$tmp$byval_copy+0>>2]=HEAP32[$agg$tmp+0>>2]|0;
 ;HEAP32[$agg$tmp2$byval_copy+0>>2]=HEAP32[$agg$tmp2+0>>2]|0;
 __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE23__do_get_floating_pointIdEES4_S4_S4_RNS_8ios_baseERjRT_($agg$result,0,$agg$tmp$byval_copy,$agg$tmp2$byval_copy,$__iob,$__err,$__v);
 STACKTOP = sp;return;
}
function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE23__do_get_floating_pointIdEES4_S4_S4_RNS_8ios_baseERjRT_($agg$result,$this,$__b,$__e,$__iob,$__err,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$pre = 0, $$pre$i$i$i23 = 0, $$pre$i15$i$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $8 = 0, $9 = 0, $__a$0 = 0, $__a$1 = 0, $__a$2 = 0, $__a_end = 0;
 var $__atoms = 0, $__buf = 0, $__data_$i$i$i = 0, $__data_$i$i$i101$pre = 0, $__data_$i$i$i101$pre$phiZZZZ2D = 0, $__dc = 0, $__decimal_point = 0, $__einp_$i$i$i$i = 0, $__einp_$i$i$i$i13 = 0, $__einp_$i$i110 = 0, $__einp_$i$i4$i$i = 0, $__einp_$i$i4$i$i31 = 0, $__exp = 0, $__g = 0, $__g_end = 0, $__grouping = 0, $__in_units = 0, $__ninp_$i$i$i$i = 0, $__ninp_$i$i$i$i12 = 0, $__ninp_$i$i109 = 0;
 var $__ninp_$i$i3$i$i = 0, $__ninp_$i$i3$i$i30 = 0, $__size_$i2$i68 = 0, $__size_$i2$i78 = 0, $__thousands_sep = 0, $add$ptr = 0, $and$i$i$i = 0, $and$i$i$i99 = 0, $and$i$i51 = 0, $and$i$i76 = 0, $and$i$i89 = 0, $and$i1$i92 = 0, $arrayidx$i$i$i = 0, $arrayidx$i$i$i104$pre = 0, $arrayidx$i$i$i104$pre$phiZZZZ2D = 0, $call$i$i$i$i47 = 0, $call$i$i$i$i7 = 0, $call$i$i117 = 0, $call$i$i9$i$i49 = 0, $call$i$i9$i$i8 = 0;
 var $call20 = 0, $call37 = 0.0, $cmp = 0, $cmp$i$i$i$i = 0, $cmp$i$i$i$i14 = 0, $cmp$i$i111 = 0, $cmp$i$i5$i$i = 0, $cmp$i$i5$i$i32 = 0, $cmp$i$i85 = 0, $cmp$i1$i$i$i = 0, $cmp$i1$i$i$i21 = 0, $cmp$i1$i13$i$i = 0, $cmp$i1$i13$i$i39 = 0, $cmp26 = 0, $cmp33 = 0, $cond$i$i = 0, $cond$i$i106 = 0, $cond$i54 = 0, $cond$i63122 = 0, $cond$i73 = 0;
 var $cond$i83 = 0, $cond$i95 = 0, $conv$i$i = 0, $conv$i$i60 = 0, $conv$i$i70 = 0, $conv$i$i80 = 0, $incdec$ptr = 0, $incdec$ptr$i$i = 0, $lpad$phi$index = 0, $lpad$phi$index2 = 0, $mul = 0, $or = 0, $phitmp$i93 = 0, $retval$0$i$i = 0, $retval$0$i$i$i$i = 0, $retval$0$i$i$i$i20 = 0, $retval$0$i$i12$i$i = 0, $retval$0$i$i12$i$i38 = 0, $shr1$i$i = 0, $shr1$i$i61 = 0;
 var $shr1$i$i71 = 0, $shr1$i$i81 = 0, $sub$ptr$lhs$cast = 0, $sub$ptr$lhs$cast30 = 0, $sub$ptr$rhs$cast = 0, $sub$ptr$rhs$cast31 = 0, $sub$ptr$sub = 0, $sub$ptr$sub32 = 0, $tobool = 0, $tobool$i$i$i = 0, $tobool$i$i$i100 = 0, $tobool$i$i$i11 = 0, $tobool$i$i$i9 = 0, $tobool$i$i52 = 0, $tobool$i$i77 = 0, $tobool$i$i90 = 0, $tobool$i2$i$i = 0, $tobool$i2$i$i28 = 0, $tobool27 = 0, $vfn$i$i = 0;
 var $vfn$i$i$i$i = 0, $vfn$i$i$i$i17 = 0, $vfn$i$i113 = 0, $vfn$i$i8$i$i = 0, $vfn$i$i8$i$i35 = 0, $vtable$i$i = 0, $vtable$i$i$i$i = 0, $vtable$i$i$i$i16 = 0, $vtable$i$i112 = 0, $vtable$i$i7$i$i = 0, $vtable$i$i7$i$i34 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 352|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__atoms = sp + 208|0;
 $__decimal_point = sp + 184|0;
 $__thousands_sep = sp + 4|0;
 $__grouping = sp + 8|0;
 $__buf = sp + 196|0;
 $__a_end = sp;
 $__g = sp + 24|0;
 $__g_end = sp + 192|0;
 $__dc = sp + 188|0;
 $__in_units = sp + 337|0;
 $__exp = sp + 336|0;
 __ZNSt3__19__num_getIwE19__stage2_float_prepERNS_8ios_baseEPwRwS5_($__grouping,$__iob,$__atoms,$__decimal_point,$__thousands_sep);
 ;HEAP32[$__buf+0>>2]=0|0;HEAP32[$__buf+4>>2]=0|0;HEAP32[$__buf+8>>2]=0|0;
 __THREW__ = 0;
 invoke_viii(385,($__buf|0),10,0);
 $0 = __THREW__; __THREW__ = 0;
 $1 = $0&1;
 L1: do {
  if (!($1)) {
   $2 = HEAP8[$__buf>>0]|0;
   $and$i$i$i = $2 & 1;
   $tobool$i$i$i9 = ($and$i$i$i<<24>>24)==(0);
   if ($tobool$i$i$i9) {
    $arrayidx$i$i$i = (($__buf) + 1|0);
    $__data_$i$i$i101$pre = (($__buf) + 8|0);
    $__data_$i$i$i101$pre$phiZZZZ2D = $__data_$i$i$i101$pre;$arrayidx$i$i$i104$pre$phiZZZZ2D = $arrayidx$i$i$i;$cond$i$i = $arrayidx$i$i$i;
   } else {
    $__data_$i$i$i = (($__buf) + 8|0);
    $3 = HEAP32[$__data_$i$i$i>>2]|0;
    $arrayidx$i$i$i104$pre = (($__buf) + 1|0);
    $__data_$i$i$i101$pre$phiZZZZ2D = $__data_$i$i$i;$arrayidx$i$i$i104$pre$phiZZZZ2D = $arrayidx$i$i$i104$pre;$cond$i$i = $3;
   }
   HEAP32[$__a_end>>2] = $cond$i$i;
   HEAP32[$__g_end>>2] = $__g;
   HEAP32[$__dc>>2] = 0;
   HEAP8[$__in_units>>0] = 1;
   HEAP8[$__exp>>0] = 69;
   $__size_$i2$i68 = (($__buf) + 4|0);
   $4 = HEAP32[$__decimal_point>>2]|0;
   $5 = HEAP32[$__thousands_sep>>2]|0;
   $$pre = HEAP32[$__b>>2]|0;
   $$pre$i$i$i23 = $$pre;$__a$0 = $cond$i$i;
   L7: while(1) {
    $tobool$i$i$i11 = ($$pre$i$i$i23|0)==(0|0);
    if ($tobool$i$i$i11) {
     $35 = 0;$70 = 1;
    } else {
     $__ninp_$i$i$i$i12 = (($$pre$i$i$i23) + 12|0);
     $6 = HEAP32[$__ninp_$i$i$i$i12>>2]|0;
     $__einp_$i$i$i$i13 = (($$pre$i$i$i23) + 16|0);
     $7 = HEAP32[$__einp_$i$i$i$i13>>2]|0;
     $cmp$i$i$i$i14 = ($6|0)==($7|0);
     if ($cmp$i$i$i$i14) {
      $vtable$i$i$i$i16 = HEAP32[$$pre$i$i$i23>>2]|0;
      $vfn$i$i$i$i17 = (($vtable$i$i$i$i16) + 36|0);
      $8 = HEAP32[$vfn$i$i$i$i17>>2]|0;
      __THREW__ = 0;
      $call$i$i$i$i47 = (invoke_ii($8|0,($$pre$i$i$i23|0))|0);
      $9 = __THREW__; __THREW__ = 0;
      $10 = $9&1;
      if ($10) {
       label = 34;
       break;
      } else {
       $retval$0$i$i$i$i20 = $call$i$i$i$i47;
      }
     } else {
      $11 = HEAP32[$6>>2]|0;
      $retval$0$i$i$i$i20 = $11;
     }
     $cmp$i1$i$i$i21 = ($retval$0$i$i$i$i20|0)==(-1);
     if ($cmp$i1$i$i$i21) {
      HEAP32[$__b>>2] = 0;
      $35 = 0;$70 = 1;
     } else {
      $35 = $$pre$i$i$i23;$70 = 0;
     }
    }
    $12 = HEAP32[$__e>>2]|0;
    $tobool$i2$i$i28 = ($12|0)==(0|0);
    do {
     if ($tobool$i2$i$i28) {
      label = 18;
     } else {
      $__ninp_$i$i3$i$i30 = (($12) + 12|0);
      $13 = HEAP32[$__ninp_$i$i3$i$i30>>2]|0;
      $__einp_$i$i4$i$i31 = (($12) + 16|0);
      $14 = HEAP32[$__einp_$i$i4$i$i31>>2]|0;
      $cmp$i$i5$i$i32 = ($13|0)==($14|0);
      if ($cmp$i$i5$i$i32) {
       $vtable$i$i7$i$i34 = HEAP32[$12>>2]|0;
       $vfn$i$i8$i$i35 = (($vtable$i$i7$i$i34) + 36|0);
       $15 = HEAP32[$vfn$i$i8$i$i35>>2]|0;
       __THREW__ = 0;
       $call$i$i9$i$i49 = (invoke_ii($15|0,($12|0))|0);
       $16 = __THREW__; __THREW__ = 0;
       $17 = $16&1;
       if ($17) {
        label = 34;
        break L7;
       } else {
        $retval$0$i$i12$i$i38 = $call$i$i9$i$i49;
       }
      } else {
       $18 = HEAP32[$13>>2]|0;
       $retval$0$i$i12$i$i38 = $18;
      }
      $cmp$i1$i13$i$i39 = ($retval$0$i$i12$i$i38|0)==(-1);
      if ($cmp$i1$i13$i$i39) {
       HEAP32[$__e>>2] = 0;
       label = 18;
       break;
      } else {
       if ($70) {
        $71 = $12;
        break;
       } else {
        $$pre$i15$i$i = $12;$__a$2 = $__a$0;
        break L7;
       }
      }
     }
    } while(0);
    if ((label|0) == 18) {
     label = 0;
     if ($70) {
      $$pre$i15$i$i = 0;$__a$2 = $__a$0;
      break;
     } else {
      $71 = 0;
     }
    }
    $19 = HEAP32[$__a_end>>2]|0;
    $sub$ptr$lhs$cast = $19;
    $sub$ptr$rhs$cast = $__a$0;
    $sub$ptr$sub = (($sub$ptr$lhs$cast) - ($sub$ptr$rhs$cast))|0;
    $20 = HEAP8[$__buf>>0]|0;
    $and$i$i51 = $20 & 1;
    $tobool$i$i52 = ($and$i$i51<<24>>24)==(0);
    if ($tobool$i$i52) {
     $conv$i$i = $20&255;
     $shr1$i$i = $conv$i$i >>> 1;
     $cond$i54 = $shr1$i$i;
    } else {
     $21 = HEAP32[$__size_$i2$i68>>2]|0;
     $cond$i54 = $21;
    }
    $cmp = ($sub$ptr$sub|0)==($cond$i54|0);
    if ($cmp) {
     if ($tobool$i$i52) {
      $conv$i$i60 = $20&255;
      $shr1$i$i61 = $conv$i$i60 >>> 1;
      $conv$i$i70 = $20&255;
      $shr1$i$i71 = $conv$i$i70 >>> 1;
      $cond$i63122 = $shr1$i$i61;$cond$i73 = $shr1$i$i71;
     } else {
      $22 = HEAP32[$__size_$i2$i68>>2]|0;
      $cond$i63122 = $22;$cond$i73 = $22;
     }
     $mul = $cond$i73 << 1;
     __THREW__ = 0;
     invoke_viii(385,($__buf|0),($mul|0),0);
     $23 = __THREW__; __THREW__ = 0;
     $24 = $23&1;
     if ($24) {
      label = 34;
      break;
     }
     $25 = HEAP8[$__buf>>0]|0;
     $and$i$i89 = $25 & 1;
     $tobool$i$i90 = ($and$i$i89<<24>>24)==(0);
     if ($tobool$i$i90) {
      $cond$i95 = 10;
     } else {
      $26 = HEAP32[$__buf>>2]|0;
      $and$i1$i92 = $26 & -2;
      $phitmp$i93 = (($and$i1$i92) + -1)|0;
      $cond$i95 = $phitmp$i93;
     }
     __THREW__ = 0;
     invoke_viii(385,($__buf|0),($cond$i95|0),0);
     $27 = __THREW__; __THREW__ = 0;
     $28 = $27&1;
     if ($28) {
      label = 34;
      break;
     }
     $29 = HEAP8[$__buf>>0]|0;
     $and$i$i$i99 = $29 & 1;
     $tobool$i$i$i100 = ($and$i$i$i99<<24>>24)==(0);
     if ($tobool$i$i$i100) {
      $cond$i$i106 = $arrayidx$i$i$i104$pre$phiZZZZ2D;
     } else {
      $30 = HEAP32[$__data_$i$i$i101$pre$phiZZZZ2D>>2]|0;
      $cond$i$i106 = $30;
     }
     $add$ptr = (($cond$i$i106) + ($cond$i63122)|0);
     HEAP32[$__a_end>>2] = $add$ptr;
     $__a$1 = $cond$i$i106;
    } else {
     $__a$1 = $__a$0;
    }
    $__ninp_$i$i109 = (($35) + 12|0);
    $36 = HEAP32[$__ninp_$i$i109>>2]|0;
    $__einp_$i$i110 = (($35) + 16|0);
    $37 = HEAP32[$__einp_$i$i110>>2]|0;
    $cmp$i$i111 = ($36|0)==($37|0);
    if ($cmp$i$i111) {
     $vtable$i$i112 = HEAP32[$35>>2]|0;
     $vfn$i$i113 = (($vtable$i$i112) + 36|0);
     $38 = HEAP32[$vfn$i$i113>>2]|0;
     __THREW__ = 0;
     $call$i$i117 = (invoke_ii($38|0,($35|0))|0);
     $39 = __THREW__; __THREW__ = 0;
     $40 = $39&1;
     if ($40) {
      label = 34;
      break;
     } else {
      $retval$0$i$i = $call$i$i117;
     }
    } else {
     $41 = HEAP32[$36>>2]|0;
     $retval$0$i$i = $41;
    }
    $call20 = (__ZNSt3__19__num_getIwE19__stage2_float_loopEwRbRcPcRS4_wwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSE_RjPw($retval$0$i$i,$__in_units,$__exp,$__a$1,$__a_end,$4,$5,$__grouping,$__g,$__g_end,$__dc,$__atoms)|0);
    $tobool = ($call20|0)==(0);
    if (!($tobool)) {
     $$pre$i15$i$i = $71;$__a$2 = $__a$1;
     break;
    }
    $42 = HEAP32[$__ninp_$i$i109>>2]|0;
    $43 = HEAP32[$__einp_$i$i110>>2]|0;
    $cmp$i$i85 = ($42|0)==($43|0);
    if ($cmp$i$i85) {
     $vtable$i$i = HEAP32[$35>>2]|0;
     $vfn$i$i = (($vtable$i$i) + 40|0);
     $44 = HEAP32[$vfn$i$i>>2]|0;
     __THREW__ = 0;
     (invoke_ii($44|0,($35|0))|0);
     $45 = __THREW__; __THREW__ = 0;
     $46 = $45&1;
     if ($46) {
      label = 34;
      break;
     } else {
      $$pre$i$i$i23 = $35;$__a$0 = $__a$1;
      continue;
     }
    } else {
     $incdec$ptr$i$i = (($42) + 4|0);
     HEAP32[$__ninp_$i$i109>>2] = $incdec$ptr$i$i;
     $$pre$i$i$i23 = $35;$__a$0 = $__a$1;
     continue;
    }
   }
   if ((label|0) == 34) {
    $31 = ___cxa_find_matching_catch()|0;
    $32 = tempRet0;
    $lpad$phi$index = $31;$lpad$phi$index2 = $32;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
    ___resumeException($lpad$phi$index|0);
    // unreachable;
   }
   $47 = HEAP8[$__grouping>>0]|0;
   $and$i$i76 = $47 & 1;
   $tobool$i$i77 = ($and$i$i76<<24>>24)==(0);
   if ($tobool$i$i77) {
    $conv$i$i80 = $47&255;
    $shr1$i$i81 = $conv$i$i80 >>> 1;
    $cond$i83 = $shr1$i$i81;
   } else {
    $__size_$i2$i78 = (($__grouping) + 4|0);
    $48 = HEAP32[$__size_$i2$i78>>2]|0;
    $cond$i83 = $48;
   }
   $cmp26 = ($cond$i83|0)==(0);
   if (!($cmp26)) {
    $49 = HEAP8[$__in_units>>0]|0;
    $tobool27 = ($49<<24>>24)==(0);
    if (!($tobool27)) {
     $50 = HEAP32[$__g_end>>2]|0;
     $sub$ptr$lhs$cast30 = $50;
     $sub$ptr$rhs$cast31 = $__g;
     $sub$ptr$sub32 = (($sub$ptr$lhs$cast30) - ($sub$ptr$rhs$cast31))|0;
     $cmp33 = ($sub$ptr$sub32|0)<(160);
     if ($cmp33) {
      $51 = HEAP32[$__dc>>2]|0;
      $incdec$ptr = (($50) + 4|0);
      HEAP32[$__g_end>>2] = $incdec$ptr;
      HEAP32[$50>>2] = $51;
     }
    }
   }
   $52 = HEAP32[$__a_end>>2]|0;
   __THREW__ = 0;
   $call37 = (+invoke_diii(393,($__a$2|0),($52|0),($__err|0)));
   $53 = __THREW__; __THREW__ = 0;
   $54 = $53&1;
   if (!($54)) {
    HEAPF64[$__v>>3] = $call37;
    $55 = HEAP32[$__g_end>>2]|0;
    __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping,$__g,$55,$__err);
    $tobool$i$i$i = ($35|0)==(0|0);
    if ($tobool$i$i$i) {
     $69 = 0;$72 = 1;
    } else {
     $__ninp_$i$i$i$i = (($35) + 12|0);
     $56 = HEAP32[$__ninp_$i$i$i$i>>2]|0;
     $__einp_$i$i$i$i = (($35) + 16|0);
     $57 = HEAP32[$__einp_$i$i$i$i>>2]|0;
     $cmp$i$i$i$i = ($56|0)==($57|0);
     if ($cmp$i$i$i$i) {
      $vtable$i$i$i$i = HEAP32[$35>>2]|0;
      $vfn$i$i$i$i = (($vtable$i$i$i$i) + 36|0);
      $58 = HEAP32[$vfn$i$i$i$i>>2]|0;
      __THREW__ = 0;
      $call$i$i$i$i7 = (invoke_ii($58|0,($35|0))|0);
      $59 = __THREW__; __THREW__ = 0;
      $60 = $59&1;
      if ($60) {
       break;
      } else {
       $retval$0$i$i$i$i = $call$i$i$i$i7;
      }
     } else {
      $61 = HEAP32[$56>>2]|0;
      $retval$0$i$i$i$i = $61;
     }
     $cmp$i1$i$i$i = ($retval$0$i$i$i$i|0)==(-1);
     if ($cmp$i1$i$i$i) {
      HEAP32[$__b>>2] = 0;
      $69 = 0;$72 = 1;
     } else {
      $69 = $35;$72 = 0;
     }
    }
    $tobool$i2$i$i = ($$pre$i15$i$i|0)==(0|0);
    do {
     if ($tobool$i2$i$i) {
      label = 64;
     } else {
      $__ninp_$i$i3$i$i = (($$pre$i15$i$i) + 12|0);
      $62 = HEAP32[$__ninp_$i$i3$i$i>>2]|0;
      $__einp_$i$i4$i$i = (($$pre$i15$i$i) + 16|0);
      $63 = HEAP32[$__einp_$i$i4$i$i>>2]|0;
      $cmp$i$i5$i$i = ($62|0)==($63|0);
      if ($cmp$i$i5$i$i) {
       $vtable$i$i7$i$i = HEAP32[$$pre$i15$i$i>>2]|0;
       $vfn$i$i8$i$i = (($vtable$i$i7$i$i) + 36|0);
       $64 = HEAP32[$vfn$i$i8$i$i>>2]|0;
       __THREW__ = 0;
       $call$i$i9$i$i8 = (invoke_ii($64|0,($$pre$i15$i$i|0))|0);
       $65 = __THREW__; __THREW__ = 0;
       $66 = $65&1;
       if ($66) {
        break L1;
       } else {
        $retval$0$i$i12$i$i = $call$i$i9$i$i8;
       }
      } else {
       $67 = HEAP32[$62>>2]|0;
       $retval$0$i$i12$i$i = $67;
      }
      $cmp$i1$i13$i$i = ($retval$0$i$i12$i$i|0)==(-1);
      if ($cmp$i1$i13$i$i) {
       HEAP32[$__e>>2] = 0;
       label = 64;
       break;
      }
      if ($72) {
       HEAP32[$agg$result>>2] = $69;
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
       STACKTOP = sp;return;
      }
     }
    } while(0);
    if ((label|0) == 64) {
     if (!($72)) {
      HEAP32[$agg$result>>2] = $69;
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
      STACKTOP = sp;return;
     }
    }
    $68 = HEAP32[$__err>>2]|0;
    $or = $68 | 2;
    HEAP32[$__err>>2] = $or;
    HEAP32[$agg$result>>2] = $69;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
    STACKTOP = sp;return;
   }
  }
 } while(0);
 $33 = ___cxa_find_matching_catch()|0;
 $34 = tempRet0;
 $lpad$phi$index = $33;$lpad$phi$index2 = $34;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
 ___resumeException($lpad$phi$index|0);
 // unreachable;
}
function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRe($agg$result,$this,$__b,$__e,$__iob,$__err,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $0 = 0, $1 = 0, $agg$tmp = 0, $agg$tmp$byval_copy = 0, $agg$tmp2 = 0, $agg$tmp2$byval_copy = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $agg$tmp2$byval_copy = sp + 12|0;
 $agg$tmp$byval_copy = sp + 8|0;
 $agg$tmp = sp + 4|0;
 $agg$tmp2 = sp;
 $0 = HEAP32[$__b>>2]|0;
 HEAP32[$agg$tmp>>2] = $0;
 $1 = HEAP32[$__e>>2]|0;
 HEAP32[$agg$tmp2>>2] = $1;
 ;HEAP32[$agg$tmp$byval_copy+0>>2]=HEAP32[$agg$tmp+0>>2]|0;
 ;HEAP32[$agg$tmp2$byval_copy+0>>2]=HEAP32[$agg$tmp2+0>>2]|0;
 __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE23__do_get_floating_pointIeEES4_S4_S4_RNS_8ios_baseERjRT_($agg$result,0,$agg$tmp$byval_copy,$agg$tmp2$byval_copy,$__iob,$__err,$__v);
 STACKTOP = sp;return;
}
function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE23__do_get_floating_pointIeEES4_S4_S4_RNS_8ios_baseERjRT_($agg$result,$this,$__b,$__e,$__iob,$__err,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$pre = 0, $$pre$i$i$i23 = 0, $$pre$i15$i$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $8 = 0, $9 = 0, $__a$0 = 0, $__a$1 = 0, $__a$2 = 0, $__a_end = 0;
 var $__atoms = 0, $__buf = 0, $__data_$i$i$i = 0, $__data_$i$i$i101$pre = 0, $__data_$i$i$i101$pre$phiZZZZ2D = 0, $__dc = 0, $__decimal_point = 0, $__einp_$i$i$i$i = 0, $__einp_$i$i$i$i13 = 0, $__einp_$i$i110 = 0, $__einp_$i$i4$i$i = 0, $__einp_$i$i4$i$i31 = 0, $__exp = 0, $__g = 0, $__g_end = 0, $__grouping = 0, $__in_units = 0, $__ninp_$i$i$i$i = 0, $__ninp_$i$i$i$i12 = 0, $__ninp_$i$i109 = 0;
 var $__ninp_$i$i3$i$i = 0, $__ninp_$i$i3$i$i30 = 0, $__size_$i2$i68 = 0, $__size_$i2$i78 = 0, $__thousands_sep = 0, $add$ptr = 0, $and$i$i$i = 0, $and$i$i$i99 = 0, $and$i$i51 = 0, $and$i$i76 = 0, $and$i$i89 = 0, $and$i1$i92 = 0, $arrayidx$i$i$i = 0, $arrayidx$i$i$i104$pre = 0, $arrayidx$i$i$i104$pre$phiZZZZ2D = 0, $call$i$i$i$i47 = 0, $call$i$i$i$i7 = 0, $call$i$i117 = 0, $call$i$i9$i$i49 = 0, $call$i$i9$i$i8 = 0;
 var $call20 = 0, $call37 = 0.0, $cmp = 0, $cmp$i$i$i$i = 0, $cmp$i$i$i$i14 = 0, $cmp$i$i111 = 0, $cmp$i$i5$i$i = 0, $cmp$i$i5$i$i32 = 0, $cmp$i$i85 = 0, $cmp$i1$i$i$i = 0, $cmp$i1$i$i$i21 = 0, $cmp$i1$i13$i$i = 0, $cmp$i1$i13$i$i39 = 0, $cmp26 = 0, $cmp33 = 0, $cond$i$i = 0, $cond$i$i106 = 0, $cond$i54 = 0, $cond$i63122 = 0, $cond$i73 = 0;
 var $cond$i83 = 0, $cond$i95 = 0, $conv$i$i = 0, $conv$i$i60 = 0, $conv$i$i70 = 0, $conv$i$i80 = 0, $incdec$ptr = 0, $incdec$ptr$i$i = 0, $lpad$phi$index = 0, $lpad$phi$index2 = 0, $mul = 0, $or = 0, $phitmp$i93 = 0, $retval$0$i$i = 0, $retval$0$i$i$i$i = 0, $retval$0$i$i$i$i20 = 0, $retval$0$i$i12$i$i = 0, $retval$0$i$i12$i$i38 = 0, $shr1$i$i = 0, $shr1$i$i61 = 0;
 var $shr1$i$i71 = 0, $shr1$i$i81 = 0, $sub$ptr$lhs$cast = 0, $sub$ptr$lhs$cast30 = 0, $sub$ptr$rhs$cast = 0, $sub$ptr$rhs$cast31 = 0, $sub$ptr$sub = 0, $sub$ptr$sub32 = 0, $tobool = 0, $tobool$i$i$i = 0, $tobool$i$i$i100 = 0, $tobool$i$i$i11 = 0, $tobool$i$i$i9 = 0, $tobool$i$i52 = 0, $tobool$i$i77 = 0, $tobool$i$i90 = 0, $tobool$i2$i$i = 0, $tobool$i2$i$i28 = 0, $tobool27 = 0, $vfn$i$i = 0;
 var $vfn$i$i$i$i = 0, $vfn$i$i$i$i17 = 0, $vfn$i$i113 = 0, $vfn$i$i8$i$i = 0, $vfn$i$i8$i$i35 = 0, $vtable$i$i = 0, $vtable$i$i$i$i = 0, $vtable$i$i$i$i16 = 0, $vtable$i$i112 = 0, $vtable$i$i7$i$i = 0, $vtable$i$i7$i$i34 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 352|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__atoms = sp + 208|0;
 $__decimal_point = sp + 184|0;
 $__thousands_sep = sp + 4|0;
 $__grouping = sp + 8|0;
 $__buf = sp + 196|0;
 $__a_end = sp;
 $__g = sp + 24|0;
 $__g_end = sp + 192|0;
 $__dc = sp + 188|0;
 $__in_units = sp + 337|0;
 $__exp = sp + 336|0;
 __ZNSt3__19__num_getIwE19__stage2_float_prepERNS_8ios_baseEPwRwS5_($__grouping,$__iob,$__atoms,$__decimal_point,$__thousands_sep);
 ;HEAP32[$__buf+0>>2]=0|0;HEAP32[$__buf+4>>2]=0|0;HEAP32[$__buf+8>>2]=0|0;
 __THREW__ = 0;
 invoke_viii(385,($__buf|0),10,0);
 $0 = __THREW__; __THREW__ = 0;
 $1 = $0&1;
 L1: do {
  if (!($1)) {
   $2 = HEAP8[$__buf>>0]|0;
   $and$i$i$i = $2 & 1;
   $tobool$i$i$i9 = ($and$i$i$i<<24>>24)==(0);
   if ($tobool$i$i$i9) {
    $arrayidx$i$i$i = (($__buf) + 1|0);
    $__data_$i$i$i101$pre = (($__buf) + 8|0);
    $__data_$i$i$i101$pre$phiZZZZ2D = $__data_$i$i$i101$pre;$arrayidx$i$i$i104$pre$phiZZZZ2D = $arrayidx$i$i$i;$cond$i$i = $arrayidx$i$i$i;
   } else {
    $__data_$i$i$i = (($__buf) + 8|0);
    $3 = HEAP32[$__data_$i$i$i>>2]|0;
    $arrayidx$i$i$i104$pre = (($__buf) + 1|0);
    $__data_$i$i$i101$pre$phiZZZZ2D = $__data_$i$i$i;$arrayidx$i$i$i104$pre$phiZZZZ2D = $arrayidx$i$i$i104$pre;$cond$i$i = $3;
   }
   HEAP32[$__a_end>>2] = $cond$i$i;
   HEAP32[$__g_end>>2] = $__g;
   HEAP32[$__dc>>2] = 0;
   HEAP8[$__in_units>>0] = 1;
   HEAP8[$__exp>>0] = 69;
   $__size_$i2$i68 = (($__buf) + 4|0);
   $4 = HEAP32[$__decimal_point>>2]|0;
   $5 = HEAP32[$__thousands_sep>>2]|0;
   $$pre = HEAP32[$__b>>2]|0;
   $$pre$i$i$i23 = $$pre;$__a$0 = $cond$i$i;
   L7: while(1) {
    $tobool$i$i$i11 = ($$pre$i$i$i23|0)==(0|0);
    if ($tobool$i$i$i11) {
     $35 = 0;$70 = 1;
    } else {
     $__ninp_$i$i$i$i12 = (($$pre$i$i$i23) + 12|0);
     $6 = HEAP32[$__ninp_$i$i$i$i12>>2]|0;
     $__einp_$i$i$i$i13 = (($$pre$i$i$i23) + 16|0);
     $7 = HEAP32[$__einp_$i$i$i$i13>>2]|0;
     $cmp$i$i$i$i14 = ($6|0)==($7|0);
     if ($cmp$i$i$i$i14) {
      $vtable$i$i$i$i16 = HEAP32[$$pre$i$i$i23>>2]|0;
      $vfn$i$i$i$i17 = (($vtable$i$i$i$i16) + 36|0);
      $8 = HEAP32[$vfn$i$i$i$i17>>2]|0;
      __THREW__ = 0;
      $call$i$i$i$i47 = (invoke_ii($8|0,($$pre$i$i$i23|0))|0);
      $9 = __THREW__; __THREW__ = 0;
      $10 = $9&1;
      if ($10) {
       label = 34;
       break;
      } else {
       $retval$0$i$i$i$i20 = $call$i$i$i$i47;
      }
     } else {
      $11 = HEAP32[$6>>2]|0;
      $retval$0$i$i$i$i20 = $11;
     }
     $cmp$i1$i$i$i21 = ($retval$0$i$i$i$i20|0)==(-1);
     if ($cmp$i1$i$i$i21) {
      HEAP32[$__b>>2] = 0;
      $35 = 0;$70 = 1;
     } else {
      $35 = $$pre$i$i$i23;$70 = 0;
     }
    }
    $12 = HEAP32[$__e>>2]|0;
    $tobool$i2$i$i28 = ($12|0)==(0|0);
    do {
     if ($tobool$i2$i$i28) {
      label = 18;
     } else {
      $__ninp_$i$i3$i$i30 = (($12) + 12|0);
      $13 = HEAP32[$__ninp_$i$i3$i$i30>>2]|0;
      $__einp_$i$i4$i$i31 = (($12) + 16|0);
      $14 = HEAP32[$__einp_$i$i4$i$i31>>2]|0;
      $cmp$i$i5$i$i32 = ($13|0)==($14|0);
      if ($cmp$i$i5$i$i32) {
       $vtable$i$i7$i$i34 = HEAP32[$12>>2]|0;
       $vfn$i$i8$i$i35 = (($vtable$i$i7$i$i34) + 36|0);
       $15 = HEAP32[$vfn$i$i8$i$i35>>2]|0;
       __THREW__ = 0;
       $call$i$i9$i$i49 = (invoke_ii($15|0,($12|0))|0);
       $16 = __THREW__; __THREW__ = 0;
       $17 = $16&1;
       if ($17) {
        label = 34;
        break L7;
       } else {
        $retval$0$i$i12$i$i38 = $call$i$i9$i$i49;
       }
      } else {
       $18 = HEAP32[$13>>2]|0;
       $retval$0$i$i12$i$i38 = $18;
      }
      $cmp$i1$i13$i$i39 = ($retval$0$i$i12$i$i38|0)==(-1);
      if ($cmp$i1$i13$i$i39) {
       HEAP32[$__e>>2] = 0;
       label = 18;
       break;
      } else {
       if ($70) {
        $71 = $12;
        break;
       } else {
        $$pre$i15$i$i = $12;$__a$2 = $__a$0;
        break L7;
       }
      }
     }
    } while(0);
    if ((label|0) == 18) {
     label = 0;
     if ($70) {
      $$pre$i15$i$i = 0;$__a$2 = $__a$0;
      break;
     } else {
      $71 = 0;
     }
    }
    $19 = HEAP32[$__a_end>>2]|0;
    $sub$ptr$lhs$cast = $19;
    $sub$ptr$rhs$cast = $__a$0;
    $sub$ptr$sub = (($sub$ptr$lhs$cast) - ($sub$ptr$rhs$cast))|0;
    $20 = HEAP8[$__buf>>0]|0;
    $and$i$i51 = $20 & 1;
    $tobool$i$i52 = ($and$i$i51<<24>>24)==(0);
    if ($tobool$i$i52) {
     $conv$i$i = $20&255;
     $shr1$i$i = $conv$i$i >>> 1;
     $cond$i54 = $shr1$i$i;
    } else {
     $21 = HEAP32[$__size_$i2$i68>>2]|0;
     $cond$i54 = $21;
    }
    $cmp = ($sub$ptr$sub|0)==($cond$i54|0);
    if ($cmp) {
     if ($tobool$i$i52) {
      $conv$i$i60 = $20&255;
      $shr1$i$i61 = $conv$i$i60 >>> 1;
      $conv$i$i70 = $20&255;
      $shr1$i$i71 = $conv$i$i70 >>> 1;
      $cond$i63122 = $shr1$i$i61;$cond$i73 = $shr1$i$i71;
     } else {
      $22 = HEAP32[$__size_$i2$i68>>2]|0;
      $cond$i63122 = $22;$cond$i73 = $22;
     }
     $mul = $cond$i73 << 1;
     __THREW__ = 0;
     invoke_viii(385,($__buf|0),($mul|0),0);
     $23 = __THREW__; __THREW__ = 0;
     $24 = $23&1;
     if ($24) {
      label = 34;
      break;
     }
     $25 = HEAP8[$__buf>>0]|0;
     $and$i$i89 = $25 & 1;
     $tobool$i$i90 = ($and$i$i89<<24>>24)==(0);
     if ($tobool$i$i90) {
      $cond$i95 = 10;
     } else {
      $26 = HEAP32[$__buf>>2]|0;
      $and$i1$i92 = $26 & -2;
      $phitmp$i93 = (($and$i1$i92) + -1)|0;
      $cond$i95 = $phitmp$i93;
     }
     __THREW__ = 0;
     invoke_viii(385,($__buf|0),($cond$i95|0),0);
     $27 = __THREW__; __THREW__ = 0;
     $28 = $27&1;
     if ($28) {
      label = 34;
      break;
     }
     $29 = HEAP8[$__buf>>0]|0;
     $and$i$i$i99 = $29 & 1;
     $tobool$i$i$i100 = ($and$i$i$i99<<24>>24)==(0);
     if ($tobool$i$i$i100) {
      $cond$i$i106 = $arrayidx$i$i$i104$pre$phiZZZZ2D;
     } else {
      $30 = HEAP32[$__data_$i$i$i101$pre$phiZZZZ2D>>2]|0;
      $cond$i$i106 = $30;
     }
     $add$ptr = (($cond$i$i106) + ($cond$i63122)|0);
     HEAP32[$__a_end>>2] = $add$ptr;
     $__a$1 = $cond$i$i106;
    } else {
     $__a$1 = $__a$0;
    }
    $__ninp_$i$i109 = (($35) + 12|0);
    $36 = HEAP32[$__ninp_$i$i109>>2]|0;
    $__einp_$i$i110 = (($35) + 16|0);
    $37 = HEAP32[$__einp_$i$i110>>2]|0;
    $cmp$i$i111 = ($36|0)==($37|0);
    if ($cmp$i$i111) {
     $vtable$i$i112 = HEAP32[$35>>2]|0;
     $vfn$i$i113 = (($vtable$i$i112) + 36|0);
     $38 = HEAP32[$vfn$i$i113>>2]|0;
     __THREW__ = 0;
     $call$i$i117 = (invoke_ii($38|0,($35|0))|0);
     $39 = __THREW__; __THREW__ = 0;
     $40 = $39&1;
     if ($40) {
      label = 34;
      break;
     } else {
      $retval$0$i$i = $call$i$i117;
     }
    } else {
     $41 = HEAP32[$36>>2]|0;
     $retval$0$i$i = $41;
    }
    $call20 = (__ZNSt3__19__num_getIwE19__stage2_float_loopEwRbRcPcRS4_wwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSE_RjPw($retval$0$i$i,$__in_units,$__exp,$__a$1,$__a_end,$4,$5,$__grouping,$__g,$__g_end,$__dc,$__atoms)|0);
    $tobool = ($call20|0)==(0);
    if (!($tobool)) {
     $$pre$i15$i$i = $71;$__a$2 = $__a$1;
     break;
    }
    $42 = HEAP32[$__ninp_$i$i109>>2]|0;
    $43 = HEAP32[$__einp_$i$i110>>2]|0;
    $cmp$i$i85 = ($42|0)==($43|0);
    if ($cmp$i$i85) {
     $vtable$i$i = HEAP32[$35>>2]|0;
     $vfn$i$i = (($vtable$i$i) + 40|0);
     $44 = HEAP32[$vfn$i$i>>2]|0;
     __THREW__ = 0;
     (invoke_ii($44|0,($35|0))|0);
     $45 = __THREW__; __THREW__ = 0;
     $46 = $45&1;
     if ($46) {
      label = 34;
      break;
     } else {
      $$pre$i$i$i23 = $35;$__a$0 = $__a$1;
      continue;
     }
    } else {
     $incdec$ptr$i$i = (($42) + 4|0);
     HEAP32[$__ninp_$i$i109>>2] = $incdec$ptr$i$i;
     $$pre$i$i$i23 = $35;$__a$0 = $__a$1;
     continue;
    }
   }
   if ((label|0) == 34) {
    $31 = ___cxa_find_matching_catch()|0;
    $32 = tempRet0;
    $lpad$phi$index = $31;$lpad$phi$index2 = $32;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
    ___resumeException($lpad$phi$index|0);
    // unreachable;
   }
   $47 = HEAP8[$__grouping>>0]|0;
   $and$i$i76 = $47 & 1;
   $tobool$i$i77 = ($and$i$i76<<24>>24)==(0);
   if ($tobool$i$i77) {
    $conv$i$i80 = $47&255;
    $shr1$i$i81 = $conv$i$i80 >>> 1;
    $cond$i83 = $shr1$i$i81;
   } else {
    $__size_$i2$i78 = (($__grouping) + 4|0);
    $48 = HEAP32[$__size_$i2$i78>>2]|0;
    $cond$i83 = $48;
   }
   $cmp26 = ($cond$i83|0)==(0);
   if (!($cmp26)) {
    $49 = HEAP8[$__in_units>>0]|0;
    $tobool27 = ($49<<24>>24)==(0);
    if (!($tobool27)) {
     $50 = HEAP32[$__g_end>>2]|0;
     $sub$ptr$lhs$cast30 = $50;
     $sub$ptr$rhs$cast31 = $__g;
     $sub$ptr$sub32 = (($sub$ptr$lhs$cast30) - ($sub$ptr$rhs$cast31))|0;
     $cmp33 = ($sub$ptr$sub32|0)<(160);
     if ($cmp33) {
      $51 = HEAP32[$__dc>>2]|0;
      $incdec$ptr = (($50) + 4|0);
      HEAP32[$__g_end>>2] = $incdec$ptr;
      HEAP32[$50>>2] = $51;
     }
    }
   }
   $52 = HEAP32[$__a_end>>2]|0;
   __THREW__ = 0;
   $call37 = (+invoke_diii(394,($__a$2|0),($52|0),($__err|0)));
   $53 = __THREW__; __THREW__ = 0;
   $54 = $53&1;
   if (!($54)) {
    HEAPF64[$__v>>3] = $call37;
    $55 = HEAP32[$__g_end>>2]|0;
    __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping,$__g,$55,$__err);
    $tobool$i$i$i = ($35|0)==(0|0);
    if ($tobool$i$i$i) {
     $69 = 0;$72 = 1;
    } else {
     $__ninp_$i$i$i$i = (($35) + 12|0);
     $56 = HEAP32[$__ninp_$i$i$i$i>>2]|0;
     $__einp_$i$i$i$i = (($35) + 16|0);
     $57 = HEAP32[$__einp_$i$i$i$i>>2]|0;
     $cmp$i$i$i$i = ($56|0)==($57|0);
     if ($cmp$i$i$i$i) {
      $vtable$i$i$i$i = HEAP32[$35>>2]|0;
      $vfn$i$i$i$i = (($vtable$i$i$i$i) + 36|0);
      $58 = HEAP32[$vfn$i$i$i$i>>2]|0;
      __THREW__ = 0;
      $call$i$i$i$i7 = (invoke_ii($58|0,($35|0))|0);
      $59 = __THREW__; __THREW__ = 0;
      $60 = $59&1;
      if ($60) {
       break;
      } else {
       $retval$0$i$i$i$i = $call$i$i$i$i7;
      }
     } else {
      $61 = HEAP32[$56>>2]|0;
      $retval$0$i$i$i$i = $61;
     }
     $cmp$i1$i$i$i = ($retval$0$i$i$i$i|0)==(-1);
     if ($cmp$i1$i$i$i) {
      HEAP32[$__b>>2] = 0;
      $69 = 0;$72 = 1;
     } else {
      $69 = $35;$72 = 0;
     }
    }
    $tobool$i2$i$i = ($$pre$i15$i$i|0)==(0|0);
    do {
     if ($tobool$i2$i$i) {
      label = 64;
     } else {
      $__ninp_$i$i3$i$i = (($$pre$i15$i$i) + 12|0);
      $62 = HEAP32[$__ninp_$i$i3$i$i>>2]|0;
      $__einp_$i$i4$i$i = (($$pre$i15$i$i) + 16|0);
      $63 = HEAP32[$__einp_$i$i4$i$i>>2]|0;
      $cmp$i$i5$i$i = ($62|0)==($63|0);
      if ($cmp$i$i5$i$i) {
       $vtable$i$i7$i$i = HEAP32[$$pre$i15$i$i>>2]|0;
       $vfn$i$i8$i$i = (($vtable$i$i7$i$i) + 36|0);
       $64 = HEAP32[$vfn$i$i8$i$i>>2]|0;
       __THREW__ = 0;
       $call$i$i9$i$i8 = (invoke_ii($64|0,($$pre$i15$i$i|0))|0);
       $65 = __THREW__; __THREW__ = 0;
       $66 = $65&1;
       if ($66) {
        break L1;
       } else {
        $retval$0$i$i12$i$i = $call$i$i9$i$i8;
       }
      } else {
       $67 = HEAP32[$62>>2]|0;
       $retval$0$i$i12$i$i = $67;
      }
      $cmp$i1$i13$i$i = ($retval$0$i$i12$i$i|0)==(-1);
      if ($cmp$i1$i13$i$i) {
       HEAP32[$__e>>2] = 0;
       label = 64;
       break;
      }
      if ($72) {
       HEAP32[$agg$result>>2] = $69;
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
       STACKTOP = sp;return;
      }
     }
    } while(0);
    if ((label|0) == 64) {
     if (!($72)) {
      HEAP32[$agg$result>>2] = $69;
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
      STACKTOP = sp;return;
     }
    }
    $68 = HEAP32[$__err>>2]|0;
    $or = $68 | 2;
    HEAP32[$__err>>2] = $or;
    HEAP32[$agg$result>>2] = $69;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
    STACKTOP = sp;return;
   }
  }
 } while(0);
 $33 = ___cxa_find_matching_catch()|0;
 $34 = tempRet0;
 $lpad$phi$index = $33;$lpad$phi$index2 = $34;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
 ___resumeException($lpad$phi$index|0);
 // unreachable;
}
function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRPv($agg$result,$this,$__b,$__e,$__iob,$__err,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$pre = 0, $$pre$i$i$i26 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0;
 var $8 = 0, $9 = 0, $__a$0 = 0, $__a$1 = 0, $__a$2 = 0, $__a_end = 0, $__atoms = 0, $__buf = 0, $__data_$i$i$i = 0, $__data_$i$i$i104$pre = 0, $__data_$i$i$i104$pre$phiZZZZ2D = 0, $__dc = 0, $__einp_$i$i$i$i = 0, $__einp_$i$i$i$i16 = 0, $__einp_$i$i4$i$i = 0, $__einp_$i$i4$i$i34 = 0, $__einp_$i$i92 = 0, $__g = 0, $__g_end = 0, $__grouping = 0;
 var $__ninp_$i$i$i$i = 0, $__ninp_$i$i$i$i15 = 0, $__ninp_$i$i3$i$i = 0, $__ninp_$i$i3$i$i33 = 0, $__ninp_$i$i91 = 0, $__size_$i2$i73 = 0, $add$ptr = 0, $and$i$i$i = 0, $and$i$i$i102 = 0, $and$i$i54 = 0, $and$i$i82 = 0, $and$i1$i85 = 0, $arrayidx = 0, $arrayidx$i$i$i = 0, $arrayidx$i$i$i107$pre = 0, $arrayidx$i$i$i107$pre$phiZZZZ2D = 0, $call$i$i$i$i50 = 0, $call$i$i$i$i7 = 0, $call$i$i9$i$i52 = 0, $call$i$i9$i$i8 = 0;
 var $call$i$i99 = 0, $call$i9 = 0, $call27 = 0, $call33 = 0, $call35 = 0, $cmp = 0, $cmp$i$i$i$i = 0, $cmp$i$i$i$i17 = 0, $cmp$i$i5$i$i = 0, $cmp$i$i5$i$i35 = 0, $cmp$i$i68 = 0, $cmp$i$i93 = 0, $cmp$i1$i$i$i = 0, $cmp$i1$i$i$i24 = 0, $cmp$i1$i13$i$i = 0, $cmp$i1$i13$i$i42 = 0, $cmp36 = 0, $cond$i$i = 0, $cond$i$i109 = 0, $cond$i57 = 0;
 var $cond$i66115 = 0, $cond$i78 = 0, $cond$i88 = 0, $conv$i$i = 0, $conv$i$i63 = 0, $conv$i$i75 = 0, $ehselector$slot$0 = 0, $exn$slot$0 = 0, $incdec$ptr$i$i = 0, $lpad$phi$index = 0, $lpad$phi$index2 = 0, $mul = 0, $or = 0, $phitmp$i86 = 0, $ref$tmp = 0, $retval$0$i$i = 0, $retval$0$i$i$i$i = 0, $retval$0$i$i$i$i23 = 0, $retval$0$i$i12$i$i = 0, $retval$0$i$i12$i$i41 = 0;
 var $shr1$i$i = 0, $shr1$i$i64 = 0, $shr1$i$i76 = 0, $sub$ptr$lhs$cast = 0, $sub$ptr$rhs$cast = 0, $sub$ptr$sub = 0, $tobool = 0, $tobool$i$i$i = 0, $tobool$i$i$i103 = 0, $tobool$i$i$i12 = 0, $tobool$i$i$i14 = 0, $tobool$i$i55 = 0, $tobool$i$i83 = 0, $tobool$i2$i$i = 0, $tobool$i2$i$i31 = 0, $vararg_buffer = 0, $vfn$i = 0, $vfn$i$i = 0, $vfn$i$i$i$i = 0, $vfn$i$i$i$i20 = 0;
 var $vfn$i$i8$i$i = 0, $vfn$i$i8$i$i38 = 0, $vfn$i$i95 = 0, $vtable$i = 0, $vtable$i$i = 0, $vtable$i$i$i$i = 0, $vtable$i$i$i$i19 = 0, $vtable$i$i7$i$i = 0, $vtable$i$i7$i$i37 = 0, $vtable$i$i94 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 320|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $__atoms = sp + 200|0;
 $__grouping = sp + 188|0;
 $ref$tmp = sp + 8|0;
 $__buf = sp + 176|0;
 $__a_end = sp + 4|0;
 $__g = sp + 16|0;
 $__g_end = sp + 304|0;
 $__dc = sp + 308|0;
 ;HEAP32[$__grouping+0>>2]=0|0;HEAP32[$__grouping+4>>2]=0|0;HEAP32[$__grouping+8>>2]=0|0;
 __THREW__ = 0;
 invoke_vii(358,($ref$tmp|0),($__iob|0));
 $0 = __THREW__; __THREW__ = 0;
 $1 = $0&1;
 if ($1) {
  $37 = ___cxa_find_matching_catch()|0;
  $38 = tempRet0;
  $ehselector$slot$0 = $38;$exn$slot$0 = $37;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
  ___resumeException($exn$slot$0|0);
  // unreachable;
 }
 __THREW__ = 0;
 $call$i9 = (invoke_iii(359,($ref$tmp|0),(4608|0))|0);
 $2 = __THREW__; __THREW__ = 0;
 $3 = $2&1;
 if (!($3)) {
  $vtable$i = HEAP32[$call$i9>>2]|0;
  $vfn$i = (($vtable$i) + 48|0);
  $4 = HEAP32[$vfn$i>>2]|0;
  __THREW__ = 0;
  (invoke_iiiii($4|0,($call$i9|0),(3128|0),(((3128 + 26|0))|0),($__atoms|0))|0);
  $5 = __THREW__; __THREW__ = 0;
  $6 = $5&1;
  if (!($6)) {
   $7 = HEAP32[$ref$tmp>>2]|0;
   (__ZNSt3__114__shared_count16__release_sharedEv($7)|0);
   ;HEAP32[$__buf+0>>2]=0|0;HEAP32[$__buf+4>>2]=0|0;HEAP32[$__buf+8>>2]=0|0;
   __THREW__ = 0;
   invoke_viii(385,($__buf|0),10,0);
   $8 = __THREW__; __THREW__ = 0;
   $9 = $8&1;
   L8: do {
    if ($9) {
     label = 40;
    } else {
     $10 = HEAP8[$__buf>>0]|0;
     $and$i$i$i = $10 & 1;
     $tobool$i$i$i12 = ($and$i$i$i<<24>>24)==(0);
     if ($tobool$i$i$i12) {
      $arrayidx$i$i$i = (($__buf) + 1|0);
      $__data_$i$i$i104$pre = (($__buf) + 8|0);
      $__data_$i$i$i104$pre$phiZZZZ2D = $__data_$i$i$i104$pre;$arrayidx$i$i$i107$pre$phiZZZZ2D = $arrayidx$i$i$i;$cond$i$i = $arrayidx$i$i$i;
     } else {
      $__data_$i$i$i = (($__buf) + 8|0);
      $11 = HEAP32[$__data_$i$i$i>>2]|0;
      $arrayidx$i$i$i107$pre = (($__buf) + 1|0);
      $__data_$i$i$i104$pre$phiZZZZ2D = $__data_$i$i$i;$arrayidx$i$i$i107$pre$phiZZZZ2D = $arrayidx$i$i$i107$pre;$cond$i$i = $11;
     }
     HEAP32[$__a_end>>2] = $cond$i$i;
     HEAP32[$__g_end>>2] = $__g;
     HEAP32[$__dc>>2] = 0;
     $__size_$i2$i73 = (($__buf) + 4|0);
     $$pre = HEAP32[$__b>>2]|0;
     $$pre$i$i$i26 = $$pre;$__a$0 = $cond$i$i;
     L14: while(1) {
      $tobool$i$i$i14 = ($$pre$i$i$i26|0)==(0|0);
      if ($tobool$i$i$i14) {
       $46 = 0;$78 = 1;
      } else {
       $__ninp_$i$i$i$i15 = (($$pre$i$i$i26) + 12|0);
       $12 = HEAP32[$__ninp_$i$i$i$i15>>2]|0;
       $__einp_$i$i$i$i16 = (($$pre$i$i$i26) + 16|0);
       $13 = HEAP32[$__einp_$i$i$i$i16>>2]|0;
       $cmp$i$i$i$i17 = ($12|0)==($13|0);
       if ($cmp$i$i$i$i17) {
        $vtable$i$i$i$i19 = HEAP32[$$pre$i$i$i26>>2]|0;
        $vfn$i$i$i$i20 = (($vtable$i$i$i$i19) + 36|0);
        $14 = HEAP32[$vfn$i$i$i$i20>>2]|0;
        __THREW__ = 0;
        $call$i$i$i$i50 = (invoke_ii($14|0,($$pre$i$i$i26|0))|0);
        $15 = __THREW__; __THREW__ = 0;
        $16 = $15&1;
        if ($16) {
         label = 39;
         break;
        } else {
         $retval$0$i$i$i$i23 = $call$i$i$i$i50;
        }
       } else {
        $17 = HEAP32[$12>>2]|0;
        $retval$0$i$i$i$i23 = $17;
       }
       $cmp$i1$i$i$i24 = ($retval$0$i$i$i$i23|0)==(-1);
       if ($cmp$i1$i$i$i24) {
        HEAP32[$__b>>2] = 0;
        $46 = 0;$78 = 1;
       } else {
        $46 = $$pre$i$i$i26;$78 = 0;
       }
      }
      $18 = HEAP32[$__e>>2]|0;
      $tobool$i2$i$i31 = ($18|0)==(0|0);
      do {
       if ($tobool$i2$i$i31) {
        label = 21;
       } else {
        $__ninp_$i$i3$i$i33 = (($18) + 12|0);
        $19 = HEAP32[$__ninp_$i$i3$i$i33>>2]|0;
        $__einp_$i$i4$i$i34 = (($18) + 16|0);
        $20 = HEAP32[$__einp_$i$i4$i$i34>>2]|0;
        $cmp$i$i5$i$i35 = ($19|0)==($20|0);
        if ($cmp$i$i5$i$i35) {
         $vtable$i$i7$i$i37 = HEAP32[$18>>2]|0;
         $vfn$i$i8$i$i38 = (($vtable$i$i7$i$i37) + 36|0);
         $21 = HEAP32[$vfn$i$i8$i$i38>>2]|0;
         __THREW__ = 0;
         $call$i$i9$i$i52 = (invoke_ii($21|0,($18|0))|0);
         $22 = __THREW__; __THREW__ = 0;
         $23 = $22&1;
         if ($23) {
          label = 39;
          break L14;
         } else {
          $retval$0$i$i12$i$i41 = $call$i$i9$i$i52;
         }
        } else {
         $24 = HEAP32[$19>>2]|0;
         $retval$0$i$i12$i$i41 = $24;
        }
        $cmp$i1$i13$i$i42 = ($retval$0$i$i12$i$i41|0)==(-1);
        if ($cmp$i1$i13$i$i42) {
         HEAP32[$__e>>2] = 0;
         label = 21;
         break;
        } else {
         if ($78) {
          break;
         } else {
          $__a$2 = $__a$0;
          break L14;
         }
        }
       }
      } while(0);
      if ((label|0) == 21) {
       label = 0;
       if ($78) {
        $__a$2 = $__a$0;
        break;
       }
      }
      $25 = HEAP32[$__a_end>>2]|0;
      $sub$ptr$lhs$cast = $25;
      $sub$ptr$rhs$cast = $__a$0;
      $sub$ptr$sub = (($sub$ptr$lhs$cast) - ($sub$ptr$rhs$cast))|0;
      $26 = HEAP8[$__buf>>0]|0;
      $and$i$i54 = $26 & 1;
      $tobool$i$i55 = ($and$i$i54<<24>>24)==(0);
      if ($tobool$i$i55) {
       $conv$i$i = $26&255;
       $shr1$i$i = $conv$i$i >>> 1;
       $cond$i57 = $shr1$i$i;
      } else {
       $27 = HEAP32[$__size_$i2$i73>>2]|0;
       $cond$i57 = $27;
      }
      $cmp = ($sub$ptr$sub|0)==($cond$i57|0);
      if ($cmp) {
       if ($tobool$i$i55) {
        $conv$i$i63 = $26&255;
        $shr1$i$i64 = $conv$i$i63 >>> 1;
        $conv$i$i75 = $26&255;
        $shr1$i$i76 = $conv$i$i75 >>> 1;
        $cond$i66115 = $shr1$i$i64;$cond$i78 = $shr1$i$i76;
       } else {
        $28 = HEAP32[$__size_$i2$i73>>2]|0;
        $cond$i66115 = $28;$cond$i78 = $28;
       }
       $mul = $cond$i78 << 1;
       __THREW__ = 0;
       invoke_viii(385,($__buf|0),($mul|0),0);
       $29 = __THREW__; __THREW__ = 0;
       $30 = $29&1;
       if ($30) {
        label = 39;
        break;
       }
       $31 = HEAP8[$__buf>>0]|0;
       $and$i$i82 = $31 & 1;
       $tobool$i$i83 = ($and$i$i82<<24>>24)==(0);
       if ($tobool$i$i83) {
        $cond$i88 = 10;
       } else {
        $32 = HEAP32[$__buf>>2]|0;
        $and$i1$i85 = $32 & -2;
        $phitmp$i86 = (($and$i1$i85) + -1)|0;
        $cond$i88 = $phitmp$i86;
       }
       __THREW__ = 0;
       invoke_viii(385,($__buf|0),($cond$i88|0),0);
       $33 = __THREW__; __THREW__ = 0;
       $34 = $33&1;
       if ($34) {
        label = 39;
        break;
       }
       $35 = HEAP8[$__buf>>0]|0;
       $and$i$i$i102 = $35 & 1;
       $tobool$i$i$i103 = ($and$i$i$i102<<24>>24)==(0);
       if ($tobool$i$i$i103) {
        $cond$i$i109 = $arrayidx$i$i$i107$pre$phiZZZZ2D;
       } else {
        $36 = HEAP32[$__data_$i$i$i104$pre$phiZZZZ2D>>2]|0;
        $cond$i$i109 = $36;
       }
       $add$ptr = (($cond$i$i109) + ($cond$i66115)|0);
       HEAP32[$__a_end>>2] = $add$ptr;
       $__a$1 = $cond$i$i109;
      } else {
       $__a$1 = $__a$0;
      }
      $__ninp_$i$i91 = (($46) + 12|0);
      $47 = HEAP32[$__ninp_$i$i91>>2]|0;
      $__einp_$i$i92 = (($46) + 16|0);
      $48 = HEAP32[$__einp_$i$i92>>2]|0;
      $cmp$i$i93 = ($47|0)==($48|0);
      if ($cmp$i$i93) {
       $vtable$i$i94 = HEAP32[$46>>2]|0;
       $vfn$i$i95 = (($vtable$i$i94) + 36|0);
       $49 = HEAP32[$vfn$i$i95>>2]|0;
       __THREW__ = 0;
       $call$i$i99 = (invoke_ii($49|0,($46|0))|0);
       $50 = __THREW__; __THREW__ = 0;
       $51 = $50&1;
       if ($51) {
        label = 39;
        break;
       } else {
        $retval$0$i$i = $call$i$i99;
       }
      } else {
       $52 = HEAP32[$47>>2]|0;
       $retval$0$i$i = $52;
      }
      $call27 = (__ZNSt3__19__num_getIwE17__stage2_int_loopEwiPcRS2_RjwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_Pw($retval$0$i$i,16,$__a$1,$__a_end,$__dc,0,$__grouping,$__g,$__g_end,$__atoms)|0);
      $tobool = ($call27|0)==(0);
      if (!($tobool)) {
       $__a$2 = $__a$1;
       break;
      }
      $53 = HEAP32[$__ninp_$i$i91>>2]|0;
      $54 = HEAP32[$__einp_$i$i92>>2]|0;
      $cmp$i$i68 = ($53|0)==($54|0);
      if ($cmp$i$i68) {
       $vtable$i$i = HEAP32[$46>>2]|0;
       $vfn$i$i = (($vtable$i$i) + 40|0);
       $55 = HEAP32[$vfn$i$i>>2]|0;
       __THREW__ = 0;
       (invoke_ii($55|0,($46|0))|0);
       $56 = __THREW__; __THREW__ = 0;
       $57 = $56&1;
       if ($57) {
        label = 39;
        break;
       } else {
        $$pre$i$i$i26 = $46;$__a$0 = $__a$1;
        continue;
       }
      } else {
       $incdec$ptr$i$i = (($53) + 4|0);
       HEAP32[$__ninp_$i$i91>>2] = $incdec$ptr$i$i;
       $$pre$i$i$i26 = $46;$__a$0 = $__a$1;
       continue;
      }
     }
     if ((label|0) == 39) {
      $42 = ___cxa_find_matching_catch()|0;
      $43 = tempRet0;
      $lpad$phi$index = $42;$lpad$phi$index2 = $43;
      break;
     }
     $arrayidx = (($__a$2) + 3|0);
     HEAP8[$arrayidx>>0] = 0;
     __THREW__ = 0;
     $call33 = (invoke_i(395)|0);
     $58 = __THREW__; __THREW__ = 0;
     $59 = $58&1;
     if ($59) {
      label = 40;
     } else {
      __THREW__ = 0;
      HEAP32[$vararg_buffer>>2] = $__v;
      $call35 = (invoke_iiiii(396,($__a$2|0),($call33|0),(3168|0),($vararg_buffer|0))|0);
      $60 = __THREW__; __THREW__ = 0;
      $61 = $60&1;
      if ($61) {
       label = 40;
      } else {
       $cmp36 = ($call35|0)==(1);
       if (!($cmp36)) {
        HEAP32[$__err>>2] = 4;
       }
       $62 = HEAP32[$__b>>2]|0;
       $tobool$i$i$i = ($62|0)==(0|0);
       if ($tobool$i$i$i) {
        $77 = 0;$79 = 1;
       } else {
        $__ninp_$i$i$i$i = (($62) + 12|0);
        $63 = HEAP32[$__ninp_$i$i$i$i>>2]|0;
        $__einp_$i$i$i$i = (($62) + 16|0);
        $64 = HEAP32[$__einp_$i$i$i$i>>2]|0;
        $cmp$i$i$i$i = ($63|0)==($64|0);
        if ($cmp$i$i$i$i) {
         $vtable$i$i$i$i = HEAP32[$62>>2]|0;
         $vfn$i$i$i$i = (($vtable$i$i$i$i) + 36|0);
         $65 = HEAP32[$vfn$i$i$i$i>>2]|0;
         __THREW__ = 0;
         $call$i$i$i$i7 = (invoke_ii($65|0,($62|0))|0);
         $66 = __THREW__; __THREW__ = 0;
         $67 = $66&1;
         if ($67) {
          label = 40;
          break;
         } else {
          $retval$0$i$i$i$i = $call$i$i$i$i7;
         }
        } else {
         $68 = HEAP32[$63>>2]|0;
         $retval$0$i$i$i$i = $68;
        }
        $cmp$i1$i$i$i = ($retval$0$i$i$i$i|0)==(-1);
        if ($cmp$i1$i$i$i) {
         HEAP32[$__b>>2] = 0;
         $77 = 0;$79 = 1;
        } else {
         $77 = $62;$79 = 0;
        }
       }
       $69 = HEAP32[$__e>>2]|0;
       $tobool$i2$i$i = ($69|0)==(0|0);
       do {
        if ($tobool$i2$i$i) {
         label = 65;
        } else {
         $__ninp_$i$i3$i$i = (($69) + 12|0);
         $70 = HEAP32[$__ninp_$i$i3$i$i>>2]|0;
         $__einp_$i$i4$i$i = (($69) + 16|0);
         $71 = HEAP32[$__einp_$i$i4$i$i>>2]|0;
         $cmp$i$i5$i$i = ($70|0)==($71|0);
         if ($cmp$i$i5$i$i) {
          $vtable$i$i7$i$i = HEAP32[$69>>2]|0;
          $vfn$i$i8$i$i = (($vtable$i$i7$i$i) + 36|0);
          $72 = HEAP32[$vfn$i$i8$i$i>>2]|0;
          __THREW__ = 0;
          $call$i$i9$i$i8 = (invoke_ii($72|0,($69|0))|0);
          $73 = __THREW__; __THREW__ = 0;
          $74 = $73&1;
          if ($74) {
           label = 40;
           break L8;
          } else {
           $retval$0$i$i12$i$i = $call$i$i9$i$i8;
          }
         } else {
          $75 = HEAP32[$70>>2]|0;
          $retval$0$i$i12$i$i = $75;
         }
         $cmp$i1$i13$i$i = ($retval$0$i$i12$i$i|0)==(-1);
         if ($cmp$i1$i13$i$i) {
          HEAP32[$__e>>2] = 0;
          label = 65;
          break;
         }
         if ($79) {
          HEAP32[$agg$result>>2] = $77;
          __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
          __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
          STACKTOP = sp;return;
         }
        }
       } while(0);
       if ((label|0) == 65) {
        if (!($79)) {
         HEAP32[$agg$result>>2] = $77;
         __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
         __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
         STACKTOP = sp;return;
        }
       }
       $76 = HEAP32[$__err>>2]|0;
       $or = $76 | 2;
       HEAP32[$__err>>2] = $or;
       HEAP32[$agg$result>>2] = $77;
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
       STACKTOP = sp;return;
      }
     }
    }
   } while(0);
   if ((label|0) == 40) {
    $44 = ___cxa_find_matching_catch()|0;
    $45 = tempRet0;
    $lpad$phi$index = $44;$lpad$phi$index2 = $45;
   }
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
   $ehselector$slot$0 = $lpad$phi$index2;$exn$slot$0 = $lpad$phi$index;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
   ___resumeException($exn$slot$0|0);
   // unreachable;
  }
 }
 $39 = ___cxa_find_matching_catch()|0;
 $40 = tempRet0;
 $41 = HEAP32[$ref$tmp>>2]|0;
 (__ZNSt3__114__shared_count16__release_sharedEv($41)|0);
 $ehselector$slot$0 = $40;$exn$slot$0 = $39;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
 ___resumeException($exn$slot$0|0);
 // unreachable;
}
function __ZNSt3__19__num_getIwE17__stage2_int_loopEwiPcRS2_RjwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_Pw($__ct,$__base,$__a,$__a_end,$__dc,$__thousands_sep,$__grouping,$__g,$__g_end,$__atoms) {
 $__ct = $__ct|0;
 $__base = $__base|0;
 $__a = $__a|0;
 $__a_end = $__a_end|0;
 $__dc = $__dc|0;
 $__thousands_sep = $__thousands_sep|0;
 $__grouping = $__grouping|0;
 $__g = $__g|0;
 $__g_end = $__g_end|0;
 $__atoms = $__atoms|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__first$addr$0$lcssa$i = 0, $__first$addr$05$i = 0, $__size_$i2$i = 0, $add$ptr = 0, $and$i$i = 0, $arrayidx = 0, $arrayidx2 = 0, $arrayidx37 = 0;
 var $arrayidx40 = 0, $arrayidx43 = 0, $cmp = 0, $cmp$i = 0, $cmp1 = 0, $cmp1$i = 0, $cmp10 = 0, $cmp20 = 0, $cmp23 = 0, $cmp27 = 0, $cmp3 = 0, $cmp35 = 0, $cmp38 = 0, $cmp6 = 0, $cmp8 = 0, $cond = 0, $cond$i = 0, $conv$i$i = 0, $inc = 0, $incdec$ptr = 0;
 var $incdec$ptr$i = 0, $incdec$ptr12 = 0, $incdec$ptr41 = 0, $incdec$ptr44 = 0, $or$cond = 0, $retval$0 = 0, $shr1$i$i = 0, $sub$ptr$div19 = 0, $sub$ptr$lhs$cast = 0, $sub$ptr$lhs$cast16 = 0, $sub$ptr$lhs$cast32 = 0, $sub$ptr$rhs$cast = 0, $sub$ptr$rhs$cast17 = 0, $sub$ptr$rhs$cast33 = 0, $sub$ptr$sub = 0, $sub$ptr$sub18 = 0, $sub$ptr$sub34 = 0, $tobool$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$__a_end>>2]|0;
 $cmp = ($0|0)==($__a|0);
 do {
  if ($cmp) {
   $arrayidx = (($__atoms) + 96|0);
   $1 = HEAP32[$arrayidx>>2]|0;
   $cmp1 = ($1|0)==($__ct|0);
   if (!($cmp1)) {
    $arrayidx2 = (($__atoms) + 100|0);
    $2 = HEAP32[$arrayidx2>>2]|0;
    $cmp3 = ($2|0)==($__ct|0);
    if (!($cmp3)) {
     break;
    }
   }
   $cond = $cmp1 ? 43 : 45;
   $incdec$ptr = (($__a) + 1|0);
   HEAP32[$__a_end>>2] = $incdec$ptr;
   HEAP8[$__a>>0] = $cond;
   HEAP32[$__dc>>2] = 0;
   $retval$0 = 0;
   STACKTOP = sp;return ($retval$0|0);
  }
 } while(0);
 $3 = HEAP8[$__grouping>>0]|0;
 $and$i$i = $3 & 1;
 $tobool$i$i = ($and$i$i<<24>>24)==(0);
 if ($tobool$i$i) {
  $conv$i$i = $3&255;
  $shr1$i$i = $conv$i$i >>> 1;
  $cond$i = $shr1$i$i;
 } else {
  $__size_$i2$i = (($__grouping) + 4|0);
  $4 = HEAP32[$__size_$i2$i>>2]|0;
  $cond$i = $4;
 }
 $cmp6 = ($cond$i|0)!=(0);
 $cmp8 = ($__ct|0)==($__thousands_sep|0);
 $or$cond = $cmp6 & $cmp8;
 if ($or$cond) {
  $5 = HEAP32[$__g_end>>2]|0;
  $sub$ptr$lhs$cast = $5;
  $sub$ptr$rhs$cast = $__g;
  $sub$ptr$sub = (($sub$ptr$lhs$cast) - ($sub$ptr$rhs$cast))|0;
  $cmp10 = ($sub$ptr$sub|0)<(160);
  if (!($cmp10)) {
   $retval$0 = 0;
   STACKTOP = sp;return ($retval$0|0);
  }
  $6 = HEAP32[$__dc>>2]|0;
  $incdec$ptr12 = (($5) + 4|0);
  HEAP32[$__g_end>>2] = $incdec$ptr12;
  HEAP32[$5>>2] = $6;
  HEAP32[$__dc>>2] = 0;
  $retval$0 = 0;
  STACKTOP = sp;return ($retval$0|0);
 }
 $add$ptr = (($__atoms) + 104|0);
 $__first$addr$05$i = $__atoms;
 while(1) {
  $7 = HEAP32[$__first$addr$05$i>>2]|0;
  $cmp1$i = ($7|0)==($__ct|0);
  $incdec$ptr$i = (($__first$addr$05$i) + 4|0);
  if ($cmp1$i) {
   $__first$addr$0$lcssa$i = $__first$addr$05$i;
   break;
  }
  $cmp$i = ($incdec$ptr$i|0)==($add$ptr|0);
  if ($cmp$i) {
   $__first$addr$0$lcssa$i = $add$ptr;
   break;
  } else {
   $__first$addr$05$i = $incdec$ptr$i;
  }
 }
 $sub$ptr$lhs$cast16 = $__first$addr$0$lcssa$i;
 $sub$ptr$rhs$cast17 = $__atoms;
 $sub$ptr$sub18 = (($sub$ptr$lhs$cast16) - ($sub$ptr$rhs$cast17))|0;
 $sub$ptr$div19 = $sub$ptr$sub18 >> 2;
 $cmp20 = ($sub$ptr$sub18|0)>(92);
 if ($cmp20) {
  $retval$0 = -1;
  STACKTOP = sp;return ($retval$0|0);
 }
 if ((($__base|0) == 10) | (($__base|0) == 8)) {
  $cmp23 = ($sub$ptr$div19|0)<($__base|0);
  if (!($cmp23)) {
   $retval$0 = -1;
   STACKTOP = sp;return ($retval$0|0);
  }
 } else if ((($__base|0) == 16)) {
  $cmp27 = ($sub$ptr$sub18|0)<(88);
  if (!($cmp27)) {
   if ($cmp) {
    $retval$0 = -1;
    STACKTOP = sp;return ($retval$0|0);
   }
   $sub$ptr$lhs$cast32 = $0;
   $sub$ptr$rhs$cast33 = $__a;
   $sub$ptr$sub34 = (($sub$ptr$lhs$cast32) - ($sub$ptr$rhs$cast33))|0;
   $cmp35 = ($sub$ptr$sub34|0)<(3);
   if (!($cmp35)) {
    $retval$0 = -1;
    STACKTOP = sp;return ($retval$0|0);
   }
   $arrayidx37 = (($0) + -1|0);
   $8 = HEAP8[$arrayidx37>>0]|0;
   $cmp38 = ($8<<24>>24)==(48);
   if (!($cmp38)) {
    $retval$0 = -1;
    STACKTOP = sp;return ($retval$0|0);
   }
   HEAP32[$__dc>>2] = 0;
   $arrayidx40 = (3128 + ($sub$ptr$div19)|0);
   $9 = HEAP8[$arrayidx40>>0]|0;
   $incdec$ptr41 = (($0) + 1|0);
   HEAP32[$__a_end>>2] = $incdec$ptr41;
   HEAP8[$0>>0] = $9;
   $retval$0 = 0;
   STACKTOP = sp;return ($retval$0|0);
  }
 }
 $arrayidx43 = (3128 + ($sub$ptr$div19)|0);
 $10 = HEAP8[$arrayidx43>>0]|0;
 $incdec$ptr44 = (($0) + 1|0);
 HEAP32[$__a_end>>2] = $incdec$ptr44;
 HEAP8[$0>>0] = $10;
 $11 = HEAP32[$__dc>>2]|0;
 $inc = (($11) + 1)|0;
 HEAP32[$__dc>>2] = $inc;
 $retval$0 = 0;
 STACKTOP = sp;return ($retval$0|0);
}
function __ZNSt3__19__num_getIcE17__stage2_int_prepERNS_8ios_baseEPcRc($agg$result,$__iob,$__atoms,$__thousands_sep) {
 $agg$result = $agg$result|0;
 $__iob = $__iob|0;
 $__atoms = $__atoms|0;
 $__thousands_sep = $__thousands_sep|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__loc = 0, $call$i2 = 0, $call$i4 = 0;
 var $call$i7 = 0, $vfn$i = 0, $vfn$i6 = 0, $vfn$i9 = 0, $vtable$i = 0, $vtable$i5 = 0, $vtable$i8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__loc = sp;
 __ZNKSt3__18ios_base6getlocEv($__loc,$__iob);
 __THREW__ = 0;
 $call$i2 = (invoke_iii(359,($__loc|0),(4616|0))|0);
 $0 = __THREW__; __THREW__ = 0;
 $1 = $0&1;
 if (!($1)) {
  $vtable$i = HEAP32[$call$i2>>2]|0;
  $vfn$i = (($vtable$i) + 32|0);
  $2 = HEAP32[$vfn$i>>2]|0;
  __THREW__ = 0;
  (invoke_iiiii($2|0,($call$i2|0),(3128|0),(((3128 + 26|0))|0),($__atoms|0))|0);
  $3 = __THREW__; __THREW__ = 0;
  $4 = $3&1;
  if (!($4)) {
   __THREW__ = 0;
   $call$i4 = (invoke_iii(359,($__loc|0),(4760|0))|0);
   $5 = __THREW__; __THREW__ = 0;
   $6 = $5&1;
   if (!($6)) {
    $vtable$i5 = HEAP32[$call$i4>>2]|0;
    $vfn$i6 = (($vtable$i5) + 16|0);
    $7 = HEAP32[$vfn$i6>>2]|0;
    __THREW__ = 0;
    $call$i7 = (invoke_ii($7|0,($call$i4|0))|0);
    $8 = __THREW__; __THREW__ = 0;
    $9 = $8&1;
    if (!($9)) {
     HEAP8[$__thousands_sep>>0] = $call$i7;
     $vtable$i8 = HEAP32[$call$i4>>2]|0;
     $vfn$i9 = (($vtable$i8) + 20|0);
     $10 = HEAP32[$vfn$i9>>2]|0;
     __THREW__ = 0;
     invoke_vii($10|0,($agg$result|0),($call$i4|0));
     $11 = __THREW__; __THREW__ = 0;
     $12 = $11&1;
     if (!($12)) {
      $13 = HEAP32[$__loc>>2]|0;
      (__ZNSt3__114__shared_count16__release_sharedEv($13)|0);
      STACKTOP = sp;return;
     }
    }
   }
  }
 }
 $14 = ___cxa_find_matching_catch()|0;
 $15 = tempRet0;
 $16 = HEAP32[$__loc>>2]|0;
 (__ZNSt3__114__shared_count16__release_sharedEv($16)|0);
 ___resumeException($14|0);
 // unreachable;
}
function __ZNSt3__19__num_getIcE19__stage2_float_prepERNS_8ios_baseEPcRcS5_($agg$result,$__iob,$__atoms,$__decimal_point,$__thousands_sep) {
 $agg$result = $agg$result|0;
 $__iob = $__iob|0;
 $__atoms = $__atoms|0;
 $__decimal_point = $__decimal_point|0;
 $__thousands_sep = $__thousands_sep|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $__loc = 0, $call$i11 = 0, $call$i3 = 0, $call$i5 = 0, $call$i8 = 0, $vfn$i = 0, $vfn$i10 = 0, $vfn$i13 = 0, $vfn$i7 = 0, $vtable$i = 0, $vtable$i12 = 0, $vtable$i6 = 0, $vtable$i9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__loc = sp;
 __ZNKSt3__18ios_base6getlocEv($__loc,$__iob);
 __THREW__ = 0;
 $call$i3 = (invoke_iii(359,($__loc|0),(4616|0))|0);
 $0 = __THREW__; __THREW__ = 0;
 $1 = $0&1;
 if (!($1)) {
  $vtable$i = HEAP32[$call$i3>>2]|0;
  $vfn$i = (($vtable$i) + 32|0);
  $2 = HEAP32[$vfn$i>>2]|0;
  __THREW__ = 0;
  (invoke_iiiii($2|0,($call$i3|0),(3128|0),(((3128 + 32|0))|0),($__atoms|0))|0);
  $3 = __THREW__; __THREW__ = 0;
  $4 = $3&1;
  if (!($4)) {
   __THREW__ = 0;
   $call$i5 = (invoke_iii(359,($__loc|0),(4760|0))|0);
   $5 = __THREW__; __THREW__ = 0;
   $6 = $5&1;
   if (!($6)) {
    $vtable$i6 = HEAP32[$call$i5>>2]|0;
    $vfn$i7 = (($vtable$i6) + 12|0);
    $7 = HEAP32[$vfn$i7>>2]|0;
    __THREW__ = 0;
    $call$i8 = (invoke_ii($7|0,($call$i5|0))|0);
    $8 = __THREW__; __THREW__ = 0;
    $9 = $8&1;
    if (!($9)) {
     HEAP8[$__decimal_point>>0] = $call$i8;
     $vtable$i9 = HEAP32[$call$i5>>2]|0;
     $vfn$i10 = (($vtable$i9) + 16|0);
     $10 = HEAP32[$vfn$i10>>2]|0;
     __THREW__ = 0;
     $call$i11 = (invoke_ii($10|0,($call$i5|0))|0);
     $11 = __THREW__; __THREW__ = 0;
     $12 = $11&1;
     if (!($12)) {
      HEAP8[$__thousands_sep>>0] = $call$i11;
      $vtable$i12 = HEAP32[$call$i5>>2]|0;
      $vfn$i13 = (($vtable$i12) + 20|0);
      $13 = HEAP32[$vfn$i13>>2]|0;
      __THREW__ = 0;
      invoke_vii($13|0,($agg$result|0),($call$i5|0));
      $14 = __THREW__; __THREW__ = 0;
      $15 = $14&1;
      if (!($15)) {
       $16 = HEAP32[$__loc>>2]|0;
       (__ZNSt3__114__shared_count16__release_sharedEv($16)|0);
       STACKTOP = sp;return;
      }
     }
    }
   }
  }
 }
 $17 = ___cxa_find_matching_catch()|0;
 $18 = tempRet0;
 $19 = HEAP32[$__loc>>2]|0;
 (__ZNSt3__114__shared_count16__release_sharedEv($19)|0);
 ___resumeException($17|0);
 // unreachable;
}
function __ZNSt3__19__num_getIcE19__stage2_float_loopEcRbRcPcRS4_ccRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSE_RjS4_($__ct,$__in_units,$__exp,$__a,$__a_end,$__decimal_point,$__thousands_sep,$__grouping,$__g,$__g_end,$__dc,$__atoms) {
 $__ct = $__ct|0;
 $__in_units = $__in_units|0;
 $__exp = $__exp|0;
 $__a = $__a|0;
 $__a_end = $__a_end|0;
 $__decimal_point = $__decimal_point|0;
 $__thousands_sep = $__thousands_sep|0;
 $__grouping = $__grouping|0;
 $__g = $__g|0;
 $__g_end = $__g_end|0;
 $__dc = $__dc|0;
 $__atoms = $__atoms|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__first$addr$0$lcssa$i = 0, $__first$addr$05$i = 0, $__size_$i2$i = 0, $__size_$i2$i41 = 0, $__size_$i2$i51 = 0, $add$ptr = 0, $and = 0, $and$i$i = 0, $and$i$i39 = 0, $and$i$i49 = 0, $and45 = 0, $and58 = 0, $arrayidx = 0, $arrayidx42 = 0, $cmp = 0;
 var $cmp$i = 0, $cmp11 = 0, $cmp14 = 0, $cmp2$i = 0, $cmp23 = 0, $cmp3 = 0, $cmp32 = 0, $cmp4 = 0, $cmp40 = 0, $cmp46 = 0, $cmp60 = 0, $cmp67 = 0, $cmp73 = 0, $cmp81 = 0, $cond$i = 0, $cond$i46 = 0, $cond$i56 = 0, $conv$i$i = 0, $conv$i$i43 = 0, $conv$i$i53 = 0;
 var $conv3535 = 0, $conv4336 = 0, $conv4437 = 0, $conv59 = 0, $conv63 = 0, $inc = 0, $incdec$ptr = 0, $incdec$ptr$i = 0, $incdec$ptr25 = 0, $incdec$ptr48 = 0, $incdec$ptr6 = 0, $incdec$ptr75 = 0, $incdec$ptr80 = 0, $incdec$ptr8058 = 0, $or = 0, $retval$0 = 0, $shr1$i$i = 0, $shr1$i$i44 = 0, $shr1$i$i54 = 0, $sub$ptr$lhs$cast = 0;
 var $sub$ptr$lhs$cast19 = 0, $sub$ptr$lhs$cast29 = 0, $sub$ptr$lhs$cast69 = 0, $sub$ptr$rhs$cast = 0, $sub$ptr$rhs$cast20 = 0, $sub$ptr$rhs$cast30 = 0, $sub$ptr$rhs$cast70 = 0, $sub$ptr$sub = 0, $sub$ptr$sub21 = 0, $sub$ptr$sub31 = 0, $sub$ptr$sub71 = 0, $tobool = 0, $tobool$i$i = 0, $tobool$i$i40 = 0, $tobool$i$i50 = 0, $tobool16 = 0, $tobool64 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $cmp = ($__ct<<24>>24)==($__decimal_point<<24>>24);
 if ($cmp) {
  $0 = HEAP8[$__in_units>>0]|0;
  $tobool = ($0<<24>>24)==(0);
  if ($tobool) {
   $retval$0 = -1;
   STACKTOP = sp;return ($retval$0|0);
  }
  HEAP8[$__in_units>>0] = 0;
  $1 = HEAP32[$__a_end>>2]|0;
  $incdec$ptr = (($1) + 1|0);
  HEAP32[$__a_end>>2] = $incdec$ptr;
  HEAP8[$1>>0] = 46;
  $2 = HEAP8[$__grouping>>0]|0;
  $and$i$i = $2 & 1;
  $tobool$i$i = ($and$i$i<<24>>24)==(0);
  if ($tobool$i$i) {
   $conv$i$i = $2&255;
   $shr1$i$i = $conv$i$i >>> 1;
   $cond$i = $shr1$i$i;
  } else {
   $__size_$i2$i = (($__grouping) + 4|0);
   $3 = HEAP32[$__size_$i2$i>>2]|0;
   $cond$i = $3;
  }
  $cmp3 = ($cond$i|0)==(0);
  if ($cmp3) {
   $retval$0 = 0;
   STACKTOP = sp;return ($retval$0|0);
  }
  $4 = HEAP32[$__g_end>>2]|0;
  $sub$ptr$lhs$cast = $4;
  $sub$ptr$rhs$cast = $__g;
  $sub$ptr$sub = (($sub$ptr$lhs$cast) - ($sub$ptr$rhs$cast))|0;
  $cmp4 = ($sub$ptr$sub|0)<(160);
  if (!($cmp4)) {
   $retval$0 = 0;
   STACKTOP = sp;return ($retval$0|0);
  }
  $5 = HEAP32[$__dc>>2]|0;
  $incdec$ptr6 = (($4) + 4|0);
  HEAP32[$__g_end>>2] = $incdec$ptr6;
  HEAP32[$4>>2] = $5;
  $retval$0 = 0;
  STACKTOP = sp;return ($retval$0|0);
 }
 $cmp11 = ($__ct<<24>>24)==($__thousands_sep<<24>>24);
 if ($cmp11) {
  $6 = HEAP8[$__grouping>>0]|0;
  $and$i$i49 = $6 & 1;
  $tobool$i$i50 = ($and$i$i49<<24>>24)==(0);
  if ($tobool$i$i50) {
   $conv$i$i53 = $6&255;
   $shr1$i$i54 = $conv$i$i53 >>> 1;
   $cond$i56 = $shr1$i$i54;
  } else {
   $__size_$i2$i51 = (($__grouping) + 4|0);
   $7 = HEAP32[$__size_$i2$i51>>2]|0;
   $cond$i56 = $7;
  }
  $cmp14 = ($cond$i56|0)==(0);
  if (!($cmp14)) {
   $8 = HEAP8[$__in_units>>0]|0;
   $tobool16 = ($8<<24>>24)==(0);
   if ($tobool16) {
    $retval$0 = -1;
    STACKTOP = sp;return ($retval$0|0);
   }
   $9 = HEAP32[$__g_end>>2]|0;
   $sub$ptr$lhs$cast19 = $9;
   $sub$ptr$rhs$cast20 = $__g;
   $sub$ptr$sub21 = (($sub$ptr$lhs$cast19) - ($sub$ptr$rhs$cast20))|0;
   $cmp23 = ($sub$ptr$sub21|0)<(160);
   if (!($cmp23)) {
    $retval$0 = 0;
    STACKTOP = sp;return ($retval$0|0);
   }
   $10 = HEAP32[$__dc>>2]|0;
   $incdec$ptr25 = (($9) + 4|0);
   HEAP32[$__g_end>>2] = $incdec$ptr25;
   HEAP32[$9>>2] = $10;
   HEAP32[$__dc>>2] = 0;
   $retval$0 = 0;
   STACKTOP = sp;return ($retval$0|0);
  }
 }
 $add$ptr = (($__atoms) + 32|0);
 $__first$addr$05$i = $__atoms;
 while(1) {
  $11 = HEAP8[$__first$addr$05$i>>0]|0;
  $cmp2$i = ($11<<24>>24)==($__ct<<24>>24);
  $incdec$ptr$i = (($__first$addr$05$i) + 1|0);
  if ($cmp2$i) {
   $__first$addr$0$lcssa$i = $__first$addr$05$i;
   break;
  }
  $cmp$i = ($incdec$ptr$i|0)==($add$ptr|0);
  if ($cmp$i) {
   $__first$addr$0$lcssa$i = $add$ptr;
   break;
  } else {
   $__first$addr$05$i = $incdec$ptr$i;
  }
 }
 $sub$ptr$lhs$cast29 = $__first$addr$0$lcssa$i;
 $sub$ptr$rhs$cast30 = $__atoms;
 $sub$ptr$sub31 = (($sub$ptr$lhs$cast29) - ($sub$ptr$rhs$cast30))|0;
 $cmp32 = ($sub$ptr$sub31|0)>(31);
 if ($cmp32) {
  $retval$0 = -1;
  STACKTOP = sp;return ($retval$0|0);
 }
 $arrayidx = (3128 + ($sub$ptr$sub31)|0);
 $12 = HEAP8[$arrayidx>>0]|0;
 if ((($sub$ptr$sub31|0) == 24) | (($sub$ptr$sub31|0) == 25)) {
  $13 = HEAP32[$__a_end>>2]|0;
  $cmp40 = ($13|0)==($__a|0);
  if (!($cmp40)) {
   $arrayidx42 = (($13) + -1|0);
   $14 = HEAP8[$arrayidx42>>0]|0;
   $conv4336 = $14&255;
   $and = $conv4336 & 95;
   $15 = HEAP8[$__exp>>0]|0;
   $conv4437 = $15&255;
   $and45 = $conv4437 & 127;
   $cmp46 = ($and|0)==($and45|0);
   if (!($cmp46)) {
    $retval$0 = -1;
    STACKTOP = sp;return ($retval$0|0);
   }
  }
  $incdec$ptr48 = (($13) + 1|0);
  HEAP32[$__a_end>>2] = $incdec$ptr48;
  HEAP8[$13>>0] = $12;
  $retval$0 = 0;
  STACKTOP = sp;return ($retval$0|0);
 } else if ((($sub$ptr$sub31|0) == 23) | (($sub$ptr$sub31|0) == 22)) {
  HEAP8[$__exp>>0] = 80;
  $16 = HEAP32[$__a_end>>2]|0;
  $incdec$ptr8058 = (($16) + 1|0);
  HEAP32[$__a_end>>2] = $incdec$ptr8058;
  HEAP8[$16>>0] = $12;
  $retval$0 = 0;
  STACKTOP = sp;return ($retval$0|0);
 } else {
  $conv3535 = $12&255;
  $and58 = $conv3535 & 95;
  $17 = HEAP8[$__exp>>0]|0;
  $conv59 = $17 << 24 >> 24;
  $cmp60 = ($and58|0)==($conv59|0);
  if ($cmp60) {
   $or = $and58 | 128;
   $conv63 = $or&255;
   HEAP8[$__exp>>0] = $conv63;
   $18 = HEAP8[$__in_units>>0]|0;
   $tobool64 = ($18<<24>>24)==(0);
   if (!($tobool64)) {
    HEAP8[$__in_units>>0] = 0;
    $19 = HEAP8[$__grouping>>0]|0;
    $and$i$i39 = $19 & 1;
    $tobool$i$i40 = ($and$i$i39<<24>>24)==(0);
    if ($tobool$i$i40) {
     $conv$i$i43 = $19&255;
     $shr1$i$i44 = $conv$i$i43 >>> 1;
     $cond$i46 = $shr1$i$i44;
    } else {
     $__size_$i2$i41 = (($__grouping) + 4|0);
     $20 = HEAP32[$__size_$i2$i41>>2]|0;
     $cond$i46 = $20;
    }
    $cmp67 = ($cond$i46|0)==(0);
    if (!($cmp67)) {
     $21 = HEAP32[$__g_end>>2]|0;
     $sub$ptr$lhs$cast69 = $21;
     $sub$ptr$rhs$cast70 = $__g;
     $sub$ptr$sub71 = (($sub$ptr$lhs$cast69) - ($sub$ptr$rhs$cast70))|0;
     $cmp73 = ($sub$ptr$sub71|0)<(160);
     if ($cmp73) {
      $22 = HEAP32[$__dc>>2]|0;
      $incdec$ptr75 = (($21) + 4|0);
      HEAP32[$__g_end>>2] = $incdec$ptr75;
      HEAP32[$21>>2] = $22;
     }
    }
   }
  }
  $23 = HEAP32[$__a_end>>2]|0;
  $incdec$ptr80 = (($23) + 1|0);
  HEAP32[$__a_end>>2] = $incdec$ptr80;
  HEAP8[$23>>0] = $12;
  $cmp81 = ($sub$ptr$sub31|0)>(21);
  if ($cmp81) {
   $retval$0 = 0;
   STACKTOP = sp;return ($retval$0|0);
  }
  $24 = HEAP32[$__dc>>2]|0;
  $inc = (($24) + 1)|0;
  HEAP32[$__dc>>2] = $inc;
  $retval$0 = 0;
  STACKTOP = sp;return ($retval$0|0);
 }
 return 0|0;
}
function __ZNSt3__19__num_getIwE17__stage2_int_prepERNS_8ios_baseEPwRw($agg$result,$__iob,$__atoms,$__thousands_sep) {
 $agg$result = $agg$result|0;
 $__iob = $__iob|0;
 $__atoms = $__atoms|0;
 $__thousands_sep = $__thousands_sep|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__loc = 0, $call$i2 = 0, $call$i4 = 0;
 var $call$i7 = 0, $vfn$i = 0, $vfn$i6 = 0, $vfn$i9 = 0, $vtable$i = 0, $vtable$i5 = 0, $vtable$i8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__loc = sp;
 __ZNKSt3__18ios_base6getlocEv($__loc,$__iob);
 __THREW__ = 0;
 $call$i2 = (invoke_iii(359,($__loc|0),(4608|0))|0);
 $0 = __THREW__; __THREW__ = 0;
 $1 = $0&1;
 if (!($1)) {
  $vtable$i = HEAP32[$call$i2>>2]|0;
  $vfn$i = (($vtable$i) + 48|0);
  $2 = HEAP32[$vfn$i>>2]|0;
  __THREW__ = 0;
  (invoke_iiiii($2|0,($call$i2|0),(3128|0),(((3128 + 26|0))|0),($__atoms|0))|0);
  $3 = __THREW__; __THREW__ = 0;
  $4 = $3&1;
  if (!($4)) {
   __THREW__ = 0;
   $call$i4 = (invoke_iii(359,($__loc|0),(4768|0))|0);
   $5 = __THREW__; __THREW__ = 0;
   $6 = $5&1;
   if (!($6)) {
    $vtable$i5 = HEAP32[$call$i4>>2]|0;
    $vfn$i6 = (($vtable$i5) + 16|0);
    $7 = HEAP32[$vfn$i6>>2]|0;
    __THREW__ = 0;
    $call$i7 = (invoke_ii($7|0,($call$i4|0))|0);
    $8 = __THREW__; __THREW__ = 0;
    $9 = $8&1;
    if (!($9)) {
     HEAP32[$__thousands_sep>>2] = $call$i7;
     $vtable$i8 = HEAP32[$call$i4>>2]|0;
     $vfn$i9 = (($vtable$i8) + 20|0);
     $10 = HEAP32[$vfn$i9>>2]|0;
     __THREW__ = 0;
     invoke_vii($10|0,($agg$result|0),($call$i4|0));
     $11 = __THREW__; __THREW__ = 0;
     $12 = $11&1;
     if (!($12)) {
      $13 = HEAP32[$__loc>>2]|0;
      (__ZNSt3__114__shared_count16__release_sharedEv($13)|0);
      STACKTOP = sp;return;
     }
    }
   }
  }
 }
 $14 = ___cxa_find_matching_catch()|0;
 $15 = tempRet0;
 $16 = HEAP32[$__loc>>2]|0;
 (__ZNSt3__114__shared_count16__release_sharedEv($16)|0);
 ___resumeException($14|0);
 // unreachable;
}
function __ZNSt3__19__num_getIwE19__stage2_float_prepERNS_8ios_baseEPwRwS5_($agg$result,$__iob,$__atoms,$__decimal_point,$__thousands_sep) {
 $agg$result = $agg$result|0;
 $__iob = $__iob|0;
 $__atoms = $__atoms|0;
 $__decimal_point = $__decimal_point|0;
 $__thousands_sep = $__thousands_sep|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $__loc = 0, $call$i11 = 0, $call$i3 = 0, $call$i5 = 0, $call$i8 = 0, $vfn$i = 0, $vfn$i10 = 0, $vfn$i13 = 0, $vfn$i7 = 0, $vtable$i = 0, $vtable$i12 = 0, $vtable$i6 = 0, $vtable$i9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__loc = sp;
 __ZNKSt3__18ios_base6getlocEv($__loc,$__iob);
 __THREW__ = 0;
 $call$i3 = (invoke_iii(359,($__loc|0),(4608|0))|0);
 $0 = __THREW__; __THREW__ = 0;
 $1 = $0&1;
 if (!($1)) {
  $vtable$i = HEAP32[$call$i3>>2]|0;
  $vfn$i = (($vtable$i) + 48|0);
  $2 = HEAP32[$vfn$i>>2]|0;
  __THREW__ = 0;
  (invoke_iiiii($2|0,($call$i3|0),(3128|0),(((3128 + 32|0))|0),($__atoms|0))|0);
  $3 = __THREW__; __THREW__ = 0;
  $4 = $3&1;
  if (!($4)) {
   __THREW__ = 0;
   $call$i5 = (invoke_iii(359,($__loc|0),(4768|0))|0);
   $5 = __THREW__; __THREW__ = 0;
   $6 = $5&1;
   if (!($6)) {
    $vtable$i6 = HEAP32[$call$i5>>2]|0;
    $vfn$i7 = (($vtable$i6) + 12|0);
    $7 = HEAP32[$vfn$i7>>2]|0;
    __THREW__ = 0;
    $call$i8 = (invoke_ii($7|0,($call$i5|0))|0);
    $8 = __THREW__; __THREW__ = 0;
    $9 = $8&1;
    if (!($9)) {
     HEAP32[$__decimal_point>>2] = $call$i8;
     $vtable$i9 = HEAP32[$call$i5>>2]|0;
     $vfn$i10 = (($vtable$i9) + 16|0);
     $10 = HEAP32[$vfn$i10>>2]|0;
     __THREW__ = 0;
     $call$i11 = (invoke_ii($10|0,($call$i5|0))|0);
     $11 = __THREW__; __THREW__ = 0;
     $12 = $11&1;
     if (!($12)) {
      HEAP32[$__thousands_sep>>2] = $call$i11;
      $vtable$i12 = HEAP32[$call$i5>>2]|0;
      $vfn$i13 = (($vtable$i12) + 20|0);
      $13 = HEAP32[$vfn$i13>>2]|0;
      __THREW__ = 0;
      invoke_vii($13|0,($agg$result|0),($call$i5|0));
      $14 = __THREW__; __THREW__ = 0;
      $15 = $14&1;
      if (!($15)) {
       $16 = HEAP32[$__loc>>2]|0;
       (__ZNSt3__114__shared_count16__release_sharedEv($16)|0);
       STACKTOP = sp;return;
      }
     }
    }
   }
  }
 }
 $17 = ___cxa_find_matching_catch()|0;
 $18 = tempRet0;
 $19 = HEAP32[$__loc>>2]|0;
 (__ZNSt3__114__shared_count16__release_sharedEv($19)|0);
 ___resumeException($17|0);
 // unreachable;
}
function __ZNSt3__19__num_getIwE19__stage2_float_loopEwRbRcPcRS4_wwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSE_RjPw($__ct,$__in_units,$__exp,$__a,$__a_end,$__decimal_point,$__thousands_sep,$__grouping,$__g,$__g_end,$__dc,$__atoms) {
 $__ct = $__ct|0;
 $__in_units = $__in_units|0;
 $__exp = $__exp|0;
 $__a = $__a|0;
 $__a_end = $__a_end|0;
 $__decimal_point = $__decimal_point|0;
 $__thousands_sep = $__thousands_sep|0;
 $__grouping = $__grouping|0;
 $__g = $__g|0;
 $__g_end = $__g_end|0;
 $__dc = $__dc|0;
 $__atoms = $__atoms|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__first$addr$0$lcssa$i = 0, $__first$addr$05$i = 0, $__size_$i2$i = 0, $__size_$i2$i41 = 0, $__size_$i2$i51 = 0, $add$ptr = 0, $and = 0, $and$i$i = 0, $and$i$i39 = 0, $and$i$i49 = 0, $and42 = 0, $and55 = 0, $arrayidx = 0, $arrayidx39 = 0, $cmp = 0, $cmp$i = 0;
 var $cmp1$i = 0, $cmp11 = 0, $cmp2 = 0, $cmp20 = 0, $cmp3 = 0, $cmp30 = 0, $cmp37 = 0, $cmp43 = 0, $cmp57 = 0, $cmp64 = 0, $cmp70 = 0, $cmp78 = 0, $cmp8 = 0, $cond$i = 0, $cond$i46 = 0, $cond$i56 = 0, $conv$i$i = 0, $conv$i$i43 = 0, $conv$i$i53 = 0, $conv35 = 0;
 var $conv4036 = 0, $conv4137 = 0, $conv56 = 0, $conv60 = 0, $inc = 0, $incdec$ptr = 0, $incdec$ptr$i = 0, $incdec$ptr22 = 0, $incdec$ptr45 = 0, $incdec$ptr5 = 0, $incdec$ptr72 = 0, $incdec$ptr77 = 0, $or = 0, $retval$0 = 0, $shr1$i$i = 0, $shr1$i$i44 = 0, $shr1$i$i54 = 0, $sub$ptr$div29 = 0, $sub$ptr$lhs$cast = 0, $sub$ptr$lhs$cast16 = 0;
 var $sub$ptr$lhs$cast26 = 0, $sub$ptr$lhs$cast66 = 0, $sub$ptr$rhs$cast = 0, $sub$ptr$rhs$cast17 = 0, $sub$ptr$rhs$cast27 = 0, $sub$ptr$rhs$cast67 = 0, $sub$ptr$sub = 0, $sub$ptr$sub18 = 0, $sub$ptr$sub28 = 0, $sub$ptr$sub68 = 0, $tobool = 0, $tobool$i$i = 0, $tobool$i$i40 = 0, $tobool$i$i50 = 0, $tobool13 = 0, $tobool61 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $cmp = ($__ct|0)==($__decimal_point|0);
 if ($cmp) {
  $0 = HEAP8[$__in_units>>0]|0;
  $tobool = ($0<<24>>24)==(0);
  if ($tobool) {
   $retval$0 = -1;
   STACKTOP = sp;return ($retval$0|0);
  }
  HEAP8[$__in_units>>0] = 0;
  $1 = HEAP32[$__a_end>>2]|0;
  $incdec$ptr = (($1) + 1|0);
  HEAP32[$__a_end>>2] = $incdec$ptr;
  HEAP8[$1>>0] = 46;
  $2 = HEAP8[$__grouping>>0]|0;
  $and$i$i = $2 & 1;
  $tobool$i$i = ($and$i$i<<24>>24)==(0);
  if ($tobool$i$i) {
   $conv$i$i = $2&255;
   $shr1$i$i = $conv$i$i >>> 1;
   $cond$i = $shr1$i$i;
  } else {
   $__size_$i2$i = (($__grouping) + 4|0);
   $3 = HEAP32[$__size_$i2$i>>2]|0;
   $cond$i = $3;
  }
  $cmp2 = ($cond$i|0)==(0);
  if ($cmp2) {
   $retval$0 = 0;
   STACKTOP = sp;return ($retval$0|0);
  }
  $4 = HEAP32[$__g_end>>2]|0;
  $sub$ptr$lhs$cast = $4;
  $sub$ptr$rhs$cast = $__g;
  $sub$ptr$sub = (($sub$ptr$lhs$cast) - ($sub$ptr$rhs$cast))|0;
  $cmp3 = ($sub$ptr$sub|0)<(160);
  if (!($cmp3)) {
   $retval$0 = 0;
   STACKTOP = sp;return ($retval$0|0);
  }
  $5 = HEAP32[$__dc>>2]|0;
  $incdec$ptr5 = (($4) + 4|0);
  HEAP32[$__g_end>>2] = $incdec$ptr5;
  HEAP32[$4>>2] = $5;
  $retval$0 = 0;
  STACKTOP = sp;return ($retval$0|0);
 }
 $cmp8 = ($__ct|0)==($__thousands_sep|0);
 if ($cmp8) {
  $6 = HEAP8[$__grouping>>0]|0;
  $and$i$i49 = $6 & 1;
  $tobool$i$i50 = ($and$i$i49<<24>>24)==(0);
  if ($tobool$i$i50) {
   $conv$i$i53 = $6&255;
   $shr1$i$i54 = $conv$i$i53 >>> 1;
   $cond$i56 = $shr1$i$i54;
  } else {
   $__size_$i2$i51 = (($__grouping) + 4|0);
   $7 = HEAP32[$__size_$i2$i51>>2]|0;
   $cond$i56 = $7;
  }
  $cmp11 = ($cond$i56|0)==(0);
  if (!($cmp11)) {
   $8 = HEAP8[$__in_units>>0]|0;
   $tobool13 = ($8<<24>>24)==(0);
   if ($tobool13) {
    $retval$0 = -1;
    STACKTOP = sp;return ($retval$0|0);
   }
   $9 = HEAP32[$__g_end>>2]|0;
   $sub$ptr$lhs$cast16 = $9;
   $sub$ptr$rhs$cast17 = $__g;
   $sub$ptr$sub18 = (($sub$ptr$lhs$cast16) - ($sub$ptr$rhs$cast17))|0;
   $cmp20 = ($sub$ptr$sub18|0)<(160);
   if (!($cmp20)) {
    $retval$0 = 0;
    STACKTOP = sp;return ($retval$0|0);
   }
   $10 = HEAP32[$__dc>>2]|0;
   $incdec$ptr22 = (($9) + 4|0);
   HEAP32[$__g_end>>2] = $incdec$ptr22;
   HEAP32[$9>>2] = $10;
   HEAP32[$__dc>>2] = 0;
   $retval$0 = 0;
   STACKTOP = sp;return ($retval$0|0);
  }
 }
 $add$ptr = (($__atoms) + 128|0);
 $__first$addr$05$i = $__atoms;
 while(1) {
  $11 = HEAP32[$__first$addr$05$i>>2]|0;
  $cmp1$i = ($11|0)==($__ct|0);
  $incdec$ptr$i = (($__first$addr$05$i) + 4|0);
  if ($cmp1$i) {
   $__first$addr$0$lcssa$i = $__first$addr$05$i;
   break;
  }
  $cmp$i = ($incdec$ptr$i|0)==($add$ptr|0);
  if ($cmp$i) {
   $__first$addr$0$lcssa$i = $add$ptr;
   break;
  } else {
   $__first$addr$05$i = $incdec$ptr$i;
  }
 }
 $sub$ptr$lhs$cast26 = $__first$addr$0$lcssa$i;
 $sub$ptr$rhs$cast27 = $__atoms;
 $sub$ptr$sub28 = (($sub$ptr$lhs$cast26) - ($sub$ptr$rhs$cast27))|0;
 $sub$ptr$div29 = $sub$ptr$sub28 >> 2;
 $cmp30 = ($sub$ptr$sub28|0)>(124);
 if ($cmp30) {
  $retval$0 = -1;
  STACKTOP = sp;return ($retval$0|0);
 }
 $arrayidx = (3128 + ($sub$ptr$div29)|0);
 $12 = HEAP8[$arrayidx>>0]|0;
 if ((($sub$ptr$div29|0) == 23) | (($sub$ptr$div29|0) == 22)) {
  HEAP8[$__exp>>0] = 80;
 } else if ((($sub$ptr$div29|0) == 24) | (($sub$ptr$div29|0) == 25)) {
  $13 = HEAP32[$__a_end>>2]|0;
  $cmp37 = ($13|0)==($__a|0);
  if (!($cmp37)) {
   $arrayidx39 = (($13) + -1|0);
   $14 = HEAP8[$arrayidx39>>0]|0;
   $conv4036 = $14&255;
   $and = $conv4036 & 95;
   $15 = HEAP8[$__exp>>0]|0;
   $conv4137 = $15&255;
   $and42 = $conv4137 & 127;
   $cmp43 = ($and|0)==($and42|0);
   if (!($cmp43)) {
    $retval$0 = -1;
    STACKTOP = sp;return ($retval$0|0);
   }
  }
  $incdec$ptr45 = (($13) + 1|0);
  HEAP32[$__a_end>>2] = $incdec$ptr45;
  HEAP8[$13>>0] = $12;
  $retval$0 = 0;
  STACKTOP = sp;return ($retval$0|0);
 } else {
  $conv35 = $12&255;
  $and55 = $conv35 & 95;
  $16 = HEAP8[$__exp>>0]|0;
  $conv56 = $16 << 24 >> 24;
  $cmp57 = ($and55|0)==($conv56|0);
  if ($cmp57) {
   $or = $and55 | 128;
   $conv60 = $or&255;
   HEAP8[$__exp>>0] = $conv60;
   $17 = HEAP8[$__in_units>>0]|0;
   $tobool61 = ($17<<24>>24)==(0);
   if (!($tobool61)) {
    HEAP8[$__in_units>>0] = 0;
    $18 = HEAP8[$__grouping>>0]|0;
    $and$i$i39 = $18 & 1;
    $tobool$i$i40 = ($and$i$i39<<24>>24)==(0);
    if ($tobool$i$i40) {
     $conv$i$i43 = $18&255;
     $shr1$i$i44 = $conv$i$i43 >>> 1;
     $cond$i46 = $shr1$i$i44;
    } else {
     $__size_$i2$i41 = (($__grouping) + 4|0);
     $19 = HEAP32[$__size_$i2$i41>>2]|0;
     $cond$i46 = $19;
    }
    $cmp64 = ($cond$i46|0)==(0);
    if (!($cmp64)) {
     $20 = HEAP32[$__g_end>>2]|0;
     $sub$ptr$lhs$cast66 = $20;
     $sub$ptr$rhs$cast67 = $__g;
     $sub$ptr$sub68 = (($sub$ptr$lhs$cast66) - ($sub$ptr$rhs$cast67))|0;
     $cmp70 = ($sub$ptr$sub68|0)<(160);
     if ($cmp70) {
      $21 = HEAP32[$__dc>>2]|0;
      $incdec$ptr72 = (($20) + 4|0);
      HEAP32[$__g_end>>2] = $incdec$ptr72;
      HEAP32[$20>>2] = $21;
     }
    }
   }
  }
 }
 $22 = HEAP32[$__a_end>>2]|0;
 $incdec$ptr77 = (($22) + 1|0);
 HEAP32[$__a_end>>2] = $incdec$ptr77;
 HEAP8[$22>>0] = $12;
 $cmp78 = ($sub$ptr$sub28|0)>(84);
 if ($cmp78) {
  $retval$0 = 0;
  STACKTOP = sp;return ($retval$0|0);
 }
 $23 = HEAP32[$__dc>>2]|0;
 $inc = (($23) + 1)|0;
 HEAP32[$__dc>>2] = $inc;
 $retval$0 = 0;
 STACKTOP = sp;return ($retval$0|0);
}
function __ZNSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 STACKTOP = sp;return;
}
function __ZNSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED1Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return;
}
function __ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcb($agg$result,$this,$__s,$__iob,$__fl,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__s = $__s|0;
 $__iob = $__iob|0;
 $__fl = $__fl|0;
 $__v = $__v|0;
 var $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__data_$i$i$i = 0, $__data_$i$i$i14$pre = 0, $__data_$i$i$i14$pre$phiZZZZ2D = 0, $__eout_$i$i = 0, $__fmtflags_$i = 0, $__i$sroa$0$0$load2223 = 0, $__i$sroa$0$0$load2223$ph = 0, $__nm = 0, $__nout_$i$i = 0, $__size_$i2$i$i = 0, $add$ptr$i = 0, $agg$tmp = 0, $agg$tmp$byval_copy = 0;
 var $and = 0, $and$i$i$i = 0, $and$i$i$i12 = 0, $arrayidx$i$i$i = 0, $arrayidx$i$i$i16$pre = 0, $arrayidx$i$i$i16$pre$phiZZZZ2D = 0, $call$i45 = 0, $call2$i$i10 = 0, $cmp = 0, $cmp$i$i = 0, $cmp$i1$i = 0, $cond$i6$i = 0, $cond$i7$i = 0, $conv = 0, $conv$i$i$i = 0, $conv$i$i$i17 = 0, $ehselector$slot$0 = 0, $exn$slot$0 = 0, $incdec$ptr$i = 0, $incdec$ptr$i$i = 0;
 var $lnot$i = 0, $ref$tmp = 0, $shr1$i$i$i = 0, $tobool$i = 0, $tobool$i$i$i = 0, $tobool$i$i$i13 = 0, $vfn = 0, $vfn$i = 0, $vfn$i$i = 0, $vfn$i9 = 0, $vtable = 0, $vtable$i = 0, $vtable$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $agg$tmp$byval_copy = sp + 20|0;
 $agg$tmp = sp + 16|0;
 $ref$tmp = sp + 12|0;
 $__nm = sp;
 $__fmtflags_$i = (($__iob) + 4|0);
 $0 = HEAP32[$__fmtflags_$i>>2]|0;
 $and = $0 & 1;
 $cmp = ($and|0)==(0);
 if ($cmp) {
  $vtable = HEAP32[$this>>2]|0;
  $vfn = (($vtable) + 24|0);
  $1 = HEAP32[$vfn>>2]|0;
  $2 = HEAP32[$__s>>2]|0;
  HEAP32[$agg$tmp>>2] = $2;
  $conv = $__v&1;
  ;HEAP32[$agg$tmp$byval_copy+0>>2]=HEAP32[$agg$tmp+0>>2]|0;
  FUNCTION_TABLE_viiiiii[$1 & 511]($agg$result,$this,$agg$tmp$byval_copy,$__iob,$__fl,$conv);
  STACKTOP = sp;return;
 }
 __ZNKSt3__18ios_base6getlocEv($ref$tmp,$__iob);
 __THREW__ = 0;
 $call$i45 = (invoke_iii(359,($ref$tmp|0),(4760|0))|0);
 $3 = __THREW__; __THREW__ = 0;
 $4 = $3&1;
 if ($4) {
  $20 = ___cxa_find_matching_catch()|0;
  $21 = tempRet0;
  $22 = HEAP32[$ref$tmp>>2]|0;
  (__ZNSt3__114__shared_count16__release_sharedEv($22)|0);
  $ehselector$slot$0 = $21;$exn$slot$0 = $20;
  ___resumeException($exn$slot$0|0);
  // unreachable;
 }
 $5 = HEAP32[$ref$tmp>>2]|0;
 (__ZNSt3__114__shared_count16__release_sharedEv($5)|0);
 $vtable$i = HEAP32[$call$i45>>2]|0;
 if ($__v) {
  $vfn$i = (($vtable$i) + 24|0);
  $6 = HEAP32[$vfn$i>>2]|0;
  FUNCTION_TABLE_vii[$6 & 511]($__nm,$call$i45);
 } else {
  $vfn$i9 = (($vtable$i) + 28|0);
  $7 = HEAP32[$vfn$i9>>2]|0;
  FUNCTION_TABLE_vii[$7 & 511]($__nm,$call$i45);
 }
 $8 = HEAP8[$__nm>>0]|0;
 $and$i$i$i = $8 & 1;
 $tobool$i$i$i = ($and$i$i$i<<24>>24)==(0);
 if ($tobool$i$i$i) {
  $arrayidx$i$i$i = (($__nm) + 1|0);
  $__data_$i$i$i14$pre = (($__nm) + 8|0);
  $__data_$i$i$i14$pre$phiZZZZ2D = $__data_$i$i$i14$pre;$__i$sroa$0$0$load2223$ph = $arrayidx$i$i$i;$arrayidx$i$i$i16$pre$phiZZZZ2D = $arrayidx$i$i$i;
 } else {
  $__data_$i$i$i = (($__nm) + 8|0);
  $9 = HEAP32[$__data_$i$i$i>>2]|0;
  $arrayidx$i$i$i16$pre = (($__nm) + 1|0);
  $__data_$i$i$i14$pre$phiZZZZ2D = $__data_$i$i$i;$__i$sroa$0$0$load2223$ph = $9;$arrayidx$i$i$i16$pre$phiZZZZ2D = $arrayidx$i$i$i16$pre;
 }
 $__size_$i2$i$i = (($__nm) + 4|0);
 $10 = $8;$__i$sroa$0$0$load2223 = $__i$sroa$0$0$load2223$ph;
 L17: while(1) {
  $and$i$i$i12 = $10 & 1;
  $tobool$i$i$i13 = ($and$i$i$i12<<24>>24)==(0);
  if ($tobool$i$i$i13) {
   $conv$i$i$i17 = $10&255;
   $shr1$i$i$i = $conv$i$i$i17 >>> 1;
   $cond$i6$i = $shr1$i$i$i;$cond$i7$i = $arrayidx$i$i$i16$pre$phiZZZZ2D;
  } else {
   $11 = HEAP32[$__data_$i$i$i14$pre$phiZZZZ2D>>2]|0;
   $12 = HEAP32[$__size_$i2$i$i>>2]|0;
   $cond$i6$i = $12;$cond$i7$i = $11;
  }
  $add$ptr$i = (($cond$i7$i) + ($cond$i6$i)|0);
  $lnot$i = ($__i$sroa$0$0$load2223|0)==($add$ptr$i|0);
  if ($lnot$i) {
   label = 24;
   break;
  }
  $13 = HEAP8[$__i$sroa$0$0$load2223>>0]|0;
  $14 = HEAP32[$__s>>2]|0;
  $tobool$i = ($14|0)==(0|0);
  do {
   if (!($tobool$i)) {
    $__nout_$i$i = (($14) + 24|0);
    $15 = HEAP32[$__nout_$i$i>>2]|0;
    $__eout_$i$i = (($14) + 28|0);
    $16 = HEAP32[$__eout_$i$i>>2]|0;
    $cmp$i$i = ($15|0)==($16|0);
    if (!($cmp$i$i)) {
     $incdec$ptr$i$i = (($15) + 1|0);
     HEAP32[$__nout_$i$i>>2] = $incdec$ptr$i$i;
     HEAP8[$15>>0] = $13;
     break;
    }
    $vtable$i$i = HEAP32[$14>>2]|0;
    $vfn$i$i = (($vtable$i$i) + 52|0);
    $17 = HEAP32[$vfn$i$i>>2]|0;
    $conv$i$i$i = $13&255;
    __THREW__ = 0;
    $call2$i$i10 = (invoke_iii($17|0,($14|0),($conv$i$i$i|0))|0);
    $18 = __THREW__; __THREW__ = 0;
    $19 = $18&1;
    if ($19) {
     label = 23;
     break L17;
    }
    $cmp$i1$i = ($call2$i$i10|0)==(-1);
    if ($cmp$i1$i) {
     HEAP32[$__s>>2] = 0;
    }
   }
  } while(0);
  $incdec$ptr$i = (($__i$sroa$0$0$load2223) + 1|0);
  $$pre = HEAP8[$__nm>>0]|0;
  $10 = $$pre;$__i$sroa$0$0$load2223 = $incdec$ptr$i;
 }
 if ((label|0) == 23) {
  $23 = ___cxa_find_matching_catch()|0;
  $24 = tempRet0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__nm);
  $ehselector$slot$0 = $24;$exn$slot$0 = $23;
  ___resumeException($exn$slot$0|0);
  // unreachable;
 }
 else if ((label|0) == 24) {
  $25 = HEAP32[$__s>>2]|0;
  HEAP32[$agg$result>>2] = $25;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__nm);
  STACKTOP = sp;return;
 }
}
function __ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcl($agg$result,$this,$__s,$__iob,$__fl,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__s = $__s|0;
 $__iob = $__iob|0;
 $__fl = $__fl|0;
 $__v = $__v|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__fmt = 0, $__fmtflags_$i = 0, $__nar = 0, $__o = 0, $__oe = 0, $__op = 0, $add$ptr = 0, $add$ptr7 = 0, $agg$tmp = 0, $agg$tmp$byval_copy = 0;
 var $call3 = 0, $call5 = 0, $call9 = 0, $ref$tmp = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $agg$tmp$byval_copy = sp + 20|0;
 $vararg_buffer = sp;
 $__fmt = sp + 24|0;
 $__nar = sp + 32|0;
 $__o = sp + 44|0;
 $__op = sp + 16|0;
 $__oe = sp + 4|0;
 $ref$tmp = sp + 8|0;
 $agg$tmp = sp + 12|0;
 ;HEAP8[$__fmt+0>>0]=HEAP8[3408+0>>0]|0;HEAP8[$__fmt+1>>0]=HEAP8[3408+1>>0]|0;HEAP8[$__fmt+2>>0]=HEAP8[3408+2>>0]|0;HEAP8[$__fmt+3>>0]=HEAP8[3408+3>>0]|0;HEAP8[$__fmt+4>>0]=HEAP8[3408+4>>0]|0;HEAP8[$__fmt+5>>0]=HEAP8[3408+5>>0]|0;
 $add$ptr = (($__fmt) + 1|0);
 $__fmtflags_$i = (($__iob) + 4|0);
 $0 = HEAP32[$__fmtflags_$i>>2]|0;
 __ZNSt3__114__num_put_base12__format_intEPcPKcbj($add$ptr,3312,1,$0);
 $call3 = (__ZNSt3__16__clocEv()|0);
 HEAP32[$vararg_buffer>>2] = $__v;
 $call5 = (__ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($__nar,12,$call3,$__fmt,$vararg_buffer)|0);
 $add$ptr7 = (($__nar) + ($call5)|0);
 $call9 = (__ZNSt3__114__num_put_base18__identify_paddingEPcS1_RKNS_8ios_baseE($__nar,$add$ptr7,$__iob)|0);
 __ZNKSt3__18ios_base6getlocEv($ref$tmp,$__iob);
 __THREW__ = 0;
 invoke_viiiiiii(400,($__nar|0),($call9|0),($add$ptr7|0),($__o|0),($__op|0),($__oe|0),($ref$tmp|0));
 $1 = __THREW__; __THREW__ = 0;
 $2 = $1&1;
 if ($2) {
  $7 = ___cxa_find_matching_catch()|0;
  $8 = tempRet0;
  $9 = HEAP32[$ref$tmp>>2]|0;
  (__ZNSt3__114__shared_count16__release_sharedEv($9)|0);
  ___resumeException($7|0);
  // unreachable;
 } else {
  $3 = HEAP32[$ref$tmp>>2]|0;
  (__ZNSt3__114__shared_count16__release_sharedEv($3)|0);
  $4 = HEAP32[$__s>>2]|0;
  HEAP32[$agg$tmp>>2] = $4;
  $5 = HEAP32[$__op>>2]|0;
  $6 = HEAP32[$__oe>>2]|0;
  ;HEAP32[$agg$tmp$byval_copy+0>>2]=HEAP32[$agg$tmp+0>>2]|0;
  __ZNSt3__116__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($agg$result,$agg$tmp$byval_copy,$__o,$5,$6,$__iob,$__fl);
  STACKTOP = sp;return;
 }
}
function __ZNSt3__114__num_put_base12__format_intEPcPKcbj($__fmtp,$__len,$__signd,$__flags) {
 $__fmtp = $__fmtp|0;
 $__len = $__len|0;
 $__signd = $__signd|0;
 $__flags = $__flags|0;
 var $0 = 0, $1 = 0, $2 = 0, $__fmtp$addr$0 = 0, $__fmtp$addr$1$lcssa = 0, $__fmtp$addr$1$ph = 0, $__fmtp$addr$113 = 0, $__len$addr$012 = 0, $and = 0, $and1 = 0, $and14 = 0, $and9 = 0, $incdec$ptr = 0, $incdec$ptr4 = 0, $incdec$ptr7 = 0, $incdec$ptr8 = 0, $tobool = 0, $tobool15 = 0, $tobool2 = 0, $tobool6 = 0;
 var $tobool611 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $and = $__flags & 2048;
 $tobool = ($and|0)==(0);
 if ($tobool) {
  $__fmtp$addr$0 = $__fmtp;
 } else {
  $incdec$ptr = (($__fmtp) + 1|0);
  HEAP8[$__fmtp>>0] = 43;
  $__fmtp$addr$0 = $incdec$ptr;
 }
 $and1 = $__flags & 512;
 $tobool2 = ($and1|0)==(0);
 if ($tobool2) {
  $__fmtp$addr$1$ph = $__fmtp$addr$0;
 } else {
  $incdec$ptr4 = (($__fmtp$addr$0) + 1|0);
  HEAP8[$__fmtp$addr$0>>0] = 35;
  $__fmtp$addr$1$ph = $incdec$ptr4;
 }
 $0 = HEAP8[$__len>>0]|0;
 $tobool611 = ($0<<24>>24)==(0);
 if ($tobool611) {
  $__fmtp$addr$1$lcssa = $__fmtp$addr$1$ph;
 } else {
  $1 = $0;$__fmtp$addr$113 = $__fmtp$addr$1$ph;$__len$addr$012 = $__len;
  while(1) {
   $incdec$ptr7 = (($__len$addr$012) + 1|0);
   $incdec$ptr8 = (($__fmtp$addr$113) + 1|0);
   HEAP8[$__fmtp$addr$113>>0] = $1;
   $2 = HEAP8[$incdec$ptr7>>0]|0;
   $tobool6 = ($2<<24>>24)==(0);
   if ($tobool6) {
    $__fmtp$addr$1$lcssa = $incdec$ptr8;
    break;
   } else {
    $1 = $2;$__fmtp$addr$113 = $incdec$ptr8;$__len$addr$012 = $incdec$ptr7;
   }
  }
 }
 $and9 = $__flags & 74;
 if ((($and9|0) == 64)) {
  HEAP8[$__fmtp$addr$1$lcssa>>0] = 111;
  STACKTOP = sp;return;
 } else if ((($and9|0) == 8)) {
  $and14 = $__flags & 16384;
  $tobool15 = ($and14|0)==(0);
  if ($tobool15) {
   HEAP8[$__fmtp$addr$1$lcssa>>0] = 120;
   STACKTOP = sp;return;
  } else {
   HEAP8[$__fmtp$addr$1$lcssa>>0] = 88;
   STACKTOP = sp;return;
  }
 } else {
  if ($__signd) {
   HEAP8[$__fmtp$addr$1$lcssa>>0] = 100;
   STACKTOP = sp;return;
  } else {
   HEAP8[$__fmtp$addr$1$lcssa>>0] = 117;
   STACKTOP = sp;return;
  }
 }
}
function __ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($__s,$__n,$__l,$__format,$varargs) {
 $__s = $__s|0;
 $__n = $__n|0;
 $__l = $__l|0;
 $__format = $__format|0;
 $varargs = $varargs|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $__va = 0, $call = 0, $call3 = 0, $tobool$i$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__va = sp;
 HEAP32[$__va>>2] = $varargs;
 $call = (_uselocale(($__l|0))|0);
 $call3 = (_vsnprintf($__s,$__n,$__format,$__va)|0);
 $tobool$i$i$i = ($call|0)==(0|0);
 if ($tobool$i$i$i) {
  STACKTOP = sp;return ($call3|0);
 }
 __THREW__ = 0;
 (invoke_ii(397,($call|0))|0);
 $0 = __THREW__; __THREW__ = 0;
 $1 = $0&1;
 if ($1) {
  $2 = ___cxa_find_matching_catch(0|0)|0;
  $3 = tempRet0;
  ___clang_call_terminate($2);
  // unreachable;
 } else {
  STACKTOP = sp;return ($call3|0);
 }
 return 0|0;
}
function __ZNSt3__114__num_put_base18__identify_paddingEPcS1_RKNS_8ios_baseE($__nb,$__ne,$__iob) {
 $__nb = $__nb|0;
 $__ne = $__ne|0;
 $__iob = $__iob|0;
 var $0 = 0, $1 = 0, $2 = 0, $__fmtflags_$i = 0, $add$ptr = 0, $add$ptr17 = 0, $and = 0, $arrayidx9 = 0, $cmp4 = 0, $cmp7 = 0, $or$cond = 0, $retval$0 = 0, $sub$ptr$lhs$cast = 0, $sub$ptr$rhs$cast = 0, $sub$ptr$sub = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $__fmtflags_$i = (($__iob) + 4|0);
 $0 = HEAP32[$__fmtflags_$i>>2]|0;
 $and = $0 & 176;
 do {
  if ((($and|0) == 16)) {
   $1 = HEAP8[$__nb>>0]|0;
   if ((($1<<24>>24) == 43) | (($1<<24>>24) == 45)) {
    $add$ptr = (($__nb) + 1|0);
    $retval$0 = $add$ptr;
    break;
   }
   $sub$ptr$lhs$cast = $__ne;
   $sub$ptr$rhs$cast = $__nb;
   $sub$ptr$sub = (($sub$ptr$lhs$cast) - ($sub$ptr$rhs$cast))|0;
   $cmp4 = ($sub$ptr$sub|0)>(1);
   $cmp7 = ($1<<24>>24)==(48);
   $or$cond = $cmp4 & $cmp7;
   if ($or$cond) {
    $arrayidx9 = (($__nb) + 1|0);
    $2 = HEAP8[$arrayidx9>>0]|0;
    if ((($2<<24>>24) == 88) | (($2<<24>>24) == 120)) {
     $add$ptr17 = (($__nb) + 2|0);
     $retval$0 = $add$ptr17;
    } else {
     label = 7;
    }
   } else {
    label = 7;
   }
  } else if ((($and|0) == 32)) {
   $retval$0 = $__ne;
  } else {
   label = 7;
  }
 } while(0);
 if ((label|0) == 7) {
  $retval$0 = $__nb;
 }
 STACKTOP = sp;return ($retval$0|0);
}
function __ZNSt3__19__num_putIcE21__widen_and_group_intEPcS2_S2_S2_RS2_S3_RKNS_6localeE($__nb,$__np,$__ne,$__ob,$__op,$__oe,$__loc) {
 $__nb = $__nb|0;
 $__np = $__np|0;
 $__ne = $__ne|0;
 $__ob = $__ob|0;
 $__op = $__op|0;
 $__oe = $__oe|0;
 $__loc = $__loc|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__data_$i$i$i = 0, $__dc$0106 = 0, $__dc$1 = 0, $__dg$0107 = 0, $__dg$1 = 0, $__first$addr$08$i$i = 0, $__first$addr$08$i$i76 = 0, $__grouping = 0, $__nf$0 = 0, $__nf$1 = 0, $__p$0108 = 0, $__size_$i2$i = 0;
 var $__size_$i2$i$i = 0, $add$ptr = 0, $add$ptr$i = 0, $add$ptr$i97 = 0, $add$ptr62 = 0, $add$ptr71 = 0, $and$i$i = 0, $and$i$i$i = 0, $and$i$i$i89 = 0, $arrayidx$i$i$i94 = 0, $arrayidx$i$i$i94$ = 0, $arrayidx$i$i$i94$109 = 0, $arrayidx17 = 0, $call$i = 0, $call$i101102 = 0, $call$i47 = 0, $call$i5051 = 0, $call$i5859 = 0, $call$i6364 = 0, $call$i6869 = 0;
 var $cmp$i = 0, $cmp$i$i = 0, $cmp$i$i71 = 0, $cmp1$i$i = 0, $cmp1$i$i79 = 0, $cmp13 = 0, $cmp15 = 0, $cmp17$i$i = 0, $cmp17$i$i73 = 0, $cmp37 = 0, $cmp37105 = 0, $cmp41 = 0, $cmp46 = 0, $cmp50 = 0, $cmp65 = 0, $cond$i = 0, $cond$i$i = 0, $conv$i$i = 0, $conv$i$i$i = 0, $conv45 = 0;
 var $inc = 0, $inc$__dg$0 = 0, $inc57 = 0, $incdec$ptr = 0, $incdec$ptr$i$i = 0, $incdec$ptr$i$i78 = 0, $incdec$ptr2$i$i = 0, $incdec$ptr2$i$i77 = 0, $incdec$ptr28 = 0, $incdec$ptr29 = 0, $incdec$ptr32 = 0, $incdec$ptr48 = 0, $incdec$ptr56 = 0, $incdec$ptr58 = 0, $incdec$ptr6$i$i = 0, $incdec$ptr6$i$i72 = 0, $incdec$ptr9 = 0, $incdec$ptr9$i$i = 0, $incdec$ptr9$i$i75 = 0, $lpad$phi$index = 0;
 var $lpad$phi$index2 = 0, $shr1$i$i = 0, $shr1$i$i$i = 0, $storemerge = 0, $sub = 0, $sub$ptr$lhs$cast = 0, $sub$ptr$lhs$cast10 = 0, $sub$ptr$lhs$cast59 = 0, $sub$ptr$lhs$cast68 = 0, $sub$ptr$rhs$cast = 0, $sub$ptr$rhs$cast11 = 0, $sub$ptr$rhs$cast60 = 0, $sub$ptr$rhs$cast69 = 0, $sub$ptr$sub = 0, $sub$ptr$sub12 = 0, $sub$ptr$sub61 = 0, $sub$ptr$sub70 = 0, $tobool$i$i = 0, $tobool$i$i$i = 0, $tobool$i$i$i90 = 0;
 var $vfn$i = 0, $vfn$i100 = 0, $vfn$i49 = 0, $vfn$i53 = 0, $vfn$i57 = 0, $vfn$i62 = 0, $vfn$i67 = 0, $vtable$i = 0, $vtable$i48 = 0, $vtable$i52 = 0, $vtable$i56 = 0, $vtable$i61 = 0, $vtable$i66 = 0, $vtable$i99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__grouping = sp;
 $call$i = (__ZNKSt3__16locale9use_facetERNS0_2idE($__loc,4616)|0);
 $call$i47 = (__ZNKSt3__16locale9use_facetERNS0_2idE($__loc,4760)|0);
 $vtable$i = HEAP32[$call$i47>>2]|0;
 $vfn$i = (($vtable$i) + 20|0);
 $0 = HEAP32[$vfn$i>>2]|0;
 FUNCTION_TABLE_vii[$0 & 511]($__grouping,$call$i47);
 $1 = HEAP8[$__grouping>>0]|0;
 $and$i$i$i = $1 & 1;
 $tobool$i$i$i = ($and$i$i$i<<24>>24)==(0);
 if ($tobool$i$i$i) {
  $conv$i$i$i = $1&255;
  $shr1$i$i$i = $conv$i$i$i >>> 1;
  $cond$i$i = $shr1$i$i$i;
 } else {
  $__size_$i2$i$i = (($__grouping) + 4|0);
  $2 = HEAP32[$__size_$i2$i$i>>2]|0;
  $cond$i$i = $2;
 }
 $cmp$i = ($cond$i$i|0)==(0);
 do {
  if ($cmp$i) {
   $vtable$i52 = HEAP32[$call$i>>2]|0;
   $vfn$i53 = (($vtable$i52) + 32|0);
   $3 = HEAP32[$vfn$i53>>2]|0;
   __THREW__ = 0;
   (invoke_iiiii($3|0,($call$i|0),($__nb|0),($__ne|0),($__ob|0))|0);
   $4 = __THREW__; __THREW__ = 0;
   $5 = $4&1;
   if ($5) {
    label = 8;
   } else {
    $sub$ptr$lhs$cast = $__ne;
    $sub$ptr$rhs$cast = $__nb;
    $sub$ptr$sub = (($sub$ptr$lhs$cast) - ($sub$ptr$rhs$cast))|0;
    $add$ptr = (($__ob) + ($sub$ptr$sub)|0);
    HEAP32[$__oe>>2] = $add$ptr;
   }
  } else {
   HEAP32[$__oe>>2] = $__ob;
   $10 = HEAP8[$__nb>>0]|0;
   if ((($10<<24>>24) == 43) | (($10<<24>>24) == 45)) {
    $vtable$i56 = HEAP32[$call$i>>2]|0;
    $vfn$i57 = (($vtable$i56) + 28|0);
    $11 = HEAP32[$vfn$i57>>2]|0;
    __THREW__ = 0;
    $call$i5859 = (invoke_iii($11|0,($call$i|0),($10|0))|0);
    $12 = __THREW__; __THREW__ = 0;
    $13 = $12&1;
    if ($13) {
     label = 8;
     break;
    }
    $incdec$ptr = (($__nb) + 1|0);
    $14 = HEAP32[$__oe>>2]|0;
    $incdec$ptr9 = (($14) + 1|0);
    HEAP32[$__oe>>2] = $incdec$ptr9;
    HEAP8[$14>>0] = $call$i5859;
    $__nf$0 = $incdec$ptr;
   } else {
    $__nf$0 = $__nb;
   }
   $sub$ptr$lhs$cast10 = $__ne;
   $sub$ptr$rhs$cast11 = $__nf$0;
   $sub$ptr$sub12 = (($sub$ptr$lhs$cast10) - ($sub$ptr$rhs$cast11))|0;
   $cmp13 = ($sub$ptr$sub12|0)>(1);
   if ($cmp13) {
    $15 = HEAP8[$__nf$0>>0]|0;
    $cmp15 = ($15<<24>>24)==(48);
    if ($cmp15) {
     $arrayidx17 = (($__nf$0) + 1|0);
     $16 = HEAP8[$arrayidx17>>0]|0;
     if ((($16<<24>>24) == 88) | (($16<<24>>24) == 120)) {
      $vtable$i61 = HEAP32[$call$i>>2]|0;
      $vfn$i62 = (($vtable$i61) + 28|0);
      $17 = HEAP32[$vfn$i62>>2]|0;
      __THREW__ = 0;
      $call$i6364 = (invoke_iii($17|0,($call$i|0),48)|0);
      $18 = __THREW__; __THREW__ = 0;
      $19 = $18&1;
      if ($19) {
       label = 8;
       break;
      }
      $20 = HEAP32[$__oe>>2]|0;
      $incdec$ptr28 = (($20) + 1|0);
      HEAP32[$__oe>>2] = $incdec$ptr28;
      HEAP8[$20>>0] = $call$i6364;
      $21 = HEAP8[$arrayidx17>>0]|0;
      $vtable$i66 = HEAP32[$call$i>>2]|0;
      $vfn$i67 = (($vtable$i66) + 28|0);
      $22 = HEAP32[$vfn$i67>>2]|0;
      __THREW__ = 0;
      $call$i6869 = (invoke_iii($22|0,($call$i|0),($21|0))|0);
      $23 = __THREW__; __THREW__ = 0;
      $24 = $23&1;
      if ($24) {
       label = 8;
       break;
      }
      $incdec$ptr29 = (($__nf$0) + 2|0);
      $25 = HEAP32[$__oe>>2]|0;
      $incdec$ptr32 = (($25) + 1|0);
      HEAP32[$__oe>>2] = $incdec$ptr32;
      HEAP8[$25>>0] = $call$i6869;
      $__nf$1 = $incdec$ptr29;
     } else {
      $__nf$1 = $__nf$0;
     }
    } else {
     $__nf$1 = $__nf$0;
    }
   } else {
    $__nf$1 = $__nf$0;
   }
   $cmp$i$i71 = ($__nf$1|0)==($__ne|0);
   if (!($cmp$i$i71)) {
    $incdec$ptr6$i$i72 = (($__ne) + -1|0);
    $cmp17$i$i73 = ($incdec$ptr6$i$i72>>>0)>($__nf$1>>>0);
    if ($cmp17$i$i73) {
     $__first$addr$08$i$i76 = $__nf$1;$incdec$ptr9$i$i75 = $incdec$ptr6$i$i72;
     while(1) {
      $26 = HEAP8[$__first$addr$08$i$i76>>0]|0;
      $27 = HEAP8[$incdec$ptr9$i$i75>>0]|0;
      HEAP8[$__first$addr$08$i$i76>>0] = $27;
      HEAP8[$incdec$ptr9$i$i75>>0] = $26;
      $incdec$ptr2$i$i77 = (($__first$addr$08$i$i76) + 1|0);
      $incdec$ptr$i$i78 = (($incdec$ptr9$i$i75) + -1|0);
      $cmp1$i$i79 = ($incdec$ptr2$i$i77>>>0)<($incdec$ptr$i$i78>>>0);
      if ($cmp1$i$i79) {
       $__first$addr$08$i$i76 = $incdec$ptr2$i$i77;$incdec$ptr9$i$i75 = $incdec$ptr$i$i78;
      } else {
       break;
      }
     }
    }
   }
   $vtable$i99 = HEAP32[$call$i47>>2]|0;
   $vfn$i100 = (($vtable$i99) + 16|0);
   $28 = HEAP32[$vfn$i100>>2]|0;
   __THREW__ = 0;
   $call$i101102 = (invoke_ii($28|0,($call$i47|0))|0);
   $29 = __THREW__; __THREW__ = 0;
   $30 = $29&1;
   if ($30) {
    label = 8;
   } else {
    $cmp37105 = ($__nf$1>>>0)<($__ne>>>0);
    L26: do {
     if ($cmp37105) {
      $arrayidx$i$i$i94 = (($__grouping) + 1|0);
      $__size_$i2$i = (($__grouping) + 4|0);
      $__data_$i$i$i = (($__grouping) + 8|0);
      $__dc$0106 = 0;$__dg$0107 = 0;$__p$0108 = $__nf$1;
      while(1) {
       $31 = HEAP8[$__grouping>>0]|0;
       $and$i$i$i89 = $31 & 1;
       $tobool$i$i$i90 = ($and$i$i$i89<<24>>24)==(0);
       $32 = HEAP32[$__data_$i$i$i>>2]|0;
       $arrayidx$i$i$i94$ = $tobool$i$i$i90 ? $arrayidx$i$i$i94 : $32;
       $add$ptr$i97 = (($arrayidx$i$i$i94$) + ($__dg$0107)|0);
       $33 = HEAP8[$add$ptr$i97>>0]|0;
       $cmp41 = ($33<<24>>24)==(0);
       if ($cmp41) {
        $__dc$1 = $__dc$0106;$__dg$1 = $__dg$0107;
       } else {
        $34 = HEAP32[$__data_$i$i$i>>2]|0;
        $arrayidx$i$i$i94$109 = $tobool$i$i$i90 ? $arrayidx$i$i$i94 : $34;
        $add$ptr$i = (($arrayidx$i$i$i94$109) + ($__dg$0107)|0);
        $35 = HEAP8[$add$ptr$i>>0]|0;
        $conv45 = $35 << 24 >> 24;
        $cmp46 = ($__dc$0106|0)==($conv45|0);
        if ($cmp46) {
         $36 = HEAP32[$__oe>>2]|0;
         $incdec$ptr48 = (($36) + 1|0);
         HEAP32[$__oe>>2] = $incdec$ptr48;
         HEAP8[$36>>0] = $call$i101102;
         $37 = HEAP8[$__grouping>>0]|0;
         $and$i$i = $37 & 1;
         $tobool$i$i = ($and$i$i<<24>>24)==(0);
         if ($tobool$i$i) {
          $conv$i$i = $37&255;
          $shr1$i$i = $conv$i$i >>> 1;
          $cond$i = $shr1$i$i;
         } else {
          $38 = HEAP32[$__size_$i2$i>>2]|0;
          $cond$i = $38;
         }
         $sub = (($cond$i) + -1)|0;
         $cmp50 = ($__dg$0107>>>0)<($sub>>>0);
         $inc = $cmp50&1;
         $inc$__dg$0 = (($inc) + ($__dg$0107))|0;
         $__dc$1 = 0;$__dg$1 = $inc$__dg$0;
        } else {
         $__dc$1 = $__dc$0106;$__dg$1 = $__dg$0107;
        }
       }
       $39 = HEAP8[$__p$0108>>0]|0;
       $vtable$i48 = HEAP32[$call$i>>2]|0;
       $vfn$i49 = (($vtable$i48) + 28|0);
       $40 = HEAP32[$vfn$i49>>2]|0;
       __THREW__ = 0;
       $call$i5051 = (invoke_iii($40|0,($call$i|0),($39|0))|0);
       $41 = __THREW__; __THREW__ = 0;
       $42 = $41&1;
       if ($42) {
        break;
       }
       $43 = HEAP32[$__oe>>2]|0;
       $incdec$ptr56 = (($43) + 1|0);
       HEAP32[$__oe>>2] = $incdec$ptr56;
       HEAP8[$43>>0] = $call$i5051;
       $inc57 = (($__dc$1) + 1)|0;
       $incdec$ptr58 = (($__p$0108) + 1|0);
       $cmp37 = ($incdec$ptr58>>>0)<($__ne>>>0);
       if ($cmp37) {
        $__dc$0106 = $inc57;$__dg$0107 = $__dg$1;$__p$0108 = $incdec$ptr58;
       } else {
        break L26;
       }
      }
      $6 = ___cxa_find_matching_catch()|0;
      $7 = tempRet0;
      $lpad$phi$index = $6;$lpad$phi$index2 = $7;
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
      ___resumeException($lpad$phi$index|0);
      // unreachable;
     }
    } while(0);
    $sub$ptr$lhs$cast59 = $__nf$1;
    $sub$ptr$rhs$cast60 = $__nb;
    $sub$ptr$sub61 = (($sub$ptr$lhs$cast59) - ($sub$ptr$rhs$cast60))|0;
    $add$ptr62 = (($__ob) + ($sub$ptr$sub61)|0);
    $44 = HEAP32[$__oe>>2]|0;
    $cmp$i$i = ($add$ptr62|0)==($44|0);
    if (!($cmp$i$i)) {
     $incdec$ptr6$i$i = (($44) + -1|0);
     $cmp17$i$i = ($incdec$ptr6$i$i>>>0)>($add$ptr62>>>0);
     if ($cmp17$i$i) {
      $__first$addr$08$i$i = $add$ptr62;$incdec$ptr9$i$i = $incdec$ptr6$i$i;
      while(1) {
       $45 = HEAP8[$__first$addr$08$i$i>>0]|0;
       $46 = HEAP8[$incdec$ptr9$i$i>>0]|0;
       HEAP8[$__first$addr$08$i$i>>0] = $46;
       HEAP8[$incdec$ptr9$i$i>>0] = $45;
       $incdec$ptr2$i$i = (($__first$addr$08$i$i) + 1|0);
       $incdec$ptr$i$i = (($incdec$ptr9$i$i) + -1|0);
       $cmp1$i$i = ($incdec$ptr2$i$i>>>0)<($incdec$ptr$i$i>>>0);
       if ($cmp1$i$i) {
        $__first$addr$08$i$i = $incdec$ptr2$i$i;$incdec$ptr9$i$i = $incdec$ptr$i$i;
       } else {
        break;
       }
      }
     }
    }
   }
  }
 } while(0);
 if ((label|0) == 8) {
  $8 = ___cxa_find_matching_catch()|0;
  $9 = tempRet0;
  $lpad$phi$index = $8;$lpad$phi$index2 = $9;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
  ___resumeException($lpad$phi$index|0);
  // unreachable;
 }
 $cmp65 = ($__np|0)==($__ne|0);
 if ($cmp65) {
  $47 = HEAP32[$__oe>>2]|0;
  $storemerge = $47;
  HEAP32[$__op>>2] = $storemerge;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
  STACKTOP = sp;return;
 } else {
  $sub$ptr$lhs$cast68 = $__np;
  $sub$ptr$rhs$cast69 = $__nb;
  $sub$ptr$sub70 = (($sub$ptr$lhs$cast68) - ($sub$ptr$rhs$cast69))|0;
  $add$ptr71 = (($__ob) + ($sub$ptr$sub70)|0);
  $storemerge = $add$ptr71;
  HEAP32[$__op>>2] = $storemerge;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
  STACKTOP = sp;return;
 }
}
function __ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcx($agg$result,$this,$__s,$__iob,$__fl,$0,$1) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__s = $__s|0;
 $__iob = $__iob|0;
 $__fl = $__fl|0;
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__fmt = 0, $__fmtflags_$i = 0;
 var $__nar = 0, $__o = 0, $__oe = 0, $__op = 0, $add$ptr = 0, $add$ptr7 = 0, $agg$tmp = 0, $agg$tmp$byval_copy = 0, $call3 = 0, $call5 = 0, $call9 = 0, $ref$tmp = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $agg$tmp$byval_copy = sp + 32|0;
 $vararg_buffer = sp + 8|0;
 $__fmt = sp;
 $__nar = sp + 36|0;
 $__o = sp + 58|0;
 $__op = sp + 16|0;
 $__oe = sp + 28|0;
 $ref$tmp = sp + 20|0;
 $agg$tmp = sp + 24|0;
 $2 = $__fmt;
 $3 = $2;
 HEAP32[$3>>2] = 37;
 $4 = (($2) + 4)|0;
 $5 = $4;
 HEAP32[$5>>2] = 0;
 $add$ptr = (($__fmt) + 1|0);
 $__fmtflags_$i = (($__iob) + 4|0);
 $6 = HEAP32[$__fmtflags_$i>>2]|0;
 __ZNSt3__114__num_put_base12__format_intEPcPKcbj($add$ptr,3320,1,$6);
 $call3 = (__ZNSt3__16__clocEv()|0);
 $7 = $vararg_buffer;
 $8 = $7;
 HEAP32[$8>>2] = $0;
 $9 = (($7) + 4)|0;
 $10 = $9;
 HEAP32[$10>>2] = $1;
 $call5 = (__ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($__nar,22,$call3,$__fmt,$vararg_buffer)|0);
 $add$ptr7 = (($__nar) + ($call5)|0);
 $call9 = (__ZNSt3__114__num_put_base18__identify_paddingEPcS1_RKNS_8ios_baseE($__nar,$add$ptr7,$__iob)|0);
 __ZNKSt3__18ios_base6getlocEv($ref$tmp,$__iob);
 __THREW__ = 0;
 invoke_viiiiiii(400,($__nar|0),($call9|0),($add$ptr7|0),($__o|0),($__op|0),($__oe|0),($ref$tmp|0));
 $11 = __THREW__; __THREW__ = 0;
 $12 = $11&1;
 if ($12) {
  $17 = ___cxa_find_matching_catch()|0;
  $18 = tempRet0;
  $19 = HEAP32[$ref$tmp>>2]|0;
  (__ZNSt3__114__shared_count16__release_sharedEv($19)|0);
  ___resumeException($17|0);
  // unreachable;
 } else {
  $13 = HEAP32[$ref$tmp>>2]|0;
  (__ZNSt3__114__shared_count16__release_sharedEv($13)|0);
  $14 = HEAP32[$__s>>2]|0;
  HEAP32[$agg$tmp>>2] = $14;
  $15 = HEAP32[$__op>>2]|0;
  $16 = HEAP32[$__oe>>2]|0;
  ;HEAP32[$agg$tmp$byval_copy+0>>2]=HEAP32[$agg$tmp+0>>2]|0;
  __ZNSt3__116__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($agg$result,$agg$tmp$byval_copy,$__o,$15,$16,$__iob,$__fl);
  STACKTOP = sp;return;
 }
}
function __ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcm($agg$result,$this,$__s,$__iob,$__fl,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__s = $__s|0;
 $__iob = $__iob|0;
 $__fl = $__fl|0;
 $__v = $__v|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__fmt = 0, $__fmtflags_$i = 0, $__nar = 0, $__o = 0, $__oe = 0, $__op = 0, $add$ptr = 0, $add$ptr7 = 0, $agg$tmp = 0, $agg$tmp$byval_copy = 0;
 var $call3 = 0, $call5 = 0, $call9 = 0, $ref$tmp = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $agg$tmp$byval_copy = sp + 20|0;
 $vararg_buffer = sp;
 $__fmt = sp + 24|0;
 $__nar = sp + 32|0;
 $__o = sp + 44|0;
 $__op = sp + 16|0;
 $__oe = sp + 4|0;
 $ref$tmp = sp + 8|0;
 $agg$tmp = sp + 12|0;
 ;HEAP8[$__fmt+0>>0]=HEAP8[3408+0>>0]|0;HEAP8[$__fmt+1>>0]=HEAP8[3408+1>>0]|0;HEAP8[$__fmt+2>>0]=HEAP8[3408+2>>0]|0;HEAP8[$__fmt+3>>0]=HEAP8[3408+3>>0]|0;HEAP8[$__fmt+4>>0]=HEAP8[3408+4>>0]|0;HEAP8[$__fmt+5>>0]=HEAP8[3408+5>>0]|0;
 $add$ptr = (($__fmt) + 1|0);
 $__fmtflags_$i = (($__iob) + 4|0);
 $0 = HEAP32[$__fmtflags_$i>>2]|0;
 __ZNSt3__114__num_put_base12__format_intEPcPKcbj($add$ptr,3312,0,$0);
 $call3 = (__ZNSt3__16__clocEv()|0);
 HEAP32[$vararg_buffer>>2] = $__v;
 $call5 = (__ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($__nar,12,$call3,$__fmt,$vararg_buffer)|0);
 $add$ptr7 = (($__nar) + ($call5)|0);
 $call9 = (__ZNSt3__114__num_put_base18__identify_paddingEPcS1_RKNS_8ios_baseE($__nar,$add$ptr7,$__iob)|0);
 __ZNKSt3__18ios_base6getlocEv($ref$tmp,$__iob);
 __THREW__ = 0;
 invoke_viiiiiii(400,($__nar|0),($call9|0),($add$ptr7|0),($__o|0),($__op|0),($__oe|0),($ref$tmp|0));
 $1 = __THREW__; __THREW__ = 0;
 $2 = $1&1;
 if ($2) {
  $7 = ___cxa_find_matching_catch()|0;
  $8 = tempRet0;
  $9 = HEAP32[$ref$tmp>>2]|0;
  (__ZNSt3__114__shared_count16__release_sharedEv($9)|0);
  ___resumeException($7|0);
  // unreachable;
 } else {
  $3 = HEAP32[$ref$tmp>>2]|0;
  (__ZNSt3__114__shared_count16__release_sharedEv($3)|0);
  $4 = HEAP32[$__s>>2]|0;
  HEAP32[$agg$tmp>>2] = $4;
  $5 = HEAP32[$__op>>2]|0;
  $6 = HEAP32[$__oe>>2]|0;
  ;HEAP32[$agg$tmp$byval_copy+0>>2]=HEAP32[$agg$tmp+0>>2]|0;
  __ZNSt3__116__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($agg$result,$agg$tmp$byval_copy,$__o,$5,$6,$__iob,$__fl);
  STACKTOP = sp;return;
 }
}
function __ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcy($agg$result,$this,$__s,$__iob,$__fl,$0,$1) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__s = $__s|0;
 $__iob = $__iob|0;
 $__fl = $__fl|0;
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__fmt = 0, $__fmtflags_$i = 0;
 var $__nar = 0, $__o = 0, $__oe = 0, $__op = 0, $add$ptr = 0, $add$ptr7 = 0, $agg$tmp = 0, $agg$tmp$byval_copy = 0, $call3 = 0, $call5 = 0, $call9 = 0, $ref$tmp = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $agg$tmp$byval_copy = sp + 32|0;
 $vararg_buffer = sp + 8|0;
 $__fmt = sp;
 $__nar = sp + 36|0;
 $__o = sp + 59|0;
 $__op = sp + 16|0;
 $__oe = sp + 28|0;
 $ref$tmp = sp + 20|0;
 $agg$tmp = sp + 24|0;
 $2 = $__fmt;
 $3 = $2;
 HEAP32[$3>>2] = 37;
 $4 = (($2) + 4)|0;
 $5 = $4;
 HEAP32[$5>>2] = 0;
 $add$ptr = (($__fmt) + 1|0);
 $__fmtflags_$i = (($__iob) + 4|0);
 $6 = HEAP32[$__fmtflags_$i>>2]|0;
 __ZNSt3__114__num_put_base12__format_intEPcPKcbj($add$ptr,3320,0,$6);
 $call3 = (__ZNSt3__16__clocEv()|0);
 $7 = $vararg_buffer;
 $8 = $7;
 HEAP32[$8>>2] = $0;
 $9 = (($7) + 4)|0;
 $10 = $9;
 HEAP32[$10>>2] = $1;
 $call5 = (__ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($__nar,23,$call3,$__fmt,$vararg_buffer)|0);
 $add$ptr7 = (($__nar) + ($call5)|0);
 $call9 = (__ZNSt3__114__num_put_base18__identify_paddingEPcS1_RKNS_8ios_baseE($__nar,$add$ptr7,$__iob)|0);
 __ZNKSt3__18ios_base6getlocEv($ref$tmp,$__iob);
 __THREW__ = 0;
 invoke_viiiiiii(400,($__nar|0),($call9|0),($add$ptr7|0),($__o|0),($__op|0),($__oe|0),($ref$tmp|0));
 $11 = __THREW__; __THREW__ = 0;
 $12 = $11&1;
 if ($12) {
  $17 = ___cxa_find_matching_catch()|0;
  $18 = tempRet0;
  $19 = HEAP32[$ref$tmp>>2]|0;
  (__ZNSt3__114__shared_count16__release_sharedEv($19)|0);
  ___resumeException($17|0);
  // unreachable;
 } else {
  $13 = HEAP32[$ref$tmp>>2]|0;
  (__ZNSt3__114__shared_count16__release_sharedEv($13)|0);
  $14 = HEAP32[$__s>>2]|0;
  HEAP32[$agg$tmp>>2] = $14;
  $15 = HEAP32[$__op>>2]|0;
  $16 = HEAP32[$__oe>>2]|0;
  ;HEAP32[$agg$tmp$byval_copy+0>>2]=HEAP32[$agg$tmp+0>>2]|0;
  __ZNSt3__116__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($agg$result,$agg$tmp$byval_copy,$__o,$15,$16,$__iob,$__fl);
  STACKTOP = sp;return;
 }
}
function __ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcd($agg$result,$this,$__s,$__iob,$__fl,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__s = $__s|0;
 $__iob = $__iob|0;
 $__fl = $__fl|0;
 $__v = +$__v;
 var $$pre = 0, $$pre64 = 0, $$pre65 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $7 = 0, $8 = 0, $9 = 0, $__fmt = 0, $__fmtflags_$i = 0, $__nar = 0, $__nb = 0, $__nc$0 = 0, $__nc$1 = 0, $__nc$2 = 0, $__o = 0, $__ob$0 = 0, $__oe = 0, $__op = 0, $__precision_$i = 0, $__precision_$i25 = 0, $__precision_$i26 = 0, $add$ptr = 0, $add$ptr34 = 0;
 var $agg$tmp = 0, $agg$tmp$byval_copy = 0, $call10 = 0, $call14 = 0, $call19 = 0, $call2 = 0, $call22 = 0, $call27 = 0, $call36 = 0, $call4 = 0, $call45 = 0, $call7 = 0, $cmp = 0, $cmp29 = 0, $cmp40 = 0, $cmp46 = 0, $ehselector$slot$0 = 0, $ehselector$slot$162 = 0, $exn$slot$0 = 0, $exn$slot$163 = 0;
 var $mul = 0, $ref$tmp51 = 0, $ref$tmp55 = 0, $tobool$i$i$i = 0, $tobool$i$i$i20 = 0, $tobool$i$i$i38 = 0, $tobool$i$i$i44 = 0, $vararg_buffer = 0, $vararg_buffer2 = 0, $vararg_buffer5 = 0, $vararg_buffer9 = 0, $vararg_ptr1 = 0, $vararg_ptr12 = 0, $vararg_ptr8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 176|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $agg$tmp$byval_copy = sp + 68|0;
 $vararg_buffer9 = sp + 16|0;
 $vararg_buffer5 = sp + 48|0;
 $vararg_buffer2 = sp + 8|0;
 $vararg_buffer = sp + 32|0;
 $__fmt = sp;
 $__nar = sp + 88|0;
 $__nb = sp + 84|0;
 $__o = sp + 118|0;
 $__op = sp + 60|0;
 $__oe = sp + 80|0;
 $ref$tmp51 = sp + 76|0;
 $ref$tmp55 = sp + 64|0;
 $agg$tmp = sp + 72|0;
 $0 = $__fmt;
 $1 = $0;
 HEAP32[$1>>2] = 37;
 $2 = (($0) + 4)|0;
 $3 = $2;
 HEAP32[$3>>2] = 0;
 $add$ptr = (($__fmt) + 1|0);
 $__fmtflags_$i = (($__iob) + 4|0);
 $4 = HEAP32[$__fmtflags_$i>>2]|0;
 $call2 = (__ZNSt3__114__num_put_base14__format_floatEPcPKcj($add$ptr,3328,$4)|0);
 HEAP32[$__nb>>2] = $__nar;
 $call4 = (__ZNSt3__16__clocEv()|0);
 if ($call2) {
  $__precision_$i = (($__iob) + 8|0);
  $5 = HEAP32[$__precision_$i>>2]|0;
  HEAP32[$vararg_buffer>>2] = $5;
  $vararg_ptr1 = (($vararg_buffer) + 4|0);
  HEAPF64[tempDoublePtr>>3]=$__v;HEAP32[$vararg_ptr1>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_ptr1+4>>2]=HEAP32[tempDoublePtr+4>>2];
  $call7 = (__ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($__nar,30,$call4,$__fmt,$vararg_buffer)|0);
  $__nc$0 = $call7;
 } else {
  HEAPF64[tempDoublePtr>>3]=$__v;HEAP32[$vararg_buffer2>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_buffer2+4>>2]=HEAP32[tempDoublePtr+4>>2];
  $call10 = (__ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($__nar,30,$call4,$__fmt,$vararg_buffer2)|0);
  $__nc$0 = $call10;
 }
 $cmp = ($__nc$0|0)>(29);
 do {
  if ($cmp) {
   if ($call2) {
    __THREW__ = 0;
    $call14 = (invoke_i(395)|0);
    $6 = __THREW__; __THREW__ = 0;
    $7 = $6&1;
    if (!($7)) {
     $__precision_$i25 = (($__iob) + 8|0);
     $8 = HEAP32[$__precision_$i25>>2]|0;
     __THREW__ = 0;
     HEAP32[$vararg_buffer5>>2] = $8;
     $vararg_ptr8 = (($vararg_buffer5) + 4|0);
     HEAPF64[tempDoublePtr>>3]=$__v;HEAP32[$vararg_ptr8>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_ptr8+4>>2]=HEAP32[tempDoublePtr+4>>2];
     $call19 = (invoke_iiiii(401,($__nb|0),($call14|0),($__fmt|0),($vararg_buffer5|0))|0);
     $9 = __THREW__; __THREW__ = 0;
     $10 = $9&1;
     if (!($10)) {
      $__nc$1 = $call19;
      label = 12;
     }
    }
   } else {
    __THREW__ = 0;
    $call22 = (invoke_i(395)|0);
    $13 = __THREW__; __THREW__ = 0;
    $14 = $13&1;
    if (!($14)) {
     $__precision_$i26 = (($__iob) + 8|0);
     $15 = HEAP32[$__precision_$i26>>2]|0;
     __THREW__ = 0;
     HEAP32[$vararg_buffer9>>2] = $15;
     $vararg_ptr12 = (($vararg_buffer9) + 4|0);
     HEAPF64[tempDoublePtr>>3]=$__v;HEAP32[$vararg_ptr12>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_ptr12+4>>2]=HEAP32[tempDoublePtr+4>>2];
     $call27 = (invoke_iiiii(401,($__nb|0),($call22|0),($__fmt|0),($vararg_buffer9|0))|0);
     $16 = __THREW__; __THREW__ = 0;
     $17 = $16&1;
     if (!($17)) {
      $__nc$1 = $call27;
      label = 12;
     }
    }
   }
   if ((label|0) == 12) {
    $18 = HEAP32[$__nb>>2]|0;
    $cmp29 = ($18|0)==(0|0);
    if (!($cmp29)) {
     $21 = $18;$43 = $18;$__nc$2 = $__nc$1;
     break;
    }
    __THREW__ = 0;
    invoke_v(383);
    $19 = __THREW__; __THREW__ = 0;
    $20 = $19&1;
    if (!($20)) {
     $$pre = HEAP32[$__nb>>2]|0;
     $21 = $$pre;$43 = $$pre;$__nc$2 = $__nc$1;
     break;
    }
   }
   $11 = ___cxa_find_matching_catch()|0;
   $12 = tempRet0;
   $ehselector$slot$162 = $12;$exn$slot$163 = $11;
   ___resumeException($exn$slot$163|0);
   // unreachable;
  } else {
   $$pre64 = HEAP32[$__nb>>2]|0;
   $21 = $$pre64;$43 = 0;$__nc$2 = $__nc$0;
  }
 } while(0);
 $add$ptr34 = (($21) + ($__nc$2)|0);
 $call36 = (__ZNSt3__114__num_put_base18__identify_paddingEPcS1_RKNS_8ios_baseE($21,$add$ptr34,$__iob)|0);
 $cmp40 = ($21|0)==($__nar|0);
 if ($cmp40) {
  $28 = $__nar;$38 = 0;$__ob$0 = $__o;
  label = 20;
 } else {
  $mul = $__nc$2 << 1;
  $call45 = (_malloc($mul)|0);
  $cmp46 = ($call45|0)==(0|0);
  if ($cmp46) {
   __THREW__ = 0;
   invoke_v(383);
   $22 = __THREW__; __THREW__ = 0;
   $23 = $22&1;
   if ($23) {
    $60 = 0;
    label = 19;
   } else {
    $$pre65 = HEAP32[$__nb>>2]|0;
    $28 = $$pre65;$38 = 0;$__ob$0 = 0;
    label = 20;
   }
  } else {
   $28 = $21;$38 = $call45;$__ob$0 = $call45;
   label = 20;
  }
 }
 do {
  if ((label|0) == 20) {
   __THREW__ = 0;
   invoke_vii(358,($ref$tmp51|0),($__iob|0));
   $26 = __THREW__; __THREW__ = 0;
   $27 = $26&1;
   if ($27) {
    $60 = $38;
    label = 19;
   } else {
    __THREW__ = 0;
    invoke_viiiiiii(402,($28|0),($call36|0),($add$ptr34|0),($__ob$0|0),($__op|0),($__oe|0),($ref$tmp51|0));
    $29 = __THREW__; __THREW__ = 0;
    $30 = $29&1;
    if ($30) {
     $48 = ___cxa_find_matching_catch()|0;
     $49 = tempRet0;
     $50 = HEAP32[$ref$tmp51>>2]|0;
     (__ZNSt3__114__shared_count16__release_sharedEv($50)|0);
     $51 = $38;$ehselector$slot$0 = $49;$exn$slot$0 = $48;
     break;
    }
    $31 = HEAP32[$ref$tmp51>>2]|0;
    (__ZNSt3__114__shared_count16__release_sharedEv($31)|0);
    $32 = HEAP32[$__s>>2]|0;
    HEAP32[$agg$tmp>>2] = $32;
    $33 = HEAP32[$__op>>2]|0;
    $34 = HEAP32[$__oe>>2]|0;
    __THREW__ = 0;
    ;HEAP32[$agg$tmp$byval_copy+0>>2]=HEAP32[$agg$tmp+0>>2]|0;
    invoke_viiiiiii(360,($ref$tmp55|0),($agg$tmp$byval_copy|0),($__ob$0|0),($33|0),($34|0),($__iob|0),($__fl|0));
    $35 = __THREW__; __THREW__ = 0;
    $36 = $35&1;
    if ($36) {
     $60 = $38;
     label = 19;
    } else {
     $37 = HEAP32[$ref$tmp55>>2]|0;
     HEAP32[$__s>>2] = $37;
     HEAP32[$agg$result>>2] = $37;
     $tobool$i$i$i38 = ($38|0)==(0|0);
     if (!($tobool$i$i$i38)) {
      __THREW__ = 0;
      invoke_vi(384,($38|0));
      $39 = __THREW__; __THREW__ = 0;
      $40 = $39&1;
      if ($40) {
       $41 = ___cxa_find_matching_catch(0|0)|0;
       $42 = tempRet0;
       ___clang_call_terminate($41);
       // unreachable;
      }
     }
     $tobool$i$i$i44 = ($43|0)==(0|0);
     if ($tobool$i$i$i44) {
      STACKTOP = sp;return;
     }
     __THREW__ = 0;
     invoke_vi(384,($43|0));
     $44 = __THREW__; __THREW__ = 0;
     $45 = $44&1;
     if ($45) {
      $46 = ___cxa_find_matching_catch(0|0)|0;
      $47 = tempRet0;
      ___clang_call_terminate($46);
      // unreachable;
     } else {
      STACKTOP = sp;return;
     }
    }
   }
  }
 } while(0);
 if ((label|0) == 19) {
  $24 = ___cxa_find_matching_catch()|0;
  $25 = tempRet0;
  $51 = $60;$ehselector$slot$0 = $25;$exn$slot$0 = $24;
 }
 $tobool$i$i$i20 = ($51|0)==(0|0);
 if (!($tobool$i$i$i20)) {
  __THREW__ = 0;
  invoke_vi(384,($51|0));
  $52 = __THREW__; __THREW__ = 0;
  $53 = $52&1;
  if ($53) {
   $54 = ___cxa_find_matching_catch(0|0)|0;
   $55 = tempRet0;
   ___clang_call_terminate($54);
   // unreachable;
  }
 }
 $tobool$i$i$i = ($43|0)==(0|0);
 if ($tobool$i$i$i) {
  $ehselector$slot$162 = $ehselector$slot$0;$exn$slot$163 = $exn$slot$0;
  ___resumeException($exn$slot$163|0);
  // unreachable;
 }
 __THREW__ = 0;
 invoke_vi(384,($43|0));
 $56 = __THREW__; __THREW__ = 0;
 $57 = $56&1;
 if ($57) {
  $58 = ___cxa_find_matching_catch(0|0)|0;
  $59 = tempRet0;
  ___clang_call_terminate($58);
  // unreachable;
 } else {
  $ehselector$slot$162 = $ehselector$slot$0;$exn$slot$163 = $exn$slot$0;
  ___resumeException($exn$slot$163|0);
  // unreachable;
 }
}
function __ZNSt3__114__num_put_base14__format_floatEPcPKcj($__fmtp,$__len,$__flags) {
 $__fmtp = $__fmtp|0;
 $__len = $__len|0;
 $__flags = $__flags|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $__fmtp$addr$0 = 0, $__fmtp$addr$1 = 0, $__fmtp$addr$2$lcssa = 0, $__fmtp$addr$2$ph = 0, $__fmtp$addr$219 = 0, $__len$addr$018 = 0, $and = 0, $and1 = 0, $and6 = 0, $and7 = 0, $cmp8 = 0, $incdec$ptr = 0, $incdec$ptr10 = 0, $incdec$ptr11 = 0;
 var $incdec$ptr14 = 0, $incdec$ptr15 = 0, $incdec$ptr4 = 0, $specify_precision$0$off0$ph = 0, $tobool = 0, $tobool13 = 0, $tobool1317 = 0, $tobool18 = 0, $tobool2 = 0, $tobool25 = 0, $tobool32 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $and = $__flags & 2048;
 $tobool = ($and|0)==(0);
 if ($tobool) {
  $__fmtp$addr$0 = $__fmtp;
 } else {
  $incdec$ptr = (($__fmtp) + 1|0);
  HEAP8[$__fmtp>>0] = 43;
  $__fmtp$addr$0 = $incdec$ptr;
 }
 $and1 = $__flags & 1024;
 $tobool2 = ($and1|0)==(0);
 if ($tobool2) {
  $__fmtp$addr$1 = $__fmtp$addr$0;
 } else {
  $incdec$ptr4 = (($__fmtp$addr$0) + 1|0);
  HEAP8[$__fmtp$addr$0>>0] = 35;
  $__fmtp$addr$1 = $incdec$ptr4;
 }
 $and6 = $__flags & 260;
 $and7 = $__flags >>> 14;
 $cmp8 = ($and6|0)==(260);
 if ($cmp8) {
  $__fmtp$addr$2$ph = $__fmtp$addr$1;$specify_precision$0$off0$ph = 0;
 } else {
  $incdec$ptr10 = (($__fmtp$addr$1) + 1|0);
  HEAP8[$__fmtp$addr$1>>0] = 46;
  $incdec$ptr11 = (($__fmtp$addr$1) + 2|0);
  HEAP8[$incdec$ptr10>>0] = 42;
  $__fmtp$addr$2$ph = $incdec$ptr11;$specify_precision$0$off0$ph = 1;
 }
 $0 = HEAP8[$__len>>0]|0;
 $tobool1317 = ($0<<24>>24)==(0);
 if ($tobool1317) {
  $__fmtp$addr$2$lcssa = $__fmtp$addr$2$ph;
 } else {
  $1 = $0;$__fmtp$addr$219 = $__fmtp$addr$2$ph;$__len$addr$018 = $__len;
  while(1) {
   $incdec$ptr14 = (($__len$addr$018) + 1|0);
   $incdec$ptr15 = (($__fmtp$addr$219) + 1|0);
   HEAP8[$__fmtp$addr$219>>0] = $1;
   $2 = HEAP8[$incdec$ptr14>>0]|0;
   $tobool13 = ($2<<24>>24)==(0);
   if ($tobool13) {
    $__fmtp$addr$2$lcssa = $incdec$ptr15;
    break;
   } else {
    $1 = $2;$__fmtp$addr$219 = $incdec$ptr15;$__len$addr$018 = $incdec$ptr14;
   }
  }
 }
 do {
  if ((($and6|0) == 4)) {
   $3 = $and7 & 1;
   $tobool18 = ($3|0)==(0);
   if ($tobool18) {
    HEAP8[$__fmtp$addr$2$lcssa>>0] = 102;
    break;
   } else {
    HEAP8[$__fmtp$addr$2$lcssa>>0] = 70;
    break;
   }
  } else if ((($and6|0) == 256)) {
   $4 = $and7 & 1;
   $tobool25 = ($4|0)==(0);
   if ($tobool25) {
    HEAP8[$__fmtp$addr$2$lcssa>>0] = 101;
    break;
   } else {
    HEAP8[$__fmtp$addr$2$lcssa>>0] = 69;
    break;
   }
  } else {
   $5 = $and7 & 1;
   $tobool32 = ($5|0)!=(0);
   if ($cmp8) {
    if ($tobool32) {
     HEAP8[$__fmtp$addr$2$lcssa>>0] = 65;
     break;
    } else {
     HEAP8[$__fmtp$addr$2$lcssa>>0] = 97;
     break;
    }
   } else {
    if ($tobool32) {
     HEAP8[$__fmtp$addr$2$lcssa>>0] = 71;
     break;
    } else {
     HEAP8[$__fmtp$addr$2$lcssa>>0] = 103;
     break;
    }
   }
  }
 } while(0);
 STACKTOP = sp;return ($specify_precision$0$off0$ph|0);
}
function __ZNSt3__112__asprintf_lEPPcP15__locale_structPKcz($__s,$__l,$__format,$varargs) {
 $__s = $__s|0;
 $__l = $__l|0;
 $__format = $__format|0;
 $varargs = $varargs|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__va = 0, $call = 0, $call3 = 0, $tobool$i$i$i = 0, $tobool$i$i$i4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__va = sp;
 HEAP32[$__va>>2] = $varargs;
 $call = (_uselocale(($__l|0))|0);
 __THREW__ = 0;
 $call3 = (invoke_iiii(403,($__s|0),($__format|0),($__va|0))|0);
 $0 = __THREW__; __THREW__ = 0;
 $1 = $0&1;
 if ($1) {
  $6 = ___cxa_find_matching_catch()|0;
  $7 = tempRet0;
  $tobool$i$i$i = ($call|0)==(0|0);
  if ($tobool$i$i$i) {
   ___resumeException($6|0);
   // unreachable;
  }
  __THREW__ = 0;
  (invoke_ii(397,($call|0))|0);
  $8 = __THREW__; __THREW__ = 0;
  $9 = $8&1;
  if ($9) {
   $10 = ___cxa_find_matching_catch(0|0)|0;
   $11 = tempRet0;
   ___clang_call_terminate($10);
   // unreachable;
  } else {
   ___resumeException($6|0);
   // unreachable;
  }
 } else {
  $tobool$i$i$i4 = ($call|0)==(0|0);
  if ($tobool$i$i$i4) {
   STACKTOP = sp;return ($call3|0);
  }
  __THREW__ = 0;
  (invoke_ii(397,($call|0))|0);
  $2 = __THREW__; __THREW__ = 0;
  $3 = $2&1;
  if ($3) {
   $4 = ___cxa_find_matching_catch(0|0)|0;
   $5 = tempRet0;
   ___clang_call_terminate($4);
   // unreachable;
  } else {
   STACKTOP = sp;return ($call3|0);
  }
 }
 return 0|0;
}
function __ZNSt3__19__num_putIcE23__widen_and_group_floatEPcS2_S2_S2_RS2_S3_RKNS_6localeE($__nb,$__np,$__ne,$__ob,$__op,$__oe,$__loc) {
 $__nb = $__nb|0;
 $__np = $__np|0;
 $__ne = $__ne|0;
 $__ob = $__ob|0;
 $__op = $__op|0;
 $__oe = $__oe|0;
 $__loc = $__loc|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $8 = 0, $9 = 0, $__data_$i$i$i119 = 0;
 var $__dc$0153 = 0, $__dc$1 = 0, $__dg$0154 = 0, $__dg$1 = 0, $__first$addr$08$i$i = 0, $__first$addr$08$i$i132 = 0, $__grouping = 0, $__nf$0 = 0, $__nf$1 = 0, $__nf$2148 = 0, $__nf$3 = 0, $__ns$0169 = 0, $__ns$1161 = 0, $__ns$2 = 0, $__p$0155 = 0, $__size_$i2$i = 0, $__size_$i2$i$i = 0, $add$ptr = 0, $add$ptr$i = 0, $add$ptr$i125 = 0;
 var $add$ptr116 = 0, $add$ptr123 = 0, $add$ptr90 = 0, $and$i$i = 0, $and$i$i$i = 0, $and$i$i$i107 = 0, $arrayidx$i$i$i = 0, $arrayidx$i$i$i$ = 0, $arrayidx$i$i$i$179 = 0, $arrayidx10 = 0, $call$i = 0, $call$i104105 = 0, $call$i114115 = 0, $call$i140141 = 0, $call$i73 = 0, $call$i7677 = 0, $call$i8081 = 0, $call$i8586 = 0, $call$i99100 = 0, $call29 = 0;
 var $call31 = 0, $call40 = 0, $call42 = 0, $cmp$i = 0, $cmp$i$i = 0, $cmp$i$i127 = 0, $cmp1$i$i = 0, $cmp1$i$i135 = 0, $cmp117 = 0, $cmp17$i$i = 0, $cmp17$i$i129 = 0, $cmp26 = 0, $cmp26168 = 0, $cmp36 = 0, $cmp36160 = 0, $cmp6 = 0, $cmp62 = 0, $cmp62152 = 0, $cmp67 = 0, $cmp72 = 0;
 var $cmp76 = 0, $cmp8 = 0, $cmp94 = 0, $cmp94147 = 0, $cmp97 = 0, $cond$i = 0, $cond$i$i = 0, $conv$i$i = 0, $conv$i$i$i = 0, $conv27 = 0, $conv38 = 0, $conv71 = 0, $inc = 0, $inc$__dg$0 = 0, $inc83 = 0, $incdec$ptr = 0, $incdec$ptr$i$i = 0, $incdec$ptr$i$i134 = 0, $incdec$ptr101 = 0, $incdec$ptr102 = 0;
 var $incdec$ptr106 = 0, $incdec$ptr109 = 0, $incdec$ptr2$i$i = 0, $incdec$ptr2$i$i133 = 0, $incdec$ptr21 = 0, $incdec$ptr22 = 0, $incdec$ptr25 = 0, $incdec$ptr34 = 0, $incdec$ptr47 = 0, $incdec$ptr5 = 0, $incdec$ptr6$i$i = 0, $incdec$ptr6$i$i128 = 0, $incdec$ptr74 = 0, $incdec$ptr82 = 0, $incdec$ptr85 = 0, $incdec$ptr9$i$i = 0, $incdec$ptr9$i$i131 = 0, $lpad$phi$index = 0, $lpad$phi$index5 = 0, $shr1$i$i = 0;
 var $shr1$i$i$i = 0, $storemerge = 0, $sub = 0, $sub$ptr$lhs$cast = 0, $sub$ptr$lhs$cast120 = 0, $sub$ptr$lhs$cast54 = 0, $sub$ptr$lhs$cast87 = 0, $sub$ptr$rhs$cast = 0, $sub$ptr$rhs$cast114 = 0, $sub$ptr$rhs$cast121 = 0, $sub$ptr$rhs$cast55 = 0, $sub$ptr$rhs$cast88 = 0, $sub$ptr$sub = 0, $sub$ptr$sub115 = 0, $sub$ptr$sub122 = 0, $sub$ptr$sub56 = 0, $sub$ptr$sub89 = 0, $tobool = 0, $tobool$i$i = 0, $tobool$i$i$i = 0;
 var $tobool$i$i$i108 = 0, $tobool43 = 0, $vfn$i = 0, $vfn$i103 = 0, $vfn$i113 = 0, $vfn$i139 = 0, $vfn$i75 = 0, $vfn$i79 = 0, $vfn$i84 = 0, $vfn$i89 = 0, $vfn$i93 = 0, $vfn$i98 = 0, $vtable$i = 0, $vtable$i102 = 0, $vtable$i112 = 0, $vtable$i138 = 0, $vtable$i74 = 0, $vtable$i78 = 0, $vtable$i83 = 0, $vtable$i88 = 0;
 var $vtable$i92 = 0, $vtable$i97 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__grouping = sp;
 $call$i = (__ZNKSt3__16locale9use_facetERNS0_2idE($__loc,4616)|0);
 $call$i73 = (__ZNKSt3__16locale9use_facetERNS0_2idE($__loc,4760)|0);
 $vtable$i = HEAP32[$call$i73>>2]|0;
 $vfn$i = (($vtable$i) + 20|0);
 $0 = HEAP32[$vfn$i>>2]|0;
 FUNCTION_TABLE_vii[$0 & 511]($__grouping,$call$i73);
 HEAP32[$__oe>>2] = $__ob;
 $1 = HEAP8[$__nb>>0]|0;
 if ((($1<<24>>24) == 43) | (($1<<24>>24) == 45)) {
  $vtable$i74 = HEAP32[$call$i>>2]|0;
  $vfn$i75 = (($vtable$i74) + 28|0);
  $2 = HEAP32[$vfn$i75>>2]|0;
  __THREW__ = 0;
  $call$i7677 = (invoke_iii($2|0,($call$i|0),($1|0))|0);
  $3 = __THREW__; __THREW__ = 0;
  $4 = $3&1;
  if (!($4)) {
   $incdec$ptr = (($__nb) + 1|0);
   $5 = HEAP32[$__oe>>2]|0;
   $incdec$ptr5 = (($5) + 1|0);
   HEAP32[$__oe>>2] = $incdec$ptr5;
   HEAP8[$5>>0] = $call$i7677;
   $__nf$0 = $incdec$ptr;
   label = 10;
  }
 } else {
  $__nf$0 = $__nb;
  label = 10;
 }
 L4: do {
  if ((label|0) == 10) {
   $sub$ptr$lhs$cast = $__ne;
   $sub$ptr$rhs$cast = $__nf$0;
   $sub$ptr$sub = (($sub$ptr$lhs$cast) - ($sub$ptr$rhs$cast))|0;
   $cmp6 = ($sub$ptr$sub|0)>(1);
   L6: do {
    if ($cmp6) {
     $16 = HEAP8[$__nf$0>>0]|0;
     $cmp8 = ($16<<24>>24)==(48);
     if ($cmp8) {
      $arrayidx10 = (($__nf$0) + 1|0);
      $17 = HEAP8[$arrayidx10>>0]|0;
      if ((($17<<24>>24) == 88) | (($17<<24>>24) == 120)) {
       $vtable$i78 = HEAP32[$call$i>>2]|0;
       $vfn$i79 = (($vtable$i78) + 28|0);
       $18 = HEAP32[$vfn$i79>>2]|0;
       __THREW__ = 0;
       $call$i8081 = (invoke_iii($18|0,($call$i|0),48)|0);
       $19 = __THREW__; __THREW__ = 0;
       $20 = $19&1;
       if ($20) {
        break L4;
       }
       $21 = HEAP32[$__oe>>2]|0;
       $incdec$ptr21 = (($21) + 1|0);
       HEAP32[$__oe>>2] = $incdec$ptr21;
       HEAP8[$21>>0] = $call$i8081;
       $incdec$ptr22 = (($__nf$0) + 2|0);
       $22 = HEAP8[$arrayidx10>>0]|0;
       $vtable$i83 = HEAP32[$call$i>>2]|0;
       $vfn$i84 = (($vtable$i83) + 28|0);
       $23 = HEAP32[$vfn$i84>>2]|0;
       __THREW__ = 0;
       $call$i8586 = (invoke_iii($23|0,($call$i|0),($22|0))|0);
       $24 = __THREW__; __THREW__ = 0;
       $25 = $24&1;
       if ($25) {
        break L4;
       }
       $26 = HEAP32[$__oe>>2]|0;
       $incdec$ptr25 = (($26) + 1|0);
       HEAP32[$__oe>>2] = $incdec$ptr25;
       HEAP8[$26>>0] = $call$i8586;
       $cmp26168 = ($incdec$ptr22>>>0)<($__ne>>>0);
       if ($cmp26168) {
        $__ns$0169 = $incdec$ptr22;
        while(1) {
         $27 = HEAP8[$__ns$0169>>0]|0;
         __THREW__ = 0;
         $call29 = (invoke_i(395)|0);
         $28 = __THREW__; __THREW__ = 0;
         $29 = $28&1;
         if ($29) {
          break;
         }
         $conv27 = $27 << 24 >> 24;
         __THREW__ = 0;
         $call31 = (invoke_iii(404,($conv27|0),($call29|0))|0);
         $30 = __THREW__; __THREW__ = 0;
         $31 = $30&1;
         if ($31) {
          break;
         }
         $tobool = ($call31|0)==(0);
         $incdec$ptr34 = (($__ns$0169) + 1|0);
         if ($tobool) {
          $__nf$1 = $incdec$ptr22;$__ns$2 = $__ns$0169;
          break L6;
         }
         $cmp26 = ($incdec$ptr34>>>0)<($__ne>>>0);
         if ($cmp26) {
          $__ns$0169 = $incdec$ptr34;
         } else {
          $__nf$1 = $incdec$ptr22;$__ns$2 = $incdec$ptr34;
          break L6;
         }
        }
        $12 = ___cxa_find_matching_catch()|0;
        $13 = tempRet0;
        $lpad$phi$index = $12;$lpad$phi$index5 = $13;
        __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
        ___resumeException($lpad$phi$index|0);
        // unreachable;
       } else {
        $__nf$1 = $incdec$ptr22;$__ns$2 = $incdec$ptr22;
       }
      } else {
       label = 11;
      }
     } else {
      label = 11;
     }
    } else {
     label = 11;
    }
   } while(0);
   L19: do {
    if ((label|0) == 11) {
     $cmp36160 = ($__nf$0>>>0)<($__ne>>>0);
     if ($cmp36160) {
      $__ns$1161 = $__nf$0;
      while(1) {
       $32 = HEAP8[$__ns$1161>>0]|0;
       __THREW__ = 0;
       $call40 = (invoke_i(395)|0);
       $33 = __THREW__; __THREW__ = 0;
       $34 = $33&1;
       if ($34) {
        break;
       }
       $conv38 = $32 << 24 >> 24;
       __THREW__ = 0;
       $call42 = (invoke_iii(405,($conv38|0),($call40|0))|0);
       $35 = __THREW__; __THREW__ = 0;
       $36 = $35&1;
       if ($36) {
        break;
       }
       $tobool43 = ($call42|0)==(0);
       $incdec$ptr47 = (($__ns$1161) + 1|0);
       if ($tobool43) {
        $__nf$1 = $__nf$0;$__ns$2 = $__ns$1161;
        break L19;
       }
       $cmp36 = ($incdec$ptr47>>>0)<($__ne>>>0);
       if ($cmp36) {
        $__ns$1161 = $incdec$ptr47;
       } else {
        $__nf$1 = $__nf$0;$__ns$2 = $incdec$ptr47;
        break L19;
       }
      }
      $10 = ___cxa_find_matching_catch()|0;
      $11 = tempRet0;
      $lpad$phi$index = $10;$lpad$phi$index5 = $11;
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
      ___resumeException($lpad$phi$index|0);
      // unreachable;
     } else {
      $__nf$1 = $__nf$0;$__ns$2 = $__nf$0;
     }
    }
   } while(0);
   $37 = HEAP8[$__grouping>>0]|0;
   $and$i$i$i = $37 & 1;
   $tobool$i$i$i = ($and$i$i$i<<24>>24)==(0);
   if ($tobool$i$i$i) {
    $conv$i$i$i = $37&255;
    $shr1$i$i$i = $conv$i$i$i >>> 1;
    $cond$i$i = $shr1$i$i$i;
   } else {
    $__size_$i2$i$i = (($__grouping) + 4|0);
    $38 = HEAP32[$__size_$i2$i$i>>2]|0;
    $cond$i$i = $38;
   }
   $cmp$i = ($cond$i$i|0)==(0);
   if ($cmp$i) {
    $39 = HEAP32[$__oe>>2]|0;
    $vtable$i92 = HEAP32[$call$i>>2]|0;
    $vfn$i93 = (($vtable$i92) + 32|0);
    $40 = HEAP32[$vfn$i93>>2]|0;
    __THREW__ = 0;
    (invoke_iiiii($40|0,($call$i|0),($__nf$1|0),($__ns$2|0),($39|0))|0);
    $41 = __THREW__; __THREW__ = 0;
    $42 = $41&1;
    if ($42) {
     break;
    }
    $sub$ptr$lhs$cast54 = $__ns$2;
    $sub$ptr$rhs$cast55 = $__nf$1;
    $sub$ptr$sub56 = (($sub$ptr$lhs$cast54) - ($sub$ptr$rhs$cast55))|0;
    $43 = HEAP32[$__oe>>2]|0;
    $add$ptr = (($43) + ($sub$ptr$sub56)|0);
    HEAP32[$__oe>>2] = $add$ptr;
   } else {
    $cmp$i$i = ($__nf$1|0)==($__ns$2|0);
    if (!($cmp$i$i)) {
     $incdec$ptr6$i$i = (($__ns$2) + -1|0);
     $cmp17$i$i = ($incdec$ptr6$i$i>>>0)>($__nf$1>>>0);
     if ($cmp17$i$i) {
      $__first$addr$08$i$i = $__nf$1;$incdec$ptr9$i$i = $incdec$ptr6$i$i;
      while(1) {
       $44 = HEAP8[$__first$addr$08$i$i>>0]|0;
       $45 = HEAP8[$incdec$ptr9$i$i>>0]|0;
       HEAP8[$__first$addr$08$i$i>>0] = $45;
       HEAP8[$incdec$ptr9$i$i>>0] = $44;
       $incdec$ptr2$i$i = (($__first$addr$08$i$i) + 1|0);
       $incdec$ptr$i$i = (($incdec$ptr9$i$i) + -1|0);
       $cmp1$i$i = ($incdec$ptr2$i$i>>>0)<($incdec$ptr$i$i>>>0);
       if ($cmp1$i$i) {
        $__first$addr$08$i$i = $incdec$ptr2$i$i;$incdec$ptr9$i$i = $incdec$ptr$i$i;
       } else {
        break;
       }
      }
     }
    }
    $vtable$i102 = HEAP32[$call$i73>>2]|0;
    $vfn$i103 = (($vtable$i102) + 16|0);
    $46 = HEAP32[$vfn$i103>>2]|0;
    __THREW__ = 0;
    $call$i104105 = (invoke_ii($46|0,($call$i73|0))|0);
    $47 = __THREW__; __THREW__ = 0;
    $48 = $47&1;
    if ($48) {
     break;
    }
    $cmp62152 = ($__nf$1>>>0)<($__ns$2>>>0);
    L41: do {
     if ($cmp62152) {
      $arrayidx$i$i$i = (($__grouping) + 1|0);
      $__size_$i2$i = (($__grouping) + 4|0);
      $__data_$i$i$i119 = (($__grouping) + 8|0);
      $__dc$0153 = 0;$__dg$0154 = 0;$__p$0155 = $__nf$1;
      while(1) {
       $49 = HEAP8[$__grouping>>0]|0;
       $and$i$i$i107 = $49 & 1;
       $tobool$i$i$i108 = ($and$i$i$i107<<24>>24)==(0);
       $50 = HEAP32[$__data_$i$i$i119>>2]|0;
       $arrayidx$i$i$i$ = $tobool$i$i$i108 ? $arrayidx$i$i$i : $50;
       $add$ptr$i = (($arrayidx$i$i$i$) + ($__dg$0154)|0);
       $51 = HEAP8[$add$ptr$i>>0]|0;
       $cmp67 = ($51<<24>>24)>(0);
       if ($cmp67) {
        $52 = HEAP32[$__data_$i$i$i119>>2]|0;
        $arrayidx$i$i$i$179 = $tobool$i$i$i108 ? $arrayidx$i$i$i : $52;
        $add$ptr$i125 = (($arrayidx$i$i$i$179) + ($__dg$0154)|0);
        $53 = HEAP8[$add$ptr$i125>>0]|0;
        $conv71 = $53 << 24 >> 24;
        $cmp72 = ($__dc$0153|0)==($conv71|0);
        if ($cmp72) {
         $54 = HEAP32[$__oe>>2]|0;
         $incdec$ptr74 = (($54) + 1|0);
         HEAP32[$__oe>>2] = $incdec$ptr74;
         HEAP8[$54>>0] = $call$i104105;
         $55 = HEAP8[$__grouping>>0]|0;
         $and$i$i = $55 & 1;
         $tobool$i$i = ($and$i$i<<24>>24)==(0);
         if ($tobool$i$i) {
          $conv$i$i = $55&255;
          $shr1$i$i = $conv$i$i >>> 1;
          $cond$i = $shr1$i$i;
         } else {
          $56 = HEAP32[$__size_$i2$i>>2]|0;
          $cond$i = $56;
         }
         $sub = (($cond$i) + -1)|0;
         $cmp76 = ($__dg$0154>>>0)<($sub>>>0);
         $inc = $cmp76&1;
         $inc$__dg$0 = (($inc) + ($__dg$0154))|0;
         $__dc$1 = 0;$__dg$1 = $inc$__dg$0;
        } else {
         $__dc$1 = $__dc$0153;$__dg$1 = $__dg$0154;
        }
       } else {
        $__dc$1 = $__dc$0153;$__dg$1 = $__dg$0154;
       }
       $57 = HEAP8[$__p$0155>>0]|0;
       $vtable$i138 = HEAP32[$call$i>>2]|0;
       $vfn$i139 = (($vtable$i138) + 28|0);
       $58 = HEAP32[$vfn$i139>>2]|0;
       __THREW__ = 0;
       $call$i140141 = (invoke_iii($58|0,($call$i|0),($57|0))|0);
       $59 = __THREW__; __THREW__ = 0;
       $60 = $59&1;
       if ($60) {
        break;
       }
       $61 = HEAP32[$__oe>>2]|0;
       $incdec$ptr82 = (($61) + 1|0);
       HEAP32[$__oe>>2] = $incdec$ptr82;
       HEAP8[$61>>0] = $call$i140141;
       $inc83 = (($__dc$1) + 1)|0;
       $incdec$ptr85 = (($__p$0155) + 1|0);
       $cmp62 = ($incdec$ptr85>>>0)<($__ns$2>>>0);
       if ($cmp62) {
        $__dc$0153 = $inc83;$__dg$0154 = $__dg$1;$__p$0155 = $incdec$ptr85;
       } else {
        break L41;
       }
      }
      $8 = ___cxa_find_matching_catch()|0;
      $9 = tempRet0;
      $lpad$phi$index = $8;$lpad$phi$index5 = $9;
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
      ___resumeException($lpad$phi$index|0);
      // unreachable;
     }
    } while(0);
    $sub$ptr$lhs$cast87 = $__nf$1;
    $sub$ptr$rhs$cast88 = $__nb;
    $sub$ptr$sub89 = (($sub$ptr$lhs$cast87) - ($sub$ptr$rhs$cast88))|0;
    $add$ptr90 = (($__ob) + ($sub$ptr$sub89)|0);
    $62 = HEAP32[$__oe>>2]|0;
    $cmp$i$i127 = ($add$ptr90|0)==($62|0);
    if (!($cmp$i$i127)) {
     $incdec$ptr6$i$i128 = (($62) + -1|0);
     $cmp17$i$i129 = ($incdec$ptr6$i$i128>>>0)>($add$ptr90>>>0);
     if ($cmp17$i$i129) {
      $__first$addr$08$i$i132 = $add$ptr90;$incdec$ptr9$i$i131 = $incdec$ptr6$i$i128;
      while(1) {
       $63 = HEAP8[$__first$addr$08$i$i132>>0]|0;
       $64 = HEAP8[$incdec$ptr9$i$i131>>0]|0;
       HEAP8[$__first$addr$08$i$i132>>0] = $64;
       HEAP8[$incdec$ptr9$i$i131>>0] = $63;
       $incdec$ptr2$i$i133 = (($__first$addr$08$i$i132) + 1|0);
       $incdec$ptr$i$i134 = (($incdec$ptr9$i$i131) + -1|0);
       $cmp1$i$i135 = ($incdec$ptr2$i$i133>>>0)<($incdec$ptr$i$i134>>>0);
       if ($cmp1$i$i135) {
        $__first$addr$08$i$i132 = $incdec$ptr2$i$i133;$incdec$ptr9$i$i131 = $incdec$ptr$i$i134;
       } else {
        break;
       }
      }
     }
    }
   }
   $cmp94147 = ($__ns$2>>>0)<($__ne>>>0);
   L63: do {
    if ($cmp94147) {
     $__nf$2148 = $__ns$2;
     while(1) {
      $65 = HEAP8[$__nf$2148>>0]|0;
      $cmp97 = ($65<<24>>24)==(46);
      if ($cmp97) {
       label = 51;
       break;
      }
      $vtable$i97 = HEAP32[$call$i>>2]|0;
      $vfn$i98 = (($vtable$i97) + 28|0);
      $70 = HEAP32[$vfn$i98>>2]|0;
      __THREW__ = 0;
      $call$i99100 = (invoke_iii($70|0,($call$i|0),($65|0))|0);
      $71 = __THREW__; __THREW__ = 0;
      $72 = $71&1;
      if ($72) {
       label = 4;
       break;
      }
      $73 = HEAP32[$__oe>>2]|0;
      $incdec$ptr106 = (($73) + 1|0);
      HEAP32[$__oe>>2] = $incdec$ptr106;
      HEAP8[$73>>0] = $call$i99100;
      $incdec$ptr109 = (($__nf$2148) + 1|0);
      $cmp94 = ($incdec$ptr109>>>0)<($__ne>>>0);
      if ($cmp94) {
       $__nf$2148 = $incdec$ptr109;
      } else {
       $__nf$3 = $incdec$ptr109;
       break L63;
      }
     }
     if ((label|0) == 4) {
      $6 = ___cxa_find_matching_catch()|0;
      $7 = tempRet0;
      $lpad$phi$index = $6;$lpad$phi$index5 = $7;
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
      ___resumeException($lpad$phi$index|0);
      // unreachable;
     }
     else if ((label|0) == 51) {
      $vtable$i112 = HEAP32[$call$i73>>2]|0;
      $vfn$i113 = (($vtable$i112) + 12|0);
      $66 = HEAP32[$vfn$i113>>2]|0;
      __THREW__ = 0;
      $call$i114115 = (invoke_ii($66|0,($call$i73|0))|0);
      $67 = __THREW__; __THREW__ = 0;
      $68 = $67&1;
      if ($68) {
       break L4;
      }
      $69 = HEAP32[$__oe>>2]|0;
      $incdec$ptr101 = (($69) + 1|0);
      HEAP32[$__oe>>2] = $incdec$ptr101;
      HEAP8[$69>>0] = $call$i114115;
      $incdec$ptr102 = (($__nf$2148) + 1|0);
      $__nf$3 = $incdec$ptr102;
      break;
     }
    } else {
     $__nf$3 = $__ns$2;
    }
   } while(0);
   $74 = HEAP32[$__oe>>2]|0;
   $vtable$i88 = HEAP32[$call$i>>2]|0;
   $vfn$i89 = (($vtable$i88) + 32|0);
   $75 = HEAP32[$vfn$i89>>2]|0;
   __THREW__ = 0;
   (invoke_iiiii($75|0,($call$i|0),($__nf$3|0),($__ne|0),($74|0))|0);
   $76 = __THREW__; __THREW__ = 0;
   $77 = $76&1;
   if (!($77)) {
    $sub$ptr$rhs$cast114 = $__nf$3;
    $sub$ptr$sub115 = (($sub$ptr$lhs$cast) - ($sub$ptr$rhs$cast114))|0;
    $78 = HEAP32[$__oe>>2]|0;
    $add$ptr116 = (($78) + ($sub$ptr$sub115)|0);
    HEAP32[$__oe>>2] = $add$ptr116;
    $cmp117 = ($__np|0)==($__ne|0);
    if ($cmp117) {
     $storemerge = $add$ptr116;
     HEAP32[$__op>>2] = $storemerge;
     __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
     STACKTOP = sp;return;
    }
    $sub$ptr$lhs$cast120 = $__np;
    $sub$ptr$rhs$cast121 = $__nb;
    $sub$ptr$sub122 = (($sub$ptr$lhs$cast120) - ($sub$ptr$rhs$cast121))|0;
    $add$ptr123 = (($__ob) + ($sub$ptr$sub122)|0);
    $storemerge = $add$ptr123;
    HEAP32[$__op>>2] = $storemerge;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
    STACKTOP = sp;return;
   }
  }
 } while(0);
 $14 = ___cxa_find_matching_catch()|0;
 $15 = tempRet0;
 $lpad$phi$index = $14;$lpad$phi$index5 = $15;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
 ___resumeException($lpad$phi$index|0);
 // unreachable;
}
function __ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEce($agg$result,$this,$__s,$__iob,$__fl,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__s = $__s|0;
 $__iob = $__iob|0;
 $__fl = $__fl|0;
 $__v = +$__v;
 var $$pre = 0, $$pre62 = 0, $$pre63 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__fmt = 0, $__fmtflags_$i = 0, $__nar = 0, $__nb = 0, $__nc$0 = 0, $__nc$1 = 0, $__nc$2 = 0, $__o = 0, $__ob$0 = 0, $__oe = 0, $__op = 0, $__precision_$i = 0, $__precision_$i24 = 0;
 var $add$ptr = 0, $add$ptr32 = 0, $agg$tmp = 0, $agg$tmp$byval_copy = 0, $call10 = 0, $call14 = 0, $call19 = 0, $call2 = 0, $call22 = 0, $call25 = 0, $call34 = 0, $call4 = 0, $call43 = 0, $call7 = 0, $cmp = 0, $cmp27 = 0, $cmp38 = 0, $cmp44 = 0, $ehselector$slot$0 = 0, $ehselector$slot$160 = 0;
 var $exn$slot$0 = 0, $exn$slot$161 = 0, $mul = 0, $ref$tmp49 = 0, $ref$tmp53 = 0, $vararg_buffer = 0, $vararg_buffer2 = 0, $vararg_buffer5 = 0, $vararg_buffer9 = 0, $vararg_ptr1 = 0, $vararg_ptr8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 176|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $agg$tmp$byval_copy = sp + 60|0;
 $vararg_buffer9 = sp + 16|0;
 $vararg_buffer5 = sp + 40|0;
 $vararg_buffer2 = sp + 8|0;
 $vararg_buffer = sp + 24|0;
 $__fmt = sp;
 $__nar = sp + 80|0;
 $__nb = sp + 76|0;
 $__o = sp + 110|0;
 $__op = sp + 52|0;
 $__oe = sp + 72|0;
 $ref$tmp49 = sp + 68|0;
 $ref$tmp53 = sp + 56|0;
 $agg$tmp = sp + 64|0;
 $0 = $__fmt;
 $1 = $0;
 HEAP32[$1>>2] = 37;
 $2 = (($0) + 4)|0;
 $3 = $2;
 HEAP32[$3>>2] = 0;
 $add$ptr = (($__fmt) + 1|0);
 $__fmtflags_$i = (($__iob) + 4|0);
 $4 = HEAP32[$__fmtflags_$i>>2]|0;
 $call2 = (__ZNSt3__114__num_put_base14__format_floatEPcPKcj($add$ptr,3336,$4)|0);
 HEAP32[$__nb>>2] = $__nar;
 $call4 = (__ZNSt3__16__clocEv()|0);
 if ($call2) {
  $__precision_$i = (($__iob) + 8|0);
  $5 = HEAP32[$__precision_$i>>2]|0;
  HEAP32[$vararg_buffer>>2] = $5;
  $vararg_ptr1 = (($vararg_buffer) + 4|0);
  HEAPF64[tempDoublePtr>>3]=$__v;HEAP32[$vararg_ptr1>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_ptr1+4>>2]=HEAP32[tempDoublePtr+4>>2];
  $call7 = (__ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($__nar,30,$call4,$__fmt,$vararg_buffer)|0);
  $__nc$0 = $call7;
 } else {
  HEAPF64[tempDoublePtr>>3]=$__v;HEAP32[$vararg_buffer2>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_buffer2+4>>2]=HEAP32[tempDoublePtr+4>>2];
  $call10 = (__ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($__nar,30,$call4,$__fmt,$vararg_buffer2)|0);
  $__nc$0 = $call10;
 }
 $cmp = ($__nc$0|0)>(29);
 do {
  if ($cmp) {
   if ($call2) {
    __THREW__ = 0;
    $call14 = (invoke_i(395)|0);
    $6 = __THREW__; __THREW__ = 0;
    $7 = $6&1;
    if (!($7)) {
     $__precision_$i24 = (($__iob) + 8|0);
     $8 = HEAP32[$__precision_$i24>>2]|0;
     __THREW__ = 0;
     HEAP32[$vararg_buffer5>>2] = $8;
     $vararg_ptr8 = (($vararg_buffer5) + 4|0);
     HEAPF64[tempDoublePtr>>3]=$__v;HEAP32[$vararg_ptr8>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_ptr8+4>>2]=HEAP32[tempDoublePtr+4>>2];
     $call19 = (invoke_iiiii(401,($__nb|0),($call14|0),($__fmt|0),($vararg_buffer5|0))|0);
     $9 = __THREW__; __THREW__ = 0;
     $10 = $9&1;
     if (!($10)) {
      $__nc$1 = $call19;
      label = 12;
     }
    }
   } else {
    __THREW__ = 0;
    $call22 = (invoke_i(395)|0);
    $13 = __THREW__; __THREW__ = 0;
    $14 = $13&1;
    if (!($14)) {
     __THREW__ = 0;
     HEAPF64[tempDoublePtr>>3]=$__v;HEAP32[$vararg_buffer9>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_buffer9+4>>2]=HEAP32[tempDoublePtr+4>>2];
     $call25 = (invoke_iiiii(401,($__nb|0),($call22|0),($__fmt|0),($vararg_buffer9|0))|0);
     $15 = __THREW__; __THREW__ = 0;
     $16 = $15&1;
     if (!($16)) {
      $__nc$1 = $call25;
      label = 12;
     }
    }
   }
   if ((label|0) == 12) {
    $17 = HEAP32[$__nb>>2]|0;
    $cmp27 = ($17|0)==(0|0);
    if (!($cmp27)) {
     $20 = $17;$38 = $17;$__nc$2 = $__nc$1;
     break;
    }
    __THREW__ = 0;
    invoke_v(383);
    $18 = __THREW__; __THREW__ = 0;
    $19 = $18&1;
    if (!($19)) {
     $$pre = HEAP32[$__nb>>2]|0;
     $20 = $$pre;$38 = $$pre;$__nc$2 = $__nc$1;
     break;
    }
   }
   $11 = ___cxa_find_matching_catch()|0;
   $12 = tempRet0;
   $ehselector$slot$160 = $12;$exn$slot$161 = $11;
   ___resumeException($exn$slot$161|0);
   // unreachable;
  } else {
   $$pre62 = HEAP32[$__nb>>2]|0;
   $20 = $$pre62;$38 = 0;$__nc$2 = $__nc$0;
  }
 } while(0);
 $add$ptr32 = (($20) + ($__nc$2)|0);
 $call34 = (__ZNSt3__114__num_put_base18__identify_paddingEPcS1_RKNS_8ios_baseE($20,$add$ptr32,$__iob)|0);
 $cmp38 = ($20|0)==($__nar|0);
 if ($cmp38) {
  $27 = $__nar;$37 = 0;$__ob$0 = $__o;
  label = 20;
 } else {
  $mul = $__nc$2 << 1;
  $call43 = (_malloc($mul)|0);
  $cmp44 = ($call43|0)==(0|0);
  if ($cmp44) {
   __THREW__ = 0;
   invoke_v(383);
   $21 = __THREW__; __THREW__ = 0;
   $22 = $21&1;
   if ($22) {
    $43 = 0;
    label = 19;
   } else {
    $$pre63 = HEAP32[$__nb>>2]|0;
    $27 = $$pre63;$37 = 0;$__ob$0 = 0;
    label = 20;
   }
  } else {
   $27 = $20;$37 = $call43;$__ob$0 = $call43;
   label = 20;
  }
 }
 do {
  if ((label|0) == 20) {
   __THREW__ = 0;
   invoke_vii(358,($ref$tmp49|0),($__iob|0));
   $25 = __THREW__; __THREW__ = 0;
   $26 = $25&1;
   if ($26) {
    $43 = $37;
    label = 19;
   } else {
    __THREW__ = 0;
    invoke_viiiiiii(402,($27|0),($call34|0),($add$ptr32|0),($__ob$0|0),($__op|0),($__oe|0),($ref$tmp49|0));
    $28 = __THREW__; __THREW__ = 0;
    $29 = $28&1;
    if ($29) {
     $39 = ___cxa_find_matching_catch()|0;
     $40 = tempRet0;
     $41 = HEAP32[$ref$tmp49>>2]|0;
     (__ZNSt3__114__shared_count16__release_sharedEv($41)|0);
     $42 = $37;$ehselector$slot$0 = $40;$exn$slot$0 = $39;
     break;
    }
    $30 = HEAP32[$ref$tmp49>>2]|0;
    (__ZNSt3__114__shared_count16__release_sharedEv($30)|0);
    $31 = HEAP32[$__s>>2]|0;
    HEAP32[$agg$tmp>>2] = $31;
    $32 = HEAP32[$__op>>2]|0;
    $33 = HEAP32[$__oe>>2]|0;
    __THREW__ = 0;
    ;HEAP32[$agg$tmp$byval_copy+0>>2]=HEAP32[$agg$tmp+0>>2]|0;
    invoke_viiiiiii(360,($ref$tmp53|0),($agg$tmp$byval_copy|0),($__ob$0|0),($32|0),($33|0),($__iob|0),($__fl|0));
    $34 = __THREW__; __THREW__ = 0;
    $35 = $34&1;
    if ($35) {
     $43 = $37;
     label = 19;
    } else {
     $36 = HEAP32[$ref$tmp53>>2]|0;
     HEAP32[$agg$result>>2] = $36;
     _free($37);
     _free($38);
     STACKTOP = sp;return;
    }
   }
  }
 } while(0);
 if ((label|0) == 19) {
  $23 = ___cxa_find_matching_catch()|0;
  $24 = tempRet0;
  $42 = $43;$ehselector$slot$0 = $24;$exn$slot$0 = $23;
 }
 _free($42);
 _free($38);
 $ehselector$slot$160 = $ehselector$slot$0;$exn$slot$161 = $exn$slot$0;
 ___resumeException($exn$slot$161|0);
 // unreachable;
}
function __ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcPKv($agg$result,$this,$__s,$__iob,$__fl,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__s = $__s|0;
 $__iob = $__iob|0;
 $__fl = $__fl|0;
 $__v = $__v|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $__fmt = 0, $__nar = 0, $__o = 0, $__op$0 = 0, $add$ptr = 0, $add$ptr13 = 0, $add$ptr19 = 0, $agg$tmp = 0, $agg$tmp$byval_copy = 0, $call = 0, $call$i8 = 0, $call3 = 0;
 var $call6 = 0, $cmp = 0, $ref$tmp = 0, $sub$ptr$lhs$cast16 = 0, $sub$ptr$rhs$cast = 0, $sub$ptr$sub18 = 0, $vararg_buffer = 0, $vfn$i = 0, $vtable$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $agg$tmp$byval_copy = sp + 12|0;
 $vararg_buffer = sp;
 $__fmt = sp + 54|0;
 $__nar = sp + 60|0;
 $__o = sp + 16|0;
 $ref$tmp = sp + 4|0;
 $agg$tmp = sp + 8|0;
 ;HEAP8[$__fmt+0>>0]=HEAP8[3416+0>>0]|0;HEAP8[$__fmt+1>>0]=HEAP8[3416+1>>0]|0;HEAP8[$__fmt+2>>0]=HEAP8[3416+2>>0]|0;HEAP8[$__fmt+3>>0]=HEAP8[3416+3>>0]|0;HEAP8[$__fmt+4>>0]=HEAP8[3416+4>>0]|0;HEAP8[$__fmt+5>>0]=HEAP8[3416+5>>0]|0;
 $call = (__ZNSt3__16__clocEv()|0);
 HEAP32[$vararg_buffer>>2] = $__v;
 $call3 = (__ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($__nar,20,$call,$__fmt,$vararg_buffer)|0);
 $add$ptr = (($__nar) + ($call3)|0);
 $call6 = (__ZNSt3__114__num_put_base18__identify_paddingEPcS1_RKNS_8ios_baseE($__nar,$add$ptr,$__iob)|0);
 __ZNKSt3__18ios_base6getlocEv($ref$tmp,$__iob);
 __THREW__ = 0;
 $call$i8 = (invoke_iii(359,($ref$tmp|0),(4616|0))|0);
 $0 = __THREW__; __THREW__ = 0;
 $1 = $0&1;
 if ($1) {
  $4 = ___cxa_find_matching_catch()|0;
  $5 = tempRet0;
  $6 = HEAP32[$ref$tmp>>2]|0;
  (__ZNSt3__114__shared_count16__release_sharedEv($6)|0);
  ___resumeException($4|0);
  // unreachable;
 }
 $2 = HEAP32[$ref$tmp>>2]|0;
 (__ZNSt3__114__shared_count16__release_sharedEv($2)|0);
 $vtable$i = HEAP32[$call$i8>>2]|0;
 $vfn$i = (($vtable$i) + 32|0);
 $3 = HEAP32[$vfn$i>>2]|0;
 (FUNCTION_TABLE_iiiii[$3 & 511]($call$i8,$__nar,$add$ptr,$__o)|0);
 $add$ptr13 = (($__o) + ($call3)|0);
 $cmp = ($call6|0)==($add$ptr|0);
 if ($cmp) {
  $__op$0 = $add$ptr13;
  $7 = HEAP32[$__s>>2]|0;
  HEAP32[$agg$tmp>>2] = $7;
  ;HEAP32[$agg$tmp$byval_copy+0>>2]=HEAP32[$agg$tmp+0>>2]|0;
  __ZNSt3__116__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($agg$result,$agg$tmp$byval_copy,$__o,$__op$0,$add$ptr13,$__iob,$__fl);
  STACKTOP = sp;return;
 }
 $sub$ptr$rhs$cast = $__nar;
 $sub$ptr$lhs$cast16 = $call6;
 $sub$ptr$sub18 = (($sub$ptr$lhs$cast16) - ($sub$ptr$rhs$cast))|0;
 $add$ptr19 = (($__o) + ($sub$ptr$sub18)|0);
 $__op$0 = $add$ptr19;
 $7 = HEAP32[$__s>>2]|0;
 HEAP32[$agg$tmp>>2] = $7;
 ;HEAP32[$agg$tmp$byval_copy+0>>2]=HEAP32[$agg$tmp+0>>2]|0;
 __ZNSt3__116__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($agg$result,$agg$tmp$byval_copy,$__o,$__op$0,$add$ptr13,$__iob,$__fl);
 STACKTOP = sp;return;
}
function __ZNSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 STACKTOP = sp;return;
}
function __ZNSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED1Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return;
}
function __ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwb($agg$result,$this,$__s,$__iob,$__fl,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__s = $__s|0;
 $__iob = $__iob|0;
 $__fl = $__fl|0;
 $__v = $__v|0;
 var $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__data_$i$i$i = 0, $__data_$i$i$i15$pre = 0, $__data_$i$i$i15$pre$phiZZZZ2D = 0, $__data_$i1$i$i = 0, $__data_$i1$i$i14$pre = 0, $__data_$i1$i$i14$pre$phiZZZZ2D = 0, $__eout_$i$i = 0, $__fmtflags_$i = 0, $__i$sroa$0$0$load2021 = 0, $__i$sroa$0$0$load2021$ph = 0, $__nm = 0, $__nout_$i$i = 0, $add$ptr$i = 0;
 var $agg$tmp = 0, $agg$tmp$byval_copy = 0, $and = 0, $and$i$i$i = 0, $and$i$i$i12 = 0, $call$i45 = 0, $call2$i$i10 = 0, $cmp = 0, $cmp$i$i = 0, $cmp$i1$i = 0, $cond$i6$i = 0, $cond$i7$i = 0, $conv = 0, $conv$i$i$i = 0, $ehselector$slot$0 = 0, $exn$slot$0 = 0, $incdec$ptr$i = 0, $incdec$ptr$i$i = 0, $lnot$i = 0, $ref$tmp = 0;
 var $retval$0$i$i = 0, $shr1$i$i$i = 0, $tobool$i = 0, $tobool$i$i$i = 0, $tobool$i$i$i13 = 0, $vfn = 0, $vfn$i = 0, $vfn$i$i = 0, $vfn$i9 = 0, $vtable = 0, $vtable$i = 0, $vtable$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $agg$tmp$byval_copy = sp + 20|0;
 $agg$tmp = sp + 16|0;
 $ref$tmp = sp + 12|0;
 $__nm = sp;
 $__fmtflags_$i = (($__iob) + 4|0);
 $0 = HEAP32[$__fmtflags_$i>>2]|0;
 $and = $0 & 1;
 $cmp = ($and|0)==(0);
 if ($cmp) {
  $vtable = HEAP32[$this>>2]|0;
  $vfn = (($vtable) + 24|0);
  $1 = HEAP32[$vfn>>2]|0;
  $2 = HEAP32[$__s>>2]|0;
  HEAP32[$agg$tmp>>2] = $2;
  $conv = $__v&1;
  ;HEAP32[$agg$tmp$byval_copy+0>>2]=HEAP32[$agg$tmp+0>>2]|0;
  FUNCTION_TABLE_viiiiii[$1 & 511]($agg$result,$this,$agg$tmp$byval_copy,$__iob,$__fl,$conv);
  STACKTOP = sp;return;
 }
 __ZNKSt3__18ios_base6getlocEv($ref$tmp,$__iob);
 __THREW__ = 0;
 $call$i45 = (invoke_iii(359,($ref$tmp|0),(4768|0))|0);
 $3 = __THREW__; __THREW__ = 0;
 $4 = $3&1;
 if ($4) {
  $20 = ___cxa_find_matching_catch()|0;
  $21 = tempRet0;
  $22 = HEAP32[$ref$tmp>>2]|0;
  (__ZNSt3__114__shared_count16__release_sharedEv($22)|0);
  $ehselector$slot$0 = $21;$exn$slot$0 = $20;
  ___resumeException($exn$slot$0|0);
  // unreachable;
 }
 $5 = HEAP32[$ref$tmp>>2]|0;
 (__ZNSt3__114__shared_count16__release_sharedEv($5)|0);
 $vtable$i = HEAP32[$call$i45>>2]|0;
 if ($__v) {
  $vfn$i = (($vtable$i) + 24|0);
  $6 = HEAP32[$vfn$i>>2]|0;
  FUNCTION_TABLE_vii[$6 & 511]($__nm,$call$i45);
 } else {
  $vfn$i9 = (($vtable$i) + 28|0);
  $7 = HEAP32[$vfn$i9>>2]|0;
  FUNCTION_TABLE_vii[$7 & 511]($__nm,$call$i45);
 }
 $8 = HEAP8[$__nm>>0]|0;
 $and$i$i$i = $8 & 1;
 $tobool$i$i$i = ($and$i$i$i<<24>>24)==(0);
 if ($tobool$i$i$i) {
  $__data_$i$i$i = (($__nm) + 4|0);
  $__data_$i1$i$i14$pre = (($__nm) + 8|0);
  $__data_$i$i$i15$pre$phiZZZZ2D = $__data_$i$i$i;$__data_$i1$i$i14$pre$phiZZZZ2D = $__data_$i1$i$i14$pre;$__i$sroa$0$0$load2021$ph = $__data_$i$i$i;
 } else {
  $__data_$i1$i$i = (($__nm) + 8|0);
  $9 = HEAP32[$__data_$i1$i$i>>2]|0;
  $__data_$i$i$i15$pre = (($__nm) + 4|0);
  $__data_$i$i$i15$pre$phiZZZZ2D = $__data_$i$i$i15$pre;$__data_$i1$i$i14$pre$phiZZZZ2D = $__data_$i1$i$i;$__i$sroa$0$0$load2021$ph = $9;
 }
 $10 = $8;$__i$sroa$0$0$load2021 = $__i$sroa$0$0$load2021$ph;
 while(1) {
  $and$i$i$i12 = $10 & 1;
  $tobool$i$i$i13 = ($and$i$i$i12<<24>>24)==(0);
  if ($tobool$i$i$i13) {
   $conv$i$i$i = $10&255;
   $shr1$i$i$i = $conv$i$i$i >>> 1;
   $cond$i6$i = $shr1$i$i$i;$cond$i7$i = $__data_$i$i$i15$pre$phiZZZZ2D;
  } else {
   $11 = HEAP32[$__data_$i1$i$i14$pre$phiZZZZ2D>>2]|0;
   $12 = HEAP32[$__data_$i$i$i15$pre$phiZZZZ2D>>2]|0;
   $cond$i6$i = $12;$cond$i7$i = $11;
  }
  $add$ptr$i = (($cond$i7$i) + ($cond$i6$i<<2)|0);
  $lnot$i = ($__i$sroa$0$0$load2021|0)==($add$ptr$i|0);
  if ($lnot$i) {
   label = 24;
   break;
  }
  $13 = HEAP32[$__i$sroa$0$0$load2021>>2]|0;
  $14 = HEAP32[$__s>>2]|0;
  $tobool$i = ($14|0)==(0|0);
  if (!($tobool$i)) {
   $__nout_$i$i = (($14) + 24|0);
   $15 = HEAP32[$__nout_$i$i>>2]|0;
   $__eout_$i$i = (($14) + 28|0);
   $16 = HEAP32[$__eout_$i$i>>2]|0;
   $cmp$i$i = ($15|0)==($16|0);
   if ($cmp$i$i) {
    $vtable$i$i = HEAP32[$14>>2]|0;
    $vfn$i$i = (($vtable$i$i) + 52|0);
    $17 = HEAP32[$vfn$i$i>>2]|0;
    __THREW__ = 0;
    $call2$i$i10 = (invoke_iii($17|0,($14|0),($13|0))|0);
    $18 = __THREW__; __THREW__ = 0;
    $19 = $18&1;
    if ($19) {
     label = 23;
     break;
    } else {
     $retval$0$i$i = $call2$i$i10;
    }
   } else {
    $incdec$ptr$i$i = (($15) + 4|0);
    HEAP32[$__nout_$i$i>>2] = $incdec$ptr$i$i;
    HEAP32[$15>>2] = $13;
    $retval$0$i$i = $13;
   }
   $cmp$i1$i = ($retval$0$i$i|0)==(-1);
   if ($cmp$i1$i) {
    HEAP32[$__s>>2] = 0;
   }
  }
  $incdec$ptr$i = (($__i$sroa$0$0$load2021) + 4|0);
  $$pre = HEAP8[$__nm>>0]|0;
  $10 = $$pre;$__i$sroa$0$0$load2021 = $incdec$ptr$i;
 }
 if ((label|0) == 23) {
  $23 = ___cxa_find_matching_catch()|0;
  $24 = tempRet0;
  __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($__nm);
  $ehselector$slot$0 = $24;$exn$slot$0 = $23;
  ___resumeException($exn$slot$0|0);
  // unreachable;
 }
 else if ((label|0) == 24) {
  $25 = HEAP32[$__s>>2]|0;
  HEAP32[$agg$result>>2] = $25;
  __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($__nm);
  STACKTOP = sp;return;
 }
}
function __ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwl($agg$result,$this,$__s,$__iob,$__fl,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__s = $__s|0;
 $__iob = $__iob|0;
 $__fl = $__fl|0;
 $__v = $__v|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__fmt = 0, $__fmtflags_$i = 0, $__nar = 0, $__o = 0, $__oe = 0, $__op = 0, $add$ptr = 0, $add$ptr7 = 0, $agg$tmp = 0, $agg$tmp$byval_copy = 0;
 var $call3 = 0, $call5 = 0, $call9 = 0, $ref$tmp = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $agg$tmp$byval_copy = sp + 8|0;
 $vararg_buffer = sp;
 $__fmt = sp + 108|0;
 $__nar = sp + 116|0;
 $__o = sp + 24|0;
 $__op = sp + 4|0;
 $__oe = sp + 20|0;
 $ref$tmp = sp + 12|0;
 $agg$tmp = sp + 16|0;
 ;HEAP8[$__fmt+0>>0]=HEAP8[3408+0>>0]|0;HEAP8[$__fmt+1>>0]=HEAP8[3408+1>>0]|0;HEAP8[$__fmt+2>>0]=HEAP8[3408+2>>0]|0;HEAP8[$__fmt+3>>0]=HEAP8[3408+3>>0]|0;HEAP8[$__fmt+4>>0]=HEAP8[3408+4>>0]|0;HEAP8[$__fmt+5>>0]=HEAP8[3408+5>>0]|0;
 $add$ptr = (($__fmt) + 1|0);
 $__fmtflags_$i = (($__iob) + 4|0);
 $0 = HEAP32[$__fmtflags_$i>>2]|0;
 __ZNSt3__114__num_put_base12__format_intEPcPKcbj($add$ptr,3312,1,$0);
 $call3 = (__ZNSt3__16__clocEv()|0);
 HEAP32[$vararg_buffer>>2] = $__v;
 $call5 = (__ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($__nar,12,$call3,$__fmt,$vararg_buffer)|0);
 $add$ptr7 = (($__nar) + ($call5)|0);
 $call9 = (__ZNSt3__114__num_put_base18__identify_paddingEPcS1_RKNS_8ios_baseE($__nar,$add$ptr7,$__iob)|0);
 __ZNKSt3__18ios_base6getlocEv($ref$tmp,$__iob);
 __THREW__ = 0;
 invoke_viiiiiii(406,($__nar|0),($call9|0),($add$ptr7|0),($__o|0),($__op|0),($__oe|0),($ref$tmp|0));
 $1 = __THREW__; __THREW__ = 0;
 $2 = $1&1;
 if ($2) {
  $7 = ___cxa_find_matching_catch()|0;
  $8 = tempRet0;
  $9 = HEAP32[$ref$tmp>>2]|0;
  (__ZNSt3__114__shared_count16__release_sharedEv($9)|0);
  ___resumeException($7|0);
  // unreachable;
 } else {
  $3 = HEAP32[$ref$tmp>>2]|0;
  (__ZNSt3__114__shared_count16__release_sharedEv($3)|0);
  $4 = HEAP32[$__s>>2]|0;
  HEAP32[$agg$tmp>>2] = $4;
  $5 = HEAP32[$__op>>2]|0;
  $6 = HEAP32[$__oe>>2]|0;
  ;HEAP32[$agg$tmp$byval_copy+0>>2]=HEAP32[$agg$tmp+0>>2]|0;
  __ZNSt3__116__pad_and_outputIwNS_11char_traitsIwEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($agg$result,$agg$tmp$byval_copy,$__o,$5,$6,$__iob,$__fl);
  STACKTOP = sp;return;
 }
}
function __ZNSt3__19__num_putIwE21__widen_and_group_intEPcS2_S2_PwRS3_S4_RKNS_6localeE($__nb,$__np,$__ne,$__ob,$__op,$__oe,$__loc) {
 $__nb = $__nb|0;
 $__np = $__np|0;
 $__ne = $__ne|0;
 $__ob = $__ob|0;
 $__op = $__op|0;
 $__oe = $__oe|0;
 $__loc = $__loc|0;
 var $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__data_$i$i$i = 0, $__dc$0105 = 0, $__dc$1 = 0, $__dg$0106 = 0, $__dg$1 = 0, $__first$addr$08$i$i = 0, $__first$addr$08$i$i76 = 0, $__grouping = 0, $__nf$0 = 0, $__nf$1 = 0, $__p$0107 = 0;
 var $__size_$i2$i = 0, $__size_$i2$i$i = 0, $add$ptr = 0, $add$ptr$i = 0, $add$ptr$i96 = 0, $add$ptr62 = 0, $add$ptr71 = 0, $and$i$i = 0, $and$i$i$i = 0, $and$i$i$i88 = 0, $arrayidx$i$i$i93 = 0, $arrayidx$i$i$i93$ = 0, $arrayidx$i$i$i93$108 = 0, $arrayidx17 = 0, $call$i = 0, $call$i100101 = 0, $call$i47 = 0, $call$i5051 = 0, $call$i5859 = 0, $call$i6364 = 0;
 var $call$i6869 = 0, $cmp$i = 0, $cmp$i$i = 0, $cmp$i$i71 = 0, $cmp1$i$i = 0, $cmp1$i$i79 = 0, $cmp13 = 0, $cmp15 = 0, $cmp17$i$i = 0, $cmp17$i$i73 = 0, $cmp37 = 0, $cmp37104 = 0, $cmp41 = 0, $cmp46 = 0, $cmp50 = 0, $cmp65 = 0, $cond$i = 0, $cond$i$i = 0, $conv$i$i = 0, $conv$i$i$i = 0;
 var $conv45 = 0, $inc = 0, $inc$__dg$0 = 0, $inc57 = 0, $incdec$ptr = 0, $incdec$ptr$i$i = 0, $incdec$ptr$i$i78 = 0, $incdec$ptr2$i$i = 0, $incdec$ptr2$i$i77 = 0, $incdec$ptr28 = 0, $incdec$ptr29 = 0, $incdec$ptr32 = 0, $incdec$ptr48 = 0, $incdec$ptr56 = 0, $incdec$ptr58 = 0, $incdec$ptr6$i$i = 0, $incdec$ptr6$i$i72 = 0, $incdec$ptr9 = 0, $incdec$ptr9$i$i = 0, $incdec$ptr9$i$i75 = 0;
 var $lpad$phi$index = 0, $lpad$phi$index2 = 0, $shr1$i$i = 0, $shr1$i$i$i = 0, $storemerge = 0, $sub = 0, $sub$ptr$lhs$cast = 0, $sub$ptr$lhs$cast10 = 0, $sub$ptr$lhs$cast59 = 0, $sub$ptr$lhs$cast68 = 0, $sub$ptr$rhs$cast = 0, $sub$ptr$rhs$cast11 = 0, $sub$ptr$rhs$cast60 = 0, $sub$ptr$rhs$cast69 = 0, $sub$ptr$sub = 0, $sub$ptr$sub12 = 0, $sub$ptr$sub61 = 0, $sub$ptr$sub70 = 0, $tobool$i$i = 0, $tobool$i$i$i = 0;
 var $tobool$i$i$i89 = 0, $vfn$i = 0, $vfn$i49 = 0, $vfn$i53 = 0, $vfn$i57 = 0, $vfn$i62 = 0, $vfn$i67 = 0, $vfn$i99 = 0, $vtable$i = 0, $vtable$i48 = 0, $vtable$i52 = 0, $vtable$i56 = 0, $vtable$i61 = 0, $vtable$i66 = 0, $vtable$i98 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__grouping = sp;
 $call$i = (__ZNKSt3__16locale9use_facetERNS0_2idE($__loc,4608)|0);
 $call$i47 = (__ZNKSt3__16locale9use_facetERNS0_2idE($__loc,4768)|0);
 $vtable$i = HEAP32[$call$i47>>2]|0;
 $vfn$i = (($vtable$i) + 20|0);
 $0 = HEAP32[$vfn$i>>2]|0;
 FUNCTION_TABLE_vii[$0 & 511]($__grouping,$call$i47);
 $1 = HEAP8[$__grouping>>0]|0;
 $and$i$i$i = $1 & 1;
 $tobool$i$i$i = ($and$i$i$i<<24>>24)==(0);
 if ($tobool$i$i$i) {
  $conv$i$i$i = $1&255;
  $shr1$i$i$i = $conv$i$i$i >>> 1;
  $cond$i$i = $shr1$i$i$i;
 } else {
  $__size_$i2$i$i = (($__grouping) + 4|0);
  $2 = HEAP32[$__size_$i2$i$i>>2]|0;
  $cond$i$i = $2;
 }
 $cmp$i = ($cond$i$i|0)==(0);
 do {
  if ($cmp$i) {
   $vtable$i52 = HEAP32[$call$i>>2]|0;
   $vfn$i53 = (($vtable$i52) + 48|0);
   $3 = HEAP32[$vfn$i53>>2]|0;
   __THREW__ = 0;
   (invoke_iiiii($3|0,($call$i|0),($__nb|0),($__ne|0),($__ob|0))|0);
   $4 = __THREW__; __THREW__ = 0;
   $5 = $4&1;
   if ($5) {
    label = 8;
   } else {
    $sub$ptr$lhs$cast = $__ne;
    $sub$ptr$rhs$cast = $__nb;
    $sub$ptr$sub = (($sub$ptr$lhs$cast) - ($sub$ptr$rhs$cast))|0;
    $add$ptr = (($__ob) + ($sub$ptr$sub<<2)|0);
    HEAP32[$__oe>>2] = $add$ptr;
    $47 = $add$ptr;
   }
  } else {
   HEAP32[$__oe>>2] = $__ob;
   $10 = HEAP8[$__nb>>0]|0;
   if ((($10<<24>>24) == 43) | (($10<<24>>24) == 45)) {
    $vtable$i56 = HEAP32[$call$i>>2]|0;
    $vfn$i57 = (($vtable$i56) + 44|0);
    $11 = HEAP32[$vfn$i57>>2]|0;
    __THREW__ = 0;
    $call$i5859 = (invoke_iii($11|0,($call$i|0),($10|0))|0);
    $12 = __THREW__; __THREW__ = 0;
    $13 = $12&1;
    if ($13) {
     label = 8;
     break;
    }
    $incdec$ptr = (($__nb) + 1|0);
    $14 = HEAP32[$__oe>>2]|0;
    $incdec$ptr9 = (($14) + 4|0);
    HEAP32[$__oe>>2] = $incdec$ptr9;
    HEAP32[$14>>2] = $call$i5859;
    $__nf$0 = $incdec$ptr;
   } else {
    $__nf$0 = $__nb;
   }
   $sub$ptr$lhs$cast10 = $__ne;
   $sub$ptr$rhs$cast11 = $__nf$0;
   $sub$ptr$sub12 = (($sub$ptr$lhs$cast10) - ($sub$ptr$rhs$cast11))|0;
   $cmp13 = ($sub$ptr$sub12|0)>(1);
   if ($cmp13) {
    $15 = HEAP8[$__nf$0>>0]|0;
    $cmp15 = ($15<<24>>24)==(48);
    if ($cmp15) {
     $arrayidx17 = (($__nf$0) + 1|0);
     $16 = HEAP8[$arrayidx17>>0]|0;
     if ((($16<<24>>24) == 88) | (($16<<24>>24) == 120)) {
      $vtable$i61 = HEAP32[$call$i>>2]|0;
      $vfn$i62 = (($vtable$i61) + 44|0);
      $17 = HEAP32[$vfn$i62>>2]|0;
      __THREW__ = 0;
      $call$i6364 = (invoke_iii($17|0,($call$i|0),48)|0);
      $18 = __THREW__; __THREW__ = 0;
      $19 = $18&1;
      if ($19) {
       label = 8;
       break;
      }
      $20 = HEAP32[$__oe>>2]|0;
      $incdec$ptr28 = (($20) + 4|0);
      HEAP32[$__oe>>2] = $incdec$ptr28;
      HEAP32[$20>>2] = $call$i6364;
      $21 = HEAP8[$arrayidx17>>0]|0;
      $vtable$i66 = HEAP32[$call$i>>2]|0;
      $vfn$i67 = (($vtable$i66) + 44|0);
      $22 = HEAP32[$vfn$i67>>2]|0;
      __THREW__ = 0;
      $call$i6869 = (invoke_iii($22|0,($call$i|0),($21|0))|0);
      $23 = __THREW__; __THREW__ = 0;
      $24 = $23&1;
      if ($24) {
       label = 8;
       break;
      }
      $incdec$ptr29 = (($__nf$0) + 2|0);
      $25 = HEAP32[$__oe>>2]|0;
      $incdec$ptr32 = (($25) + 4|0);
      HEAP32[$__oe>>2] = $incdec$ptr32;
      HEAP32[$25>>2] = $call$i6869;
      $__nf$1 = $incdec$ptr29;
     } else {
      $__nf$1 = $__nf$0;
     }
    } else {
     $__nf$1 = $__nf$0;
    }
   } else {
    $__nf$1 = $__nf$0;
   }
   $cmp$i$i71 = ($__nf$1|0)==($__ne|0);
   if (!($cmp$i$i71)) {
    $incdec$ptr6$i$i72 = (($__ne) + -1|0);
    $cmp17$i$i73 = ($incdec$ptr6$i$i72>>>0)>($__nf$1>>>0);
    if ($cmp17$i$i73) {
     $__first$addr$08$i$i76 = $__nf$1;$incdec$ptr9$i$i75 = $incdec$ptr6$i$i72;
     while(1) {
      $26 = HEAP8[$__first$addr$08$i$i76>>0]|0;
      $27 = HEAP8[$incdec$ptr9$i$i75>>0]|0;
      HEAP8[$__first$addr$08$i$i76>>0] = $27;
      HEAP8[$incdec$ptr9$i$i75>>0] = $26;
      $incdec$ptr2$i$i77 = (($__first$addr$08$i$i76) + 1|0);
      $incdec$ptr$i$i78 = (($incdec$ptr9$i$i75) + -1|0);
      $cmp1$i$i79 = ($incdec$ptr2$i$i77>>>0)<($incdec$ptr$i$i78>>>0);
      if ($cmp1$i$i79) {
       $__first$addr$08$i$i76 = $incdec$ptr2$i$i77;$incdec$ptr9$i$i75 = $incdec$ptr$i$i78;
      } else {
       break;
      }
     }
    }
   }
   $vtable$i98 = HEAP32[$call$i47>>2]|0;
   $vfn$i99 = (($vtable$i98) + 16|0);
   $28 = HEAP32[$vfn$i99>>2]|0;
   __THREW__ = 0;
   $call$i100101 = (invoke_ii($28|0,($call$i47|0))|0);
   $29 = __THREW__; __THREW__ = 0;
   $30 = $29&1;
   if ($30) {
    label = 8;
   } else {
    $cmp37104 = ($__nf$1>>>0)<($__ne>>>0);
    L26: do {
     if ($cmp37104) {
      $arrayidx$i$i$i93 = (($__grouping) + 1|0);
      $__size_$i2$i = (($__grouping) + 4|0);
      $__data_$i$i$i = (($__grouping) + 8|0);
      $__dc$0105 = 0;$__dg$0106 = 0;$__p$0107 = $__nf$1;
      while(1) {
       $31 = HEAP8[$__grouping>>0]|0;
       $and$i$i$i88 = $31 & 1;
       $tobool$i$i$i89 = ($and$i$i$i88<<24>>24)==(0);
       $32 = HEAP32[$__data_$i$i$i>>2]|0;
       $arrayidx$i$i$i93$ = $tobool$i$i$i89 ? $arrayidx$i$i$i93 : $32;
       $add$ptr$i96 = (($arrayidx$i$i$i93$) + ($__dg$0106)|0);
       $33 = HEAP8[$add$ptr$i96>>0]|0;
       $cmp41 = ($33<<24>>24)==(0);
       if ($cmp41) {
        $__dc$1 = $__dc$0105;$__dg$1 = $__dg$0106;
       } else {
        $34 = HEAP32[$__data_$i$i$i>>2]|0;
        $arrayidx$i$i$i93$108 = $tobool$i$i$i89 ? $arrayidx$i$i$i93 : $34;
        $add$ptr$i = (($arrayidx$i$i$i93$108) + ($__dg$0106)|0);
        $35 = HEAP8[$add$ptr$i>>0]|0;
        $conv45 = $35 << 24 >> 24;
        $cmp46 = ($__dc$0105|0)==($conv45|0);
        if ($cmp46) {
         $36 = HEAP32[$__oe>>2]|0;
         $incdec$ptr48 = (($36) + 4|0);
         HEAP32[$__oe>>2] = $incdec$ptr48;
         HEAP32[$36>>2] = $call$i100101;
         $37 = HEAP8[$__grouping>>0]|0;
         $and$i$i = $37 & 1;
         $tobool$i$i = ($and$i$i<<24>>24)==(0);
         if ($tobool$i$i) {
          $conv$i$i = $37&255;
          $shr1$i$i = $conv$i$i >>> 1;
          $cond$i = $shr1$i$i;
         } else {
          $38 = HEAP32[$__size_$i2$i>>2]|0;
          $cond$i = $38;
         }
         $sub = (($cond$i) + -1)|0;
         $cmp50 = ($__dg$0106>>>0)<($sub>>>0);
         $inc = $cmp50&1;
         $inc$__dg$0 = (($inc) + ($__dg$0106))|0;
         $__dc$1 = 0;$__dg$1 = $inc$__dg$0;
        } else {
         $__dc$1 = $__dc$0105;$__dg$1 = $__dg$0106;
        }
       }
       $39 = HEAP8[$__p$0107>>0]|0;
       $vtable$i48 = HEAP32[$call$i>>2]|0;
       $vfn$i49 = (($vtable$i48) + 44|0);
       $40 = HEAP32[$vfn$i49>>2]|0;
       __THREW__ = 0;
       $call$i5051 = (invoke_iii($40|0,($call$i|0),($39|0))|0);
       $41 = __THREW__; __THREW__ = 0;
       $42 = $41&1;
       if ($42) {
        break;
       }
       $43 = HEAP32[$__oe>>2]|0;
       $incdec$ptr56 = (($43) + 4|0);
       HEAP32[$__oe>>2] = $incdec$ptr56;
       HEAP32[$43>>2] = $call$i5051;
       $inc57 = (($__dc$1) + 1)|0;
       $incdec$ptr58 = (($__p$0107) + 1|0);
       $cmp37 = ($incdec$ptr58>>>0)<($__ne>>>0);
       if ($cmp37) {
        $__dc$0105 = $inc57;$__dg$0106 = $__dg$1;$__p$0107 = $incdec$ptr58;
       } else {
        $44 = $incdec$ptr56;
        break L26;
       }
      }
      $6 = ___cxa_find_matching_catch()|0;
      $7 = tempRet0;
      $lpad$phi$index = $6;$lpad$phi$index2 = $7;
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
      ___resumeException($lpad$phi$index|0);
      // unreachable;
     } else {
      $$pre = HEAP32[$__oe>>2]|0;
      $44 = $$pre;
     }
    } while(0);
    $sub$ptr$lhs$cast59 = $__nf$1;
    $sub$ptr$rhs$cast60 = $__nb;
    $sub$ptr$sub61 = (($sub$ptr$lhs$cast59) - ($sub$ptr$rhs$cast60))|0;
    $add$ptr62 = (($__ob) + ($sub$ptr$sub61<<2)|0);
    $cmp$i$i = ($add$ptr62|0)==($44|0);
    if ($cmp$i$i) {
     $47 = $44;
    } else {
     $incdec$ptr6$i$i = (($44) + -4|0);
     $cmp17$i$i = ($incdec$ptr6$i$i>>>0)>($add$ptr62>>>0);
     if ($cmp17$i$i) {
      $__first$addr$08$i$i = $add$ptr62;$incdec$ptr9$i$i = $incdec$ptr6$i$i;
      while(1) {
       $45 = HEAP32[$__first$addr$08$i$i>>2]|0;
       $46 = HEAP32[$incdec$ptr9$i$i>>2]|0;
       HEAP32[$__first$addr$08$i$i>>2] = $46;
       HEAP32[$incdec$ptr9$i$i>>2] = $45;
       $incdec$ptr2$i$i = (($__first$addr$08$i$i) + 4|0);
       $incdec$ptr$i$i = (($incdec$ptr9$i$i) + -4|0);
       $cmp1$i$i = ($incdec$ptr2$i$i>>>0)<($incdec$ptr$i$i>>>0);
       if ($cmp1$i$i) {
        $__first$addr$08$i$i = $incdec$ptr2$i$i;$incdec$ptr9$i$i = $incdec$ptr$i$i;
       } else {
        $47 = $44;
        break;
       }
      }
     } else {
      $47 = $44;
     }
    }
   }
  }
 } while(0);
 if ((label|0) == 8) {
  $8 = ___cxa_find_matching_catch()|0;
  $9 = tempRet0;
  $lpad$phi$index = $8;$lpad$phi$index2 = $9;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
  ___resumeException($lpad$phi$index|0);
  // unreachable;
 }
 $cmp65 = ($__np|0)==($__ne|0);
 if ($cmp65) {
  $storemerge = $47;
  HEAP32[$__op>>2] = $storemerge;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
  STACKTOP = sp;return;
 }
 $sub$ptr$lhs$cast68 = $__np;
 $sub$ptr$rhs$cast69 = $__nb;
 $sub$ptr$sub70 = (($sub$ptr$lhs$cast68) - ($sub$ptr$rhs$cast69))|0;
 $add$ptr71 = (($__ob) + ($sub$ptr$sub70<<2)|0);
 $storemerge = $add$ptr71;
 HEAP32[$__op>>2] = $storemerge;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
 STACKTOP = sp;return;
}
function __ZNSt3__116__pad_and_outputIwNS_11char_traitsIwEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($agg$result,$__s,$__ob,$__op,$__oe,$__iob,$__fl) {
 $agg$result = $agg$result|0;
 $__s = $__s|0;
 $__ob = $__ob|0;
 $__op = $__op|0;
 $__oe = $__oe|0;
 $__iob = $__iob|0;
 $__fl = $__fl|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__data_$i$i$i = 0, $__data_$i1$i$i = 0, $__ns$0 = 0, $__sp = 0, $__width_$i = 0, $and$i$i$i = 0, $call$i = 0, $call$i21 = 0, $call$i2425 = 0;
 var $cmp = 0, $cmp1 = 0, $cmp12 = 0, $cmp17 = 0, $cmp22 = 0, $cmp31 = 0, $cmp35 = 0, $cmp8 = 0, $cond$i$i = 0, $sub = 0, $sub$ptr$div = 0, $sub$ptr$div30 = 0, $sub$ptr$div7 = 0, $sub$ptr$lhs$cast = 0, $sub$ptr$lhs$cast4 = 0, $sub$ptr$rhs$cast = 0, $sub$ptr$sub = 0, $sub$ptr$sub29 = 0, $sub$ptr$sub6 = 0, $tobool$i$i$i = 0;
 var $vfn$i = 0, $vfn$i20 = 0, $vfn$i23 = 0, $vtable$i = 0, $vtable$i19 = 0, $vtable$i22 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__sp = sp;
 $0 = HEAP32[$__s>>2]|0;
 $cmp = ($0|0)==(0|0);
 if ($cmp) {
  HEAP32[$agg$result>>2] = 0;
  STACKTOP = sp;return;
 }
 $sub$ptr$lhs$cast = $__oe;
 $sub$ptr$rhs$cast = $__ob;
 $sub$ptr$sub = (($sub$ptr$lhs$cast) - ($sub$ptr$rhs$cast))|0;
 $sub$ptr$div = $sub$ptr$sub >> 2;
 $__width_$i = (($__iob) + 12|0);
 $1 = HEAP32[$__width_$i>>2]|0;
 $cmp1 = ($1|0)>($sub$ptr$div|0);
 $sub = (($1) - ($sub$ptr$div))|0;
 $__ns$0 = $cmp1 ? $sub : 0;
 $sub$ptr$lhs$cast4 = $__op;
 $sub$ptr$sub6 = (($sub$ptr$lhs$cast4) - ($sub$ptr$rhs$cast))|0;
 $sub$ptr$div7 = $sub$ptr$sub6 >> 2;
 $cmp8 = ($sub$ptr$sub6|0)>(0);
 if ($cmp8) {
  $vtable$i19 = HEAP32[$0>>2]|0;
  $vfn$i20 = (($vtable$i19) + 48|0);
  $2 = HEAP32[$vfn$i20>>2]|0;
  $call$i21 = (FUNCTION_TABLE_iiii[$2 & 511]($0,$__ob,$sub$ptr$div7)|0);
  $cmp12 = ($call$i21|0)==($sub$ptr$div7|0);
  if (!($cmp12)) {
   HEAP32[$__s>>2] = 0;
   HEAP32[$agg$result>>2] = 0;
   STACKTOP = sp;return;
  }
 }
 $cmp17 = ($__ns$0|0)>(0);
 do {
  if ($cmp17) {
   __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6__initEjw($__sp,$__ns$0,$__fl);
   $3 = HEAP8[$__sp>>0]|0;
   $and$i$i$i = $3 & 1;
   $tobool$i$i$i = ($and$i$i$i<<24>>24)==(0);
   if ($tobool$i$i$i) {
    $__data_$i$i$i = (($__sp) + 4|0);
    $cond$i$i = $__data_$i$i$i;
   } else {
    $__data_$i1$i$i = (($__sp) + 8|0);
    $4 = HEAP32[$__data_$i1$i$i>>2]|0;
    $cond$i$i = $4;
   }
   $vtable$i22 = HEAP32[$0>>2]|0;
   $vfn$i23 = (($vtable$i22) + 48|0);
   $5 = HEAP32[$vfn$i23>>2]|0;
   __THREW__ = 0;
   $call$i2425 = (invoke_iiii($5|0,($0|0),($cond$i$i|0),($__ns$0|0))|0);
   $6 = __THREW__; __THREW__ = 0;
   $7 = $6&1;
   if ($7) {
    $8 = ___cxa_find_matching_catch()|0;
    $9 = tempRet0;
    __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($__sp);
    ___resumeException($8|0);
    // unreachable;
   }
   $cmp22 = ($call$i2425|0)==($__ns$0|0);
   if ($cmp22) {
    __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($__sp);
    break;
   }
   HEAP32[$__s>>2] = 0;
   HEAP32[$agg$result>>2] = 0;
   __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($__sp);
   STACKTOP = sp;return;
  }
 } while(0);
 $sub$ptr$sub29 = (($sub$ptr$lhs$cast) - ($sub$ptr$lhs$cast4))|0;
 $sub$ptr$div30 = $sub$ptr$sub29 >> 2;
 $cmp31 = ($sub$ptr$sub29|0)>(0);
 if ($cmp31) {
  $vtable$i = HEAP32[$0>>2]|0;
  $vfn$i = (($vtable$i) + 48|0);
  $10 = HEAP32[$vfn$i>>2]|0;
  $call$i = (FUNCTION_TABLE_iiii[$10 & 511]($0,$__op,$sub$ptr$div30)|0);
  $cmp35 = ($call$i|0)==($sub$ptr$div30|0);
  if (!($cmp35)) {
   HEAP32[$__s>>2] = 0;
   HEAP32[$agg$result>>2] = 0;
   STACKTOP = sp;return;
  }
 }
 HEAP32[$__width_$i>>2] = 0;
 HEAP32[$agg$result>>2] = $0;
 STACKTOP = sp;return;
}
function __ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwx($agg$result,$this,$__s,$__iob,$__fl,$0,$1) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__s = $__s|0;
 $__iob = $__iob|0;
 $__fl = $__fl|0;
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__fmt = 0, $__fmtflags_$i = 0;
 var $__nar = 0, $__o = 0, $__oe = 0, $__op = 0, $add$ptr = 0, $add$ptr7 = 0, $agg$tmp = 0, $agg$tmp$byval_copy = 0, $call3 = 0, $call5 = 0, $call9 = 0, $ref$tmp = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 224|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $agg$tmp$byval_copy = sp + 20|0;
 $vararg_buffer = sp;
 $__fmt = sp + 8|0;
 $__nar = sp + 200|0;
 $__o = sp + 36|0;
 $__op = sp + 16|0;
 $__oe = sp + 28|0;
 $ref$tmp = sp + 24|0;
 $agg$tmp = sp + 32|0;
 $2 = $__fmt;
 $3 = $2;
 HEAP32[$3>>2] = 37;
 $4 = (($2) + 4)|0;
 $5 = $4;
 HEAP32[$5>>2] = 0;
 $add$ptr = (($__fmt) + 1|0);
 $__fmtflags_$i = (($__iob) + 4|0);
 $6 = HEAP32[$__fmtflags_$i>>2]|0;
 __ZNSt3__114__num_put_base12__format_intEPcPKcbj($add$ptr,3320,1,$6);
 $call3 = (__ZNSt3__16__clocEv()|0);
 $7 = $vararg_buffer;
 $8 = $7;
 HEAP32[$8>>2] = $0;
 $9 = (($7) + 4)|0;
 $10 = $9;
 HEAP32[$10>>2] = $1;
 $call5 = (__ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($__nar,22,$call3,$__fmt,$vararg_buffer)|0);
 $add$ptr7 = (($__nar) + ($call5)|0);
 $call9 = (__ZNSt3__114__num_put_base18__identify_paddingEPcS1_RKNS_8ios_baseE($__nar,$add$ptr7,$__iob)|0);
 __ZNKSt3__18ios_base6getlocEv($ref$tmp,$__iob);
 __THREW__ = 0;
 invoke_viiiiiii(406,($__nar|0),($call9|0),($add$ptr7|0),($__o|0),($__op|0),($__oe|0),($ref$tmp|0));
 $11 = __THREW__; __THREW__ = 0;
 $12 = $11&1;
 if ($12) {
  $17 = ___cxa_find_matching_catch()|0;
  $18 = tempRet0;
  $19 = HEAP32[$ref$tmp>>2]|0;
  (__ZNSt3__114__shared_count16__release_sharedEv($19)|0);
  ___resumeException($17|0);
  // unreachable;
 } else {
  $13 = HEAP32[$ref$tmp>>2]|0;
  (__ZNSt3__114__shared_count16__release_sharedEv($13)|0);
  $14 = HEAP32[$__s>>2]|0;
  HEAP32[$agg$tmp>>2] = $14;
  $15 = HEAP32[$__op>>2]|0;
  $16 = HEAP32[$__oe>>2]|0;
  ;HEAP32[$agg$tmp$byval_copy+0>>2]=HEAP32[$agg$tmp+0>>2]|0;
  __ZNSt3__116__pad_and_outputIwNS_11char_traitsIwEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($agg$result,$agg$tmp$byval_copy,$__o,$15,$16,$__iob,$__fl);
  STACKTOP = sp;return;
 }
}
function __ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwm($agg$result,$this,$__s,$__iob,$__fl,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__s = $__s|0;
 $__iob = $__iob|0;
 $__fl = $__fl|0;
 $__v = $__v|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__fmt = 0, $__fmtflags_$i = 0, $__nar = 0, $__o = 0, $__oe = 0, $__op = 0, $add$ptr = 0, $add$ptr7 = 0, $agg$tmp = 0, $agg$tmp$byval_copy = 0;
 var $call3 = 0, $call5 = 0, $call9 = 0, $ref$tmp = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $agg$tmp$byval_copy = sp + 8|0;
 $vararg_buffer = sp;
 $__fmt = sp + 108|0;
 $__nar = sp + 116|0;
 $__o = sp + 24|0;
 $__op = sp + 4|0;
 $__oe = sp + 20|0;
 $ref$tmp = sp + 12|0;
 $agg$tmp = sp + 16|0;
 ;HEAP8[$__fmt+0>>0]=HEAP8[3408+0>>0]|0;HEAP8[$__fmt+1>>0]=HEAP8[3408+1>>0]|0;HEAP8[$__fmt+2>>0]=HEAP8[3408+2>>0]|0;HEAP8[$__fmt+3>>0]=HEAP8[3408+3>>0]|0;HEAP8[$__fmt+4>>0]=HEAP8[3408+4>>0]|0;HEAP8[$__fmt+5>>0]=HEAP8[3408+5>>0]|0;
 $add$ptr = (($__fmt) + 1|0);
 $__fmtflags_$i = (($__iob) + 4|0);
 $0 = HEAP32[$__fmtflags_$i>>2]|0;
 __ZNSt3__114__num_put_base12__format_intEPcPKcbj($add$ptr,3312,0,$0);
 $call3 = (__ZNSt3__16__clocEv()|0);
 HEAP32[$vararg_buffer>>2] = $__v;
 $call5 = (__ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($__nar,12,$call3,$__fmt,$vararg_buffer)|0);
 $add$ptr7 = (($__nar) + ($call5)|0);
 $call9 = (__ZNSt3__114__num_put_base18__identify_paddingEPcS1_RKNS_8ios_baseE($__nar,$add$ptr7,$__iob)|0);
 __ZNKSt3__18ios_base6getlocEv($ref$tmp,$__iob);
 __THREW__ = 0;
 invoke_viiiiiii(406,($__nar|0),($call9|0),($add$ptr7|0),($__o|0),($__op|0),($__oe|0),($ref$tmp|0));
 $1 = __THREW__; __THREW__ = 0;
 $2 = $1&1;
 if ($2) {
  $7 = ___cxa_find_matching_catch()|0;
  $8 = tempRet0;
  $9 = HEAP32[$ref$tmp>>2]|0;
  (__ZNSt3__114__shared_count16__release_sharedEv($9)|0);
  ___resumeException($7|0);
  // unreachable;
 } else {
  $3 = HEAP32[$ref$tmp>>2]|0;
  (__ZNSt3__114__shared_count16__release_sharedEv($3)|0);
  $4 = HEAP32[$__s>>2]|0;
  HEAP32[$agg$tmp>>2] = $4;
  $5 = HEAP32[$__op>>2]|0;
  $6 = HEAP32[$__oe>>2]|0;
  ;HEAP32[$agg$tmp$byval_copy+0>>2]=HEAP32[$agg$tmp+0>>2]|0;
  __ZNSt3__116__pad_and_outputIwNS_11char_traitsIwEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($agg$result,$agg$tmp$byval_copy,$__o,$5,$6,$__iob,$__fl);
  STACKTOP = sp;return;
 }
}
function __ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwy($agg$result,$this,$__s,$__iob,$__fl,$0,$1) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__s = $__s|0;
 $__iob = $__iob|0;
 $__fl = $__fl|0;
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__fmt = 0, $__fmtflags_$i = 0;
 var $__nar = 0, $__o = 0, $__oe = 0, $__op = 0, $add$ptr = 0, $add$ptr7 = 0, $agg$tmp = 0, $agg$tmp$byval_copy = 0, $call3 = 0, $call5 = 0, $call9 = 0, $ref$tmp = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 240|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $agg$tmp$byval_copy = sp + 20|0;
 $vararg_buffer = sp;
 $__fmt = sp + 8|0;
 $__nar = sp + 208|0;
 $__o = sp + 36|0;
 $__op = sp + 16|0;
 $__oe = sp + 28|0;
 $ref$tmp = sp + 24|0;
 $agg$tmp = sp + 32|0;
 $2 = $__fmt;
 $3 = $2;
 HEAP32[$3>>2] = 37;
 $4 = (($2) + 4)|0;
 $5 = $4;
 HEAP32[$5>>2] = 0;
 $add$ptr = (($__fmt) + 1|0);
 $__fmtflags_$i = (($__iob) + 4|0);
 $6 = HEAP32[$__fmtflags_$i>>2]|0;
 __ZNSt3__114__num_put_base12__format_intEPcPKcbj($add$ptr,3320,0,$6);
 $call3 = (__ZNSt3__16__clocEv()|0);
 $7 = $vararg_buffer;
 $8 = $7;
 HEAP32[$8>>2] = $0;
 $9 = (($7) + 4)|0;
 $10 = $9;
 HEAP32[$10>>2] = $1;
 $call5 = (__ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($__nar,23,$call3,$__fmt,$vararg_buffer)|0);
 $add$ptr7 = (($__nar) + ($call5)|0);
 $call9 = (__ZNSt3__114__num_put_base18__identify_paddingEPcS1_RKNS_8ios_baseE($__nar,$add$ptr7,$__iob)|0);
 __ZNKSt3__18ios_base6getlocEv($ref$tmp,$__iob);
 __THREW__ = 0;
 invoke_viiiiiii(406,($__nar|0),($call9|0),($add$ptr7|0),($__o|0),($__op|0),($__oe|0),($ref$tmp|0));
 $11 = __THREW__; __THREW__ = 0;
 $12 = $11&1;
 if ($12) {
  $17 = ___cxa_find_matching_catch()|0;
  $18 = tempRet0;
  $19 = HEAP32[$ref$tmp>>2]|0;
  (__ZNSt3__114__shared_count16__release_sharedEv($19)|0);
  ___resumeException($17|0);
  // unreachable;
 } else {
  $13 = HEAP32[$ref$tmp>>2]|0;
  (__ZNSt3__114__shared_count16__release_sharedEv($13)|0);
  $14 = HEAP32[$__s>>2]|0;
  HEAP32[$agg$tmp>>2] = $14;
  $15 = HEAP32[$__op>>2]|0;
  $16 = HEAP32[$__oe>>2]|0;
  ;HEAP32[$agg$tmp$byval_copy+0>>2]=HEAP32[$agg$tmp+0>>2]|0;
  __ZNSt3__116__pad_and_outputIwNS_11char_traitsIwEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($agg$result,$agg$tmp$byval_copy,$__o,$15,$16,$__iob,$__fl);
  STACKTOP = sp;return;
 }
}
function __ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwd($agg$result,$this,$__s,$__iob,$__fl,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__s = $__s|0;
 $__iob = $__iob|0;
 $__fl = $__fl|0;
 $__v = +$__v;
 var $$pre = 0, $$pre62 = 0, $$pre63 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__fmt = 0, $__fmtflags_$i = 0, $__nar = 0, $__nb = 0, $__nc$0 = 0, $__nc$1 = 0, $__nc$2 = 0, $__o = 0, $__ob$0 = 0, $__oe = 0, $__op = 0, $__precision_$i = 0;
 var $__precision_$i24 = 0, $__precision_$i25 = 0, $add$ptr = 0, $add$ptr34 = 0, $agg$tmp = 0, $agg$tmp$byval_copy = 0, $call10 = 0, $call14 = 0, $call19 = 0, $call2 = 0, $call22 = 0, $call27 = 0, $call36 = 0, $call4 = 0, $call45 = 0, $call7 = 0, $cmp = 0, $cmp29 = 0, $cmp40 = 0, $cmp46 = 0;
 var $ehselector$slot$0 = 0, $ehselector$slot$160 = 0, $exn$slot$0 = 0, $exn$slot$161 = 0, $mul42 = 0, $ref$tmp51 = 0, $ref$tmp55 = 0, $tobool$i$i$i20 = 0, $tobool$i$i$i36 = 0, $vararg_buffer = 0, $vararg_buffer2 = 0, $vararg_buffer5 = 0, $vararg_buffer9 = 0, $vararg_ptr1 = 0, $vararg_ptr12 = 0, $vararg_ptr8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 352|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $agg$tmp$byval_copy = sp + 296|0;
 $vararg_buffer9 = sp + 8|0;
 $vararg_buffer5 = sp + 48|0;
 $vararg_buffer2 = sp + 24|0;
 $vararg_buffer = sp + 32|0;
 $__fmt = sp;
 $__nar = sp + 316|0;
 $__nb = sp + 312|0;
 $__o = sp + 68|0;
 $__op = sp + 64|0;
 $__oe = sp + 60|0;
 $ref$tmp51 = sp + 304|0;
 $ref$tmp55 = sp + 300|0;
 $agg$tmp = sp + 308|0;
 $0 = $__fmt;
 $1 = $0;
 HEAP32[$1>>2] = 37;
 $2 = (($0) + 4)|0;
 $3 = $2;
 HEAP32[$3>>2] = 0;
 $add$ptr = (($__fmt) + 1|0);
 $__fmtflags_$i = (($__iob) + 4|0);
 $4 = HEAP32[$__fmtflags_$i>>2]|0;
 $call2 = (__ZNSt3__114__num_put_base14__format_floatEPcPKcj($add$ptr,3328,$4)|0);
 HEAP32[$__nb>>2] = $__nar;
 $call4 = (__ZNSt3__16__clocEv()|0);
 if ($call2) {
  $__precision_$i = (($__iob) + 8|0);
  $5 = HEAP32[$__precision_$i>>2]|0;
  HEAP32[$vararg_buffer>>2] = $5;
  $vararg_ptr1 = (($vararg_buffer) + 4|0);
  HEAPF64[tempDoublePtr>>3]=$__v;HEAP32[$vararg_ptr1>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_ptr1+4>>2]=HEAP32[tempDoublePtr+4>>2];
  $call7 = (__ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($__nar,30,$call4,$__fmt,$vararg_buffer)|0);
  $__nc$0 = $call7;
 } else {
  HEAPF64[tempDoublePtr>>3]=$__v;HEAP32[$vararg_buffer2>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_buffer2+4>>2]=HEAP32[tempDoublePtr+4>>2];
  $call10 = (__ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($__nar,30,$call4,$__fmt,$vararg_buffer2)|0);
  $__nc$0 = $call10;
 }
 $cmp = ($__nc$0|0)>(29);
 do {
  if ($cmp) {
   if ($call2) {
    __THREW__ = 0;
    $call14 = (invoke_i(395)|0);
    $6 = __THREW__; __THREW__ = 0;
    $7 = $6&1;
    if (!($7)) {
     $__precision_$i24 = (($__iob) + 8|0);
     $8 = HEAP32[$__precision_$i24>>2]|0;
     __THREW__ = 0;
     HEAP32[$vararg_buffer5>>2] = $8;
     $vararg_ptr8 = (($vararg_buffer5) + 4|0);
     HEAPF64[tempDoublePtr>>3]=$__v;HEAP32[$vararg_ptr8>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_ptr8+4>>2]=HEAP32[tempDoublePtr+4>>2];
     $call19 = (invoke_iiiii(401,($__nb|0),($call14|0),($__fmt|0),($vararg_buffer5|0))|0);
     $9 = __THREW__; __THREW__ = 0;
     $10 = $9&1;
     if (!($10)) {
      $__nc$1 = $call19;
      label = 12;
     }
    }
   } else {
    __THREW__ = 0;
    $call22 = (invoke_i(395)|0);
    $13 = __THREW__; __THREW__ = 0;
    $14 = $13&1;
    if (!($14)) {
     $__precision_$i25 = (($__iob) + 8|0);
     $15 = HEAP32[$__precision_$i25>>2]|0;
     __THREW__ = 0;
     HEAP32[$vararg_buffer9>>2] = $15;
     $vararg_ptr12 = (($vararg_buffer9) + 4|0);
     HEAPF64[tempDoublePtr>>3]=$__v;HEAP32[$vararg_ptr12>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_ptr12+4>>2]=HEAP32[tempDoublePtr+4>>2];
     $call27 = (invoke_iiiii(401,($__nb|0),($call22|0),($__fmt|0),($vararg_buffer9|0))|0);
     $16 = __THREW__; __THREW__ = 0;
     $17 = $16&1;
     if (!($17)) {
      $__nc$1 = $call27;
      label = 12;
     }
    }
   }
   if ((label|0) == 12) {
    $18 = HEAP32[$__nb>>2]|0;
    $cmp29 = ($18|0)==(0|0);
    if (!($cmp29)) {
     $21 = $18;$39 = $18;$__nc$2 = $__nc$1;
     break;
    }
    __THREW__ = 0;
    invoke_v(383);
    $19 = __THREW__; __THREW__ = 0;
    $20 = $19&1;
    if (!($20)) {
     $$pre = HEAP32[$__nb>>2]|0;
     $21 = $$pre;$39 = $$pre;$__nc$2 = $__nc$1;
     break;
    }
   }
   $11 = ___cxa_find_matching_catch()|0;
   $12 = tempRet0;
   $ehselector$slot$160 = $12;$exn$slot$161 = $11;
   ___resumeException($exn$slot$161|0);
   // unreachable;
  } else {
   $$pre62 = HEAP32[$__nb>>2]|0;
   $21 = $$pre62;$39 = 0;$__nc$2 = $__nc$0;
  }
 } while(0);
 $add$ptr34 = (($21) + ($__nc$2)|0);
 $call36 = (__ZNSt3__114__num_put_base18__identify_paddingEPcS1_RKNS_8ios_baseE($21,$add$ptr34,$__iob)|0);
 $cmp40 = ($21|0)==($__nar|0);
 if ($cmp40) {
  $28 = $__nar;$38 = 0;$__ob$0 = $__o;
  label = 20;
 } else {
  $mul42 = $__nc$2 << 3;
  $call45 = (_malloc($mul42)|0);
  $cmp46 = ($call45|0)==(0|0);
  if ($cmp46) {
   __THREW__ = 0;
   invoke_v(383);
   $22 = __THREW__; __THREW__ = 0;
   $23 = $22&1;
   if ($23) {
    $44 = 0;
    label = 19;
   } else {
    $$pre63 = HEAP32[$__nb>>2]|0;
    $28 = $$pre63;$38 = $call45;$__ob$0 = $call45;
    label = 20;
   }
  } else {
   $28 = $21;$38 = $call45;$__ob$0 = $call45;
   label = 20;
  }
 }
 do {
  if ((label|0) == 20) {
   __THREW__ = 0;
   invoke_vii(358,($ref$tmp51|0),($__iob|0));
   $26 = __THREW__; __THREW__ = 0;
   $27 = $26&1;
   if ($27) {
    $44 = $38;
    label = 19;
   } else {
    __THREW__ = 0;
    invoke_viiiiiii(407,($28|0),($call36|0),($add$ptr34|0),($__ob$0|0),($__op|0),($__oe|0),($ref$tmp51|0));
    $29 = __THREW__; __THREW__ = 0;
    $30 = $29&1;
    if ($30) {
     $40 = ___cxa_find_matching_catch()|0;
     $41 = tempRet0;
     $42 = HEAP32[$ref$tmp51>>2]|0;
     (__ZNSt3__114__shared_count16__release_sharedEv($42)|0);
     $43 = $38;$ehselector$slot$0 = $41;$exn$slot$0 = $40;
     break;
    }
    $31 = HEAP32[$ref$tmp51>>2]|0;
    (__ZNSt3__114__shared_count16__release_sharedEv($31)|0);
    $32 = HEAP32[$__s>>2]|0;
    HEAP32[$agg$tmp>>2] = $32;
    $33 = HEAP32[$__op>>2]|0;
    $34 = HEAP32[$__oe>>2]|0;
    __THREW__ = 0;
    ;HEAP32[$agg$tmp$byval_copy+0>>2]=HEAP32[$agg$tmp+0>>2]|0;
    invoke_viiiiiii(408,($ref$tmp55|0),($agg$tmp$byval_copy|0),($__ob$0|0),($33|0),($34|0),($__iob|0),($__fl|0));
    $35 = __THREW__; __THREW__ = 0;
    $36 = $35&1;
    if ($36) {
     $44 = $38;
     label = 19;
    } else {
     $37 = HEAP32[$ref$tmp55>>2]|0;
     HEAP32[$__s>>2] = $37;
     HEAP32[$agg$result>>2] = $37;
     $tobool$i$i$i36 = ($38|0)==(0|0);
     if ($tobool$i$i$i36) {
      _free($39);
      STACKTOP = sp;return;
     }
     _free($38);
     _free($39);
     STACKTOP = sp;return;
    }
   }
  }
 } while(0);
 if ((label|0) == 19) {
  $24 = ___cxa_find_matching_catch()|0;
  $25 = tempRet0;
  $43 = $44;$ehselector$slot$0 = $25;$exn$slot$0 = $24;
 }
 $tobool$i$i$i20 = ($43|0)==(0|0);
 if (!($tobool$i$i$i20)) {
  _free($43);
 }
 _free($39);
 $ehselector$slot$160 = $ehselector$slot$0;$exn$slot$161 = $exn$slot$0;
 ___resumeException($exn$slot$161|0);
 // unreachable;
}
function __ZNSt3__19__num_putIwE23__widen_and_group_floatEPcS2_S2_PwRS3_S4_RKNS_6localeE($__nb,$__np,$__ne,$__ob,$__op,$__oe,$__loc) {
 $__nb = $__nb|0;
 $__np = $__np|0;
 $__ne = $__ne|0;
 $__ob = $__ob|0;
 $__op = $__op|0;
 $__oe = $__oe|0;
 $__loc = $__loc|0;
 var $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0;
 var $9 = 0, $__data_$i$i$i119 = 0, $__dc$0152 = 0, $__dc$1 = 0, $__dg$0153 = 0, $__dg$1 = 0, $__first$addr$08$i$i = 0, $__first$addr$08$i$i132 = 0, $__grouping = 0, $__nf$0 = 0, $__nf$1 = 0, $__nf$2147 = 0, $__nf$3 = 0, $__ns$0168 = 0, $__ns$1160 = 0, $__ns$2 = 0, $__p$0154 = 0, $__size_$i2$i = 0, $__size_$i2$i$i = 0, $add$ptr = 0;
 var $add$ptr$i = 0, $add$ptr$i125 = 0, $add$ptr116 = 0, $add$ptr123 = 0, $add$ptr90 = 0, $and$i$i = 0, $and$i$i$i = 0, $and$i$i$i107 = 0, $arrayidx$i$i$i = 0, $arrayidx$i$i$i$ = 0, $arrayidx$i$i$i$178 = 0, $arrayidx10 = 0, $call$i = 0, $call$i104105 = 0, $call$i114115 = 0, $call$i139140 = 0, $call$i73 = 0, $call$i7677 = 0, $call$i8081 = 0, $call$i8586 = 0;
 var $call$i99100 = 0, $call29 = 0, $call31 = 0, $call40 = 0, $call42 = 0, $cmp$i = 0, $cmp$i$i = 0, $cmp$i$i127 = 0, $cmp1$i$i = 0, $cmp1$i$i135 = 0, $cmp117 = 0, $cmp17$i$i = 0, $cmp17$i$i129 = 0, $cmp26 = 0, $cmp26167 = 0, $cmp36 = 0, $cmp36159 = 0, $cmp6 = 0, $cmp62 = 0, $cmp62151 = 0;
 var $cmp67 = 0, $cmp72 = 0, $cmp76 = 0, $cmp8 = 0, $cmp94 = 0, $cmp94146 = 0, $cmp97 = 0, $cond$i = 0, $cond$i$i = 0, $conv$i$i = 0, $conv$i$i$i = 0, $conv27 = 0, $conv38 = 0, $conv71 = 0, $inc = 0, $inc$__dg$0 = 0, $inc83 = 0, $incdec$ptr = 0, $incdec$ptr$i$i = 0, $incdec$ptr$i$i134 = 0;
 var $incdec$ptr101 = 0, $incdec$ptr102 = 0, $incdec$ptr106 = 0, $incdec$ptr109 = 0, $incdec$ptr2$i$i = 0, $incdec$ptr2$i$i133 = 0, $incdec$ptr21 = 0, $incdec$ptr22 = 0, $incdec$ptr25 = 0, $incdec$ptr34 = 0, $incdec$ptr47 = 0, $incdec$ptr5 = 0, $incdec$ptr6$i$i = 0, $incdec$ptr6$i$i128 = 0, $incdec$ptr74 = 0, $incdec$ptr82 = 0, $incdec$ptr85 = 0, $incdec$ptr9$i$i = 0, $incdec$ptr9$i$i131 = 0, $lpad$phi$index = 0;
 var $lpad$phi$index5 = 0, $shr1$i$i = 0, $shr1$i$i$i = 0, $storemerge = 0, $sub = 0, $sub$ptr$lhs$cast = 0, $sub$ptr$lhs$cast120 = 0, $sub$ptr$lhs$cast54 = 0, $sub$ptr$lhs$cast87 = 0, $sub$ptr$rhs$cast = 0, $sub$ptr$rhs$cast114 = 0, $sub$ptr$rhs$cast121 = 0, $sub$ptr$rhs$cast55 = 0, $sub$ptr$rhs$cast88 = 0, $sub$ptr$sub = 0, $sub$ptr$sub115 = 0, $sub$ptr$sub122 = 0, $sub$ptr$sub56 = 0, $sub$ptr$sub89 = 0, $tobool = 0;
 var $tobool$i$i = 0, $tobool$i$i$i = 0, $tobool$i$i$i108 = 0, $tobool43 = 0, $vfn$i = 0, $vfn$i103 = 0, $vfn$i113 = 0, $vfn$i138 = 0, $vfn$i75 = 0, $vfn$i79 = 0, $vfn$i84 = 0, $vfn$i89 = 0, $vfn$i93 = 0, $vfn$i98 = 0, $vtable$i = 0, $vtable$i102 = 0, $vtable$i112 = 0, $vtable$i137 = 0, $vtable$i74 = 0, $vtable$i78 = 0;
 var $vtable$i83 = 0, $vtable$i88 = 0, $vtable$i92 = 0, $vtable$i97 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__grouping = sp;
 $call$i = (__ZNKSt3__16locale9use_facetERNS0_2idE($__loc,4608)|0);
 $call$i73 = (__ZNKSt3__16locale9use_facetERNS0_2idE($__loc,4768)|0);
 $vtable$i = HEAP32[$call$i73>>2]|0;
 $vfn$i = (($vtable$i) + 20|0);
 $0 = HEAP32[$vfn$i>>2]|0;
 FUNCTION_TABLE_vii[$0 & 511]($__grouping,$call$i73);
 HEAP32[$__oe>>2] = $__ob;
 $1 = HEAP8[$__nb>>0]|0;
 if ((($1<<24>>24) == 43) | (($1<<24>>24) == 45)) {
  $vtable$i74 = HEAP32[$call$i>>2]|0;
  $vfn$i75 = (($vtable$i74) + 44|0);
  $2 = HEAP32[$vfn$i75>>2]|0;
  __THREW__ = 0;
  $call$i7677 = (invoke_iii($2|0,($call$i|0),($1|0))|0);
  $3 = __THREW__; __THREW__ = 0;
  $4 = $3&1;
  if (!($4)) {
   $incdec$ptr = (($__nb) + 1|0);
   $5 = HEAP32[$__oe>>2]|0;
   $incdec$ptr5 = (($5) + 4|0);
   HEAP32[$__oe>>2] = $incdec$ptr5;
   HEAP32[$5>>2] = $call$i7677;
   $__nf$0 = $incdec$ptr;
   label = 10;
  }
 } else {
  $__nf$0 = $__nb;
  label = 10;
 }
 L4: do {
  if ((label|0) == 10) {
   $sub$ptr$lhs$cast = $__ne;
   $sub$ptr$rhs$cast = $__nf$0;
   $sub$ptr$sub = (($sub$ptr$lhs$cast) - ($sub$ptr$rhs$cast))|0;
   $cmp6 = ($sub$ptr$sub|0)>(1);
   L6: do {
    if ($cmp6) {
     $16 = HEAP8[$__nf$0>>0]|0;
     $cmp8 = ($16<<24>>24)==(48);
     if ($cmp8) {
      $arrayidx10 = (($__nf$0) + 1|0);
      $17 = HEAP8[$arrayidx10>>0]|0;
      if ((($17<<24>>24) == 88) | (($17<<24>>24) == 120)) {
       $vtable$i78 = HEAP32[$call$i>>2]|0;
       $vfn$i79 = (($vtable$i78) + 44|0);
       $18 = HEAP32[$vfn$i79>>2]|0;
       __THREW__ = 0;
       $call$i8081 = (invoke_iii($18|0,($call$i|0),48)|0);
       $19 = __THREW__; __THREW__ = 0;
       $20 = $19&1;
       if ($20) {
        break L4;
       }
       $21 = HEAP32[$__oe>>2]|0;
       $incdec$ptr21 = (($21) + 4|0);
       HEAP32[$__oe>>2] = $incdec$ptr21;
       HEAP32[$21>>2] = $call$i8081;
       $incdec$ptr22 = (($__nf$0) + 2|0);
       $22 = HEAP8[$arrayidx10>>0]|0;
       $vtable$i83 = HEAP32[$call$i>>2]|0;
       $vfn$i84 = (($vtable$i83) + 44|0);
       $23 = HEAP32[$vfn$i84>>2]|0;
       __THREW__ = 0;
       $call$i8586 = (invoke_iii($23|0,($call$i|0),($22|0))|0);
       $24 = __THREW__; __THREW__ = 0;
       $25 = $24&1;
       if ($25) {
        break L4;
       }
       $26 = HEAP32[$__oe>>2]|0;
       $incdec$ptr25 = (($26) + 4|0);
       HEAP32[$__oe>>2] = $incdec$ptr25;
       HEAP32[$26>>2] = $call$i8586;
       $cmp26167 = ($incdec$ptr22>>>0)<($__ne>>>0);
       if ($cmp26167) {
        $__ns$0168 = $incdec$ptr22;
        while(1) {
         $27 = HEAP8[$__ns$0168>>0]|0;
         __THREW__ = 0;
         $call29 = (invoke_i(395)|0);
         $28 = __THREW__; __THREW__ = 0;
         $29 = $28&1;
         if ($29) {
          break;
         }
         $conv27 = $27 << 24 >> 24;
         __THREW__ = 0;
         $call31 = (invoke_iii(404,($conv27|0),($call29|0))|0);
         $30 = __THREW__; __THREW__ = 0;
         $31 = $30&1;
         if ($31) {
          break;
         }
         $tobool = ($call31|0)==(0);
         $incdec$ptr34 = (($__ns$0168) + 1|0);
         if ($tobool) {
          $__nf$1 = $incdec$ptr22;$__ns$2 = $__ns$0168;
          break L6;
         }
         $cmp26 = ($incdec$ptr34>>>0)<($__ne>>>0);
         if ($cmp26) {
          $__ns$0168 = $incdec$ptr34;
         } else {
          $__nf$1 = $incdec$ptr22;$__ns$2 = $incdec$ptr34;
          break L6;
         }
        }
        $12 = ___cxa_find_matching_catch()|0;
        $13 = tempRet0;
        $lpad$phi$index = $12;$lpad$phi$index5 = $13;
        __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
        ___resumeException($lpad$phi$index|0);
        // unreachable;
       } else {
        $__nf$1 = $incdec$ptr22;$__ns$2 = $incdec$ptr22;
       }
      } else {
       label = 11;
      }
     } else {
      label = 11;
     }
    } else {
     label = 11;
    }
   } while(0);
   L19: do {
    if ((label|0) == 11) {
     $cmp36159 = ($__nf$0>>>0)<($__ne>>>0);
     if ($cmp36159) {
      $__ns$1160 = $__nf$0;
      while(1) {
       $32 = HEAP8[$__ns$1160>>0]|0;
       __THREW__ = 0;
       $call40 = (invoke_i(395)|0);
       $33 = __THREW__; __THREW__ = 0;
       $34 = $33&1;
       if ($34) {
        break;
       }
       $conv38 = $32 << 24 >> 24;
       __THREW__ = 0;
       $call42 = (invoke_iii(405,($conv38|0),($call40|0))|0);
       $35 = __THREW__; __THREW__ = 0;
       $36 = $35&1;
       if ($36) {
        break;
       }
       $tobool43 = ($call42|0)==(0);
       $incdec$ptr47 = (($__ns$1160) + 1|0);
       if ($tobool43) {
        $__nf$1 = $__nf$0;$__ns$2 = $__ns$1160;
        break L19;
       }
       $cmp36 = ($incdec$ptr47>>>0)<($__ne>>>0);
       if ($cmp36) {
        $__ns$1160 = $incdec$ptr47;
       } else {
        $__nf$1 = $__nf$0;$__ns$2 = $incdec$ptr47;
        break L19;
       }
      }
      $10 = ___cxa_find_matching_catch()|0;
      $11 = tempRet0;
      $lpad$phi$index = $10;$lpad$phi$index5 = $11;
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
      ___resumeException($lpad$phi$index|0);
      // unreachable;
     } else {
      $__nf$1 = $__nf$0;$__ns$2 = $__nf$0;
     }
    }
   } while(0);
   $37 = HEAP8[$__grouping>>0]|0;
   $and$i$i$i = $37 & 1;
   $tobool$i$i$i = ($and$i$i$i<<24>>24)==(0);
   if ($tobool$i$i$i) {
    $conv$i$i$i = $37&255;
    $shr1$i$i$i = $conv$i$i$i >>> 1;
    $cond$i$i = $shr1$i$i$i;
   } else {
    $__size_$i2$i$i = (($__grouping) + 4|0);
    $38 = HEAP32[$__size_$i2$i$i>>2]|0;
    $cond$i$i = $38;
   }
   $cmp$i = ($cond$i$i|0)==(0);
   if ($cmp$i) {
    $39 = HEAP32[$__oe>>2]|0;
    $vtable$i92 = HEAP32[$call$i>>2]|0;
    $vfn$i93 = (($vtable$i92) + 48|0);
    $40 = HEAP32[$vfn$i93>>2]|0;
    __THREW__ = 0;
    (invoke_iiiii($40|0,($call$i|0),($__nf$1|0),($__ns$2|0),($39|0))|0);
    $41 = __THREW__; __THREW__ = 0;
    $42 = $41&1;
    if ($42) {
     break;
    }
    $sub$ptr$lhs$cast54 = $__ns$2;
    $sub$ptr$rhs$cast55 = $__nf$1;
    $sub$ptr$sub56 = (($sub$ptr$lhs$cast54) - ($sub$ptr$rhs$cast55))|0;
    $43 = HEAP32[$__oe>>2]|0;
    $add$ptr = (($43) + ($sub$ptr$sub56<<2)|0);
    HEAP32[$__oe>>2] = $add$ptr;
    $79 = $add$ptr;
   } else {
    $cmp$i$i = ($__nf$1|0)==($__ns$2|0);
    if (!($cmp$i$i)) {
     $incdec$ptr6$i$i = (($__ns$2) + -1|0);
     $cmp17$i$i = ($incdec$ptr6$i$i>>>0)>($__nf$1>>>0);
     if ($cmp17$i$i) {
      $__first$addr$08$i$i = $__nf$1;$incdec$ptr9$i$i = $incdec$ptr6$i$i;
      while(1) {
       $44 = HEAP8[$__first$addr$08$i$i>>0]|0;
       $45 = HEAP8[$incdec$ptr9$i$i>>0]|0;
       HEAP8[$__first$addr$08$i$i>>0] = $45;
       HEAP8[$incdec$ptr9$i$i>>0] = $44;
       $incdec$ptr2$i$i = (($__first$addr$08$i$i) + 1|0);
       $incdec$ptr$i$i = (($incdec$ptr9$i$i) + -1|0);
       $cmp1$i$i = ($incdec$ptr2$i$i>>>0)<($incdec$ptr$i$i>>>0);
       if ($cmp1$i$i) {
        $__first$addr$08$i$i = $incdec$ptr2$i$i;$incdec$ptr9$i$i = $incdec$ptr$i$i;
       } else {
        break;
       }
      }
     }
    }
    $vtable$i102 = HEAP32[$call$i73>>2]|0;
    $vfn$i103 = (($vtable$i102) + 16|0);
    $46 = HEAP32[$vfn$i103>>2]|0;
    __THREW__ = 0;
    $call$i104105 = (invoke_ii($46|0,($call$i73|0))|0);
    $47 = __THREW__; __THREW__ = 0;
    $48 = $47&1;
    if ($48) {
     break;
    }
    $cmp62151 = ($__nf$1>>>0)<($__ns$2>>>0);
    L43: do {
     if ($cmp62151) {
      $arrayidx$i$i$i = (($__grouping) + 1|0);
      $__size_$i2$i = (($__grouping) + 4|0);
      $__data_$i$i$i119 = (($__grouping) + 8|0);
      $__dc$0152 = 0;$__dg$0153 = 0;$__p$0154 = $__nf$1;
      while(1) {
       $49 = HEAP8[$__grouping>>0]|0;
       $and$i$i$i107 = $49 & 1;
       $tobool$i$i$i108 = ($and$i$i$i107<<24>>24)==(0);
       $50 = HEAP32[$__data_$i$i$i119>>2]|0;
       $arrayidx$i$i$i$ = $tobool$i$i$i108 ? $arrayidx$i$i$i : $50;
       $add$ptr$i = (($arrayidx$i$i$i$) + ($__dg$0153)|0);
       $51 = HEAP8[$add$ptr$i>>0]|0;
       $cmp67 = ($51<<24>>24)>(0);
       if ($cmp67) {
        $52 = HEAP32[$__data_$i$i$i119>>2]|0;
        $arrayidx$i$i$i$178 = $tobool$i$i$i108 ? $arrayidx$i$i$i : $52;
        $add$ptr$i125 = (($arrayidx$i$i$i$178) + ($__dg$0153)|0);
        $53 = HEAP8[$add$ptr$i125>>0]|0;
        $conv71 = $53 << 24 >> 24;
        $cmp72 = ($__dc$0152|0)==($conv71|0);
        if ($cmp72) {
         $54 = HEAP32[$__oe>>2]|0;
         $incdec$ptr74 = (($54) + 4|0);
         HEAP32[$__oe>>2] = $incdec$ptr74;
         HEAP32[$54>>2] = $call$i104105;
         $55 = HEAP8[$__grouping>>0]|0;
         $and$i$i = $55 & 1;
         $tobool$i$i = ($and$i$i<<24>>24)==(0);
         if ($tobool$i$i) {
          $conv$i$i = $55&255;
          $shr1$i$i = $conv$i$i >>> 1;
          $cond$i = $shr1$i$i;
         } else {
          $56 = HEAP32[$__size_$i2$i>>2]|0;
          $cond$i = $56;
         }
         $sub = (($cond$i) + -1)|0;
         $cmp76 = ($__dg$0153>>>0)<($sub>>>0);
         $inc = $cmp76&1;
         $inc$__dg$0 = (($inc) + ($__dg$0153))|0;
         $__dc$1 = 0;$__dg$1 = $inc$__dg$0;
        } else {
         $__dc$1 = $__dc$0152;$__dg$1 = $__dg$0153;
        }
       } else {
        $__dc$1 = $__dc$0152;$__dg$1 = $__dg$0153;
       }
       $57 = HEAP8[$__p$0154>>0]|0;
       $vtable$i137 = HEAP32[$call$i>>2]|0;
       $vfn$i138 = (($vtable$i137) + 44|0);
       $58 = HEAP32[$vfn$i138>>2]|0;
       __THREW__ = 0;
       $call$i139140 = (invoke_iii($58|0,($call$i|0),($57|0))|0);
       $59 = __THREW__; __THREW__ = 0;
       $60 = $59&1;
       if ($60) {
        break;
       }
       $61 = HEAP32[$__oe>>2]|0;
       $incdec$ptr82 = (($61) + 4|0);
       HEAP32[$__oe>>2] = $incdec$ptr82;
       HEAP32[$61>>2] = $call$i139140;
       $inc83 = (($__dc$1) + 1)|0;
       $incdec$ptr85 = (($__p$0154) + 1|0);
       $cmp62 = ($incdec$ptr85>>>0)<($__ns$2>>>0);
       if ($cmp62) {
        $__dc$0152 = $inc83;$__dg$0153 = $__dg$1;$__p$0154 = $incdec$ptr85;
       } else {
        $62 = $incdec$ptr82;
        break L43;
       }
      }
      $8 = ___cxa_find_matching_catch()|0;
      $9 = tempRet0;
      $lpad$phi$index = $8;$lpad$phi$index5 = $9;
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
      ___resumeException($lpad$phi$index|0);
      // unreachable;
     } else {
      $$pre = HEAP32[$__oe>>2]|0;
      $62 = $$pre;
     }
    } while(0);
    $sub$ptr$lhs$cast87 = $__nf$1;
    $sub$ptr$rhs$cast88 = $__nb;
    $sub$ptr$sub89 = (($sub$ptr$lhs$cast87) - ($sub$ptr$rhs$cast88))|0;
    $add$ptr90 = (($__ob) + ($sub$ptr$sub89<<2)|0);
    $cmp$i$i127 = ($add$ptr90|0)==($62|0);
    if ($cmp$i$i127) {
     $79 = $62;
    } else {
     $incdec$ptr6$i$i128 = (($62) + -4|0);
     $cmp17$i$i129 = ($incdec$ptr6$i$i128>>>0)>($add$ptr90>>>0);
     if ($cmp17$i$i129) {
      $__first$addr$08$i$i132 = $add$ptr90;$incdec$ptr9$i$i131 = $incdec$ptr6$i$i128;
      while(1) {
       $63 = HEAP32[$__first$addr$08$i$i132>>2]|0;
       $64 = HEAP32[$incdec$ptr9$i$i131>>2]|0;
       HEAP32[$__first$addr$08$i$i132>>2] = $64;
       HEAP32[$incdec$ptr9$i$i131>>2] = $63;
       $incdec$ptr2$i$i133 = (($__first$addr$08$i$i132) + 4|0);
       $incdec$ptr$i$i134 = (($incdec$ptr9$i$i131) + -4|0);
       $cmp1$i$i135 = ($incdec$ptr2$i$i133>>>0)<($incdec$ptr$i$i134>>>0);
       if ($cmp1$i$i135) {
        $__first$addr$08$i$i132 = $incdec$ptr2$i$i133;$incdec$ptr9$i$i131 = $incdec$ptr$i$i134;
       } else {
        $79 = $62;
        break;
       }
      }
     } else {
      $79 = $62;
     }
    }
   }
   $cmp94146 = ($__ns$2>>>0)<($__ne>>>0);
   L64: do {
    if ($cmp94146) {
     $__nf$2147 = $__ns$2;
     while(1) {
      $65 = HEAP8[$__nf$2147>>0]|0;
      $cmp97 = ($65<<24>>24)==(46);
      if ($cmp97) {
       label = 52;
       break;
      }
      $vtable$i97 = HEAP32[$call$i>>2]|0;
      $vfn$i98 = (($vtable$i97) + 44|0);
      $70 = HEAP32[$vfn$i98>>2]|0;
      __THREW__ = 0;
      $call$i99100 = (invoke_iii($70|0,($call$i|0),($65|0))|0);
      $71 = __THREW__; __THREW__ = 0;
      $72 = $71&1;
      if ($72) {
       label = 4;
       break;
      }
      $73 = HEAP32[$__oe>>2]|0;
      $incdec$ptr106 = (($73) + 4|0);
      HEAP32[$__oe>>2] = $incdec$ptr106;
      HEAP32[$73>>2] = $call$i99100;
      $incdec$ptr109 = (($__nf$2147) + 1|0);
      $cmp94 = ($incdec$ptr109>>>0)<($__ne>>>0);
      if ($cmp94) {
       $__nf$2147 = $incdec$ptr109;
      } else {
       $75 = $incdec$ptr106;$__nf$3 = $incdec$ptr109;
       break L64;
      }
     }
     if ((label|0) == 4) {
      $6 = ___cxa_find_matching_catch()|0;
      $7 = tempRet0;
      $lpad$phi$index = $6;$lpad$phi$index5 = $7;
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
      ___resumeException($lpad$phi$index|0);
      // unreachable;
     }
     else if ((label|0) == 52) {
      $vtable$i112 = HEAP32[$call$i73>>2]|0;
      $vfn$i113 = (($vtable$i112) + 12|0);
      $66 = HEAP32[$vfn$i113>>2]|0;
      __THREW__ = 0;
      $call$i114115 = (invoke_ii($66|0,($call$i73|0))|0);
      $67 = __THREW__; __THREW__ = 0;
      $68 = $67&1;
      if ($68) {
       break L4;
      }
      $69 = HEAP32[$__oe>>2]|0;
      $incdec$ptr101 = (($69) + 4|0);
      HEAP32[$__oe>>2] = $incdec$ptr101;
      HEAP32[$69>>2] = $call$i114115;
      $incdec$ptr102 = (($__nf$2147) + 1|0);
      $75 = $incdec$ptr101;$__nf$3 = $incdec$ptr102;
      break;
     }
    } else {
     $75 = $79;$__nf$3 = $__ns$2;
    }
   } while(0);
   $vtable$i88 = HEAP32[$call$i>>2]|0;
   $vfn$i89 = (($vtable$i88) + 48|0);
   $74 = HEAP32[$vfn$i89>>2]|0;
   __THREW__ = 0;
   (invoke_iiiii($74|0,($call$i|0),($__nf$3|0),($__ne|0),($75|0))|0);
   $76 = __THREW__; __THREW__ = 0;
   $77 = $76&1;
   if (!($77)) {
    $sub$ptr$rhs$cast114 = $__nf$3;
    $sub$ptr$sub115 = (($sub$ptr$lhs$cast) - ($sub$ptr$rhs$cast114))|0;
    $78 = HEAP32[$__oe>>2]|0;
    $add$ptr116 = (($78) + ($sub$ptr$sub115<<2)|0);
    HEAP32[$__oe>>2] = $add$ptr116;
    $cmp117 = ($__np|0)==($__ne|0);
    if ($cmp117) {
     $storemerge = $add$ptr116;
     HEAP32[$__op>>2] = $storemerge;
     __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
     STACKTOP = sp;return;
    }
    $sub$ptr$lhs$cast120 = $__np;
    $sub$ptr$rhs$cast121 = $__nb;
    $sub$ptr$sub122 = (($sub$ptr$lhs$cast120) - ($sub$ptr$rhs$cast121))|0;
    $add$ptr123 = (($__ob) + ($sub$ptr$sub122<<2)|0);
    $storemerge = $add$ptr123;
    HEAP32[$__op>>2] = $storemerge;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
    STACKTOP = sp;return;
   }
  }
 } while(0);
 $14 = ___cxa_find_matching_catch()|0;
 $15 = tempRet0;
 $lpad$phi$index = $14;$lpad$phi$index5 = $15;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
 ___resumeException($lpad$phi$index|0);
 // unreachable;
}
function __ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwe($agg$result,$this,$__s,$__iob,$__fl,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__s = $__s|0;
 $__iob = $__iob|0;
 $__fl = $__fl|0;
 $__v = +$__v;
 var $$pre = 0, $$pre60 = 0, $$pre61 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__fmt = 0, $__fmtflags_$i = 0, $__nar = 0, $__nb = 0, $__nc$0 = 0, $__nc$1 = 0, $__nc$2 = 0, $__o = 0, $__ob$0 = 0, $__oe = 0, $__op = 0, $__precision_$i = 0, $__precision_$i23 = 0;
 var $add$ptr = 0, $add$ptr32 = 0, $agg$tmp = 0, $agg$tmp$byval_copy = 0, $call10 = 0, $call14 = 0, $call19 = 0, $call2 = 0, $call22 = 0, $call25 = 0, $call34 = 0, $call4 = 0, $call43 = 0, $call7 = 0, $cmp = 0, $cmp27 = 0, $cmp38 = 0, $cmp44 = 0, $ehselector$slot$0 = 0, $ehselector$slot$158 = 0;
 var $exn$slot$0 = 0, $exn$slot$159 = 0, $mul40 = 0, $ref$tmp49 = 0, $ref$tmp53 = 0, $tobool$i$i$i19 = 0, $tobool$i$i$i32 = 0, $vararg_buffer = 0, $vararg_buffer2 = 0, $vararg_buffer5 = 0, $vararg_buffer9 = 0, $vararg_ptr1 = 0, $vararg_ptr8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 352|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $agg$tmp$byval_copy = sp + 288|0;
 $vararg_buffer9 = sp + 8|0;
 $vararg_buffer5 = sp + 40|0;
 $vararg_buffer2 = sp + 16|0;
 $vararg_buffer = sp + 24|0;
 $__fmt = sp;
 $__nar = sp + 308|0;
 $__nb = sp + 304|0;
 $__o = sp + 60|0;
 $__op = sp + 56|0;
 $__oe = sp + 52|0;
 $ref$tmp49 = sp + 296|0;
 $ref$tmp53 = sp + 292|0;
 $agg$tmp = sp + 300|0;
 $0 = $__fmt;
 $1 = $0;
 HEAP32[$1>>2] = 37;
 $2 = (($0) + 4)|0;
 $3 = $2;
 HEAP32[$3>>2] = 0;
 $add$ptr = (($__fmt) + 1|0);
 $__fmtflags_$i = (($__iob) + 4|0);
 $4 = HEAP32[$__fmtflags_$i>>2]|0;
 $call2 = (__ZNSt3__114__num_put_base14__format_floatEPcPKcj($add$ptr,3336,$4)|0);
 HEAP32[$__nb>>2] = $__nar;
 $call4 = (__ZNSt3__16__clocEv()|0);
 if ($call2) {
  $__precision_$i = (($__iob) + 8|0);
  $5 = HEAP32[$__precision_$i>>2]|0;
  HEAP32[$vararg_buffer>>2] = $5;
  $vararg_ptr1 = (($vararg_buffer) + 4|0);
  HEAPF64[tempDoublePtr>>3]=$__v;HEAP32[$vararg_ptr1>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_ptr1+4>>2]=HEAP32[tempDoublePtr+4>>2];
  $call7 = (__ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($__nar,30,$call4,$__fmt,$vararg_buffer)|0);
  $__nc$0 = $call7;
 } else {
  HEAPF64[tempDoublePtr>>3]=$__v;HEAP32[$vararg_buffer2>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_buffer2+4>>2]=HEAP32[tempDoublePtr+4>>2];
  $call10 = (__ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($__nar,30,$call4,$__fmt,$vararg_buffer2)|0);
  $__nc$0 = $call10;
 }
 $cmp = ($__nc$0|0)>(29);
 do {
  if ($cmp) {
   if ($call2) {
    __THREW__ = 0;
    $call14 = (invoke_i(395)|0);
    $6 = __THREW__; __THREW__ = 0;
    $7 = $6&1;
    if (!($7)) {
     $__precision_$i23 = (($__iob) + 8|0);
     $8 = HEAP32[$__precision_$i23>>2]|0;
     __THREW__ = 0;
     HEAP32[$vararg_buffer5>>2] = $8;
     $vararg_ptr8 = (($vararg_buffer5) + 4|0);
     HEAPF64[tempDoublePtr>>3]=$__v;HEAP32[$vararg_ptr8>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_ptr8+4>>2]=HEAP32[tempDoublePtr+4>>2];
     $call19 = (invoke_iiiii(401,($__nb|0),($call14|0),($__fmt|0),($vararg_buffer5|0))|0);
     $9 = __THREW__; __THREW__ = 0;
     $10 = $9&1;
     if (!($10)) {
      $__nc$1 = $call19;
      label = 12;
     }
    }
   } else {
    __THREW__ = 0;
    $call22 = (invoke_i(395)|0);
    $13 = __THREW__; __THREW__ = 0;
    $14 = $13&1;
    if (!($14)) {
     __THREW__ = 0;
     HEAPF64[tempDoublePtr>>3]=$__v;HEAP32[$vararg_buffer9>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_buffer9+4>>2]=HEAP32[tempDoublePtr+4>>2];
     $call25 = (invoke_iiiii(401,($__nb|0),($call22|0),($__fmt|0),($vararg_buffer9|0))|0);
     $15 = __THREW__; __THREW__ = 0;
     $16 = $15&1;
     if (!($16)) {
      $__nc$1 = $call25;
      label = 12;
     }
    }
   }
   if ((label|0) == 12) {
    $17 = HEAP32[$__nb>>2]|0;
    $cmp27 = ($17|0)==(0|0);
    if (!($cmp27)) {
     $20 = $17;$38 = $17;$__nc$2 = $__nc$1;
     break;
    }
    __THREW__ = 0;
    invoke_v(383);
    $18 = __THREW__; __THREW__ = 0;
    $19 = $18&1;
    if (!($19)) {
     $$pre = HEAP32[$__nb>>2]|0;
     $20 = $$pre;$38 = $$pre;$__nc$2 = $__nc$1;
     break;
    }
   }
   $11 = ___cxa_find_matching_catch()|0;
   $12 = tempRet0;
   $ehselector$slot$158 = $12;$exn$slot$159 = $11;
   ___resumeException($exn$slot$159|0);
   // unreachable;
  } else {
   $$pre60 = HEAP32[$__nb>>2]|0;
   $20 = $$pre60;$38 = 0;$__nc$2 = $__nc$0;
  }
 } while(0);
 $add$ptr32 = (($20) + ($__nc$2)|0);
 $call34 = (__ZNSt3__114__num_put_base18__identify_paddingEPcS1_RKNS_8ios_baseE($20,$add$ptr32,$__iob)|0);
 $cmp38 = ($20|0)==($__nar|0);
 if ($cmp38) {
  $27 = $__nar;$37 = 0;$__ob$0 = $__o;
  label = 20;
 } else {
  $mul40 = $__nc$2 << 3;
  $call43 = (_malloc($mul40)|0);
  $cmp44 = ($call43|0)==(0|0);
  if ($cmp44) {
   __THREW__ = 0;
   invoke_v(383);
   $21 = __THREW__; __THREW__ = 0;
   $22 = $21&1;
   if ($22) {
    $43 = 0;
    label = 19;
   } else {
    $$pre61 = HEAP32[$__nb>>2]|0;
    $27 = $$pre61;$37 = $call43;$__ob$0 = $call43;
    label = 20;
   }
  } else {
   $27 = $20;$37 = $call43;$__ob$0 = $call43;
   label = 20;
  }
 }
 do {
  if ((label|0) == 20) {
   __THREW__ = 0;
   invoke_vii(358,($ref$tmp49|0),($__iob|0));
   $25 = __THREW__; __THREW__ = 0;
   $26 = $25&1;
   if ($26) {
    $43 = $37;
    label = 19;
   } else {
    __THREW__ = 0;
    invoke_viiiiiii(407,($27|0),($call34|0),($add$ptr32|0),($__ob$0|0),($__op|0),($__oe|0),($ref$tmp49|0));
    $28 = __THREW__; __THREW__ = 0;
    $29 = $28&1;
    if ($29) {
     $39 = ___cxa_find_matching_catch()|0;
     $40 = tempRet0;
     $41 = HEAP32[$ref$tmp49>>2]|0;
     (__ZNSt3__114__shared_count16__release_sharedEv($41)|0);
     $42 = $37;$ehselector$slot$0 = $40;$exn$slot$0 = $39;
     break;
    }
    $30 = HEAP32[$ref$tmp49>>2]|0;
    (__ZNSt3__114__shared_count16__release_sharedEv($30)|0);
    $31 = HEAP32[$__s>>2]|0;
    HEAP32[$agg$tmp>>2] = $31;
    $32 = HEAP32[$__op>>2]|0;
    $33 = HEAP32[$__oe>>2]|0;
    __THREW__ = 0;
    ;HEAP32[$agg$tmp$byval_copy+0>>2]=HEAP32[$agg$tmp+0>>2]|0;
    invoke_viiiiiii(408,($ref$tmp53|0),($agg$tmp$byval_copy|0),($__ob$0|0),($32|0),($33|0),($__iob|0),($__fl|0));
    $34 = __THREW__; __THREW__ = 0;
    $35 = $34&1;
    if ($35) {
     $43 = $37;
     label = 19;
    } else {
     $36 = HEAP32[$ref$tmp53>>2]|0;
     HEAP32[$__s>>2] = $36;
     HEAP32[$agg$result>>2] = $36;
     $tobool$i$i$i32 = ($37|0)==(0|0);
     if ($tobool$i$i$i32) {
      _free($38);
      STACKTOP = sp;return;
     }
     _free($37);
     _free($38);
     STACKTOP = sp;return;
    }
   }
  }
 } while(0);
 if ((label|0) == 19) {
  $23 = ___cxa_find_matching_catch()|0;
  $24 = tempRet0;
  $42 = $43;$ehselector$slot$0 = $24;$exn$slot$0 = $23;
 }
 $tobool$i$i$i19 = ($42|0)==(0|0);
 if (!($tobool$i$i$i19)) {
  _free($42);
 }
 _free($38);
 $ehselector$slot$158 = $ehselector$slot$0;$exn$slot$159 = $exn$slot$0;
 ___resumeException($exn$slot$159|0);
 // unreachable;
}
function __ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwPKv($agg$result,$this,$__s,$__iob,$__fl,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__s = $__s|0;
 $__iob = $__iob|0;
 $__fl = $__fl|0;
 $__v = $__v|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $__fmt = 0, $__nar = 0, $__o = 0, $__op$0 = 0, $add$ptr = 0, $add$ptr13 = 0, $add$ptr19 = 0, $agg$tmp = 0, $agg$tmp$byval_copy = 0, $call = 0, $call$i8 = 0, $call3 = 0;
 var $call6 = 0, $cmp = 0, $ref$tmp = 0, $sub$ptr$lhs$cast16 = 0, $sub$ptr$rhs$cast = 0, $sub$ptr$sub18 = 0, $vararg_buffer = 0, $vfn$i = 0, $vtable$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 192|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $agg$tmp$byval_copy = sp + 160|0;
 $vararg_buffer = sp;
 $__fmt = sp + 164|0;
 $__nar = sp + 172|0;
 $__o = sp + 8|0;
 $ref$tmp = sp + 4|0;
 $agg$tmp = sp + 156|0;
 ;HEAP8[$__fmt+0>>0]=HEAP8[3416+0>>0]|0;HEAP8[$__fmt+1>>0]=HEAP8[3416+1>>0]|0;HEAP8[$__fmt+2>>0]=HEAP8[3416+2>>0]|0;HEAP8[$__fmt+3>>0]=HEAP8[3416+3>>0]|0;HEAP8[$__fmt+4>>0]=HEAP8[3416+4>>0]|0;HEAP8[$__fmt+5>>0]=HEAP8[3416+5>>0]|0;
 $call = (__ZNSt3__16__clocEv()|0);
 HEAP32[$vararg_buffer>>2] = $__v;
 $call3 = (__ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($__nar,20,$call,$__fmt,$vararg_buffer)|0);
 $add$ptr = (($__nar) + ($call3)|0);
 $call6 = (__ZNSt3__114__num_put_base18__identify_paddingEPcS1_RKNS_8ios_baseE($__nar,$add$ptr,$__iob)|0);
 __ZNKSt3__18ios_base6getlocEv($ref$tmp,$__iob);
 __THREW__ = 0;
 $call$i8 = (invoke_iii(359,($ref$tmp|0),(4608|0))|0);
 $0 = __THREW__; __THREW__ = 0;
 $1 = $0&1;
 if ($1) {
  $4 = ___cxa_find_matching_catch()|0;
  $5 = tempRet0;
  $6 = HEAP32[$ref$tmp>>2]|0;
  (__ZNSt3__114__shared_count16__release_sharedEv($6)|0);
  ___resumeException($4|0);
  // unreachable;
 }
 $2 = HEAP32[$ref$tmp>>2]|0;
 (__ZNSt3__114__shared_count16__release_sharedEv($2)|0);
 $vtable$i = HEAP32[$call$i8>>2]|0;
 $vfn$i = (($vtable$i) + 48|0);
 $3 = HEAP32[$vfn$i>>2]|0;
 (FUNCTION_TABLE_iiiii[$3 & 511]($call$i8,$__nar,$add$ptr,$__o)|0);
 $add$ptr13 = (($__o) + ($call3<<2)|0);
 $cmp = ($call6|0)==($add$ptr|0);
 if ($cmp) {
  $__op$0 = $add$ptr13;
  $7 = HEAP32[$__s>>2]|0;
  HEAP32[$agg$tmp>>2] = $7;
  ;HEAP32[$agg$tmp$byval_copy+0>>2]=HEAP32[$agg$tmp+0>>2]|0;
  __ZNSt3__116__pad_and_outputIwNS_11char_traitsIwEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($agg$result,$agg$tmp$byval_copy,$__o,$__op$0,$add$ptr13,$__iob,$__fl);
  STACKTOP = sp;return;
 }
 $sub$ptr$rhs$cast = $__nar;
 $sub$ptr$lhs$cast16 = $call6;
 $sub$ptr$sub18 = (($sub$ptr$lhs$cast16) - ($sub$ptr$rhs$cast))|0;
 $add$ptr19 = (($__o) + ($sub$ptr$sub18<<2)|0);
 $__op$0 = $add$ptr19;
 $7 = HEAP32[$__s>>2]|0;
 HEAP32[$agg$tmp>>2] = $7;
 ;HEAP32[$agg$tmp$byval_copy+0>>2]=HEAP32[$agg$tmp+0>>2]|0;
 __ZNSt3__116__pad_and_outputIwNS_11char_traitsIwEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($agg$result,$agg$tmp$byval_copy,$__o,$__op$0,$add$ptr13,$__iob,$__fl);
 STACKTOP = sp;return;
}
function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKcSC_($agg$result,$this,$__b,$__e,$__iob,$__err,$__tm,$__fmtb,$__fmte) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__tm = $__tm|0;
 $__fmtb = $__fmtb|0;
 $__fmte = $__fmte|0;
 var $$pre = 0, $$pre$i$i$i65 = 0, $$pre$i$i$i99 = 0, $$pre$i12$i$i115 = 0, $$pre$i12$i$i115185 = 0, $$pre$i12$i$i115186 = 0, $$pre184 = 0, $$pre184$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0;
 var $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0;
 var $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0;
 var $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $7 = 0, $8 = 0, $9 = 0, $__cmd$0 = 0, $__einp_$i$i = 0, $__einp_$i$i$i$i = 0, $__einp_$i$i$i$i57 = 0, $__einp_$i$i$i$i91 = 0;
 var $__einp_$i$i142 = 0, $__einp_$i$i4$i$i = 0, $__einp_$i$i4$i$i107 = 0, $__einp_$i$i4$i$i73 = 0, $__fmtb$addr$0$ph$be = 0, $__fmtb$addr$0$ph182 = 0, $__fmtb$addr$0$pn = 0, $__fmtb$addr$1 = 0, $__fmtb$addr$2 = 0, $__fmtb$addr$2$lcssa = 0, $__ninp_$i$i = 0, $__ninp_$i$i$i$i = 0, $__ninp_$i$i$i$i56 = 0, $__ninp_$i$i$i$i90 = 0, $__ninp_$i$i141 = 0, $__ninp_$i$i3$i$i = 0, $__ninp_$i$i3$i$i106 = 0, $__ninp_$i$i3$i$i72 = 0, $__opt$0 = 0, $__tab_$i = 0;
 var $agg$tmp = 0, $agg$tmp$byval_copy = 0, $agg$tmp23 = 0, $agg$tmp23$byval_copy = 0, $and3$i = 0, $and3$i126 = 0, $and3$i49 = 0, $arrayidx$i = 0, $arrayidx$i125 = 0, $arrayidx$i48 = 0, $call$i$i = 0, $call$i$i$i$i = 0, $call$i$i$i$i62 = 0, $call$i$i$i$i96 = 0, $call$i$i146 = 0, $call$i$i9$i$i = 0, $call$i$i9$i$i112 = 0, $call$i$i9$i$i78 = 0, $call$i155 = 0, $call$i158 = 0;
 var $call$i35 = 0, $call$i38 = 0, $call$i41 = 0, $call$i44 = 0, $cmp = 0, $cmp$i = 0, $cmp$i$i$i = 0, $cmp$i$i$i$i = 0, $cmp$i$i$i$i58 = 0, $cmp$i$i$i$i92 = 0, $cmp$i$i$i102 = 0, $cmp$i$i$i68 = 0, $cmp$i$i120 = 0, $cmp$i$i134 = 0, $cmp$i$i143 = 0, $cmp$i$i162 = 0, $cmp$i$i5$i$i = 0, $cmp$i$i5$i$i108 = 0, $cmp$i$i5$i$i74 = 0, $cmp$i1$i$i$i = 0;
 var $cmp$i1$i$i$i63 = 0, $cmp$i1$i$i$i97 = 0, $cmp$i1$i10$i$i = 0, $cmp$i1$i10$i$i113 = 0, $cmp$i1$i10$i$i79 = 0, $cmp$i127 = 0, $cmp$i15$i$i118 = 0, $cmp$i50 = 0, $cmp17 = 0, $cmp181 = 0, $cmp2 = 0, $cmp28 = 0, $cmp49 = 0, $cmp5 = 0, $cmp7 = 0, $cmptmp$i$i119 = 0, $conv$i = 0, $conv$i$i$i = 0, $conv$i$i$i148 = 0, $conv$i121 = 0;
 var $conv$i123 = 0, $conv$i151 = 0, $conv$i46 = 0, $incdec$ptr = 0, $incdec$ptr$i$i = 0, $incdec$ptr$i$i167 = 0, $incdec$ptr16 = 0, $incdec$ptr24 = 0, $incdec$ptr52 = 0, $isascii2$i = 0, $isascii2$i122 = 0, $isascii2$i45 = 0, $or = 0, $ref$tmp = 0, $ref$tmp22 = 0, $retval$0$i$i = 0, $retval$0$i$i150 = 0, $sext = 0, $tobool$i$i$i = 0, $tobool$i$i$i55 = 0;
 var $tobool$i$i$i89 = 0, $tobool$i2$i$i = 0, $tobool$i2$i$i104 = 0, $tobool$i2$i$i70 = 0, $vfn = 0, $vfn$i = 0, $vfn$i$i = 0, $vfn$i$i$i$i = 0, $vfn$i$i$i$i61 = 0, $vfn$i$i$i$i95 = 0, $vfn$i$i136 = 0, $vfn$i$i145 = 0, $vfn$i$i164 = 0, $vfn$i$i8$i$i = 0, $vfn$i$i8$i$i111 = 0, $vfn$i$i8$i$i77 = 0, $vfn$i154 = 0, $vfn$i157 = 0, $vfn$i40 = 0, $vfn$i43 = 0;
 var $vtable = 0, $vtable$i = 0, $vtable$i$i = 0, $vtable$i$i$i$i = 0, $vtable$i$i$i$i60 = 0, $vtable$i$i$i$i94 = 0, $vtable$i$i135 = 0, $vtable$i$i144 = 0, $vtable$i$i163 = 0, $vtable$i$i7$i$i = 0, $vtable$i$i7$i$i110 = 0, $vtable$i$i7$i$i76 = 0, $vtable$i153 = 0, $vtable$i156 = 0, $vtable$i39 = 0, $vtable$i42 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $agg$tmp23$byval_copy = sp + 20|0;
 $agg$tmp$byval_copy = sp + 16|0;
 $ref$tmp = sp + 12|0;
 $ref$tmp22 = sp + 8|0;
 $agg$tmp = sp + 4|0;
 $agg$tmp23 = sp;
 __ZNKSt3__18ios_base6getlocEv($ref$tmp,$__iob);
 __THREW__ = 0;
 $call$i35 = (invoke_iii(359,($ref$tmp|0),(4616|0))|0);
 $0 = __THREW__; __THREW__ = 0;
 $1 = $0&1;
 if ($1) {
  $13 = ___cxa_find_matching_catch()|0;
  $14 = tempRet0;
  $15 = HEAP32[$ref$tmp>>2]|0;
  (__ZNSt3__114__shared_count16__release_sharedEv($15)|0);
  ___resumeException($13|0);
  // unreachable;
 }
 $2 = HEAP32[$ref$tmp>>2]|0;
 (__ZNSt3__114__shared_count16__release_sharedEv($2)|0);
 HEAP32[$__err>>2] = 0;
 $cmp181 = ($__fmtb|0)==($__fmte|0);
 L4: do {
  if ($cmp181) {
   label = 62;
  } else {
   $__tab_$i = (($call$i35) + 8|0);
   $$pre184 = 0;$__fmtb$addr$0$ph182 = $__fmtb;
   L6: while(1) {
    $3 = $$pre184;
    while(1) {
     $cmp2 = ($3|0)==(0);
     if (!($cmp2)) {
      label = 62;
      break L4;
     }
     $4 = HEAP32[$__b>>2]|0;
     $tobool$i$i$i = ($4|0)==(0|0);
     if ($tobool$i$i$i) {
      $8 = 0;
     } else {
      $__ninp_$i$i$i$i = (($4) + 12|0);
      $5 = HEAP32[$__ninp_$i$i$i$i>>2]|0;
      $__einp_$i$i$i$i = (($4) + 16|0);
      $6 = HEAP32[$__einp_$i$i$i$i>>2]|0;
      $cmp$i$i$i$i = ($5|0)==($6|0);
      if ($cmp$i$i$i$i) {
       $vtable$i$i$i$i = HEAP32[$4>>2]|0;
       $vfn$i$i$i$i = (($vtable$i$i$i$i) + 36|0);
       $7 = HEAP32[$vfn$i$i$i$i>>2]|0;
       $call$i$i$i$i = (FUNCTION_TABLE_ii[$7 & 511]($4)|0);
       $cmp$i1$i$i$i = ($call$i$i$i$i|0)==(-1);
       if ($cmp$i1$i$i$i) {
        HEAP32[$__b>>2] = 0;
        $8 = 0;
       } else {
        $8 = $4;
       }
      } else {
       $8 = $4;
      }
     }
     $cmp$i$i$i = ($8|0)==(0|0);
     $9 = HEAP32[$__e>>2]|0;
     $tobool$i2$i$i = ($9|0)==(0|0);
     do {
      if ($tobool$i2$i$i) {
       label = 15;
      } else {
       $__ninp_$i$i3$i$i = (($9) + 12|0);
       $10 = HEAP32[$__ninp_$i$i3$i$i>>2]|0;
       $__einp_$i$i4$i$i = (($9) + 16|0);
       $11 = HEAP32[$__einp_$i$i4$i$i>>2]|0;
       $cmp$i$i5$i$i = ($10|0)==($11|0);
       if ($cmp$i$i5$i$i) {
        $vtable$i$i7$i$i = HEAP32[$9>>2]|0;
        $vfn$i$i8$i$i = (($vtable$i$i7$i$i) + 36|0);
        $12 = HEAP32[$vfn$i$i8$i$i>>2]|0;
        $call$i$i9$i$i = (FUNCTION_TABLE_ii[$12 & 511]($9)|0);
        $cmp$i1$i10$i$i = ($call$i$i9$i$i|0)==(-1);
        if ($cmp$i1$i10$i$i) {
         HEAP32[$__e>>2] = 0;
         label = 15;
         break;
        }
       }
       if ($cmp$i$i$i) {
        $23 = $9;
       } else {
        label = 16;
        break L6;
       }
      }
     } while(0);
     if ((label|0) == 15) {
      label = 0;
      if ($cmp$i$i$i) {
       label = 16;
       break L6;
      } else {
       $23 = 0;
      }
     }
     $16 = HEAP8[$__fmtb$addr$0$ph182>>0]|0;
     $vtable$i = HEAP32[$call$i35>>2]|0;
     $vfn$i = (($vtable$i) + 36|0);
     $17 = HEAP32[$vfn$i>>2]|0;
     $call$i38 = (FUNCTION_TABLE_iiii[$17 & 511]($call$i35,$16,0)|0);
     $cmp5 = ($call$i38<<24>>24)==(37);
     if ($cmp5) {
      label = 19;
      break;
     }
     $25 = HEAP8[$__fmtb$addr$0$ph182>>0]|0;
     $isascii2$i = ($25<<24>>24)>(-1);
     if ($isascii2$i) {
      $conv$i = $25 << 24 >> 24;
      $26 = HEAP32[$__tab_$i>>2]|0;
      $arrayidx$i = (($26) + ($conv$i<<1)|0);
      $27 = HEAP16[$arrayidx$i>>1]|0;
      $and3$i = $27 & 8192;
      $cmp$i = ($and3$i<<16>>16)==(0);
      if (!($cmp$i)) {
       $__fmtb$addr$0$pn = $__fmtb$addr$0$ph182;
       label = 30;
       break;
      }
     }
     $__ninp_$i$i141 = (($8) + 12|0);
     $47 = HEAP32[$__ninp_$i$i141>>2]|0;
     $__einp_$i$i142 = (($8) + 16|0);
     $48 = HEAP32[$__einp_$i$i142>>2]|0;
     $cmp$i$i143 = ($47|0)==($48|0);
     if ($cmp$i$i143) {
      $vtable$i$i144 = HEAP32[$8>>2]|0;
      $vfn$i$i145 = (($vtable$i$i144) + 36|0);
      $49 = HEAP32[$vfn$i$i145>>2]|0;
      $call$i$i146 = (FUNCTION_TABLE_ii[$49 & 511]($8)|0);
      $retval$0$i$i150 = $call$i$i146;
     } else {
      $50 = HEAP8[$47>>0]|0;
      $conv$i$i$i148 = $50&255;
      $retval$0$i$i150 = $conv$i$i$i148;
     }
     $conv$i151 = $retval$0$i$i150&255;
     $vtable$i153 = HEAP32[$call$i35>>2]|0;
     $vfn$i154 = (($vtable$i153) + 12|0);
     $51 = HEAP32[$vfn$i154>>2]|0;
     $call$i155 = (FUNCTION_TABLE_iii[$51 & 511]($call$i35,$conv$i151)|0);
     $52 = HEAP8[$__fmtb$addr$0$ph182>>0]|0;
     $vtable$i156 = HEAP32[$call$i35>>2]|0;
     $vfn$i157 = (($vtable$i156) + 12|0);
     $53 = HEAP32[$vfn$i157>>2]|0;
     $call$i158 = (FUNCTION_TABLE_iii[$53 & 511]($call$i35,$52)|0);
     $cmp49 = ($call$i155<<24>>24)==($call$i158<<24>>24);
     if ($cmp49) {
      label = 57;
      break;
     }
     HEAP32[$__err>>2] = 4;
     $3 = 4;
    }
    L34: do {
     if ((label|0) == 19) {
      label = 0;
      $incdec$ptr = (($__fmtb$addr$0$ph182) + 1|0);
      $cmp7 = ($incdec$ptr|0)==($__fmte|0);
      if ($cmp7) {
       label = 20;
       break L6;
      }
      $18 = HEAP8[$incdec$ptr>>0]|0;
      $vtable$i39 = HEAP32[$call$i35>>2]|0;
      $vfn$i40 = (($vtable$i39) + 36|0);
      $19 = HEAP32[$vfn$i40>>2]|0;
      $call$i41 = (FUNCTION_TABLE_iiii[$19 & 511]($call$i35,$18,0)|0);
      if ((($call$i41<<24>>24) == 48) | (($call$i41<<24>>24) == 69)) {
       $incdec$ptr16 = (($__fmtb$addr$0$ph182) + 2|0);
       $cmp17 = ($incdec$ptr16|0)==($__fmte|0);
       if ($cmp17) {
        label = 23;
        break L6;
       }
       $20 = HEAP8[$incdec$ptr16>>0]|0;
       $vtable$i42 = HEAP32[$call$i35>>2]|0;
       $vfn$i43 = (($vtable$i42) + 36|0);
       $21 = HEAP32[$vfn$i43>>2]|0;
       $call$i44 = (FUNCTION_TABLE_iiii[$21 & 511]($call$i35,$20,0)|0);
       $__cmd$0 = $call$i44;$__fmtb$addr$1 = $incdec$ptr16;$__opt$0 = $call$i41;
      } else {
       $__cmd$0 = $call$i41;$__fmtb$addr$1 = $incdec$ptr;$__opt$0 = 0;
      }
      $vtable = HEAP32[$this>>2]|0;
      $vfn = (($vtable) + 36|0);
      $22 = HEAP32[$vfn>>2]|0;
      HEAP32[$agg$tmp>>2] = $8;
      HEAP32[$agg$tmp23>>2] = $23;
      ;HEAP32[$agg$tmp$byval_copy+0>>2]=HEAP32[$agg$tmp+0>>2]|0;
      ;HEAP32[$agg$tmp23$byval_copy+0>>2]=HEAP32[$agg$tmp23+0>>2]|0;
      FUNCTION_TABLE_viiiiiiiii[$22 & 255]($ref$tmp22,$this,$agg$tmp$byval_copy,$agg$tmp23$byval_copy,$__iob,$__err,$__tm,$__cmd$0,$__opt$0);
      $24 = HEAP32[$ref$tmp22>>2]|0;
      HEAP32[$__b>>2] = $24;
      $incdec$ptr24 = (($__fmtb$addr$1) + 1|0);
      $__fmtb$addr$0$ph$be = $incdec$ptr24;
     }
     else if ((label|0) == 30) {
      while(1) {
       label = 0;
       $__fmtb$addr$2 = (($__fmtb$addr$0$pn) + 1|0);
       $cmp28 = ($__fmtb$addr$2|0)==($__fmte|0);
       if ($cmp28) {
        $__fmtb$addr$2$lcssa = $__fmte;
        break;
       }
       $28 = HEAP8[$__fmtb$addr$2>>0]|0;
       $isascii2$i45 = ($28<<24>>24)>(-1);
       if (!($isascii2$i45)) {
        $__fmtb$addr$2$lcssa = $__fmtb$addr$2;
        break;
       }
       $conv$i46 = $28 << 24 >> 24;
       $arrayidx$i48 = (($26) + ($conv$i46<<1)|0);
       $29 = HEAP16[$arrayidx$i48>>1]|0;
       $and3$i49 = $29 & 8192;
       $cmp$i50 = ($and3$i49<<16>>16)==(0);
       if ($cmp$i50) {
        $__fmtb$addr$2$lcssa = $__fmtb$addr$2;
        break;
       } else {
        $__fmtb$addr$0$pn = $__fmtb$addr$2;
        label = 30;
       }
      }
      $$pre$i$i$i99 = $8;$$pre$i12$i$i115 = $23;$34 = $23;
      while(1) {
       $tobool$i$i$i89 = ($$pre$i$i$i99|0)==(0|0);
       if ($tobool$i$i$i89) {
        $33 = 0;
       } else {
        $__ninp_$i$i$i$i90 = (($$pre$i$i$i99) + 12|0);
        $30 = HEAP32[$__ninp_$i$i$i$i90>>2]|0;
        $__einp_$i$i$i$i91 = (($$pre$i$i$i99) + 16|0);
        $31 = HEAP32[$__einp_$i$i$i$i91>>2]|0;
        $cmp$i$i$i$i92 = ($30|0)==($31|0);
        if ($cmp$i$i$i$i92) {
         $vtable$i$i$i$i94 = HEAP32[$$pre$i$i$i99>>2]|0;
         $vfn$i$i$i$i95 = (($vtable$i$i$i$i94) + 36|0);
         $32 = HEAP32[$vfn$i$i$i$i95>>2]|0;
         $call$i$i$i$i96 = (FUNCTION_TABLE_ii[$32 & 511]($$pre$i$i$i99)|0);
         $cmp$i1$i$i$i97 = ($call$i$i$i$i96|0)==(-1);
         if ($cmp$i1$i$i$i97) {
          HEAP32[$__b>>2] = 0;
          $33 = 0;
         } else {
          $33 = $$pre$i$i$i99;
         }
        } else {
         $33 = $$pre$i$i$i99;
        }
       }
       $cmp$i$i$i102 = ($33|0)==(0|0);
       $tobool$i2$i$i104 = ($34|0)==(0|0);
       do {
        if ($tobool$i2$i$i104) {
         $$pre$i12$i$i115186 = $$pre$i12$i$i115;
         label = 43;
        } else {
         $__ninp_$i$i3$i$i106 = (($34) + 12|0);
         $35 = HEAP32[$__ninp_$i$i3$i$i106>>2]|0;
         $__einp_$i$i4$i$i107 = (($34) + 16|0);
         $36 = HEAP32[$__einp_$i$i4$i$i107>>2]|0;
         $cmp$i$i5$i$i108 = ($35|0)==($36|0);
         if (!($cmp$i$i5$i$i108)) {
          if ($cmp$i$i$i102) {
           $$pre$i12$i$i115185 = $$pre$i12$i$i115;$66 = $34;
           break;
          } else {
           $__fmtb$addr$0$ph$be = $__fmtb$addr$2$lcssa;
           break L34;
          }
         }
         $vtable$i$i7$i$i110 = HEAP32[$34>>2]|0;
         $vfn$i$i8$i$i111 = (($vtable$i$i7$i$i110) + 36|0);
         $37 = HEAP32[$vfn$i$i8$i$i111>>2]|0;
         $call$i$i9$i$i112 = (FUNCTION_TABLE_ii[$37 & 511]($34)|0);
         $cmp$i1$i10$i$i113 = ($call$i$i9$i$i112|0)==(-1);
         if ($cmp$i1$i10$i$i113) {
          HEAP32[$__e>>2] = 0;
          $$pre$i12$i$i115186 = 0;
          label = 43;
          break;
         } else {
          $cmp$i15$i$i118 = ($$pre$i12$i$i115|0)==(0|0);
          $cmptmp$i$i119 = $cmp$i$i$i102 ^ $cmp$i15$i$i118;
          if ($cmptmp$i$i119) {
           $$pre$i12$i$i115185 = $$pre$i12$i$i115;$66 = $$pre$i12$i$i115;
           break;
          } else {
           $__fmtb$addr$0$ph$be = $__fmtb$addr$2$lcssa;
           break L34;
          }
         }
        }
       } while(0);
       if ((label|0) == 43) {
        label = 0;
        if ($cmp$i$i$i102) {
         $__fmtb$addr$0$ph$be = $__fmtb$addr$2$lcssa;
         break L34;
        } else {
         $$pre$i12$i$i115185 = $$pre$i12$i$i115186;$66 = 0;
        }
       }
       $__ninp_$i$i = (($33) + 12|0);
       $38 = HEAP32[$__ninp_$i$i>>2]|0;
       $__einp_$i$i = (($33) + 16|0);
       $39 = HEAP32[$__einp_$i$i>>2]|0;
       $cmp$i$i120 = ($38|0)==($39|0);
       if ($cmp$i$i120) {
        $vtable$i$i = HEAP32[$33>>2]|0;
        $vfn$i$i = (($vtable$i$i) + 36|0);
        $40 = HEAP32[$vfn$i$i>>2]|0;
        $call$i$i = (FUNCTION_TABLE_ii[$40 & 511]($33)|0);
        $retval$0$i$i = $call$i$i;
       } else {
        $41 = HEAP8[$38>>0]|0;
        $conv$i$i$i = $41&255;
        $retval$0$i$i = $conv$i$i$i;
       }
       $conv$i121 = $retval$0$i$i&255;
       $isascii2$i122 = ($conv$i121<<24>>24)>(-1);
       if (!($isascii2$i122)) {
        $__fmtb$addr$0$ph$be = $__fmtb$addr$2$lcssa;
        break L34;
       }
       $sext = $retval$0$i$i << 24;
       $conv$i123 = $sext >> 24;
       $42 = HEAP32[$__tab_$i>>2]|0;
       $arrayidx$i125 = (($42) + ($conv$i123<<1)|0);
       $43 = HEAP16[$arrayidx$i125>>1]|0;
       $and3$i126 = $43 & 8192;
       $cmp$i127 = ($and3$i126<<16>>16)==(0);
       if ($cmp$i127) {
        $__fmtb$addr$0$ph$be = $__fmtb$addr$2$lcssa;
        break L34;
       }
       $44 = HEAP32[$__ninp_$i$i>>2]|0;
       $45 = HEAP32[$__einp_$i$i>>2]|0;
       $cmp$i$i134 = ($44|0)==($45|0);
       if ($cmp$i$i134) {
        $vtable$i$i135 = HEAP32[$33>>2]|0;
        $vfn$i$i136 = (($vtable$i$i135) + 40|0);
        $46 = HEAP32[$vfn$i$i136>>2]|0;
        (FUNCTION_TABLE_ii[$46 & 511]($33)|0);
        $$pre$i$i$i99 = $33;$$pre$i12$i$i115 = $$pre$i12$i$i115185;$34 = $66;
        continue;
       } else {
        $incdec$ptr$i$i = (($44) + 1|0);
        HEAP32[$__ninp_$i$i>>2] = $incdec$ptr$i$i;
        $$pre$i$i$i99 = $33;$$pre$i12$i$i115 = $$pre$i12$i$i115185;$34 = $66;
        continue;
       }
      }
     }
     else if ((label|0) == 57) {
      label = 0;
      $54 = HEAP32[$__ninp_$i$i141>>2]|0;
      $55 = HEAP32[$__einp_$i$i142>>2]|0;
      $cmp$i$i162 = ($54|0)==($55|0);
      if ($cmp$i$i162) {
       $vtable$i$i163 = HEAP32[$8>>2]|0;
       $vfn$i$i164 = (($vtable$i$i163) + 40|0);
       $56 = HEAP32[$vfn$i$i164>>2]|0;
       (FUNCTION_TABLE_ii[$56 & 511]($8)|0);
      } else {
       $incdec$ptr$i$i167 = (($54) + 1|0);
       HEAP32[$__ninp_$i$i141>>2] = $incdec$ptr$i$i167;
      }
      $incdec$ptr52 = (($__fmtb$addr$0$ph182) + 1|0);
      $__fmtb$addr$0$ph$be = $incdec$ptr52;
     }
    } while(0);
    $cmp = ($__fmtb$addr$0$ph$be|0)==($__fmte|0);
    if ($cmp) {
     label = 62;
     break L4;
    }
    $$pre184$pre = HEAP32[$__err>>2]|0;
    $$pre184 = $$pre184$pre;$__fmtb$addr$0$ph182 = $__fmtb$addr$0$ph$be;
   }
   if ((label|0) == 16) {
    HEAP32[$__err>>2] = 4;
    $$pre$i$i$i65 = $8;
    break;
   }
   else if ((label|0) == 20) {
    HEAP32[$__err>>2] = 4;
    $$pre$i$i$i65 = $8;
    break;
   }
   else if ((label|0) == 23) {
    HEAP32[$__err>>2] = 4;
    $$pre$i$i$i65 = $8;
    break;
   }
  }
 } while(0);
 if ((label|0) == 62) {
  $$pre = HEAP32[$__b>>2]|0;
  $$pre$i$i$i65 = $$pre;
 }
 $tobool$i$i$i55 = ($$pre$i$i$i65|0)==(0|0);
 if ($tobool$i$i$i55) {
  $60 = 0;
 } else {
  $__ninp_$i$i$i$i56 = (($$pre$i$i$i65) + 12|0);
  $57 = HEAP32[$__ninp_$i$i$i$i56>>2]|0;
  $__einp_$i$i$i$i57 = (($$pre$i$i$i65) + 16|0);
  $58 = HEAP32[$__einp_$i$i$i$i57>>2]|0;
  $cmp$i$i$i$i58 = ($57|0)==($58|0);
  if ($cmp$i$i$i$i58) {
   $vtable$i$i$i$i60 = HEAP32[$$pre$i$i$i65>>2]|0;
   $vfn$i$i$i$i61 = (($vtable$i$i$i$i60) + 36|0);
   $59 = HEAP32[$vfn$i$i$i$i61>>2]|0;
   $call$i$i$i$i62 = (FUNCTION_TABLE_ii[$59 & 511]($$pre$i$i$i65)|0);
   $cmp$i1$i$i$i63 = ($call$i$i$i$i62|0)==(-1);
   if ($cmp$i1$i$i$i63) {
    HEAP32[$__b>>2] = 0;
    $60 = 0;
   } else {
    $60 = $$pre$i$i$i65;
   }
  } else {
   $60 = $$pre$i$i$i65;
  }
 }
 $cmp$i$i$i68 = ($60|0)==(0|0);
 $61 = HEAP32[$__e>>2]|0;
 $tobool$i2$i$i70 = ($61|0)==(0|0);
 do {
  if ($tobool$i2$i$i70) {
   label = 72;
  } else {
   $__ninp_$i$i3$i$i72 = (($61) + 12|0);
   $62 = HEAP32[$__ninp_$i$i3$i$i72>>2]|0;
   $__einp_$i$i4$i$i73 = (($61) + 16|0);
   $63 = HEAP32[$__einp_$i$i4$i$i73>>2]|0;
   $cmp$i$i5$i$i74 = ($62|0)==($63|0);
   if ($cmp$i$i5$i$i74) {
    $vtable$i$i7$i$i76 = HEAP32[$61>>2]|0;
    $vfn$i$i8$i$i77 = (($vtable$i$i7$i$i76) + 36|0);
    $64 = HEAP32[$vfn$i$i8$i$i77>>2]|0;
    $call$i$i9$i$i78 = (FUNCTION_TABLE_ii[$64 & 511]($61)|0);
    $cmp$i1$i10$i$i79 = ($call$i$i9$i$i78|0)==(-1);
    if ($cmp$i1$i10$i$i79) {
     HEAP32[$__e>>2] = 0;
     label = 72;
     break;
    }
   }
   if ($cmp$i$i$i68) {
    HEAP32[$agg$result>>2] = $60;
    STACKTOP = sp;return;
   }
  }
 } while(0);
 if ((label|0) == 72) {
  if (!($cmp$i$i$i68)) {
   HEAP32[$agg$result>>2] = $60;
   STACKTOP = sp;return;
  }
 }
 $65 = HEAP32[$__err>>2]|0;
 $or = $65 | 2;
 HEAP32[$__err>>2] = $or;
 HEAP32[$agg$result>>2] = $60;
 STACKTOP = sp;return;
}
function __ZNSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 STACKTOP = sp;return;
}
function __ZNSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED1Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return;
}
function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE13do_date_orderEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return 2;
}
function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11do_get_timeES4_S4_RNS_8ios_baseERjP2tm($agg$result,$this,$__b,$__e,$__iob,$__err,$__tm) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__tm = $__tm|0;
 var $0 = 0, $1 = 0, $agg$tmp = 0, $agg$tmp$byval_copy = 0, $agg$tmp2 = 0, $agg$tmp2$byval_copy = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $agg$tmp2$byval_copy = sp + 12|0;
 $agg$tmp$byval_copy = sp + 8|0;
 $agg$tmp = sp + 4|0;
 $agg$tmp2 = sp;
 $0 = HEAP32[$__b>>2]|0;
 HEAP32[$agg$tmp>>2] = $0;
 $1 = HEAP32[$__e>>2]|0;
 HEAP32[$agg$tmp2>>2] = $1;
 ;HEAP32[$agg$tmp$byval_copy+0>>2]=HEAP32[$agg$tmp+0>>2]|0;
 ;HEAP32[$agg$tmp2$byval_copy+0>>2]=HEAP32[$agg$tmp2+0>>2]|0;
 __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKcSC_($agg$result,$this,$agg$tmp$byval_copy,$agg$tmp2$byval_copy,$__iob,$__err,$__tm,3520,((3520 + 8|0)));
 STACKTOP = sp;return;
}
function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11do_get_dateES4_S4_RNS_8ios_baseERjP2tm($agg$result,$this,$__b,$__e,$__iob,$__err,$__tm) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__tm = $__tm|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $__data_$i$i$i = 0, $__size_$i2$i = 0, $add$ptr = 0, $add$ptr6 = 0, $agg$tmp = 0, $agg$tmp$byval_copy = 0, $agg$tmp2 = 0, $agg$tmp2$byval_copy = 0, $and$i$i$i = 0, $arrayidx$i$i$i = 0, $arrayidx$i$i$i9 = 0, $call = 0, $cond$i = 0, $cond$i$i1117 = 0;
 var $cond$i$i1315 = 0, $conv$i$i = 0, $shr1$i$i = 0, $tobool$i$i$i = 0, $vfn = 0, $vtable = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $agg$tmp2$byval_copy = sp + 12|0;
 $agg$tmp$byval_copy = sp + 8|0;
 $agg$tmp = sp + 4|0;
 $agg$tmp2 = sp;
 $add$ptr = (($this) + 8|0);
 $vtable = HEAP32[$add$ptr>>2]|0;
 $vfn = (($vtable) + 20|0);
 $0 = HEAP32[$vfn>>2]|0;
 $call = (FUNCTION_TABLE_ii[$0 & 511]($add$ptr)|0);
 $1 = HEAP32[$__b>>2]|0;
 HEAP32[$agg$tmp>>2] = $1;
 $2 = HEAP32[$__e>>2]|0;
 HEAP32[$agg$tmp2>>2] = $2;
 $3 = HEAP8[$call>>0]|0;
 $and$i$i$i = $3 & 1;
 $tobool$i$i$i = ($and$i$i$i<<24>>24)==(0);
 if ($tobool$i$i$i) {
  $arrayidx$i$i$i = (($call) + 1|0);
  $arrayidx$i$i$i9 = (($call) + 1|0);
  $conv$i$i = $3&255;
  $shr1$i$i = $conv$i$i >>> 1;
  $cond$i = $shr1$i$i;$cond$i$i1117 = $arrayidx$i$i$i9;$cond$i$i1315 = $arrayidx$i$i$i;
 } else {
  $__data_$i$i$i = (($call) + 8|0);
  $4 = HEAP32[$__data_$i$i$i>>2]|0;
  $__size_$i2$i = (($call) + 4|0);
  $5 = HEAP32[$__size_$i2$i>>2]|0;
  $cond$i = $5;$cond$i$i1117 = $4;$cond$i$i1315 = $4;
 }
 $add$ptr6 = (($cond$i$i1117) + ($cond$i)|0);
 ;HEAP32[$agg$tmp$byval_copy+0>>2]=HEAP32[$agg$tmp+0>>2]|0;
 ;HEAP32[$agg$tmp2$byval_copy+0>>2]=HEAP32[$agg$tmp2+0>>2]|0;
 __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKcSC_($agg$result,$this,$agg$tmp$byval_copy,$agg$tmp2$byval_copy,$__iob,$__err,$__tm,$cond$i$i1315,$add$ptr6);
 STACKTOP = sp;return;
}
function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE14do_get_weekdayES4_S4_RNS_8ios_baseERjP2tm($agg$result,$this,$__b,$__e,$__iob,$__err,$__tm) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__tm = $__tm|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $agg$tmp = 0, $agg$tmp$byval_copy = 0, $call$i1 = 0, $ref$tmp = 0, $tm_wday = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $agg$tmp$byval_copy = sp + 8|0;
 $ref$tmp = sp + 4|0;
 $agg$tmp = sp;
 __ZNKSt3__18ios_base6getlocEv($ref$tmp,$__iob);
 __THREW__ = 0;
 $call$i1 = (invoke_iii(359,($ref$tmp|0),(4616|0))|0);
 $0 = __THREW__; __THREW__ = 0;
 $1 = $0&1;
 if ($1) {
  $5 = ___cxa_find_matching_catch()|0;
  $6 = tempRet0;
  $7 = HEAP32[$ref$tmp>>2]|0;
  (__ZNSt3__114__shared_count16__release_sharedEv($7)|0);
  ___resumeException($5|0);
  // unreachable;
 } else {
  $2 = HEAP32[$ref$tmp>>2]|0;
  (__ZNSt3__114__shared_count16__release_sharedEv($2)|0);
  $tm_wday = (($__tm) + 24|0);
  $3 = HEAP32[$__e>>2]|0;
  HEAP32[$agg$tmp>>2] = $3;
  ;HEAP32[$agg$tmp$byval_copy+0>>2]=HEAP32[$agg$tmp+0>>2]|0;
  __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__get_weekdaynameERiRS4_S4_RjRKNS_5ctypeIcEE($this,$tm_wday,$__b,$agg$tmp$byval_copy,$__err,$call$i1);
  $4 = HEAP32[$__b>>2]|0;
  HEAP32[$agg$result>>2] = $4;
  STACKTOP = sp;return;
 }
}
function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__get_weekdaynameERiRS4_S4_RjRKNS_5ctypeIcEE($this,$__w,$__b,$__e,$__err,$__ct) {
 $this = $this|0;
 $__w = $__w|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__err = $__err|0;
 $__ct = $__ct|0;
 var $0 = 0, $1 = 0, $add$ptr = 0, $add$ptr2 = 0, $agg$tmp = 0, $agg$tmp$byval_copy = 0, $call = 0, $call3 = 0, $cmp = 0, $rem = 0, $sub$ptr$div = 0, $sub$ptr$lhs$cast = 0, $sub$ptr$rhs$cast = 0, $sub$ptr$sub = 0, $vtable = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $agg$tmp$byval_copy = sp + 4|0;
 $agg$tmp = sp;
 $add$ptr = (($this) + 8|0);
 $vtable = HEAP32[$add$ptr>>2]|0;
 $0 = HEAP32[$vtable>>2]|0;
 $call = (FUNCTION_TABLE_ii[$0 & 511]($add$ptr)|0);
 $1 = HEAP32[$__e>>2]|0;
 HEAP32[$agg$tmp>>2] = $1;
 $add$ptr2 = (($call) + 168|0);
 ;HEAP32[$agg$tmp$byval_copy+0>>2]=HEAP32[$agg$tmp+0>>2]|0;
 $call3 = (__ZNSt3__114__scan_keywordINS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEPKNS_12basic_stringIcS3_NS_9allocatorIcEEEENS_5ctypeIcEEEET0_RT_SE_SD_SD_RKT1_Rjb($__b,$agg$tmp$byval_copy,$call,$add$ptr2,$__ct,$__err,0)|0);
 $sub$ptr$lhs$cast = $call3;
 $sub$ptr$rhs$cast = $call;
 $sub$ptr$sub = (($sub$ptr$lhs$cast) - ($sub$ptr$rhs$cast))|0;
 $cmp = ($sub$ptr$sub|0)<(168);
 if (!($cmp)) {
  STACKTOP = sp;return;
 }
 $sub$ptr$div = (($sub$ptr$sub|0) / 12)&-1;
 $rem = (($sub$ptr$div|0) % 7)&-1;
 HEAP32[$__w>>2] = $rem;
 STACKTOP = sp;return;
}
function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE16do_get_monthnameES4_S4_RNS_8ios_baseERjP2tm($agg$result,$this,$__b,$__e,$__iob,$__err,$__tm) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__tm = $__tm|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $agg$tmp = 0, $agg$tmp$byval_copy = 0, $call$i1 = 0, $ref$tmp = 0, $tm_mon = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $agg$tmp$byval_copy = sp + 8|0;
 $ref$tmp = sp + 4|0;
 $agg$tmp = sp;
 __ZNKSt3__18ios_base6getlocEv($ref$tmp,$__iob);
 __THREW__ = 0;
 $call$i1 = (invoke_iii(359,($ref$tmp|0),(4616|0))|0);
 $0 = __THREW__; __THREW__ = 0;
 $1 = $0&1;
 if ($1) {
  $5 = ___cxa_find_matching_catch()|0;
  $6 = tempRet0;
  $7 = HEAP32[$ref$tmp>>2]|0;
  (__ZNSt3__114__shared_count16__release_sharedEv($7)|0);
  ___resumeException($5|0);
  // unreachable;
 } else {
  $2 = HEAP32[$ref$tmp>>2]|0;
  (__ZNSt3__114__shared_count16__release_sharedEv($2)|0);
  $tm_mon = (($__tm) + 16|0);
  $3 = HEAP32[$__e>>2]|0;
  HEAP32[$agg$tmp>>2] = $3;
  ;HEAP32[$agg$tmp$byval_copy+0>>2]=HEAP32[$agg$tmp+0>>2]|0;
  __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE15__get_monthnameERiRS4_S4_RjRKNS_5ctypeIcEE($this,$tm_mon,$__b,$agg$tmp$byval_copy,$__err,$call$i1);
  $4 = HEAP32[$__b>>2]|0;
  HEAP32[$agg$result>>2] = $4;
  STACKTOP = sp;return;
 }
}
function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE15__get_monthnameERiRS4_S4_RjRKNS_5ctypeIcEE($this,$__m,$__b,$__e,$__err,$__ct) {
 $this = $this|0;
 $__m = $__m|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__err = $__err|0;
 $__ct = $__ct|0;
 var $0 = 0, $1 = 0, $add$ptr = 0, $add$ptr2 = 0, $agg$tmp = 0, $agg$tmp$byval_copy = 0, $call = 0, $call3 = 0, $cmp = 0, $rem = 0, $sub$ptr$div = 0, $sub$ptr$lhs$cast = 0, $sub$ptr$rhs$cast = 0, $sub$ptr$sub = 0, $vfn = 0, $vtable = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $agg$tmp$byval_copy = sp + 4|0;
 $agg$tmp = sp;
 $add$ptr = (($this) + 8|0);
 $vtable = HEAP32[$add$ptr>>2]|0;
 $vfn = (($vtable) + 4|0);
 $0 = HEAP32[$vfn>>2]|0;
 $call = (FUNCTION_TABLE_ii[$0 & 511]($add$ptr)|0);
 $1 = HEAP32[$__e>>2]|0;
 HEAP32[$agg$tmp>>2] = $1;
 $add$ptr2 = (($call) + 288|0);
 ;HEAP32[$agg$tmp$byval_copy+0>>2]=HEAP32[$agg$tmp+0>>2]|0;
 $call3 = (__ZNSt3__114__scan_keywordINS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEPKNS_12basic_stringIcS3_NS_9allocatorIcEEEENS_5ctypeIcEEEET0_RT_SE_SD_SD_RKT1_Rjb($__b,$agg$tmp$byval_copy,$call,$add$ptr2,$__ct,$__err,0)|0);
 $sub$ptr$lhs$cast = $call3;
 $sub$ptr$rhs$cast = $call;
 $sub$ptr$sub = (($sub$ptr$lhs$cast) - ($sub$ptr$rhs$cast))|0;
 $cmp = ($sub$ptr$sub|0)<(288);
 if (!($cmp)) {
  STACKTOP = sp;return;
 }
 $sub$ptr$div = (($sub$ptr$sub|0) / 12)&-1;
 $rem = (($sub$ptr$div|0) % 12)&-1;
 HEAP32[$__m>>2] = $rem;
 STACKTOP = sp;return;
}
function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11do_get_yearES4_S4_RNS_8ios_baseERjP2tm($agg$result,$this,$__b,$__e,$__iob,$__err,$__tm) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__tm = $__tm|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $agg$tmp = 0, $agg$tmp$byval_copy = 0, $call$i1 = 0, $ref$tmp = 0, $tm_year = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $agg$tmp$byval_copy = sp + 8|0;
 $ref$tmp = sp + 4|0;
 $agg$tmp = sp;
 __ZNKSt3__18ios_base6getlocEv($ref$tmp,$__iob);
 __THREW__ = 0;
 $call$i1 = (invoke_iii(359,($ref$tmp|0),(4616|0))|0);
 $0 = __THREW__; __THREW__ = 0;
 $1 = $0&1;
 if ($1) {
  $5 = ___cxa_find_matching_catch()|0;
  $6 = tempRet0;
  $7 = HEAP32[$ref$tmp>>2]|0;
  (__ZNSt3__114__shared_count16__release_sharedEv($7)|0);
  ___resumeException($5|0);
  // unreachable;
 } else {
  $2 = HEAP32[$ref$tmp>>2]|0;
  (__ZNSt3__114__shared_count16__release_sharedEv($2)|0);
  $tm_year = (($__tm) + 20|0);
  $3 = HEAP32[$__e>>2]|0;
  HEAP32[$agg$tmp>>2] = $3;
  ;HEAP32[$agg$tmp$byval_copy+0>>2]=HEAP32[$agg$tmp+0>>2]|0;
  __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE10__get_yearERiRS4_S4_RjRKNS_5ctypeIcEE(0,$tm_year,$__b,$agg$tmp$byval_copy,$__err,$call$i1);
  $4 = HEAP32[$__b>>2]|0;
  HEAP32[$agg$result>>2] = $4;
  STACKTOP = sp;return;
 }
}
function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE10__get_yearERiRS4_S4_RjRKNS_5ctypeIcEE($this,$__y,$__b,$__e,$__err,$__ct) {
 $this = $this|0;
 $__y = $__y|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__err = $__err|0;
 $__ct = $__ct|0;
 var $0 = 0, $1 = 0, $2 = 0, $__t$0 = 0, $add = 0, $add6 = 0, $add6$call = 0, $agg$tmp = 0, $agg$tmp$byval_copy = 0, $and = 0, $call = 0, $call$off = 0, $cmp = 0, $sub = 0, $tobool = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $agg$tmp$byval_copy = sp + 4|0;
 $agg$tmp = sp;
 $0 = HEAP32[$__e>>2]|0;
 HEAP32[$agg$tmp>>2] = $0;
 ;HEAP32[$agg$tmp$byval_copy+0>>2]=HEAP32[$agg$tmp+0>>2]|0;
 $call = (__ZNSt3__120__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$agg$tmp$byval_copy,$__err,$__ct,4)|0);
 $1 = HEAP32[$__err>>2]|0;
 $and = $1 & 4;
 $tobool = ($and|0)==(0);
 if (!($tobool)) {
  STACKTOP = sp;return;
 }
 $cmp = ($call|0)<(69);
 if ($cmp) {
  $add = (($call) + 2000)|0;
  $__t$0 = $add;
 } else {
  $call$off = (($call) + -69)|0;
  $2 = ($call$off>>>0)<(31);
  $add6 = (($call) + 1900)|0;
  $add6$call = $2 ? $add6 : $call;
  $__t$0 = $add6$call;
 }
 $sub = (($__t$0) + -1900)|0;
 HEAP32[$__y>>2] = $sub;
 STACKTOP = sp;return;
}
function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjP2tmcc($agg$result,$this,$__b,$__e,$__iob,$__err,$__tm,$__fmt,$0) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__tm = $__tm|0;
 $__fmt = $__fmt|0;
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__data_$i$i$i = 0, $__data_$i$i$i87 = 0, $__size_$i2$i = 0, $__size_$i2$i107 = 0, $add$ptr = 0;
 var $add$ptr12 = 0, $add$ptr64 = 0, $add$ptr74 = 0, $agg$tmp = 0, $agg$tmp$byval_copy = 0, $agg$tmp14 = 0, $agg$tmp14$byval_copy = 0, $agg$tmp17 = 0, $agg$tmp17$byval_copy = 0, $agg$tmp18 = 0, $agg$tmp18$byval_copy = 0, $agg$tmp21 = 0, $agg$tmp21$byval_copy = 0, $agg$tmp22 = 0, $agg$tmp22$byval_copy = 0, $agg$tmp24 = 0, $agg$tmp24$byval_copy = 0, $agg$tmp27 = 0, $agg$tmp27$byval_copy = 0, $agg$tmp29 = 0;
 var $agg$tmp29$byval_copy = 0, $agg$tmp3 = 0, $agg$tmp3$byval_copy = 0, $agg$tmp32 = 0, $agg$tmp32$byval_copy = 0, $agg$tmp34 = 0, $agg$tmp34$byval_copy = 0, $agg$tmp36 = 0, $agg$tmp36$byval_copy = 0, $agg$tmp39 = 0, $agg$tmp39$byval_copy = 0, $agg$tmp42 = 0, $agg$tmp42$byval_copy = 0, $agg$tmp43 = 0, $agg$tmp43$byval_copy = 0, $agg$tmp46 = 0, $agg$tmp46$byval_copy = 0, $agg$tmp47 = 0, $agg$tmp47$byval_copy = 0, $agg$tmp49 = 0;
 var $agg$tmp49$byval_copy = 0, $agg$tmp52 = 0, $agg$tmp52$byval_copy = 0, $agg$tmp53 = 0, $agg$tmp53$byval_copy = 0, $agg$tmp56 = 0, $agg$tmp56$byval_copy = 0, $agg$tmp60 = 0, $agg$tmp60$byval_copy = 0, $agg$tmp61 = 0, $agg$tmp61$byval_copy = 0, $agg$tmp69 = 0, $agg$tmp69$byval_copy = 0, $agg$tmp7 = 0, $agg$tmp7$byval_copy = 0, $agg$tmp70 = 0, $agg$tmp70$byval_copy = 0, $agg$tmp76 = 0, $agg$tmp76$byval_copy = 0, $agg$tmp79 = 0;
 var $agg$tmp79$byval_copy = 0, $agg$tmp8 = 0, $agg$tmp8$byval_copy = 0, $agg$tmp81 = 0, $agg$tmp81$byval_copy = 0, $and$i$i$i = 0, $and$i$i$i85 = 0, $arrayidx$i$i$i = 0, $arrayidx$i$i$i100 = 0, $arrayidx$i$i$i80 = 0, $arrayidx$i$i$i90 = 0, $call$i71 = 0, $call5 = 0, $call67 = 0, $cond$i = 0, $cond$i$i102124 = 0, $cond$i$i114116 = 0, $cond$i$i82118 = 0, $cond$i$i92120122 = 0, $cond$i112 = 0;
 var $conv = 0, $conv$i$i = 0, $conv$i$i109 = 0, $or = 0, $ref$tmp = 0, $ref$tmp16 = 0, $ref$tmp20 = 0, $ref$tmp41 = 0, $ref$tmp45 = 0, $ref$tmp51 = 0, $ref$tmp6 = 0, $ref$tmp68 = 0, $shr1$i$i = 0, $shr1$i$i110 = 0, $tm_hour = 0, $tm_hour26 = 0, $tm_hour38 = 0, $tm_mday = 0, $tm_min = 0, $tm_mon = 0;
 var $tm_mon31 = 0, $tm_wday = 0, $tm_wday55 = 0, $tm_yday = 0, $tm_year = 0, $tm_year78 = 0, $tobool$i$i$i = 0, $tobool$i$i$i86 = 0, $vfn = 0, $vfn59 = 0, $vfn66 = 0, $vtable = 0, $vtable58 = 0, $vtable65 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 288|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $agg$tmp81$byval_copy = sp + 116|0;
 $agg$tmp79$byval_copy = sp + 112|0;
 $agg$tmp76$byval_copy = sp + 108|0;
 $agg$tmp70$byval_copy = sp + 208|0;
 $agg$tmp69$byval_copy = sp + 260|0;
 $agg$tmp61$byval_copy = sp + 268|0;
 $agg$tmp60$byval_copy = sp + 252|0;
 $agg$tmp56$byval_copy = sp + 216|0;
 $agg$tmp53$byval_copy = sp + 16|0;
 $agg$tmp52$byval_copy = sp + 20|0;
 $agg$tmp49$byval_copy = sp + 24|0;
 $agg$tmp47$byval_copy = sp + 28|0;
 $agg$tmp46$byval_copy = sp + 32|0;
 $agg$tmp43$byval_copy = sp + 36|0;
 $agg$tmp42$byval_copy = sp + 40|0;
 $agg$tmp39$byval_copy = sp + 212|0;
 $agg$tmp36$byval_copy = sp + 44|0;
 $agg$tmp34$byval_copy = sp + 48|0;
 $agg$tmp32$byval_copy = sp + 52|0;
 $agg$tmp29$byval_copy = sp + 56|0;
 $agg$tmp27$byval_copy = sp + 60|0;
 $agg$tmp24$byval_copy = sp + 64|0;
 $agg$tmp22$byval_copy = sp + 68|0;
 $agg$tmp21$byval_copy = sp + 72|0;
 $agg$tmp18$byval_copy = sp + 76|0;
 $agg$tmp17$byval_copy = sp + 80|0;
 $agg$tmp14$byval_copy = sp + 84|0;
 $agg$tmp8$byval_copy = sp + 88|0;
 $agg$tmp7$byval_copy = sp + 92|0;
 $agg$tmp3$byval_copy = sp + 232|0;
 $agg$tmp$byval_copy = sp + 240|0;
 $ref$tmp = sp + 248|0;
 $agg$tmp = sp + 256|0;
 $agg$tmp3 = sp + 264|0;
 $ref$tmp6 = sp + 272|0;
 $agg$tmp7 = sp + 276|0;
 $agg$tmp8 = sp + 120|0;
 $agg$tmp14 = sp + 124|0;
 $ref$tmp16 = sp + 128|0;
 $agg$tmp17 = sp + 132|0;
 $agg$tmp18 = sp + 136|0;
 $ref$tmp20 = sp + 140|0;
 $agg$tmp21 = sp + 144|0;
 $agg$tmp22 = sp + 148|0;
 $agg$tmp24 = sp + 152|0;
 $agg$tmp27 = sp + 156|0;
 $agg$tmp29 = sp + 160|0;
 $agg$tmp32 = sp + 164|0;
 $agg$tmp34 = sp + 168|0;
 $agg$tmp36 = sp + 172|0;
 $agg$tmp39 = sp + 176|0;
 $ref$tmp41 = sp + 180|0;
 $agg$tmp42 = sp + 184|0;
 $agg$tmp43 = sp + 188|0;
 $ref$tmp45 = sp + 192|0;
 $agg$tmp46 = sp + 196|0;
 $agg$tmp47 = sp + 200|0;
 $agg$tmp49 = sp + 204|0;
 $ref$tmp51 = sp + 12|0;
 $agg$tmp52 = sp + 8|0;
 $agg$tmp53 = sp + 224|0;
 $agg$tmp56 = sp + 4|0;
 $agg$tmp60 = sp + 228|0;
 $agg$tmp61 = sp + 96|0;
 $ref$tmp68 = sp;
 $agg$tmp69 = sp + 220|0;
 $agg$tmp70 = sp + 100|0;
 $agg$tmp76 = sp + 236|0;
 $agg$tmp79 = sp + 244|0;
 $agg$tmp81 = sp + 104|0;
 HEAP32[$__err>>2] = 0;
 __ZNKSt3__18ios_base6getlocEv($ref$tmp,$__iob);
 __THREW__ = 0;
 $call$i71 = (invoke_iii(359,($ref$tmp|0),(4616|0))|0);
 $1 = __THREW__; __THREW__ = 0;
 $2 = $1&1;
 if ($2) {
  $4 = ___cxa_find_matching_catch()|0;
  $5 = tempRet0;
  $6 = HEAP32[$ref$tmp>>2]|0;
  (__ZNSt3__114__shared_count16__release_sharedEv($6)|0);
  ___resumeException($4|0);
  // unreachable;
 }
 $3 = HEAP32[$ref$tmp>>2]|0;
 (__ZNSt3__114__shared_count16__release_sharedEv($3)|0);
 $conv = $__fmt << 24 >> 24;
 do {
  switch ($conv|0) {
  case 72:  {
   $tm_hour = (($__tm) + 8|0);
   $23 = HEAP32[$__e>>2]|0;
   HEAP32[$agg$tmp24>>2] = $23;
   ;HEAP32[$agg$tmp24$byval_copy+0>>2]=HEAP32[$agg$tmp24+0>>2]|0;
   __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE10__get_hourERiRS4_S4_RjRKNS_5ctypeIcEE(0,$tm_hour,$__b,$agg$tmp24$byval_copy,$__err,$call$i71);
   break;
  }
  case 84:  {
   $37 = HEAP32[$__b>>2]|0;
   HEAP32[$agg$tmp52>>2] = $37;
   $38 = HEAP32[$__e>>2]|0;
   HEAP32[$agg$tmp53>>2] = $38;
   ;HEAP32[$agg$tmp52$byval_copy+0>>2]=HEAP32[$agg$tmp52+0>>2]|0;
   ;HEAP32[$agg$tmp53$byval_copy+0>>2]=HEAP32[$agg$tmp53+0>>2]|0;
   __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKcSC_($ref$tmp51,$this,$agg$tmp52$byval_copy,$agg$tmp53$byval_copy,$__iob,$__err,$__tm,3568,((3568 + 8|0)));
   $39 = HEAP32[$ref$tmp51>>2]|0;
   HEAP32[$__b>>2] = $39;
   break;
  }
  case 109:  {
   $tm_mon31 = (($__tm) + 16|0);
   $26 = HEAP32[$__e>>2]|0;
   HEAP32[$agg$tmp32>>2] = $26;
   ;HEAP32[$agg$tmp32$byval_copy+0>>2]=HEAP32[$agg$tmp32+0>>2]|0;
   __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11__get_monthERiRS4_S4_RjRKNS_5ctypeIcEE(0,$tm_mon31,$__b,$agg$tmp32$byval_copy,$__err,$call$i71);
   break;
  }
  case 77:  {
   $tm_min = (($__tm) + 4|0);
   $27 = HEAP32[$__e>>2]|0;
   HEAP32[$agg$tmp34>>2] = $27;
   ;HEAP32[$agg$tmp34$byval_copy+0>>2]=HEAP32[$agg$tmp34+0>>2]|0;
   __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE12__get_minuteERiRS4_S4_RjRKNS_5ctypeIcEE(0,$tm_min,$__b,$agg$tmp34$byval_copy,$__err,$call$i71);
   break;
  }
  case 101: case 100:  {
   $tm_mday = (($__tm) + 12|0);
   $16 = HEAP32[$__e>>2]|0;
   HEAP32[$agg$tmp14>>2] = $16;
   ;HEAP32[$agg$tmp14$byval_copy+0>>2]=HEAP32[$agg$tmp14+0>>2]|0;
   __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE9__get_dayERiRS4_S4_RjRKNS_5ctypeIcEE(0,$tm_mday,$__b,$agg$tmp14$byval_copy,$__err,$call$i71);
   break;
  }
  case 114:  {
   $30 = HEAP32[$__b>>2]|0;
   HEAP32[$agg$tmp42>>2] = $30;
   $31 = HEAP32[$__e>>2]|0;
   HEAP32[$agg$tmp43>>2] = $31;
   ;HEAP32[$agg$tmp42$byval_copy+0>>2]=HEAP32[$agg$tmp42+0>>2]|0;
   ;HEAP32[$agg$tmp43$byval_copy+0>>2]=HEAP32[$agg$tmp43+0>>2]|0;
   __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKcSC_($ref$tmp41,$this,$agg$tmp42$byval_copy,$agg$tmp43$byval_copy,$__iob,$__err,$__tm,3544,((3544 + 11|0)));
   $32 = HEAP32[$ref$tmp41>>2]|0;
   HEAP32[$__b>>2] = $32;
   break;
  }
  case 112:  {
   $tm_hour38 = (($__tm) + 8|0);
   $29 = HEAP32[$__e>>2]|0;
   HEAP32[$agg$tmp39>>2] = $29;
   ;HEAP32[$agg$tmp39$byval_copy+0>>2]=HEAP32[$agg$tmp39+0>>2]|0;
   __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11__get_am_pmERiRS4_S4_RjRKNS_5ctypeIcEE($this,$tm_hour38,$__b,$agg$tmp39$byval_copy,$__err,$call$i71);
   break;
  }
  case 70:  {
   $20 = HEAP32[$__b>>2]|0;
   HEAP32[$agg$tmp21>>2] = $20;
   $21 = HEAP32[$__e>>2]|0;
   HEAP32[$agg$tmp22>>2] = $21;
   ;HEAP32[$agg$tmp21$byval_copy+0>>2]=HEAP32[$agg$tmp21+0>>2]|0;
   ;HEAP32[$agg$tmp22$byval_copy+0>>2]=HEAP32[$agg$tmp22+0>>2]|0;
   __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKcSC_($ref$tmp20,$this,$agg$tmp21$byval_copy,$agg$tmp22$byval_copy,$__iob,$__err,$__tm,3536,((3536 + 8|0)));
   $22 = HEAP32[$ref$tmp20>>2]|0;
   HEAP32[$__b>>2] = $22;
   break;
  }
  case 88:  {
   $add$ptr64 = (($this) + 8|0);
   $vtable65 = HEAP32[$add$ptr64>>2]|0;
   $vfn66 = (($vtable65) + 24|0);
   $44 = HEAP32[$vfn66>>2]|0;
   $call67 = (FUNCTION_TABLE_ii[$44 & 511]($add$ptr64)|0);
   $45 = HEAP32[$__b>>2]|0;
   HEAP32[$agg$tmp69>>2] = $45;
   $46 = HEAP32[$__e>>2]|0;
   HEAP32[$agg$tmp70>>2] = $46;
   $47 = HEAP8[$call67>>0]|0;
   $and$i$i$i85 = $47 & 1;
   $tobool$i$i$i86 = ($and$i$i$i85<<24>>24)==(0);
   if ($tobool$i$i$i86) {
    $arrayidx$i$i$i90 = (($call67) + 1|0);
    $arrayidx$i$i$i100 = (($call67) + 1|0);
    $conv$i$i109 = $47&255;
    $shr1$i$i110 = $conv$i$i109 >>> 1;
    $cond$i$i102124 = $arrayidx$i$i$i100;$cond$i$i92120122 = $arrayidx$i$i$i90;$cond$i112 = $shr1$i$i110;
   } else {
    $__data_$i$i$i87 = (($call67) + 8|0);
    $48 = HEAP32[$__data_$i$i$i87>>2]|0;
    $__size_$i2$i107 = (($call67) + 4|0);
    $49 = HEAP32[$__size_$i2$i107>>2]|0;
    $cond$i$i102124 = $48;$cond$i$i92120122 = $48;$cond$i112 = $49;
   }
   $add$ptr74 = (($cond$i$i102124) + ($cond$i112)|0);
   ;HEAP32[$agg$tmp69$byval_copy+0>>2]=HEAP32[$agg$tmp69+0>>2]|0;
   ;HEAP32[$agg$tmp70$byval_copy+0>>2]=HEAP32[$agg$tmp70+0>>2]|0;
   __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKcSC_($ref$tmp68,$this,$agg$tmp69$byval_copy,$agg$tmp70$byval_copy,$__iob,$__err,$__tm,$cond$i$i92120122,$add$ptr74);
   $50 = HEAP32[$ref$tmp68>>2]|0;
   HEAP32[$__b>>2] = $50;
   break;
  }
  case 83:  {
   $36 = HEAP32[$__e>>2]|0;
   HEAP32[$agg$tmp49>>2] = $36;
   ;HEAP32[$agg$tmp49$byval_copy+0>>2]=HEAP32[$agg$tmp49+0>>2]|0;
   __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE12__get_secondERiRS4_S4_RjRKNS_5ctypeIcEE(0,$__tm,$__b,$agg$tmp49$byval_copy,$__err,$call$i71);
   break;
  }
  case 119:  {
   $tm_wday55 = (($__tm) + 24|0);
   $40 = HEAP32[$__e>>2]|0;
   HEAP32[$agg$tmp56>>2] = $40;
   ;HEAP32[$agg$tmp56$byval_copy+0>>2]=HEAP32[$agg$tmp56+0>>2]|0;
   __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE13__get_weekdayERiRS4_S4_RjRKNS_5ctypeIcEE(0,$tm_wday55,$__b,$agg$tmp56$byval_copy,$__err,$call$i71);
   break;
  }
  case 68:  {
   $17 = HEAP32[$__b>>2]|0;
   HEAP32[$agg$tmp17>>2] = $17;
   $18 = HEAP32[$__e>>2]|0;
   HEAP32[$agg$tmp18>>2] = $18;
   ;HEAP32[$agg$tmp17$byval_copy+0>>2]=HEAP32[$agg$tmp17+0>>2]|0;
   ;HEAP32[$agg$tmp18$byval_copy+0>>2]=HEAP32[$agg$tmp18+0>>2]|0;
   __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKcSC_($ref$tmp16,$this,$agg$tmp17$byval_copy,$agg$tmp18$byval_copy,$__iob,$__err,$__tm,3528,((3528 + 8|0)));
   $19 = HEAP32[$ref$tmp16>>2]|0;
   HEAP32[$__b>>2] = $19;
   break;
  }
  case 106:  {
   $tm_yday = (($__tm) + 28|0);
   $25 = HEAP32[$__e>>2]|0;
   HEAP32[$agg$tmp29>>2] = $25;
   ;HEAP32[$agg$tmp29$byval_copy+0>>2]=HEAP32[$agg$tmp29+0>>2]|0;
   __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE18__get_day_year_numERiRS4_S4_RjRKNS_5ctypeIcEE(0,$tm_yday,$__b,$agg$tmp29$byval_copy,$__err,$call$i71);
   break;
  }
  case 65: case 97:  {
   $tm_wday = (($__tm) + 24|0);
   $7 = HEAP32[$__e>>2]|0;
   HEAP32[$agg$tmp>>2] = $7;
   ;HEAP32[$agg$tmp$byval_copy+0>>2]=HEAP32[$agg$tmp+0>>2]|0;
   __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__get_weekdaynameERiRS4_S4_RjRKNS_5ctypeIcEE($this,$tm_wday,$__b,$agg$tmp$byval_copy,$__err,$call$i71);
   break;
  }
  case 99:  {
   $add$ptr = (($this) + 8|0);
   $vtable = HEAP32[$add$ptr>>2]|0;
   $vfn = (($vtable) + 12|0);
   $9 = HEAP32[$vfn>>2]|0;
   $call5 = (FUNCTION_TABLE_ii[$9 & 511]($add$ptr)|0);
   $10 = HEAP32[$__b>>2]|0;
   HEAP32[$agg$tmp7>>2] = $10;
   $11 = HEAP32[$__e>>2]|0;
   HEAP32[$agg$tmp8>>2] = $11;
   $12 = HEAP8[$call5>>0]|0;
   $and$i$i$i = $12 & 1;
   $tobool$i$i$i = ($and$i$i$i<<24>>24)==(0);
   if ($tobool$i$i$i) {
    $arrayidx$i$i$i = (($call5) + 1|0);
    $arrayidx$i$i$i80 = (($call5) + 1|0);
    $conv$i$i = $12&255;
    $shr1$i$i = $conv$i$i >>> 1;
    $cond$i = $shr1$i$i;$cond$i$i114116 = $arrayidx$i$i$i;$cond$i$i82118 = $arrayidx$i$i$i80;
   } else {
    $__data_$i$i$i = (($call5) + 8|0);
    $13 = HEAP32[$__data_$i$i$i>>2]|0;
    $__size_$i2$i = (($call5) + 4|0);
    $14 = HEAP32[$__size_$i2$i>>2]|0;
    $cond$i = $14;$cond$i$i114116 = $13;$cond$i$i82118 = $13;
   }
   $add$ptr12 = (($cond$i$i82118) + ($cond$i)|0);
   ;HEAP32[$agg$tmp7$byval_copy+0>>2]=HEAP32[$agg$tmp7+0>>2]|0;
   ;HEAP32[$agg$tmp8$byval_copy+0>>2]=HEAP32[$agg$tmp8+0>>2]|0;
   __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKcSC_($ref$tmp6,$this,$agg$tmp7$byval_copy,$agg$tmp8$byval_copy,$__iob,$__err,$__tm,$cond$i$i114116,$add$ptr12);
   $15 = HEAP32[$ref$tmp6>>2]|0;
   HEAP32[$__b>>2] = $15;
   break;
  }
  case 116: case 110:  {
   $28 = HEAP32[$__e>>2]|0;
   HEAP32[$agg$tmp36>>2] = $28;
   ;HEAP32[$agg$tmp36$byval_copy+0>>2]=HEAP32[$agg$tmp36+0>>2]|0;
   __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__get_white_spaceERS4_S4_RjRKNS_5ctypeIcEE(0,$__b,$agg$tmp36$byval_copy,$__err,$call$i71);
   break;
  }
  case 104: case 66: case 98:  {
   $tm_mon = (($__tm) + 16|0);
   $8 = HEAP32[$__e>>2]|0;
   HEAP32[$agg$tmp3>>2] = $8;
   ;HEAP32[$agg$tmp3$byval_copy+0>>2]=HEAP32[$agg$tmp3+0>>2]|0;
   __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE15__get_monthnameERiRS4_S4_RjRKNS_5ctypeIcEE($this,$tm_mon,$__b,$agg$tmp3$byval_copy,$__err,$call$i71);
   break;
  }
  case 82:  {
   $33 = HEAP32[$__b>>2]|0;
   HEAP32[$agg$tmp46>>2] = $33;
   $34 = HEAP32[$__e>>2]|0;
   HEAP32[$agg$tmp47>>2] = $34;
   ;HEAP32[$agg$tmp46$byval_copy+0>>2]=HEAP32[$agg$tmp46+0>>2]|0;
   ;HEAP32[$agg$tmp47$byval_copy+0>>2]=HEAP32[$agg$tmp47+0>>2]|0;
   __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKcSC_($ref$tmp45,$this,$agg$tmp46$byval_copy,$agg$tmp47$byval_copy,$__iob,$__err,$__tm,3560,((3560 + 5|0)));
   $35 = HEAP32[$ref$tmp45>>2]|0;
   HEAP32[$__b>>2] = $35;
   break;
  }
  case 120:  {
   $vtable58 = HEAP32[$this>>2]|0;
   $vfn59 = (($vtable58) + 20|0);
   $41 = HEAP32[$vfn59>>2]|0;
   $42 = HEAP32[$__b>>2]|0;
   HEAP32[$agg$tmp60>>2] = $42;
   $43 = HEAP32[$__e>>2]|0;
   HEAP32[$agg$tmp61>>2] = $43;
   ;HEAP32[$agg$tmp60$byval_copy+0>>2]=HEAP32[$agg$tmp60+0>>2]|0;
   ;HEAP32[$agg$tmp61$byval_copy+0>>2]=HEAP32[$agg$tmp61+0>>2]|0;
   FUNCTION_TABLE_viiiiiii[$41 & 511]($agg$result,$this,$agg$tmp60$byval_copy,$agg$tmp61$byval_copy,$__iob,$__err,$__tm);
   STACKTOP = sp;return;
   break;
  }
  case 121:  {
   $tm_year = (($__tm) + 20|0);
   $51 = HEAP32[$__e>>2]|0;
   HEAP32[$agg$tmp76>>2] = $51;
   ;HEAP32[$agg$tmp76$byval_copy+0>>2]=HEAP32[$agg$tmp76+0>>2]|0;
   __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE10__get_yearERiRS4_S4_RjRKNS_5ctypeIcEE(0,$tm_year,$__b,$agg$tmp76$byval_copy,$__err,$call$i71);
   break;
  }
  case 89:  {
   $tm_year78 = (($__tm) + 20|0);
   $52 = HEAP32[$__e>>2]|0;
   HEAP32[$agg$tmp79>>2] = $52;
   ;HEAP32[$agg$tmp79$byval_copy+0>>2]=HEAP32[$agg$tmp79+0>>2]|0;
   __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11__get_year4ERiRS4_S4_RjRKNS_5ctypeIcEE(0,$tm_year78,$__b,$agg$tmp79$byval_copy,$__err,$call$i71);
   break;
  }
  case 37:  {
   $53 = HEAP32[$__e>>2]|0;
   HEAP32[$agg$tmp81>>2] = $53;
   ;HEAP32[$agg$tmp81$byval_copy+0>>2]=HEAP32[$agg$tmp81+0>>2]|0;
   __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE13__get_percentERS4_S4_RjRKNS_5ctypeIcEE(0,$__b,$agg$tmp81$byval_copy,$__err,$call$i71);
   break;
  }
  case 73:  {
   $tm_hour26 = (($__tm) + 8|0);
   $24 = HEAP32[$__e>>2]|0;
   HEAP32[$agg$tmp27>>2] = $24;
   ;HEAP32[$agg$tmp27$byval_copy+0>>2]=HEAP32[$agg$tmp27+0>>2]|0;
   __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE13__get_12_hourERiRS4_S4_RjRKNS_5ctypeIcEE(0,$tm_hour26,$__b,$agg$tmp27$byval_copy,$__err,$call$i71);
   break;
  }
  default: {
   $54 = HEAP32[$__err>>2]|0;
   $or = $54 | 4;
   HEAP32[$__err>>2] = $or;
  }
  }
 } while(0);
 $55 = HEAP32[$__b>>2]|0;
 HEAP32[$agg$result>>2] = $55;
 STACKTOP = sp;return;
}
function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE9__get_dayERiRS4_S4_RjRKNS_5ctypeIcEE($this,$__d,$__b,$__e,$__err,$__ct) {
 $this = $this|0;
 $__d = $__d|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__err = $__err|0;
 $__ct = $__ct|0;
 var $0 = 0, $1 = 0, $2 = 0, $agg$tmp = 0, $agg$tmp$byval_copy = 0, $and = 0, $call = 0, $call$off = 0, $or = 0, $tobool = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $agg$tmp$byval_copy = sp + 4|0;
 $agg$tmp = sp;
 $0 = HEAP32[$__e>>2]|0;
 HEAP32[$agg$tmp>>2] = $0;
 ;HEAP32[$agg$tmp$byval_copy+0>>2]=HEAP32[$agg$tmp+0>>2]|0;
 $call = (__ZNSt3__120__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$agg$tmp$byval_copy,$__err,$__ct,2)|0);
 $1 = HEAP32[$__err>>2]|0;
 $and = $1 & 4;
 $tobool = ($and|0)==(0);
 if ($tobool) {
  $call$off = (($call) + -1)|0;
  $2 = ($call$off>>>0)<(31);
  if ($2) {
   HEAP32[$__d>>2] = $call;
   STACKTOP = sp;return;
  }
 }
 $or = $1 | 4;
 HEAP32[$__err>>2] = $or;
 STACKTOP = sp;return;
}
function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE10__get_hourERiRS4_S4_RjRKNS_5ctypeIcEE($this,$__h,$__b,$__e,$__err,$__ct) {
 $this = $this|0;
 $__h = $__h|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__err = $__err|0;
 $__ct = $__ct|0;
 var $0 = 0, $1 = 0, $agg$tmp = 0, $agg$tmp$byval_copy = 0, $and = 0, $call = 0, $cmp = 0, $or = 0, $or$cond = 0, $tobool = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $agg$tmp$byval_copy = sp + 4|0;
 $agg$tmp = sp;
 $0 = HEAP32[$__e>>2]|0;
 HEAP32[$agg$tmp>>2] = $0;
 ;HEAP32[$agg$tmp$byval_copy+0>>2]=HEAP32[$agg$tmp+0>>2]|0;
 $call = (__ZNSt3__120__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$agg$tmp$byval_copy,$__err,$__ct,2)|0);
 $1 = HEAP32[$__err>>2]|0;
 $and = $1 & 4;
 $tobool = ($and|0)==(0);
 $cmp = ($call|0)<(24);
 $or$cond = $tobool & $cmp;
 if ($or$cond) {
  HEAP32[$__h>>2] = $call;
  STACKTOP = sp;return;
 } else {
  $or = $1 | 4;
  HEAP32[$__err>>2] = $or;
  STACKTOP = sp;return;
 }
}
function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE13__get_12_hourERiRS4_S4_RjRKNS_5ctypeIcEE($this,$__h,$__b,$__e,$__err,$__ct) {
 $this = $this|0;
 $__h = $__h|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__err = $__err|0;
 $__ct = $__ct|0;
 var $0 = 0, $1 = 0, $2 = 0, $agg$tmp = 0, $agg$tmp$byval_copy = 0, $and = 0, $call = 0, $call$off = 0, $or = 0, $tobool = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $agg$tmp$byval_copy = sp + 4|0;
 $agg$tmp = sp;
 $0 = HEAP32[$__e>>2]|0;
 HEAP32[$agg$tmp>>2] = $0;
 ;HEAP32[$agg$tmp$byval_copy+0>>2]=HEAP32[$agg$tmp+0>>2]|0;
 $call = (__ZNSt3__120__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$agg$tmp$byval_copy,$__err,$__ct,2)|0);
 $1 = HEAP32[$__err>>2]|0;
 $and = $1 & 4;
 $tobool = ($and|0)==(0);
 if ($tobool) {
  $call$off = (($call) + -1)|0;
  $2 = ($call$off>>>0)<(12);
  if ($2) {
   HEAP32[$__h>>2] = $call;
   STACKTOP = sp;return;
  }
 }
 $or = $1 | 4;
 HEAP32[$__err>>2] = $or;
 STACKTOP = sp;return;
}
function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE18__get_day_year_numERiRS4_S4_RjRKNS_5ctypeIcEE($this,$__d,$__b,$__e,$__err,$__ct) {
 $this = $this|0;
 $__d = $__d|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__err = $__err|0;
 $__ct = $__ct|0;
 var $0 = 0, $1 = 0, $agg$tmp = 0, $agg$tmp$byval_copy = 0, $and = 0, $call = 0, $cmp = 0, $or = 0, $or$cond = 0, $tobool = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $agg$tmp$byval_copy = sp + 4|0;
 $agg$tmp = sp;
 $0 = HEAP32[$__e>>2]|0;
 HEAP32[$agg$tmp>>2] = $0;
 ;HEAP32[$agg$tmp$byval_copy+0>>2]=HEAP32[$agg$tmp+0>>2]|0;
 $call = (__ZNSt3__120__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$agg$tmp$byval_copy,$__err,$__ct,3)|0);
 $1 = HEAP32[$__err>>2]|0;
 $and = $1 & 4;
 $tobool = ($and|0)==(0);
 $cmp = ($call|0)<(366);
 $or$cond = $tobool & $cmp;
 if ($or$cond) {
  HEAP32[$__d>>2] = $call;
  STACKTOP = sp;return;
 } else {
  $or = $1 | 4;
  HEAP32[$__err>>2] = $or;
  STACKTOP = sp;return;
 }
}
function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11__get_monthERiRS4_S4_RjRKNS_5ctypeIcEE($this,$__m,$__b,$__e,$__err,$__ct) {
 $this = $this|0;
 $__m = $__m|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__err = $__err|0;
 $__ct = $__ct|0;
 var $0 = 0, $1 = 0, $agg$tmp = 0, $agg$tmp$byval_copy = 0, $and = 0, $call = 0, $cmp = 0, $or = 0, $or$cond = 0, $sub = 0, $tobool = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $agg$tmp$byval_copy = sp + 4|0;
 $agg$tmp = sp;
 $0 = HEAP32[$__e>>2]|0;
 HEAP32[$agg$tmp>>2] = $0;
 ;HEAP32[$agg$tmp$byval_copy+0>>2]=HEAP32[$agg$tmp+0>>2]|0;
 $call = (__ZNSt3__120__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$agg$tmp$byval_copy,$__err,$__ct,2)|0);
 $1 = HEAP32[$__err>>2]|0;
 $and = $1 & 4;
 $tobool = ($and|0)==(0);
 $cmp = ($call|0)<(13);
 $or$cond = $tobool & $cmp;
 if ($or$cond) {
  $sub = (($call) + -1)|0;
  HEAP32[$__m>>2] = $sub;
  STACKTOP = sp;return;
 } else {
  $or = $1 | 4;
  HEAP32[$__err>>2] = $or;
  STACKTOP = sp;return;
 }
}
function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE12__get_minuteERiRS4_S4_RjRKNS_5ctypeIcEE($this,$__m,$__b,$__e,$__err,$__ct) {
 $this = $this|0;
 $__m = $__m|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__err = $__err|0;
 $__ct = $__ct|0;
 var $0 = 0, $1 = 0, $agg$tmp = 0, $agg$tmp$byval_copy = 0, $and = 0, $call = 0, $cmp = 0, $or = 0, $or$cond = 0, $tobool = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $agg$tmp$byval_copy = sp + 4|0;
 $agg$tmp = sp;
 $0 = HEAP32[$__e>>2]|0;
 HEAP32[$agg$tmp>>2] = $0;
 ;HEAP32[$agg$tmp$byval_copy+0>>2]=HEAP32[$agg$tmp+0>>2]|0;
 $call = (__ZNSt3__120__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$agg$tmp$byval_copy,$__err,$__ct,2)|0);
 $1 = HEAP32[$__err>>2]|0;
 $and = $1 & 4;
 $tobool = ($and|0)==(0);
 $cmp = ($call|0)<(60);
 $or$cond = $tobool & $cmp;
 if ($or$cond) {
  HEAP32[$__m>>2] = $call;
  STACKTOP = sp;return;
 } else {
  $or = $1 | 4;
  HEAP32[$__err>>2] = $or;
  STACKTOP = sp;return;
 }
}
function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__get_white_spaceERS4_S4_RjRKNS_5ctypeIcEE($this,$__b,$__e,$__err,$__ct) {
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__err = $__err|0;
 $__ct = $__ct|0;
 var $$pre$i$i$i = 0, $$pre$i$i$i25 = 0, $$pre$i12$i$i41 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__einp_$i$i = 0, $__einp_$i$i$i$i = 0, $__einp_$i$i$i$i17 = 0, $__einp_$i$i4$i$i = 0, $__einp_$i$i4$i$i33 = 0, $__einp_$i$i7 = 0, $__ninp_$i$i = 0;
 var $__ninp_$i$i$i$i = 0, $__ninp_$i$i$i$i16 = 0, $__ninp_$i$i3$i$i = 0, $__ninp_$i$i3$i$i32 = 0, $__ninp_$i$i6 = 0, $__tab_$i = 0, $and3$i = 0, $arrayidx$i = 0, $call$i$i = 0, $call$i$i$i$i = 0, $call$i$i$i$i22 = 0, $call$i$i9$i$i = 0, $call$i$i9$i$i38 = 0, $cmp$i = 0, $cmp$i$i = 0, $cmp$i$i$i = 0, $cmp$i$i$i$i = 0, $cmp$i$i$i$i18 = 0, $cmp$i$i$i28 = 0, $cmp$i$i5$i$i = 0;
 var $cmp$i$i5$i$i34 = 0, $cmp$i$i8 = 0, $cmp$i1$i$i$i = 0, $cmp$i1$i$i$i23 = 0, $cmp$i1$i10$i$i = 0, $cmp$i1$i10$i$i39 = 0, $conv$i = 0, $conv$i$i$i = 0, $conv$i4 = 0, $incdec$ptr$i$i = 0, $isascii2$i = 0, $or = 0, $retval$0$i$i = 0, $sext = 0, $tobool$i$i$i = 0, $tobool$i$i$i15 = 0, $tobool$i2$i$i = 0, $tobool$i2$i$i30 = 0, $vfn$i$i = 0, $vfn$i$i$i$i = 0;
 var $vfn$i$i$i$i21 = 0, $vfn$i$i10 = 0, $vfn$i$i8$i$i = 0, $vfn$i$i8$i$i37 = 0, $vtable$i$i = 0, $vtable$i$i$i$i = 0, $vtable$i$i$i$i20 = 0, $vtable$i$i7$i$i = 0, $vtable$i$i7$i$i36 = 0, $vtable$i$i9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $__tab_$i = (($__ct) + 8|0);
 L1: while(1) {
  $0 = HEAP32[$__b>>2]|0;
  $tobool$i$i$i = ($0|0)==(0|0);
  do {
   if ($tobool$i$i$i) {
    $4 = 0;
   } else {
    $__ninp_$i$i$i$i = (($0) + 12|0);
    $1 = HEAP32[$__ninp_$i$i$i$i>>2]|0;
    $__einp_$i$i$i$i = (($0) + 16|0);
    $2 = HEAP32[$__einp_$i$i$i$i>>2]|0;
    $cmp$i$i$i$i = ($1|0)==($2|0);
    if ($cmp$i$i$i$i) {
     $vtable$i$i$i$i = HEAP32[$0>>2]|0;
     $vfn$i$i$i$i = (($vtable$i$i$i$i) + 36|0);
     $3 = HEAP32[$vfn$i$i$i$i>>2]|0;
     $call$i$i$i$i = (FUNCTION_TABLE_ii[$3 & 511]($0)|0);
     $cmp$i1$i$i$i = ($call$i$i$i$i|0)==(-1);
     if ($cmp$i1$i$i$i) {
      HEAP32[$__b>>2] = 0;
      $4 = 0;
      break;
     } else {
      $$pre$i$i$i = HEAP32[$__b>>2]|0;
      $4 = $$pre$i$i$i;
      break;
     }
    } else {
     $4 = $0;
    }
   }
  } while(0);
  $cmp$i$i$i = ($4|0)==(0|0);
  $5 = HEAP32[$__e>>2]|0;
  $tobool$i2$i$i = ($5|0)==(0|0);
  do {
   if ($tobool$i2$i$i) {
    label = 12;
   } else {
    $__ninp_$i$i3$i$i = (($5) + 12|0);
    $6 = HEAP32[$__ninp_$i$i3$i$i>>2]|0;
    $__einp_$i$i4$i$i = (($5) + 16|0);
    $7 = HEAP32[$__einp_$i$i4$i$i>>2]|0;
    $cmp$i$i5$i$i = ($6|0)==($7|0);
    if (!($cmp$i$i5$i$i)) {
     if ($cmp$i$i$i) {
      $29 = $5;
      break;
     } else {
      $$pre$i12$i$i41 = $5;
      break L1;
     }
    }
    $vtable$i$i7$i$i = HEAP32[$5>>2]|0;
    $vfn$i$i8$i$i = (($vtable$i$i7$i$i) + 36|0);
    $8 = HEAP32[$vfn$i$i8$i$i>>2]|0;
    $call$i$i9$i$i = (FUNCTION_TABLE_ii[$8 & 511]($5)|0);
    $cmp$i1$i10$i$i = ($call$i$i9$i$i|0)==(-1);
    if ($cmp$i1$i10$i$i) {
     HEAP32[$__e>>2] = 0;
     label = 12;
     break;
    } else {
     if ($cmp$i$i$i) {
      $29 = $5;
      break;
     } else {
      $$pre$i12$i$i41 = $5;
      break L1;
     }
    }
   }
  } while(0);
  if ((label|0) == 12) {
   label = 0;
   if ($cmp$i$i$i) {
    $$pre$i12$i$i41 = 0;
    break;
   } else {
    $29 = 0;
   }
  }
  $9 = HEAP32[$__b>>2]|0;
  $__ninp_$i$i = (($9) + 12|0);
  $10 = HEAP32[$__ninp_$i$i>>2]|0;
  $__einp_$i$i = (($9) + 16|0);
  $11 = HEAP32[$__einp_$i$i>>2]|0;
  $cmp$i$i = ($10|0)==($11|0);
  if ($cmp$i$i) {
   $vtable$i$i = HEAP32[$9>>2]|0;
   $vfn$i$i = (($vtable$i$i) + 36|0);
   $12 = HEAP32[$vfn$i$i>>2]|0;
   $call$i$i = (FUNCTION_TABLE_ii[$12 & 511]($9)|0);
   $retval$0$i$i = $call$i$i;
  } else {
   $13 = HEAP8[$10>>0]|0;
   $conv$i$i$i = $13&255;
   $retval$0$i$i = $conv$i$i$i;
  }
  $conv$i = $retval$0$i$i&255;
  $isascii2$i = ($conv$i<<24>>24)>(-1);
  if (!($isascii2$i)) {
   $$pre$i12$i$i41 = $29;
   break;
  }
  $sext = $retval$0$i$i << 24;
  $conv$i4 = $sext >> 24;
  $14 = HEAP32[$__tab_$i>>2]|0;
  $arrayidx$i = (($14) + ($conv$i4<<1)|0);
  $15 = HEAP16[$arrayidx$i>>1]|0;
  $and3$i = $15 & 8192;
  $cmp$i = ($and3$i<<16>>16)==(0);
  if ($cmp$i) {
   $$pre$i12$i$i41 = $29;
   break;
  }
  $16 = HEAP32[$__b>>2]|0;
  $__ninp_$i$i6 = (($16) + 12|0);
  $17 = HEAP32[$__ninp_$i$i6>>2]|0;
  $__einp_$i$i7 = (($16) + 16|0);
  $18 = HEAP32[$__einp_$i$i7>>2]|0;
  $cmp$i$i8 = ($17|0)==($18|0);
  if ($cmp$i$i8) {
   $vtable$i$i9 = HEAP32[$16>>2]|0;
   $vfn$i$i10 = (($vtable$i$i9) + 40|0);
   $19 = HEAP32[$vfn$i$i10>>2]|0;
   (FUNCTION_TABLE_ii[$19 & 511]($16)|0);
   continue;
  } else {
   $incdec$ptr$i$i = (($17) + 1|0);
   HEAP32[$__ninp_$i$i6>>2] = $incdec$ptr$i$i;
   continue;
  }
 }
 $20 = HEAP32[$__b>>2]|0;
 $tobool$i$i$i15 = ($20|0)==(0|0);
 do {
  if ($tobool$i$i$i15) {
   $24 = 0;
  } else {
   $__ninp_$i$i$i$i16 = (($20) + 12|0);
   $21 = HEAP32[$__ninp_$i$i$i$i16>>2]|0;
   $__einp_$i$i$i$i17 = (($20) + 16|0);
   $22 = HEAP32[$__einp_$i$i$i$i17>>2]|0;
   $cmp$i$i$i$i18 = ($21|0)==($22|0);
   if ($cmp$i$i$i$i18) {
    $vtable$i$i$i$i20 = HEAP32[$20>>2]|0;
    $vfn$i$i$i$i21 = (($vtable$i$i$i$i20) + 36|0);
    $23 = HEAP32[$vfn$i$i$i$i21>>2]|0;
    $call$i$i$i$i22 = (FUNCTION_TABLE_ii[$23 & 511]($20)|0);
    $cmp$i1$i$i$i23 = ($call$i$i$i$i22|0)==(-1);
    if ($cmp$i1$i$i$i23) {
     HEAP32[$__b>>2] = 0;
     $24 = 0;
     break;
    } else {
     $$pre$i$i$i25 = HEAP32[$__b>>2]|0;
     $24 = $$pre$i$i$i25;
     break;
    }
   } else {
    $24 = $20;
   }
  }
 } while(0);
 $cmp$i$i$i28 = ($24|0)==(0|0);
 $tobool$i2$i$i30 = ($$pre$i12$i$i41|0)==(0|0);
 do {
  if ($tobool$i2$i$i30) {
   label = 32;
  } else {
   $__ninp_$i$i3$i$i32 = (($$pre$i12$i$i41) + 12|0);
   $25 = HEAP32[$__ninp_$i$i3$i$i32>>2]|0;
   $__einp_$i$i4$i$i33 = (($$pre$i12$i$i41) + 16|0);
   $26 = HEAP32[$__einp_$i$i4$i$i33>>2]|0;
   $cmp$i$i5$i$i34 = ($25|0)==($26|0);
   if ($cmp$i$i5$i$i34) {
    $vtable$i$i7$i$i36 = HEAP32[$$pre$i12$i$i41>>2]|0;
    $vfn$i$i8$i$i37 = (($vtable$i$i7$i$i36) + 36|0);
    $27 = HEAP32[$vfn$i$i8$i$i37>>2]|0;
    $call$i$i9$i$i38 = (FUNCTION_TABLE_ii[$27 & 511]($$pre$i12$i$i41)|0);
    $cmp$i1$i10$i$i39 = ($call$i$i9$i$i38|0)==(-1);
    if ($cmp$i1$i10$i$i39) {
     HEAP32[$__e>>2] = 0;
     label = 32;
     break;
    }
   }
   if ($cmp$i$i$i28) {
    STACKTOP = sp;return;
   }
  }
 } while(0);
 if ((label|0) == 32) {
  if (!($cmp$i$i$i28)) {
   STACKTOP = sp;return;
  }
 }
 $28 = HEAP32[$__err>>2]|0;
 $or = $28 | 2;
 HEAP32[$__err>>2] = $or;
 STACKTOP = sp;return;
}
function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11__get_am_pmERiRS4_S4_RjRKNS_5ctypeIcEE($this,$__h,$__b,$__e,$__err,$__ct) {
 $this = $this|0;
 $__h = $__h|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__err = $__err|0;
 $__ct = $__ct|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__size_$i2$i = 0, $__size_$i2$i13 = 0, $add = 0, $add$ptr = 0, $add$ptr5 = 0, $add14 = 0, $agg$tmp = 0, $agg$tmp$byval_copy = 0, $and$i$i = 0;
 var $and$i$i11 = 0, $arrayidx3 = 0, $call = 0, $call6 = 0, $cmp = 0, $cmp12 = 0, $cmp8 = 0, $cond$i = 0, $cond$i18 = 0, $conv$i$i = 0, $conv$i$i15 = 0, $or = 0, $shr1$i$i = 0, $shr1$i$i16 = 0, $sub$ptr$lhs$cast = 0, $sub$ptr$rhs$cast = 0, $sub$ptr$sub = 0, $tobool$i$i = 0, $tobool$i$i12 = 0, $vfn = 0;
 var $vtable = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $agg$tmp$byval_copy = sp + 4|0;
 $agg$tmp = sp;
 $add$ptr = (($this) + 8|0);
 $vtable = HEAP32[$add$ptr>>2]|0;
 $vfn = (($vtable) + 8|0);
 $0 = HEAP32[$vfn>>2]|0;
 $call = (FUNCTION_TABLE_ii[$0 & 511]($add$ptr)|0);
 $1 = HEAP8[$call>>0]|0;
 $and$i$i = $1 & 1;
 $tobool$i$i = ($and$i$i<<24>>24)==(0);
 if ($tobool$i$i) {
  $conv$i$i = $1&255;
  $shr1$i$i = $conv$i$i >>> 1;
  $cond$i = $shr1$i$i;
 } else {
  $__size_$i2$i = (($call) + 4|0);
  $2 = HEAP32[$__size_$i2$i>>2]|0;
  $cond$i = $2;
 }
 $arrayidx3 = (($call) + 12|0);
 $3 = HEAP8[$arrayidx3>>0]|0;
 $and$i$i11 = $3 & 1;
 $tobool$i$i12 = ($and$i$i11<<24>>24)==(0);
 if ($tobool$i$i12) {
  $conv$i$i15 = $3&255;
  $shr1$i$i16 = $conv$i$i15 >>> 1;
  $cond$i18 = $shr1$i$i16;
 } else {
  $__size_$i2$i13 = (($call) + 16|0);
  $4 = HEAP32[$__size_$i2$i13>>2]|0;
  $cond$i18 = $4;
 }
 $add = (0 - ($cond$i18))|0;
 $cmp = ($cond$i|0)==($add|0);
 if ($cmp) {
  $5 = HEAP32[$__err>>2]|0;
  $or = $5 | 4;
  HEAP32[$__err>>2] = $or;
  STACKTOP = sp;return;
 }
 $6 = HEAP32[$__e>>2]|0;
 HEAP32[$agg$tmp>>2] = $6;
 $add$ptr5 = (($call) + 24|0);
 ;HEAP32[$agg$tmp$byval_copy+0>>2]=HEAP32[$agg$tmp+0>>2]|0;
 $call6 = (__ZNSt3__114__scan_keywordINS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEPKNS_12basic_stringIcS3_NS_9allocatorIcEEEENS_5ctypeIcEEEET0_RT_SE_SD_SD_RKT1_Rjb($__b,$agg$tmp$byval_copy,$call,$add$ptr5,$__ct,$__err,0)|0);
 $sub$ptr$lhs$cast = $call6;
 $sub$ptr$rhs$cast = $call;
 $sub$ptr$sub = (($sub$ptr$lhs$cast) - ($sub$ptr$rhs$cast))|0;
 $7 = ($call6|0)==($call|0);
 if ($7) {
  $8 = HEAP32[$__h>>2]|0;
  $cmp8 = ($8|0)==(12);
  if ($cmp8) {
   HEAP32[$__h>>2] = 0;
   STACKTOP = sp;return;
  }
 }
 $9 = ($sub$ptr$sub|0)==(12);
 if (!($9)) {
  STACKTOP = sp;return;
 }
 $10 = HEAP32[$__h>>2]|0;
 $cmp12 = ($10|0)<(12);
 if (!($cmp12)) {
  STACKTOP = sp;return;
 }
 $add14 = (($10) + 12)|0;
 HEAP32[$__h>>2] = $add14;
 STACKTOP = sp;return;
}
function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE12__get_secondERiRS4_S4_RjRKNS_5ctypeIcEE($this,$__s,$__b,$__e,$__err,$__ct) {
 $this = $this|0;
 $__s = $__s|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__err = $__err|0;
 $__ct = $__ct|0;
 var $0 = 0, $1 = 0, $agg$tmp = 0, $agg$tmp$byval_copy = 0, $and = 0, $call = 0, $cmp = 0, $or = 0, $or$cond = 0, $tobool = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $agg$tmp$byval_copy = sp + 4|0;
 $agg$tmp = sp;
 $0 = HEAP32[$__e>>2]|0;
 HEAP32[$agg$tmp>>2] = $0;
 ;HEAP32[$agg$tmp$byval_copy+0>>2]=HEAP32[$agg$tmp+0>>2]|0;
 $call = (__ZNSt3__120__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$agg$tmp$byval_copy,$__err,$__ct,2)|0);
 $1 = HEAP32[$__err>>2]|0;
 $and = $1 & 4;
 $tobool = ($and|0)==(0);
 $cmp = ($call|0)<(61);
 $or$cond = $tobool & $cmp;
 if ($or$cond) {
  HEAP32[$__s>>2] = $call;
  STACKTOP = sp;return;
 } else {
  $or = $1 | 4;
  HEAP32[$__err>>2] = $or;
  STACKTOP = sp;return;
 }
}
function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE13__get_weekdayERiRS4_S4_RjRKNS_5ctypeIcEE($this,$__w,$__b,$__e,$__err,$__ct) {
 $this = $this|0;
 $__w = $__w|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__err = $__err|0;
 $__ct = $__ct|0;
 var $0 = 0, $1 = 0, $agg$tmp = 0, $agg$tmp$byval_copy = 0, $and = 0, $call = 0, $cmp = 0, $or = 0, $or$cond = 0, $tobool = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $agg$tmp$byval_copy = sp + 4|0;
 $agg$tmp = sp;
 $0 = HEAP32[$__e>>2]|0;
 HEAP32[$agg$tmp>>2] = $0;
 ;HEAP32[$agg$tmp$byval_copy+0>>2]=HEAP32[$agg$tmp+0>>2]|0;
 $call = (__ZNSt3__120__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$agg$tmp$byval_copy,$__err,$__ct,1)|0);
 $1 = HEAP32[$__err>>2]|0;
 $and = $1 & 4;
 $tobool = ($and|0)==(0);
 $cmp = ($call|0)<(7);
 $or$cond = $tobool & $cmp;
 if ($or$cond) {
  HEAP32[$__w>>2] = $call;
  STACKTOP = sp;return;
 } else {
  $or = $1 | 4;
  HEAP32[$__err>>2] = $or;
  STACKTOP = sp;return;
 }
}
function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11__get_year4ERiRS4_S4_RjRKNS_5ctypeIcEE($this,$__y,$__b,$__e,$__err,$__ct) {
 $this = $this|0;
 $__y = $__y|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__err = $__err|0;
 $__ct = $__ct|0;
 var $0 = 0, $1 = 0, $agg$tmp = 0, $agg$tmp$byval_copy = 0, $and = 0, $call = 0, $sub = 0, $tobool = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $agg$tmp$byval_copy = sp + 4|0;
 $agg$tmp = sp;
 $0 = HEAP32[$__e>>2]|0;
 HEAP32[$agg$tmp>>2] = $0;
 ;HEAP32[$agg$tmp$byval_copy+0>>2]=HEAP32[$agg$tmp+0>>2]|0;
 $call = (__ZNSt3__120__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$agg$tmp$byval_copy,$__err,$__ct,4)|0);
 $1 = HEAP32[$__err>>2]|0;
 $and = $1 & 4;
 $tobool = ($and|0)==(0);
 if (!($tobool)) {
  STACKTOP = sp;return;
 }
 $sub = (($call) + -1900)|0;
 HEAP32[$__y>>2] = $sub;
 STACKTOP = sp;return;
}
function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE13__get_percentERS4_S4_RjRKNS_5ctypeIcEE($this,$__b,$__e,$__err,$__ct) {
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__err = $__err|0;
 $__ct = $__ct|0;
 var $$pre$i$i$i = 0, $$pre$i$i$i26 = 0, $$pre$i12$i$i4251 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__einp_$i$i = 0, $__einp_$i$i$i$i = 0, $__einp_$i$i$i$i18 = 0, $__einp_$i$i4$i$i = 0, $__einp_$i$i4$i$i34 = 0, $__einp_$i$i8 = 0, $__ninp_$i$i = 0;
 var $__ninp_$i$i$i$i = 0, $__ninp_$i$i$i$i17 = 0, $__ninp_$i$i3$i$i = 0, $__ninp_$i$i3$i$i33 = 0, $__ninp_$i$i7 = 0, $call$i = 0, $call$i$i = 0, $call$i$i$i$i = 0, $call$i$i$i$i23 = 0, $call$i$i9$i$i = 0, $call$i$i9$i$i39 = 0, $cmp = 0, $cmp$i$i$i = 0, $cmp$i$i$i$i = 0, $cmp$i$i$i$i19 = 0, $cmp$i$i$i29 = 0, $cmp$i$i5 = 0, $cmp$i$i5$i$i = 0, $cmp$i$i5$i$i35 = 0, $cmp$i$i9 = 0;
 var $cmp$i1$i$i$i = 0, $cmp$i1$i$i$i24 = 0, $cmp$i1$i10$i$i = 0, $cmp$i1$i10$i$i40 = 0, $conv$i = 0, $conv$i$i$i = 0, $incdec$ptr$i$i = 0, $or = 0, $or5 = 0, $or9 = 0, $retval$0$i$i = 0, $tobool$i$i$i = 0, $tobool$i$i$i16 = 0, $tobool$i2$i$i = 0, $tobool$i2$i$i31 = 0, $vfn$i = 0, $vfn$i$i = 0, $vfn$i$i$i$i = 0, $vfn$i$i$i$i22 = 0, $vfn$i$i11 = 0;
 var $vfn$i$i8$i$i = 0, $vfn$i$i8$i$i38 = 0, $vtable$i = 0, $vtable$i$i = 0, $vtable$i$i$i$i = 0, $vtable$i$i$i$i21 = 0, $vtable$i$i10 = 0, $vtable$i$i7$i$i = 0, $vtable$i$i7$i$i37 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$__b>>2]|0;
 $tobool$i$i$i = ($0|0)==(0|0);
 do {
  if ($tobool$i$i$i) {
   $4 = 0;
  } else {
   $__ninp_$i$i$i$i = (($0) + 12|0);
   $1 = HEAP32[$__ninp_$i$i$i$i>>2]|0;
   $__einp_$i$i$i$i = (($0) + 16|0);
   $2 = HEAP32[$__einp_$i$i$i$i>>2]|0;
   $cmp$i$i$i$i = ($1|0)==($2|0);
   if ($cmp$i$i$i$i) {
    $vtable$i$i$i$i = HEAP32[$0>>2]|0;
    $vfn$i$i$i$i = (($vtable$i$i$i$i) + 36|0);
    $3 = HEAP32[$vfn$i$i$i$i>>2]|0;
    $call$i$i$i$i = (FUNCTION_TABLE_ii[$3 & 511]($0)|0);
    $cmp$i1$i$i$i = ($call$i$i$i$i|0)==(-1);
    if ($cmp$i1$i$i$i) {
     HEAP32[$__b>>2] = 0;
     $4 = 0;
     break;
    } else {
     $$pre$i$i$i = HEAP32[$__b>>2]|0;
     $4 = $$pre$i$i$i;
     break;
    }
   } else {
    $4 = $0;
   }
  }
 } while(0);
 $cmp$i$i$i = ($4|0)==(0|0);
 $5 = HEAP32[$__e>>2]|0;
 $tobool$i2$i$i = ($5|0)==(0|0);
 do {
  if ($tobool$i2$i$i) {
   label = 11;
  } else {
   $__ninp_$i$i3$i$i = (($5) + 12|0);
   $6 = HEAP32[$__ninp_$i$i3$i$i>>2]|0;
   $__einp_$i$i4$i$i = (($5) + 16|0);
   $7 = HEAP32[$__einp_$i$i4$i$i>>2]|0;
   $cmp$i$i5$i$i = ($6|0)==($7|0);
   if ($cmp$i$i5$i$i) {
    $vtable$i$i7$i$i = HEAP32[$5>>2]|0;
    $vfn$i$i8$i$i = (($vtable$i$i7$i$i) + 36|0);
    $8 = HEAP32[$vfn$i$i8$i$i>>2]|0;
    $call$i$i9$i$i = (FUNCTION_TABLE_ii[$8 & 511]($5)|0);
    $cmp$i1$i10$i$i = ($call$i$i9$i$i|0)==(-1);
    if ($cmp$i1$i10$i$i) {
     HEAP32[$__e>>2] = 0;
     label = 11;
     break;
    }
   }
   if ($cmp$i$i$i) {
    $$pre$i12$i$i4251 = $5;
   } else {
    label = 12;
   }
  }
 } while(0);
 if ((label|0) == 11) {
  if ($cmp$i$i$i) {
   label = 12;
  } else {
   $$pre$i12$i$i4251 = 0;
  }
 }
 if ((label|0) == 12) {
  $9 = HEAP32[$__err>>2]|0;
  $or = $9 | 6;
  HEAP32[$__err>>2] = $or;
  STACKTOP = sp;return;
 }
 $10 = HEAP32[$__b>>2]|0;
 $__ninp_$i$i = (($10) + 12|0);
 $11 = HEAP32[$__ninp_$i$i>>2]|0;
 $__einp_$i$i = (($10) + 16|0);
 $12 = HEAP32[$__einp_$i$i>>2]|0;
 $cmp$i$i5 = ($11|0)==($12|0);
 if ($cmp$i$i5) {
  $vtable$i$i = HEAP32[$10>>2]|0;
  $vfn$i$i = (($vtable$i$i) + 36|0);
  $13 = HEAP32[$vfn$i$i>>2]|0;
  $call$i$i = (FUNCTION_TABLE_ii[$13 & 511]($10)|0);
  $retval$0$i$i = $call$i$i;
 } else {
  $14 = HEAP8[$11>>0]|0;
  $conv$i$i$i = $14&255;
  $retval$0$i$i = $conv$i$i$i;
 }
 $conv$i = $retval$0$i$i&255;
 $vtable$i = HEAP32[$__ct>>2]|0;
 $vfn$i = (($vtable$i) + 36|0);
 $15 = HEAP32[$vfn$i>>2]|0;
 $call$i = (FUNCTION_TABLE_iiii[$15 & 511]($__ct,$conv$i,0)|0);
 $cmp = ($call$i<<24>>24)==(37);
 if (!($cmp)) {
  $16 = HEAP32[$__err>>2]|0;
  $or5 = $16 | 4;
  HEAP32[$__err>>2] = $or5;
  STACKTOP = sp;return;
 }
 $17 = HEAP32[$__b>>2]|0;
 $__ninp_$i$i7 = (($17) + 12|0);
 $18 = HEAP32[$__ninp_$i$i7>>2]|0;
 $__einp_$i$i8 = (($17) + 16|0);
 $19 = HEAP32[$__einp_$i$i8>>2]|0;
 $cmp$i$i9 = ($18|0)==($19|0);
 if ($cmp$i$i9) {
  $vtable$i$i10 = HEAP32[$17>>2]|0;
  $vfn$i$i11 = (($vtable$i$i10) + 40|0);
  $20 = HEAP32[$vfn$i$i11>>2]|0;
  (FUNCTION_TABLE_ii[$20 & 511]($17)|0);
 } else {
  $incdec$ptr$i$i = (($18) + 1|0);
  HEAP32[$__ninp_$i$i7>>2] = $incdec$ptr$i$i;
 }
 $21 = HEAP32[$__b>>2]|0;
 $tobool$i$i$i16 = ($21|0)==(0|0);
 do {
  if ($tobool$i$i$i16) {
   $25 = 0;
  } else {
   $__ninp_$i$i$i$i17 = (($21) + 12|0);
   $22 = HEAP32[$__ninp_$i$i$i$i17>>2]|0;
   $__einp_$i$i$i$i18 = (($21) + 16|0);
   $23 = HEAP32[$__einp_$i$i$i$i18>>2]|0;
   $cmp$i$i$i$i19 = ($22|0)==($23|0);
   if ($cmp$i$i$i$i19) {
    $vtable$i$i$i$i21 = HEAP32[$21>>2]|0;
    $vfn$i$i$i$i22 = (($vtable$i$i$i$i21) + 36|0);
    $24 = HEAP32[$vfn$i$i$i$i22>>2]|0;
    $call$i$i$i$i23 = (FUNCTION_TABLE_ii[$24 & 511]($21)|0);
    $cmp$i1$i$i$i24 = ($call$i$i$i$i23|0)==(-1);
    if ($cmp$i1$i$i$i24) {
     HEAP32[$__b>>2] = 0;
     $25 = 0;
     break;
    } else {
     $$pre$i$i$i26 = HEAP32[$__b>>2]|0;
     $25 = $$pre$i$i$i26;
     break;
    }
   } else {
    $25 = $21;
   }
  }
 } while(0);
 $cmp$i$i$i29 = ($25|0)==(0|0);
 $tobool$i2$i$i31 = ($$pre$i12$i$i4251|0)==(0|0);
 do {
  if ($tobool$i2$i$i31) {
   label = 31;
  } else {
   $__ninp_$i$i3$i$i33 = (($$pre$i12$i$i4251) + 12|0);
   $26 = HEAP32[$__ninp_$i$i3$i$i33>>2]|0;
   $__einp_$i$i4$i$i34 = (($$pre$i12$i$i4251) + 16|0);
   $27 = HEAP32[$__einp_$i$i4$i$i34>>2]|0;
   $cmp$i$i5$i$i35 = ($26|0)==($27|0);
   if ($cmp$i$i5$i$i35) {
    $vtable$i$i7$i$i37 = HEAP32[$$pre$i12$i$i4251>>2]|0;
    $vfn$i$i8$i$i38 = (($vtable$i$i7$i$i37) + 36|0);
    $28 = HEAP32[$vfn$i$i8$i$i38>>2]|0;
    $call$i$i9$i$i39 = (FUNCTION_TABLE_ii[$28 & 511]($$pre$i12$i$i4251)|0);
    $cmp$i1$i10$i$i40 = ($call$i$i9$i$i39|0)==(-1);
    if ($cmp$i1$i10$i$i40) {
     HEAP32[$__e>>2] = 0;
     label = 31;
     break;
    }
   }
   if ($cmp$i$i$i29) {
    STACKTOP = sp;return;
   }
  }
 } while(0);
 if ((label|0) == 31) {
  if (!($cmp$i$i$i29)) {
   STACKTOP = sp;return;
  }
 }
 $29 = HEAP32[$__err>>2]|0;
 $or9 = $29 | 2;
 HEAP32[$__err>>2] = $or9;
 STACKTOP = sp;return;
}
function __ZNSt3__120__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$__e,$__err,$__ct,$__n) {
 $__b = $__b|0;
 $__e = $__e|0;
 $__err = $__err|0;
 $__ct = $__ct|0;
 $__n = $__n|0;
 var $$pre$i$i$i = 0, $$pre$i$i$i107 = 0, $$pre$i$i$i39 = 0, $$pre$i12$i$i123 = 0, $$pre$i12$i$i55 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__einp_$i$i = 0;
 var $__einp_$i$i$i$i = 0, $__einp_$i$i$i$i31 = 0, $__einp_$i$i$i$i99 = 0, $__einp_$i$i21 = 0, $__einp_$i$i4$i$i = 0, $__einp_$i$i4$i$i115 = 0, $__einp_$i$i4$i$i47 = 0, $__einp_$i$i62 = 0, $__einp_$i$i87 = 0, $__n$addr$0 = 0, $__n$addr$0$in = 0, $__ninp_$i$i = 0, $__ninp_$i$i$i$i = 0, $__ninp_$i$i$i$i30 = 0, $__ninp_$i$i$i$i98 = 0, $__ninp_$i$i20 = 0, $__ninp_$i$i3$i$i = 0, $__ninp_$i$i3$i$i114 = 0, $__ninp_$i$i3$i$i46 = 0, $__ninp_$i$i61 = 0;
 var $__ninp_$i$i86 = 0, $__r$0 = 0, $__r$0$in = 0, $__tab_$i = 0, $add = 0, $and3$i = 0, $and3$i77 = 0, $arrayidx$i = 0, $arrayidx$i76 = 0, $call$i = 0, $call$i$i = 0, $call$i$i$i$i = 0, $call$i$i$i$i104 = 0, $call$i$i$i$i36 = 0, $call$i$i66 = 0, $call$i$i9$i$i = 0, $call$i$i9$i$i120 = 0, $call$i$i9$i$i52 = 0, $call$i84 = 0, $cmp = 0;
 var $cmp$ = 0, $cmp$i = 0, $cmp$i$i$i = 0, $cmp$i$i$i$i = 0, $cmp$i$i$i$i100 = 0, $cmp$i$i$i$i32 = 0, $cmp$i$i$i110 = 0, $cmp$i$i$i42 = 0, $cmp$i$i17 = 0, $cmp$i$i22 = 0, $cmp$i$i5$i$i = 0, $cmp$i$i5$i$i116 = 0, $cmp$i$i5$i$i48 = 0, $cmp$i$i63 = 0, $cmp$i$i88 = 0, $cmp$i1$i$i$i = 0, $cmp$i1$i$i$i105 = 0, $cmp$i1$i$i$i37 = 0, $cmp$i1$i10$i$i = 0, $cmp$i1$i10$i$i121 = 0;
 var $cmp$i1$i10$i$i53 = 0, $cmp$i15$i$i58 = 0, $cmp$i78 = 0, $cmptmp$i$i59 = 0, $conv = 0, $conv$i = 0, $conv$i$i$i = 0, $conv$i$i$i68 = 0, $conv$i18 = 0, $conv$i71 = 0, $conv$i74 = 0, $conv14 = 0, $incdec$ptr$i$i = 0, $incdec$ptr$i$i93 = 0, $isascii2$i = 0, $isascii2$i73 = 0, $mul = 0, $or = 0, $or20 = 0, $or4 = 0;
 var $retval$0 = 0, $retval$0$i$i = 0, $retval$0$i$i70 = 0, $sext = 0, $sext130 = 0, $tobool$i$i$i = 0, $tobool$i$i$i29 = 0, $tobool$i$i$i97 = 0, $tobool$i2$i$i = 0, $tobool$i2$i$i112 = 0, $tobool$i2$i$i44 = 0, $vfn$i = 0, $vfn$i$i = 0, $vfn$i$i$i$i = 0, $vfn$i$i$i$i103 = 0, $vfn$i$i$i$i35 = 0, $vfn$i$i24 = 0, $vfn$i$i65 = 0, $vfn$i$i8$i$i = 0, $vfn$i$i8$i$i119 = 0;
 var $vfn$i$i8$i$i51 = 0, $vfn$i$i90 = 0, $vfn$i83 = 0, $vtable$i = 0, $vtable$i$i = 0, $vtable$i$i$i$i = 0, $vtable$i$i$i$i102 = 0, $vtable$i$i$i$i34 = 0, $vtable$i$i23 = 0, $vtable$i$i64 = 0, $vtable$i$i7$i$i = 0, $vtable$i$i7$i$i118 = 0, $vtable$i$i7$i$i50 = 0, $vtable$i$i89 = 0, $vtable$i82 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$__b>>2]|0;
 $tobool$i$i$i = ($0|0)==(0|0);
 do {
  if ($tobool$i$i$i) {
   $4 = 0;
  } else {
   $__ninp_$i$i$i$i = (($0) + 12|0);
   $1 = HEAP32[$__ninp_$i$i$i$i>>2]|0;
   $__einp_$i$i$i$i = (($0) + 16|0);
   $2 = HEAP32[$__einp_$i$i$i$i>>2]|0;
   $cmp$i$i$i$i = ($1|0)==($2|0);
   if ($cmp$i$i$i$i) {
    $vtable$i$i$i$i = HEAP32[$0>>2]|0;
    $vfn$i$i$i$i = (($vtable$i$i$i$i) + 36|0);
    $3 = HEAP32[$vfn$i$i$i$i>>2]|0;
    $call$i$i$i$i = (FUNCTION_TABLE_ii[$3 & 511]($0)|0);
    $cmp$i1$i$i$i = ($call$i$i$i$i|0)==(-1);
    if ($cmp$i1$i$i$i) {
     HEAP32[$__b>>2] = 0;
     $4 = 0;
     break;
    } else {
     $$pre$i$i$i = HEAP32[$__b>>2]|0;
     $4 = $$pre$i$i$i;
     break;
    }
   } else {
    $4 = $0;
   }
  }
 } while(0);
 $cmp$i$i$i = ($4|0)==(0|0);
 $5 = HEAP32[$__e>>2]|0;
 $tobool$i2$i$i = ($5|0)==(0|0);
 do {
  if ($tobool$i2$i$i) {
   label = 11;
  } else {
   $__ninp_$i$i3$i$i = (($5) + 12|0);
   $6 = HEAP32[$__ninp_$i$i3$i$i>>2]|0;
   $__einp_$i$i4$i$i = (($5) + 16|0);
   $7 = HEAP32[$__einp_$i$i4$i$i>>2]|0;
   $cmp$i$i5$i$i = ($6|0)==($7|0);
   if ($cmp$i$i5$i$i) {
    $vtable$i$i7$i$i = HEAP32[$5>>2]|0;
    $vfn$i$i8$i$i = (($vtable$i$i7$i$i) + 36|0);
    $8 = HEAP32[$vfn$i$i8$i$i>>2]|0;
    $call$i$i9$i$i = (FUNCTION_TABLE_ii[$8 & 511]($5)|0);
    $cmp$i1$i10$i$i = ($call$i$i9$i$i|0)==(-1);
    if ($cmp$i1$i10$i$i) {
     HEAP32[$__e>>2] = 0;
     label = 11;
     break;
    }
   }
   if ($cmp$i$i$i) {
    $53 = $5;
   } else {
    label = 12;
   }
  }
 } while(0);
 if ((label|0) == 11) {
  if ($cmp$i$i$i) {
   label = 12;
  } else {
   $53 = 0;
  }
 }
 if ((label|0) == 12) {
  $9 = HEAP32[$__err>>2]|0;
  $or = $9 | 6;
  HEAP32[$__err>>2] = $or;
  $retval$0 = 0;
  STACKTOP = sp;return ($retval$0|0);
 }
 $10 = HEAP32[$__b>>2]|0;
 $__ninp_$i$i = (($10) + 12|0);
 $11 = HEAP32[$__ninp_$i$i>>2]|0;
 $__einp_$i$i = (($10) + 16|0);
 $12 = HEAP32[$__einp_$i$i>>2]|0;
 $cmp$i$i17 = ($11|0)==($12|0);
 if ($cmp$i$i17) {
  $vtable$i$i = HEAP32[$10>>2]|0;
  $vfn$i$i = (($vtable$i$i) + 36|0);
  $13 = HEAP32[$vfn$i$i>>2]|0;
  $call$i$i = (FUNCTION_TABLE_ii[$13 & 511]($10)|0);
  $retval$0$i$i = $call$i$i;
 } else {
  $14 = HEAP8[$11>>0]|0;
  $conv$i$i$i = $14&255;
  $retval$0$i$i = $conv$i$i$i;
 }
 $conv$i = $retval$0$i$i&255;
 $isascii2$i = ($conv$i<<24>>24)>(-1);
 if ($isascii2$i) {
  $sext = $retval$0$i$i << 24;
  $conv$i18 = $sext >> 24;
  $__tab_$i = (($__ct) + 8|0);
  $15 = HEAP32[$__tab_$i>>2]|0;
  $arrayidx$i = (($15) + ($conv$i18<<1)|0);
  $16 = HEAP16[$arrayidx$i>>1]|0;
  $and3$i = $16 & 2048;
  $cmp$i = ($and3$i<<16>>16)==(0);
  if (!($cmp$i)) {
   $vtable$i = HEAP32[$__ct>>2]|0;
   $vfn$i = (($vtable$i) + 36|0);
   $18 = HEAP32[$vfn$i>>2]|0;
   $call$i = (FUNCTION_TABLE_iiii[$18 & 511]($__ct,$conv$i,0)|0);
   $conv = $call$i << 24 >> 24;
   $19 = HEAP32[$__b>>2]|0;
   $__ninp_$i$i20 = (($19) + 12|0);
   $20 = HEAP32[$__ninp_$i$i20>>2]|0;
   $__einp_$i$i21 = (($19) + 16|0);
   $21 = HEAP32[$__einp_$i$i21>>2]|0;
   $cmp$i$i22 = ($20|0)==($21|0);
   if ($cmp$i$i22) {
    $vtable$i$i23 = HEAP32[$19>>2]|0;
    $vfn$i$i24 = (($vtable$i$i23) + 40|0);
    $22 = HEAP32[$vfn$i$i24>>2]|0;
    (FUNCTION_TABLE_ii[$22 & 511]($19)|0);
    $$pre$i12$i$i55 = $53;$28 = $53;$__n$addr$0$in = $__n;$__r$0$in = $conv;
   } else {
    $incdec$ptr$i$i = (($20) + 1|0);
    HEAP32[$__ninp_$i$i20>>2] = $incdec$ptr$i$i;
    $$pre$i12$i$i55 = $53;$28 = $53;$__n$addr$0$in = $__n;$__r$0$in = $conv;
   }
   while(1) {
    $__r$0 = (($__r$0$in) + -48)|0;
    $__n$addr$0 = (($__n$addr$0$in) + -1)|0;
    $23 = HEAP32[$__b>>2]|0;
    $tobool$i$i$i29 = ($23|0)==(0|0);
    do {
     if ($tobool$i$i$i29) {
      $27 = 0;
     } else {
      $__ninp_$i$i$i$i30 = (($23) + 12|0);
      $24 = HEAP32[$__ninp_$i$i$i$i30>>2]|0;
      $__einp_$i$i$i$i31 = (($23) + 16|0);
      $25 = HEAP32[$__einp_$i$i$i$i31>>2]|0;
      $cmp$i$i$i$i32 = ($24|0)==($25|0);
      if ($cmp$i$i$i$i32) {
       $vtable$i$i$i$i34 = HEAP32[$23>>2]|0;
       $vfn$i$i$i$i35 = (($vtable$i$i$i$i34) + 36|0);
       $26 = HEAP32[$vfn$i$i$i$i35>>2]|0;
       $call$i$i$i$i36 = (FUNCTION_TABLE_ii[$26 & 511]($23)|0);
       $cmp$i1$i$i$i37 = ($call$i$i$i$i36|0)==(-1);
       if ($cmp$i1$i$i$i37) {
        HEAP32[$__b>>2] = 0;
        $27 = 0;
        break;
       } else {
        $$pre$i$i$i39 = HEAP32[$__b>>2]|0;
        $27 = $$pre$i$i$i39;
        break;
       }
      } else {
       $27 = $23;
      }
     }
    } while(0);
    $cmp$i$i$i42 = ($27|0)==(0|0);
    $tobool$i2$i$i44 = ($28|0)==(0|0);
    if ($tobool$i2$i$i44) {
     $$pre$i12$i$i123 = $$pre$i12$i$i55;$32 = 0;
    } else {
     $__ninp_$i$i3$i$i46 = (($28) + 12|0);
     $29 = HEAP32[$__ninp_$i$i3$i$i46>>2]|0;
     $__einp_$i$i4$i$i47 = (($28) + 16|0);
     $30 = HEAP32[$__einp_$i$i4$i$i47>>2]|0;
     $cmp$i$i5$i$i48 = ($29|0)==($30|0);
     if ($cmp$i$i5$i$i48) {
      $vtable$i$i7$i$i50 = HEAP32[$28>>2]|0;
      $vfn$i$i8$i$i51 = (($vtable$i$i7$i$i50) + 36|0);
      $31 = HEAP32[$vfn$i$i8$i$i51>>2]|0;
      $call$i$i9$i$i52 = (FUNCTION_TABLE_ii[$31 & 511]($28)|0);
      $cmp$i1$i10$i$i53 = ($call$i$i9$i$i52|0)==(-1);
      if ($cmp$i1$i10$i$i53) {
       HEAP32[$__e>>2] = 0;
       $$pre$i12$i$i123 = 0;$32 = 0;
      } else {
       $$pre$i12$i$i123 = $$pre$i12$i$i55;$32 = $$pre$i12$i$i55;
      }
     } else {
      $$pre$i12$i$i123 = $$pre$i12$i$i55;$32 = $28;
     }
    }
    $cmp$i15$i$i58 = ($32|0)==(0|0);
    $cmptmp$i$i59 = $cmp$i$i$i42 ^ $cmp$i15$i$i58;
    $cmp = ($__n$addr$0|0)>(0);
    $cmp$ = $cmptmp$i$i59 & $cmp;
    $33 = HEAP32[$__b>>2]|0;
    if (!($cmp$)) {
     label = 40;
     break;
    }
    $__ninp_$i$i61 = (($33) + 12|0);
    $34 = HEAP32[$__ninp_$i$i61>>2]|0;
    $__einp_$i$i62 = (($33) + 16|0);
    $35 = HEAP32[$__einp_$i$i62>>2]|0;
    $cmp$i$i63 = ($34|0)==($35|0);
    if ($cmp$i$i63) {
     $vtable$i$i64 = HEAP32[$33>>2]|0;
     $vfn$i$i65 = (($vtable$i$i64) + 36|0);
     $36 = HEAP32[$vfn$i$i65>>2]|0;
     $call$i$i66 = (FUNCTION_TABLE_ii[$36 & 511]($33)|0);
     $retval$0$i$i70 = $call$i$i66;
    } else {
     $37 = HEAP8[$34>>0]|0;
     $conv$i$i$i68 = $37&255;
     $retval$0$i$i70 = $conv$i$i$i68;
    }
    $conv$i71 = $retval$0$i$i70&255;
    $isascii2$i73 = ($conv$i71<<24>>24)>(-1);
    if (!($isascii2$i73)) {
     $retval$0 = $__r$0;
     label = 52;
     break;
    }
    $sext130 = $retval$0$i$i70 << 24;
    $conv$i74 = $sext130 >> 24;
    $38 = HEAP32[$__tab_$i>>2]|0;
    $arrayidx$i76 = (($38) + ($conv$i74<<1)|0);
    $39 = HEAP16[$arrayidx$i76>>1]|0;
    $and3$i77 = $39 & 2048;
    $cmp$i78 = ($and3$i77<<16>>16)==(0);
    if ($cmp$i78) {
     $retval$0 = $__r$0;
     label = 52;
     break;
    }
    $mul = ($__r$0*10)|0;
    $vtable$i82 = HEAP32[$__ct>>2]|0;
    $vfn$i83 = (($vtable$i82) + 36|0);
    $40 = HEAP32[$vfn$i83>>2]|0;
    $call$i84 = (FUNCTION_TABLE_iiii[$40 & 511]($__ct,$conv$i71,0)|0);
    $conv14 = $call$i84 << 24 >> 24;
    $add = (($conv14) + ($mul))|0;
    $41 = HEAP32[$__b>>2]|0;
    $__ninp_$i$i86 = (($41) + 12|0);
    $42 = HEAP32[$__ninp_$i$i86>>2]|0;
    $__einp_$i$i87 = (($41) + 16|0);
    $43 = HEAP32[$__einp_$i$i87>>2]|0;
    $cmp$i$i88 = ($42|0)==($43|0);
    if ($cmp$i$i88) {
     $vtable$i$i89 = HEAP32[$41>>2]|0;
     $vfn$i$i90 = (($vtable$i$i89) + 40|0);
     $44 = HEAP32[$vfn$i$i90>>2]|0;
     (FUNCTION_TABLE_ii[$44 & 511]($41)|0);
     $$pre$i12$i$i55 = $$pre$i12$i$i123;$28 = $32;$__n$addr$0$in = $__n$addr$0;$__r$0$in = $add;
     continue;
    } else {
     $incdec$ptr$i$i93 = (($42) + 1|0);
     HEAP32[$__ninp_$i$i86>>2] = $incdec$ptr$i$i93;
     $$pre$i12$i$i55 = $$pre$i12$i$i123;$28 = $32;$__n$addr$0$in = $__n$addr$0;$__r$0$in = $add;
     continue;
    }
   }
   if ((label|0) == 40) {
    $tobool$i$i$i97 = ($33|0)==(0|0);
    do {
     if ($tobool$i$i$i97) {
      $48 = 0;
     } else {
      $__ninp_$i$i$i$i98 = (($33) + 12|0);
      $45 = HEAP32[$__ninp_$i$i$i$i98>>2]|0;
      $__einp_$i$i$i$i99 = (($33) + 16|0);
      $46 = HEAP32[$__einp_$i$i$i$i99>>2]|0;
      $cmp$i$i$i$i100 = ($45|0)==($46|0);
      if ($cmp$i$i$i$i100) {
       $vtable$i$i$i$i102 = HEAP32[$33>>2]|0;
       $vfn$i$i$i$i103 = (($vtable$i$i$i$i102) + 36|0);
       $47 = HEAP32[$vfn$i$i$i$i103>>2]|0;
       $call$i$i$i$i104 = (FUNCTION_TABLE_ii[$47 & 511]($33)|0);
       $cmp$i1$i$i$i105 = ($call$i$i$i$i104|0)==(-1);
       if ($cmp$i1$i$i$i105) {
        HEAP32[$__b>>2] = 0;
        $48 = 0;
        break;
       } else {
        $$pre$i$i$i107 = HEAP32[$__b>>2]|0;
        $48 = $$pre$i$i$i107;
        break;
       }
      } else {
       $48 = $33;
      }
     }
    } while(0);
    $cmp$i$i$i110 = ($48|0)==(0|0);
    $tobool$i2$i$i112 = ($$pre$i12$i$i123|0)==(0|0);
    do {
     if ($tobool$i2$i$i112) {
      label = 50;
     } else {
      $__ninp_$i$i3$i$i114 = (($$pre$i12$i$i123) + 12|0);
      $49 = HEAP32[$__ninp_$i$i3$i$i114>>2]|0;
      $__einp_$i$i4$i$i115 = (($$pre$i12$i$i123) + 16|0);
      $50 = HEAP32[$__einp_$i$i4$i$i115>>2]|0;
      $cmp$i$i5$i$i116 = ($49|0)==($50|0);
      if ($cmp$i$i5$i$i116) {
       $vtable$i$i7$i$i118 = HEAP32[$$pre$i12$i$i123>>2]|0;
       $vfn$i$i8$i$i119 = (($vtable$i$i7$i$i118) + 36|0);
       $51 = HEAP32[$vfn$i$i8$i$i119>>2]|0;
       $call$i$i9$i$i120 = (FUNCTION_TABLE_ii[$51 & 511]($$pre$i12$i$i123)|0);
       $cmp$i1$i10$i$i121 = ($call$i$i9$i$i120|0)==(-1);
       if ($cmp$i1$i10$i$i121) {
        HEAP32[$__e>>2] = 0;
        label = 50;
        break;
       }
      }
      if ($cmp$i$i$i110) {
       $retval$0 = $__r$0;
       STACKTOP = sp;return ($retval$0|0);
      }
     }
    } while(0);
    if ((label|0) == 50) {
     if (!($cmp$i$i$i110)) {
      $retval$0 = $__r$0;
      STACKTOP = sp;return ($retval$0|0);
     }
    }
    $52 = HEAP32[$__err>>2]|0;
    $or20 = $52 | 2;
    HEAP32[$__err>>2] = $or20;
    $retval$0 = $__r$0;
    STACKTOP = sp;return ($retval$0|0);
   }
   else if ((label|0) == 52) {
    STACKTOP = sp;return ($retval$0|0);
   }
  }
 }
 $17 = HEAP32[$__err>>2]|0;
 $or4 = $17 | 4;
 HEAP32[$__err>>2] = $or4;
 $retval$0 = 0;
 STACKTOP = sp;return ($retval$0|0);
}
function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKwSC_($agg$result,$this,$__b,$__e,$__iob,$__err,$__tm,$__fmtb,$__fmte) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__tm = $__tm|0;
 $__fmtb = $__fmtb|0;
 $__fmte = $__fmte|0;
 var $$pre = 0, $$pre$i$i$i144 = 0, $$pre$i$i$i65 = 0, $$pre$i15$i$i84 = 0, $$pre$i15$i$i84185 = 0, $$pre$i15$i$i84186 = 0, $$pre184 = 0, $$pre184$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0;
 var $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0;
 var $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0;
 var $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0;
 var $8 = 0, $9 = 0, $__cmd$0 = 0, $__einp_$i$i = 0, $__einp_$i$i$i$i = 0, $__einp_$i$i$i$i133 = 0, $__einp_$i$i$i$i54 = 0, $__einp_$i$i104 = 0, $__einp_$i$i4$i$i = 0, $__einp_$i$i4$i$i152 = 0, $__einp_$i$i4$i$i73 = 0, $__fmtb$addr$0$ph$be = 0, $__fmtb$addr$0$ph182 = 0, $__fmtb$addr$0$pn = 0, $__fmtb$addr$1 = 0, $__fmtb$addr$2 = 0, $__fmtb$addr$2$lcssa = 0, $__ninp_$i$i = 0, $__ninp_$i$i$i$i = 0, $__ninp_$i$i$i$i132 = 0;
 var $__ninp_$i$i$i$i53 = 0, $__ninp_$i$i103 = 0, $__ninp_$i$i3$i$i = 0, $__ninp_$i$i3$i$i151 = 0, $__ninp_$i$i3$i$i72 = 0, $__opt$0 = 0, $agg$tmp = 0, $agg$tmp$byval_copy = 0, $agg$tmp23 = 0, $agg$tmp23$byval_copy = 0, $call$i$i = 0, $call$i$i$i$i = 0, $call$i$i$i$i138 = 0, $call$i$i$i$i59 = 0, $call$i$i108 = 0, $call$i$i9$i$i = 0, $call$i$i9$i$i157 = 0, $call$i$i9$i$i78 = 0, $call$i115 = 0, $call$i118 = 0;
 var $call$i35 = 0, $call$i38 = 0, $call$i41 = 0, $call$i44 = 0, $call$i47 = 0, $call$i50 = 0, $call$i92 = 0, $cmp = 0, $cmp$i$i$i$i = 0, $cmp$i$i$i$i134 = 0, $cmp$i$i$i$i55 = 0, $cmp$i$i105 = 0, $cmp$i$i122 = 0, $cmp$i$i5$i$i = 0, $cmp$i$i5$i$i153 = 0, $cmp$i$i5$i$i74 = 0, $cmp$i$i89 = 0, $cmp$i$i96 = 0, $cmp$i1$i$i$i = 0, $cmp$i1$i$i$i142 = 0;
 var $cmp$i1$i$i$i63 = 0, $cmp$i1$i13$i$i = 0, $cmp$i1$i13$i$i161 = 0, $cmp$i1$i13$i$i82 = 0, $cmp17 = 0, $cmp181 = 0, $cmp2 = 0, $cmp28 = 0, $cmp47 = 0, $cmp5 = 0, $cmp7 = 0, $cmptmp$i$i88 = 0, $incdec$ptr = 0, $incdec$ptr$i$i = 0, $incdec$ptr$i$i127 = 0, $incdec$ptr16 = 0, $incdec$ptr24 = 0, $incdec$ptr50 = 0, $or = 0, $phitmp$i16$i$i85 = 0;
 var $ref$tmp = 0, $ref$tmp22 = 0, $retval$0$i$i = 0, $retval$0$i$i$i$i = 0, $retval$0$i$i$i$i141 = 0, $retval$0$i$i$i$i62 = 0, $retval$0$i$i111 = 0, $retval$0$i$i12$i$i = 0, $retval$0$i$i12$i$i160 = 0, $retval$0$i$i12$i$i81 = 0, $tobool$i$i$i = 0, $tobool$i$i$i131 = 0, $tobool$i$i$i52 = 0, $tobool$i2$i$i = 0, $tobool$i2$i$i149 = 0, $tobool$i2$i$i70 = 0, $vfn = 0, $vfn$i = 0, $vfn$i$i = 0, $vfn$i$i$i$i = 0;
 var $vfn$i$i$i$i137 = 0, $vfn$i$i$i$i58 = 0, $vfn$i$i107 = 0, $vfn$i$i124 = 0, $vfn$i$i8$i$i = 0, $vfn$i$i8$i$i156 = 0, $vfn$i$i8$i$i77 = 0, $vfn$i$i98 = 0, $vfn$i114 = 0, $vfn$i117 = 0, $vfn$i40 = 0, $vfn$i43 = 0, $vfn$i46 = 0, $vfn$i49 = 0, $vfn$i91 = 0, $vtable = 0, $vtable$i = 0, $vtable$i$i = 0, $vtable$i$i$i$i = 0, $vtable$i$i$i$i136 = 0;
 var $vtable$i$i$i$i57 = 0, $vtable$i$i106 = 0, $vtable$i$i123 = 0, $vtable$i$i7$i$i = 0, $vtable$i$i7$i$i155 = 0, $vtable$i$i7$i$i76 = 0, $vtable$i$i97 = 0, $vtable$i113 = 0, $vtable$i116 = 0, $vtable$i39 = 0, $vtable$i42 = 0, $vtable$i45 = 0, $vtable$i48 = 0, $vtable$i90 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $agg$tmp23$byval_copy = sp + 20|0;
 $agg$tmp$byval_copy = sp + 16|0;
 $ref$tmp = sp + 12|0;
 $ref$tmp22 = sp + 8|0;
 $agg$tmp = sp + 4|0;
 $agg$tmp23 = sp;
 __ZNKSt3__18ios_base6getlocEv($ref$tmp,$__iob);
 __THREW__ = 0;
 $call$i35 = (invoke_iii(359,($ref$tmp|0),(4608|0))|0);
 $0 = __THREW__; __THREW__ = 0;
 $1 = $0&1;
 if ($1) {
  $14 = ___cxa_find_matching_catch()|0;
  $15 = tempRet0;
  $16 = HEAP32[$ref$tmp>>2]|0;
  (__ZNSt3__114__shared_count16__release_sharedEv($16)|0);
  ___resumeException($14|0);
  // unreachable;
 }
 $2 = HEAP32[$ref$tmp>>2]|0;
 (__ZNSt3__114__shared_count16__release_sharedEv($2)|0);
 HEAP32[$__err>>2] = 0;
 $cmp181 = ($__fmtb|0)==($__fmte|0);
 L4: do {
  if ($cmp181) {
   label = 66;
  } else {
   $$pre184 = 0;$__fmtb$addr$0$ph182 = $__fmtb;
   L6: while(1) {
    $3 = $$pre184;
    while(1) {
     $cmp2 = ($3|0)==(0);
     if (!($cmp2)) {
      label = 66;
      break L4;
     }
     $4 = HEAP32[$__b>>2]|0;
     $tobool$i$i$i = ($4|0)==(0|0);
     if ($tobool$i$i$i) {
      $24 = 0;$71 = 1;
     } else {
      $__ninp_$i$i$i$i = (($4) + 12|0);
      $5 = HEAP32[$__ninp_$i$i$i$i>>2]|0;
      $__einp_$i$i$i$i = (($4) + 16|0);
      $6 = HEAP32[$__einp_$i$i$i$i>>2]|0;
      $cmp$i$i$i$i = ($5|0)==($6|0);
      if ($cmp$i$i$i$i) {
       $vtable$i$i$i$i = HEAP32[$4>>2]|0;
       $vfn$i$i$i$i = (($vtable$i$i$i$i) + 36|0);
       $7 = HEAP32[$vfn$i$i$i$i>>2]|0;
       $call$i$i$i$i = (FUNCTION_TABLE_ii[$7 & 511]($4)|0);
       $retval$0$i$i$i$i = $call$i$i$i$i;
      } else {
       $8 = HEAP32[$5>>2]|0;
       $retval$0$i$i$i$i = $8;
      }
      $cmp$i1$i$i$i = ($retval$0$i$i$i$i|0)==(-1);
      if ($cmp$i1$i$i$i) {
       HEAP32[$__b>>2] = 0;
       $24 = 0;$71 = 1;
      } else {
       $24 = $4;$71 = 0;
      }
     }
     $9 = HEAP32[$__e>>2]|0;
     $tobool$i2$i$i = ($9|0)==(0|0);
     do {
      if ($tobool$i2$i$i) {
       label = 18;
      } else {
       $__ninp_$i$i3$i$i = (($9) + 12|0);
       $10 = HEAP32[$__ninp_$i$i3$i$i>>2]|0;
       $__einp_$i$i4$i$i = (($9) + 16|0);
       $11 = HEAP32[$__einp_$i$i4$i$i>>2]|0;
       $cmp$i$i5$i$i = ($10|0)==($11|0);
       if ($cmp$i$i5$i$i) {
        $vtable$i$i7$i$i = HEAP32[$9>>2]|0;
        $vfn$i$i8$i$i = (($vtable$i$i7$i$i) + 36|0);
        $12 = HEAP32[$vfn$i$i8$i$i>>2]|0;
        $call$i$i9$i$i = (FUNCTION_TABLE_ii[$12 & 511]($9)|0);
        $retval$0$i$i12$i$i = $call$i$i9$i$i;
       } else {
        $13 = HEAP32[$10>>2]|0;
        $retval$0$i$i12$i$i = $13;
       }
       $cmp$i1$i13$i$i = ($retval$0$i$i12$i$i|0)==(-1);
       if ($cmp$i1$i13$i$i) {
        HEAP32[$__e>>2] = 0;
        label = 18;
        break;
       } else {
        if ($71) {
         $25 = $9;
         break;
        } else {
         label = 20;
         break L6;
        }
       }
      }
     } while(0);
     if ((label|0) == 18) {
      label = 0;
      if ($71) {
       label = 20;
       break L6;
      } else {
       $25 = 0;
      }
     }
     $17 = HEAP32[$__fmtb$addr$0$ph182>>2]|0;
     $vtable$i = HEAP32[$call$i35>>2]|0;
     $vfn$i = (($vtable$i) + 52|0);
     $18 = HEAP32[$vfn$i>>2]|0;
     $call$i38 = (FUNCTION_TABLE_iiii[$18 & 511]($call$i35,$17,0)|0);
     $cmp5 = ($call$i38<<24>>24)==(37);
     if ($cmp5) {
      label = 23;
      break;
     }
     $27 = HEAP32[$__fmtb$addr$0$ph182>>2]|0;
     $vtable$i45 = HEAP32[$call$i35>>2]|0;
     $vfn$i46 = (($vtable$i45) + 12|0);
     $28 = HEAP32[$vfn$i46>>2]|0;
     $call$i47 = (FUNCTION_TABLE_iiii[$28 & 511]($call$i35,8192,$27)|0);
     if ($call$i47) {
      $__fmtb$addr$0$pn = $__fmtb$addr$0$ph182;
      label = 33;
      break;
     }
     $__ninp_$i$i103 = (($24) + 12|0);
     $50 = HEAP32[$__ninp_$i$i103>>2]|0;
     $__einp_$i$i104 = (($24) + 16|0);
     $51 = HEAP32[$__einp_$i$i104>>2]|0;
     $cmp$i$i105 = ($50|0)==($51|0);
     if ($cmp$i$i105) {
      $vtable$i$i106 = HEAP32[$24>>2]|0;
      $vfn$i$i107 = (($vtable$i$i106) + 36|0);
      $52 = HEAP32[$vfn$i$i107>>2]|0;
      $call$i$i108 = (FUNCTION_TABLE_ii[$52 & 511]($24)|0);
      $retval$0$i$i111 = $call$i$i108;
     } else {
      $53 = HEAP32[$50>>2]|0;
      $retval$0$i$i111 = $53;
     }
     $vtable$i113 = HEAP32[$call$i35>>2]|0;
     $vfn$i114 = (($vtable$i113) + 28|0);
     $54 = HEAP32[$vfn$i114>>2]|0;
     $call$i115 = (FUNCTION_TABLE_iii[$54 & 511]($call$i35,$retval$0$i$i111)|0);
     $55 = HEAP32[$__fmtb$addr$0$ph182>>2]|0;
     $vtable$i116 = HEAP32[$call$i35>>2]|0;
     $vfn$i117 = (($vtable$i116) + 28|0);
     $56 = HEAP32[$vfn$i117>>2]|0;
     $call$i118 = (FUNCTION_TABLE_iii[$56 & 511]($call$i35,$55)|0);
     $cmp47 = ($call$i115|0)==($call$i118|0);
     if ($cmp47) {
      label = 61;
      break;
     }
     HEAP32[$__err>>2] = 4;
     $3 = 4;
    }
    L38: do {
     if ((label|0) == 23) {
      label = 0;
      $incdec$ptr = (($__fmtb$addr$0$ph182) + 4|0);
      $cmp7 = ($incdec$ptr|0)==($__fmte|0);
      if ($cmp7) {
       label = 24;
       break L6;
      }
      $19 = HEAP32[$incdec$ptr>>2]|0;
      $vtable$i39 = HEAP32[$call$i35>>2]|0;
      $vfn$i40 = (($vtable$i39) + 52|0);
      $20 = HEAP32[$vfn$i40>>2]|0;
      $call$i41 = (FUNCTION_TABLE_iiii[$20 & 511]($call$i35,$19,0)|0);
      if ((($call$i41<<24>>24) == 48) | (($call$i41<<24>>24) == 69)) {
       $incdec$ptr16 = (($__fmtb$addr$0$ph182) + 8|0);
       $cmp17 = ($incdec$ptr16|0)==($__fmte|0);
       if ($cmp17) {
        label = 27;
        break L6;
       }
       $21 = HEAP32[$incdec$ptr16>>2]|0;
       $vtable$i42 = HEAP32[$call$i35>>2]|0;
       $vfn$i43 = (($vtable$i42) + 52|0);
       $22 = HEAP32[$vfn$i43>>2]|0;
       $call$i44 = (FUNCTION_TABLE_iiii[$22 & 511]($call$i35,$21,0)|0);
       $__cmd$0 = $call$i44;$__fmtb$addr$1 = $incdec$ptr16;$__opt$0 = $call$i41;
      } else {
       $__cmd$0 = $call$i41;$__fmtb$addr$1 = $incdec$ptr;$__opt$0 = 0;
      }
      $vtable = HEAP32[$this>>2]|0;
      $vfn = (($vtable) + 36|0);
      $23 = HEAP32[$vfn>>2]|0;
      HEAP32[$agg$tmp>>2] = $24;
      HEAP32[$agg$tmp23>>2] = $25;
      ;HEAP32[$agg$tmp$byval_copy+0>>2]=HEAP32[$agg$tmp+0>>2]|0;
      ;HEAP32[$agg$tmp23$byval_copy+0>>2]=HEAP32[$agg$tmp23+0>>2]|0;
      FUNCTION_TABLE_viiiiiiiii[$23 & 255]($ref$tmp22,$this,$agg$tmp$byval_copy,$agg$tmp23$byval_copy,$__iob,$__err,$__tm,$__cmd$0,$__opt$0);
      $26 = HEAP32[$ref$tmp22>>2]|0;
      HEAP32[$__b>>2] = $26;
      $incdec$ptr24 = (($__fmtb$addr$1) + 4|0);
      $__fmtb$addr$0$ph$be = $incdec$ptr24;
     }
     else if ((label|0) == 33) {
      while(1) {
       label = 0;
       $__fmtb$addr$2 = (($__fmtb$addr$0$pn) + 4|0);
       $cmp28 = ($__fmtb$addr$2|0)==($__fmte|0);
       if ($cmp28) {
        $__fmtb$addr$2$lcssa = $__fmte;
        break;
       }
       $29 = HEAP32[$__fmtb$addr$2>>2]|0;
       $vtable$i48 = HEAP32[$call$i35>>2]|0;
       $vfn$i49 = (($vtable$i48) + 12|0);
       $30 = HEAP32[$vfn$i49>>2]|0;
       $call$i50 = (FUNCTION_TABLE_iiii[$30 & 511]($call$i35,8192,$29)|0);
       if ($call$i50) {
        $__fmtb$addr$0$pn = $__fmtb$addr$2;
        label = 33;
       } else {
        $__fmtb$addr$2$lcssa = $__fmtb$addr$2;
        break;
       }
      }
      $$pre$i$i$i65 = $24;$$pre$i15$i$i84 = $25;$35 = $25;
      while(1) {
       $tobool$i$i$i52 = ($$pre$i$i$i65|0)==(0|0);
       if ($tobool$i$i$i52) {
        $40 = 1;$41 = 0;
       } else {
        $__ninp_$i$i$i$i53 = (($$pre$i$i$i65) + 12|0);
        $31 = HEAP32[$__ninp_$i$i$i$i53>>2]|0;
        $__einp_$i$i$i$i54 = (($$pre$i$i$i65) + 16|0);
        $32 = HEAP32[$__einp_$i$i$i$i54>>2]|0;
        $cmp$i$i$i$i55 = ($31|0)==($32|0);
        if ($cmp$i$i$i$i55) {
         $vtable$i$i$i$i57 = HEAP32[$$pre$i$i$i65>>2]|0;
         $vfn$i$i$i$i58 = (($vtable$i$i$i$i57) + 36|0);
         $33 = HEAP32[$vfn$i$i$i$i58>>2]|0;
         $call$i$i$i$i59 = (FUNCTION_TABLE_ii[$33 & 511]($$pre$i$i$i65)|0);
         $retval$0$i$i$i$i62 = $call$i$i$i$i59;
        } else {
         $34 = HEAP32[$31>>2]|0;
         $retval$0$i$i$i$i62 = $34;
        }
        $cmp$i1$i$i$i63 = ($retval$0$i$i$i$i62|0)==(-1);
        if ($cmp$i1$i$i$i63) {
         HEAP32[$__b>>2] = 0;
         $40 = 1;$41 = 0;
        } else {
         $40 = 0;$41 = $$pre$i$i$i65;
        }
       }
       $tobool$i2$i$i70 = ($35|0)==(0|0);
       do {
        if ($tobool$i2$i$i70) {
         $$pre$i15$i$i84186 = $$pre$i15$i$i84;
         label = 48;
        } else {
         $__ninp_$i$i3$i$i72 = (($35) + 12|0);
         $36 = HEAP32[$__ninp_$i$i3$i$i72>>2]|0;
         $__einp_$i$i4$i$i73 = (($35) + 16|0);
         $37 = HEAP32[$__einp_$i$i4$i$i73>>2]|0;
         $cmp$i$i5$i$i74 = ($36|0)==($37|0);
         if ($cmp$i$i5$i$i74) {
          $vtable$i$i7$i$i76 = HEAP32[$35>>2]|0;
          $vfn$i$i8$i$i77 = (($vtable$i$i7$i$i76) + 36|0);
          $38 = HEAP32[$vfn$i$i8$i$i77>>2]|0;
          $call$i$i9$i$i78 = (FUNCTION_TABLE_ii[$38 & 511]($35)|0);
          $retval$0$i$i12$i$i81 = $call$i$i9$i$i78;
         } else {
          $39 = HEAP32[$36>>2]|0;
          $retval$0$i$i12$i$i81 = $39;
         }
         $cmp$i1$i13$i$i82 = ($retval$0$i$i12$i$i81|0)==(-1);
         if ($cmp$i1$i13$i$i82) {
          HEAP32[$__e>>2] = 0;
          $$pre$i15$i$i84186 = 0;
          label = 48;
          break;
         } else {
          $phitmp$i16$i$i85 = ($$pre$i15$i$i84|0)==(0|0);
          $cmptmp$i$i88 = $40 ^ $phitmp$i16$i$i85;
          if ($cmptmp$i$i88) {
           $$pre$i15$i$i84185 = $$pre$i15$i$i84;$72 = $$pre$i15$i$i84;
           break;
          } else {
           $__fmtb$addr$0$ph$be = $__fmtb$addr$2$lcssa;
           break L38;
          }
         }
        }
       } while(0);
       if ((label|0) == 48) {
        label = 0;
        if ($40) {
         $__fmtb$addr$0$ph$be = $__fmtb$addr$2$lcssa;
         break L38;
        } else {
         $$pre$i15$i$i84185 = $$pre$i15$i$i84186;$72 = 0;
        }
       }
       $__ninp_$i$i = (($41) + 12|0);
       $42 = HEAP32[$__ninp_$i$i>>2]|0;
       $__einp_$i$i = (($41) + 16|0);
       $43 = HEAP32[$__einp_$i$i>>2]|0;
       $cmp$i$i89 = ($42|0)==($43|0);
       if ($cmp$i$i89) {
        $vtable$i$i = HEAP32[$41>>2]|0;
        $vfn$i$i = (($vtable$i$i) + 36|0);
        $44 = HEAP32[$vfn$i$i>>2]|0;
        $call$i$i = (FUNCTION_TABLE_ii[$44 & 511]($41)|0);
        $retval$0$i$i = $call$i$i;
       } else {
        $45 = HEAP32[$42>>2]|0;
        $retval$0$i$i = $45;
       }
       $vtable$i90 = HEAP32[$call$i35>>2]|0;
       $vfn$i91 = (($vtable$i90) + 12|0);
       $46 = HEAP32[$vfn$i91>>2]|0;
       $call$i92 = (FUNCTION_TABLE_iiii[$46 & 511]($call$i35,8192,$retval$0$i$i)|0);
       if (!($call$i92)) {
        $__fmtb$addr$0$ph$be = $__fmtb$addr$2$lcssa;
        break L38;
       }
       $47 = HEAP32[$__ninp_$i$i>>2]|0;
       $48 = HEAP32[$__einp_$i$i>>2]|0;
       $cmp$i$i96 = ($47|0)==($48|0);
       if ($cmp$i$i96) {
        $vtable$i$i97 = HEAP32[$41>>2]|0;
        $vfn$i$i98 = (($vtable$i$i97) + 40|0);
        $49 = HEAP32[$vfn$i$i98>>2]|0;
        (FUNCTION_TABLE_ii[$49 & 511]($41)|0);
        $$pre$i$i$i65 = $41;$$pre$i15$i$i84 = $$pre$i15$i$i84185;$35 = $72;
        continue;
       } else {
        $incdec$ptr$i$i = (($47) + 4|0);
        HEAP32[$__ninp_$i$i>>2] = $incdec$ptr$i$i;
        $$pre$i$i$i65 = $41;$$pre$i15$i$i84 = $$pre$i15$i$i84185;$35 = $72;
        continue;
       }
      }
     }
     else if ((label|0) == 61) {
      label = 0;
      $57 = HEAP32[$__ninp_$i$i103>>2]|0;
      $58 = HEAP32[$__einp_$i$i104>>2]|0;
      $cmp$i$i122 = ($57|0)==($58|0);
      if ($cmp$i$i122) {
       $vtable$i$i123 = HEAP32[$24>>2]|0;
       $vfn$i$i124 = (($vtable$i$i123) + 40|0);
       $59 = HEAP32[$vfn$i$i124>>2]|0;
       (FUNCTION_TABLE_ii[$59 & 511]($24)|0);
      } else {
       $incdec$ptr$i$i127 = (($57) + 4|0);
       HEAP32[$__ninp_$i$i103>>2] = $incdec$ptr$i$i127;
      }
      $incdec$ptr50 = (($__fmtb$addr$0$ph182) + 4|0);
      $__fmtb$addr$0$ph$be = $incdec$ptr50;
     }
    } while(0);
    $cmp = ($__fmtb$addr$0$ph$be|0)==($__fmte|0);
    if ($cmp) {
     label = 66;
     break L4;
    }
    $$pre184$pre = HEAP32[$__err>>2]|0;
    $$pre184 = $$pre184$pre;$__fmtb$addr$0$ph182 = $__fmtb$addr$0$ph$be;
   }
   if ((label|0) == 20) {
    HEAP32[$__err>>2] = 4;
    $$pre$i$i$i144 = $24;
    break;
   }
   else if ((label|0) == 24) {
    HEAP32[$__err>>2] = 4;
    $$pre$i$i$i144 = $24;
    break;
   }
   else if ((label|0) == 27) {
    HEAP32[$__err>>2] = 4;
    $$pre$i$i$i144 = $24;
    break;
   }
  }
 } while(0);
 if ((label|0) == 66) {
  $$pre = HEAP32[$__b>>2]|0;
  $$pre$i$i$i144 = $$pre;
 }
 $tobool$i$i$i131 = ($$pre$i$i$i144|0)==(0|0);
 if ($tobool$i$i$i131) {
  $70 = 0;$73 = 1;
 } else {
  $__ninp_$i$i$i$i132 = (($$pre$i$i$i144) + 12|0);
  $60 = HEAP32[$__ninp_$i$i$i$i132>>2]|0;
  $__einp_$i$i$i$i133 = (($$pre$i$i$i144) + 16|0);
  $61 = HEAP32[$__einp_$i$i$i$i133>>2]|0;
  $cmp$i$i$i$i134 = ($60|0)==($61|0);
  if ($cmp$i$i$i$i134) {
   $vtable$i$i$i$i136 = HEAP32[$$pre$i$i$i144>>2]|0;
   $vfn$i$i$i$i137 = (($vtable$i$i$i$i136) + 36|0);
   $62 = HEAP32[$vfn$i$i$i$i137>>2]|0;
   $call$i$i$i$i138 = (FUNCTION_TABLE_ii[$62 & 511]($$pre$i$i$i144)|0);
   $retval$0$i$i$i$i141 = $call$i$i$i$i138;
  } else {
   $63 = HEAP32[$60>>2]|0;
   $retval$0$i$i$i$i141 = $63;
  }
  $cmp$i1$i$i$i142 = ($retval$0$i$i$i$i141|0)==(-1);
  if ($cmp$i1$i$i$i142) {
   HEAP32[$__b>>2] = 0;
   $70 = 0;$73 = 1;
  } else {
   $70 = $$pre$i$i$i144;$73 = 0;
  }
 }
 $64 = HEAP32[$__e>>2]|0;
 $tobool$i2$i$i149 = ($64|0)==(0|0);
 do {
  if ($tobool$i2$i$i149) {
   label = 79;
  } else {
   $__ninp_$i$i3$i$i151 = (($64) + 12|0);
   $65 = HEAP32[$__ninp_$i$i3$i$i151>>2]|0;
   $__einp_$i$i4$i$i152 = (($64) + 16|0);
   $66 = HEAP32[$__einp_$i$i4$i$i152>>2]|0;
   $cmp$i$i5$i$i153 = ($65|0)==($66|0);
   if ($cmp$i$i5$i$i153) {
    $vtable$i$i7$i$i155 = HEAP32[$64>>2]|0;
    $vfn$i$i8$i$i156 = (($vtable$i$i7$i$i155) + 36|0);
    $67 = HEAP32[$vfn$i$i8$i$i156>>2]|0;
    $call$i$i9$i$i157 = (FUNCTION_TABLE_ii[$67 & 511]($64)|0);
    $retval$0$i$i12$i$i160 = $call$i$i9$i$i157;
   } else {
    $68 = HEAP32[$65>>2]|0;
    $retval$0$i$i12$i$i160 = $68;
   }
   $cmp$i1$i13$i$i161 = ($retval$0$i$i12$i$i160|0)==(-1);
   if ($cmp$i1$i13$i$i161) {
    HEAP32[$__e>>2] = 0;
    label = 79;
    break;
   }
   if ($73) {
    HEAP32[$agg$result>>2] = $70;
    STACKTOP = sp;return;
   }
  }
 } while(0);
 if ((label|0) == 79) {
  if (!($73)) {
   HEAP32[$agg$result>>2] = $70;
   STACKTOP = sp;return;
  }
 }
 $69 = HEAP32[$__err>>2]|0;
 $or = $69 | 2;
 HEAP32[$__err>>2] = $or;
 HEAP32[$agg$result>>2] = $70;
 STACKTOP = sp;return;
}
function __ZNSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 STACKTOP = sp;return;
}
function __ZNSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED1Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return;
}
function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE13do_date_orderEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return 2;
}
function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11do_get_timeES4_S4_RNS_8ios_baseERjP2tm($agg$result,$this,$__b,$__e,$__iob,$__err,$__tm) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__tm = $__tm|0;
 var $0 = 0, $1 = 0, $agg$tmp = 0, $agg$tmp$byval_copy = 0, $agg$tmp2 = 0, $agg$tmp2$byval_copy = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $agg$tmp2$byval_copy = sp + 12|0;
 $agg$tmp$byval_copy = sp + 8|0;
 $agg$tmp = sp + 4|0;
 $agg$tmp2 = sp;
 $0 = HEAP32[$__b>>2]|0;
 HEAP32[$agg$tmp>>2] = $0;
 $1 = HEAP32[$__e>>2]|0;
 HEAP32[$agg$tmp2>>2] = $1;
 ;HEAP32[$agg$tmp$byval_copy+0>>2]=HEAP32[$agg$tmp+0>>2]|0;
 ;HEAP32[$agg$tmp2$byval_copy+0>>2]=HEAP32[$agg$tmp2+0>>2]|0;
 __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKwSC_($agg$result,$this,$agg$tmp$byval_copy,$agg$tmp2$byval_copy,$__iob,$__err,$__tm,3672,((3672 + 32|0)));
 STACKTOP = sp;return;
}
function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11do_get_dateES4_S4_RNS_8ios_baseERjP2tm($agg$result,$this,$__b,$__e,$__iob,$__err,$__tm) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__tm = $__tm|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $__data_$i$i$i = 0, $__data_$i$i$i8 = 0, $__data_$i1$i$i = 0, $__size_$i2$i = 0, $add$ptr = 0, $add$ptr6 = 0, $agg$tmp = 0, $agg$tmp$byval_copy = 0, $agg$tmp2 = 0, $agg$tmp2$byval_copy = 0, $and$i$i$i = 0, $call = 0, $cond$i = 0, $cond$i$i1016 = 0;
 var $cond$i$i1214 = 0, $conv$i$i = 0, $shr1$i$i = 0, $tobool$i$i$i = 0, $vfn = 0, $vtable = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $agg$tmp2$byval_copy = sp + 12|0;
 $agg$tmp$byval_copy = sp + 8|0;
 $agg$tmp = sp + 4|0;
 $agg$tmp2 = sp;
 $add$ptr = (($this) + 8|0);
 $vtable = HEAP32[$add$ptr>>2]|0;
 $vfn = (($vtable) + 20|0);
 $0 = HEAP32[$vfn>>2]|0;
 $call = (FUNCTION_TABLE_ii[$0 & 511]($add$ptr)|0);
 $1 = HEAP32[$__b>>2]|0;
 HEAP32[$agg$tmp>>2] = $1;
 $2 = HEAP32[$__e>>2]|0;
 HEAP32[$agg$tmp2>>2] = $2;
 $3 = HEAP8[$call>>0]|0;
 $and$i$i$i = $3 & 1;
 $tobool$i$i$i = ($and$i$i$i<<24>>24)==(0);
 if ($tobool$i$i$i) {
  $__data_$i$i$i = (($call) + 4|0);
  $__data_$i$i$i8 = (($call) + 4|0);
  $conv$i$i = $3&255;
  $shr1$i$i = $conv$i$i >>> 1;
  $cond$i = $shr1$i$i;$cond$i$i1016 = $__data_$i$i$i8;$cond$i$i1214 = $__data_$i$i$i;
 } else {
  $__data_$i1$i$i = (($call) + 8|0);
  $4 = HEAP32[$__data_$i1$i$i>>2]|0;
  $__size_$i2$i = (($call) + 4|0);
  $5 = HEAP32[$__size_$i2$i>>2]|0;
  $cond$i = $5;$cond$i$i1016 = $4;$cond$i$i1214 = $4;
 }
 $add$ptr6 = (($cond$i$i1016) + ($cond$i<<2)|0);
 ;HEAP32[$agg$tmp$byval_copy+0>>2]=HEAP32[$agg$tmp+0>>2]|0;
 ;HEAP32[$agg$tmp2$byval_copy+0>>2]=HEAP32[$agg$tmp2+0>>2]|0;
 __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKwSC_($agg$result,$this,$agg$tmp$byval_copy,$agg$tmp2$byval_copy,$__iob,$__err,$__tm,$cond$i$i1214,$add$ptr6);
 STACKTOP = sp;return;
}
function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE14do_get_weekdayES4_S4_RNS_8ios_baseERjP2tm($agg$result,$this,$__b,$__e,$__iob,$__err,$__tm) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__tm = $__tm|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $agg$tmp = 0, $agg$tmp$byval_copy = 0, $call$i1 = 0, $ref$tmp = 0, $tm_wday = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $agg$tmp$byval_copy = sp + 8|0;
 $ref$tmp = sp + 4|0;
 $agg$tmp = sp;
 __ZNKSt3__18ios_base6getlocEv($ref$tmp,$__iob);
 __THREW__ = 0;
 $call$i1 = (invoke_iii(359,($ref$tmp|0),(4608|0))|0);
 $0 = __THREW__; __THREW__ = 0;
 $1 = $0&1;
 if ($1) {
  $5 = ___cxa_find_matching_catch()|0;
  $6 = tempRet0;
  $7 = HEAP32[$ref$tmp>>2]|0;
  (__ZNSt3__114__shared_count16__release_sharedEv($7)|0);
  ___resumeException($5|0);
  // unreachable;
 } else {
  $2 = HEAP32[$ref$tmp>>2]|0;
  (__ZNSt3__114__shared_count16__release_sharedEv($2)|0);
  $tm_wday = (($__tm) + 24|0);
  $3 = HEAP32[$__e>>2]|0;
  HEAP32[$agg$tmp>>2] = $3;
  ;HEAP32[$agg$tmp$byval_copy+0>>2]=HEAP32[$agg$tmp+0>>2]|0;
  __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__get_weekdaynameERiRS4_S4_RjRKNS_5ctypeIwEE($this,$tm_wday,$__b,$agg$tmp$byval_copy,$__err,$call$i1);
  $4 = HEAP32[$__b>>2]|0;
  HEAP32[$agg$result>>2] = $4;
  STACKTOP = sp;return;
 }
}
function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__get_weekdaynameERiRS4_S4_RjRKNS_5ctypeIwEE($this,$__w,$__b,$__e,$__err,$__ct) {
 $this = $this|0;
 $__w = $__w|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__err = $__err|0;
 $__ct = $__ct|0;
 var $0 = 0, $1 = 0, $add$ptr = 0, $add$ptr2 = 0, $agg$tmp = 0, $agg$tmp$byval_copy = 0, $call = 0, $call3 = 0, $cmp = 0, $rem = 0, $sub$ptr$div = 0, $sub$ptr$lhs$cast = 0, $sub$ptr$rhs$cast = 0, $sub$ptr$sub = 0, $vtable = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $agg$tmp$byval_copy = sp + 4|0;
 $agg$tmp = sp;
 $add$ptr = (($this) + 8|0);
 $vtable = HEAP32[$add$ptr>>2]|0;
 $0 = HEAP32[$vtable>>2]|0;
 $call = (FUNCTION_TABLE_ii[$0 & 511]($add$ptr)|0);
 $1 = HEAP32[$__e>>2]|0;
 HEAP32[$agg$tmp>>2] = $1;
 $add$ptr2 = (($call) + 168|0);
 ;HEAP32[$agg$tmp$byval_copy+0>>2]=HEAP32[$agg$tmp+0>>2]|0;
 $call3 = (__ZNSt3__114__scan_keywordINS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEPKNS_12basic_stringIwS3_NS_9allocatorIwEEEENS_5ctypeIwEEEET0_RT_SE_SD_SD_RKT1_Rjb($__b,$agg$tmp$byval_copy,$call,$add$ptr2,$__ct,$__err,0)|0);
 $sub$ptr$lhs$cast = $call3;
 $sub$ptr$rhs$cast = $call;
 $sub$ptr$sub = (($sub$ptr$lhs$cast) - ($sub$ptr$rhs$cast))|0;
 $cmp = ($sub$ptr$sub|0)<(168);
 if (!($cmp)) {
  STACKTOP = sp;return;
 }
 $sub$ptr$div = (($sub$ptr$sub|0) / 12)&-1;
 $rem = (($sub$ptr$div|0) % 7)&-1;
 HEAP32[$__w>>2] = $rem;
 STACKTOP = sp;return;
}
function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE16do_get_monthnameES4_S4_RNS_8ios_baseERjP2tm($agg$result,$this,$__b,$__e,$__iob,$__err,$__tm) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__tm = $__tm|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $agg$tmp = 0, $agg$tmp$byval_copy = 0, $call$i1 = 0, $ref$tmp = 0, $tm_mon = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $agg$tmp$byval_copy = sp + 8|0;
 $ref$tmp = sp + 4|0;
 $agg$tmp = sp;
 __ZNKSt3__18ios_base6getlocEv($ref$tmp,$__iob);
 __THREW__ = 0;
 $call$i1 = (invoke_iii(359,($ref$tmp|0),(4608|0))|0);
 $0 = __THREW__; __THREW__ = 0;
 $1 = $0&1;
 if ($1) {
  $5 = ___cxa_find_matching_catch()|0;
  $6 = tempRet0;
  $7 = HEAP32[$ref$tmp>>2]|0;
  (__ZNSt3__114__shared_count16__release_sharedEv($7)|0);
  ___resumeException($5|0);
  // unreachable;
 } else {
  $2 = HEAP32[$ref$tmp>>2]|0;
  (__ZNSt3__114__shared_count16__release_sharedEv($2)|0);
  $tm_mon = (($__tm) + 16|0);
  $3 = HEAP32[$__e>>2]|0;
  HEAP32[$agg$tmp>>2] = $3;
  ;HEAP32[$agg$tmp$byval_copy+0>>2]=HEAP32[$agg$tmp+0>>2]|0;
  __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE15__get_monthnameERiRS4_S4_RjRKNS_5ctypeIwEE($this,$tm_mon,$__b,$agg$tmp$byval_copy,$__err,$call$i1);
  $4 = HEAP32[$__b>>2]|0;
  HEAP32[$agg$result>>2] = $4;
  STACKTOP = sp;return;
 }
}
function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE15__get_monthnameERiRS4_S4_RjRKNS_5ctypeIwEE($this,$__m,$__b,$__e,$__err,$__ct) {
 $this = $this|0;
 $__m = $__m|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__err = $__err|0;
 $__ct = $__ct|0;
 var $0 = 0, $1 = 0, $add$ptr = 0, $add$ptr2 = 0, $agg$tmp = 0, $agg$tmp$byval_copy = 0, $call = 0, $call3 = 0, $cmp = 0, $rem = 0, $sub$ptr$div = 0, $sub$ptr$lhs$cast = 0, $sub$ptr$rhs$cast = 0, $sub$ptr$sub = 0, $vfn = 0, $vtable = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $agg$tmp$byval_copy = sp + 4|0;
 $agg$tmp = sp;
 $add$ptr = (($this) + 8|0);
 $vtable = HEAP32[$add$ptr>>2]|0;
 $vfn = (($vtable) + 4|0);
 $0 = HEAP32[$vfn>>2]|0;
 $call = (FUNCTION_TABLE_ii[$0 & 511]($add$ptr)|0);
 $1 = HEAP32[$__e>>2]|0;
 HEAP32[$agg$tmp>>2] = $1;
 $add$ptr2 = (($call) + 288|0);
 ;HEAP32[$agg$tmp$byval_copy+0>>2]=HEAP32[$agg$tmp+0>>2]|0;
 $call3 = (__ZNSt3__114__scan_keywordINS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEPKNS_12basic_stringIwS3_NS_9allocatorIwEEEENS_5ctypeIwEEEET0_RT_SE_SD_SD_RKT1_Rjb($__b,$agg$tmp$byval_copy,$call,$add$ptr2,$__ct,$__err,0)|0);
 $sub$ptr$lhs$cast = $call3;
 $sub$ptr$rhs$cast = $call;
 $sub$ptr$sub = (($sub$ptr$lhs$cast) - ($sub$ptr$rhs$cast))|0;
 $cmp = ($sub$ptr$sub|0)<(288);
 if (!($cmp)) {
  STACKTOP = sp;return;
 }
 $sub$ptr$div = (($sub$ptr$sub|0) / 12)&-1;
 $rem = (($sub$ptr$div|0) % 12)&-1;
 HEAP32[$__m>>2] = $rem;
 STACKTOP = sp;return;
}
function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11do_get_yearES4_S4_RNS_8ios_baseERjP2tm($agg$result,$this,$__b,$__e,$__iob,$__err,$__tm) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__tm = $__tm|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $agg$tmp = 0, $agg$tmp$byval_copy = 0, $call$i1 = 0, $ref$tmp = 0, $tm_year = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $agg$tmp$byval_copy = sp + 8|0;
 $ref$tmp = sp + 4|0;
 $agg$tmp = sp;
 __ZNKSt3__18ios_base6getlocEv($ref$tmp,$__iob);
 __THREW__ = 0;
 $call$i1 = (invoke_iii(359,($ref$tmp|0),(4608|0))|0);
 $0 = __THREW__; __THREW__ = 0;
 $1 = $0&1;
 if ($1) {
  $5 = ___cxa_find_matching_catch()|0;
  $6 = tempRet0;
  $7 = HEAP32[$ref$tmp>>2]|0;
  (__ZNSt3__114__shared_count16__release_sharedEv($7)|0);
  ___resumeException($5|0);
  // unreachable;
 } else {
  $2 = HEAP32[$ref$tmp>>2]|0;
  (__ZNSt3__114__shared_count16__release_sharedEv($2)|0);
  $tm_year = (($__tm) + 20|0);
  $3 = HEAP32[$__e>>2]|0;
  HEAP32[$agg$tmp>>2] = $3;
  ;HEAP32[$agg$tmp$byval_copy+0>>2]=HEAP32[$agg$tmp+0>>2]|0;
  __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE10__get_yearERiRS4_S4_RjRKNS_5ctypeIwEE(0,$tm_year,$__b,$agg$tmp$byval_copy,$__err,$call$i1);
  $4 = HEAP32[$__b>>2]|0;
  HEAP32[$agg$result>>2] = $4;
  STACKTOP = sp;return;
 }
}
function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE10__get_yearERiRS4_S4_RjRKNS_5ctypeIwEE($this,$__y,$__b,$__e,$__err,$__ct) {
 $this = $this|0;
 $__y = $__y|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__err = $__err|0;
 $__ct = $__ct|0;
 var $0 = 0, $1 = 0, $2 = 0, $__t$0 = 0, $add = 0, $add6 = 0, $add6$call = 0, $agg$tmp = 0, $agg$tmp$byval_copy = 0, $and = 0, $call = 0, $call$off = 0, $cmp = 0, $sub = 0, $tobool = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $agg$tmp$byval_copy = sp + 4|0;
 $agg$tmp = sp;
 $0 = HEAP32[$__e>>2]|0;
 HEAP32[$agg$tmp>>2] = $0;
 ;HEAP32[$agg$tmp$byval_copy+0>>2]=HEAP32[$agg$tmp+0>>2]|0;
 $call = (__ZNSt3__120__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$agg$tmp$byval_copy,$__err,$__ct,4)|0);
 $1 = HEAP32[$__err>>2]|0;
 $and = $1 & 4;
 $tobool = ($and|0)==(0);
 if (!($tobool)) {
  STACKTOP = sp;return;
 }
 $cmp = ($call|0)<(69);
 if ($cmp) {
  $add = (($call) + 2000)|0;
  $__t$0 = $add;
 } else {
  $call$off = (($call) + -69)|0;
  $2 = ($call$off>>>0)<(31);
  $add6 = (($call) + 1900)|0;
  $add6$call = $2 ? $add6 : $call;
  $__t$0 = $add6$call;
 }
 $sub = (($__t$0) + -1900)|0;
 HEAP32[$__y>>2] = $sub;
 STACKTOP = sp;return;
}
function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjP2tmcc($agg$result,$this,$__b,$__e,$__iob,$__err,$__tm,$__fmt,$0) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__tm = $__tm|0;
 $__fmt = $__fmt|0;
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__data_$i$i$i = 0, $__data_$i$i$i79 = 0, $__data_$i$i$i88 = 0, $__data_$i$i$i97 = 0, $__data_$i1$i$i = 0;
 var $__data_$i1$i$i86 = 0, $__size_$i2$i = 0, $__size_$i2$i104 = 0, $add$ptr = 0, $add$ptr12 = 0, $add$ptr64 = 0, $add$ptr74 = 0, $agg$tmp = 0, $agg$tmp$byval_copy = 0, $agg$tmp14 = 0, $agg$tmp14$byval_copy = 0, $agg$tmp17 = 0, $agg$tmp17$byval_copy = 0, $agg$tmp18 = 0, $agg$tmp18$byval_copy = 0, $agg$tmp21 = 0, $agg$tmp21$byval_copy = 0, $agg$tmp22 = 0, $agg$tmp22$byval_copy = 0, $agg$tmp24 = 0;
 var $agg$tmp24$byval_copy = 0, $agg$tmp27 = 0, $agg$tmp27$byval_copy = 0, $agg$tmp29 = 0, $agg$tmp29$byval_copy = 0, $agg$tmp3 = 0, $agg$tmp3$byval_copy = 0, $agg$tmp32 = 0, $agg$tmp32$byval_copy = 0, $agg$tmp34 = 0, $agg$tmp34$byval_copy = 0, $agg$tmp36 = 0, $agg$tmp36$byval_copy = 0, $agg$tmp39 = 0, $agg$tmp39$byval_copy = 0, $agg$tmp42 = 0, $agg$tmp42$byval_copy = 0, $agg$tmp43 = 0, $agg$tmp43$byval_copy = 0, $agg$tmp46 = 0;
 var $agg$tmp46$byval_copy = 0, $agg$tmp47 = 0, $agg$tmp47$byval_copy = 0, $agg$tmp49 = 0, $agg$tmp49$byval_copy = 0, $agg$tmp52 = 0, $agg$tmp52$byval_copy = 0, $agg$tmp53 = 0, $agg$tmp53$byval_copy = 0, $agg$tmp56 = 0, $agg$tmp56$byval_copy = 0, $agg$tmp60 = 0, $agg$tmp60$byval_copy = 0, $agg$tmp61 = 0, $agg$tmp61$byval_copy = 0, $agg$tmp69 = 0, $agg$tmp69$byval_copy = 0, $agg$tmp7 = 0, $agg$tmp7$byval_copy = 0, $agg$tmp70 = 0;
 var $agg$tmp70$byval_copy = 0, $agg$tmp76 = 0, $agg$tmp76$byval_copy = 0, $agg$tmp79 = 0, $agg$tmp79$byval_copy = 0, $agg$tmp8 = 0, $agg$tmp8$byval_copy = 0, $agg$tmp81 = 0, $agg$tmp81$byval_copy = 0, $and$i$i$i = 0, $and$i$i$i84 = 0, $call$i71 = 0, $call5 = 0, $call67 = 0, $cond$i = 0, $cond$i$i111113 = 0, $cond$i$i81115 = 0, $cond$i$i90117119 = 0, $cond$i$i99121 = 0, $cond$i109 = 0;
 var $conv = 0, $conv$i$i = 0, $conv$i$i106 = 0, $or = 0, $ref$tmp = 0, $ref$tmp16 = 0, $ref$tmp20 = 0, $ref$tmp41 = 0, $ref$tmp45 = 0, $ref$tmp51 = 0, $ref$tmp6 = 0, $ref$tmp68 = 0, $shr1$i$i = 0, $shr1$i$i107 = 0, $tm_hour = 0, $tm_hour26 = 0, $tm_hour38 = 0, $tm_mday = 0, $tm_min = 0, $tm_mon = 0;
 var $tm_mon31 = 0, $tm_wday = 0, $tm_wday55 = 0, $tm_yday = 0, $tm_year = 0, $tm_year78 = 0, $tobool$i$i$i = 0, $tobool$i$i$i85 = 0, $vfn = 0, $vfn59 = 0, $vfn66 = 0, $vtable = 0, $vtable58 = 0, $vtable65 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 288|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $agg$tmp81$byval_copy = sp + 116|0;
 $agg$tmp79$byval_copy = sp + 112|0;
 $agg$tmp76$byval_copy = sp + 108|0;
 $agg$tmp70$byval_copy = sp + 208|0;
 $agg$tmp69$byval_copy = sp + 260|0;
 $agg$tmp61$byval_copy = sp + 268|0;
 $agg$tmp60$byval_copy = sp + 252|0;
 $agg$tmp56$byval_copy = sp + 216|0;
 $agg$tmp53$byval_copy = sp + 16|0;
 $agg$tmp52$byval_copy = sp + 20|0;
 $agg$tmp49$byval_copy = sp + 24|0;
 $agg$tmp47$byval_copy = sp + 28|0;
 $agg$tmp46$byval_copy = sp + 32|0;
 $agg$tmp43$byval_copy = sp + 36|0;
 $agg$tmp42$byval_copy = sp + 40|0;
 $agg$tmp39$byval_copy = sp + 212|0;
 $agg$tmp36$byval_copy = sp + 44|0;
 $agg$tmp34$byval_copy = sp + 48|0;
 $agg$tmp32$byval_copy = sp + 52|0;
 $agg$tmp29$byval_copy = sp + 56|0;
 $agg$tmp27$byval_copy = sp + 60|0;
 $agg$tmp24$byval_copy = sp + 64|0;
 $agg$tmp22$byval_copy = sp + 68|0;
 $agg$tmp21$byval_copy = sp + 72|0;
 $agg$tmp18$byval_copy = sp + 76|0;
 $agg$tmp17$byval_copy = sp + 80|0;
 $agg$tmp14$byval_copy = sp + 84|0;
 $agg$tmp8$byval_copy = sp + 88|0;
 $agg$tmp7$byval_copy = sp + 92|0;
 $agg$tmp3$byval_copy = sp + 232|0;
 $agg$tmp$byval_copy = sp + 240|0;
 $ref$tmp = sp + 248|0;
 $agg$tmp = sp + 256|0;
 $agg$tmp3 = sp + 264|0;
 $ref$tmp6 = sp + 272|0;
 $agg$tmp7 = sp + 276|0;
 $agg$tmp8 = sp + 120|0;
 $agg$tmp14 = sp + 124|0;
 $ref$tmp16 = sp + 128|0;
 $agg$tmp17 = sp + 132|0;
 $agg$tmp18 = sp + 136|0;
 $ref$tmp20 = sp + 140|0;
 $agg$tmp21 = sp + 144|0;
 $agg$tmp22 = sp + 148|0;
 $agg$tmp24 = sp + 152|0;
 $agg$tmp27 = sp + 156|0;
 $agg$tmp29 = sp + 160|0;
 $agg$tmp32 = sp + 164|0;
 $agg$tmp34 = sp + 168|0;
 $agg$tmp36 = sp + 172|0;
 $agg$tmp39 = sp + 176|0;
 $ref$tmp41 = sp + 180|0;
 $agg$tmp42 = sp + 184|0;
 $agg$tmp43 = sp + 188|0;
 $ref$tmp45 = sp + 192|0;
 $agg$tmp46 = sp + 196|0;
 $agg$tmp47 = sp + 200|0;
 $agg$tmp49 = sp + 204|0;
 $ref$tmp51 = sp + 12|0;
 $agg$tmp52 = sp + 8|0;
 $agg$tmp53 = sp + 224|0;
 $agg$tmp56 = sp + 4|0;
 $agg$tmp60 = sp + 228|0;
 $agg$tmp61 = sp + 96|0;
 $ref$tmp68 = sp;
 $agg$tmp69 = sp + 220|0;
 $agg$tmp70 = sp + 100|0;
 $agg$tmp76 = sp + 236|0;
 $agg$tmp79 = sp + 244|0;
 $agg$tmp81 = sp + 104|0;
 HEAP32[$__err>>2] = 0;
 __ZNKSt3__18ios_base6getlocEv($ref$tmp,$__iob);
 __THREW__ = 0;
 $call$i71 = (invoke_iii(359,($ref$tmp|0),(4608|0))|0);
 $1 = __THREW__; __THREW__ = 0;
 $2 = $1&1;
 if ($2) {
  $4 = ___cxa_find_matching_catch()|0;
  $5 = tempRet0;
  $6 = HEAP32[$ref$tmp>>2]|0;
  (__ZNSt3__114__shared_count16__release_sharedEv($6)|0);
  ___resumeException($4|0);
  // unreachable;
 }
 $3 = HEAP32[$ref$tmp>>2]|0;
 (__ZNSt3__114__shared_count16__release_sharedEv($3)|0);
 $conv = $__fmt << 24 >> 24;
 do {
  switch ($conv|0) {
  case 104: case 66: case 98:  {
   $tm_mon = (($__tm) + 16|0);
   $8 = HEAP32[$__e>>2]|0;
   HEAP32[$agg$tmp3>>2] = $8;
   ;HEAP32[$agg$tmp3$byval_copy+0>>2]=HEAP32[$agg$tmp3+0>>2]|0;
   __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE15__get_monthnameERiRS4_S4_RjRKNS_5ctypeIwEE($this,$tm_mon,$__b,$agg$tmp3$byval_copy,$__err,$call$i71);
   break;
  }
  case 72:  {
   $tm_hour = (($__tm) + 8|0);
   $23 = HEAP32[$__e>>2]|0;
   HEAP32[$agg$tmp24>>2] = $23;
   ;HEAP32[$agg$tmp24$byval_copy+0>>2]=HEAP32[$agg$tmp24+0>>2]|0;
   __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE10__get_hourERiRS4_S4_RjRKNS_5ctypeIwEE(0,$tm_hour,$__b,$agg$tmp24$byval_copy,$__err,$call$i71);
   break;
  }
  case 112:  {
   $tm_hour38 = (($__tm) + 8|0);
   $29 = HEAP32[$__e>>2]|0;
   HEAP32[$agg$tmp39>>2] = $29;
   ;HEAP32[$agg$tmp39$byval_copy+0>>2]=HEAP32[$agg$tmp39+0>>2]|0;
   __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11__get_am_pmERiRS4_S4_RjRKNS_5ctypeIwEE($this,$tm_hour38,$__b,$agg$tmp39$byval_copy,$__err,$call$i71);
   break;
  }
  case 101: case 100:  {
   $tm_mday = (($__tm) + 12|0);
   $16 = HEAP32[$__e>>2]|0;
   HEAP32[$agg$tmp14>>2] = $16;
   ;HEAP32[$agg$tmp14$byval_copy+0>>2]=HEAP32[$agg$tmp14+0>>2]|0;
   __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE9__get_dayERiRS4_S4_RjRKNS_5ctypeIwEE(0,$tm_mday,$__b,$agg$tmp14$byval_copy,$__err,$call$i71);
   break;
  }
  case 116: case 110:  {
   $28 = HEAP32[$__e>>2]|0;
   HEAP32[$agg$tmp36>>2] = $28;
   ;HEAP32[$agg$tmp36$byval_copy+0>>2]=HEAP32[$agg$tmp36+0>>2]|0;
   __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__get_white_spaceERS4_S4_RjRKNS_5ctypeIwEE(0,$__b,$agg$tmp36$byval_copy,$__err,$call$i71);
   break;
  }
  case 109:  {
   $tm_mon31 = (($__tm) + 16|0);
   $26 = HEAP32[$__e>>2]|0;
   HEAP32[$agg$tmp32>>2] = $26;
   ;HEAP32[$agg$tmp32$byval_copy+0>>2]=HEAP32[$agg$tmp32+0>>2]|0;
   __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11__get_monthERiRS4_S4_RjRKNS_5ctypeIwEE(0,$tm_mon31,$__b,$agg$tmp32$byval_copy,$__err,$call$i71);
   break;
  }
  case 83:  {
   $36 = HEAP32[$__e>>2]|0;
   HEAP32[$agg$tmp49>>2] = $36;
   ;HEAP32[$agg$tmp49$byval_copy+0>>2]=HEAP32[$agg$tmp49+0>>2]|0;
   __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE12__get_secondERiRS4_S4_RjRKNS_5ctypeIwEE(0,$__tm,$__b,$agg$tmp49$byval_copy,$__err,$call$i71);
   break;
  }
  case 77:  {
   $tm_min = (($__tm) + 4|0);
   $27 = HEAP32[$__e>>2]|0;
   HEAP32[$agg$tmp34>>2] = $27;
   ;HEAP32[$agg$tmp34$byval_copy+0>>2]=HEAP32[$agg$tmp34+0>>2]|0;
   __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE12__get_minuteERiRS4_S4_RjRKNS_5ctypeIwEE(0,$tm_min,$__b,$agg$tmp34$byval_copy,$__err,$call$i71);
   break;
  }
  case 120:  {
   $vtable58 = HEAP32[$this>>2]|0;
   $vfn59 = (($vtable58) + 20|0);
   $41 = HEAP32[$vfn59>>2]|0;
   $42 = HEAP32[$__b>>2]|0;
   HEAP32[$agg$tmp60>>2] = $42;
   $43 = HEAP32[$__e>>2]|0;
   HEAP32[$agg$tmp61>>2] = $43;
   ;HEAP32[$agg$tmp60$byval_copy+0>>2]=HEAP32[$agg$tmp60+0>>2]|0;
   ;HEAP32[$agg$tmp61$byval_copy+0>>2]=HEAP32[$agg$tmp61+0>>2]|0;
   FUNCTION_TABLE_viiiiiii[$41 & 511]($agg$result,$this,$agg$tmp60$byval_copy,$agg$tmp61$byval_copy,$__iob,$__err,$__tm);
   STACKTOP = sp;return;
   break;
  }
  case 88:  {
   $add$ptr64 = (($this) + 8|0);
   $vtable65 = HEAP32[$add$ptr64>>2]|0;
   $vfn66 = (($vtable65) + 24|0);
   $44 = HEAP32[$vfn66>>2]|0;
   $call67 = (FUNCTION_TABLE_ii[$44 & 511]($add$ptr64)|0);
   $45 = HEAP32[$__b>>2]|0;
   HEAP32[$agg$tmp69>>2] = $45;
   $46 = HEAP32[$__e>>2]|0;
   HEAP32[$agg$tmp70>>2] = $46;
   $47 = HEAP8[$call67>>0]|0;
   $and$i$i$i84 = $47 & 1;
   $tobool$i$i$i85 = ($and$i$i$i84<<24>>24)==(0);
   if ($tobool$i$i$i85) {
    $__data_$i$i$i88 = (($call67) + 4|0);
    $__data_$i$i$i97 = (($call67) + 4|0);
    $conv$i$i106 = $47&255;
    $shr1$i$i107 = $conv$i$i106 >>> 1;
    $cond$i$i90117119 = $__data_$i$i$i88;$cond$i$i99121 = $__data_$i$i$i97;$cond$i109 = $shr1$i$i107;
   } else {
    $__data_$i1$i$i86 = (($call67) + 8|0);
    $48 = HEAP32[$__data_$i1$i$i86>>2]|0;
    $__size_$i2$i104 = (($call67) + 4|0);
    $49 = HEAP32[$__size_$i2$i104>>2]|0;
    $cond$i$i90117119 = $48;$cond$i$i99121 = $48;$cond$i109 = $49;
   }
   $add$ptr74 = (($cond$i$i99121) + ($cond$i109<<2)|0);
   ;HEAP32[$agg$tmp69$byval_copy+0>>2]=HEAP32[$agg$tmp69+0>>2]|0;
   ;HEAP32[$agg$tmp70$byval_copy+0>>2]=HEAP32[$agg$tmp70+0>>2]|0;
   __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKwSC_($ref$tmp68,$this,$agg$tmp69$byval_copy,$agg$tmp70$byval_copy,$__iob,$__err,$__tm,$cond$i$i90117119,$add$ptr74);
   $50 = HEAP32[$ref$tmp68>>2]|0;
   HEAP32[$__b>>2] = $50;
   break;
  }
  case 114:  {
   $30 = HEAP32[$__b>>2]|0;
   HEAP32[$agg$tmp42>>2] = $30;
   $31 = HEAP32[$__e>>2]|0;
   HEAP32[$agg$tmp43>>2] = $31;
   ;HEAP32[$agg$tmp42$byval_copy+0>>2]=HEAP32[$agg$tmp42+0>>2]|0;
   ;HEAP32[$agg$tmp43$byval_copy+0>>2]=HEAP32[$agg$tmp43+0>>2]|0;
   __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKwSC_($ref$tmp41,$this,$agg$tmp42$byval_copy,$agg$tmp43$byval_copy,$__iob,$__err,$__tm,3768,((3768 + 44|0)));
   $32 = HEAP32[$ref$tmp41>>2]|0;
   HEAP32[$__b>>2] = $32;
   break;
  }
  case 99:  {
   $add$ptr = (($this) + 8|0);
   $vtable = HEAP32[$add$ptr>>2]|0;
   $vfn = (($vtable) + 12|0);
   $9 = HEAP32[$vfn>>2]|0;
   $call5 = (FUNCTION_TABLE_ii[$9 & 511]($add$ptr)|0);
   $10 = HEAP32[$__b>>2]|0;
   HEAP32[$agg$tmp7>>2] = $10;
   $11 = HEAP32[$__e>>2]|0;
   HEAP32[$agg$tmp8>>2] = $11;
   $12 = HEAP8[$call5>>0]|0;
   $and$i$i$i = $12 & 1;
   $tobool$i$i$i = ($and$i$i$i<<24>>24)==(0);
   if ($tobool$i$i$i) {
    $__data_$i$i$i = (($call5) + 4|0);
    $__data_$i$i$i79 = (($call5) + 4|0);
    $conv$i$i = $12&255;
    $shr1$i$i = $conv$i$i >>> 1;
    $cond$i = $shr1$i$i;$cond$i$i111113 = $__data_$i$i$i;$cond$i$i81115 = $__data_$i$i$i79;
   } else {
    $__data_$i1$i$i = (($call5) + 8|0);
    $13 = HEAP32[$__data_$i1$i$i>>2]|0;
    $__size_$i2$i = (($call5) + 4|0);
    $14 = HEAP32[$__size_$i2$i>>2]|0;
    $cond$i = $14;$cond$i$i111113 = $13;$cond$i$i81115 = $13;
   }
   $add$ptr12 = (($cond$i$i81115) + ($cond$i<<2)|0);
   ;HEAP32[$agg$tmp7$byval_copy+0>>2]=HEAP32[$agg$tmp7+0>>2]|0;
   ;HEAP32[$agg$tmp8$byval_copy+0>>2]=HEAP32[$agg$tmp8+0>>2]|0;
   __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKwSC_($ref$tmp6,$this,$agg$tmp7$byval_copy,$agg$tmp8$byval_copy,$__iob,$__err,$__tm,$cond$i$i111113,$add$ptr12);
   $15 = HEAP32[$ref$tmp6>>2]|0;
   HEAP32[$__b>>2] = $15;
   break;
  }
  case 119:  {
   $tm_wday55 = (($__tm) + 24|0);
   $40 = HEAP32[$__e>>2]|0;
   HEAP32[$agg$tmp56>>2] = $40;
   ;HEAP32[$agg$tmp56$byval_copy+0>>2]=HEAP32[$agg$tmp56+0>>2]|0;
   __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE13__get_weekdayERiRS4_S4_RjRKNS_5ctypeIwEE(0,$tm_wday55,$__b,$agg$tmp56$byval_copy,$__err,$call$i71);
   break;
  }
  case 106:  {
   $tm_yday = (($__tm) + 28|0);
   $25 = HEAP32[$__e>>2]|0;
   HEAP32[$agg$tmp29>>2] = $25;
   ;HEAP32[$agg$tmp29$byval_copy+0>>2]=HEAP32[$agg$tmp29+0>>2]|0;
   __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE18__get_day_year_numERiRS4_S4_RjRKNS_5ctypeIwEE(0,$tm_yday,$__b,$agg$tmp29$byval_copy,$__err,$call$i71);
   break;
  }
  case 68:  {
   $17 = HEAP32[$__b>>2]|0;
   HEAP32[$agg$tmp17>>2] = $17;
   $18 = HEAP32[$__e>>2]|0;
   HEAP32[$agg$tmp18>>2] = $18;
   ;HEAP32[$agg$tmp17$byval_copy+0>>2]=HEAP32[$agg$tmp17+0>>2]|0;
   ;HEAP32[$agg$tmp18$byval_copy+0>>2]=HEAP32[$agg$tmp18+0>>2]|0;
   __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKwSC_($ref$tmp16,$this,$agg$tmp17$byval_copy,$agg$tmp18$byval_copy,$__iob,$__err,$__tm,3704,((3704 + 32|0)));
   $19 = HEAP32[$ref$tmp16>>2]|0;
   HEAP32[$__b>>2] = $19;
   break;
  }
  case 70:  {
   $20 = HEAP32[$__b>>2]|0;
   HEAP32[$agg$tmp21>>2] = $20;
   $21 = HEAP32[$__e>>2]|0;
   HEAP32[$agg$tmp22>>2] = $21;
   ;HEAP32[$agg$tmp21$byval_copy+0>>2]=HEAP32[$agg$tmp21+0>>2]|0;
   ;HEAP32[$agg$tmp22$byval_copy+0>>2]=HEAP32[$agg$tmp22+0>>2]|0;
   __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKwSC_($ref$tmp20,$this,$agg$tmp21$byval_copy,$agg$tmp22$byval_copy,$__iob,$__err,$__tm,3736,((3736 + 32|0)));
   $22 = HEAP32[$ref$tmp20>>2]|0;
   HEAP32[$__b>>2] = $22;
   break;
  }
  case 65: case 97:  {
   $tm_wday = (($__tm) + 24|0);
   $7 = HEAP32[$__e>>2]|0;
   HEAP32[$agg$tmp>>2] = $7;
   ;HEAP32[$agg$tmp$byval_copy+0>>2]=HEAP32[$agg$tmp+0>>2]|0;
   __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__get_weekdaynameERiRS4_S4_RjRKNS_5ctypeIwEE($this,$tm_wday,$__b,$agg$tmp$byval_copy,$__err,$call$i71);
   break;
  }
  case 84:  {
   $37 = HEAP32[$__b>>2]|0;
   HEAP32[$agg$tmp52>>2] = $37;
   $38 = HEAP32[$__e>>2]|0;
   HEAP32[$agg$tmp53>>2] = $38;
   ;HEAP32[$agg$tmp52$byval_copy+0>>2]=HEAP32[$agg$tmp52+0>>2]|0;
   ;HEAP32[$agg$tmp53$byval_copy+0>>2]=HEAP32[$agg$tmp53+0>>2]|0;
   __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKwSC_($ref$tmp51,$this,$agg$tmp52$byval_copy,$agg$tmp53$byval_copy,$__iob,$__err,$__tm,3840,((3840 + 32|0)));
   $39 = HEAP32[$ref$tmp51>>2]|0;
   HEAP32[$__b>>2] = $39;
   break;
  }
  case 82:  {
   $33 = HEAP32[$__b>>2]|0;
   HEAP32[$agg$tmp46>>2] = $33;
   $34 = HEAP32[$__e>>2]|0;
   HEAP32[$agg$tmp47>>2] = $34;
   ;HEAP32[$agg$tmp46$byval_copy+0>>2]=HEAP32[$agg$tmp46+0>>2]|0;
   ;HEAP32[$agg$tmp47$byval_copy+0>>2]=HEAP32[$agg$tmp47+0>>2]|0;
   __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKwSC_($ref$tmp45,$this,$agg$tmp46$byval_copy,$agg$tmp47$byval_copy,$__iob,$__err,$__tm,3816,((3816 + 20|0)));
   $35 = HEAP32[$ref$tmp45>>2]|0;
   HEAP32[$__b>>2] = $35;
   break;
  }
  case 121:  {
   $tm_year = (($__tm) + 20|0);
   $51 = HEAP32[$__e>>2]|0;
   HEAP32[$agg$tmp76>>2] = $51;
   ;HEAP32[$agg$tmp76$byval_copy+0>>2]=HEAP32[$agg$tmp76+0>>2]|0;
   __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE10__get_yearERiRS4_S4_RjRKNS_5ctypeIwEE(0,$tm_year,$__b,$agg$tmp76$byval_copy,$__err,$call$i71);
   break;
  }
  case 37:  {
   $53 = HEAP32[$__e>>2]|0;
   HEAP32[$agg$tmp81>>2] = $53;
   ;HEAP32[$agg$tmp81$byval_copy+0>>2]=HEAP32[$agg$tmp81+0>>2]|0;
   __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE13__get_percentERS4_S4_RjRKNS_5ctypeIwEE(0,$__b,$agg$tmp81$byval_copy,$__err,$call$i71);
   break;
  }
  case 89:  {
   $tm_year78 = (($__tm) + 20|0);
   $52 = HEAP32[$__e>>2]|0;
   HEAP32[$agg$tmp79>>2] = $52;
   ;HEAP32[$agg$tmp79$byval_copy+0>>2]=HEAP32[$agg$tmp79+0>>2]|0;
   __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11__get_year4ERiRS4_S4_RjRKNS_5ctypeIwEE(0,$tm_year78,$__b,$agg$tmp79$byval_copy,$__err,$call$i71);
   break;
  }
  case 73:  {
   $tm_hour26 = (($__tm) + 8|0);
   $24 = HEAP32[$__e>>2]|0;
   HEAP32[$agg$tmp27>>2] = $24;
   ;HEAP32[$agg$tmp27$byval_copy+0>>2]=HEAP32[$agg$tmp27+0>>2]|0;
   __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE13__get_12_hourERiRS4_S4_RjRKNS_5ctypeIwEE(0,$tm_hour26,$__b,$agg$tmp27$byval_copy,$__err,$call$i71);
   break;
  }
  default: {
   $54 = HEAP32[$__err>>2]|0;
   $or = $54 | 4;
   HEAP32[$__err>>2] = $or;
  }
  }
 } while(0);
 $55 = HEAP32[$__b>>2]|0;
 HEAP32[$agg$result>>2] = $55;
 STACKTOP = sp;return;
}
function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE9__get_dayERiRS4_S4_RjRKNS_5ctypeIwEE($this,$__d,$__b,$__e,$__err,$__ct) {
 $this = $this|0;
 $__d = $__d|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__err = $__err|0;
 $__ct = $__ct|0;
 var $0 = 0, $1 = 0, $2 = 0, $agg$tmp = 0, $agg$tmp$byval_copy = 0, $and = 0, $call = 0, $call$off = 0, $or = 0, $tobool = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $agg$tmp$byval_copy = sp + 4|0;
 $agg$tmp = sp;
 $0 = HEAP32[$__e>>2]|0;
 HEAP32[$agg$tmp>>2] = $0;
 ;HEAP32[$agg$tmp$byval_copy+0>>2]=HEAP32[$agg$tmp+0>>2]|0;
 $call = (__ZNSt3__120__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$agg$tmp$byval_copy,$__err,$__ct,2)|0);
 $1 = HEAP32[$__err>>2]|0;
 $and = $1 & 4;
 $tobool = ($and|0)==(0);
 if ($tobool) {
  $call$off = (($call) + -1)|0;
  $2 = ($call$off>>>0)<(31);
  if ($2) {
   HEAP32[$__d>>2] = $call;
   STACKTOP = sp;return;
  }
 }
 $or = $1 | 4;
 HEAP32[$__err>>2] = $or;
 STACKTOP = sp;return;
}
function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE10__get_hourERiRS4_S4_RjRKNS_5ctypeIwEE($this,$__h,$__b,$__e,$__err,$__ct) {
 $this = $this|0;
 $__h = $__h|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__err = $__err|0;
 $__ct = $__ct|0;
 var $0 = 0, $1 = 0, $agg$tmp = 0, $agg$tmp$byval_copy = 0, $and = 0, $call = 0, $cmp = 0, $or = 0, $or$cond = 0, $tobool = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $agg$tmp$byval_copy = sp + 4|0;
 $agg$tmp = sp;
 $0 = HEAP32[$__e>>2]|0;
 HEAP32[$agg$tmp>>2] = $0;
 ;HEAP32[$agg$tmp$byval_copy+0>>2]=HEAP32[$agg$tmp+0>>2]|0;
 $call = (__ZNSt3__120__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$agg$tmp$byval_copy,$__err,$__ct,2)|0);
 $1 = HEAP32[$__err>>2]|0;
 $and = $1 & 4;
 $tobool = ($and|0)==(0);
 $cmp = ($call|0)<(24);
 $or$cond = $tobool & $cmp;
 if ($or$cond) {
  HEAP32[$__h>>2] = $call;
  STACKTOP = sp;return;
 } else {
  $or = $1 | 4;
  HEAP32[$__err>>2] = $or;
  STACKTOP = sp;return;
 }
}
function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE13__get_12_hourERiRS4_S4_RjRKNS_5ctypeIwEE($this,$__h,$__b,$__e,$__err,$__ct) {
 $this = $this|0;
 $__h = $__h|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__err = $__err|0;
 $__ct = $__ct|0;
 var $0 = 0, $1 = 0, $2 = 0, $agg$tmp = 0, $agg$tmp$byval_copy = 0, $and = 0, $call = 0, $call$off = 0, $or = 0, $tobool = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $agg$tmp$byval_copy = sp + 4|0;
 $agg$tmp = sp;
 $0 = HEAP32[$__e>>2]|0;
 HEAP32[$agg$tmp>>2] = $0;
 ;HEAP32[$agg$tmp$byval_copy+0>>2]=HEAP32[$agg$tmp+0>>2]|0;
 $call = (__ZNSt3__120__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$agg$tmp$byval_copy,$__err,$__ct,2)|0);
 $1 = HEAP32[$__err>>2]|0;
 $and = $1 & 4;
 $tobool = ($and|0)==(0);
 if ($tobool) {
  $call$off = (($call) + -1)|0;
  $2 = ($call$off>>>0)<(12);
  if ($2) {
   HEAP32[$__h>>2] = $call;
   STACKTOP = sp;return;
  }
 }
 $or = $1 | 4;
 HEAP32[$__err>>2] = $or;
 STACKTOP = sp;return;
}
function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE18__get_day_year_numERiRS4_S4_RjRKNS_5ctypeIwEE($this,$__d,$__b,$__e,$__err,$__ct) {
 $this = $this|0;
 $__d = $__d|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__err = $__err|0;
 $__ct = $__ct|0;
 var $0 = 0, $1 = 0, $agg$tmp = 0, $agg$tmp$byval_copy = 0, $and = 0, $call = 0, $cmp = 0, $or = 0, $or$cond = 0, $tobool = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $agg$tmp$byval_copy = sp + 4|0;
 $agg$tmp = sp;
 $0 = HEAP32[$__e>>2]|0;
 HEAP32[$agg$tmp>>2] = $0;
 ;HEAP32[$agg$tmp$byval_copy+0>>2]=HEAP32[$agg$tmp+0>>2]|0;
 $call = (__ZNSt3__120__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$agg$tmp$byval_copy,$__err,$__ct,3)|0);
 $1 = HEAP32[$__err>>2]|0;
 $and = $1 & 4;
 $tobool = ($and|0)==(0);
 $cmp = ($call|0)<(366);
 $or$cond = $tobool & $cmp;
 if ($or$cond) {
  HEAP32[$__d>>2] = $call;
  STACKTOP = sp;return;
 } else {
  $or = $1 | 4;
  HEAP32[$__err>>2] = $or;
  STACKTOP = sp;return;
 }
}
function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11__get_monthERiRS4_S4_RjRKNS_5ctypeIwEE($this,$__m,$__b,$__e,$__err,$__ct) {
 $this = $this|0;
 $__m = $__m|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__err = $__err|0;
 $__ct = $__ct|0;
 var $0 = 0, $1 = 0, $agg$tmp = 0, $agg$tmp$byval_copy = 0, $and = 0, $call = 0, $cmp = 0, $or = 0, $or$cond = 0, $sub = 0, $tobool = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $agg$tmp$byval_copy = sp + 4|0;
 $agg$tmp = sp;
 $0 = HEAP32[$__e>>2]|0;
 HEAP32[$agg$tmp>>2] = $0;
 ;HEAP32[$agg$tmp$byval_copy+0>>2]=HEAP32[$agg$tmp+0>>2]|0;
 $call = (__ZNSt3__120__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$agg$tmp$byval_copy,$__err,$__ct,2)|0);
 $1 = HEAP32[$__err>>2]|0;
 $and = $1 & 4;
 $tobool = ($and|0)==(0);
 $cmp = ($call|0)<(13);
 $or$cond = $tobool & $cmp;
 if ($or$cond) {
  $sub = (($call) + -1)|0;
  HEAP32[$__m>>2] = $sub;
  STACKTOP = sp;return;
 } else {
  $or = $1 | 4;
  HEAP32[$__err>>2] = $or;
  STACKTOP = sp;return;
 }
}
function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE12__get_minuteERiRS4_S4_RjRKNS_5ctypeIwEE($this,$__m,$__b,$__e,$__err,$__ct) {
 $this = $this|0;
 $__m = $__m|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__err = $__err|0;
 $__ct = $__ct|0;
 var $0 = 0, $1 = 0, $agg$tmp = 0, $agg$tmp$byval_copy = 0, $and = 0, $call = 0, $cmp = 0, $or = 0, $or$cond = 0, $tobool = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $agg$tmp$byval_copy = sp + 4|0;
 $agg$tmp = sp;
 $0 = HEAP32[$__e>>2]|0;
 HEAP32[$agg$tmp>>2] = $0;
 ;HEAP32[$agg$tmp$byval_copy+0>>2]=HEAP32[$agg$tmp+0>>2]|0;
 $call = (__ZNSt3__120__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$agg$tmp$byval_copy,$__err,$__ct,2)|0);
 $1 = HEAP32[$__err>>2]|0;
 $and = $1 & 4;
 $tobool = ($and|0)==(0);
 $cmp = ($call|0)<(60);
 $or$cond = $tobool & $cmp;
 if ($or$cond) {
  HEAP32[$__m>>2] = $call;
  STACKTOP = sp;return;
 } else {
  $or = $1 | 4;
  HEAP32[$__err>>2] = $or;
  STACKTOP = sp;return;
 }
}
function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__get_white_spaceERS4_S4_RjRKNS_5ctypeIwEE($this,$__b,$__e,$__err,$__ct) {
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__err = $__err|0;
 $__ct = $__ct|0;
 var $$pre$i$i$i = 0, $$pre$i$i$i27 = 0, $$pre$i15$i$i46 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__einp_$i$i = 0, $__einp_$i$i$i$i = 0, $__einp_$i$i$i$i16 = 0, $__einp_$i$i4$i$i = 0;
 var $__einp_$i$i4$i$i35 = 0, $__einp_$i$i6 = 0, $__ninp_$i$i = 0, $__ninp_$i$i$i$i = 0, $__ninp_$i$i$i$i15 = 0, $__ninp_$i$i3$i$i = 0, $__ninp_$i$i3$i$i34 = 0, $__ninp_$i$i5 = 0, $call$i = 0, $call$i$i = 0, $call$i$i$i$i = 0, $call$i$i$i$i21 = 0, $call$i$i9$i$i = 0, $call$i$i9$i$i40 = 0, $cmp$i$i = 0, $cmp$i$i$i$i = 0, $cmp$i$i$i$i17 = 0, $cmp$i$i5$i$i = 0, $cmp$i$i5$i$i36 = 0, $cmp$i$i7 = 0;
 var $cmp$i1$i$i$i = 0, $cmp$i1$i$i$i25 = 0, $cmp$i1$i13$i$i = 0, $cmp$i1$i13$i$i44 = 0, $incdec$ptr$i$i = 0, $or = 0, $phitmp$i$i$i = 0, $phitmp$i$i$i28 = 0, $retval$0$i$i = 0, $retval$0$i$i$i$i = 0, $retval$0$i$i$i$i24 = 0, $retval$0$i$i12$i$i = 0, $retval$0$i$i12$i$i43 = 0, $tobool$i$i$i = 0, $tobool$i$i$i14 = 0, $tobool$i2$i$i = 0, $tobool$i2$i$i32 = 0, $vfn$i = 0, $vfn$i$i = 0, $vfn$i$i$i$i = 0;
 var $vfn$i$i$i$i20 = 0, $vfn$i$i8$i$i = 0, $vfn$i$i8$i$i39 = 0, $vfn$i$i9 = 0, $vtable$i = 0, $vtable$i$i = 0, $vtable$i$i$i$i = 0, $vtable$i$i$i$i19 = 0, $vtable$i$i7$i$i = 0, $vtable$i$i7$i$i38 = 0, $vtable$i$i8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 L1: while(1) {
  $0 = HEAP32[$__b>>2]|0;
  $tobool$i$i$i = ($0|0)==(0|0);
  do {
   if ($tobool$i$i$i) {
    $30 = 1;
   } else {
    $__ninp_$i$i$i$i = (($0) + 12|0);
    $1 = HEAP32[$__ninp_$i$i$i$i>>2]|0;
    $__einp_$i$i$i$i = (($0) + 16|0);
    $2 = HEAP32[$__einp_$i$i$i$i>>2]|0;
    $cmp$i$i$i$i = ($1|0)==($2|0);
    if ($cmp$i$i$i$i) {
     $vtable$i$i$i$i = HEAP32[$0>>2]|0;
     $vfn$i$i$i$i = (($vtable$i$i$i$i) + 36|0);
     $3 = HEAP32[$vfn$i$i$i$i>>2]|0;
     $call$i$i$i$i = (FUNCTION_TABLE_ii[$3 & 511]($0)|0);
     $retval$0$i$i$i$i = $call$i$i$i$i;
    } else {
     $4 = HEAP32[$1>>2]|0;
     $retval$0$i$i$i$i = $4;
    }
    $cmp$i1$i$i$i = ($retval$0$i$i$i$i|0)==(-1);
    if ($cmp$i1$i$i$i) {
     HEAP32[$__b>>2] = 0;
     $30 = 1;
     break;
    } else {
     $$pre$i$i$i = HEAP32[$__b>>2]|0;
     $phitmp$i$i$i = ($$pre$i$i$i|0)==(0|0);
     $30 = $phitmp$i$i$i;
     break;
    }
   }
  } while(0);
  $5 = HEAP32[$__e>>2]|0;
  $tobool$i2$i$i = ($5|0)==(0|0);
  do {
   if ($tobool$i2$i$i) {
    label = 15;
   } else {
    $__ninp_$i$i3$i$i = (($5) + 12|0);
    $6 = HEAP32[$__ninp_$i$i3$i$i>>2]|0;
    $__einp_$i$i4$i$i = (($5) + 16|0);
    $7 = HEAP32[$__einp_$i$i4$i$i>>2]|0;
    $cmp$i$i5$i$i = ($6|0)==($7|0);
    if ($cmp$i$i5$i$i) {
     $vtable$i$i7$i$i = HEAP32[$5>>2]|0;
     $vfn$i$i8$i$i = (($vtable$i$i7$i$i) + 36|0);
     $8 = HEAP32[$vfn$i$i8$i$i>>2]|0;
     $call$i$i9$i$i = (FUNCTION_TABLE_ii[$8 & 511]($5)|0);
     $retval$0$i$i12$i$i = $call$i$i9$i$i;
    } else {
     $9 = HEAP32[$6>>2]|0;
     $retval$0$i$i12$i$i = $9;
    }
    $cmp$i1$i13$i$i = ($retval$0$i$i12$i$i|0)==(-1);
    if ($cmp$i1$i13$i$i) {
     HEAP32[$__e>>2] = 0;
     label = 15;
     break;
    } else {
     if ($30) {
      $31 = $5;
      break;
     } else {
      $$pre$i15$i$i46 = $5;
      break L1;
     }
    }
   }
  } while(0);
  if ((label|0) == 15) {
   label = 0;
   if ($30) {
    $$pre$i15$i$i46 = 0;
    break;
   } else {
    $31 = 0;
   }
  }
  $10 = HEAP32[$__b>>2]|0;
  $__ninp_$i$i = (($10) + 12|0);
  $11 = HEAP32[$__ninp_$i$i>>2]|0;
  $__einp_$i$i = (($10) + 16|0);
  $12 = HEAP32[$__einp_$i$i>>2]|0;
  $cmp$i$i = ($11|0)==($12|0);
  if ($cmp$i$i) {
   $vtable$i$i = HEAP32[$10>>2]|0;
   $vfn$i$i = (($vtable$i$i) + 36|0);
   $13 = HEAP32[$vfn$i$i>>2]|0;
   $call$i$i = (FUNCTION_TABLE_ii[$13 & 511]($10)|0);
   $retval$0$i$i = $call$i$i;
  } else {
   $14 = HEAP32[$11>>2]|0;
   $retval$0$i$i = $14;
  }
  $vtable$i = HEAP32[$__ct>>2]|0;
  $vfn$i = (($vtable$i) + 12|0);
  $15 = HEAP32[$vfn$i>>2]|0;
  $call$i = (FUNCTION_TABLE_iiii[$15 & 511]($__ct,8192,$retval$0$i$i)|0);
  if (!($call$i)) {
   $$pre$i15$i$i46 = $31;
   break;
  }
  $16 = HEAP32[$__b>>2]|0;
  $__ninp_$i$i5 = (($16) + 12|0);
  $17 = HEAP32[$__ninp_$i$i5>>2]|0;
  $__einp_$i$i6 = (($16) + 16|0);
  $18 = HEAP32[$__einp_$i$i6>>2]|0;
  $cmp$i$i7 = ($17|0)==($18|0);
  if ($cmp$i$i7) {
   $vtable$i$i8 = HEAP32[$16>>2]|0;
   $vfn$i$i9 = (($vtable$i$i8) + 40|0);
   $19 = HEAP32[$vfn$i$i9>>2]|0;
   (FUNCTION_TABLE_ii[$19 & 511]($16)|0);
   continue;
  } else {
   $incdec$ptr$i$i = (($17) + 4|0);
   HEAP32[$__ninp_$i$i5>>2] = $incdec$ptr$i$i;
   continue;
  }
 }
 $20 = HEAP32[$__b>>2]|0;
 $tobool$i$i$i14 = ($20|0)==(0|0);
 do {
  if ($tobool$i$i$i14) {
   $32 = 1;
  } else {
   $__ninp_$i$i$i$i15 = (($20) + 12|0);
   $21 = HEAP32[$__ninp_$i$i$i$i15>>2]|0;
   $__einp_$i$i$i$i16 = (($20) + 16|0);
   $22 = HEAP32[$__einp_$i$i$i$i16>>2]|0;
   $cmp$i$i$i$i17 = ($21|0)==($22|0);
   if ($cmp$i$i$i$i17) {
    $vtable$i$i$i$i19 = HEAP32[$20>>2]|0;
    $vfn$i$i$i$i20 = (($vtable$i$i$i$i19) + 36|0);
    $23 = HEAP32[$vfn$i$i$i$i20>>2]|0;
    $call$i$i$i$i21 = (FUNCTION_TABLE_ii[$23 & 511]($20)|0);
    $retval$0$i$i$i$i24 = $call$i$i$i$i21;
   } else {
    $24 = HEAP32[$21>>2]|0;
    $retval$0$i$i$i$i24 = $24;
   }
   $cmp$i1$i$i$i25 = ($retval$0$i$i$i$i24|0)==(-1);
   if ($cmp$i1$i$i$i25) {
    HEAP32[$__b>>2] = 0;
    $32 = 1;
    break;
   } else {
    $$pre$i$i$i27 = HEAP32[$__b>>2]|0;
    $phitmp$i$i$i28 = ($$pre$i$i$i27|0)==(0|0);
    $32 = $phitmp$i$i$i28;
    break;
   }
  }
 } while(0);
 $tobool$i2$i$i32 = ($$pre$i15$i$i46|0)==(0|0);
 do {
  if ($tobool$i2$i$i32) {
   label = 37;
  } else {
   $__ninp_$i$i3$i$i34 = (($$pre$i15$i$i46) + 12|0);
   $25 = HEAP32[$__ninp_$i$i3$i$i34>>2]|0;
   $__einp_$i$i4$i$i35 = (($$pre$i15$i$i46) + 16|0);
   $26 = HEAP32[$__einp_$i$i4$i$i35>>2]|0;
   $cmp$i$i5$i$i36 = ($25|0)==($26|0);
   if ($cmp$i$i5$i$i36) {
    $vtable$i$i7$i$i38 = HEAP32[$$pre$i15$i$i46>>2]|0;
    $vfn$i$i8$i$i39 = (($vtable$i$i7$i$i38) + 36|0);
    $27 = HEAP32[$vfn$i$i8$i$i39>>2]|0;
    $call$i$i9$i$i40 = (FUNCTION_TABLE_ii[$27 & 511]($$pre$i15$i$i46)|0);
    $retval$0$i$i12$i$i43 = $call$i$i9$i$i40;
   } else {
    $28 = HEAP32[$25>>2]|0;
    $retval$0$i$i12$i$i43 = $28;
   }
   $cmp$i1$i13$i$i44 = ($retval$0$i$i12$i$i43|0)==(-1);
   if ($cmp$i1$i13$i$i44) {
    HEAP32[$__e>>2] = 0;
    label = 37;
    break;
   }
   if ($32) {
    STACKTOP = sp;return;
   }
  }
 } while(0);
 if ((label|0) == 37) {
  if (!($32)) {
   STACKTOP = sp;return;
  }
 }
 $29 = HEAP32[$__err>>2]|0;
 $or = $29 | 2;
 HEAP32[$__err>>2] = $or;
 STACKTOP = sp;return;
}
function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11__get_am_pmERiRS4_S4_RjRKNS_5ctypeIwEE($this,$__h,$__b,$__e,$__err,$__ct) {
 $this = $this|0;
 $__h = $__h|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__err = $__err|0;
 $__ct = $__ct|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__size_$i2$i = 0, $__size_$i2$i13 = 0, $add = 0, $add$ptr = 0, $add$ptr5 = 0, $add14 = 0, $agg$tmp = 0, $agg$tmp$byval_copy = 0, $and$i$i = 0;
 var $and$i$i11 = 0, $arrayidx3 = 0, $call = 0, $call6 = 0, $cmp = 0, $cmp12 = 0, $cmp8 = 0, $cond$i = 0, $cond$i18 = 0, $conv$i$i = 0, $conv$i$i15 = 0, $or = 0, $shr1$i$i = 0, $shr1$i$i16 = 0, $sub$ptr$lhs$cast = 0, $sub$ptr$rhs$cast = 0, $sub$ptr$sub = 0, $tobool$i$i = 0, $tobool$i$i12 = 0, $vfn = 0;
 var $vtable = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $agg$tmp$byval_copy = sp + 4|0;
 $agg$tmp = sp;
 $add$ptr = (($this) + 8|0);
 $vtable = HEAP32[$add$ptr>>2]|0;
 $vfn = (($vtable) + 8|0);
 $0 = HEAP32[$vfn>>2]|0;
 $call = (FUNCTION_TABLE_ii[$0 & 511]($add$ptr)|0);
 $1 = HEAP8[$call>>0]|0;
 $and$i$i = $1 & 1;
 $tobool$i$i = ($and$i$i<<24>>24)==(0);
 if ($tobool$i$i) {
  $conv$i$i = $1&255;
  $shr1$i$i = $conv$i$i >>> 1;
  $cond$i = $shr1$i$i;
 } else {
  $__size_$i2$i = (($call) + 4|0);
  $2 = HEAP32[$__size_$i2$i>>2]|0;
  $cond$i = $2;
 }
 $arrayidx3 = (($call) + 12|0);
 $3 = HEAP8[$arrayidx3>>0]|0;
 $and$i$i11 = $3 & 1;
 $tobool$i$i12 = ($and$i$i11<<24>>24)==(0);
 if ($tobool$i$i12) {
  $conv$i$i15 = $3&255;
  $shr1$i$i16 = $conv$i$i15 >>> 1;
  $cond$i18 = $shr1$i$i16;
 } else {
  $__size_$i2$i13 = (($call) + 16|0);
  $4 = HEAP32[$__size_$i2$i13>>2]|0;
  $cond$i18 = $4;
 }
 $add = (0 - ($cond$i18))|0;
 $cmp = ($cond$i|0)==($add|0);
 if ($cmp) {
  $5 = HEAP32[$__err>>2]|0;
  $or = $5 | 4;
  HEAP32[$__err>>2] = $or;
  STACKTOP = sp;return;
 }
 $6 = HEAP32[$__e>>2]|0;
 HEAP32[$agg$tmp>>2] = $6;
 $add$ptr5 = (($call) + 24|0);
 ;HEAP32[$agg$tmp$byval_copy+0>>2]=HEAP32[$agg$tmp+0>>2]|0;
 $call6 = (__ZNSt3__114__scan_keywordINS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEPKNS_12basic_stringIwS3_NS_9allocatorIwEEEENS_5ctypeIwEEEET0_RT_SE_SD_SD_RKT1_Rjb($__b,$agg$tmp$byval_copy,$call,$add$ptr5,$__ct,$__err,0)|0);
 $sub$ptr$lhs$cast = $call6;
 $sub$ptr$rhs$cast = $call;
 $sub$ptr$sub = (($sub$ptr$lhs$cast) - ($sub$ptr$rhs$cast))|0;
 $7 = ($call6|0)==($call|0);
 if ($7) {
  $8 = HEAP32[$__h>>2]|0;
  $cmp8 = ($8|0)==(12);
  if ($cmp8) {
   HEAP32[$__h>>2] = 0;
   STACKTOP = sp;return;
  }
 }
 $9 = ($sub$ptr$sub|0)==(12);
 if (!($9)) {
  STACKTOP = sp;return;
 }
 $10 = HEAP32[$__h>>2]|0;
 $cmp12 = ($10|0)<(12);
 if (!($cmp12)) {
  STACKTOP = sp;return;
 }
 $add14 = (($10) + 12)|0;
 HEAP32[$__h>>2] = $add14;
 STACKTOP = sp;return;
}
function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE12__get_secondERiRS4_S4_RjRKNS_5ctypeIwEE($this,$__s,$__b,$__e,$__err,$__ct) {
 $this = $this|0;
 $__s = $__s|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__err = $__err|0;
 $__ct = $__ct|0;
 var $0 = 0, $1 = 0, $agg$tmp = 0, $agg$tmp$byval_copy = 0, $and = 0, $call = 0, $cmp = 0, $or = 0, $or$cond = 0, $tobool = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $agg$tmp$byval_copy = sp + 4|0;
 $agg$tmp = sp;
 $0 = HEAP32[$__e>>2]|0;
 HEAP32[$agg$tmp>>2] = $0;
 ;HEAP32[$agg$tmp$byval_copy+0>>2]=HEAP32[$agg$tmp+0>>2]|0;
 $call = (__ZNSt3__120__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$agg$tmp$byval_copy,$__err,$__ct,2)|0);
 $1 = HEAP32[$__err>>2]|0;
 $and = $1 & 4;
 $tobool = ($and|0)==(0);
 $cmp = ($call|0)<(61);
 $or$cond = $tobool & $cmp;
 if ($or$cond) {
  HEAP32[$__s>>2] = $call;
  STACKTOP = sp;return;
 } else {
  $or = $1 | 4;
  HEAP32[$__err>>2] = $or;
  STACKTOP = sp;return;
 }
}
function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE13__get_weekdayERiRS4_S4_RjRKNS_5ctypeIwEE($this,$__w,$__b,$__e,$__err,$__ct) {
 $this = $this|0;
 $__w = $__w|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__err = $__err|0;
 $__ct = $__ct|0;
 var $0 = 0, $1 = 0, $agg$tmp = 0, $agg$tmp$byval_copy = 0, $and = 0, $call = 0, $cmp = 0, $or = 0, $or$cond = 0, $tobool = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $agg$tmp$byval_copy = sp + 4|0;
 $agg$tmp = sp;
 $0 = HEAP32[$__e>>2]|0;
 HEAP32[$agg$tmp>>2] = $0;
 ;HEAP32[$agg$tmp$byval_copy+0>>2]=HEAP32[$agg$tmp+0>>2]|0;
 $call = (__ZNSt3__120__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$agg$tmp$byval_copy,$__err,$__ct,1)|0);
 $1 = HEAP32[$__err>>2]|0;
 $and = $1 & 4;
 $tobool = ($and|0)==(0);
 $cmp = ($call|0)<(7);
 $or$cond = $tobool & $cmp;
 if ($or$cond) {
  HEAP32[$__w>>2] = $call;
  STACKTOP = sp;return;
 } else {
  $or = $1 | 4;
  HEAP32[$__err>>2] = $or;
  STACKTOP = sp;return;
 }
}
function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11__get_year4ERiRS4_S4_RjRKNS_5ctypeIwEE($this,$__y,$__b,$__e,$__err,$__ct) {
 $this = $this|0;
 $__y = $__y|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__err = $__err|0;
 $__ct = $__ct|0;
 var $0 = 0, $1 = 0, $agg$tmp = 0, $agg$tmp$byval_copy = 0, $and = 0, $call = 0, $sub = 0, $tobool = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $agg$tmp$byval_copy = sp + 4|0;
 $agg$tmp = sp;
 $0 = HEAP32[$__e>>2]|0;
 HEAP32[$agg$tmp>>2] = $0;
 ;HEAP32[$agg$tmp$byval_copy+0>>2]=HEAP32[$agg$tmp+0>>2]|0;
 $call = (__ZNSt3__120__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$agg$tmp$byval_copy,$__err,$__ct,4)|0);
 $1 = HEAP32[$__err>>2]|0;
 $and = $1 & 4;
 $tobool = ($and|0)==(0);
 if (!($tobool)) {
  STACKTOP = sp;return;
 }
 $sub = (($call) + -1900)|0;
 HEAP32[$__y>>2] = $sub;
 STACKTOP = sp;return;
}
function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE13__get_percentERS4_S4_RjRKNS_5ctypeIwEE($this,$__b,$__e,$__err,$__ct) {
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__err = $__err|0;
 $__ct = $__ct|0;
 var $$pre$i$i$i = 0, $$pre$i$i$i29 = 0, $$pre$i15$i$i4856 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__einp_$i$i = 0, $__einp_$i$i$i$i = 0, $__einp_$i$i$i$i18 = 0;
 var $__einp_$i$i4$i$i = 0, $__einp_$i$i4$i$i37 = 0, $__einp_$i$i8 = 0, $__ninp_$i$i = 0, $__ninp_$i$i$i$i = 0, $__ninp_$i$i$i$i17 = 0, $__ninp_$i$i3$i$i = 0, $__ninp_$i$i3$i$i36 = 0, $__ninp_$i$i7 = 0, $call$i = 0, $call$i$i = 0, $call$i$i$i$i = 0, $call$i$i$i$i23 = 0, $call$i$i9$i$i = 0, $call$i$i9$i$i42 = 0, $cmp = 0, $cmp$i$i$i$i = 0, $cmp$i$i$i$i19 = 0, $cmp$i$i5 = 0, $cmp$i$i5$i$i = 0;
 var $cmp$i$i5$i$i38 = 0, $cmp$i$i9 = 0, $cmp$i1$i$i$i = 0, $cmp$i1$i$i$i27 = 0, $cmp$i1$i13$i$i = 0, $cmp$i1$i13$i$i46 = 0, $incdec$ptr$i$i = 0, $or = 0, $or5 = 0, $or9 = 0, $phitmp$i$i$i = 0, $phitmp$i$i$i30 = 0, $retval$0$i$i = 0, $retval$0$i$i$i$i = 0, $retval$0$i$i$i$i26 = 0, $retval$0$i$i12$i$i = 0, $retval$0$i$i12$i$i45 = 0, $tobool$i$i$i = 0, $tobool$i$i$i16 = 0, $tobool$i2$i$i = 0;
 var $tobool$i2$i$i34 = 0, $vfn$i = 0, $vfn$i$i = 0, $vfn$i$i$i$i = 0, $vfn$i$i$i$i22 = 0, $vfn$i$i11 = 0, $vfn$i$i8$i$i = 0, $vfn$i$i8$i$i41 = 0, $vtable$i = 0, $vtable$i$i = 0, $vtable$i$i$i$i = 0, $vtable$i$i$i$i21 = 0, $vtable$i$i10 = 0, $vtable$i$i7$i$i = 0, $vtable$i$i7$i$i40 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$__b>>2]|0;
 $tobool$i$i$i = ($0|0)==(0|0);
 do {
  if ($tobool$i$i$i) {
   $32 = 1;
  } else {
   $__ninp_$i$i$i$i = (($0) + 12|0);
   $1 = HEAP32[$__ninp_$i$i$i$i>>2]|0;
   $__einp_$i$i$i$i = (($0) + 16|0);
   $2 = HEAP32[$__einp_$i$i$i$i>>2]|0;
   $cmp$i$i$i$i = ($1|0)==($2|0);
   if ($cmp$i$i$i$i) {
    $vtable$i$i$i$i = HEAP32[$0>>2]|0;
    $vfn$i$i$i$i = (($vtable$i$i$i$i) + 36|0);
    $3 = HEAP32[$vfn$i$i$i$i>>2]|0;
    $call$i$i$i$i = (FUNCTION_TABLE_ii[$3 & 511]($0)|0);
    $retval$0$i$i$i$i = $call$i$i$i$i;
   } else {
    $4 = HEAP32[$1>>2]|0;
    $retval$0$i$i$i$i = $4;
   }
   $cmp$i1$i$i$i = ($retval$0$i$i$i$i|0)==(-1);
   if ($cmp$i1$i$i$i) {
    HEAP32[$__b>>2] = 0;
    $32 = 1;
    break;
   } else {
    $$pre$i$i$i = HEAP32[$__b>>2]|0;
    $phitmp$i$i$i = ($$pre$i$i$i|0)==(0|0);
    $32 = $phitmp$i$i$i;
    break;
   }
  }
 } while(0);
 $5 = HEAP32[$__e>>2]|0;
 $tobool$i2$i$i = ($5|0)==(0|0);
 do {
  if ($tobool$i2$i$i) {
   label = 14;
  } else {
   $__ninp_$i$i3$i$i = (($5) + 12|0);
   $6 = HEAP32[$__ninp_$i$i3$i$i>>2]|0;
   $__einp_$i$i4$i$i = (($5) + 16|0);
   $7 = HEAP32[$__einp_$i$i4$i$i>>2]|0;
   $cmp$i$i5$i$i = ($6|0)==($7|0);
   if ($cmp$i$i5$i$i) {
    $vtable$i$i7$i$i = HEAP32[$5>>2]|0;
    $vfn$i$i8$i$i = (($vtable$i$i7$i$i) + 36|0);
    $8 = HEAP32[$vfn$i$i8$i$i>>2]|0;
    $call$i$i9$i$i = (FUNCTION_TABLE_ii[$8 & 511]($5)|0);
    $retval$0$i$i12$i$i = $call$i$i9$i$i;
   } else {
    $9 = HEAP32[$6>>2]|0;
    $retval$0$i$i12$i$i = $9;
   }
   $cmp$i1$i13$i$i = ($retval$0$i$i12$i$i|0)==(-1);
   if ($cmp$i1$i13$i$i) {
    HEAP32[$__e>>2] = 0;
    label = 14;
    break;
   } else {
    if ($32) {
     $$pre$i15$i$i4856 = $5;
     break;
    } else {
     label = 16;
     break;
    }
   }
  }
 } while(0);
 if ((label|0) == 14) {
  if ($32) {
   label = 16;
  } else {
   $$pre$i15$i$i4856 = 0;
  }
 }
 if ((label|0) == 16) {
  $10 = HEAP32[$__err>>2]|0;
  $or = $10 | 6;
  HEAP32[$__err>>2] = $or;
  STACKTOP = sp;return;
 }
 $11 = HEAP32[$__b>>2]|0;
 $__ninp_$i$i = (($11) + 12|0);
 $12 = HEAP32[$__ninp_$i$i>>2]|0;
 $__einp_$i$i = (($11) + 16|0);
 $13 = HEAP32[$__einp_$i$i>>2]|0;
 $cmp$i$i5 = ($12|0)==($13|0);
 if ($cmp$i$i5) {
  $vtable$i$i = HEAP32[$11>>2]|0;
  $vfn$i$i = (($vtable$i$i) + 36|0);
  $14 = HEAP32[$vfn$i$i>>2]|0;
  $call$i$i = (FUNCTION_TABLE_ii[$14 & 511]($11)|0);
  $retval$0$i$i = $call$i$i;
 } else {
  $15 = HEAP32[$12>>2]|0;
  $retval$0$i$i = $15;
 }
 $vtable$i = HEAP32[$__ct>>2]|0;
 $vfn$i = (($vtable$i) + 52|0);
 $16 = HEAP32[$vfn$i>>2]|0;
 $call$i = (FUNCTION_TABLE_iiii[$16 & 511]($__ct,$retval$0$i$i,0)|0);
 $cmp = ($call$i<<24>>24)==(37);
 if (!($cmp)) {
  $17 = HEAP32[$__err>>2]|0;
  $or5 = $17 | 4;
  HEAP32[$__err>>2] = $or5;
  STACKTOP = sp;return;
 }
 $18 = HEAP32[$__b>>2]|0;
 $__ninp_$i$i7 = (($18) + 12|0);
 $19 = HEAP32[$__ninp_$i$i7>>2]|0;
 $__einp_$i$i8 = (($18) + 16|0);
 $20 = HEAP32[$__einp_$i$i8>>2]|0;
 $cmp$i$i9 = ($19|0)==($20|0);
 if ($cmp$i$i9) {
  $vtable$i$i10 = HEAP32[$18>>2]|0;
  $vfn$i$i11 = (($vtable$i$i10) + 40|0);
  $21 = HEAP32[$vfn$i$i11>>2]|0;
  (FUNCTION_TABLE_ii[$21 & 511]($18)|0);
 } else {
  $incdec$ptr$i$i = (($19) + 4|0);
  HEAP32[$__ninp_$i$i7>>2] = $incdec$ptr$i$i;
 }
 $22 = HEAP32[$__b>>2]|0;
 $tobool$i$i$i16 = ($22|0)==(0|0);
 do {
  if ($tobool$i$i$i16) {
   $33 = 1;
  } else {
   $__ninp_$i$i$i$i17 = (($22) + 12|0);
   $23 = HEAP32[$__ninp_$i$i$i$i17>>2]|0;
   $__einp_$i$i$i$i18 = (($22) + 16|0);
   $24 = HEAP32[$__einp_$i$i$i$i18>>2]|0;
   $cmp$i$i$i$i19 = ($23|0)==($24|0);
   if ($cmp$i$i$i$i19) {
    $vtable$i$i$i$i21 = HEAP32[$22>>2]|0;
    $vfn$i$i$i$i22 = (($vtable$i$i$i$i21) + 36|0);
    $25 = HEAP32[$vfn$i$i$i$i22>>2]|0;
    $call$i$i$i$i23 = (FUNCTION_TABLE_ii[$25 & 511]($22)|0);
    $retval$0$i$i$i$i26 = $call$i$i$i$i23;
   } else {
    $26 = HEAP32[$23>>2]|0;
    $retval$0$i$i$i$i26 = $26;
   }
   $cmp$i1$i$i$i27 = ($retval$0$i$i$i$i26|0)==(-1);
   if ($cmp$i1$i$i$i27) {
    HEAP32[$__b>>2] = 0;
    $33 = 1;
    break;
   } else {
    $$pre$i$i$i29 = HEAP32[$__b>>2]|0;
    $phitmp$i$i$i30 = ($$pre$i$i$i29|0)==(0|0);
    $33 = $phitmp$i$i$i30;
    break;
   }
  }
 } while(0);
 $tobool$i2$i$i34 = ($$pre$i15$i$i4856|0)==(0|0);
 do {
  if ($tobool$i2$i$i34) {
   label = 38;
  } else {
   $__ninp_$i$i3$i$i36 = (($$pre$i15$i$i4856) + 12|0);
   $27 = HEAP32[$__ninp_$i$i3$i$i36>>2]|0;
   $__einp_$i$i4$i$i37 = (($$pre$i15$i$i4856) + 16|0);
   $28 = HEAP32[$__einp_$i$i4$i$i37>>2]|0;
   $cmp$i$i5$i$i38 = ($27|0)==($28|0);
   if ($cmp$i$i5$i$i38) {
    $vtable$i$i7$i$i40 = HEAP32[$$pre$i15$i$i4856>>2]|0;
    $vfn$i$i8$i$i41 = (($vtable$i$i7$i$i40) + 36|0);
    $29 = HEAP32[$vfn$i$i8$i$i41>>2]|0;
    $call$i$i9$i$i42 = (FUNCTION_TABLE_ii[$29 & 511]($$pre$i15$i$i4856)|0);
    $retval$0$i$i12$i$i45 = $call$i$i9$i$i42;
   } else {
    $30 = HEAP32[$27>>2]|0;
    $retval$0$i$i12$i$i45 = $30;
   }
   $cmp$i1$i13$i$i46 = ($retval$0$i$i12$i$i45|0)==(-1);
   if ($cmp$i1$i13$i$i46) {
    HEAP32[$__e>>2] = 0;
    label = 38;
    break;
   }
   if ($33) {
    STACKTOP = sp;return;
   }
  }
 } while(0);
 if ((label|0) == 38) {
  if (!($33)) {
   STACKTOP = sp;return;
  }
 }
 $31 = HEAP32[$__err>>2]|0;
 $or9 = $31 | 2;
 HEAP32[$__err>>2] = $or9;
 STACKTOP = sp;return;
}
function __ZNSt3__120__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$__e,$__err,$__ct,$__n) {
 $__b = $__b|0;
 $__e = $__e|0;
 $__err = $__err|0;
 $__ct = $__ct|0;
 $__n = $__n|0;
 var $$pre$i$i$i = 0, $$pre$i$i$i110 = 0, $$pre$i$i$i44 = 0, $$pre$i15$i$i129 = 0, $$pre$i15$i$i63 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__einp_$i$i = 0, $__einp_$i$i$i$i = 0, $__einp_$i$i$i$i33 = 0, $__einp_$i$i$i$i99 = 0, $__einp_$i$i23 = 0, $__einp_$i$i4$i$i = 0, $__einp_$i$i4$i$i118 = 0, $__einp_$i$i4$i$i52 = 0, $__einp_$i$i70 = 0, $__einp_$i$i87 = 0, $__n$addr$0 = 0, $__n$addr$0$in = 0, $__ninp_$i$i = 0, $__ninp_$i$i$i$i = 0, $__ninp_$i$i$i$i32 = 0, $__ninp_$i$i$i$i98 = 0;
 var $__ninp_$i$i22 = 0, $__ninp_$i$i3$i$i = 0, $__ninp_$i$i3$i$i117 = 0, $__ninp_$i$i3$i$i51 = 0, $__ninp_$i$i69 = 0, $__ninp_$i$i86 = 0, $__r$0 = 0, $__r$0$in = 0, $add = 0, $call$i = 0, $call$i$i = 0, $call$i$i$i$i = 0, $call$i$i$i$i104 = 0, $call$i$i$i$i38 = 0, $call$i$i74 = 0, $call$i$i9$i$i = 0, $call$i$i9$i$i123 = 0, $call$i$i9$i$i57 = 0, $call$i20 = 0, $call$i81 = 0;
 var $call$i84 = 0, $cmp = 0, $cmp$ = 0, $cmp$i$i$i$i = 0, $cmp$i$i$i$i100 = 0, $cmp$i$i$i$i34 = 0, $cmp$i$i17 = 0, $cmp$i$i24 = 0, $cmp$i$i5$i$i = 0, $cmp$i$i5$i$i119 = 0, $cmp$i$i5$i$i53 = 0, $cmp$i$i71 = 0, $cmp$i$i88 = 0, $cmp$i1$i$i$i = 0, $cmp$i1$i$i$i108 = 0, $cmp$i1$i$i$i42 = 0, $cmp$i1$i13$i$i = 0, $cmp$i1$i13$i$i127 = 0, $cmp$i1$i13$i$i61 = 0, $cmptmp$i$i67 = 0;
 var $conv = 0, $conv14 = 0, $incdec$ptr$i$i = 0, $incdec$ptr$i$i93 = 0, $mul = 0, $or = 0, $or20 = 0, $or4 = 0, $phitmp$i$i$i = 0, $phitmp$i$i$i111 = 0, $phitmp$i$i$i45 = 0, $phitmp$i16$i$i64 = 0, $retval$0 = 0, $retval$0$i$i = 0, $retval$0$i$i$i$i = 0, $retval$0$i$i$i$i107 = 0, $retval$0$i$i$i$i41 = 0, $retval$0$i$i12$i$i = 0, $retval$0$i$i12$i$i126 = 0, $retval$0$i$i12$i$i60 = 0;
 var $retval$0$i$i77 = 0, $tobool$i$i$i = 0, $tobool$i$i$i31 = 0, $tobool$i$i$i97 = 0, $tobool$i2$i$i = 0, $tobool$i2$i$i115 = 0, $tobool$i2$i$i49 = 0, $vfn$i = 0, $vfn$i$i = 0, $vfn$i$i$i$i = 0, $vfn$i$i$i$i103 = 0, $vfn$i$i$i$i37 = 0, $vfn$i$i26 = 0, $vfn$i$i73 = 0, $vfn$i$i8$i$i = 0, $vfn$i$i8$i$i122 = 0, $vfn$i$i8$i$i56 = 0, $vfn$i$i90 = 0, $vfn$i19 = 0, $vfn$i80 = 0;
 var $vfn$i83 = 0, $vtable$i = 0, $vtable$i$i = 0, $vtable$i$i$i$i = 0, $vtable$i$i$i$i102 = 0, $vtable$i$i$i$i36 = 0, $vtable$i$i25 = 0, $vtable$i$i7$i$i = 0, $vtable$i$i7$i$i121 = 0, $vtable$i$i7$i$i55 = 0, $vtable$i$i72 = 0, $vtable$i$i89 = 0, $vtable$i18 = 0, $vtable$i79 = 0, $vtable$i82 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$__b>>2]|0;
 $tobool$i$i$i = ($0|0)==(0|0);
 do {
  if ($tobool$i$i$i) {
   $55 = 1;
  } else {
   $__ninp_$i$i$i$i = (($0) + 12|0);
   $1 = HEAP32[$__ninp_$i$i$i$i>>2]|0;
   $__einp_$i$i$i$i = (($0) + 16|0);
   $2 = HEAP32[$__einp_$i$i$i$i>>2]|0;
   $cmp$i$i$i$i = ($1|0)==($2|0);
   if ($cmp$i$i$i$i) {
    $vtable$i$i$i$i = HEAP32[$0>>2]|0;
    $vfn$i$i$i$i = (($vtable$i$i$i$i) + 36|0);
    $3 = HEAP32[$vfn$i$i$i$i>>2]|0;
    $call$i$i$i$i = (FUNCTION_TABLE_ii[$3 & 511]($0)|0);
    $retval$0$i$i$i$i = $call$i$i$i$i;
   } else {
    $4 = HEAP32[$1>>2]|0;
    $retval$0$i$i$i$i = $4;
   }
   $cmp$i1$i$i$i = ($retval$0$i$i$i$i|0)==(-1);
   if ($cmp$i1$i$i$i) {
    HEAP32[$__b>>2] = 0;
    $55 = 1;
    break;
   } else {
    $$pre$i$i$i = HEAP32[$__b>>2]|0;
    $phitmp$i$i$i = ($$pre$i$i$i|0)==(0|0);
    $55 = $phitmp$i$i$i;
    break;
   }
  }
 } while(0);
 $5 = HEAP32[$__e>>2]|0;
 $tobool$i2$i$i = ($5|0)==(0|0);
 do {
  if ($tobool$i2$i$i) {
   label = 14;
  } else {
   $__ninp_$i$i3$i$i = (($5) + 12|0);
   $6 = HEAP32[$__ninp_$i$i3$i$i>>2]|0;
   $__einp_$i$i4$i$i = (($5) + 16|0);
   $7 = HEAP32[$__einp_$i$i4$i$i>>2]|0;
   $cmp$i$i5$i$i = ($6|0)==($7|0);
   if ($cmp$i$i5$i$i) {
    $vtable$i$i7$i$i = HEAP32[$5>>2]|0;
    $vfn$i$i8$i$i = (($vtable$i$i7$i$i) + 36|0);
    $8 = HEAP32[$vfn$i$i8$i$i>>2]|0;
    $call$i$i9$i$i = (FUNCTION_TABLE_ii[$8 & 511]($5)|0);
    $retval$0$i$i12$i$i = $call$i$i9$i$i;
   } else {
    $9 = HEAP32[$6>>2]|0;
    $retval$0$i$i12$i$i = $9;
   }
   $cmp$i1$i13$i$i = ($retval$0$i$i12$i$i|0)==(-1);
   if ($cmp$i1$i13$i$i) {
    HEAP32[$__e>>2] = 0;
    label = 14;
    break;
   } else {
    if ($55) {
     $56 = $5;
     break;
    } else {
     label = 16;
     break;
    }
   }
  }
 } while(0);
 if ((label|0) == 14) {
  if ($55) {
   label = 16;
  } else {
   $56 = 0;
  }
 }
 if ((label|0) == 16) {
  $10 = HEAP32[$__err>>2]|0;
  $or = $10 | 6;
  HEAP32[$__err>>2] = $or;
  $retval$0 = 0;
  STACKTOP = sp;return ($retval$0|0);
 }
 $11 = HEAP32[$__b>>2]|0;
 $__ninp_$i$i = (($11) + 12|0);
 $12 = HEAP32[$__ninp_$i$i>>2]|0;
 $__einp_$i$i = (($11) + 16|0);
 $13 = HEAP32[$__einp_$i$i>>2]|0;
 $cmp$i$i17 = ($12|0)==($13|0);
 if ($cmp$i$i17) {
  $vtable$i$i = HEAP32[$11>>2]|0;
  $vfn$i$i = (($vtable$i$i) + 36|0);
  $14 = HEAP32[$vfn$i$i>>2]|0;
  $call$i$i = (FUNCTION_TABLE_ii[$14 & 511]($11)|0);
  $retval$0$i$i = $call$i$i;
 } else {
  $15 = HEAP32[$12>>2]|0;
  $retval$0$i$i = $15;
 }
 $vtable$i = HEAP32[$__ct>>2]|0;
 $vfn$i = (($vtable$i) + 12|0);
 $16 = HEAP32[$vfn$i>>2]|0;
 $call$i = (FUNCTION_TABLE_iiii[$16 & 511]($__ct,2048,$retval$0$i$i)|0);
 if (!($call$i)) {
  $17 = HEAP32[$__err>>2]|0;
  $or4 = $17 | 4;
  HEAP32[$__err>>2] = $or4;
  $retval$0 = 0;
  STACKTOP = sp;return ($retval$0|0);
 }
 $vtable$i18 = HEAP32[$__ct>>2]|0;
 $vfn$i19 = (($vtable$i18) + 52|0);
 $18 = HEAP32[$vfn$i19>>2]|0;
 $call$i20 = (FUNCTION_TABLE_iiii[$18 & 511]($__ct,$retval$0$i$i,0)|0);
 $conv = $call$i20 << 24 >> 24;
 $19 = HEAP32[$__b>>2]|0;
 $__ninp_$i$i22 = (($19) + 12|0);
 $20 = HEAP32[$__ninp_$i$i22>>2]|0;
 $__einp_$i$i23 = (($19) + 16|0);
 $21 = HEAP32[$__einp_$i$i23>>2]|0;
 $cmp$i$i24 = ($20|0)==($21|0);
 if ($cmp$i$i24) {
  $vtable$i$i25 = HEAP32[$19>>2]|0;
  $vfn$i$i26 = (($vtable$i$i25) + 40|0);
  $22 = HEAP32[$vfn$i$i26>>2]|0;
  (FUNCTION_TABLE_ii[$22 & 511]($19)|0);
  $$pre$i15$i$i63 = $56;$28 = $56;$__n$addr$0$in = $__n;$__r$0$in = $conv;
 } else {
  $incdec$ptr$i$i = (($20) + 4|0);
  HEAP32[$__ninp_$i$i22>>2] = $incdec$ptr$i$i;
  $$pre$i15$i$i63 = $56;$28 = $56;$__n$addr$0$in = $__n;$__r$0$in = $conv;
 }
 while(1) {
  $__r$0 = (($__r$0$in) + -48)|0;
  $__n$addr$0 = (($__n$addr$0$in) + -1)|0;
  $23 = HEAP32[$__b>>2]|0;
  $tobool$i$i$i31 = ($23|0)==(0|0);
  do {
   if ($tobool$i$i$i31) {
    $33 = 1;
   } else {
    $__ninp_$i$i$i$i32 = (($23) + 12|0);
    $24 = HEAP32[$__ninp_$i$i$i$i32>>2]|0;
    $__einp_$i$i$i$i33 = (($23) + 16|0);
    $25 = HEAP32[$__einp_$i$i$i$i33>>2]|0;
    $cmp$i$i$i$i34 = ($24|0)==($25|0);
    if ($cmp$i$i$i$i34) {
     $vtable$i$i$i$i36 = HEAP32[$23>>2]|0;
     $vfn$i$i$i$i37 = (($vtable$i$i$i$i36) + 36|0);
     $26 = HEAP32[$vfn$i$i$i$i37>>2]|0;
     $call$i$i$i$i38 = (FUNCTION_TABLE_ii[$26 & 511]($23)|0);
     $retval$0$i$i$i$i41 = $call$i$i$i$i38;
    } else {
     $27 = HEAP32[$24>>2]|0;
     $retval$0$i$i$i$i41 = $27;
    }
    $cmp$i1$i$i$i42 = ($retval$0$i$i$i$i41|0)==(-1);
    if ($cmp$i1$i$i$i42) {
     HEAP32[$__b>>2] = 0;
     $33 = 1;
     break;
    } else {
     $$pre$i$i$i44 = HEAP32[$__b>>2]|0;
     $phitmp$i$i$i45 = ($$pre$i$i$i44|0)==(0|0);
     $33 = $phitmp$i$i$i45;
     break;
    }
   }
  } while(0);
  $tobool$i2$i$i49 = ($28|0)==(0|0);
  do {
   if ($tobool$i2$i$i49) {
    $$pre$i15$i$i129 = $$pre$i15$i$i63;$34 = 1;$57 = 0;
   } else {
    $__ninp_$i$i3$i$i51 = (($28) + 12|0);
    $29 = HEAP32[$__ninp_$i$i3$i$i51>>2]|0;
    $__einp_$i$i4$i$i52 = (($28) + 16|0);
    $30 = HEAP32[$__einp_$i$i4$i$i52>>2]|0;
    $cmp$i$i5$i$i53 = ($29|0)==($30|0);
    if ($cmp$i$i5$i$i53) {
     $vtable$i$i7$i$i55 = HEAP32[$28>>2]|0;
     $vfn$i$i8$i$i56 = (($vtable$i$i7$i$i55) + 36|0);
     $31 = HEAP32[$vfn$i$i8$i$i56>>2]|0;
     $call$i$i9$i$i57 = (FUNCTION_TABLE_ii[$31 & 511]($28)|0);
     $retval$0$i$i12$i$i60 = $call$i$i9$i$i57;
    } else {
     $32 = HEAP32[$29>>2]|0;
     $retval$0$i$i12$i$i60 = $32;
    }
    $cmp$i1$i13$i$i61 = ($retval$0$i$i12$i$i60|0)==(-1);
    if ($cmp$i1$i13$i$i61) {
     HEAP32[$__e>>2] = 0;
     $$pre$i15$i$i129 = 0;$34 = 1;$57 = 0;
     break;
    } else {
     $phitmp$i16$i$i64 = ($$pre$i15$i$i63|0)==(0|0);
     $$pre$i15$i$i129 = $$pre$i15$i$i63;$34 = $phitmp$i16$i$i64;$57 = $$pre$i15$i$i63;
     break;
    }
   }
  } while(0);
  $cmptmp$i$i67 = $33 ^ $34;
  $cmp = ($__n$addr$0|0)>(0);
  $cmp$ = $cmptmp$i$i67 & $cmp;
  $35 = HEAP32[$__b>>2]|0;
  if (!($cmp$)) {
   break;
  }
  $__ninp_$i$i69 = (($35) + 12|0);
  $36 = HEAP32[$__ninp_$i$i69>>2]|0;
  $__einp_$i$i70 = (($35) + 16|0);
  $37 = HEAP32[$__einp_$i$i70>>2]|0;
  $cmp$i$i71 = ($36|0)==($37|0);
  if ($cmp$i$i71) {
   $vtable$i$i72 = HEAP32[$35>>2]|0;
   $vfn$i$i73 = (($vtable$i$i72) + 36|0);
   $38 = HEAP32[$vfn$i$i73>>2]|0;
   $call$i$i74 = (FUNCTION_TABLE_ii[$38 & 511]($35)|0);
   $retval$0$i$i77 = $call$i$i74;
  } else {
   $39 = HEAP32[$36>>2]|0;
   $retval$0$i$i77 = $39;
  }
  $vtable$i79 = HEAP32[$__ct>>2]|0;
  $vfn$i80 = (($vtable$i79) + 12|0);
  $40 = HEAP32[$vfn$i80>>2]|0;
  $call$i81 = (FUNCTION_TABLE_iiii[$40 & 511]($__ct,2048,$retval$0$i$i77)|0);
  if (!($call$i81)) {
   $retval$0 = $__r$0;
   label = 63;
   break;
  }
  $mul = ($__r$0*10)|0;
  $vtable$i82 = HEAP32[$__ct>>2]|0;
  $vfn$i83 = (($vtable$i82) + 52|0);
  $41 = HEAP32[$vfn$i83>>2]|0;
  $call$i84 = (FUNCTION_TABLE_iiii[$41 & 511]($__ct,$retval$0$i$i77,0)|0);
  $conv14 = $call$i84 << 24 >> 24;
  $add = (($conv14) + ($mul))|0;
  $42 = HEAP32[$__b>>2]|0;
  $__ninp_$i$i86 = (($42) + 12|0);
  $43 = HEAP32[$__ninp_$i$i86>>2]|0;
  $__einp_$i$i87 = (($42) + 16|0);
  $44 = HEAP32[$__einp_$i$i87>>2]|0;
  $cmp$i$i88 = ($43|0)==($44|0);
  if ($cmp$i$i88) {
   $vtable$i$i89 = HEAP32[$42>>2]|0;
   $vfn$i$i90 = (($vtable$i$i89) + 40|0);
   $45 = HEAP32[$vfn$i$i90>>2]|0;
   (FUNCTION_TABLE_ii[$45 & 511]($42)|0);
   $$pre$i15$i$i63 = $$pre$i15$i$i129;$28 = $57;$__n$addr$0$in = $__n$addr$0;$__r$0$in = $add;
   continue;
  } else {
   $incdec$ptr$i$i93 = (($43) + 4|0);
   HEAP32[$__ninp_$i$i86>>2] = $incdec$ptr$i$i93;
   $$pre$i15$i$i63 = $$pre$i15$i$i129;$28 = $57;$__n$addr$0$in = $__n$addr$0;$__r$0$in = $add;
   continue;
  }
 }
 if ((label|0) == 63) {
  STACKTOP = sp;return ($retval$0|0);
 }
 $tobool$i$i$i97 = ($35|0)==(0|0);
 do {
  if ($tobool$i$i$i97) {
   $58 = 1;
  } else {
   $__ninp_$i$i$i$i98 = (($35) + 12|0);
   $46 = HEAP32[$__ninp_$i$i$i$i98>>2]|0;
   $__einp_$i$i$i$i99 = (($35) + 16|0);
   $47 = HEAP32[$__einp_$i$i$i$i99>>2]|0;
   $cmp$i$i$i$i100 = ($46|0)==($47|0);
   if ($cmp$i$i$i$i100) {
    $vtable$i$i$i$i102 = HEAP32[$35>>2]|0;
    $vfn$i$i$i$i103 = (($vtable$i$i$i$i102) + 36|0);
    $48 = HEAP32[$vfn$i$i$i$i103>>2]|0;
    $call$i$i$i$i104 = (FUNCTION_TABLE_ii[$48 & 511]($35)|0);
    $retval$0$i$i$i$i107 = $call$i$i$i$i104;
   } else {
    $49 = HEAP32[$46>>2]|0;
    $retval$0$i$i$i$i107 = $49;
   }
   $cmp$i1$i$i$i108 = ($retval$0$i$i$i$i107|0)==(-1);
   if ($cmp$i1$i$i$i108) {
    HEAP32[$__b>>2] = 0;
    $58 = 1;
    break;
   } else {
    $$pre$i$i$i110 = HEAP32[$__b>>2]|0;
    $phitmp$i$i$i111 = ($$pre$i$i$i110|0)==(0|0);
    $58 = $phitmp$i$i$i111;
    break;
   }
  }
 } while(0);
 $tobool$i2$i$i115 = ($$pre$i15$i$i129|0)==(0|0);
 do {
  if ($tobool$i2$i$i115) {
   label = 60;
  } else {
   $__ninp_$i$i3$i$i117 = (($$pre$i15$i$i129) + 12|0);
   $50 = HEAP32[$__ninp_$i$i3$i$i117>>2]|0;
   $__einp_$i$i4$i$i118 = (($$pre$i15$i$i129) + 16|0);
   $51 = HEAP32[$__einp_$i$i4$i$i118>>2]|0;
   $cmp$i$i5$i$i119 = ($50|0)==($51|0);
   if ($cmp$i$i5$i$i119) {
    $vtable$i$i7$i$i121 = HEAP32[$$pre$i15$i$i129>>2]|0;
    $vfn$i$i8$i$i122 = (($vtable$i$i7$i$i121) + 36|0);
    $52 = HEAP32[$vfn$i$i8$i$i122>>2]|0;
    $call$i$i9$i$i123 = (FUNCTION_TABLE_ii[$52 & 511]($$pre$i15$i$i129)|0);
    $retval$0$i$i12$i$i126 = $call$i$i9$i$i123;
   } else {
    $53 = HEAP32[$50>>2]|0;
    $retval$0$i$i12$i$i126 = $53;
   }
   $cmp$i1$i13$i$i127 = ($retval$0$i$i12$i$i126|0)==(-1);
   if ($cmp$i1$i13$i$i127) {
    HEAP32[$__e>>2] = 0;
    label = 60;
    break;
   }
   if ($58) {
    $retval$0 = $__r$0;
    STACKTOP = sp;return ($retval$0|0);
   }
  }
 } while(0);
 if ((label|0) == 60) {
  if (!($58)) {
   $retval$0 = $__r$0;
   STACKTOP = sp;return ($retval$0|0);
  }
 }
 $54 = HEAP32[$__err>>2]|0;
 $or20 = $54 | 2;
 HEAP32[$__err>>2] = $or20;
 $retval$0 = $__r$0;
 STACKTOP = sp;return ($retval$0|0);
}
function __ZNSt3__18time_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 8|0);
 __ZNSt3__110__time_putD2Ev($0);
 __ZdlPv($this);
 STACKTOP = sp;return;
}
function __ZNSt3__18time_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED1Ev($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 8|0);
 __ZNSt3__110__time_putD2Ev($0);
 STACKTOP = sp;return;
}
function __ZNSt3__110__time_putD2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $call = 0, $cmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$this>>2]|0;
 __THREW__ = 0;
 $call = (invoke_i(395)|0);
 $1 = __THREW__; __THREW__ = 0;
 $2 = $1&1;
 if (!($2)) {
  $cmp = ($0|0)==($call|0);
  if ($cmp) {
   STACKTOP = sp;return;
  }
  $3 = HEAP32[$this>>2]|0;
  __THREW__ = 0;
  invoke_vi(409,($3|0));
  $4 = __THREW__; __THREW__ = 0;
  $5 = $4&1;
  if (!($5)) {
   STACKTOP = sp;return;
  }
 }
 $6 = ___cxa_find_matching_catch(0|0)|0;
 $7 = tempRet0;
 ___clang_call_terminate($6);
 // unreachable;
}
function __ZNKSt3__18time_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcPK2tmcc($agg$result,$this,$__s,$0,$1,$__tm,$__fmt,$__mod) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__s = $__s|0;
 $0 = $0|0;
 $1 = $1|0;
 $__tm = $__tm|0;
 $__fmt = $__fmt|0;
 $__mod = $__mod|0;
 var $$$i = 0, $$6$i = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__eout_$i$i$i$i = 0, $__first$addr$04$i$i = 0, $__nar = 0, $__ne = 0, $__nout_$i$i$i$i = 0, $add$ptr = 0, $add$ptr3 = 0;
 var $call2$i$i$i$i = 0, $cmp$i$i = 0, $cmp$i$i$i$i = 0, $cmp$i1$i$i$i = 0, $cmp3$i$i = 0, $conv$i$i$i$i$i = 0, $incdec$ptr$i$i = 0, $incdec$ptr$i$i$i$i = 0, $tobool$i$i$i = 0, $vfn$i$i$i$i = 0, $vtable$i$i$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__nar = sp + 4|0;
 $__ne = sp;
 $add$ptr = (($__nar) + 100|0);
 HEAP32[$__ne>>2] = $add$ptr;
 $add$ptr3 = (($this) + 8|0);
 __ZNKSt3__110__time_put8__do_putEPcRS1_PK2tmcc($add$ptr3,$__nar,$__ne,$__tm,$__fmt,$__mod);
 $2 = HEAP32[$__ne>>2]|0;
 $3 = HEAP32[$__s>>2]|0;
 $cmp3$i$i = ($__nar|0)==($2|0);
 if ($cmp3$i$i) {
  $10 = $3;
  HEAP32[$agg$result>>2] = $10;
  STACKTOP = sp;return;
 } else {
  $5 = $3;$9 = $3;$__first$addr$04$i$i = $__nar;
 }
 while(1) {
  $4 = HEAP8[$__first$addr$04$i$i>>0]|0;
  $tobool$i$i$i = ($5|0)==(0|0);
  do {
   if ($tobool$i$i$i) {
    $11 = $9;$12 = 0;
   } else {
    $__nout_$i$i$i$i = (($5) + 24|0);
    $6 = HEAP32[$__nout_$i$i$i$i>>2]|0;
    $__eout_$i$i$i$i = (($5) + 28|0);
    $7 = HEAP32[$__eout_$i$i$i$i>>2]|0;
    $cmp$i$i$i$i = ($6|0)==($7|0);
    if ($cmp$i$i$i$i) {
     $vtable$i$i$i$i = HEAP32[$5>>2]|0;
     $vfn$i$i$i$i = (($vtable$i$i$i$i) + 52|0);
     $8 = HEAP32[$vfn$i$i$i$i>>2]|0;
     $conv$i$i$i$i$i = $4&255;
     $call2$i$i$i$i = (FUNCTION_TABLE_iii[$8 & 511]($5,$conv$i$i$i$i$i)|0);
     $cmp$i1$i$i$i = ($call2$i$i$i$i|0)==(-1);
     $$$i = $cmp$i1$i$i$i ? 0 : $9;
     $$6$i = $cmp$i1$i$i$i ? 0 : $5;
     $11 = $$$i;$12 = $$6$i;
     break;
    } else {
     $incdec$ptr$i$i$i$i = (($6) + 1|0);
     HEAP32[$__nout_$i$i$i$i>>2] = $incdec$ptr$i$i$i$i;
     HEAP8[$6>>0] = $4;
     $11 = $9;$12 = $5;
     break;
    }
   }
  } while(0);
  $incdec$ptr$i$i = (($__first$addr$04$i$i) + 1|0);
  $cmp$i$i = ($incdec$ptr$i$i|0)==($2|0);
  if ($cmp$i$i) {
   $10 = $11;
   break;
  } else {
   $5 = $12;$9 = $11;$__first$addr$04$i$i = $incdec$ptr$i$i;
  }
 }
 HEAP32[$agg$result>>2] = $10;
 STACKTOP = sp;return;
}
function __ZNKSt3__110__time_put8__do_putEPcRS1_PK2tmcc($this,$__nb,$__ne,$__tm,$__fmt,$__mod) {
 $this = $this|0;
 $__nb = $__nb|0;
 $__ne = $__ne|0;
 $__tm = $__tm|0;
 $__fmt = $__fmt|0;
 $__mod = $__mod|0;
 var $0 = 0, $1 = 0, $add$ptr = 0, $arrayinit$element = 0, $arrayinit$element2 = 0, $arrayinit$element3 = 0, $call5 = 0, $cmp = 0, $fmt = 0, $sub$ptr$lhs$cast$i = 0, $sub$ptr$rhs$cast$i = 0, $sub$ptr$sub$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $fmt = sp;
 HEAP8[$fmt>>0] = 37;
 $arrayinit$element = (($fmt) + 1|0);
 HEAP8[$arrayinit$element>>0] = $__fmt;
 $arrayinit$element2 = (($fmt) + 2|0);
 HEAP8[$arrayinit$element2>>0] = $__mod;
 $arrayinit$element3 = (($fmt) + 3|0);
 HEAP8[$arrayinit$element3>>0] = 0;
 $cmp = ($__mod<<24>>24)==(0);
 if (!($cmp)) {
  HEAP8[$arrayinit$element>>0] = $__mod;
  HEAP8[$arrayinit$element2>>0] = $__fmt;
 }
 $0 = HEAP32[$__ne>>2]|0;
 $sub$ptr$lhs$cast$i = $0;
 $sub$ptr$rhs$cast$i = $__nb;
 $sub$ptr$sub$i = (($sub$ptr$lhs$cast$i) - ($sub$ptr$rhs$cast$i))|0;
 $1 = HEAP32[$this>>2]|0;
 $call5 = (_strftime_l(($__nb|0),($sub$ptr$sub$i|0),($fmt|0),($__tm|0),($1|0))|0);
 $add$ptr = (($__nb) + ($call5)|0);
 HEAP32[$__ne>>2] = $add$ptr;
 STACKTOP = sp;return;
}
function __ZNSt3__18time_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 8|0);
 __ZNSt3__110__time_putD2Ev($0);
 __ZdlPv($this);
 STACKTOP = sp;return;
}
function __ZNSt3__18time_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED1Ev($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 8|0);
 __ZNSt3__110__time_putD2Ev($0);
 STACKTOP = sp;return;
}
function __ZNKSt3__18time_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwPK2tmcc($agg$result,$this,$__s,$0,$1,$__tm,$__fmt,$__mod) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__s = $__s|0;
 $0 = $0|0;
 $1 = $1|0;
 $__tm = $__tm|0;
 $__fmt = $__fmt|0;
 $__mod = $__mod|0;
 var $$$i = 0, $$6$i = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__eout_$i$i$i$i = 0, $__first$addr$04$i$i = 0, $__nar = 0, $__ne = 0, $__nout_$i$i$i$i = 0, $add$ptr = 0, $add$ptr3 = 0;
 var $call2$i$i$i$i = 0, $cmp$i$i = 0, $cmp$i$i$i$i = 0, $cmp$i1$i$i$i = 0, $cmp3$i$i = 0, $incdec$ptr$i$i = 0, $incdec$ptr$i$i$i$i = 0, $retval$0$i$i$i$i = 0, $tobool$i$i$i = 0, $vfn$i$i$i$i = 0, $vtable$i$i$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 416|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__nar = sp + 8|0;
 $__ne = sp;
 $add$ptr = (($__nar) + 400|0);
 HEAP32[$__ne>>2] = $add$ptr;
 $add$ptr3 = (($this) + 8|0);
 __ZNKSt3__110__time_put8__do_putEPwRS1_PK2tmcc($add$ptr3,$__nar,$__ne,$__tm,$__fmt,$__mod);
 $2 = HEAP32[$__ne>>2]|0;
 $3 = HEAP32[$__s>>2]|0;
 $cmp3$i$i = ($__nar|0)==($2|0);
 if ($cmp3$i$i) {
  $10 = $3;
  HEAP32[$agg$result>>2] = $10;
  STACKTOP = sp;return;
 } else {
  $5 = $3;$9 = $3;$__first$addr$04$i$i = $__nar;
 }
 while(1) {
  $4 = HEAP32[$__first$addr$04$i$i>>2]|0;
  $tobool$i$i$i = ($5|0)==(0|0);
  if ($tobool$i$i$i) {
   $11 = $9;$12 = 0;
  } else {
   $__nout_$i$i$i$i = (($5) + 24|0);
   $6 = HEAP32[$__nout_$i$i$i$i>>2]|0;
   $__eout_$i$i$i$i = (($5) + 28|0);
   $7 = HEAP32[$__eout_$i$i$i$i>>2]|0;
   $cmp$i$i$i$i = ($6|0)==($7|0);
   if ($cmp$i$i$i$i) {
    $vtable$i$i$i$i = HEAP32[$5>>2]|0;
    $vfn$i$i$i$i = (($vtable$i$i$i$i) + 52|0);
    $8 = HEAP32[$vfn$i$i$i$i>>2]|0;
    $call2$i$i$i$i = (FUNCTION_TABLE_iii[$8 & 511]($5,$4)|0);
    $retval$0$i$i$i$i = $call2$i$i$i$i;
   } else {
    $incdec$ptr$i$i$i$i = (($6) + 4|0);
    HEAP32[$__nout_$i$i$i$i>>2] = $incdec$ptr$i$i$i$i;
    HEAP32[$6>>2] = $4;
    $retval$0$i$i$i$i = $4;
   }
   $cmp$i1$i$i$i = ($retval$0$i$i$i$i|0)==(-1);
   $$$i = $cmp$i1$i$i$i ? 0 : $9;
   $$6$i = $cmp$i1$i$i$i ? 0 : $5;
   $11 = $$$i;$12 = $$6$i;
  }
  $incdec$ptr$i$i = (($__first$addr$04$i$i) + 4|0);
  $cmp$i$i = ($incdec$ptr$i$i|0)==($2|0);
  if ($cmp$i$i) {
   $10 = $11;
   break;
  } else {
   $5 = $12;$9 = $11;$__first$addr$04$i$i = $incdec$ptr$i$i;
  }
 }
 HEAP32[$agg$result>>2] = $10;
 STACKTOP = sp;return;
}
function __ZNKSt3__110__time_put8__do_putEPwRS1_PK2tmcc($this,$__wb,$__we,$__tm,$__fmt,$__mod) {
 $this = $this|0;
 $__wb = $__wb|0;
 $__we = $__we|0;
 $__tm = $__tm|0;
 $__fmt = $__fmt|0;
 $__mod = $__mod|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__nar = 0, $__nb = 0;
 var $__ne = 0, $add$ptr = 0, $add$ptr5 = 0, $call$i = 0, $call1$i = 0, $cmp = 0, $mb = 0, $sub$ptr$div$i = 0, $sub$ptr$lhs$cast$i = 0, $sub$ptr$rhs$cast$i = 0, $sub$ptr$sub$i = 0, $tobool$i$i$i$i = 0, $tobool$i$i$i4$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__nar = sp + 16|0;
 $__ne = sp + 12|0;
 $mb = sp;
 $__nb = sp + 8|0;
 $add$ptr = (($__nar) + 100|0);
 HEAP32[$__ne>>2] = $add$ptr;
 __ZNKSt3__110__time_put8__do_putEPcRS1_PK2tmcc($this,$__nar,$__ne,$__tm,$__fmt,$__mod);
 $0 = $mb;
 $1 = $0;
 HEAP32[$1>>2] = 0;
 $2 = (($0) + 4)|0;
 $3 = $2;
 HEAP32[$3>>2] = 0;
 HEAP32[$__nb>>2] = $__nar;
 $4 = HEAP32[$__we>>2]|0;
 $sub$ptr$lhs$cast$i = $4;
 $sub$ptr$rhs$cast$i = $__wb;
 $sub$ptr$sub$i = (($sub$ptr$lhs$cast$i) - ($sub$ptr$rhs$cast$i))|0;
 $sub$ptr$div$i = $sub$ptr$sub$i >> 2;
 $5 = HEAP32[$this>>2]|0;
 $call$i = (_uselocale(($5|0))|0);
 __THREW__ = 0;
 $call1$i = (invoke_iiiii(410,($__wb|0),($__nb|0),($sub$ptr$div$i|0),($mb|0))|0);
 $6 = __THREW__; __THREW__ = 0;
 $7 = $6&1;
 if ($7) {
  $12 = ___cxa_find_matching_catch()|0;
  $13 = tempRet0;
  $tobool$i$i$i$i = ($call$i|0)==(0|0);
  if ($tobool$i$i$i$i) {
   ___resumeException($12|0);
   // unreachable;
  }
  __THREW__ = 0;
  (invoke_ii(397,($call$i|0))|0);
  $14 = __THREW__; __THREW__ = 0;
  $15 = $14&1;
  if ($15) {
   $16 = ___cxa_find_matching_catch(0|0)|0;
   $17 = tempRet0;
   ___clang_call_terminate($16);
   // unreachable;
  } else {
   ___resumeException($12|0);
   // unreachable;
  }
 }
 $tobool$i$i$i4$i = ($call$i|0)==(0|0);
 if (!($tobool$i$i$i4$i)) {
  __THREW__ = 0;
  (invoke_ii(397,($call$i|0))|0);
  $8 = __THREW__; __THREW__ = 0;
  $9 = $8&1;
  if ($9) {
   $10 = ___cxa_find_matching_catch(0|0)|0;
   $11 = tempRet0;
   ___clang_call_terminate($10);
   // unreachable;
  }
 }
 $cmp = ($call1$i|0)==(-1);
 if ($cmp) {
  __ZNSt3__121__throw_runtime_errorEPKc(5496);
  // unreachable;
 } else {
  $add$ptr5 = (($__wb) + ($call1$i<<2)|0);
  HEAP32[$__we>>2] = $add$ptr5;
  STACKTOP = sp;return;
 }
}
function __ZNSt3__110moneypunctIcLb0EED0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 STACKTOP = sp;return;
}
function __ZNSt3__110moneypunctIcLb0EED1Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return;
}
function __ZNKSt3__110moneypunctIcLb0EE16do_decimal_pointEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return 127;
}
function __ZNKSt3__110moneypunctIcLb0EE16do_thousands_sepEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return 127;
}
function __ZNKSt3__110moneypunctIcLb0EE11do_groupingEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 ;HEAP32[$agg$result+0>>2]=0|0;HEAP32[$agg$result+4>>2]=0|0;HEAP32[$agg$result+8>>2]=0|0;
 STACKTOP = sp;return;
}
function __ZNKSt3__110moneypunctIcLb0EE14do_curr_symbolEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 ;HEAP32[$agg$result+0>>2]=0|0;HEAP32[$agg$result+4>>2]=0|0;HEAP32[$agg$result+8>>2]=0|0;
 STACKTOP = sp;return;
}
function __ZNKSt3__110moneypunctIcLb0EE16do_positive_signEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 ;HEAP32[$agg$result+0>>2]=0|0;HEAP32[$agg$result+4>>2]=0|0;HEAP32[$agg$result+8>>2]=0|0;
 STACKTOP = sp;return;
}
function __ZNKSt3__110moneypunctIcLb0EE16do_negative_signEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEjc($agg$result,1,45);
 STACKTOP = sp;return;
}
function __ZNKSt3__110moneypunctIcLb0EE14do_frac_digitsEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return 0;
}
function __ZNKSt3__110moneypunctIcLb0EE13do_pos_formatEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP8[$agg$result>>0]=67109634&255;HEAP8[$agg$result+1>>0]=(67109634>>8)&255;HEAP8[$agg$result+2>>0]=(67109634>>16)&255;HEAP8[$agg$result+3>>0]=67109634>>24;
 STACKTOP = sp;return;
}
function __ZNKSt3__110moneypunctIcLb0EE13do_neg_formatEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP8[$agg$result>>0]=67109634&255;HEAP8[$agg$result+1>>0]=(67109634>>8)&255;HEAP8[$agg$result+2>>0]=(67109634>>16)&255;HEAP8[$agg$result+3>>0]=67109634>>24;
 STACKTOP = sp;return;
}
function __ZNSt3__110moneypunctIcLb1EED0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 STACKTOP = sp;return;
}
function __ZNSt3__110moneypunctIcLb1EED1Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return;
}
function __ZNKSt3__110moneypunctIcLb1EE16do_decimal_pointEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return 127;
}
function __ZNKSt3__110moneypunctIcLb1EE16do_thousands_sepEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return 127;
}
function __ZNKSt3__110moneypunctIcLb1EE11do_groupingEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 ;HEAP32[$agg$result+0>>2]=0|0;HEAP32[$agg$result+4>>2]=0|0;HEAP32[$agg$result+8>>2]=0|0;
 STACKTOP = sp;return;
}
function __ZNKSt3__110moneypunctIcLb1EE14do_curr_symbolEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 ;HEAP32[$agg$result+0>>2]=0|0;HEAP32[$agg$result+4>>2]=0|0;HEAP32[$agg$result+8>>2]=0|0;
 STACKTOP = sp;return;
}
function __ZNKSt3__110moneypunctIcLb1EE16do_positive_signEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 ;HEAP32[$agg$result+0>>2]=0|0;HEAP32[$agg$result+4>>2]=0|0;HEAP32[$agg$result+8>>2]=0|0;
 STACKTOP = sp;return;
}
function __ZNKSt3__110moneypunctIcLb1EE16do_negative_signEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEjc($agg$result,1,45);
 STACKTOP = sp;return;
}
function __ZNKSt3__110moneypunctIcLb1EE14do_frac_digitsEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return 0;
}
function __ZNKSt3__110moneypunctIcLb1EE13do_pos_formatEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP8[$agg$result>>0]=67109634&255;HEAP8[$agg$result+1>>0]=(67109634>>8)&255;HEAP8[$agg$result+2>>0]=(67109634>>16)&255;HEAP8[$agg$result+3>>0]=67109634>>24;
 STACKTOP = sp;return;
}
function __ZNKSt3__110moneypunctIcLb1EE13do_neg_formatEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP8[$agg$result>>0]=67109634&255;HEAP8[$agg$result+1>>0]=(67109634>>8)&255;HEAP8[$agg$result+2>>0]=(67109634>>16)&255;HEAP8[$agg$result+3>>0]=67109634>>24;
 STACKTOP = sp;return;
}
function __ZNSt3__110moneypunctIwLb0EED0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 STACKTOP = sp;return;
}
function __ZNSt3__110moneypunctIwLb0EED1Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return;
}
function __ZNKSt3__110moneypunctIwLb0EE16do_decimal_pointEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return 2147483647;
}
function __ZNKSt3__110moneypunctIwLb0EE16do_thousands_sepEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return 2147483647;
}
function __ZNKSt3__110moneypunctIwLb0EE11do_groupingEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 ;HEAP32[$agg$result+0>>2]=0|0;HEAP32[$agg$result+4>>2]=0|0;HEAP32[$agg$result+8>>2]=0|0;
 STACKTOP = sp;return;
}
function __ZNKSt3__110moneypunctIwLb0EE14do_curr_symbolEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 ;HEAP32[$agg$result+0>>2]=0|0;HEAP32[$agg$result+4>>2]=0|0;HEAP32[$agg$result+8>>2]=0|0;
 STACKTOP = sp;return;
}
function __ZNKSt3__110moneypunctIwLb0EE16do_positive_signEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 ;HEAP32[$agg$result+0>>2]=0|0;HEAP32[$agg$result+4>>2]=0|0;HEAP32[$agg$result+8>>2]=0|0;
 STACKTOP = sp;return;
}
function __ZNKSt3__110moneypunctIwLb0EE16do_negative_signEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6__initEjw($agg$result,1,45);
 STACKTOP = sp;return;
}
function __ZNKSt3__110moneypunctIwLb0EE14do_frac_digitsEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return 0;
}
function __ZNKSt3__110moneypunctIwLb0EE13do_pos_formatEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP8[$agg$result>>0]=67109634&255;HEAP8[$agg$result+1>>0]=(67109634>>8)&255;HEAP8[$agg$result+2>>0]=(67109634>>16)&255;HEAP8[$agg$result+3>>0]=67109634>>24;
 STACKTOP = sp;return;
}
function __ZNKSt3__110moneypunctIwLb0EE13do_neg_formatEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP8[$agg$result>>0]=67109634&255;HEAP8[$agg$result+1>>0]=(67109634>>8)&255;HEAP8[$agg$result+2>>0]=(67109634>>16)&255;HEAP8[$agg$result+3>>0]=67109634>>24;
 STACKTOP = sp;return;
}
function __ZNSt3__110moneypunctIwLb1EED0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 STACKTOP = sp;return;
}
function __ZNSt3__110moneypunctIwLb1EED1Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return;
}
function __ZNKSt3__110moneypunctIwLb1EE16do_decimal_pointEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return 2147483647;
}
function __ZNKSt3__110moneypunctIwLb1EE16do_thousands_sepEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return 2147483647;
}
function __ZNKSt3__110moneypunctIwLb1EE11do_groupingEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 ;HEAP32[$agg$result+0>>2]=0|0;HEAP32[$agg$result+4>>2]=0|0;HEAP32[$agg$result+8>>2]=0|0;
 STACKTOP = sp;return;
}
function __ZNKSt3__110moneypunctIwLb1EE14do_curr_symbolEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 ;HEAP32[$agg$result+0>>2]=0|0;HEAP32[$agg$result+4>>2]=0|0;HEAP32[$agg$result+8>>2]=0|0;
 STACKTOP = sp;return;
}
function __ZNKSt3__110moneypunctIwLb1EE16do_positive_signEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 ;HEAP32[$agg$result+0>>2]=0|0;HEAP32[$agg$result+4>>2]=0|0;HEAP32[$agg$result+8>>2]=0|0;
 STACKTOP = sp;return;
}
function __ZNKSt3__110moneypunctIwLb1EE16do_negative_signEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6__initEjw($agg$result,1,45);
 STACKTOP = sp;return;
}
function __ZNKSt3__110moneypunctIwLb1EE14do_frac_digitsEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return 0;
}
function __ZNKSt3__110moneypunctIwLb1EE13do_pos_formatEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP8[$agg$result>>0]=67109634&255;HEAP8[$agg$result+1>>0]=(67109634>>8)&255;HEAP8[$agg$result+2>>0]=(67109634>>16)&255;HEAP8[$agg$result+3>>0]=67109634>>24;
 STACKTOP = sp;return;
}
function __ZNKSt3__110moneypunctIwLb1EE13do_neg_formatEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP8[$agg$result>>0]=67109634&255;HEAP8[$agg$result+1>>0]=(67109634>>8)&255;HEAP8[$agg$result+2>>0]=(67109634>>16)&255;HEAP8[$agg$result+3>>0]=67109634>>24;
 STACKTOP = sp;return;
}
function __ZNSt3__19money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 STACKTOP = sp;return;
}
function __ZNSt3__19money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED1Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return;
}
function __ZNKSt3__19money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_bRNS_8ios_baseERjRe($agg$result,$this,$__b,$__e,$__intl,$__iob,$__err,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__intl = $__intl|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$pre = 0, $$pre$i$i$i = 0, $$pre63 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $__atoms = 0, $__einp_$i$i$i$i = 0, $__einp_$i$i4$i$i = 0, $__first$addr$0$lcssa$i = 0, $__first$addr$05$i = 0, $__fmtflags_$i = 0, $__loc = 0, $__nbuf = 0, $__nc$0 = 0, $__nc$1 = 0, $__nc$2$lcssa = 0, $__nc$253 = 0, $__neg = 0, $__ninp_$i$i$i$i = 0, $__ninp_$i$i3$i$i = 0, $__second_$i$i$i$i$i = 0, $__w$054 = 0;
 var $__wb = 0, $__wbuf = 0, $__wn = 0, $add = 0, $add$ptr = 0, $add$ptr$i = 0, $agg$tmp = 0, $agg$tmp$byval_copy = 0, $arrayidx = 0, $call$i$i$i$i36 = 0, $call$i$i9$i$i37 = 0, $call$i11 = 0, $call22 = 0, $call47 = 0, $call8 = 0, $cmp = 0, $cmp$i = 0, $cmp$i$i$i = 0, $cmp$i$i$i$i = 0, $cmp$i$i5$i$i = 0;
 var $cmp$i1$i$i$i = 0, $cmp$i1$i10$i$i = 0, $cmp2$i = 0, $cmp24 = 0, $cmp33 = 0, $cmp3352 = 0, $cmp48 = 0, $ehselector$slot$0 = 0, $ehselector$slot$159 = 0, $ehselector$slot$160 = 0, $exn$slot$0 = 0, $exn$slot$161 = 0, $exn$slot$162 = 0, $incdec$ptr = 0, $incdec$ptr$i = 0, $incdec$ptr43 = 0, $incdec$ptr44 = 0, $or = 0, $sub$ptr$lhs$cast = 0, $sub$ptr$lhs$cast40 = 0;
 var $sub$ptr$rhs$cast = 0, $sub$ptr$rhs$cast41 = 0, $sub$ptr$sub = 0, $sub$ptr$sub42 = 0, $tobool$i$i$i = 0, $tobool$i$i$i16 = 0, $tobool$i$i$i34 = 0, $tobool$i2$i$i = 0, $tobool29 = 0, $vararg_buffer = 0, $vfn$i = 0, $vfn$i$i$i$i = 0, $vfn$i$i8$i$i = 0, $vtable$i = 0, $vtable$i$i$i$i = 0, $vtable$i$i7$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 256|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $agg$tmp$byval_copy = sp + 24|0;
 $vararg_buffer = sp;
 $__wbuf = sp + 140|0;
 $__wb = sp + 8|0;
 $__wn = sp + 4|0;
 $__loc = sp + 20|0;
 $__neg = sp + 240|0;
 $agg$tmp = sp + 16|0;
 $__atoms = sp + 128|0;
 $__nbuf = sp + 28|0;
 HEAP32[$__wb>>2] = $__wbuf;
 $__second_$i$i$i$i$i = (($__wb) + 4|0);
 HEAP32[$__second_$i$i$i$i$i>>2] = 411;
 $add$ptr = (($__wbuf) + 100|0);
 __THREW__ = 0;
 invoke_vii(358,($__loc|0),($__iob|0));
 $0 = __THREW__; __THREW__ = 0;
 $1 = $0&1;
 do {
  if ($1) {
   $17 = ___cxa_find_matching_catch()|0;
   $18 = tempRet0;
   HEAP32[$__wb>>2] = 0;
   $54 = 411;$55 = $__wbuf;$ehselector$slot$159 = $18;$exn$slot$161 = $17;
  } else {
   __THREW__ = 0;
   $call$i11 = (invoke_iii(359,($__loc|0),(4616|0))|0);
   $2 = __THREW__; __THREW__ = 0;
   $3 = $2&1;
   L3: do {
    if ($3) {
     label = 11;
    } else {
     HEAP8[$__neg>>0] = 0;
     $4 = HEAP32[$__e>>2]|0;
     HEAP32[$agg$tmp>>2] = $4;
     $__fmtflags_$i = (($__iob) + 4|0);
     $5 = HEAP32[$__fmtflags_$i>>2]|0;
     __THREW__ = 0;
     ;HEAP32[$agg$tmp$byval_copy+0>>2]=HEAP32[$agg$tmp+0>>2]|0;
     $call8 = (invoke_iiiiiiiiiiii(412,($__b|0),($agg$tmp$byval_copy|0),($__intl|0),($__loc|0),($5|0),($__err|0),($__neg|0),($call$i11|0),($__wb|0),($__wn|0),($add$ptr|0))|0);
     $6 = __THREW__; __THREW__ = 0;
     $7 = $6&1;
     if ($7) {
      label = 11;
     } else {
      if ($call8) {
       $vtable$i = HEAP32[$call$i11>>2]|0;
       $vfn$i = (($vtable$i) + 32|0);
       $8 = HEAP32[$vfn$i>>2]|0;
       __THREW__ = 0;
       (invoke_iiiii($8|0,($call$i11|0),(4232|0),(((4232 + 10|0))|0),($__atoms|0))|0);
       $9 = __THREW__; __THREW__ = 0;
       $10 = $9&1;
       if ($10) {
        label = 11;
        break;
       }
       $11 = HEAP32[$__wn>>2]|0;
       $12 = HEAP32[$__wb>>2]|0;
       $sub$ptr$lhs$cast = $11;
       $sub$ptr$rhs$cast = $12;
       $sub$ptr$sub = (($sub$ptr$lhs$cast) - ($sub$ptr$rhs$cast))|0;
       $cmp = ($sub$ptr$sub|0)>(98);
       if ($cmp) {
        $add = (($sub$ptr$sub) + 2)|0;
        $call22 = (_malloc($add)|0);
        $cmp24 = ($call22|0)==(0|0);
        if ($cmp24) {
         __THREW__ = 0;
         invoke_v(383);
         $13 = __THREW__; __THREW__ = 0;
         $14 = $13&1;
         if ($14) {
          $15 = ___cxa_find_matching_catch()|0;
          $16 = tempRet0;
          $ehselector$slot$0 = $16;$exn$slot$0 = $15;
          break;
         } else {
          $23 = 0;$__nc$0 = 0;
         }
        } else {
         $23 = $call22;$__nc$0 = $call22;
        }
       } else {
        $23 = 0;$__nc$0 = $__nbuf;
       }
       $24 = HEAP8[$__neg>>0]|0;
       $tobool29 = ($24<<24>>24)==(0);
       if ($tobool29) {
        $__nc$1 = $__nc$0;
       } else {
        $incdec$ptr = (($__nc$0) + 1|0);
        HEAP8[$__nc$0>>0] = 45;
        $__nc$1 = $incdec$ptr;
       }
       $cmp3352 = ($12>>>0)<($11>>>0);
       if ($cmp3352) {
        $add$ptr$i = (($__atoms) + 10|0);
        $sub$ptr$rhs$cast41 = $__atoms;
        $__nc$253 = $__nc$1;$__w$054 = $12;
        while(1) {
         $25 = HEAP8[$__w$054>>0]|0;
         $__first$addr$05$i = $__atoms;
         while(1) {
          $26 = HEAP8[$__first$addr$05$i>>0]|0;
          $cmp2$i = ($26<<24>>24)==($25<<24>>24);
          $incdec$ptr$i = (($__first$addr$05$i) + 1|0);
          if ($cmp2$i) {
           $__first$addr$0$lcssa$i = $__first$addr$05$i;
           break;
          }
          $cmp$i = ($incdec$ptr$i|0)==($add$ptr$i|0);
          if ($cmp$i) {
           $__first$addr$0$lcssa$i = $add$ptr$i;
           break;
          } else {
           $__first$addr$05$i = $incdec$ptr$i;
          }
         }
         $sub$ptr$lhs$cast40 = $__first$addr$0$lcssa$i;
         $sub$ptr$sub42 = (($sub$ptr$lhs$cast40) - ($sub$ptr$rhs$cast41))|0;
         $arrayidx = (4232 + ($sub$ptr$sub42)|0);
         $27 = HEAP8[$arrayidx>>0]|0;
         HEAP8[$__nc$253>>0] = $27;
         $incdec$ptr43 = (($__w$054) + 1|0);
         $incdec$ptr44 = (($__nc$253) + 1|0);
         $28 = HEAP32[$__wn>>2]|0;
         $cmp33 = ($incdec$ptr43>>>0)<($28>>>0);
         if ($cmp33) {
          $__nc$253 = $incdec$ptr44;$__w$054 = $incdec$ptr43;
         } else {
          $__nc$2$lcssa = $incdec$ptr44;
          break;
         }
        }
       } else {
        $__nc$2$lcssa = $__nc$1;
       }
       HEAP8[$__nc$2$lcssa>>0] = 0;
       HEAP32[$vararg_buffer>>2] = $__v;
       $call47 = (_sscanf($__nbuf,4248,$vararg_buffer)|0);
       $cmp48 = ($call47|0)==(1);
       if (!($cmp48)) {
        __THREW__ = 0;
        invoke_vi(413,(4256|0));
        $29 = __THREW__; __THREW__ = 0;
        $30 = $29&1;
        if ($30) {
         $21 = ___cxa_find_matching_catch()|0;
         $22 = tempRet0;
         _free($23);
         $ehselector$slot$0 = $22;$exn$slot$0 = $21;
         break;
        }
       }
       _free($23);
      }
      $31 = HEAP32[$__b>>2]|0;
      $tobool$i$i$i34 = ($31|0)==(0|0);
      do {
       if ($tobool$i$i$i34) {
        $37 = 0;
       } else {
        $__ninp_$i$i$i$i = (($31) + 12|0);
        $32 = HEAP32[$__ninp_$i$i$i$i>>2]|0;
        $__einp_$i$i$i$i = (($31) + 16|0);
        $33 = HEAP32[$__einp_$i$i$i$i>>2]|0;
        $cmp$i$i$i$i = ($32|0)==($33|0);
        if ($cmp$i$i$i$i) {
         $vtable$i$i$i$i = HEAP32[$31>>2]|0;
         $vfn$i$i$i$i = (($vtable$i$i$i$i) + 36|0);
         $34 = HEAP32[$vfn$i$i$i$i>>2]|0;
         __THREW__ = 0;
         $call$i$i$i$i36 = (invoke_ii($34|0,($31|0))|0);
         $35 = __THREW__; __THREW__ = 0;
         $36 = $35&1;
         if ($36) {
          label = 11;
          break L3;
         }
         $cmp$i1$i$i$i = ($call$i$i$i$i36|0)==(-1);
         if ($cmp$i1$i$i$i) {
          HEAP32[$__b>>2] = 0;
          $37 = 0;
          break;
         } else {
          $$pre$i$i$i = HEAP32[$__b>>2]|0;
          $37 = $$pre$i$i$i;
          break;
         }
        } else {
         $37 = $31;
        }
       }
      } while(0);
      $cmp$i$i$i = ($37|0)==(0|0);
      $38 = HEAP32[$__e>>2]|0;
      $tobool$i2$i$i = ($38|0)==(0|0);
      do {
       if ($tobool$i2$i$i) {
        label = 36;
       } else {
        $__ninp_$i$i3$i$i = (($38) + 12|0);
        $39 = HEAP32[$__ninp_$i$i3$i$i>>2]|0;
        $__einp_$i$i4$i$i = (($38) + 16|0);
        $40 = HEAP32[$__einp_$i$i4$i$i>>2]|0;
        $cmp$i$i5$i$i = ($39|0)==($40|0);
        if (!($cmp$i$i5$i$i)) {
         if ($cmp$i$i$i) {
          break;
         } else {
          label = 38;
          break;
         }
        }
        $vtable$i$i7$i$i = HEAP32[$38>>2]|0;
        $vfn$i$i8$i$i = (($vtable$i$i7$i$i) + 36|0);
        $41 = HEAP32[$vfn$i$i8$i$i>>2]|0;
        __THREW__ = 0;
        $call$i$i9$i$i37 = (invoke_ii($41|0,($38|0))|0);
        $42 = __THREW__; __THREW__ = 0;
        $43 = $42&1;
        if ($43) {
         label = 11;
         break L3;
        }
        $cmp$i1$i10$i$i = ($call$i$i9$i$i37|0)==(-1);
        if ($cmp$i1$i10$i$i) {
         HEAP32[$__e>>2] = 0;
         label = 36;
         break;
        } else {
         if ($cmp$i$i$i) {
          break;
         } else {
          label = 38;
          break;
         }
        }
       }
      } while(0);
      if ((label|0) == 36) {
       if ($cmp$i$i$i) {
        label = 38;
       }
      }
      if ((label|0) == 38) {
       $44 = HEAP32[$__err>>2]|0;
       $or = $44 | 2;
       HEAP32[$__err>>2] = $or;
      }
      $45 = HEAP32[$__b>>2]|0;
      HEAP32[$agg$result>>2] = $45;
      $46 = HEAP32[$__loc>>2]|0;
      (__ZNSt3__114__shared_count16__release_sharedEv($46)|0);
      $47 = HEAP32[$__wb>>2]|0;
      HEAP32[$__wb>>2] = 0;
      $tobool$i$i$i16 = ($47|0)==(0|0);
      if ($tobool$i$i$i16) {
       STACKTOP = sp;return;
      }
      $48 = HEAP32[$__second_$i$i$i$i$i>>2]|0;
      __THREW__ = 0;
      invoke_vi($48|0,($47|0));
      $49 = __THREW__; __THREW__ = 0;
      $50 = $49&1;
      if ($50) {
       $51 = ___cxa_find_matching_catch(0|0)|0;
       $52 = tempRet0;
       ___clang_call_terminate($51);
       // unreachable;
      } else {
       STACKTOP = sp;return;
      }
     }
    }
   } while(0);
   if ((label|0) == 11) {
    $19 = ___cxa_find_matching_catch()|0;
    $20 = tempRet0;
    $ehselector$slot$0 = $20;$exn$slot$0 = $19;
   }
   $53 = HEAP32[$__loc>>2]|0;
   (__ZNSt3__114__shared_count16__release_sharedEv($53)|0);
   $$pre = HEAP32[$__wb>>2]|0;
   HEAP32[$__wb>>2] = 0;
   $tobool$i$i$i = ($$pre|0)==(0|0);
   if ($tobool$i$i$i) {
    $ehselector$slot$160 = $ehselector$slot$0;$exn$slot$162 = $exn$slot$0;
    ___resumeException($exn$slot$162|0);
    // unreachable;
   } else {
    $$pre63 = HEAP32[$__second_$i$i$i$i$i>>2]|0;
    $54 = $$pre63;$55 = $$pre;$ehselector$slot$159 = $ehselector$slot$0;$exn$slot$161 = $exn$slot$0;
    break;
   }
  }
 } while(0);
 __THREW__ = 0;
 invoke_vi($54|0,($55|0));
 $56 = __THREW__; __THREW__ = 0;
 $57 = $56&1;
 if ($57) {
  $58 = ___cxa_find_matching_catch(0|0)|0;
  $59 = tempRet0;
  ___clang_call_terminate($58);
  // unreachable;
 } else {
  $ehselector$slot$160 = $ehselector$slot$159;$exn$slot$162 = $exn$slot$161;
  ___resumeException($exn$slot$162|0);
  // unreachable;
 }
}
function __ZNSt3__112__do_nothingEPv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return;
}
function __ZNSt3__19money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE8__do_getERS4_S4_bRKNS_6localeEjRjRbRKNS_5ctypeIcEERNS_10unique_ptrIcPFvPvEEERPcSM_($__b,$__e,$__intl,$__loc,$__flags,$__err,$__neg,$__ct,$__wb,$__wn,$__we) {
 $__b = $__b|0;
 $__e = $__e|0;
 $__intl = $__intl|0;
 $__loc = $__loc|0;
 $__flags = $__flags|0;
 $__err = $__err|0;
 $__neg = $__neg|0;
 $__ct = $__ct|0;
 $__wb = $__wb|0;
 $__wn = $__wn|0;
 $__we = $__we|0;
 var $$pre = 0, $$pre$i$i$i = 0, $$pre$i$i$i126 = 0, $$pre$i$i$i198 = 0, $$pre$i$i$i341 = 0, $$pre$i$i$i460 = 0, $$pre$i$i$i689 = 0, $$pre$i$i$i782 = 0, $$pre$i12$i$i = 0, $$pre$i12$i$i213 = 0, $$pre$i12$i$i213985 = 0, $$pre$i12$i$i213987 = 0, $$pre$i12$i$i356 = 0, $$pre$i12$i$i356992$ph = 0, $$pre$i12$i$i3569921009 = 0, $$pre$i12$i$i475 = 0, $$pre$i12$i$i704 = 0, $$pre$i12$i$i797 = 0, $$pre$i12$i$i797988 = 0, $$pre$i12$i$i797989 = 0;
 var $$pre$i12$i$i994$ph = 0, $$pre$i12$i$i9941015 = 0, $$pre1000 = 0, $$pre995 = 0, $$pre996 = 0, $$pre997 = 0, $$pre998 = 0, $$pre999 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0;
 var $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0;
 var $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0;
 var $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0;
 var $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0;
 var $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0;
 var $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0;
 var $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0;
 var $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0;
 var $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0;
 var $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0;
 var $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0;
 var $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0;
 var $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0;
 var $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0;
 var $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0;
 var $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0;
 var $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__data_$i$i$i = 0;
 var $__data_$i$i$i$i = 0, $__data_$i$i$i503 = 0, $__data_$i$i$i718 = 0, $__data_$i$i$i866 = 0, $__dp = 0, $__einp_$i$i = 0, $__einp_$i$i$i$i = 0, $__einp_$i$i$i$i119 = 0, $__einp_$i$i$i$i191 = 0, $__einp_$i$i$i$i334 = 0, $__einp_$i$i$i$i453 = 0, $__einp_$i$i$i$i682 = 0, $__einp_$i$i$i$i775 = 0, $__einp_$i$i106 = 0, $__einp_$i$i158 = 0, $__einp_$i$i175 = 0, $__einp_$i$i225 = 0, $__einp_$i$i248 = 0, $__einp_$i$i266 = 0, $__einp_$i$i309 = 0;
 var $__einp_$i$i389 = 0, $__einp_$i$i4$i$i = 0, $__einp_$i$i4$i$i134 = 0, $__einp_$i$i4$i$i206 = 0, $__einp_$i$i4$i$i349 = 0, $__einp_$i$i4$i$i468 = 0, $__einp_$i$i4$i$i697 = 0, $__einp_$i$i4$i$i790 = 0, $__einp_$i$i416 = 0, $__einp_$i$i430 = 0, $__einp_$i$i488 = 0, $__einp_$i$i512 = 0, $__einp_$i$i534 = 0, $__einp_$i$i559 = 0, $__einp_$i$i571 = 0, $__einp_$i$i627 = 0, $__einp_$i$i658 = 0, $__einp_$i$i743 = 0, $__einp_$i$i759 = 0, $__einp_$i$i87 = 0;
 var $__et = 0, $__fd = 0, $__gb = 0, $__gbuf = 0, $__ge = 0, $__gn = 0, $__grp = 0, $__i$0 = 0, $__ng$0 = 0, $__ng$1 = 0, $__ninp_$i$i = 0, $__ninp_$i$i$i$i = 0, $__ninp_$i$i$i$i118 = 0, $__ninp_$i$i$i$i190 = 0, $__ninp_$i$i$i$i333 = 0, $__ninp_$i$i$i$i452 = 0, $__ninp_$i$i$i$i681 = 0, $__ninp_$i$i$i$i774 = 0, $__ninp_$i$i105 = 0, $__ninp_$i$i157 = 0;
 var $__ninp_$i$i174 = 0, $__ninp_$i$i224 = 0, $__ninp_$i$i247 = 0, $__ninp_$i$i265 = 0, $__ninp_$i$i3$i$i = 0, $__ninp_$i$i3$i$i133 = 0, $__ninp_$i$i3$i$i205 = 0, $__ninp_$i$i3$i$i348 = 0, $__ninp_$i$i3$i$i467 = 0, $__ninp_$i$i3$i$i696 = 0, $__ninp_$i$i3$i$i789 = 0, $__ninp_$i$i308 = 0, $__ninp_$i$i388 = 0, $__ninp_$i$i415 = 0, $__ninp_$i$i429 = 0, $__ninp_$i$i487 = 0, $__ninp_$i$i511 = 0, $__ninp_$i$i533 = 0, $__ninp_$i$i558 = 0, $__ninp_$i$i570 = 0;
 var $__ninp_$i$i626 = 0, $__ninp_$i$i657 = 0, $__ninp_$i$i742 = 0, $__ninp_$i$i758 = 0, $__ninp_$i$i86 = 0, $__nsn = 0, $__nsn$__trailing_sign$0 = 0, $__nsn$__trailing_sign$075 = 0, $__p$0978 = 0, $__pat = 0, $__psn = 0, $__psn$__trailing_sign$0 = 0, $__psn$__trailing_sign$074 = 0, $__second_$i$i$i$i$i = 0, $__size_$i2$i = 0, $__size_$i2$i$i = 0, $__size_$i2$i$i867 = 0, $__size_$i2$i443 = 0, $__size_$i2$i525 = 0, $__size_$i2$i618 = 0;
 var $__spaces = 0, $__sym = 0, $__sym_curr_char$sroa$0$0$load919924 = 0, $__sym_space_end$sroa$0$0$load923926 = 0, $__tab_$i = 0, $__trailing_sign$0$lcssa = 0, $__trailing_sign$0980 = 0, $__trailing_sign$1 = 0, $__ts = 0, $__we$addr = 0, $add = 0, $add$ptr = 0, $add$ptr$i = 0, $add$ptr$i$i$i = 0, $add$ptr$i$i$i1002 = 0, $add$ptr$i$i$i1003 = 0, $add$ptr$i722 = 0, $add$ptr$i738 = 0, $add$ptr$i834 = 0, $add$ptr$i876 = 0;
 var $add$ptr$i892$sum = 0, $add$ptr$i892$sum1001 = 0, $and$i$i = 0, $and$i$i$i = 0, $and$i$i$i$i = 0, $and$i$i$i501 = 0, $and$i$i$i547 = 0, $and$i$i$i606 = 0, $and$i$i$i671 = 0, $and$i$i$i726 = 0, $and$i$i$i822 = 0, $and$i$i279 = 0, $and$i$i289 = 0, $and$i$i441 = 0, $and$i$i523 = 0, $and$i$i582 = 0, $and$i$i616 = 0, $and$i$i638 = 0, $and$i$i896 = 0, $and3$i = 0;
 var $and3$i241 = 0, $and3$i302 = 0, $and3$i651 = 0, $and3$i811 = 0, $and934 = 0, $arrayidx = 0, $arrayidx$i = 0, $arrayidx$i$i$i = 0, $arrayidx$i$i$i$ = 0, $arrayidx$i$i$i$1018 = 0, $arrayidx$i$i$i$i = 0, $arrayidx$i$i$i506 = 0, $arrayidx$i$i$i506$ = 0, $arrayidx$i$i$i506$1019 = 0, $arrayidx$i$i$i676 = 0, $arrayidx$i$i$i676$ = 0, $arrayidx$i$i$i676$1020 = 0, $arrayidx$i$i$i676$1021 = 0, $arrayidx$i$i$i676$1022 = 0, $arrayidx$i$i$i676$1023 = 0;
 var $arrayidx$i$i$i886 = 0, $arrayidx$i240 = 0, $arrayidx$i301 = 0, $arrayidx$i650 = 0, $arrayidx$i810 = 0, $arrayidx122 = 0, $arrayidx138 = 0, $brmerge = 0, $call$i$i$i$i147 = 0, $call$i$i$i$i219 = 0, $call$i$i$i$i363 = 0, $call$i$i$i$i482 = 0, $call$i$i$i$i710 = 0, $call$i$i$i$i803 = 0, $call$i$i$i$i99 = 0, $call$i$i168 = 0, $call$i$i187 = 0, $call$i$i235 = 0, $call$i$i261 = 0, $call$i$i276 = 0;
 var $call$i$i319 = 0, $call$i$i411 = 0, $call$i$i426 = 0, $call$i$i498 = 0, $call$i$i544 = 0, $call$i$i603 = 0, $call$i$i668 = 0, $call$i$i769 = 0, $call$i$i9$i$i100 = 0, $call$i$i9$i$i149 = 0, $call$i$i9$i$i221 = 0, $call$i$i9$i$i365 = 0, $call$i$i9$i$i484 = 0, $call$i$i9$i$i712 = 0, $call$i$i9$i$i805 = 0, $call$i$i94 = 0, $cmp = 0, $cmp$i = 0, $cmp$i$i = 0, $cmp$i$i$i = 0;
 var $cmp$i$i$i$i = 0, $cmp$i$i$i$i120 = 0, $cmp$i$i$i$i192 = 0, $cmp$i$i$i$i335 = 0, $cmp$i$i$i$i454 = 0, $cmp$i$i$i$i683 = 0, $cmp$i$i$i$i776 = 0, $cmp$i$i$i129 = 0, $cmp$i$i$i201 = 0, $cmp$i$i$i344 = 0, $cmp$i$i$i463 = 0, $cmp$i$i$i692 = 0, $cmp$i$i$i785 = 0, $cmp$i$i$i850 = 0, $cmp$i$i107 = 0, $cmp$i$i159 = 0, $cmp$i$i176 = 0, $cmp$i$i226 = 0, $cmp$i$i249 = 0, $cmp$i$i267 = 0;
 var $cmp$i$i310 = 0, $cmp$i$i390 = 0, $cmp$i$i417 = 0, $cmp$i$i431 = 0, $cmp$i$i489 = 0, $cmp$i$i5$i$i = 0, $cmp$i$i5$i$i135 = 0, $cmp$i$i5$i$i207 = 0, $cmp$i$i5$i$i350 = 0, $cmp$i$i5$i$i469 = 0, $cmp$i$i5$i$i698 = 0, $cmp$i$i5$i$i791 = 0, $cmp$i$i513 = 0, $cmp$i$i535 = 0, $cmp$i$i560 = 0, $cmp$i$i572 = 0, $cmp$i$i628 = 0, $cmp$i$i659 = 0, $cmp$i$i744 = 0, $cmp$i$i760 = 0;
 var $cmp$i$i88 = 0, $cmp$i1$i$i$i = 0, $cmp$i1$i$i$i124 = 0, $cmp$i1$i$i$i196 = 0, $cmp$i1$i$i$i339 = 0, $cmp$i1$i$i$i458 = 0, $cmp$i1$i$i$i687 = 0, $cmp$i1$i$i$i780 = 0, $cmp$i1$i10$i$i = 0, $cmp$i1$i10$i$i139 = 0, $cmp$i1$i10$i$i211 = 0, $cmp$i1$i10$i$i354 = 0, $cmp$i1$i10$i$i473 = 0, $cmp$i1$i10$i$i702 = 0, $cmp$i1$i10$i$i795 = 0, $cmp$i15$i$i = 0, $cmp$i15$i$i216 = 0, $cmp$i15$i$i359 = 0, $cmp$i15$i$i478 = 0, $cmp$i15$i$i707 = 0;
 var $cmp$i15$i$i800 = 0, $cmp$i242 = 0, $cmp$i303 = 0, $cmp$i652 = 0, $cmp$i812 = 0, $cmp100 = 0, $cmp105 = 0, $cmp118 = 0, $cmp119 = 0, $cmp124 = 0, $cmp128935 = 0, $cmp136 = 0, $cmp16 = 0, $cmp163 = 0, $cmp188 = 0, $cmp215 = 0, $cmp227 = 0, $cmp229 = 0, $cmp240 = 0, $cmp242 = 0;
 var $cmp244 = 0, $cmp250 = 0, $cmp259 = 0, $cmp266 = 0, $cmp278 = 0, $cmp291 = 0, $cmp303 = 0, $cmp314 = 0, $cmp325 = 0, $cmp35 = 0, $cmp38 = 0, $cmp40 = 0, $cmp43 = 0, $cmp51 = 0, $cmp56 = 0, $cmp68 = 0, $cmp73 = 0, $cmp85 = 0, $cmp90 = 0, $cmptmp$i$i = 0;
 var $cmptmp$i$i217 = 0, $cmptmp$i$i360 = 0, $cmptmp$i$i479 = 0, $cmptmp$i$i708 = 0, $cmptmp$i$i801 = 0, $cond = 0, $cond$i = 0, $cond$i$i$i = 0, $cond$i286 = 0, $cond$i296 = 0, $cond$i329 = 0, $cond$i375 = 0, $cond$i385 = 0, $cond$i448 = 0, $cond$i530 = 0, $cond$i589 = 0, $cond$i6$i737 = 0, $cond$i6$i833 = 0, $cond$i6$i875 = 0, $cond$i623 = 0;
 var $cond$i645 = 0, $cond$i7$i736 = 0, $cond$i7$i832 = 0, $cond$i7$i874 = 0, $cond$i903 = 0, $conv = 0, $conv$i = 0, $conv$i$i = 0, $conv$i$i$i = 0, $conv$i$i$i163 = 0, $conv$i$i$i181 = 0, $conv$i$i$i230 = 0, $conv$i$i$i254 = 0, $conv$i$i$i271 = 0, $conv$i$i$i314 = 0, $conv$i$i$i406 = 0, $conv$i$i$i421 = 0, $conv$i$i$i493 = 0, $conv$i$i$i539 = 0, $conv$i$i$i598 = 0;
 var $conv$i$i$i663 = 0, $conv$i$i$i721 = 0, $conv$i$i$i733 = 0, $conv$i$i$i764 = 0, $conv$i$i$i829 = 0, $conv$i$i$i871 = 0, $conv$i$i$i887 = 0, $conv$i$i283 = 0, $conv$i$i293 = 0, $conv$i$i326 = 0, $conv$i$i372 = 0, $conv$i$i382 = 0, $conv$i$i445 = 0, $conv$i$i527 = 0, $conv$i$i586 = 0, $conv$i$i620 = 0, $conv$i$i642 = 0, $conv$i$i900 = 0, $conv$i166 = 0, $conv$i170 = 0;
 var $conv$i184 = 0, $conv$i233 = 0, $conv$i238 = 0, $conv$i257 = 0, $conv$i274 = 0, $conv$i299 = 0, $conv$i317 = 0, $conv$i409 = 0, $conv$i424 = 0, $conv$i496 = 0, $conv$i542 = 0, $conv$i601 = 0, $conv$i648 = 0, $conv$i666 = 0, $conv$i767 = 0, $conv$i808 = 0, $dec = 0, $inc = 0, $inc296 = 0, $inc319 = 0;
 var $incdec$ptr = 0, $incdec$ptr$i = 0, $incdec$ptr$i$i = 0, $incdec$ptr$i$i$i = 0, $incdec$ptr$i$i111 = 0, $incdec$ptr$i$i180 = 0, $incdec$ptr$i$i253 = 0, $incdec$ptr$i$i394 = 0, $incdec$ptr$i$i435 = 0, $incdec$ptr$i$i517 = 0, $incdec$ptr$i$i564 = 0, $incdec$ptr$i$i576 = 0, $incdec$ptr$i$i632 = 0, $incdec$ptr$i$i748 = 0, $incdec$ptr$i2$i$i = 0, $incdec$ptr$i817 = 0, $incdec$ptr233 = 0, $incdec$ptr248 = 0, $incdec$ptr284 = 0, $isascii2$i = 0;
 var $isascii2$i237 = 0, $isascii2$i298 = 0, $isascii2$i647 = 0, $isascii2$i807 = 0, $lnot$i = 0, $lnot$i$i$i = 0, $lnot$i5$i$i = 0, $lnot$i755 = 0, $lnot$i820 = 0, $lpad$phi$index = 0, $lpad$phi$index7 = 0, $notlhs = 0, $notrhs = 0, $or = 0, $or$cond = 0, $or$cond1024 = 0, $or$cond76$not = 0, $or$cond77 = 0, $or109 = 0, $or200 = 0;
 var $or261 = 0, $or276 = 0, $or293 = 0, $or316 = 0, $or332 = 0, $retval$0 = 0, $retval$0$i$i = 0, $retval$0$i$i165 = 0, $retval$0$i$i183 = 0, $retval$0$i$i232 = 0, $retval$0$i$i256 = 0, $retval$0$i$i273 = 0, $retval$0$i$i316 = 0, $retval$0$i$i408 = 0, $retval$0$i$i423 = 0, $retval$0$i$i495 = 0, $retval$0$i$i541 = 0, $retval$0$i$i600 = 0, $retval$0$i$i665 = 0, $retval$0$i$i766 = 0;
 var $sext = 0, $sext944 = 0, $sext945 = 0, $sext946 = 0, $shr1$i$i = 0, $shr1$i$i$i = 0, $shr1$i$i$i$ = 0, $shr1$i$i$i734 = 0, $shr1$i$i$i830 = 0, $shr1$i$i$i872 = 0, $shr1$i$i$i888 = 0, $shr1$i$i284 = 0, $shr1$i$i294 = 0, $shr1$i$i327 = 0, $shr1$i$i373 = 0, $shr1$i$i383 = 0, $shr1$i$i446 = 0, $shr1$i$i528 = 0, $shr1$i$i587 = 0, $shr1$i$i621 = 0;
 var $shr1$i$i643 = 0, $shr1$i$i901 = 0, $sub = 0, $sub$ptr$lhs$cast$i = 0, $sub$ptr$rhs$cast$i = 0, $sub$ptr$sub$i = 0, $switch = 0, $tobool$i$i = 0, $tobool$i$i$i = 0, $tobool$i$i$i$i = 0, $tobool$i$i$i117 = 0, $tobool$i$i$i151 = 0, $tobool$i$i$i189 = 0, $tobool$i$i$i332 = 0, $tobool$i$i$i413 = 0, $tobool$i$i$i451 = 0, $tobool$i$i$i502 = 0, $tobool$i$i$i548 = 0, $tobool$i$i$i607 = 0, $tobool$i$i$i672 = 0;
 var $tobool$i$i$i680 = 0, $tobool$i$i$i727 = 0, $tobool$i$i$i773 = 0, $tobool$i$i$i823 = 0, $tobool$i$i$i96 = 0, $tobool$i$i280 = 0, $tobool$i$i290 = 0, $tobool$i$i442 = 0, $tobool$i$i524 = 0, $tobool$i$i583 = 0, $tobool$i$i617 = 0, $tobool$i$i639 = 0, $tobool$i$i897 = 0, $tobool$i2$i$i = 0, $tobool$i2$i$i131 = 0, $tobool$i2$i$i203 = 0, $tobool$i2$i$i346 = 0, $tobool$i2$i$i465 = 0, $tobool$i2$i$i694 = 0, $tobool$i2$i$i787 = 0;
 var $tobool116 = 0, $tobool298 = 0, $tobool330 = 0, $vfn$i$i = 0, $vfn$i$i$i$i = 0, $vfn$i$i$i$i123 = 0, $vfn$i$i$i$i195 = 0, $vfn$i$i$i$i338 = 0, $vfn$i$i$i$i457 = 0, $vfn$i$i$i$i686 = 0, $vfn$i$i$i$i779 = 0, $vfn$i$i109 = 0, $vfn$i$i161 = 0, $vfn$i$i178 = 0, $vfn$i$i228 = 0, $vfn$i$i251 = 0, $vfn$i$i269 = 0, $vfn$i$i312 = 0, $vfn$i$i392 = 0, $vfn$i$i404 = 0;
 var $vfn$i$i419 = 0, $vfn$i$i433 = 0, $vfn$i$i491 = 0, $vfn$i$i515 = 0, $vfn$i$i537 = 0, $vfn$i$i562 = 0, $vfn$i$i574 = 0, $vfn$i$i596 = 0, $vfn$i$i630 = 0, $vfn$i$i661 = 0, $vfn$i$i746 = 0, $vfn$i$i762 = 0, $vfn$i$i8$i$i = 0, $vfn$i$i8$i$i138 = 0, $vfn$i$i8$i$i210 = 0, $vfn$i$i8$i$i353 = 0, $vfn$i$i8$i$i472 = 0, $vfn$i$i8$i$i701 = 0, $vfn$i$i8$i$i794 = 0, $vfn$i$i90 = 0;
 var $vtable$i$i = 0, $vtable$i$i$i$i = 0, $vtable$i$i$i$i122 = 0, $vtable$i$i$i$i194 = 0, $vtable$i$i$i$i337 = 0, $vtable$i$i$i$i456 = 0, $vtable$i$i$i$i685 = 0, $vtable$i$i$i$i778 = 0, $vtable$i$i108 = 0, $vtable$i$i160 = 0, $vtable$i$i177 = 0, $vtable$i$i227 = 0, $vtable$i$i250 = 0, $vtable$i$i268 = 0, $vtable$i$i311 = 0, $vtable$i$i391 = 0, $vtable$i$i403 = 0, $vtable$i$i418 = 0, $vtable$i$i432 = 0, $vtable$i$i490 = 0;
 var $vtable$i$i514 = 0, $vtable$i$i536 = 0, $vtable$i$i561 = 0, $vtable$i$i573 = 0, $vtable$i$i595 = 0, $vtable$i$i629 = 0, $vtable$i$i660 = 0, $vtable$i$i7$i$i = 0, $vtable$i$i7$i$i137 = 0, $vtable$i$i7$i$i209 = 0, $vtable$i$i7$i$i352 = 0, $vtable$i$i7$i$i471 = 0, $vtable$i$i7$i$i700 = 0, $vtable$i$i7$i$i793 = 0, $vtable$i$i745 = 0, $vtable$i$i761 = 0, $vtable$i$i89 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 496|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__we$addr = sp + 488|0;
 $__gbuf = sp + 24|0;
 $__gb = sp + 472|0;
 $__gn = sp + 440|0;
 $__ge = sp + 468|0;
 $__pat = sp + 480|0;
 $__dp = sp + 492|0;
 $__ts = sp + 493|0;
 $__grp = sp;
 $__sym = sp + 444|0;
 $__psn = sp + 12|0;
 $__nsn = sp + 456|0;
 $__spaces = sp + 424|0;
 $__fd = sp + 436|0;
 $__et = sp + 484|0;
 HEAP32[$__we$addr>>2] = $__we;
 HEAP32[$__gb>>2] = $__gbuf;
 $__second_$i$i$i$i$i = (($__gb) + 4|0);
 HEAP32[$__second_$i$i$i$i$i>>2] = 411;
 HEAP32[$__gn>>2] = $__gbuf;
 $add$ptr = (($__gbuf) + 400|0);
 HEAP32[$__ge>>2] = $add$ptr;
 HEAP32[$__pat>>2] = 0;
 ;HEAP32[$__grp+0>>2]=0|0;HEAP32[$__grp+4>>2]=0|0;HEAP32[$__grp+8>>2]=0|0;
 ;HEAP32[$__sym+0>>2]=0|0;HEAP32[$__sym+4>>2]=0|0;HEAP32[$__sym+8>>2]=0|0;
 ;HEAP32[$__psn+0>>2]=0|0;HEAP32[$__psn+4>>2]=0|0;HEAP32[$__psn+8>>2]=0|0;
 ;HEAP32[$__nsn+0>>2]=0|0;HEAP32[$__nsn+4>>2]=0|0;HEAP32[$__nsn+8>>2]=0|0;
 ;HEAP32[$__spaces+0>>2]=0|0;HEAP32[$__spaces+4>>2]=0|0;HEAP32[$__spaces+8>>2]=0|0;
 __THREW__ = 0;
 invoke_viiiiiiiiii(414,($__intl|0),($__loc|0),($__pat|0),($__dp|0),($__ts|0),($__grp|0),($__sym|0),($__psn|0),($__nsn|0),($__fd|0));
 $0 = __THREW__; __THREW__ = 0;
 $1 = $0&1;
 L1: do {
  if ($1) {
   $30 = ___cxa_find_matching_catch()|0;
   $31 = tempRet0;
   $lpad$phi$index = $30;$lpad$phi$index7 = $31;
  } else {
   $2 = HEAP32[$__wb>>2]|0;
   HEAP32[$__wn>>2] = $2;
   $__tab_$i = (($__ct) + 8|0);
   $arrayidx$i$i$i506 = (($__nsn) + 1|0);
   $__size_$i2$i525 = (($__nsn) + 4|0);
   $__data_$i$i$i503 = (($__nsn) + 8|0);
   $arrayidx$i$i$i = (($__psn) + 1|0);
   $__size_$i2$i443 = (($__psn) + 4|0);
   $__data_$i$i$i = (($__psn) + 8|0);
   $and934 = $__flags & 512;
   $cmp128935 = ($and934|0)!=(0);
   $arrayidx$i$i$i676 = (($__sym) + 1|0);
   $__data_$i$i$i718 = (($__sym) + 8|0);
   $__size_$i2$i$i = (($__sym) + 4|0);
   $arrayidx$i$i$i886 = (($__spaces) + 1|0);
   $__data_$i$i$i866 = (($__spaces) + 8|0);
   $__size_$i2$i$i867 = (($__spaces) + 4|0);
   $arrayidx122 = (($__pat) + 3|0);
   $__size_$i2$i618 = (($__grp) + 4|0);
   $374 = $__gbuf;$__p$0978 = 0;$__trailing_sign$0980 = 0;
   L4: while(1) {
    $3 = HEAP32[$__b>>2]|0;
    $tobool$i$i$i117 = ($3|0)==(0|0);
    do {
     if ($tobool$i$i$i117) {
      $9 = 0;
     } else {
      $__ninp_$i$i$i$i118 = (($3) + 12|0);
      $4 = HEAP32[$__ninp_$i$i$i$i118>>2]|0;
      $__einp_$i$i$i$i119 = (($3) + 16|0);
      $5 = HEAP32[$__einp_$i$i$i$i119>>2]|0;
      $cmp$i$i$i$i120 = ($4|0)==($5|0);
      if ($cmp$i$i$i$i120) {
       $vtable$i$i$i$i122 = HEAP32[$3>>2]|0;
       $vfn$i$i$i$i123 = (($vtable$i$i$i$i122) + 36|0);
       $6 = HEAP32[$vfn$i$i$i$i123>>2]|0;
       __THREW__ = 0;
       $call$i$i$i$i147 = (invoke_ii($6|0,($3|0))|0);
       $7 = __THREW__; __THREW__ = 0;
       $8 = $7&1;
       if ($8) {
        label = 24;
        break L4;
       }
       $cmp$i1$i$i$i124 = ($call$i$i$i$i147|0)==(-1);
       if ($cmp$i1$i$i$i124) {
        HEAP32[$__b>>2] = 0;
        $9 = 0;
        break;
       } else {
        $$pre$i$i$i126 = HEAP32[$__b>>2]|0;
        $9 = $$pre$i$i$i126;
        break;
       }
      } else {
       $9 = $3;
      }
     }
    } while(0);
    $cmp$i$i$i129 = ($9|0)==(0|0);
    $10 = HEAP32[$__e>>2]|0;
    $tobool$i2$i$i131 = ($10|0)==(0|0);
    do {
     if ($tobool$i2$i$i131) {
      label = 15;
     } else {
      $__ninp_$i$i3$i$i133 = (($10) + 12|0);
      $11 = HEAP32[$__ninp_$i$i3$i$i133>>2]|0;
      $__einp_$i$i4$i$i134 = (($10) + 16|0);
      $12 = HEAP32[$__einp_$i$i4$i$i134>>2]|0;
      $cmp$i$i5$i$i135 = ($11|0)==($12|0);
      if (!($cmp$i$i5$i$i135)) {
       if ($cmp$i$i$i129) {
        $375 = $10;
        break;
       } else {
        $365 = $374;$376 = $10;$__trailing_sign$0$lcssa = $__trailing_sign$0980;
        label = 280;
        break L4;
       }
      }
      $vtable$i$i7$i$i137 = HEAP32[$10>>2]|0;
      $vfn$i$i8$i$i138 = (($vtable$i$i7$i$i137) + 36|0);
      $13 = HEAP32[$vfn$i$i8$i$i138>>2]|0;
      __THREW__ = 0;
      $call$i$i9$i$i149 = (invoke_ii($13|0,($10|0))|0);
      $14 = __THREW__; __THREW__ = 0;
      $15 = $14&1;
      if ($15) {
       label = 24;
       break L4;
      }
      $cmp$i1$i10$i$i139 = ($call$i$i9$i$i149|0)==(-1);
      if ($cmp$i1$i10$i$i139) {
       HEAP32[$__e>>2] = 0;
       label = 15;
       break;
      } else {
       if ($cmp$i$i$i129) {
        $375 = $10;
        break;
       } else {
        $365 = $374;$376 = $10;$__trailing_sign$0$lcssa = $__trailing_sign$0980;
        label = 280;
        break L4;
       }
      }
     }
    } while(0);
    if ((label|0) == 15) {
     label = 0;
     if ($cmp$i$i$i129) {
      $365 = $374;$376 = 0;$__trailing_sign$0$lcssa = $__trailing_sign$0980;
      label = 280;
      break;
     } else {
      $375 = 0;
     }
    }
    $arrayidx = (($__pat) + ($__p$0978)|0);
    $16 = HEAP8[$arrayidx>>0]|0;
    $conv = $16 << 24 >> 24;
    L26: do {
     switch ($conv|0) {
     case 4:  {
      $17 = HEAP8[$__ts>>0]|0;
      $$pre$i12$i$i704 = $375;$221 = $375;$244 = $374;$__ng$0 = 0;
      L28: while(1) {
       $214 = HEAP32[$__b>>2]|0;
       $tobool$i$i$i680 = ($214|0)==(0|0);
       do {
        if ($tobool$i$i$i680) {
         $220 = 0;
        } else {
         $__ninp_$i$i$i$i681 = (($214) + 12|0);
         $215 = HEAP32[$__ninp_$i$i$i$i681>>2]|0;
         $__einp_$i$i$i$i682 = (($214) + 16|0);
         $216 = HEAP32[$__einp_$i$i$i$i682>>2]|0;
         $cmp$i$i$i$i683 = ($215|0)==($216|0);
         if ($cmp$i$i$i$i683) {
          $vtable$i$i$i$i685 = HEAP32[$214>>2]|0;
          $vfn$i$i$i$i686 = (($vtable$i$i$i$i685) + 36|0);
          $217 = HEAP32[$vfn$i$i$i$i686>>2]|0;
          __THREW__ = 0;
          $call$i$i$i$i710 = (invoke_ii($217|0,($214|0))|0);
          $218 = __THREW__; __THREW__ = 0;
          $219 = $218&1;
          if ($219) {
           label = 20;
           break L4;
          }
          $cmp$i1$i$i$i687 = ($call$i$i$i$i710|0)==(-1);
          if ($cmp$i1$i$i$i687) {
           HEAP32[$__b>>2] = 0;
           $220 = 0;
           break;
          } else {
           $$pre$i$i$i689 = HEAP32[$__b>>2]|0;
           $220 = $$pre$i$i$i689;
           break;
          }
         } else {
          $220 = $214;
         }
        }
       } while(0);
       $cmp$i$i$i692 = ($220|0)==(0|0);
       $tobool$i2$i$i694 = ($221|0)==(0|0);
       do {
        if ($tobool$i2$i$i694) {
         $382 = $$pre$i12$i$i704;
         label = 198;
        } else {
         $__ninp_$i$i3$i$i696 = (($221) + 12|0);
         $222 = HEAP32[$__ninp_$i$i3$i$i696>>2]|0;
         $__einp_$i$i4$i$i697 = (($221) + 16|0);
         $223 = HEAP32[$__einp_$i$i4$i$i697>>2]|0;
         $cmp$i$i5$i$i698 = ($222|0)==($223|0);
         if (!($cmp$i$i5$i$i698)) {
          if ($cmp$i$i$i692) {
           $383 = $$pre$i12$i$i704;$384 = $221;
           break;
          } else {
           $$pre$i12$i$i475 = $$pre$i12$i$i704;
           break L28;
          }
         }
         $vtable$i$i7$i$i700 = HEAP32[$221>>2]|0;
         $vfn$i$i8$i$i701 = (($vtable$i$i7$i$i700) + 36|0);
         $224 = HEAP32[$vfn$i$i8$i$i701>>2]|0;
         __THREW__ = 0;
         $call$i$i9$i$i712 = (invoke_ii($224|0,($221|0))|0);
         $225 = __THREW__; __THREW__ = 0;
         $226 = $225&1;
         if ($226) {
          label = 20;
          break L4;
         }
         $cmp$i1$i10$i$i702 = ($call$i$i9$i$i712|0)==(-1);
         if ($cmp$i1$i10$i$i702) {
          HEAP32[$__e>>2] = 0;
          $382 = 0;
          label = 198;
          break;
         } else {
          $cmp$i15$i$i707 = ($$pre$i12$i$i704|0)==(0|0);
          $cmptmp$i$i708 = $cmp$i$i$i692 ^ $cmp$i15$i$i707;
          if ($cmptmp$i$i708) {
           $383 = $$pre$i12$i$i704;$384 = $$pre$i12$i$i704;
           break;
          } else {
           $$pre$i12$i$i475 = $$pre$i12$i$i704;
           break L28;
          }
         }
        }
       } while(0);
       if ((label|0) == 198) {
        label = 0;
        if ($cmp$i$i$i692) {
         $$pre$i12$i$i475 = $382;
         break;
        } else {
         $383 = $382;$384 = 0;
        }
       }
       $227 = HEAP32[$__b>>2]|0;
       $__ninp_$i$i657 = (($227) + 12|0);
       $228 = HEAP32[$__ninp_$i$i657>>2]|0;
       $__einp_$i$i658 = (($227) + 16|0);
       $229 = HEAP32[$__einp_$i$i658>>2]|0;
       $cmp$i$i659 = ($228|0)==($229|0);
       if ($cmp$i$i659) {
        $vtable$i$i660 = HEAP32[$227>>2]|0;
        $vfn$i$i661 = (($vtable$i$i660) + 36|0);
        $230 = HEAP32[$vfn$i$i661>>2]|0;
        __THREW__ = 0;
        $call$i$i668 = (invoke_ii($230|0,($227|0))|0);
        $231 = __THREW__; __THREW__ = 0;
        $232 = $231&1;
        if ($232) {
         label = 20;
         break L4;
        } else {
         $retval$0$i$i665 = $call$i$i668;
        }
       } else {
        $233 = HEAP8[$228>>0]|0;
        $conv$i$i$i663 = $233&255;
        $retval$0$i$i665 = $conv$i$i$i663;
       }
       $conv$i666 = $retval$0$i$i665&255;
       $isascii2$i647 = ($conv$i666<<24>>24)>(-1);
       if ($isascii2$i647) {
        $sext944 = $retval$0$i$i665 << 24;
        $conv$i648 = $sext944 >> 24;
        $234 = HEAP32[$__tab_$i>>2]|0;
        $arrayidx$i650 = (($234) + ($conv$i648<<1)|0);
        $235 = HEAP16[$arrayidx$i650>>1]|0;
        $and3$i651 = $235 & 2048;
        $cmp$i652 = ($and3$i651<<16>>16)==(0);
        if ($cmp$i652) {
         label = 209;
        } else {
         $236 = HEAP32[$__wn>>2]|0;
         $237 = HEAP32[$__we$addr>>2]|0;
         $cmp215 = ($236|0)==($237|0);
         if ($cmp215) {
          __THREW__ = 0;
          invoke_viii(416,($__wb|0),($__wn|0),($__we$addr|0));
          $238 = __THREW__; __THREW__ = 0;
          $239 = $238&1;
          if ($239) {
           label = 20;
           break L4;
          }
          $$pre999 = HEAP32[$__wn>>2]|0;
          $240 = $$pre999;
         } else {
          $240 = $236;
         }
         $incdec$ptr = (($240) + 1|0);
         HEAP32[$__wn>>2] = $incdec$ptr;
         HEAP8[$240>>0] = $conv$i666;
         $inc = (($__ng$0) + 1)|0;
         $385 = $244;$__ng$1 = $inc;
        }
       } else {
        label = 209;
       }
       if ((label|0) == 209) {
        label = 0;
        $241 = HEAP8[$__grp>>0]|0;
        $and$i$i616 = $241 & 1;
        $tobool$i$i617 = ($and$i$i616<<24>>24)==(0);
        if ($tobool$i$i617) {
         $conv$i$i620 = $241&255;
         $shr1$i$i621 = $conv$i$i620 >>> 1;
         $cond$i623 = $shr1$i$i621;
        } else {
         $242 = HEAP32[$__size_$i2$i618>>2]|0;
         $cond$i623 = $242;
        }
        $notlhs = ($cond$i623|0)!=(0);
        $notrhs = ($__ng$0|0)!=(0);
        $or$cond76$not = $notrhs & $notlhs;
        $cmp227 = ($conv$i666<<24>>24)==($17<<24>>24);
        $or$cond1024 = $or$cond76$not & $cmp227;
        if (!($or$cond1024)) {
         $$pre$i12$i$i475 = $383;
         break;
        }
        $243 = HEAP32[$__ge>>2]|0;
        $cmp229 = ($244|0)==($243|0);
        if ($cmp229) {
         __THREW__ = 0;
         invoke_viii(417,($__gb|0),($__gn|0),($__ge|0));
         $245 = __THREW__; __THREW__ = 0;
         $246 = $245&1;
         if ($246) {
          label = 20;
          break L4;
         }
         $$pre1000 = HEAP32[$__gn>>2]|0;
         $247 = $$pre1000;
        } else {
         $247 = $244;
        }
        $incdec$ptr233 = (($247) + 4|0);
        HEAP32[$__gn>>2] = $incdec$ptr233;
        HEAP32[$247>>2] = $__ng$0;
        $385 = $incdec$ptr233;$__ng$1 = 0;
       }
       $248 = HEAP32[$__b>>2]|0;
       $__ninp_$i$i558 = (($248) + 12|0);
       $249 = HEAP32[$__ninp_$i$i558>>2]|0;
       $__einp_$i$i559 = (($248) + 16|0);
       $250 = HEAP32[$__einp_$i$i559>>2]|0;
       $cmp$i$i560 = ($249|0)==($250|0);
       if ($cmp$i$i560) {
        $vtable$i$i561 = HEAP32[$248>>2]|0;
        $vfn$i$i562 = (($vtable$i$i561) + 40|0);
        $251 = HEAP32[$vfn$i$i562>>2]|0;
        __THREW__ = 0;
        (invoke_ii($251|0,($248|0))|0);
        $252 = __THREW__; __THREW__ = 0;
        $253 = $252&1;
        if ($253) {
         label = 20;
         break L4;
        } else {
         $$pre$i12$i$i704 = $383;$221 = $384;$244 = $385;$__ng$0 = $__ng$1;
         continue;
        }
       } else {
        $incdec$ptr$i$i564 = (($249) + 1|0);
        HEAP32[$__ninp_$i$i558>>2] = $incdec$ptr$i$i564;
        $$pre$i12$i$i704 = $383;$221 = $384;$244 = $385;$__ng$0 = $__ng$1;
        continue;
       }
      }
      $254 = HEAP32[$__gb>>2]|0;
      $cmp240 = ($254|0)==($244|0);
      $cmp242 = ($__ng$0|0)==(0);
      $or$cond77 = $cmp240 | $cmp242;
      if ($or$cond77) {
       $386 = $244;
      } else {
       $255 = HEAP32[$__ge>>2]|0;
       $cmp244 = ($244|0)==($255|0);
       if ($cmp244) {
        __THREW__ = 0;
        invoke_viii(417,($__gb|0),($__gn|0),($__ge|0));
        $256 = __THREW__; __THREW__ = 0;
        $257 = $256&1;
        if ($257) {
         label = 24;
         break L4;
        }
        $$pre998 = HEAP32[$__gn>>2]|0;
        $258 = $$pre998;
       } else {
        $258 = $244;
       }
       $incdec$ptr248 = (($258) + 4|0);
       HEAP32[$__gn>>2] = $incdec$ptr248;
       HEAP32[$258>>2] = $__ng$0;
       $386 = $incdec$ptr248;
      }
      $259 = HEAP32[$__fd>>2]|0;
      $cmp250 = ($259|0)>(0);
      if ($cmp250) {
       $260 = HEAP32[$__b>>2]|0;
       $tobool$i$i$i451 = ($260|0)==(0|0);
       do {
        if ($tobool$i$i$i451) {
         $266 = 0;
        } else {
         $__ninp_$i$i$i$i452 = (($260) + 12|0);
         $261 = HEAP32[$__ninp_$i$i$i$i452>>2]|0;
         $__einp_$i$i$i$i453 = (($260) + 16|0);
         $262 = HEAP32[$__einp_$i$i$i$i453>>2]|0;
         $cmp$i$i$i$i454 = ($261|0)==($262|0);
         if ($cmp$i$i$i$i454) {
          $vtable$i$i$i$i456 = HEAP32[$260>>2]|0;
          $vfn$i$i$i$i457 = (($vtable$i$i$i$i456) + 36|0);
          $263 = HEAP32[$vfn$i$i$i$i457>>2]|0;
          __THREW__ = 0;
          $call$i$i$i$i482 = (invoke_ii($263|0,($260|0))|0);
          $264 = __THREW__; __THREW__ = 0;
          $265 = $264&1;
          if ($265) {
           label = 24;
           break L4;
          }
          $cmp$i1$i$i$i458 = ($call$i$i$i$i482|0)==(-1);
          if ($cmp$i1$i$i$i458) {
           HEAP32[$__b>>2] = 0;
           $266 = 0;
           break;
          } else {
           $$pre$i$i$i460 = HEAP32[$__b>>2]|0;
           $266 = $$pre$i$i$i460;
           break;
          }
         } else {
          $266 = $260;
         }
        }
       } while(0);
       $cmp$i$i$i463 = ($266|0)==(0|0);
       $tobool$i2$i$i465 = ($$pre$i12$i$i475|0)==(0|0);
       do {
        if ($tobool$i2$i$i465) {
         label = 238;
        } else {
         $__ninp_$i$i3$i$i467 = (($$pre$i12$i$i475) + 12|0);
         $267 = HEAP32[$__ninp_$i$i3$i$i467>>2]|0;
         $__einp_$i$i4$i$i468 = (($$pre$i12$i$i475) + 16|0);
         $268 = HEAP32[$__einp_$i$i4$i$i468>>2]|0;
         $cmp$i$i5$i$i469 = ($267|0)==($268|0);
         if (!($cmp$i$i5$i$i469)) {
          if ($cmp$i$i$i463) {
           $388 = $$pre$i12$i$i475;
           break;
          } else {
           label = 244;
           break L4;
          }
         }
         $vtable$i$i7$i$i471 = HEAP32[$$pre$i12$i$i475>>2]|0;
         $vfn$i$i8$i$i472 = (($vtable$i$i7$i$i471) + 36|0);
         $269 = HEAP32[$vfn$i$i8$i$i472>>2]|0;
         __THREW__ = 0;
         $call$i$i9$i$i484 = (invoke_ii($269|0,($$pre$i12$i$i475|0))|0);
         $270 = __THREW__; __THREW__ = 0;
         $271 = $270&1;
         if ($271) {
          label = 24;
          break L4;
         }
         $cmp$i1$i10$i$i473 = ($call$i$i9$i$i484|0)==(-1);
         if ($cmp$i1$i10$i$i473) {
          HEAP32[$__e>>2] = 0;
          label = 238;
          break;
         } else {
          $cmp$i15$i$i478 = ($$pre$i12$i$i475|0)==(0|0);
          $cmptmp$i$i479 = $cmp$i$i$i463 ^ $cmp$i15$i$i478;
          if ($cmptmp$i$i479) {
           $388 = $$pre$i12$i$i475;
           break;
          } else {
           label = 244;
           break L4;
          }
         }
        }
       } while(0);
       if ((label|0) == 238) {
        label = 0;
        if ($cmp$i$i$i463) {
         label = 244;
         break L4;
        } else {
         $388 = 0;
        }
       }
       $272 = HEAP32[$__b>>2]|0;
       $__ninp_$i$i415 = (($272) + 12|0);
       $273 = HEAP32[$__ninp_$i$i415>>2]|0;
       $__einp_$i$i416 = (($272) + 16|0);
       $274 = HEAP32[$__einp_$i$i416>>2]|0;
       $cmp$i$i417 = ($273|0)==($274|0);
       if ($cmp$i$i417) {
        $vtable$i$i418 = HEAP32[$272>>2]|0;
        $vfn$i$i419 = (($vtable$i$i418) + 36|0);
        $275 = HEAP32[$vfn$i$i419>>2]|0;
        __THREW__ = 0;
        $call$i$i426 = (invoke_ii($275|0,($272|0))|0);
        $276 = __THREW__; __THREW__ = 0;
        $277 = $276&1;
        if ($277) {
         label = 24;
         break L4;
        } else {
         $retval$0$i$i423 = $call$i$i426;
        }
       } else {
        $278 = HEAP8[$273>>0]|0;
        $conv$i$i$i421 = $278&255;
        $retval$0$i$i423 = $conv$i$i$i421;
       }
       $conv$i424 = $retval$0$i$i423&255;
       $279 = HEAP8[$__dp>>0]|0;
       $cmp259 = ($conv$i424<<24>>24)==($279<<24>>24);
       if (!($cmp259)) {
        label = 244;
        break L4;
       }
       $281 = HEAP32[$__b>>2]|0;
       $__ninp_$i$i388 = (($281) + 12|0);
       $282 = HEAP32[$__ninp_$i$i388>>2]|0;
       $__einp_$i$i389 = (($281) + 16|0);
       $283 = HEAP32[$__einp_$i$i389>>2]|0;
       $cmp$i$i390 = ($282|0)==($283|0);
       if ($cmp$i$i390) {
        $vtable$i$i391 = HEAP32[$281>>2]|0;
        $vfn$i$i392 = (($vtable$i$i391) + 40|0);
        $284 = HEAP32[$vfn$i$i392>>2]|0;
        __THREW__ = 0;
        (invoke_ii($284|0,($281|0))|0);
        $285 = __THREW__; __THREW__ = 0;
        $286 = $285&1;
        if ($286) {
         label = 24;
         break L4;
        } else {
         $$pre$i12$i$i356 = $388;$294 = $388;$322 = $259;
        }
       } else {
        $incdec$ptr$i$i394 = (($282) + 1|0);
        HEAP32[$__ninp_$i$i388>>2] = $incdec$ptr$i$i394;
        $$pre$i12$i$i356 = $388;$294 = $388;$322 = $259;
       }
       while(1) {
        $287 = HEAP32[$__b>>2]|0;
        $tobool$i$i$i332 = ($287|0)==(0|0);
        do {
         if ($tobool$i$i$i332) {
          $293 = 0;
         } else {
          $__ninp_$i$i$i$i333 = (($287) + 12|0);
          $288 = HEAP32[$__ninp_$i$i$i$i333>>2]|0;
          $__einp_$i$i$i$i334 = (($287) + 16|0);
          $289 = HEAP32[$__einp_$i$i$i$i334>>2]|0;
          $cmp$i$i$i$i335 = ($288|0)==($289|0);
          if ($cmp$i$i$i$i335) {
           $vtable$i$i$i$i337 = HEAP32[$287>>2]|0;
           $vfn$i$i$i$i338 = (($vtable$i$i$i$i337) + 36|0);
           $290 = HEAP32[$vfn$i$i$i$i338>>2]|0;
           __THREW__ = 0;
           $call$i$i$i$i363 = (invoke_ii($290|0,($287|0))|0);
           $291 = __THREW__; __THREW__ = 0;
           $292 = $291&1;
           if ($292) {
            label = 21;
            break L4;
           }
           $cmp$i1$i$i$i339 = ($call$i$i$i$i363|0)==(-1);
           if ($cmp$i1$i$i$i339) {
            HEAP32[$__b>>2] = 0;
            $293 = 0;
            break;
           } else {
            $$pre$i$i$i341 = HEAP32[$__b>>2]|0;
            $293 = $$pre$i$i$i341;
            break;
           }
          } else {
           $293 = $287;
          }
         }
        } while(0);
        $cmp$i$i$i344 = ($293|0)==(0|0);
        $tobool$i2$i$i346 = ($294|0)==(0|0);
        do {
         if ($tobool$i2$i$i346) {
          $$pre$i12$i$i356992$ph = $$pre$i12$i$i356;
          label = 260;
         } else {
          $__ninp_$i$i3$i$i348 = (($294) + 12|0);
          $295 = HEAP32[$__ninp_$i$i3$i$i348>>2]|0;
          $__einp_$i$i4$i$i349 = (($294) + 16|0);
          $296 = HEAP32[$__einp_$i$i4$i$i349>>2]|0;
          $cmp$i$i5$i$i350 = ($295|0)==($296|0);
          if (!($cmp$i$i5$i$i350)) {
           if ($cmp$i$i$i344) {
            $$pre$i12$i$i3569921009 = $$pre$i12$i$i356;$389 = $294;
            break;
           } else {
            label = 267;
            break L4;
           }
          }
          $vtable$i$i7$i$i352 = HEAP32[$294>>2]|0;
          $vfn$i$i8$i$i353 = (($vtable$i$i7$i$i352) + 36|0);
          $297 = HEAP32[$vfn$i$i8$i$i353>>2]|0;
          __THREW__ = 0;
          $call$i$i9$i$i365 = (invoke_ii($297|0,($294|0))|0);
          $298 = __THREW__; __THREW__ = 0;
          $299 = $298&1;
          if ($299) {
           label = 21;
           break L4;
          }
          $cmp$i1$i10$i$i354 = ($call$i$i9$i$i365|0)==(-1);
          if ($cmp$i1$i10$i$i354) {
           HEAP32[$__e>>2] = 0;
           $$pre$i12$i$i356992$ph = 0;
           label = 260;
           break;
          } else {
           $cmp$i15$i$i359 = ($$pre$i12$i$i356|0)==(0|0);
           $cmptmp$i$i360 = $cmp$i$i$i344 ^ $cmp$i15$i$i359;
           if ($cmptmp$i$i360) {
            $$pre$i12$i$i3569921009 = $$pre$i12$i$i356;$389 = $$pre$i12$i$i356;
            break;
           } else {
            label = 267;
            break L4;
           }
          }
         }
        } while(0);
        if ((label|0) == 260) {
         label = 0;
         if ($cmp$i$i$i344) {
          label = 267;
          break L4;
         } else {
          $$pre$i12$i$i3569921009 = $$pre$i12$i$i356992$ph;$389 = 0;
         }
        }
        $300 = HEAP32[$__b>>2]|0;
        $__ninp_$i$i308 = (($300) + 12|0);
        $301 = HEAP32[$__ninp_$i$i308>>2]|0;
        $__einp_$i$i309 = (($300) + 16|0);
        $302 = HEAP32[$__einp_$i$i309>>2]|0;
        $cmp$i$i310 = ($301|0)==($302|0);
        if ($cmp$i$i310) {
         $vtable$i$i311 = HEAP32[$300>>2]|0;
         $vfn$i$i312 = (($vtable$i$i311) + 36|0);
         $303 = HEAP32[$vfn$i$i312>>2]|0;
         __THREW__ = 0;
         $call$i$i319 = (invoke_ii($303|0,($300|0))|0);
         $304 = __THREW__; __THREW__ = 0;
         $305 = $304&1;
         if ($305) {
          label = 21;
          break L4;
         } else {
          $retval$0$i$i316 = $call$i$i319;
         }
        } else {
         $306 = HEAP8[$301>>0]|0;
         $conv$i$i$i314 = $306&255;
         $retval$0$i$i316 = $conv$i$i$i314;
        }
        $conv$i317 = $retval$0$i$i316&255;
        $isascii2$i298 = ($conv$i317<<24>>24)>(-1);
        if (!($isascii2$i298)) {
         label = 267;
         break L4;
        }
        $sext = $retval$0$i$i316 << 24;
        $conv$i299 = $sext >> 24;
        $307 = HEAP32[$__tab_$i>>2]|0;
        $arrayidx$i301 = (($307) + ($conv$i299<<1)|0);
        $308 = HEAP16[$arrayidx$i301>>1]|0;
        $and3$i302 = $308 & 2048;
        $cmp$i303 = ($and3$i302<<16>>16)==(0);
        if ($cmp$i303) {
         label = 267;
         break L4;
        }
        $310 = HEAP32[$__wn>>2]|0;
        $311 = HEAP32[$__we$addr>>2]|0;
        $cmp278 = ($310|0)==($311|0);
        if ($cmp278) {
         __THREW__ = 0;
         invoke_viii(416,($__wb|0),($__wn|0),($__we$addr|0));
         $312 = __THREW__; __THREW__ = 0;
         $313 = $312&1;
         if ($313) {
          label = 21;
          break L4;
         }
        }
        $314 = HEAP32[$__b>>2]|0;
        $__ninp_$i$i265 = (($314) + 12|0);
        $315 = HEAP32[$__ninp_$i$i265>>2]|0;
        $__einp_$i$i266 = (($314) + 16|0);
        $316 = HEAP32[$__einp_$i$i266>>2]|0;
        $cmp$i$i267 = ($315|0)==($316|0);
        if ($cmp$i$i267) {
         $vtable$i$i268 = HEAP32[$314>>2]|0;
         $vfn$i$i269 = (($vtable$i$i268) + 36|0);
         $317 = HEAP32[$vfn$i$i269>>2]|0;
         __THREW__ = 0;
         $call$i$i276 = (invoke_ii($317|0,($314|0))|0);
         $318 = __THREW__; __THREW__ = 0;
         $319 = $318&1;
         if ($319) {
          label = 21;
          break L4;
         } else {
          $retval$0$i$i273 = $call$i$i276;
         }
        } else {
         $320 = HEAP8[$315>>0]|0;
         $conv$i$i$i271 = $320&255;
         $retval$0$i$i273 = $conv$i$i$i271;
        }
        $conv$i274 = $retval$0$i$i273&255;
        $321 = HEAP32[$__wn>>2]|0;
        $incdec$ptr284 = (($321) + 1|0);
        HEAP32[$__wn>>2] = $incdec$ptr284;
        HEAP8[$321>>0] = $conv$i274;
        $dec = (($322) + -1)|0;
        HEAP32[$__fd>>2] = $dec;
        $323 = HEAP32[$__b>>2]|0;
        $__ninp_$i$i105 = (($323) + 12|0);
        $324 = HEAP32[$__ninp_$i$i105>>2]|0;
        $__einp_$i$i106 = (($323) + 16|0);
        $325 = HEAP32[$__einp_$i$i106>>2]|0;
        $cmp$i$i107 = ($324|0)==($325|0);
        if ($cmp$i$i107) {
         $vtable$i$i108 = HEAP32[$323>>2]|0;
         $vfn$i$i109 = (($vtable$i$i108) + 40|0);
         $326 = HEAP32[$vfn$i$i109>>2]|0;
         __THREW__ = 0;
         (invoke_ii($326|0,($323|0))|0);
         $327 = __THREW__; __THREW__ = 0;
         $328 = $327&1;
         if ($328) {
          label = 21;
          break L4;
         }
        } else {
         $incdec$ptr$i$i111 = (($324) + 1|0);
         HEAP32[$__ninp_$i$i105>>2] = $incdec$ptr$i$i111;
        }
        $cmp266 = ($dec|0)>(0);
        if ($cmp266) {
         $$pre$i12$i$i356 = $$pre$i12$i$i3569921009;$294 = $389;$322 = $dec;
        } else {
         $387 = $$pre$i12$i$i3569921009;
         break;
        }
       }
      } else {
       $387 = $$pre$i12$i$i475;
      }
      $329 = HEAP32[$__wn>>2]|0;
      $330 = HEAP32[$__wb>>2]|0;
      $cmp291 = ($329|0)==($330|0);
      if ($cmp291) {
       label = 278;
       break L4;
      } else {
       $377 = $387;$378 = $386;$__trailing_sign$1 = $__trailing_sign$0980;
      }
      break;
     }
     case 1:  {
      $cond = ($__p$0978|0)==(3);
      if ($cond) {
       $365 = $374;$376 = $375;$__trailing_sign$0$lcssa = $__trailing_sign$0980;
       label = 280;
       break L4;
      }
      $38 = HEAP32[$__b>>2]|0;
      $__ninp_$i$i157 = (($38) + 12|0);
      $39 = HEAP32[$__ninp_$i$i157>>2]|0;
      $__einp_$i$i158 = (($38) + 16|0);
      $40 = HEAP32[$__einp_$i$i158>>2]|0;
      $cmp$i$i159 = ($39|0)==($40|0);
      if ($cmp$i$i159) {
       $vtable$i$i160 = HEAP32[$38>>2]|0;
       $vfn$i$i161 = (($vtable$i$i160) + 36|0);
       $41 = HEAP32[$vfn$i$i161>>2]|0;
       __THREW__ = 0;
       $call$i$i168 = (invoke_ii($41|0,($38|0))|0);
       $42 = __THREW__; __THREW__ = 0;
       $43 = $42&1;
       if ($43) {
        label = 24;
        break L4;
       } else {
        $retval$0$i$i165 = $call$i$i168;
       }
      } else {
       $44 = HEAP8[$39>>0]|0;
       $conv$i$i$i163 = $44&255;
       $retval$0$i$i165 = $conv$i$i$i163;
      }
      $conv$i166 = $retval$0$i$i165&255;
      $isascii2$i = ($conv$i166<<24>>24)>(-1);
      if (!($isascii2$i)) {
       label = 40;
       break L4;
      }
      $sext946 = $retval$0$i$i165 << 24;
      $conv$i170 = $sext946 >> 24;
      $45 = HEAP32[$__tab_$i>>2]|0;
      $arrayidx$i = (($45) + ($conv$i170<<1)|0);
      $46 = HEAP16[$arrayidx$i>>1]|0;
      $and3$i = $46 & 8192;
      $cmp$i = ($and3$i<<16>>16)==(0);
      if ($cmp$i) {
       label = 40;
       break L4;
      }
      $47 = HEAP32[$__b>>2]|0;
      $__ninp_$i$i174 = (($47) + 12|0);
      $48 = HEAP32[$__ninp_$i$i174>>2]|0;
      $__einp_$i$i175 = (($47) + 16|0);
      $49 = HEAP32[$__einp_$i$i175>>2]|0;
      $cmp$i$i176 = ($48|0)==($49|0);
      if ($cmp$i$i176) {
       $vtable$i$i177 = HEAP32[$47>>2]|0;
       $vfn$i$i178 = (($vtable$i$i177) + 40|0);
       $50 = HEAP32[$vfn$i$i178>>2]|0;
       __THREW__ = 0;
       $call$i$i187 = (invoke_ii($50|0,($47|0))|0);
       $51 = __THREW__; __THREW__ = 0;
       $52 = $51&1;
       if ($52) {
        label = 24;
        break L4;
       } else {
        $retval$0$i$i183 = $call$i$i187;
       }
      } else {
       $incdec$ptr$i$i180 = (($48) + 1|0);
       HEAP32[$__ninp_$i$i174>>2] = $incdec$ptr$i$i180;
       $53 = HEAP8[$48>>0]|0;
       $conv$i$i$i181 = $53&255;
       $retval$0$i$i183 = $conv$i$i$i181;
      }
      $conv$i184 = $retval$0$i$i183&255;
      __THREW__ = 0;
      invoke_vii(415,($__spaces|0),($conv$i184|0));
      $54 = __THREW__; __THREW__ = 0;
      $55 = $54&1;
      if ($55) {
       label = 24;
       break L4;
      } else {
       label = 41;
      }
      break;
     }
     case 0:  {
      label = 41;
      break;
     }
     case 3:  {
      $88 = HEAP8[$__psn>>0]|0;
      $and$i$i279 = $88 & 1;
      $tobool$i$i280 = ($and$i$i279<<24>>24)==(0);
      if ($tobool$i$i280) {
       $conv$i$i283 = $88&255;
       $shr1$i$i284 = $conv$i$i283 >>> 1;
       $cond$i286 = $shr1$i$i284;
      } else {
       $89 = HEAP32[$__size_$i2$i443>>2]|0;
       $cond$i286 = $89;
      }
      $90 = HEAP8[$__nsn>>0]|0;
      $and$i$i289 = $90 & 1;
      $tobool$i$i290 = ($and$i$i289<<24>>24)==(0);
      if ($tobool$i$i290) {
       $conv$i$i293 = $90&255;
       $shr1$i$i294 = $conv$i$i293 >>> 1;
       $cond$i296 = $shr1$i$i294;
      } else {
       $91 = HEAP32[$__size_$i2$i525>>2]|0;
       $cond$i296 = $91;
      }
      $add = (0 - ($cond$i296))|0;
      $cmp35 = ($cond$i286|0)==($add|0);
      if ($cmp35) {
       $377 = $375;$378 = $374;$__trailing_sign$1 = $__trailing_sign$0980;
      } else {
       if ($tobool$i$i280) {
        $conv$i$i326 = $88&255;
        $shr1$i$i327 = $conv$i$i326 >>> 1;
        $cond$i329 = $shr1$i$i327;
       } else {
        $92 = HEAP32[$__size_$i2$i443>>2]|0;
        $cond$i329 = $92;
       }
       $cmp38 = ($cond$i329|0)==(0);
       if (!($cmp38)) {
        if ($tobool$i$i290) {
         $conv$i$i372 = $90&255;
         $shr1$i$i373 = $conv$i$i372 >>> 1;
         $cond$i375 = $shr1$i$i373;
        } else {
         $93 = HEAP32[$__size_$i2$i525>>2]|0;
         $cond$i375 = $93;
        }
        $cmp40 = ($cond$i375|0)==(0);
        if (!($cmp40)) {
         $128 = HEAP32[$__b>>2]|0;
         $__ninp_$i$i533 = (($128) + 12|0);
         $129 = HEAP32[$__ninp_$i$i533>>2]|0;
         $__einp_$i$i534 = (($128) + 16|0);
         $130 = HEAP32[$__einp_$i$i534>>2]|0;
         $cmp$i$i535 = ($129|0)==($130|0);
         if ($cmp$i$i535) {
          $vtable$i$i536 = HEAP32[$128>>2]|0;
          $vfn$i$i537 = (($vtable$i$i536) + 36|0);
          $131 = HEAP32[$vfn$i$i537>>2]|0;
          __THREW__ = 0;
          $call$i$i544 = (invoke_ii($131|0,($128|0))|0);
          $132 = __THREW__; __THREW__ = 0;
          $133 = $132&1;
          if ($133) {
           label = 24;
           break L4;
          }
          $$pre997 = HEAP8[$__psn>>0]|0;
          $135 = $$pre997;$retval$0$i$i541 = $call$i$i544;
         } else {
          $134 = HEAP8[$129>>0]|0;
          $conv$i$i$i539 = $134&255;
          $135 = $88;$retval$0$i$i541 = $conv$i$i$i539;
         }
         $conv$i542 = $retval$0$i$i541&255;
         $and$i$i$i547 = $135 & 1;
         $tobool$i$i$i548 = ($and$i$i$i547<<24>>24)==(0);
         $136 = HEAP32[$__data_$i$i$i>>2]|0;
         $arrayidx$i$i$i$1018 = $tobool$i$i$i548 ? $arrayidx$i$i$i : $136;
         $137 = HEAP8[$arrayidx$i$i$i$1018>>0]|0;
         $cmp85 = ($conv$i542<<24>>24)==($137<<24>>24);
         $138 = HEAP32[$__b>>2]|0;
         $__ninp_$i$i570 = (($138) + 12|0);
         $139 = HEAP32[$__ninp_$i$i570>>2]|0;
         $__einp_$i$i571 = (($138) + 16|0);
         $140 = HEAP32[$__einp_$i$i571>>2]|0;
         $cmp$i$i572 = ($139|0)==($140|0);
         if ($cmp85) {
          if ($cmp$i$i572) {
           $vtable$i$i573 = HEAP32[$138>>2]|0;
           $vfn$i$i574 = (($vtable$i$i573) + 40|0);
           $141 = HEAP32[$vfn$i$i574>>2]|0;
           __THREW__ = 0;
           (invoke_ii($141|0,($138|0))|0);
           $142 = __THREW__; __THREW__ = 0;
           $143 = $142&1;
           if ($143) {
            label = 24;
            break L4;
           }
          } else {
           $incdec$ptr$i$i576 = (($139) + 1|0);
           HEAP32[$__ninp_$i$i570>>2] = $incdec$ptr$i$i576;
          }
          $144 = HEAP8[$__psn>>0]|0;
          $and$i$i582 = $144 & 1;
          $tobool$i$i583 = ($and$i$i582<<24>>24)==(0);
          if ($tobool$i$i583) {
           $conv$i$i586 = $144&255;
           $shr1$i$i587 = $conv$i$i586 >>> 1;
           $cond$i589 = $shr1$i$i587;
          } else {
           $145 = HEAP32[$__size_$i2$i443>>2]|0;
           $cond$i589 = $145;
          }
          $cmp90 = ($cond$i589>>>0)>(1);
          $__psn$__trailing_sign$074 = $cmp90 ? $__psn : $__trailing_sign$0980;
          $377 = $375;$378 = $374;$__trailing_sign$1 = $__psn$__trailing_sign$074;
          break L26;
         }
         if ($cmp$i$i572) {
          $vtable$i$i595 = HEAP32[$138>>2]|0;
          $vfn$i$i596 = (($vtable$i$i595) + 36|0);
          $146 = HEAP32[$vfn$i$i596>>2]|0;
          __THREW__ = 0;
          $call$i$i603 = (invoke_ii($146|0,($138|0))|0);
          $147 = __THREW__; __THREW__ = 0;
          $148 = $147&1;
          if ($148) {
           label = 24;
           break L4;
          } else {
           $retval$0$i$i600 = $call$i$i603;
          }
         } else {
          $149 = HEAP8[$139>>0]|0;
          $conv$i$i$i598 = $149&255;
          $retval$0$i$i600 = $conv$i$i$i598;
         }
         $conv$i601 = $retval$0$i$i600&255;
         $150 = HEAP8[$__nsn>>0]|0;
         $and$i$i$i606 = $150 & 1;
         $tobool$i$i$i607 = ($and$i$i$i606<<24>>24)==(0);
         $151 = HEAP32[$__data_$i$i$i503>>2]|0;
         $arrayidx$i$i$i506$1019 = $tobool$i$i$i607 ? $arrayidx$i$i$i506 : $151;
         $152 = HEAP8[$arrayidx$i$i$i506$1019>>0]|0;
         $cmp100 = ($conv$i601<<24>>24)==($152<<24>>24);
         if (!($cmp100)) {
          label = 132;
          break L4;
         }
         $153 = HEAP32[$__b>>2]|0;
         $__ninp_$i$i626 = (($153) + 12|0);
         $154 = HEAP32[$__ninp_$i$i626>>2]|0;
         $__einp_$i$i627 = (($153) + 16|0);
         $155 = HEAP32[$__einp_$i$i627>>2]|0;
         $cmp$i$i628 = ($154|0)==($155|0);
         if ($cmp$i$i628) {
          $vtable$i$i629 = HEAP32[$153>>2]|0;
          $vfn$i$i630 = (($vtable$i$i629) + 40|0);
          $156 = HEAP32[$vfn$i$i630>>2]|0;
          __THREW__ = 0;
          (invoke_ii($156|0,($153|0))|0);
          $157 = __THREW__; __THREW__ = 0;
          $158 = $157&1;
          if ($158) {
           label = 24;
           break L4;
          }
         } else {
          $incdec$ptr$i$i632 = (($154) + 1|0);
          HEAP32[$__ninp_$i$i626>>2] = $incdec$ptr$i$i632;
         }
         HEAP8[$__neg>>0] = 1;
         $159 = HEAP8[$__nsn>>0]|0;
         $and$i$i638 = $159 & 1;
         $tobool$i$i639 = ($and$i$i638<<24>>24)==(0);
         if ($tobool$i$i639) {
          $conv$i$i642 = $159&255;
          $shr1$i$i643 = $conv$i$i642 >>> 1;
          $cond$i645 = $shr1$i$i643;
         } else {
          $160 = HEAP32[$__size_$i2$i525>>2]|0;
          $cond$i645 = $160;
         }
         $cmp105 = ($cond$i645>>>0)>(1);
         $__nsn$__trailing_sign$075 = $cmp105 ? $__nsn : $__trailing_sign$0980;
         $377 = $375;$378 = $374;$__trailing_sign$1 = $__nsn$__trailing_sign$075;
         break L26;
        }
       }
       if ($tobool$i$i280) {
        $conv$i$i382 = $88&255;
        $shr1$i$i383 = $conv$i$i382 >>> 1;
        $cond$i385 = $shr1$i$i383;
       } else {
        $94 = HEAP32[$__size_$i2$i443>>2]|0;
        $cond$i385 = $94;
       }
       $cmp43 = ($cond$i385|0)==(0);
       $95 = HEAP32[$__b>>2]|0;
       $__ninp_$i$i487 = (($95) + 12|0);
       $96 = HEAP32[$__ninp_$i$i487>>2]|0;
       $__einp_$i$i488 = (($95) + 16|0);
       $97 = HEAP32[$__einp_$i$i488>>2]|0;
       $cmp$i$i489 = ($96|0)==($97|0);
       if ($cmp43) {
        if ($cmp$i$i489) {
         $vtable$i$i490 = HEAP32[$95>>2]|0;
         $vfn$i$i491 = (($vtable$i$i490) + 36|0);
         $113 = HEAP32[$vfn$i$i491>>2]|0;
         __THREW__ = 0;
         $call$i$i498 = (invoke_ii($113|0,($95|0))|0);
         $114 = __THREW__; __THREW__ = 0;
         $115 = $114&1;
         if ($115) {
          label = 24;
          break L4;
         }
         $$pre995 = HEAP8[$__nsn>>0]|0;
         $117 = $$pre995;$retval$0$i$i495 = $call$i$i498;
        } else {
         $116 = HEAP8[$96>>0]|0;
         $conv$i$i$i493 = $116&255;
         $117 = $90;$retval$0$i$i495 = $conv$i$i$i493;
        }
        $conv$i496 = $retval$0$i$i495&255;
        $and$i$i$i501 = $117 & 1;
        $tobool$i$i$i502 = ($and$i$i$i501<<24>>24)==(0);
        $118 = HEAP32[$__data_$i$i$i503>>2]|0;
        $arrayidx$i$i$i506$ = $tobool$i$i$i502 ? $arrayidx$i$i$i506 : $118;
        $119 = HEAP8[$arrayidx$i$i$i506$>>0]|0;
        $cmp68 = ($conv$i496<<24>>24)==($119<<24>>24);
        if (!($cmp68)) {
         $377 = $375;$378 = $374;$__trailing_sign$1 = $__trailing_sign$0980;
         break L26;
        }
        $120 = HEAP32[$__b>>2]|0;
        $__ninp_$i$i511 = (($120) + 12|0);
        $121 = HEAP32[$__ninp_$i$i511>>2]|0;
        $__einp_$i$i512 = (($120) + 16|0);
        $122 = HEAP32[$__einp_$i$i512>>2]|0;
        $cmp$i$i513 = ($121|0)==($122|0);
        if ($cmp$i$i513) {
         $vtable$i$i514 = HEAP32[$120>>2]|0;
         $vfn$i$i515 = (($vtable$i$i514) + 40|0);
         $123 = HEAP32[$vfn$i$i515>>2]|0;
         __THREW__ = 0;
         (invoke_ii($123|0,($120|0))|0);
         $124 = __THREW__; __THREW__ = 0;
         $125 = $124&1;
         if ($125) {
          label = 24;
          break L4;
         }
        } else {
         $incdec$ptr$i$i517 = (($121) + 1|0);
         HEAP32[$__ninp_$i$i511>>2] = $incdec$ptr$i$i517;
        }
        HEAP8[$__neg>>0] = 1;
        $126 = HEAP8[$__nsn>>0]|0;
        $and$i$i523 = $126 & 1;
        $tobool$i$i524 = ($and$i$i523<<24>>24)==(0);
        if ($tobool$i$i524) {
         $conv$i$i527 = $126&255;
         $shr1$i$i528 = $conv$i$i527 >>> 1;
         $cond$i530 = $shr1$i$i528;
        } else {
         $127 = HEAP32[$__size_$i2$i525>>2]|0;
         $cond$i530 = $127;
        }
        $cmp73 = ($cond$i530>>>0)>(1);
        $__nsn$__trailing_sign$0 = $cmp73 ? $__nsn : $__trailing_sign$0980;
        $377 = $375;$378 = $374;$__trailing_sign$1 = $__nsn$__trailing_sign$0;
        break L26;
       }
       if ($cmp$i$i489) {
        $vtable$i$i403 = HEAP32[$95>>2]|0;
        $vfn$i$i404 = (($vtable$i$i403) + 36|0);
        $98 = HEAP32[$vfn$i$i404>>2]|0;
        __THREW__ = 0;
        $call$i$i411 = (invoke_ii($98|0,($95|0))|0);
        $99 = __THREW__; __THREW__ = 0;
        $100 = $99&1;
        if ($100) {
         label = 24;
         break L4;
        }
        $$pre996 = HEAP8[$__psn>>0]|0;
        $102 = $$pre996;$retval$0$i$i408 = $call$i$i411;
       } else {
        $101 = HEAP8[$96>>0]|0;
        $conv$i$i$i406 = $101&255;
        $102 = $88;$retval$0$i$i408 = $conv$i$i$i406;
       }
       $conv$i409 = $retval$0$i$i408&255;
       $and$i$i$i = $102 & 1;
       $tobool$i$i$i413 = ($and$i$i$i<<24>>24)==(0);
       $103 = HEAP32[$__data_$i$i$i>>2]|0;
       $arrayidx$i$i$i$ = $tobool$i$i$i413 ? $arrayidx$i$i$i : $103;
       $104 = HEAP8[$arrayidx$i$i$i$>>0]|0;
       $cmp51 = ($conv$i409<<24>>24)==($104<<24>>24);
       if (!($cmp51)) {
        HEAP8[$__neg>>0] = 1;
        $377 = $375;$378 = $374;$__trailing_sign$1 = $__trailing_sign$0980;
        break L26;
       }
       $105 = HEAP32[$__b>>2]|0;
       $__ninp_$i$i429 = (($105) + 12|0);
       $106 = HEAP32[$__ninp_$i$i429>>2]|0;
       $__einp_$i$i430 = (($105) + 16|0);
       $107 = HEAP32[$__einp_$i$i430>>2]|0;
       $cmp$i$i431 = ($106|0)==($107|0);
       if ($cmp$i$i431) {
        $vtable$i$i432 = HEAP32[$105>>2]|0;
        $vfn$i$i433 = (($vtable$i$i432) + 40|0);
        $108 = HEAP32[$vfn$i$i433>>2]|0;
        __THREW__ = 0;
        (invoke_ii($108|0,($105|0))|0);
        $109 = __THREW__; __THREW__ = 0;
        $110 = $109&1;
        if ($110) {
         label = 24;
         break L4;
        }
       } else {
        $incdec$ptr$i$i435 = (($106) + 1|0);
        HEAP32[$__ninp_$i$i429>>2] = $incdec$ptr$i$i435;
       }
       $111 = HEAP8[$__psn>>0]|0;
       $and$i$i441 = $111 & 1;
       $tobool$i$i442 = ($and$i$i441<<24>>24)==(0);
       if ($tobool$i$i442) {
        $conv$i$i445 = $111&255;
        $shr1$i$i446 = $conv$i$i445 >>> 1;
        $cond$i448 = $shr1$i$i446;
       } else {
        $112 = HEAP32[$__size_$i2$i443>>2]|0;
        $cond$i448 = $112;
       }
       $cmp56 = ($cond$i448>>>0)>(1);
       $__psn$__trailing_sign$0 = $cmp56 ? $__psn : $__trailing_sign$0980;
       $377 = $375;$378 = $374;$__trailing_sign$1 = $__psn$__trailing_sign$0;
      }
      break;
     }
     case 2:  {
      $tobool116 = ($__trailing_sign$0980|0)!=(0|0);
      $cmp118 = ($__p$0978>>>0)<(2);
      $or$cond = $tobool116 | $cmp118;
      if (!($or$cond)) {
       $cmp119 = ($__p$0978|0)==(2);
       if ($cmp119) {
        $162 = HEAP8[$arrayidx122>>0]|0;
        $cmp124 = ($162<<24>>24)!=(0);
        $163 = $cmp124;
       } else {
        $163 = 0;
       }
       $brmerge = $cmp128935 | $163;
       if (!($brmerge)) {
        $377 = $375;$378 = $374;$__trailing_sign$1 = 0;
        break L26;
       }
      }
      $164 = HEAP8[$__sym>>0]|0;
      $and$i$i$i671 = $164 & 1;
      $tobool$i$i$i672 = ($and$i$i$i671<<24>>24)==(0);
      $165 = HEAP32[$__data_$i$i$i718>>2]|0;
      $arrayidx$i$i$i676$ = $tobool$i$i$i672 ? $arrayidx$i$i$i676 : $165;
      $cmp136 = ($__p$0978|0)==(0);
      L261: do {
       if ($cmp136) {
        $$pre$i12$i$i797 = $375;$180 = $164;$190 = $375;$__sym_curr_char$sroa$0$0$load919924 = $arrayidx$i$i$i676$;
       } else {
        $sub = (($__p$0978) + -1)|0;
        $arrayidx138 = (($__pat) + ($sub)|0);
        $166 = HEAP8[$arrayidx138>>0]|0;
        $switch = ($166&255)<(2);
        if ($switch) {
         $conv$i$i$i721 = $164&255;
         $shr1$i$i$i = $conv$i$i$i721 >>> 1;
         $167 = HEAP32[$__data_$i$i$i718>>2]|0;
         $168 = HEAP32[$__size_$i2$i$i>>2]|0;
         $__sym_space_end$sroa$0$0$load923926 = $arrayidx$i$i$i676$;
         while(1) {
          $arrayidx$i$i$i676$1020 = $tobool$i$i$i672 ? $arrayidx$i$i$i676 : $167;
          $shr1$i$i$i$ = $tobool$i$i$i672 ? $shr1$i$i$i : $168;
          $add$ptr$i722 = (($arrayidx$i$i$i676$1020) + ($shr1$i$i$i$)|0);
          $lnot$i755 = ($__sym_space_end$sroa$0$0$load923926|0)==($add$ptr$i722|0);
          if ($lnot$i755) {
           break;
          }
          $169 = HEAP8[$__sym_space_end$sroa$0$0$load923926>>0]|0;
          $isascii2$i807 = ($169<<24>>24)>(-1);
          if (!($isascii2$i807)) {
           break;
          }
          $conv$i808 = $169 << 24 >> 24;
          $170 = HEAP32[$__tab_$i>>2]|0;
          $arrayidx$i810 = (($170) + ($conv$i808<<1)|0);
          $171 = HEAP16[$arrayidx$i810>>1]|0;
          $and3$i811 = $171 & 8192;
          $cmp$i812 = ($and3$i811<<16>>16)==(0);
          $incdec$ptr$i817 = (($__sym_space_end$sroa$0$0$load923926) + 1|0);
          if ($cmp$i812) {
           break;
          } else {
           $__sym_space_end$sroa$0$0$load923926 = $incdec$ptr$i817;
          }
         }
         $arrayidx$i$i$i676$1021 = $tobool$i$i$i672 ? $arrayidx$i$i$i676 : $167;
         $sub$ptr$lhs$cast$i = $__sym_space_end$sroa$0$0$load923926;
         $sub$ptr$rhs$cast$i = $arrayidx$i$i$i676$1021;
         $sub$ptr$sub$i = (($sub$ptr$lhs$cast$i) - ($sub$ptr$rhs$cast$i))|0;
         $172 = HEAP8[$__spaces>>0]|0;
         $and$i$i896 = $172 & 1;
         $tobool$i$i897 = ($and$i$i896<<24>>24)==(0);
         if ($tobool$i$i897) {
          $conv$i$i900 = $172&255;
          $shr1$i$i901 = $conv$i$i900 >>> 1;
          $cond$i903 = $shr1$i$i901;
         } else {
          $173 = HEAP32[$__size_$i2$i$i867>>2]|0;
          $cond$i903 = $173;
         }
         $cmp163 = ($sub$ptr$sub$i>>>0)>($cond$i903>>>0);
         L273: do {
          if (!($cmp163)) {
           if ($tobool$i$i897) {
            $conv$i$i$i887 = $172&255;
            $shr1$i$i$i888 = $conv$i$i$i887 >>> 1;
            $add$ptr$i892$sum1001 = (($shr1$i$i$i888) - ($sub$ptr$sub$i))|0;
            $add$ptr$i$i$i1002 = ((($__spaces) + ($add$ptr$i892$sum1001)|0) + 1|0);
            $conv$i$i$i871 = $172&255;
            $shr1$i$i$i872 = $conv$i$i$i871 >>> 1;
            $add$ptr$i$i$i1003 = $add$ptr$i$i$i1002;$cond$i6$i875 = $shr1$i$i$i872;$cond$i7$i874 = $arrayidx$i$i$i886;
           } else {
            $174 = HEAP32[$__data_$i$i$i866>>2]|0;
            $175 = HEAP32[$__size_$i2$i$i867>>2]|0;
            $add$ptr$i892$sum = (($175) - ($sub$ptr$sub$i))|0;
            $add$ptr$i$i$i = (($174) + ($add$ptr$i892$sum)|0);
            $add$ptr$i$i$i1003 = $add$ptr$i$i$i;$cond$i6$i875 = $175;$cond$i7$i874 = $174;
           }
           $add$ptr$i876 = (($cond$i7$i874) + ($cond$i6$i875)|0);
           $arrayidx$i$i$i676$1022 = $tobool$i$i$i672 ? $arrayidx$i$i$i676 : $167;
           $lnot$i5$i$i = ($add$ptr$i$i$i1003|0)==($add$ptr$i876|0);
           if ($lnot$i5$i$i) {
            $$pre$i12$i$i797 = $375;$180 = $164;$190 = $375;$__sym_curr_char$sroa$0$0$load919924 = $__sym_space_end$sroa$0$0$load923926;
            break L261;
           } else {
            $177 = $add$ptr$i$i$i1003;$179 = $arrayidx$i$i$i676$1022;
           }
           while(1) {
            $176 = HEAP8[$177>>0]|0;
            $178 = HEAP8[$179>>0]|0;
            $cmp$i$i$i850 = ($176<<24>>24)==($178<<24>>24);
            if (!($cmp$i$i$i850)) {
             break L273;
            }
            $incdec$ptr$i2$i$i = (($177) + 1|0);
            $incdec$ptr$i$i$i = (($179) + 1|0);
            $lnot$i$i$i = ($incdec$ptr$i2$i$i|0)==($add$ptr$i876|0);
            if ($lnot$i$i$i) {
             $$pre$i12$i$i797 = $375;$180 = $164;$190 = $375;$__sym_curr_char$sroa$0$0$load919924 = $__sym_space_end$sroa$0$0$load923926;
             break L261;
            } else {
             $177 = $incdec$ptr$i2$i$i;$179 = $incdec$ptr$i$i$i;
            }
           }
          }
         } while(0);
         $arrayidx$i$i$i676$1023 = $tobool$i$i$i672 ? $arrayidx$i$i$i676 : $167;
         $$pre$i12$i$i797 = $375;$180 = $164;$190 = $375;$__sym_curr_char$sroa$0$0$load919924 = $arrayidx$i$i$i676$1023;
        } else {
         $$pre$i12$i$i797 = $375;$180 = $164;$190 = $375;$__sym_curr_char$sroa$0$0$load919924 = $arrayidx$i$i$i676$;
        }
       }
      } while(0);
      L283: while(1) {
       $and$i$i$i822 = $180 & 1;
       $tobool$i$i$i823 = ($and$i$i$i822<<24>>24)==(0);
       if ($tobool$i$i$i823) {
        $conv$i$i$i829 = $180&255;
        $shr1$i$i$i830 = $conv$i$i$i829 >>> 1;
        $cond$i6$i833 = $shr1$i$i$i830;$cond$i7$i832 = $arrayidx$i$i$i676;
       } else {
        $181 = HEAP32[$__data_$i$i$i718>>2]|0;
        $182 = HEAP32[$__size_$i2$i$i>>2]|0;
        $cond$i6$i833 = $182;$cond$i7$i832 = $181;
       }
       $add$ptr$i834 = (($cond$i7$i832) + ($cond$i6$i833)|0);
       $lnot$i820 = ($__sym_curr_char$sroa$0$0$load919924|0)==($add$ptr$i834|0);
       if ($lnot$i820) {
        $380 = $$pre$i12$i$i797;
        break;
       }
       $183 = HEAP32[$__b>>2]|0;
       $tobool$i$i$i773 = ($183|0)==(0|0);
       do {
        if ($tobool$i$i$i773) {
         $189 = 0;
        } else {
         $__ninp_$i$i$i$i774 = (($183) + 12|0);
         $184 = HEAP32[$__ninp_$i$i$i$i774>>2]|0;
         $__einp_$i$i$i$i775 = (($183) + 16|0);
         $185 = HEAP32[$__einp_$i$i$i$i775>>2]|0;
         $cmp$i$i$i$i776 = ($184|0)==($185|0);
         if ($cmp$i$i$i$i776) {
          $vtable$i$i$i$i778 = HEAP32[$183>>2]|0;
          $vfn$i$i$i$i779 = (($vtable$i$i$i$i778) + 36|0);
          $186 = HEAP32[$vfn$i$i$i$i779>>2]|0;
          __THREW__ = 0;
          $call$i$i$i$i803 = (invoke_ii($186|0,($183|0))|0);
          $187 = __THREW__; __THREW__ = 0;
          $188 = $187&1;
          if ($188) {
           label = 22;
           break L4;
          }
          $cmp$i1$i$i$i780 = ($call$i$i$i$i803|0)==(-1);
          if ($cmp$i1$i$i$i780) {
           HEAP32[$__b>>2] = 0;
           $189 = 0;
           break;
          } else {
           $$pre$i$i$i782 = HEAP32[$__b>>2]|0;
           $189 = $$pre$i$i$i782;
           break;
          }
         } else {
          $189 = $183;
         }
        }
       } while(0);
       $cmp$i$i$i785 = ($189|0)==(0|0);
       $tobool$i2$i$i787 = ($190|0)==(0|0);
       do {
        if ($tobool$i2$i$i787) {
         $$pre$i12$i$i797989 = $$pre$i12$i$i797;
         label = 170;
        } else {
         $__ninp_$i$i3$i$i789 = (($190) + 12|0);
         $191 = HEAP32[$__ninp_$i$i3$i$i789>>2]|0;
         $__einp_$i$i4$i$i790 = (($190) + 16|0);
         $192 = HEAP32[$__einp_$i$i4$i$i790>>2]|0;
         $cmp$i$i5$i$i791 = ($191|0)==($192|0);
         if (!($cmp$i$i5$i$i791)) {
          if ($cmp$i$i$i785) {
           $$pre$i12$i$i797988 = $$pre$i12$i$i797;$381 = $190;
           break;
          } else {
           $380 = $$pre$i12$i$i797;
           break L283;
          }
         }
         $vtable$i$i7$i$i793 = HEAP32[$190>>2]|0;
         $vfn$i$i8$i$i794 = (($vtable$i$i7$i$i793) + 36|0);
         $193 = HEAP32[$vfn$i$i8$i$i794>>2]|0;
         __THREW__ = 0;
         $call$i$i9$i$i805 = (invoke_ii($193|0,($190|0))|0);
         $194 = __THREW__; __THREW__ = 0;
         $195 = $194&1;
         if ($195) {
          label = 22;
          break L4;
         }
         $cmp$i1$i10$i$i795 = ($call$i$i9$i$i805|0)==(-1);
         if ($cmp$i1$i10$i$i795) {
          HEAP32[$__e>>2] = 0;
          $$pre$i12$i$i797989 = 0;
          label = 170;
          break;
         } else {
          $cmp$i15$i$i800 = ($$pre$i12$i$i797|0)==(0|0);
          $cmptmp$i$i801 = $cmp$i$i$i785 ^ $cmp$i15$i$i800;
          if ($cmptmp$i$i801) {
           $$pre$i12$i$i797988 = $$pre$i12$i$i797;$381 = $$pre$i12$i$i797;
           break;
          } else {
           $380 = $$pre$i12$i$i797;
           break L283;
          }
         }
        }
       } while(0);
       if ((label|0) == 170) {
        label = 0;
        if ($cmp$i$i$i785) {
         $380 = $$pre$i12$i$i797989;
         break;
        } else {
         $$pre$i12$i$i797988 = $$pre$i12$i$i797989;$381 = 0;
        }
       }
       $196 = HEAP32[$__b>>2]|0;
       $__ninp_$i$i758 = (($196) + 12|0);
       $197 = HEAP32[$__ninp_$i$i758>>2]|0;
       $__einp_$i$i759 = (($196) + 16|0);
       $198 = HEAP32[$__einp_$i$i759>>2]|0;
       $cmp$i$i760 = ($197|0)==($198|0);
       if ($cmp$i$i760) {
        $vtable$i$i761 = HEAP32[$196>>2]|0;
        $vfn$i$i762 = (($vtable$i$i761) + 36|0);
        $199 = HEAP32[$vfn$i$i762>>2]|0;
        __THREW__ = 0;
        $call$i$i769 = (invoke_ii($199|0,($196|0))|0);
        $200 = __THREW__; __THREW__ = 0;
        $201 = $200&1;
        if ($201) {
         label = 22;
         break L4;
        } else {
         $retval$0$i$i766 = $call$i$i769;
        }
       } else {
        $202 = HEAP8[$197>>0]|0;
        $conv$i$i$i764 = $202&255;
        $retval$0$i$i766 = $conv$i$i$i764;
       }
       $conv$i767 = $retval$0$i$i766&255;
       $203 = HEAP8[$__sym_curr_char$sroa$0$0$load919924>>0]|0;
       $cmp188 = ($conv$i767<<24>>24)==($203<<24>>24);
       if (!($cmp188)) {
        $380 = $$pre$i12$i$i797988;
        break;
       }
       $204 = HEAP32[$__b>>2]|0;
       $__ninp_$i$i742 = (($204) + 12|0);
       $205 = HEAP32[$__ninp_$i$i742>>2]|0;
       $__einp_$i$i743 = (($204) + 16|0);
       $206 = HEAP32[$__einp_$i$i743>>2]|0;
       $cmp$i$i744 = ($205|0)==($206|0);
       if ($cmp$i$i744) {
        $vtable$i$i745 = HEAP32[$204>>2]|0;
        $vfn$i$i746 = (($vtable$i$i745) + 40|0);
        $207 = HEAP32[$vfn$i$i746>>2]|0;
        __THREW__ = 0;
        (invoke_ii($207|0,($204|0))|0);
        $208 = __THREW__; __THREW__ = 0;
        $209 = $208&1;
        if ($209) {
         label = 22;
         break L4;
        }
       } else {
        $incdec$ptr$i$i748 = (($205) + 1|0);
        HEAP32[$__ninp_$i$i742>>2] = $incdec$ptr$i$i748;
       }
       $incdec$ptr$i = (($__sym_curr_char$sroa$0$0$load919924) + 1|0);
       $$pre = HEAP8[$__sym>>0]|0;
       $$pre$i12$i$i797 = $$pre$i12$i$i797988;$180 = $$pre;$190 = $381;$__sym_curr_char$sroa$0$0$load919924 = $incdec$ptr$i;
      }
      if ($cmp128935) {
       $210 = HEAP8[$__sym>>0]|0;
       $and$i$i$i726 = $210 & 1;
       $tobool$i$i$i727 = ($and$i$i$i726<<24>>24)==(0);
       if ($tobool$i$i$i727) {
        $conv$i$i$i733 = $210&255;
        $shr1$i$i$i734 = $conv$i$i$i733 >>> 1;
        $cond$i6$i737 = $shr1$i$i$i734;$cond$i7$i736 = $arrayidx$i$i$i676;
       } else {
        $211 = HEAP32[$__data_$i$i$i718>>2]|0;
        $212 = HEAP32[$__size_$i2$i$i>>2]|0;
        $cond$i6$i737 = $212;$cond$i7$i736 = $211;
       }
       $add$ptr$i738 = (($cond$i7$i736) + ($cond$i6$i737)|0);
       $lnot$i = ($__sym_curr_char$sroa$0$0$load919924|0)==($add$ptr$i738|0);
       if ($lnot$i) {
        $377 = $380;$378 = $374;$__trailing_sign$1 = $__trailing_sign$0980;
       } else {
        label = 185;
        break L4;
       }
      } else {
       $377 = $380;$378 = $374;$__trailing_sign$1 = $__trailing_sign$0980;
      }
      break;
     }
     default: {
      $377 = $375;$378 = $374;$__trailing_sign$1 = $__trailing_sign$0980;
     }
     }
    } while(0);
    L325: do {
     if ((label|0) == 41) {
      label = 0;
      $cmp16 = ($__p$0978|0)==(3);
      if ($cmp16) {
       $365 = $374;$376 = $375;$__trailing_sign$0$lcssa = $__trailing_sign$0980;
       label = 280;
       break L4;
      } else {
       $$pre$i12$i$i213 = $375;$64 = $375;
      }
      while(1) {
       $57 = HEAP32[$__b>>2]|0;
       $tobool$i$i$i189 = ($57|0)==(0|0);
       do {
        if ($tobool$i$i$i189) {
         $63 = 0;
        } else {
         $__ninp_$i$i$i$i190 = (($57) + 12|0);
         $58 = HEAP32[$__ninp_$i$i$i$i190>>2]|0;
         $__einp_$i$i$i$i191 = (($57) + 16|0);
         $59 = HEAP32[$__einp_$i$i$i$i191>>2]|0;
         $cmp$i$i$i$i192 = ($58|0)==($59|0);
         if ($cmp$i$i$i$i192) {
          $vtable$i$i$i$i194 = HEAP32[$57>>2]|0;
          $vfn$i$i$i$i195 = (($vtable$i$i$i$i194) + 36|0);
          $60 = HEAP32[$vfn$i$i$i$i195>>2]|0;
          __THREW__ = 0;
          $call$i$i$i$i219 = (invoke_ii($60|0,($57|0))|0);
          $61 = __THREW__; __THREW__ = 0;
          $62 = $61&1;
          if ($62) {
           label = 23;
           break L4;
          }
          $cmp$i1$i$i$i196 = ($call$i$i$i$i219|0)==(-1);
          if ($cmp$i1$i$i$i196) {
           HEAP32[$__b>>2] = 0;
           $63 = 0;
           break;
          } else {
           $$pre$i$i$i198 = HEAP32[$__b>>2]|0;
           $63 = $$pre$i$i$i198;
           break;
          }
         } else {
          $63 = $57;
         }
        }
       } while(0);
       $cmp$i$i$i201 = ($63|0)==(0|0);
       $tobool$i2$i$i203 = ($64|0)==(0|0);
       do {
        if ($tobool$i2$i$i203) {
         $$pre$i12$i$i213985 = $$pre$i12$i$i213;
         label = 54;
        } else {
         $__ninp_$i$i3$i$i205 = (($64) + 12|0);
         $65 = HEAP32[$__ninp_$i$i3$i$i205>>2]|0;
         $__einp_$i$i4$i$i206 = (($64) + 16|0);
         $66 = HEAP32[$__einp_$i$i4$i$i206>>2]|0;
         $cmp$i$i5$i$i207 = ($65|0)==($66|0);
         if (!($cmp$i$i5$i$i207)) {
          if ($cmp$i$i$i201) {
           $$pre$i12$i$i213987 = $$pre$i12$i$i213;$379 = $64;
           break;
          } else {
           $377 = $$pre$i12$i$i213;$378 = $374;$__trailing_sign$1 = $__trailing_sign$0980;
           break L325;
          }
         }
         $vtable$i$i7$i$i209 = HEAP32[$64>>2]|0;
         $vfn$i$i8$i$i210 = (($vtable$i$i7$i$i209) + 36|0);
         $67 = HEAP32[$vfn$i$i8$i$i210>>2]|0;
         __THREW__ = 0;
         $call$i$i9$i$i221 = (invoke_ii($67|0,($64|0))|0);
         $68 = __THREW__; __THREW__ = 0;
         $69 = $68&1;
         if ($69) {
          label = 23;
          break L4;
         }
         $cmp$i1$i10$i$i211 = ($call$i$i9$i$i221|0)==(-1);
         if ($cmp$i1$i10$i$i211) {
          HEAP32[$__e>>2] = 0;
          $$pre$i12$i$i213985 = 0;
          label = 54;
          break;
         } else {
          $cmp$i15$i$i216 = ($$pre$i12$i$i213|0)==(0|0);
          $cmptmp$i$i217 = $cmp$i$i$i201 ^ $cmp$i15$i$i216;
          if ($cmptmp$i$i217) {
           $$pre$i12$i$i213987 = $$pre$i12$i$i213;$379 = $$pre$i12$i$i213;
           break;
          } else {
           $377 = $$pre$i12$i$i213;$378 = $374;$__trailing_sign$1 = $__trailing_sign$0980;
           break L325;
          }
         }
        }
       } while(0);
       if ((label|0) == 54) {
        label = 0;
        if ($cmp$i$i$i201) {
         $377 = $$pre$i12$i$i213985;$378 = $374;$__trailing_sign$1 = $__trailing_sign$0980;
         break L325;
        } else {
         $$pre$i12$i$i213987 = $$pre$i12$i$i213985;$379 = 0;
        }
       }
       $70 = HEAP32[$__b>>2]|0;
       $__ninp_$i$i224 = (($70) + 12|0);
       $71 = HEAP32[$__ninp_$i$i224>>2]|0;
       $__einp_$i$i225 = (($70) + 16|0);
       $72 = HEAP32[$__einp_$i$i225>>2]|0;
       $cmp$i$i226 = ($71|0)==($72|0);
       if ($cmp$i$i226) {
        $vtable$i$i227 = HEAP32[$70>>2]|0;
        $vfn$i$i228 = (($vtable$i$i227) + 36|0);
        $73 = HEAP32[$vfn$i$i228>>2]|0;
        __THREW__ = 0;
        $call$i$i235 = (invoke_ii($73|0,($70|0))|0);
        $74 = __THREW__; __THREW__ = 0;
        $75 = $74&1;
        if ($75) {
         label = 23;
         break L4;
        } else {
         $retval$0$i$i232 = $call$i$i235;
        }
       } else {
        $76 = HEAP8[$71>>0]|0;
        $conv$i$i$i230 = $76&255;
        $retval$0$i$i232 = $conv$i$i$i230;
       }
       $conv$i233 = $retval$0$i$i232&255;
       $isascii2$i237 = ($conv$i233<<24>>24)>(-1);
       if (!($isascii2$i237)) {
        $377 = $$pre$i12$i$i213987;$378 = $374;$__trailing_sign$1 = $__trailing_sign$0980;
        break L325;
       }
       $sext945 = $retval$0$i$i232 << 24;
       $conv$i238 = $sext945 >> 24;
       $77 = HEAP32[$__tab_$i>>2]|0;
       $arrayidx$i240 = (($77) + ($conv$i238<<1)|0);
       $78 = HEAP16[$arrayidx$i240>>1]|0;
       $and3$i241 = $78 & 8192;
       $cmp$i242 = ($and3$i241<<16>>16)==(0);
       if ($cmp$i242) {
        $377 = $$pre$i12$i$i213987;$378 = $374;$__trailing_sign$1 = $__trailing_sign$0980;
        break L325;
       }
       $79 = HEAP32[$__b>>2]|0;
       $__ninp_$i$i247 = (($79) + 12|0);
       $80 = HEAP32[$__ninp_$i$i247>>2]|0;
       $__einp_$i$i248 = (($79) + 16|0);
       $81 = HEAP32[$__einp_$i$i248>>2]|0;
       $cmp$i$i249 = ($80|0)==($81|0);
       if ($cmp$i$i249) {
        $vtable$i$i250 = HEAP32[$79>>2]|0;
        $vfn$i$i251 = (($vtable$i$i250) + 40|0);
        $82 = HEAP32[$vfn$i$i251>>2]|0;
        __THREW__ = 0;
        $call$i$i261 = (invoke_ii($82|0,($79|0))|0);
        $83 = __THREW__; __THREW__ = 0;
        $84 = $83&1;
        if ($84) {
         label = 23;
         break L4;
        } else {
         $retval$0$i$i256 = $call$i$i261;
        }
       } else {
        $incdec$ptr$i$i253 = (($80) + 1|0);
        HEAP32[$__ninp_$i$i247>>2] = $incdec$ptr$i$i253;
        $85 = HEAP8[$80>>0]|0;
        $conv$i$i$i254 = $85&255;
        $retval$0$i$i256 = $conv$i$i$i254;
       }
       $conv$i257 = $retval$0$i$i256&255;
       __THREW__ = 0;
       invoke_vii(415,($__spaces|0),($conv$i257|0));
       $86 = __THREW__; __THREW__ = 0;
       $87 = $86&1;
       if ($87) {
        label = 23;
        break L4;
       } else {
        $$pre$i12$i$i213 = $$pre$i12$i$i213987;$64 = $379;
       }
      }
     }
    } while(0);
    $inc296 = (($__p$0978) + 1)|0;
    $cmp = ($inc296>>>0)<(4);
    if ($cmp) {
     $374 = $378;$__p$0978 = $inc296;$__trailing_sign$0980 = $__trailing_sign$1;
    } else {
     $365 = $378;$376 = $377;$__trailing_sign$0$lcssa = $__trailing_sign$1;
     label = 280;
     break;
    }
   }
   L360:    switch (label|0) {
    case 20: {
     $20 = ___cxa_find_matching_catch()|0;
     $21 = tempRet0;
     $lpad$phi$index = $20;$lpad$phi$index7 = $21;
     break L1;
     break;
    }
    case 21: {
     $22 = ___cxa_find_matching_catch()|0;
     $23 = tempRet0;
     $lpad$phi$index = $22;$lpad$phi$index7 = $23;
     break L1;
     break;
    }
    case 22: {
     $24 = ___cxa_find_matching_catch()|0;
     $25 = tempRet0;
     $lpad$phi$index = $24;$lpad$phi$index7 = $25;
     break L1;
     break;
    }
    case 23: {
     $26 = ___cxa_find_matching_catch()|0;
     $27 = tempRet0;
     $lpad$phi$index = $26;$lpad$phi$index7 = $27;
     break L1;
     break;
    }
    case 24: {
     $28 = ___cxa_find_matching_catch()|0;
     $29 = tempRet0;
     $lpad$phi$index = $28;$lpad$phi$index7 = $29;
     break L1;
     break;
    }
    case 40: {
     $56 = HEAP32[$__err>>2]|0;
     $or = $56 | 4;
     HEAP32[$__err>>2] = $or;
     $retval$0 = 0;
     break;
    }
    case 132: {
     $161 = HEAP32[$__err>>2]|0;
     $or109 = $161 | 4;
     HEAP32[$__err>>2] = $or109;
     $retval$0 = 0;
     break;
    }
    case 185: {
     $213 = HEAP32[$__err>>2]|0;
     $or200 = $213 | 4;
     HEAP32[$__err>>2] = $or200;
     $retval$0 = 0;
     break;
    }
    case 244: {
     $280 = HEAP32[$__err>>2]|0;
     $or261 = $280 | 4;
     HEAP32[$__err>>2] = $or261;
     $retval$0 = 0;
     break;
    }
    case 267: {
     $309 = HEAP32[$__err>>2]|0;
     $or276 = $309 | 4;
     HEAP32[$__err>>2] = $or276;
     $retval$0 = 0;
     break;
    }
    case 278: {
     $331 = HEAP32[$__err>>2]|0;
     $or293 = $331 | 4;
     HEAP32[$__err>>2] = $or293;
     $retval$0 = 0;
     break;
    }
    case 280: {
     $tobool298 = ($__trailing_sign$0$lcssa|0)==(0|0);
     L366: do {
      if (!($tobool298)) {
       $arrayidx$i$i$i$i = (($__trailing_sign$0$lcssa) + 1|0);
       $__data_$i$i$i$i = (($__trailing_sign$0$lcssa) + 8|0);
       $__size_$i2$i = (($__trailing_sign$0$lcssa) + 4|0);
       $$pre$i12$i$i = $376;$341 = $376;$__i$0 = 1;
       L368: while(1) {
        $332 = HEAP8[$__trailing_sign$0$lcssa>>0]|0;
        $and$i$i = $332 & 1;
        $tobool$i$i = ($and$i$i<<24>>24)==(0);
        if ($tobool$i$i) {
         $conv$i$i = $332&255;
         $shr1$i$i = $conv$i$i >>> 1;
         $cond$i = $shr1$i$i;
        } else {
         $333 = HEAP32[$__size_$i2$i>>2]|0;
         $cond$i = $333;
        }
        $cmp303 = ($__i$0>>>0)<($cond$i>>>0);
        if (!($cmp303)) {
         break L366;
        }
        $334 = HEAP32[$__b>>2]|0;
        $tobool$i$i$i96 = ($334|0)==(0|0);
        do {
         if ($tobool$i$i$i96) {
          $340 = 0;
         } else {
          $__ninp_$i$i$i$i = (($334) + 12|0);
          $335 = HEAP32[$__ninp_$i$i$i$i>>2]|0;
          $__einp_$i$i$i$i = (($334) + 16|0);
          $336 = HEAP32[$__einp_$i$i$i$i>>2]|0;
          $cmp$i$i$i$i = ($335|0)==($336|0);
          if ($cmp$i$i$i$i) {
           $vtable$i$i$i$i = HEAP32[$334>>2]|0;
           $vfn$i$i$i$i = (($vtable$i$i$i$i) + 36|0);
           $337 = HEAP32[$vfn$i$i$i$i>>2]|0;
           __THREW__ = 0;
           $call$i$i$i$i99 = (invoke_ii($337|0,($334|0))|0);
           $338 = __THREW__; __THREW__ = 0;
           $339 = $338&1;
           if ($339) {
            label = 19;
            break L368;
           }
           $cmp$i1$i$i$i = ($call$i$i$i$i99|0)==(-1);
           if ($cmp$i1$i$i$i) {
            HEAP32[$__b>>2] = 0;
            $340 = 0;
            break;
           } else {
            $$pre$i$i$i = HEAP32[$__b>>2]|0;
            $340 = $$pre$i$i$i;
            break;
           }
          } else {
           $340 = $334;
          }
         }
        } while(0);
        $cmp$i$i$i = ($340|0)==(0|0);
        $tobool$i2$i$i = ($341|0)==(0|0);
        do {
         if ($tobool$i2$i$i) {
          $$pre$i12$i$i994$ph = $$pre$i12$i$i;
          label = 298;
         } else {
          $__ninp_$i$i3$i$i = (($341) + 12|0);
          $342 = HEAP32[$__ninp_$i$i3$i$i>>2]|0;
          $__einp_$i$i4$i$i = (($341) + 16|0);
          $343 = HEAP32[$__einp_$i$i4$i$i>>2]|0;
          $cmp$i$i5$i$i = ($342|0)==($343|0);
          if (!($cmp$i$i5$i$i)) {
           if ($cmp$i$i$i) {
            $$pre$i12$i$i9941015 = $$pre$i12$i$i;$390 = $341;
            break;
           } else {
            label = 306;
            break L368;
           }
          }
          $vtable$i$i7$i$i = HEAP32[$341>>2]|0;
          $vfn$i$i8$i$i = (($vtable$i$i7$i$i) + 36|0);
          $344 = HEAP32[$vfn$i$i8$i$i>>2]|0;
          __THREW__ = 0;
          $call$i$i9$i$i100 = (invoke_ii($344|0,($341|0))|0);
          $345 = __THREW__; __THREW__ = 0;
          $346 = $345&1;
          if ($346) {
           label = 19;
           break L368;
          }
          $cmp$i1$i10$i$i = ($call$i$i9$i$i100|0)==(-1);
          if ($cmp$i1$i10$i$i) {
           HEAP32[$__e>>2] = 0;
           $$pre$i12$i$i994$ph = 0;
           label = 298;
           break;
          } else {
           $cmp$i15$i$i = ($$pre$i12$i$i|0)==(0|0);
           $cmptmp$i$i = $cmp$i$i$i ^ $cmp$i15$i$i;
           if ($cmptmp$i$i) {
            $$pre$i12$i$i9941015 = $$pre$i12$i$i;$390 = $$pre$i12$i$i;
            break;
           } else {
            label = 306;
            break L368;
           }
          }
         }
        } while(0);
        if ((label|0) == 298) {
         label = 0;
         if ($cmp$i$i$i) {
          label = 306;
          break;
         } else {
          $$pre$i12$i$i9941015 = $$pre$i12$i$i994$ph;$390 = 0;
         }
        }
        $347 = HEAP32[$__b>>2]|0;
        $__ninp_$i$i86 = (($347) + 12|0);
        $348 = HEAP32[$__ninp_$i$i86>>2]|0;
        $__einp_$i$i87 = (($347) + 16|0);
        $349 = HEAP32[$__einp_$i$i87>>2]|0;
        $cmp$i$i88 = ($348|0)==($349|0);
        if ($cmp$i$i88) {
         $vtable$i$i89 = HEAP32[$347>>2]|0;
         $vfn$i$i90 = (($vtable$i$i89) + 36|0);
         $350 = HEAP32[$vfn$i$i90>>2]|0;
         __THREW__ = 0;
         $call$i$i94 = (invoke_ii($350|0,($347|0))|0);
         $351 = __THREW__; __THREW__ = 0;
         $352 = $351&1;
         if ($352) {
          label = 19;
          break;
         } else {
          $retval$0$i$i = $call$i$i94;
         }
        } else {
         $353 = HEAP8[$348>>0]|0;
         $conv$i$i$i = $353&255;
         $retval$0$i$i = $conv$i$i$i;
        }
        $conv$i = $retval$0$i$i&255;
        $354 = HEAP8[$__trailing_sign$0$lcssa>>0]|0;
        $and$i$i$i$i = $354 & 1;
        $tobool$i$i$i$i = ($and$i$i$i$i<<24>>24)==(0);
        if ($tobool$i$i$i$i) {
         $cond$i$i$i = $arrayidx$i$i$i$i;
        } else {
         $355 = HEAP32[$__data_$i$i$i$i>>2]|0;
         $cond$i$i$i = $355;
        }
        $add$ptr$i = (($cond$i$i$i) + ($__i$0)|0);
        $356 = HEAP8[$add$ptr$i>>0]|0;
        $cmp314 = ($conv$i<<24>>24)==($356<<24>>24);
        if (!($cmp314)) {
         label = 306;
         break;
        }
        $inc319 = (($__i$0) + 1)|0;
        $358 = HEAP32[$__b>>2]|0;
        $__ninp_$i$i = (($358) + 12|0);
        $359 = HEAP32[$__ninp_$i$i>>2]|0;
        $__einp_$i$i = (($358) + 16|0);
        $360 = HEAP32[$__einp_$i$i>>2]|0;
        $cmp$i$i = ($359|0)==($360|0);
        if ($cmp$i$i) {
         $vtable$i$i = HEAP32[$358>>2]|0;
         $vfn$i$i = (($vtable$i$i) + 40|0);
         $361 = HEAP32[$vfn$i$i>>2]|0;
         __THREW__ = 0;
         (invoke_ii($361|0,($358|0))|0);
         $362 = __THREW__; __THREW__ = 0;
         $363 = $362&1;
         if ($363) {
          label = 19;
          break;
         } else {
          $$pre$i12$i$i = $$pre$i12$i$i9941015;$341 = $390;$__i$0 = $inc319;
          continue;
         }
        } else {
         $incdec$ptr$i$i = (($359) + 1|0);
         HEAP32[$__ninp_$i$i>>2] = $incdec$ptr$i$i;
         $$pre$i12$i$i = $$pre$i12$i$i9941015;$341 = $390;$__i$0 = $inc319;
         continue;
        }
       }
       if ((label|0) == 19) {
        $18 = ___cxa_find_matching_catch()|0;
        $19 = tempRet0;
        $lpad$phi$index = $18;$lpad$phi$index7 = $19;
        break L1;
       }
       else if ((label|0) == 306) {
        $357 = HEAP32[$__err>>2]|0;
        $or316 = $357 | 4;
        HEAP32[$__err>>2] = $or316;
        $retval$0 = 0;
        break L360;
       }
      }
     } while(0);
     $364 = HEAP32[$__gb>>2]|0;
     $cmp325 = ($364|0)==($365|0);
     if ($cmp325) {
      $retval$0 = 1;
     } else {
      HEAP32[$__et>>2] = 0;
      __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grp,$364,$365,$__et);
      $366 = HEAP32[$__et>>2]|0;
      $tobool330 = ($366|0)==(0);
      if ($tobool330) {
       $retval$0 = 1;
      } else {
       $367 = HEAP32[$__err>>2]|0;
       $or332 = $367 | 4;
       HEAP32[$__err>>2] = $or332;
       $retval$0 = 0;
      }
     }
     break;
    }
   }
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__spaces);
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__nsn);
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__psn);
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__sym);
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grp);
   $368 = HEAP32[$__gb>>2]|0;
   HEAP32[$__gb>>2] = 0;
   $tobool$i$i$i = ($368|0)==(0|0);
   if ($tobool$i$i$i) {
    STACKTOP = sp;return ($retval$0|0);
   }
   $369 = HEAP32[$__second_$i$i$i$i$i>>2]|0;
   __THREW__ = 0;
   invoke_vi($369|0,($368|0));
   $370 = __THREW__; __THREW__ = 0;
   $371 = $370&1;
   if ($371) {
    $372 = ___cxa_find_matching_catch(0|0)|0;
    $373 = tempRet0;
    ___clang_call_terminate($372);
    // unreachable;
   } else {
    STACKTOP = sp;return ($retval$0|0);
   }
  }
 } while(0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__spaces);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__nsn);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__psn);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__sym);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grp);
 $32 = HEAP32[$__gb>>2]|0;
 HEAP32[$__gb>>2] = 0;
 $tobool$i$i$i151 = ($32|0)==(0|0);
 if ($tobool$i$i$i151) {
  ___resumeException($lpad$phi$index|0);
  // unreachable;
 }
 $33 = HEAP32[$__second_$i$i$i$i$i>>2]|0;
 __THREW__ = 0;
 invoke_vi($33|0,($32|0));
 $34 = __THREW__; __THREW__ = 0;
 $35 = $34&1;
 if ($35) {
  $36 = ___cxa_find_matching_catch(0|0)|0;
  $37 = tempRet0;
  ___clang_call_terminate($36);
  // unreachable;
 } else {
  ___resumeException($lpad$phi$index|0);
  // unreachable;
 }
 return 0|0;
}
function __ZNSt3__121__throw_runtime_errorEPKc($msg) {
 $msg = $msg|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $exception = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $exception = (___cxa_allocate_exception(8)|0);
 __THREW__ = 0;
 invoke_vii(418,($exception|0),($msg|0));
 $0 = __THREW__; __THREW__ = 0;
 $1 = $0&1;
 if ($1) {
  $2 = ___cxa_find_matching_catch()|0;
  $3 = tempRet0;
  ___cxa_free_exception(($exception|0));
  ___resumeException($2|0);
  // unreachable;
 } else {
  ___cxa_throw(($exception|0),(13232|0),(331|0));
  // unreachable;
 }
}
function __ZNKSt3__19money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_bRNS_8ios_baseERjRNS_12basic_stringIcS3_NS_9allocatorIcEEEE($agg$result,$this,$__b,$__e,$__intl,$__iob,$__err,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__intl = $__intl|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$pre = 0, $$pre$i$i$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__data_$i$i = 0, $__einp_$i$i$i$i = 0;
 var $__einp_$i$i4$i$i = 0, $__fmtflags_$i = 0, $__loc = 0, $__neg = 0, $__ninp_$i$i$i$i = 0, $__ninp_$i$i3$i$i = 0, $__second_$i$i$i$i$i = 0, $__size_$i1$i = 0, $__w$0$lcssa = 0, $__w$033 = 0, $__wb = 0, $__wbuf = 0, $__wn = 0, $add$ptr = 0, $add$ptr1731 = 0, $agg$tmp = 0, $agg$tmp$byval_copy = 0, $and$i$i = 0, $arrayidx$i$i = 0, $call$i$i$i$i27 = 0;
 var $call$i$i9$i$i28 = 0, $call$i12 = 0, $call$i19 = 0, $call$i2223 = 0, $call8 = 0, $cmp = 0, $cmp$i$i$i = 0, $cmp$i$i$i$i = 0, $cmp$i$i5$i$i = 0, $cmp$i1$i$i$i = 0, $cmp$i1$i10$i$i = 0, $cmp$i15$i$i = 0, $cmp19 = 0, $cmp32 = 0, $cmptmp$i$i = 0, $ehselector$slot$041 = 0, $ehselector$slot$042 = 0, $exn$slot$043 = 0, $exn$slot$044 = 0, $incdec$ptr = 0;
 var $or = 0, $tobool$i$i = 0, $tobool$i$i$i = 0, $tobool$i$i$i14 = 0, $tobool$i$i$i25 = 0, $tobool$i2$i$i = 0, $tobool9 = 0, $vfn$i = 0, $vfn$i$i$i$i = 0, $vfn$i$i8$i$i = 0, $vfn$i21 = 0, $vtable$i = 0, $vtable$i$i$i$i = 0, $vtable$i$i7$i$i = 0, $vtable$i20 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $agg$tmp$byval_copy = sp;
 $__wbuf = sp + 28|0;
 $__wb = sp + 8|0;
 $__wn = sp + 24|0;
 $__loc = sp + 20|0;
 $__neg = sp + 128|0;
 $agg$tmp = sp + 16|0;
 HEAP32[$__wb>>2] = $__wbuf;
 $__second_$i$i$i$i$i = (($__wb) + 4|0);
 HEAP32[$__second_$i$i$i$i$i>>2] = 411;
 $add$ptr = (($__wbuf) + 100|0);
 __THREW__ = 0;
 invoke_vii(358,($__loc|0),($__iob|0));
 $0 = __THREW__; __THREW__ = 0;
 $1 = $0&1;
 if ($1) {
  $16 = ___cxa_find_matching_catch()|0;
  $17 = tempRet0;
  HEAP32[$__wb>>2] = 0;
  $51 = $__wbuf;$ehselector$slot$041 = $17;$exn$slot$043 = $16;
 } else {
  __THREW__ = 0;
  $call$i12 = (invoke_iii(359,($__loc|0),(4616|0))|0);
  $2 = __THREW__; __THREW__ = 0;
  $3 = $2&1;
  L3: do {
   if (!($3)) {
    HEAP8[$__neg>>0] = 0;
    $4 = HEAP32[$__e>>2]|0;
    HEAP32[$agg$tmp>>2] = $4;
    $__fmtflags_$i = (($__iob) + 4|0);
    $5 = HEAP32[$__fmtflags_$i>>2]|0;
    __THREW__ = 0;
    ;HEAP32[$agg$tmp$byval_copy+0>>2]=HEAP32[$agg$tmp+0>>2]|0;
    $call8 = (invoke_iiiiiiiiiiii(412,($__b|0),($agg$tmp$byval_copy|0),($__intl|0),($__loc|0),($5|0),($__err|0),($__neg|0),($call$i12|0),($__wb|0),($__wn|0),($add$ptr|0))|0);
    $6 = __THREW__; __THREW__ = 0;
    $7 = $6&1;
    if (!($7)) {
     if ($call8) {
      $8 = HEAP8[$__v>>0]|0;
      $and$i$i = $8 & 1;
      $tobool$i$i = ($and$i$i<<24>>24)==(0);
      if ($tobool$i$i) {
       $arrayidx$i$i = (($__v) + 1|0);
       HEAP8[$arrayidx$i$i>>0] = 0;
       HEAP8[$__v>>0] = 0;
      } else {
       $__data_$i$i = (($__v) + 8|0);
       $9 = HEAP32[$__data_$i$i>>2]|0;
       HEAP8[$9>>0] = 0;
       $__size_$i1$i = (($__v) + 4|0);
       HEAP32[$__size_$i1$i>>2] = 0;
      }
      $10 = HEAP8[$__neg>>0]|0;
      $tobool9 = ($10<<24>>24)==(0);
      if (!($tobool9)) {
       $vtable$i = HEAP32[$call$i12>>2]|0;
       $vfn$i = (($vtable$i) + 28|0);
       $11 = HEAP32[$vfn$i>>2]|0;
       __THREW__ = 0;
       $call$i19 = (invoke_iii($11|0,($call$i12|0),45)|0);
       $12 = __THREW__; __THREW__ = 0;
       $13 = $12&1;
       if ($13) {
        break;
       }
       __THREW__ = 0;
       invoke_vii(415,($__v|0),($call$i19|0));
       $14 = __THREW__; __THREW__ = 0;
       $15 = $14&1;
       if ($15) {
        break;
       }
      }
      $vtable$i20 = HEAP32[$call$i12>>2]|0;
      $vfn$i21 = (($vtable$i20) + 28|0);
      $18 = HEAP32[$vfn$i21>>2]|0;
      __THREW__ = 0;
      $call$i2223 = (invoke_iii($18|0,($call$i12|0),48)|0);
      $19 = __THREW__; __THREW__ = 0;
      $20 = $19&1;
      if ($20) {
       break;
      }
      $21 = HEAP32[$__wb>>2]|0;
      $22 = HEAP32[$__wn>>2]|0;
      $add$ptr1731 = (($22) + -1|0);
      $cmp32 = ($21>>>0)<($add$ptr1731>>>0);
      L17: do {
       if ($cmp32) {
        $__w$033 = $21;
        while(1) {
         $23 = HEAP8[$__w$033>>0]|0;
         $cmp19 = ($23<<24>>24)==($call$i2223<<24>>24);
         $incdec$ptr = (($__w$033) + 1|0);
         if (!($cmp19)) {
          $__w$0$lcssa = $__w$033;
          break L17;
         }
         $cmp = ($incdec$ptr>>>0)<($add$ptr1731>>>0);
         if ($cmp) {
          $__w$033 = $incdec$ptr;
         } else {
          $__w$0$lcssa = $incdec$ptr;
          break;
         }
        }
       } else {
        $__w$0$lcssa = $21;
       }
      } while(0);
      __THREW__ = 0;
      (invoke_iiii(419,($__v|0),($__w$0$lcssa|0),($22|0))|0);
      $24 = __THREW__; __THREW__ = 0;
      $25 = $24&1;
      if ($25) {
       break;
      }
     }
     $26 = HEAP32[$__b>>2]|0;
     $tobool$i$i$i25 = ($26|0)==(0|0);
     do {
      if ($tobool$i$i$i25) {
       $32 = 0;
      } else {
       $__ninp_$i$i$i$i = (($26) + 12|0);
       $27 = HEAP32[$__ninp_$i$i$i$i>>2]|0;
       $__einp_$i$i$i$i = (($26) + 16|0);
       $28 = HEAP32[$__einp_$i$i$i$i>>2]|0;
       $cmp$i$i$i$i = ($27|0)==($28|0);
       if ($cmp$i$i$i$i) {
        $vtable$i$i$i$i = HEAP32[$26>>2]|0;
        $vfn$i$i$i$i = (($vtable$i$i$i$i) + 36|0);
        $29 = HEAP32[$vfn$i$i$i$i>>2]|0;
        __THREW__ = 0;
        $call$i$i$i$i27 = (invoke_ii($29|0,($26|0))|0);
        $30 = __THREW__; __THREW__ = 0;
        $31 = $30&1;
        if ($31) {
         break L3;
        }
        $cmp$i1$i$i$i = ($call$i$i$i$i27|0)==(-1);
        if ($cmp$i1$i$i$i) {
         HEAP32[$__b>>2] = 0;
         $32 = 0;
         break;
        } else {
         $$pre$i$i$i = HEAP32[$__b>>2]|0;
         $32 = $$pre$i$i$i;
         break;
        }
       } else {
        $32 = $26;
       }
      }
     } while(0);
     $cmp$i$i$i = ($32|0)==(0|0);
     $tobool$i2$i$i = ($4|0)==(0|0);
     do {
      if ($tobool$i2$i$i) {
       label = 29;
      } else {
       $__ninp_$i$i3$i$i = (($4) + 12|0);
       $33 = HEAP32[$__ninp_$i$i3$i$i>>2]|0;
       $__einp_$i$i4$i$i = (($4) + 16|0);
       $34 = HEAP32[$__einp_$i$i4$i$i>>2]|0;
       $cmp$i$i5$i$i = ($33|0)==($34|0);
       if (!($cmp$i$i5$i$i)) {
        if ($cmp$i$i$i) {
         break;
        } else {
         label = 31;
         break;
        }
       }
       $vtable$i$i7$i$i = HEAP32[$4>>2]|0;
       $vfn$i$i8$i$i = (($vtable$i$i7$i$i) + 36|0);
       $35 = HEAP32[$vfn$i$i8$i$i>>2]|0;
       __THREW__ = 0;
       $call$i$i9$i$i28 = (invoke_ii($35|0,($4|0))|0);
       $36 = __THREW__; __THREW__ = 0;
       $37 = $36&1;
       if ($37) {
        break L3;
       }
       $cmp$i1$i10$i$i = ($call$i$i9$i$i28|0)==(-1);
       if ($cmp$i1$i10$i$i) {
        HEAP32[$__e>>2] = 0;
        label = 29;
        break;
       } else {
        $cmp$i15$i$i = ($4|0)==(0|0);
        $cmptmp$i$i = $cmp$i$i$i ^ $cmp$i15$i$i;
        if ($cmptmp$i$i) {
         break;
        } else {
         label = 31;
         break;
        }
       }
      }
     } while(0);
     if ((label|0) == 29) {
      if ($cmp$i$i$i) {
       label = 31;
      }
     }
     if ((label|0) == 31) {
      $38 = HEAP32[$__err>>2]|0;
      $or = $38 | 2;
      HEAP32[$__err>>2] = $or;
     }
     $39 = HEAP32[$__b>>2]|0;
     HEAP32[$agg$result>>2] = $39;
     $40 = HEAP32[$__loc>>2]|0;
     (__ZNSt3__114__shared_count16__release_sharedEv($40)|0);
     $41 = HEAP32[$__wb>>2]|0;
     HEAP32[$__wb>>2] = 0;
     $tobool$i$i$i14 = ($41|0)==(0|0);
     if ($tobool$i$i$i14) {
      STACKTOP = sp;return;
     }
     $42 = HEAP32[$__second_$i$i$i$i$i>>2]|0;
     __THREW__ = 0;
     invoke_vi($42|0,($41|0));
     $43 = __THREW__; __THREW__ = 0;
     $44 = $43&1;
     if ($44) {
      $45 = ___cxa_find_matching_catch(0|0)|0;
      $46 = tempRet0;
      ___clang_call_terminate($45);
      // unreachable;
     } else {
      STACKTOP = sp;return;
     }
    }
   }
  } while(0);
  $47 = ___cxa_find_matching_catch()|0;
  $48 = tempRet0;
  $49 = HEAP32[$__loc>>2]|0;
  (__ZNSt3__114__shared_count16__release_sharedEv($49)|0);
  $$pre = HEAP32[$__wb>>2]|0;
  HEAP32[$__wb>>2] = 0;
  $tobool$i$i$i = ($$pre|0)==(0|0);
  if ($tobool$i$i$i) {
   $ehselector$slot$042 = $48;$exn$slot$044 = $47;
   ___resumeException($exn$slot$044|0);
   // unreachable;
  } else {
   $51 = $$pre;$ehselector$slot$041 = $48;$exn$slot$043 = $47;
  }
 }
 $50 = HEAP32[$__second_$i$i$i$i$i>>2]|0;
 __THREW__ = 0;
 invoke_vi($50|0,($51|0));
 $52 = __THREW__; __THREW__ = 0;
 $53 = $52&1;
 if ($53) {
  $54 = ___cxa_find_matching_catch(0|0)|0;
  $55 = tempRet0;
  ___clang_call_terminate($54);
  // unreachable;
 } else {
  $ehselector$slot$042 = $ehselector$slot$041;$exn$slot$044 = $exn$slot$043;
  ___resumeException($exn$slot$044|0);
  // unreachable;
 }
}
function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendIPcEENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueERS5_E4typeES9_S9_($this,$__first,$__last) {
 $this = $this|0;
 $__first = $__first|0;
 $__last = $__last|0;
 var $$pre = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__data_$i$i = 0, $__first$addr$033 = 0, $__p$034 = 0, $__size_$i2$i = 0, $__size_$i2$i19 = 0, $add = 0, $add$ptr = 0, $add9 = 0, $and$i$i = 0;
 var $and$i$i17 = 0, $and$i$i22 = 0, $and$i1$i = 0, $arrayidx$i$i = 0, $cmp = 0, $cmp7 = 0, $cond$i26 = 0, $cond$i31 = 0, $cond$i38 = 0, $conv$i$i = 0, $conv$i$i20 = 0, $incdec$ptr = 0, $incdec$ptr8 = 0, $phitmp$i = 0, $scevgep = 0, $scevgep35 = 0, $scevgep36 = 0, $shl$i$i = 0, $shr1$i$i = 0, $sub = 0;
 var $sub$ptr$lhs$cast$i$i = 0, $sub$ptr$rhs$cast$i$i = 0, $sub$ptr$sub$i$i = 0, $sub5 = 0, $tobool = 0, $tobool$i$i = 0, $tobool$i$i18 = 0, $tobool$i$i23 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $sub$ptr$rhs$cast$i$i = $__first;
 $0 = HEAP8[$this>>0]|0;
 $and$i$i = $0 & 1;
 $tobool$i$i = ($and$i$i<<24>>24)==(0);
 if ($tobool$i$i) {
  $conv$i$i = $0&255;
  $shr1$i$i = $conv$i$i >>> 1;
  $9 = $0;$cond$i31 = 10;$cond$i38 = $shr1$i$i;
 } else {
  $__size_$i2$i = (($this) + 4|0);
  $1 = HEAP32[$__size_$i2$i>>2]|0;
  $2 = HEAP32[$this>>2]|0;
  $and$i1$i = $2 & -2;
  $phitmp$i = (($and$i1$i) + -1)|0;
  $3 = $2&255;
  $9 = $3;$cond$i31 = $phitmp$i;$cond$i38 = $1;
 }
 $sub$ptr$lhs$cast$i$i = $__last;
 $sub$ptr$sub$i$i = (($sub$ptr$lhs$cast$i$i) - ($sub$ptr$rhs$cast$i$i))|0;
 $tobool = ($__last|0)==($__first|0);
 if ($tobool) {
  STACKTOP = sp;return ($this|0);
 }
 $sub = (($cond$i31) - ($cond$i38))|0;
 $cmp = ($sub>>>0)<($sub$ptr$sub$i$i>>>0);
 if ($cmp) {
  $add = (($cond$i38) + ($sub$ptr$sub$i$i))|0;
  $sub5 = (($add) - ($cond$i31))|0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9__grow_byEjjjjjj($this,$cond$i31,$sub5,$cond$i38,$cond$i38,0,0);
  $$pre = HEAP8[$this>>0]|0;
  $4 = $$pre;
 } else {
  $4 = $9;
 }
 $and$i$i22 = $4 & 1;
 $tobool$i$i23 = ($and$i$i22<<24>>24)==(0);
 if ($tobool$i$i23) {
  $arrayidx$i$i = (($this) + 1|0);
  $cond$i26 = $arrayidx$i$i;
 } else {
  $__data_$i$i = (($this) + 8|0);
  $5 = HEAP32[$__data_$i$i>>2]|0;
  $cond$i26 = $5;
 }
 $add$ptr = (($cond$i26) + ($cond$i38)|0);
 $6 = (($cond$i38) - ($sub$ptr$rhs$cast$i$i))|0;
 $scevgep = (($__last) + ($6)|0);
 $scevgep35 = $scevgep;
 $__first$addr$033 = $__first;$__p$034 = $add$ptr;
 while(1) {
  $7 = HEAP8[$__first$addr$033>>0]|0;
  HEAP8[$__p$034>>0] = $7;
  $incdec$ptr = (($__p$034) + 1|0);
  $incdec$ptr8 = (($__first$addr$033) + 1|0);
  $cmp7 = ($incdec$ptr8|0)==($__last|0);
  if ($cmp7) {
   break;
  } else {
   $__first$addr$033 = $incdec$ptr8;$__p$034 = $incdec$ptr;
  }
 }
 $scevgep36 = (($cond$i26) + ($scevgep35)|0);
 HEAP8[$scevgep36>>0] = 0;
 $add9 = (($cond$i38) + ($sub$ptr$sub$i$i))|0;
 $8 = HEAP8[$this>>0]|0;
 $and$i$i17 = $8 & 1;
 $tobool$i$i18 = ($and$i$i17<<24>>24)==(0);
 if ($tobool$i$i18) {
  $shl$i$i = $add9 << 1;
  $conv$i$i20 = $shl$i$i&255;
  HEAP8[$this>>0] = $conv$i$i20;
  STACKTOP = sp;return ($this|0);
 } else {
  $__size_$i2$i19 = (($this) + 4|0);
  HEAP32[$__size_$i2$i19>>2] = $add9;
  STACKTOP = sp;return ($this|0);
 }
 return 0|0;
}
function __ZNSt3__111__money_getIcE13__gather_infoEbRKNS_6localeERNS_10money_base7patternERcS8_RNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEESF_SF_SF_Ri($__intl,$__loc,$__pat,$__dp,$__ts,$__grp,$__sym,$__psn,$__nsn,$__fd) {
 $__intl = $__intl|0;
 $__loc = $__loc|0;
 $__pat = $__pat|0;
 $__dp = $__dp|0;
 $__ts = $__ts|0;
 $__grp = $__grp|0;
 $__sym = $__sym|0;
 $__psn = $__psn|0;
 $__nsn = $__nsn|0;
 $__fd = $__fd|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $7 = 0, $8 = 0, $9 = 0, $__data_$i$i$i$i = 0, $__data_$i$i$i$i119 = 0, $__data_$i$i$i$i133 = 0, $__data_$i$i$i$i31 = 0, $__data_$i$i$i$i51 = 0, $__data_$i$i$i$i65 = 0, $__data_$i$i$i$i85 = 0, $__data_$i$i$i$i99 = 0, $__size_$i1$i$i$i = 0, $__size_$i1$i$i$i100 = 0, $__size_$i1$i$i$i120 = 0, $__size_$i1$i$i$i134 = 0, $__size_$i1$i$i$i32 = 0, $__size_$i1$i$i$i52 = 0;
 var $__size_$i1$i$i$i66 = 0, $__size_$i1$i$i$i86 = 0, $and$i$i$i$i = 0, $and$i$i$i$i117 = 0, $and$i$i$i$i131 = 0, $and$i$i$i$i29 = 0, $and$i$i$i$i49 = 0, $and$i$i$i$i63 = 0, $and$i$i$i$i83 = 0, $and$i$i$i$i97 = 0, $arrayidx$i$i$i$i = 0, $arrayidx$i$i$i$i103 = 0, $arrayidx$i$i$i$i123 = 0, $arrayidx$i$i$i$i137 = 0, $arrayidx$i$i$i$i35 = 0, $arrayidx$i$i$i$i55 = 0, $arrayidx$i$i$i$i69 = 0, $arrayidx$i$i$i$i89 = 0, $call$i = 0, $call$i110 = 0;
 var $call$i113 = 0, $call$i144 = 0, $call$i42 = 0, $call$i45 = 0, $call$i76 = 0, $call$i77 = 0, $ref$tmp = 0, $ref$tmp1 = 0, $ref$tmp14 = 0, $ref$tmp15 = 0, $ref$tmp17 = 0, $ref$tmp21 = 0, $ref$tmp23 = 0, $ref$tmp3 = 0, $ref$tmp7 = 0, $ref$tmp9 = 0, $storemerge = 0, $tobool$i$i$i$i = 0, $tobool$i$i$i$i118 = 0, $tobool$i$i$i$i132 = 0;
 var $tobool$i$i$i$i30 = 0, $tobool$i$i$i$i50 = 0, $tobool$i$i$i$i64 = 0, $tobool$i$i$i$i84 = 0, $tobool$i$i$i$i98 = 0, $vfn$i = 0, $vfn$i109 = 0, $vfn$i112 = 0, $vfn$i115 = 0, $vfn$i129 = 0, $vfn$i143 = 0, $vfn$i25 = 0, $vfn$i27 = 0, $vfn$i41 = 0, $vfn$i44 = 0, $vfn$i47 = 0, $vfn$i61 = 0, $vfn$i75 = 0, $vfn$i79 = 0, $vfn$i81 = 0;
 var $vfn$i95 = 0, $vtable$i = 0, $vtable$i108 = 0, $vtable$i111 = 0, $vtable$i114 = 0, $vtable$i128 = 0, $vtable$i142 = 0, $vtable$i24 = 0, $vtable$i26 = 0, $vtable$i40 = 0, $vtable$i43 = 0, $vtable$i46 = 0, $vtable$i60 = 0, $vtable$i74 = 0, $vtable$i78 = 0, $vtable$i80 = 0, $vtable$i94 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $ref$tmp = sp;
 $ref$tmp1 = sp + 40|0;
 $ref$tmp3 = sp + 76|0;
 $ref$tmp7 = sp + 4|0;
 $ref$tmp9 = sp + 88|0;
 $ref$tmp14 = sp + 100|0;
 $ref$tmp15 = sp + 28|0;
 $ref$tmp17 = sp + 64|0;
 $ref$tmp21 = sp + 52|0;
 $ref$tmp23 = sp + 16|0;
 if ($__intl) {
  $call$i = (__ZNKSt3__16locale9use_facetERNS0_2idE($__loc,4056)|0);
  $vtable$i = HEAP32[$call$i>>2]|0;
  $vfn$i = (($vtable$i) + 44|0);
  $0 = HEAP32[$vfn$i>>2]|0;
  FUNCTION_TABLE_vii[$0 & 511]($ref$tmp,$call$i);
  $1 = HEAP32[$ref$tmp>>2]|0;
  HEAP8[$__pat>>0]=$1&255;HEAP8[$__pat+1>>0]=($1>>8)&255;HEAP8[$__pat+2>>0]=($1>>16)&255;HEAP8[$__pat+3>>0]=$1>>24;
  $vtable$i24 = HEAP32[$call$i>>2]|0;
  $vfn$i25 = (($vtable$i24) + 32|0);
  $2 = HEAP32[$vfn$i25>>2]|0;
  FUNCTION_TABLE_vii[$2 & 511]($ref$tmp1,$call$i);
  $3 = HEAP8[$__nsn>>0]|0;
  $and$i$i$i$i = $3 & 1;
  $tobool$i$i$i$i = ($and$i$i$i$i<<24>>24)==(0);
  if ($tobool$i$i$i$i) {
   $arrayidx$i$i$i$i = (($__nsn) + 1|0);
   HEAP8[$arrayidx$i$i$i$i>>0] = 0;
   HEAP8[$__nsn>>0] = 0;
  } else {
   $__data_$i$i$i$i = (($__nsn) + 8|0);
   $4 = HEAP32[$__data_$i$i$i$i>>2]|0;
   HEAP8[$4>>0] = 0;
   $__size_$i1$i$i$i = (($__nsn) + 4|0);
   HEAP32[$__size_$i1$i$i$i>>2] = 0;
  }
  __THREW__ = 0;
  invoke_vii(420,($__nsn|0),0);
  $5 = __THREW__; __THREW__ = 0;
  $6 = $5&1;
  if ($6) {
   $7 = ___cxa_find_matching_catch(0|0)|0;
   $8 = tempRet0;
   ___clang_call_terminate($7);
   // unreachable;
  }
  ;HEAP32[$__nsn+0>>2]=HEAP32[$ref$tmp1+0>>2]|0;HEAP32[$__nsn+4>>2]=HEAP32[$ref$tmp1+4>>2]|0;HEAP32[$__nsn+8>>2]=HEAP32[$ref$tmp1+8>>2]|0;
  ;HEAP32[$ref$tmp1+0>>2]=0|0;HEAP32[$ref$tmp1+4>>2]=0|0;HEAP32[$ref$tmp1+8>>2]=0|0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($ref$tmp1);
  $vtable$i26 = HEAP32[$call$i>>2]|0;
  $vfn$i27 = (($vtable$i26) + 28|0);
  $9 = HEAP32[$vfn$i27>>2]|0;
  FUNCTION_TABLE_vii[$9 & 511]($ref$tmp3,$call$i);
  $10 = HEAP8[$__psn>>0]|0;
  $and$i$i$i$i29 = $10 & 1;
  $tobool$i$i$i$i30 = ($and$i$i$i$i29<<24>>24)==(0);
  if ($tobool$i$i$i$i30) {
   $arrayidx$i$i$i$i35 = (($__psn) + 1|0);
   HEAP8[$arrayidx$i$i$i$i35>>0] = 0;
   HEAP8[$__psn>>0] = 0;
  } else {
   $__data_$i$i$i$i31 = (($__psn) + 8|0);
   $11 = HEAP32[$__data_$i$i$i$i31>>2]|0;
   HEAP8[$11>>0] = 0;
   $__size_$i1$i$i$i32 = (($__psn) + 4|0);
   HEAP32[$__size_$i1$i$i$i32>>2] = 0;
  }
  __THREW__ = 0;
  invoke_vii(420,($__psn|0),0);
  $12 = __THREW__; __THREW__ = 0;
  $13 = $12&1;
  if ($13) {
   $14 = ___cxa_find_matching_catch(0|0)|0;
   $15 = tempRet0;
   ___clang_call_terminate($14);
   // unreachable;
  }
  ;HEAP32[$__psn+0>>2]=HEAP32[$ref$tmp3+0>>2]|0;HEAP32[$__psn+4>>2]=HEAP32[$ref$tmp3+4>>2]|0;HEAP32[$__psn+8>>2]=HEAP32[$ref$tmp3+8>>2]|0;
  ;HEAP32[$ref$tmp3+0>>2]=0|0;HEAP32[$ref$tmp3+4>>2]=0|0;HEAP32[$ref$tmp3+8>>2]=0|0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($ref$tmp3);
  $vtable$i40 = HEAP32[$call$i>>2]|0;
  $vfn$i41 = (($vtable$i40) + 12|0);
  $16 = HEAP32[$vfn$i41>>2]|0;
  $call$i42 = (FUNCTION_TABLE_ii[$16 & 511]($call$i)|0);
  HEAP8[$__dp>>0] = $call$i42;
  $vtable$i43 = HEAP32[$call$i>>2]|0;
  $vfn$i44 = (($vtable$i43) + 16|0);
  $17 = HEAP32[$vfn$i44>>2]|0;
  $call$i45 = (FUNCTION_TABLE_ii[$17 & 511]($call$i)|0);
  HEAP8[$__ts>>0] = $call$i45;
  $vtable$i46 = HEAP32[$call$i>>2]|0;
  $vfn$i47 = (($vtable$i46) + 20|0);
  $18 = HEAP32[$vfn$i47>>2]|0;
  FUNCTION_TABLE_vii[$18 & 511]($ref$tmp7,$call$i);
  $19 = HEAP8[$__grp>>0]|0;
  $and$i$i$i$i49 = $19 & 1;
  $tobool$i$i$i$i50 = ($and$i$i$i$i49<<24>>24)==(0);
  if ($tobool$i$i$i$i50) {
   $arrayidx$i$i$i$i55 = (($__grp) + 1|0);
   HEAP8[$arrayidx$i$i$i$i55>>0] = 0;
   HEAP8[$__grp>>0] = 0;
  } else {
   $__data_$i$i$i$i51 = (($__grp) + 8|0);
   $20 = HEAP32[$__data_$i$i$i$i51>>2]|0;
   HEAP8[$20>>0] = 0;
   $__size_$i1$i$i$i52 = (($__grp) + 4|0);
   HEAP32[$__size_$i1$i$i$i52>>2] = 0;
  }
  __THREW__ = 0;
  invoke_vii(420,($__grp|0),0);
  $21 = __THREW__; __THREW__ = 0;
  $22 = $21&1;
  if ($22) {
   $23 = ___cxa_find_matching_catch(0|0)|0;
   $24 = tempRet0;
   ___clang_call_terminate($23);
   // unreachable;
  }
  ;HEAP32[$__grp+0>>2]=HEAP32[$ref$tmp7+0>>2]|0;HEAP32[$__grp+4>>2]=HEAP32[$ref$tmp7+4>>2]|0;HEAP32[$__grp+8>>2]=HEAP32[$ref$tmp7+8>>2]|0;
  ;HEAP32[$ref$tmp7+0>>2]=0|0;HEAP32[$ref$tmp7+4>>2]=0|0;HEAP32[$ref$tmp7+8>>2]=0|0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($ref$tmp7);
  $vtable$i60 = HEAP32[$call$i>>2]|0;
  $vfn$i61 = (($vtable$i60) + 24|0);
  $25 = HEAP32[$vfn$i61>>2]|0;
  FUNCTION_TABLE_vii[$25 & 511]($ref$tmp9,$call$i);
  $26 = HEAP8[$__sym>>0]|0;
  $and$i$i$i$i63 = $26 & 1;
  $tobool$i$i$i$i64 = ($and$i$i$i$i63<<24>>24)==(0);
  if ($tobool$i$i$i$i64) {
   $arrayidx$i$i$i$i69 = (($__sym) + 1|0);
   HEAP8[$arrayidx$i$i$i$i69>>0] = 0;
   HEAP8[$__sym>>0] = 0;
  } else {
   $__data_$i$i$i$i65 = (($__sym) + 8|0);
   $27 = HEAP32[$__data_$i$i$i$i65>>2]|0;
   HEAP8[$27>>0] = 0;
   $__size_$i1$i$i$i66 = (($__sym) + 4|0);
   HEAP32[$__size_$i1$i$i$i66>>2] = 0;
  }
  __THREW__ = 0;
  invoke_vii(420,($__sym|0),0);
  $28 = __THREW__; __THREW__ = 0;
  $29 = $28&1;
  if ($29) {
   $30 = ___cxa_find_matching_catch(0|0)|0;
   $31 = tempRet0;
   ___clang_call_terminate($30);
   // unreachable;
  }
  ;HEAP32[$__sym+0>>2]=HEAP32[$ref$tmp9+0>>2]|0;HEAP32[$__sym+4>>2]=HEAP32[$ref$tmp9+4>>2]|0;HEAP32[$__sym+8>>2]=HEAP32[$ref$tmp9+8>>2]|0;
  ;HEAP32[$ref$tmp9+0>>2]=0|0;HEAP32[$ref$tmp9+4>>2]=0|0;HEAP32[$ref$tmp9+8>>2]=0|0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($ref$tmp9);
  $vtable$i74 = HEAP32[$call$i>>2]|0;
  $vfn$i75 = (($vtable$i74) + 36|0);
  $32 = HEAP32[$vfn$i75>>2]|0;
  $call$i76 = (FUNCTION_TABLE_ii[$32 & 511]($call$i)|0);
  $storemerge = $call$i76;
  HEAP32[$__fd>>2] = $storemerge;
  STACKTOP = sp;return;
 } else {
  $call$i77 = (__ZNKSt3__16locale9use_facetERNS0_2idE($__loc,3992)|0);
  $vtable$i78 = HEAP32[$call$i77>>2]|0;
  $vfn$i79 = (($vtable$i78) + 44|0);
  $33 = HEAP32[$vfn$i79>>2]|0;
  FUNCTION_TABLE_vii[$33 & 511]($ref$tmp14,$call$i77);
  $34 = HEAP32[$ref$tmp14>>2]|0;
  HEAP8[$__pat>>0]=$34&255;HEAP8[$__pat+1>>0]=($34>>8)&255;HEAP8[$__pat+2>>0]=($34>>16)&255;HEAP8[$__pat+3>>0]=$34>>24;
  $vtable$i80 = HEAP32[$call$i77>>2]|0;
  $vfn$i81 = (($vtable$i80) + 32|0);
  $35 = HEAP32[$vfn$i81>>2]|0;
  FUNCTION_TABLE_vii[$35 & 511]($ref$tmp15,$call$i77);
  $36 = HEAP8[$__nsn>>0]|0;
  $and$i$i$i$i83 = $36 & 1;
  $tobool$i$i$i$i84 = ($and$i$i$i$i83<<24>>24)==(0);
  if ($tobool$i$i$i$i84) {
   $arrayidx$i$i$i$i89 = (($__nsn) + 1|0);
   HEAP8[$arrayidx$i$i$i$i89>>0] = 0;
   HEAP8[$__nsn>>0] = 0;
  } else {
   $__data_$i$i$i$i85 = (($__nsn) + 8|0);
   $37 = HEAP32[$__data_$i$i$i$i85>>2]|0;
   HEAP8[$37>>0] = 0;
   $__size_$i1$i$i$i86 = (($__nsn) + 4|0);
   HEAP32[$__size_$i1$i$i$i86>>2] = 0;
  }
  __THREW__ = 0;
  invoke_vii(420,($__nsn|0),0);
  $38 = __THREW__; __THREW__ = 0;
  $39 = $38&1;
  if ($39) {
   $40 = ___cxa_find_matching_catch(0|0)|0;
   $41 = tempRet0;
   ___clang_call_terminate($40);
   // unreachable;
  }
  ;HEAP32[$__nsn+0>>2]=HEAP32[$ref$tmp15+0>>2]|0;HEAP32[$__nsn+4>>2]=HEAP32[$ref$tmp15+4>>2]|0;HEAP32[$__nsn+8>>2]=HEAP32[$ref$tmp15+8>>2]|0;
  ;HEAP32[$ref$tmp15+0>>2]=0|0;HEAP32[$ref$tmp15+4>>2]=0|0;HEAP32[$ref$tmp15+8>>2]=0|0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($ref$tmp15);
  $vtable$i94 = HEAP32[$call$i77>>2]|0;
  $vfn$i95 = (($vtable$i94) + 28|0);
  $42 = HEAP32[$vfn$i95>>2]|0;
  FUNCTION_TABLE_vii[$42 & 511]($ref$tmp17,$call$i77);
  $43 = HEAP8[$__psn>>0]|0;
  $and$i$i$i$i97 = $43 & 1;
  $tobool$i$i$i$i98 = ($and$i$i$i$i97<<24>>24)==(0);
  if ($tobool$i$i$i$i98) {
   $arrayidx$i$i$i$i103 = (($__psn) + 1|0);
   HEAP8[$arrayidx$i$i$i$i103>>0] = 0;
   HEAP8[$__psn>>0] = 0;
  } else {
   $__data_$i$i$i$i99 = (($__psn) + 8|0);
   $44 = HEAP32[$__data_$i$i$i$i99>>2]|0;
   HEAP8[$44>>0] = 0;
   $__size_$i1$i$i$i100 = (($__psn) + 4|0);
   HEAP32[$__size_$i1$i$i$i100>>2] = 0;
  }
  __THREW__ = 0;
  invoke_vii(420,($__psn|0),0);
  $45 = __THREW__; __THREW__ = 0;
  $46 = $45&1;
  if ($46) {
   $47 = ___cxa_find_matching_catch(0|0)|0;
   $48 = tempRet0;
   ___clang_call_terminate($47);
   // unreachable;
  }
  ;HEAP32[$__psn+0>>2]=HEAP32[$ref$tmp17+0>>2]|0;HEAP32[$__psn+4>>2]=HEAP32[$ref$tmp17+4>>2]|0;HEAP32[$__psn+8>>2]=HEAP32[$ref$tmp17+8>>2]|0;
  ;HEAP32[$ref$tmp17+0>>2]=0|0;HEAP32[$ref$tmp17+4>>2]=0|0;HEAP32[$ref$tmp17+8>>2]=0|0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($ref$tmp17);
  $vtable$i108 = HEAP32[$call$i77>>2]|0;
  $vfn$i109 = (($vtable$i108) + 12|0);
  $49 = HEAP32[$vfn$i109>>2]|0;
  $call$i110 = (FUNCTION_TABLE_ii[$49 & 511]($call$i77)|0);
  HEAP8[$__dp>>0] = $call$i110;
  $vtable$i111 = HEAP32[$call$i77>>2]|0;
  $vfn$i112 = (($vtable$i111) + 16|0);
  $50 = HEAP32[$vfn$i112>>2]|0;
  $call$i113 = (FUNCTION_TABLE_ii[$50 & 511]($call$i77)|0);
  HEAP8[$__ts>>0] = $call$i113;
  $vtable$i114 = HEAP32[$call$i77>>2]|0;
  $vfn$i115 = (($vtable$i114) + 20|0);
  $51 = HEAP32[$vfn$i115>>2]|0;
  FUNCTION_TABLE_vii[$51 & 511]($ref$tmp21,$call$i77);
  $52 = HEAP8[$__grp>>0]|0;
  $and$i$i$i$i117 = $52 & 1;
  $tobool$i$i$i$i118 = ($and$i$i$i$i117<<24>>24)==(0);
  if ($tobool$i$i$i$i118) {
   $arrayidx$i$i$i$i123 = (($__grp) + 1|0);
   HEAP8[$arrayidx$i$i$i$i123>>0] = 0;
   HEAP8[$__grp>>0] = 0;
  } else {
   $__data_$i$i$i$i119 = (($__grp) + 8|0);
   $53 = HEAP32[$__data_$i$i$i$i119>>2]|0;
   HEAP8[$53>>0] = 0;
   $__size_$i1$i$i$i120 = (($__grp) + 4|0);
   HEAP32[$__size_$i1$i$i$i120>>2] = 0;
  }
  __THREW__ = 0;
  invoke_vii(420,($__grp|0),0);
  $54 = __THREW__; __THREW__ = 0;
  $55 = $54&1;
  if ($55) {
   $56 = ___cxa_find_matching_catch(0|0)|0;
   $57 = tempRet0;
   ___clang_call_terminate($56);
   // unreachable;
  }
  ;HEAP32[$__grp+0>>2]=HEAP32[$ref$tmp21+0>>2]|0;HEAP32[$__grp+4>>2]=HEAP32[$ref$tmp21+4>>2]|0;HEAP32[$__grp+8>>2]=HEAP32[$ref$tmp21+8>>2]|0;
  ;HEAP32[$ref$tmp21+0>>2]=0|0;HEAP32[$ref$tmp21+4>>2]=0|0;HEAP32[$ref$tmp21+8>>2]=0|0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($ref$tmp21);
  $vtable$i128 = HEAP32[$call$i77>>2]|0;
  $vfn$i129 = (($vtable$i128) + 24|0);
  $58 = HEAP32[$vfn$i129>>2]|0;
  FUNCTION_TABLE_vii[$58 & 511]($ref$tmp23,$call$i77);
  $59 = HEAP8[$__sym>>0]|0;
  $and$i$i$i$i131 = $59 & 1;
  $tobool$i$i$i$i132 = ($and$i$i$i$i131<<24>>24)==(0);
  if ($tobool$i$i$i$i132) {
   $arrayidx$i$i$i$i137 = (($__sym) + 1|0);
   HEAP8[$arrayidx$i$i$i$i137>>0] = 0;
   HEAP8[$__sym>>0] = 0;
  } else {
   $__data_$i$i$i$i133 = (($__sym) + 8|0);
   $60 = HEAP32[$__data_$i$i$i$i133>>2]|0;
   HEAP8[$60>>0] = 0;
   $__size_$i1$i$i$i134 = (($__sym) + 4|0);
   HEAP32[$__size_$i1$i$i$i134>>2] = 0;
  }
  __THREW__ = 0;
  invoke_vii(420,($__sym|0),0);
  $61 = __THREW__; __THREW__ = 0;
  $62 = $61&1;
  if ($62) {
   $63 = ___cxa_find_matching_catch(0|0)|0;
   $64 = tempRet0;
   ___clang_call_terminate($63);
   // unreachable;
  }
  ;HEAP32[$__sym+0>>2]=HEAP32[$ref$tmp23+0>>2]|0;HEAP32[$__sym+4>>2]=HEAP32[$ref$tmp23+4>>2]|0;HEAP32[$__sym+8>>2]=HEAP32[$ref$tmp23+8>>2]|0;
  ;HEAP32[$ref$tmp23+0>>2]=0|0;HEAP32[$ref$tmp23+4>>2]=0|0;HEAP32[$ref$tmp23+8>>2]=0|0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($ref$tmp23);
  $vtable$i142 = HEAP32[$call$i77>>2]|0;
  $vfn$i143 = (($vtable$i142) + 36|0);
  $65 = HEAP32[$vfn$i143>>2]|0;
  $call$i144 = (FUNCTION_TABLE_ii[$65 & 511]($call$i77)|0);
  $storemerge = $call$i144;
  HEAP32[$__fd>>2] = $storemerge;
  STACKTOP = sp;return;
 }
}
function __ZNSt3__119__double_or_nothingIcEEvRNS_10unique_ptrIT_PFvPvEEERPS2_S9_($__b,$__n,$__e) {
 $__b = $__b|0;
 $__n = $__n|0;
 $__e = $__e|0;
 var $$pr = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__second_$i$i$i = 0, $add$ptr = 0, $add$ptr26 = 0, $call15 = 0, $cmp = 0, $cmp16 = 0, $cmp3 = 0;
 var $cond14 = 0, $mul4 = 0, $mul4$ = 0, $sub$ptr$lhs$cast = 0, $sub$ptr$lhs$cast7 = 0, $sub$ptr$rhs$cast = 0, $sub$ptr$sub = 0, $sub$ptr$sub9 = 0, $tobool$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $__second_$i$i$i = (($__b) + 4|0);
 $0 = HEAP32[$__second_$i$i$i>>2]|0;
 $cmp = ($0|0)!=(411|0);
 $1 = HEAP32[$__e>>2]|0;
 $2 = HEAP32[$__b>>2]|0;
 $sub$ptr$lhs$cast = $1;
 $sub$ptr$rhs$cast = $2;
 $sub$ptr$sub = (($sub$ptr$lhs$cast) - ($sub$ptr$rhs$cast))|0;
 $cmp3 = ($sub$ptr$sub>>>0)<(2147483647);
 $mul4 = $sub$ptr$sub << 1;
 $mul4$ = $cmp3 ? $mul4 : -1;
 $3 = HEAP32[$__n>>2]|0;
 $sub$ptr$lhs$cast7 = $3;
 $sub$ptr$sub9 = (($sub$ptr$lhs$cast7) - ($sub$ptr$rhs$cast))|0;
 $cond14 = $cmp ? $2 : 0;
 $call15 = (_realloc($cond14,$mul4$)|0);
 $cmp16 = ($call15|0)==(0|0);
 if ($cmp16) {
  __ZSt17__throw_bad_allocv();
 }
 do {
  if ($cmp) {
   HEAP32[$__b>>2] = $call15;
   $9 = $call15;
  } else {
   $$pr = HEAP32[$__b>>2]|0;
   HEAP32[$__b>>2] = $call15;
   $tobool$i$i = ($$pr|0)==(0|0);
   if ($tobool$i$i) {
    $9 = $call15;
   } else {
    $4 = HEAP32[$__second_$i$i$i>>2]|0;
    __THREW__ = 0;
    invoke_vi($4|0,($$pr|0));
    $5 = __THREW__; __THREW__ = 0;
    $6 = $5&1;
    if ($6) {
     $7 = ___cxa_find_matching_catch(0|0)|0;
     $8 = tempRet0;
     ___clang_call_terminate($7);
     // unreachable;
    } else {
     $$pre = HEAP32[$__b>>2]|0;
     $9 = $$pre;
     break;
    }
   }
  }
 } while(0);
 HEAP32[$__second_$i$i$i>>2] = 384;
 $add$ptr = (($9) + ($sub$ptr$sub9)|0);
 HEAP32[$__n>>2] = $add$ptr;
 $10 = HEAP32[$__b>>2]|0;
 $add$ptr26 = (($10) + ($mul4$)|0);
 HEAP32[$__e>>2] = $add$ptr26;
 STACKTOP = sp;return;
}
function __ZNSt3__119__double_or_nothingIjEEvRNS_10unique_ptrIT_PFvPvEEERPS2_S9_($__b,$__n,$__e) {
 $__b = $__b|0;
 $__n = $__n|0;
 $__e = $__e|0;
 var $$pr = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__second_$i$i$i = 0, $add$ptr = 0, $add$ptr27 = 0, $call16 = 0, $cmp = 0, $cmp17 = 0, $cmp3 = 0;
 var $cond15 = 0, $div24 = 0, $mul4 = 0, $mul4$ = 0, $sub$ptr$div10 = 0, $sub$ptr$lhs$cast = 0, $sub$ptr$lhs$cast7 = 0, $sub$ptr$rhs$cast = 0, $sub$ptr$sub = 0, $sub$ptr$sub9 = 0, $tobool$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $__second_$i$i$i = (($__b) + 4|0);
 $0 = HEAP32[$__second_$i$i$i>>2]|0;
 $cmp = ($0|0)!=(411|0);
 $1 = HEAP32[$__e>>2]|0;
 $2 = HEAP32[$__b>>2]|0;
 $sub$ptr$lhs$cast = $1;
 $sub$ptr$rhs$cast = $2;
 $sub$ptr$sub = (($sub$ptr$lhs$cast) - ($sub$ptr$rhs$cast))|0;
 $cmp3 = ($sub$ptr$sub>>>0)<(2147483647);
 $mul4 = $sub$ptr$sub << 1;
 $mul4$ = $cmp3 ? $mul4 : -1;
 $3 = HEAP32[$__n>>2]|0;
 $sub$ptr$lhs$cast7 = $3;
 $sub$ptr$sub9 = (($sub$ptr$lhs$cast7) - ($sub$ptr$rhs$cast))|0;
 $sub$ptr$div10 = $sub$ptr$sub9 >> 2;
 if ($cmp) {
  $cond15 = $2;
 } else {
  $cond15 = 0;
 }
 $call16 = (_realloc($cond15,$mul4$)|0);
 $cmp17 = ($call16|0)==(0|0);
 if ($cmp17) {
  __ZSt17__throw_bad_allocv();
 }
 do {
  if ($cmp) {
   HEAP32[$__b>>2] = $call16;
   $9 = $call16;
  } else {
   $$pr = HEAP32[$__b>>2]|0;
   HEAP32[$__b>>2] = $call16;
   $tobool$i$i = ($$pr|0)==(0|0);
   if ($tobool$i$i) {
    $9 = $call16;
   } else {
    $4 = HEAP32[$__second_$i$i$i>>2]|0;
    __THREW__ = 0;
    invoke_vi($4|0,($$pr|0));
    $5 = __THREW__; __THREW__ = 0;
    $6 = $5&1;
    if ($6) {
     $7 = ___cxa_find_matching_catch(0|0)|0;
     $8 = tempRet0;
     ___clang_call_terminate($7);
     // unreachable;
    } else {
     $$pre = HEAP32[$__b>>2]|0;
     $9 = $$pre;
     break;
    }
   }
  }
 } while(0);
 HEAP32[$__second_$i$i$i>>2] = 384;
 $div24 = $mul4$ >>> 2;
 $add$ptr = (($9) + ($sub$ptr$div10<<2)|0);
 HEAP32[$__n>>2] = $add$ptr;
 $10 = HEAP32[$__b>>2]|0;
 $add$ptr27 = (($10) + ($div24<<2)|0);
 HEAP32[$__e>>2] = $add$ptr27;
 STACKTOP = sp;return;
}
function __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping,$__g,$__g_end,$__err) {
 $__grouping = $__grouping|0;
 $__g = $__g|0;
 $__g_end = $__g_end|0;
 $__err = $__err|0;
 var $$lcssa = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__data_$i$i$i = 0, $__first$addr$08$i$i = 0, $__ig$037 = 0, $__r$038 = 0, $__size_$i2$i = 0, $__size_$i2$i20 = 0;
 var $add$ptr = 0, $add$ptr3 = 0, $and$i$i = 0, $and$i$i$i = 0, $arrayidx$i$i$i = 0, $cmp = 0, $cmp$i$i = 0, $cmp1$i$i = 0, $cmp12 = 0, $cmp15 = 0, $cmp17$i$i = 0, $cmp28 = 0, $cmp30 = 0, $cmp4 = 0, $cmp433 = 0, $cmp5$not = 0, $cmp5$not34 = 0, $cmp9 = 0, $cmp935 = 0, $cond$i = 0;
 var $cond$i$i44 = 0, $cond$i25 = 0, $conv$i$i = 0, $conv$i$i22 = 0, $conv11 = 0, $conv27 = 0, $incdec$ptr = 0, $incdec$ptr$__ig$0 = 0, $incdec$ptr$i$i = 0, $incdec$ptr18 = 0, $incdec$ptr2$i$i = 0, $incdec$ptr6$i$i = 0, $incdec$ptr9$i$i = 0, $or$cond = 0, $or$cond27 = 0, $or$cond27$lcssa = 0, $or$cond2736 = 0, $or$cond2739 = 0, $shr1$i$i = 0, $shr1$i$i23 = 0;
 var $sub$ptr$lhs$cast = 0, $sub$ptr$rhs$cast = 0, $sub$ptr$sub = 0, $tobool$i$i = 0, $tobool$i$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[$__grouping>>0]|0;
 $and$i$i = $0 & 1;
 $tobool$i$i = ($and$i$i<<24>>24)==(0);
 if ($tobool$i$i) {
  $conv$i$i = $0&255;
  $shr1$i$i = $conv$i$i >>> 1;
  $cond$i = $shr1$i$i;
 } else {
  $__size_$i2$i = (($__grouping) + 4|0);
  $1 = HEAP32[$__size_$i2$i>>2]|0;
  $cond$i = $1;
 }
 $cmp = ($cond$i|0)==(0);
 if ($cmp) {
  STACKTOP = sp;return;
 }
 $cmp$i$i = ($__g|0)==($__g_end|0);
 if ($cmp$i$i) {
  $4 = $0;
 } else {
  $incdec$ptr6$i$i = (($__g_end) + -4|0);
  $cmp17$i$i = ($incdec$ptr6$i$i>>>0)>($__g>>>0);
  if ($cmp17$i$i) {
   $__first$addr$08$i$i = $__g;$incdec$ptr9$i$i = $incdec$ptr6$i$i;
   while(1) {
    $2 = HEAP32[$__first$addr$08$i$i>>2]|0;
    $3 = HEAP32[$incdec$ptr9$i$i>>2]|0;
    HEAP32[$__first$addr$08$i$i>>2] = $3;
    HEAP32[$incdec$ptr9$i$i>>2] = $2;
    $incdec$ptr2$i$i = (($__first$addr$08$i$i) + 4|0);
    $incdec$ptr$i$i = (($incdec$ptr9$i$i) + -4|0);
    $cmp1$i$i = ($incdec$ptr2$i$i>>>0)<($incdec$ptr$i$i>>>0);
    if ($cmp1$i$i) {
     $__first$addr$08$i$i = $incdec$ptr2$i$i;$incdec$ptr9$i$i = $incdec$ptr$i$i;
    } else {
     break;
    }
   }
   $$pre = HEAP8[$__grouping>>0]|0;
   $4 = $$pre;
  } else {
   $4 = $0;
  }
 }
 $and$i$i$i = $4 & 1;
 $tobool$i$i$i = ($and$i$i$i<<24>>24)==(0);
 if ($tobool$i$i$i) {
  $arrayidx$i$i$i = (($__grouping) + 1|0);
  $conv$i$i22 = $4&255;
  $shr1$i$i23 = $conv$i$i22 >>> 1;
  $cond$i$i44 = $arrayidx$i$i$i;$cond$i25 = $shr1$i$i23;
 } else {
  $__data_$i$i$i = (($__grouping) + 8|0);
  $5 = HEAP32[$__data_$i$i$i>>2]|0;
  $__size_$i2$i20 = (($__grouping) + 4|0);
  $6 = HEAP32[$__size_$i2$i20>>2]|0;
  $cond$i$i44 = $5;$cond$i25 = $6;
 }
 $add$ptr3 = (($__g_end) + -4|0);
 $cmp433 = ($add$ptr3>>>0)>($__g>>>0);
 $7 = HEAP8[$cond$i$i44>>0]|0;
 $cmp5$not34 = ($7<<24>>24)<(1);
 $cmp935 = ($7<<24>>24)==(127);
 $or$cond2736 = $cmp5$not34 | $cmp935;
 L18: do {
  if ($cmp433) {
   $add$ptr = (($cond$i$i44) + ($cond$i25)|0);
   $sub$ptr$lhs$cast = $add$ptr;
   $8 = $7;$__ig$037 = $cond$i$i44;$__r$038 = $__g;$or$cond2739 = $or$cond2736;
   while(1) {
    if (!($or$cond2739)) {
     $conv11 = $8 << 24 >> 24;
     $9 = HEAP32[$__r$038>>2]|0;
     $cmp12 = ($conv11|0)==($9|0);
     if (!($cmp12)) {
      break;
     }
    }
    $sub$ptr$rhs$cast = $__ig$037;
    $sub$ptr$sub = (($sub$ptr$lhs$cast) - ($sub$ptr$rhs$cast))|0;
    $cmp15 = ($sub$ptr$sub|0)>(1);
    $incdec$ptr = (($__ig$037) + 1|0);
    $incdec$ptr$__ig$0 = $cmp15 ? $incdec$ptr : $__ig$037;
    $incdec$ptr18 = (($__r$038) + 4|0);
    $cmp4 = ($incdec$ptr18>>>0)<($add$ptr3>>>0);
    $10 = HEAP8[$incdec$ptr$__ig$0>>0]|0;
    $cmp5$not = ($10<<24>>24)<(1);
    $cmp9 = ($10<<24>>24)==(127);
    $or$cond27 = $cmp5$not | $cmp9;
    if ($cmp4) {
     $8 = $10;$__ig$037 = $incdec$ptr$__ig$0;$__r$038 = $incdec$ptr18;$or$cond2739 = $or$cond27;
    } else {
     $$lcssa = $10;$or$cond27$lcssa = $or$cond27;
     break L18;
    }
   }
   HEAP32[$__err>>2] = 4;
   STACKTOP = sp;return;
  } else {
   $$lcssa = $7;$or$cond27$lcssa = $or$cond2736;
  }
 } while(0);
 if ($or$cond27$lcssa) {
  STACKTOP = sp;return;
 }
 $conv27 = $$lcssa << 24 >> 24;
 $11 = HEAP32[$add$ptr3>>2]|0;
 $cmp28 = ($conv27>>>0)<($11>>>0);
 $cmp30 = ($11|0)==(0);
 $or$cond = $cmp28 | $cmp30;
 if (!($or$cond)) {
  STACKTOP = sp;return;
 }
 HEAP32[$__err>>2] = 4;
 STACKTOP = sp;return;
}
function __ZNSt3__19money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 STACKTOP = sp;return;
}
function __ZNSt3__19money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED1Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return;
}
function __ZNKSt3__19money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_bRNS_8ios_baseERjRe($agg$result,$this,$__b,$__e,$__intl,$__iob,$__err,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__intl = $__intl|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$pre = 0, $$pre$i$i$i = 0, $$pre60 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $7 = 0, $8 = 0, $9 = 0, $__atoms = 0, $__einp_$i$i$i$i = 0, $__einp_$i$i4$i$i = 0, $__first$addr$0$lcssa$i = 0, $__first$addr$05$i = 0, $__fmtflags_$i = 0, $__loc = 0, $__nbuf = 0, $__nc$0 = 0, $__nc$1 = 0, $__nc$2$lcssa = 0, $__nc$252 = 0, $__neg = 0, $__ninp_$i$i$i$i = 0, $__ninp_$i$i3$i$i = 0;
 var $__second_$i$i$i$i$i = 0, $__w$053 = 0, $__wb = 0, $__wbuf = 0, $__wn = 0, $add = 0, $add$ptr = 0, $add$ptr$i = 0, $agg$tmp = 0, $agg$tmp$byval_copy = 0, $arrayidx = 0, $call$i$i$i$i35 = 0, $call$i$i9$i$i36 = 0, $call$i11 = 0, $call23 = 0, $call49 = 0, $call8 = 0, $cmp = 0, $cmp$i = 0, $cmp$i$i$i$i = 0;
 var $cmp$i$i5$i$i = 0, $cmp$i1$i$i$i = 0, $cmp$i1$i13$i$i = 0, $cmp1$i = 0, $cmp25 = 0, $cmp34 = 0, $cmp3451 = 0, $cmp50 = 0, $ehselector$slot$0 = 0, $ehselector$slot$156 = 0, $ehselector$slot$157 = 0, $exn$slot$0 = 0, $exn$slot$158 = 0, $exn$slot$159 = 0, $incdec$ptr = 0, $incdec$ptr$i = 0, $incdec$ptr45 = 0, $incdec$ptr46 = 0, $or = 0, $phitmp$i$i$i = 0;
 var $retval$0$i$i$i$i = 0, $retval$0$i$i12$i$i = 0, $sub$ptr$div20 = 0, $sub$ptr$div44 = 0, $sub$ptr$lhs$cast = 0, $sub$ptr$lhs$cast41 = 0, $sub$ptr$rhs$cast = 0, $sub$ptr$rhs$cast42 = 0, $sub$ptr$sub = 0, $sub$ptr$sub43 = 0, $tobool$i$i$i = 0, $tobool$i$i$i16 = 0, $tobool$i$i$i33 = 0, $tobool$i2$i$i = 0, $tobool30 = 0, $vararg_buffer = 0, $vfn$i = 0, $vfn$i$i$i$i = 0, $vfn$i$i8$i$i = 0, $vtable$i = 0;
 var $vtable$i$i$i$i = 0, $vtable$i$i7$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 592|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $agg$tmp$byval_copy = sp + 472|0;
 $vararg_buffer = sp;
 $__wbuf = sp + 64|0;
 $__wb = sp + 464|0;
 $__wn = sp + 8|0;
 $__loc = sp + 4|0;
 $__neg = sp + 576|0;
 $agg$tmp = sp + 56|0;
 $__atoms = sp + 16|0;
 $__nbuf = sp + 476|0;
 HEAP32[$__wb>>2] = $__wbuf;
 $__second_$i$i$i$i$i = (($__wb) + 4|0);
 HEAP32[$__second_$i$i$i$i$i>>2] = 411;
 $add$ptr = (($__wbuf) + 400|0);
 __THREW__ = 0;
 invoke_vii(358,($__loc|0),($__iob|0));
 $0 = __THREW__; __THREW__ = 0;
 $1 = $0&1;
 do {
  if ($1) {
   $17 = ___cxa_find_matching_catch()|0;
   $18 = tempRet0;
   HEAP32[$__wb>>2] = 0;
   $55 = 411;$56 = $__wbuf;$ehselector$slot$156 = $18;$exn$slot$158 = $17;
  } else {
   __THREW__ = 0;
   $call$i11 = (invoke_iii(359,($__loc|0),(4608|0))|0);
   $2 = __THREW__; __THREW__ = 0;
   $3 = $2&1;
   L4: do {
    if ($3) {
     label = 11;
    } else {
     HEAP8[$__neg>>0] = 0;
     $4 = HEAP32[$__e>>2]|0;
     HEAP32[$agg$tmp>>2] = $4;
     $__fmtflags_$i = (($__iob) + 4|0);
     $5 = HEAP32[$__fmtflags_$i>>2]|0;
     __THREW__ = 0;
     ;HEAP32[$agg$tmp$byval_copy+0>>2]=HEAP32[$agg$tmp+0>>2]|0;
     $call8 = (invoke_iiiiiiiiiiii(421,($__b|0),($agg$tmp$byval_copy|0),($__intl|0),($__loc|0),($5|0),($__err|0),($__neg|0),($call$i11|0),($__wb|0),($__wn|0),($add$ptr|0))|0);
     $6 = __THREW__; __THREW__ = 0;
     $7 = $6&1;
     if ($7) {
      label = 11;
     } else {
      if ($call8) {
       $vtable$i = HEAP32[$call$i11>>2]|0;
       $vfn$i = (($vtable$i) + 48|0);
       $8 = HEAP32[$vfn$i>>2]|0;
       __THREW__ = 0;
       (invoke_iiiii($8|0,($call$i11|0),(4312|0),(((4312 + 10|0))|0),($__atoms|0))|0);
       $9 = __THREW__; __THREW__ = 0;
       $10 = $9&1;
       if ($10) {
        label = 11;
        break;
       }
       $11 = HEAP32[$__wn>>2]|0;
       $12 = HEAP32[$__wb>>2]|0;
       $sub$ptr$lhs$cast = $11;
       $sub$ptr$rhs$cast = $12;
       $sub$ptr$sub = (($sub$ptr$lhs$cast) - ($sub$ptr$rhs$cast))|0;
       $cmp = ($sub$ptr$sub|0)>(392);
       if ($cmp) {
        $sub$ptr$div20 = $sub$ptr$sub >> 2;
        $add = (($sub$ptr$div20) + 2)|0;
        $call23 = (_malloc($add)|0);
        $cmp25 = ($call23|0)==(0|0);
        if ($cmp25) {
         __THREW__ = 0;
         invoke_v(383);
         $13 = __THREW__; __THREW__ = 0;
         $14 = $13&1;
         if ($14) {
          $15 = ___cxa_find_matching_catch()|0;
          $16 = tempRet0;
          $ehselector$slot$0 = $16;$exn$slot$0 = $15;
          break;
         } else {
          $23 = 0;$__nc$0 = 0;
         }
        } else {
         $23 = $call23;$__nc$0 = $call23;
        }
       } else {
        $23 = 0;$__nc$0 = $__nbuf;
       }
       $24 = HEAP8[$__neg>>0]|0;
       $tobool30 = ($24<<24>>24)==(0);
       if ($tobool30) {
        $__nc$1 = $__nc$0;
       } else {
        $incdec$ptr = (($__nc$0) + 1|0);
        HEAP8[$__nc$0>>0] = 45;
        $__nc$1 = $incdec$ptr;
       }
       $cmp3451 = ($12>>>0)<($11>>>0);
       if ($cmp3451) {
        $add$ptr$i = (($__atoms) + 40|0);
        $sub$ptr$rhs$cast42 = $__atoms;
        $__nc$252 = $__nc$1;$__w$053 = $12;
        while(1) {
         $25 = HEAP32[$__w$053>>2]|0;
         $__first$addr$05$i = $__atoms;
         while(1) {
          $26 = HEAP32[$__first$addr$05$i>>2]|0;
          $cmp1$i = ($26|0)==($25|0);
          $incdec$ptr$i = (($__first$addr$05$i) + 4|0);
          if ($cmp1$i) {
           $__first$addr$0$lcssa$i = $__first$addr$05$i;
           break;
          }
          $cmp$i = ($incdec$ptr$i|0)==($add$ptr$i|0);
          if ($cmp$i) {
           $__first$addr$0$lcssa$i = $add$ptr$i;
           break;
          } else {
           $__first$addr$05$i = $incdec$ptr$i;
          }
         }
         $sub$ptr$lhs$cast41 = $__first$addr$0$lcssa$i;
         $sub$ptr$sub43 = (($sub$ptr$lhs$cast41) - ($sub$ptr$rhs$cast42))|0;
         $sub$ptr$div44 = $sub$ptr$sub43 >> 2;
         $arrayidx = (4312 + ($sub$ptr$div44)|0);
         $27 = HEAP8[$arrayidx>>0]|0;
         HEAP8[$__nc$252>>0] = $27;
         $incdec$ptr45 = (($__w$053) + 4|0);
         $incdec$ptr46 = (($__nc$252) + 1|0);
         $28 = HEAP32[$__wn>>2]|0;
         $cmp34 = ($incdec$ptr45>>>0)<($28>>>0);
         if ($cmp34) {
          $__nc$252 = $incdec$ptr46;$__w$053 = $incdec$ptr45;
         } else {
          $__nc$2$lcssa = $incdec$ptr46;
          break;
         }
        }
       } else {
        $__nc$2$lcssa = $__nc$1;
       }
       HEAP8[$__nc$2$lcssa>>0] = 0;
       HEAP32[$vararg_buffer>>2] = $__v;
       $call49 = (_sscanf($__nbuf,4248,$vararg_buffer)|0);
       $cmp50 = ($call49|0)==(1);
       if (!($cmp50)) {
        __THREW__ = 0;
        invoke_vi(413,(4256|0));
        $29 = __THREW__; __THREW__ = 0;
        $30 = $29&1;
        if ($30) {
         $21 = ___cxa_find_matching_catch()|0;
         $22 = tempRet0;
         _free($23);
         $ehselector$slot$0 = $22;$exn$slot$0 = $21;
         break;
        }
       }
       _free($23);
      }
      $31 = HEAP32[$__b>>2]|0;
      $tobool$i$i$i33 = ($31|0)==(0|0);
      do {
       if ($tobool$i$i$i33) {
        $61 = 1;
       } else {
        $__ninp_$i$i$i$i = (($31) + 12|0);
        $32 = HEAP32[$__ninp_$i$i$i$i>>2]|0;
        $__einp_$i$i$i$i = (($31) + 16|0);
        $33 = HEAP32[$__einp_$i$i$i$i>>2]|0;
        $cmp$i$i$i$i = ($32|0)==($33|0);
        if ($cmp$i$i$i$i) {
         $vtable$i$i$i$i = HEAP32[$31>>2]|0;
         $vfn$i$i$i$i = (($vtable$i$i$i$i) + 36|0);
         $34 = HEAP32[$vfn$i$i$i$i>>2]|0;
         __THREW__ = 0;
         $call$i$i$i$i35 = (invoke_ii($34|0,($31|0))|0);
         $35 = __THREW__; __THREW__ = 0;
         $36 = $35&1;
         if ($36) {
          label = 11;
          break L4;
         } else {
          $retval$0$i$i$i$i = $call$i$i$i$i35;
         }
        } else {
         $37 = HEAP32[$32>>2]|0;
         $retval$0$i$i$i$i = $37;
        }
        $cmp$i1$i$i$i = ($retval$0$i$i$i$i|0)==(-1);
        if ($cmp$i1$i$i$i) {
         HEAP32[$__b>>2] = 0;
         $61 = 1;
         break;
        } else {
         $$pre$i$i$i = HEAP32[$__b>>2]|0;
         $phitmp$i$i$i = ($$pre$i$i$i|0)==(0|0);
         $61 = $phitmp$i$i$i;
         break;
        }
       }
      } while(0);
      $38 = HEAP32[$__e>>2]|0;
      $tobool$i2$i$i = ($38|0)==(0|0);
      do {
       if ($tobool$i2$i$i) {
        label = 37;
       } else {
        $__ninp_$i$i3$i$i = (($38) + 12|0);
        $39 = HEAP32[$__ninp_$i$i3$i$i>>2]|0;
        $__einp_$i$i4$i$i = (($38) + 16|0);
        $40 = HEAP32[$__einp_$i$i4$i$i>>2]|0;
        $cmp$i$i5$i$i = ($39|0)==($40|0);
        if ($cmp$i$i5$i$i) {
         $vtable$i$i7$i$i = HEAP32[$38>>2]|0;
         $vfn$i$i8$i$i = (($vtable$i$i7$i$i) + 36|0);
         $41 = HEAP32[$vfn$i$i8$i$i>>2]|0;
         __THREW__ = 0;
         $call$i$i9$i$i36 = (invoke_ii($41|0,($38|0))|0);
         $42 = __THREW__; __THREW__ = 0;
         $43 = $42&1;
         if ($43) {
          label = 11;
          break L4;
         } else {
          $retval$0$i$i12$i$i = $call$i$i9$i$i36;
         }
        } else {
         $44 = HEAP32[$39>>2]|0;
         $retval$0$i$i12$i$i = $44;
        }
        $cmp$i1$i13$i$i = ($retval$0$i$i12$i$i|0)==(-1);
        if ($cmp$i1$i13$i$i) {
         HEAP32[$__e>>2] = 0;
         label = 37;
         break;
        } else {
         if ($61) {
          break;
         } else {
          label = 39;
          break;
         }
        }
       }
      } while(0);
      if ((label|0) == 37) {
       if ($61) {
        label = 39;
       }
      }
      if ((label|0) == 39) {
       $45 = HEAP32[$__err>>2]|0;
       $or = $45 | 2;
       HEAP32[$__err>>2] = $or;
      }
      $46 = HEAP32[$__b>>2]|0;
      HEAP32[$agg$result>>2] = $46;
      $47 = HEAP32[$__loc>>2]|0;
      (__ZNSt3__114__shared_count16__release_sharedEv($47)|0);
      $48 = HEAP32[$__wb>>2]|0;
      HEAP32[$__wb>>2] = 0;
      $tobool$i$i$i16 = ($48|0)==(0|0);
      if ($tobool$i$i$i16) {
       STACKTOP = sp;return;
      }
      $49 = HEAP32[$__second_$i$i$i$i$i>>2]|0;
      __THREW__ = 0;
      invoke_vi($49|0,($48|0));
      $50 = __THREW__; __THREW__ = 0;
      $51 = $50&1;
      if ($51) {
       $52 = ___cxa_find_matching_catch(0|0)|0;
       $53 = tempRet0;
       ___clang_call_terminate($52);
       // unreachable;
      } else {
       STACKTOP = sp;return;
      }
     }
    }
   } while(0);
   if ((label|0) == 11) {
    $19 = ___cxa_find_matching_catch()|0;
    $20 = tempRet0;
    $ehselector$slot$0 = $20;$exn$slot$0 = $19;
   }
   $54 = HEAP32[$__loc>>2]|0;
   (__ZNSt3__114__shared_count16__release_sharedEv($54)|0);
   $$pre = HEAP32[$__wb>>2]|0;
   HEAP32[$__wb>>2] = 0;
   $tobool$i$i$i = ($$pre|0)==(0|0);
   if ($tobool$i$i$i) {
    $ehselector$slot$157 = $ehselector$slot$0;$exn$slot$159 = $exn$slot$0;
    ___resumeException($exn$slot$159|0);
    // unreachable;
   } else {
    $$pre60 = HEAP32[$__second_$i$i$i$i$i>>2]|0;
    $55 = $$pre60;$56 = $$pre;$ehselector$slot$156 = $ehselector$slot$0;$exn$slot$158 = $exn$slot$0;
    break;
   }
  }
 } while(0);
 __THREW__ = 0;
 invoke_vi($55|0,($56|0));
 $57 = __THREW__; __THREW__ = 0;
 $58 = $57&1;
 if ($58) {
  $59 = ___cxa_find_matching_catch(0|0)|0;
  $60 = tempRet0;
  ___clang_call_terminate($59);
  // unreachable;
 } else {
  $ehselector$slot$157 = $ehselector$slot$156;$exn$slot$159 = $exn$slot$158;
  ___resumeException($exn$slot$159|0);
  // unreachable;
 }
}
function __ZNSt3__19money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE8__do_getERS4_S4_bRKNS_6localeEjRjRbRKNS_5ctypeIwEERNS_10unique_ptrIwPFvPvEEERPwSM_($__b,$__e,$__intl,$__loc,$__flags,$__err,$__neg,$__ct,$__wb,$__wn,$__we) {
 $__b = $__b|0;
 $__e = $__e|0;
 $__intl = $__intl|0;
 $__loc = $__loc|0;
 $__flags = $__flags|0;
 $__err = $__err|0;
 $__neg = $__neg|0;
 $__ct = $__ct|0;
 $__wb = $__wb|0;
 $__wn = $__wn|0;
 $__we = $__we|0;
 var $$pre = 0, $$pre$i$i$i = 0, $$pre$i$i$i129 = 0, $$pre$i$i$i201 = 0, $$pre$i$i$i365 = 0, $$pre$i$i$i517 = 0, $$pre$i$i$i679 = 0, $$pre$i$i$i791 = 0, $$pre$i15$i$i = 0, $$pre$i15$i$i219 = 0, $$pre$i15$i$i219954 = 0, $$pre$i15$i$i219956 = 0, $$pre$i15$i$i383 = 0, $$pre$i15$i$i383961$ph = 0, $$pre$i15$i$i383961978 = 0, $$pre$i15$i$i535 = 0, $$pre$i15$i$i697 = 0, $$pre$i15$i$i809 = 0, $$pre$i15$i$i809957 = 0, $$pre$i15$i$i809958 = 0;
 var $$pre$i15$i$i963$ph = 0, $$pre$i15$i$i963982 = 0, $$pre964 = 0, $$pre965 = 0, $$pre966 = 0, $$pre967 = 0, $$pre968 = 0, $$pre969 = 0, $$pre970 = 0, $$pre971 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0;
 var $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0;
 var $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0;
 var $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0;
 var $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0;
 var $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0;
 var $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0;
 var $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0;
 var $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0;
 var $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0;
 var $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0;
 var $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0;
 var $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0;
 var $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0;
 var $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0;
 var $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0;
 var $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0;
 var $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0;
 var $413 = 0, $414 = 0, $415 = 0, $416 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0;
 var $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0;
 var $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0;
 var $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__data_$i$i$i = 0, $__data_$i$i$i$ = 0, $__data_$i$i$i$983 = 0, $__data_$i$i$i$i = 0, $__data_$i$i$i433 = 0, $__data_$i$i$i433$ = 0, $__data_$i$i$i433$984 = 0, $__data_$i$i$i629 = 0, $__data_$i$i$i629$ = 0, $__data_$i$i$i629$985 = 0, $__data_$i$i$i629$986 = 0, $__data_$i$i$i629$987 = 0, $__data_$i$i$i825 = 0;
 var $__data_$i1$i$i = 0, $__data_$i1$i$i$i = 0, $__data_$i1$i$i431 = 0, $__data_$i1$i$i645 = 0, $__data_$i1$i$i878 = 0, $__dp = 0, $__einp_$i$i = 0, $__einp_$i$i$i$i = 0, $__einp_$i$i$i$i119 = 0, $__einp_$i$i$i$i191 = 0, $__einp_$i$i$i$i355 = 0, $__einp_$i$i$i$i507 = 0, $__einp_$i$i$i$i669 = 0, $__einp_$i$i$i$i781 = 0, $__einp_$i$i106 = 0, $__einp_$i$i164 = 0, $__einp_$i$i177 = 0, $__einp_$i$i231 = 0, $__einp_$i$i247 = 0, $__einp_$i$i283 = 0;
 var $__einp_$i$i329 = 0, $__einp_$i$i396 = 0, $__einp_$i$i4$i$i = 0, $__einp_$i$i4$i$i137 = 0, $__einp_$i$i4$i$i209 = 0, $__einp_$i$i4$i$i373 = 0, $__einp_$i$i4$i$i525 = 0, $__einp_$i$i4$i$i687 = 0, $__einp_$i$i4$i$i799 = 0, $__einp_$i$i418 = 0, $__einp_$i$i439 = 0, $__einp_$i$i451 = 0, $__einp_$i$i473 = 0, $__einp_$i$i485 = 0, $__einp_$i$i548 = 0, $__einp_$i$i591 = 0, $__einp_$i$i614 = 0, $__einp_$i$i656 = 0, $__einp_$i$i744 = 0, $__einp_$i$i758 = 0;
 var $__einp_$i$i87 = 0, $__et = 0, $__fd = 0, $__gb = 0, $__gbuf = 0, $__ge = 0, $__gn = 0, $__grp = 0, $__i$0 = 0, $__ng$0 = 0, $__ng$1 = 0, $__ninp_$i$i = 0, $__ninp_$i$i$i$i = 0, $__ninp_$i$i$i$i118 = 0, $__ninp_$i$i$i$i190 = 0, $__ninp_$i$i$i$i354 = 0, $__ninp_$i$i$i$i506 = 0, $__ninp_$i$i$i$i668 = 0, $__ninp_$i$i$i$i780 = 0, $__ninp_$i$i105 = 0;
 var $__ninp_$i$i163 = 0, $__ninp_$i$i176 = 0, $__ninp_$i$i230 = 0, $__ninp_$i$i246 = 0, $__ninp_$i$i282 = 0, $__ninp_$i$i3$i$i = 0, $__ninp_$i$i3$i$i136 = 0, $__ninp_$i$i3$i$i208 = 0, $__ninp_$i$i3$i$i372 = 0, $__ninp_$i$i3$i$i524 = 0, $__ninp_$i$i3$i$i686 = 0, $__ninp_$i$i3$i$i798 = 0, $__ninp_$i$i328 = 0, $__ninp_$i$i395 = 0, $__ninp_$i$i417 = 0, $__ninp_$i$i438 = 0, $__ninp_$i$i450 = 0, $__ninp_$i$i472 = 0, $__ninp_$i$i484 = 0, $__ninp_$i$i547 = 0;
 var $__ninp_$i$i590 = 0, $__ninp_$i$i613 = 0, $__ninp_$i$i655 = 0, $__ninp_$i$i743 = 0, $__ninp_$i$i757 = 0, $__ninp_$i$i86 = 0, $__nsn = 0, $__nsn$__trailing_sign$0 = 0, $__nsn$__trailing_sign$075 = 0, $__p$0945 = 0, $__pat = 0, $__psn = 0, $__psn$__trailing_sign$0 = 0, $__psn$__trailing_sign$074 = 0, $__second_$i$i$i$i$i = 0, $__size_$i2$i636 = 0, $__spaces = 0, $__sym = 0, $__sym_curr_char$sroa$0$0$load892897 = 0, $__sym_space_end$sroa$0$0$load896899 = 0;
 var $__trailing_sign$0$lcssa = 0, $__trailing_sign$0947 = 0, $__trailing_sign$1 = 0, $__ts = 0, $__we$addr = 0, $add = 0, $add$ptr = 0, $add$ptr$i = 0, $add$ptr$i$i$i = 0, $add$ptr$i$i$i973 = 0, $add$ptr$i$i$i974 = 0, $add$ptr$i647 = 0, $add$ptr$i737 = 0, $add$ptr$i831$sum = 0, $add$ptr$i831$sum972 = 0, $add$ptr$i849 = 0, $add$ptr$i887 = 0, $and$i$i = 0, $and$i$i$i = 0, $and$i$i$i$i = 0;
 var $and$i$i$i429 = 0, $and$i$i$i496 = 0, $and$i$i$i581 = 0, $and$i$i$i625 = 0, $and$i$i$i643 = 0, $and$i$i$i713 = 0, $and$i$i$i726 = 0, $and$i$i$i838 = 0, $and$i$i262 = 0, $and$i$i272 = 0, $and$i$i407 = 0, $and$i$i462 = 0, $and$i$i559 = 0, $and$i$i602 = 0, $and$i$i634 = 0, $and$i$i769 = 0, $and903 = 0, $arrayidx = 0, $arrayidx114 = 0, $arrayidx130 = 0;
 var $brmerge = 0, $call$i$i$i$i153 = 0, $call$i$i$i$i225 = 0, $call$i$i$i$i390 = 0, $call$i$i$i$i542 = 0, $call$i$i$i$i703 = 0, $call$i$i$i$i815 = 0, $call$i$i$i$i99 = 0, $call$i$i172 = 0, $call$i$i187 = 0, $call$i$i239 = 0, $call$i$i258 = 0, $call$i$i291 = 0, $call$i$i337 = 0, $call$i$i349 = 0, $call$i$i426 = 0, $call$i$i481 = 0, $call$i$i493 = 0, $call$i$i578 = 0, $call$i$i664 = 0;
 var $call$i$i766 = 0, $call$i$i9$i$i100 = 0, $call$i$i9$i$i155 = 0, $call$i$i9$i$i227 = 0, $call$i$i9$i$i392 = 0, $call$i$i9$i$i544 = 0, $call$i$i9$i$i705 = 0, $call$i$i9$i$i817 = 0, $call$i$i94 = 0, $call$i174 = 0, $call$i243 = 0, $call$i315 = 0, $call$i651 = 0, $call$i709 = 0, $cmp = 0, $cmp$i$i = 0, $cmp$i$i$i = 0, $cmp$i$i$i$i = 0, $cmp$i$i$i$i120 = 0, $cmp$i$i$i$i192 = 0;
 var $cmp$i$i$i$i356 = 0, $cmp$i$i$i$i508 = 0, $cmp$i$i$i$i670 = 0, $cmp$i$i$i$i782 = 0, $cmp$i$i107 = 0, $cmp$i$i165 = 0, $cmp$i$i178 = 0, $cmp$i$i232 = 0, $cmp$i$i248 = 0, $cmp$i$i284 = 0, $cmp$i$i330 = 0, $cmp$i$i397 = 0, $cmp$i$i419 = 0, $cmp$i$i440 = 0, $cmp$i$i452 = 0, $cmp$i$i474 = 0, $cmp$i$i486 = 0, $cmp$i$i5$i$i = 0, $cmp$i$i5$i$i138 = 0, $cmp$i$i5$i$i210 = 0;
 var $cmp$i$i5$i$i374 = 0, $cmp$i$i5$i$i526 = 0, $cmp$i$i5$i$i688 = 0, $cmp$i$i5$i$i800 = 0, $cmp$i$i549 = 0, $cmp$i$i592 = 0, $cmp$i$i615 = 0, $cmp$i$i657 = 0, $cmp$i$i745 = 0, $cmp$i$i759 = 0, $cmp$i$i88 = 0, $cmp$i1$i$i$i = 0, $cmp$i1$i$i$i127 = 0, $cmp$i1$i$i$i199 = 0, $cmp$i1$i$i$i363 = 0, $cmp$i1$i$i$i515 = 0, $cmp$i1$i$i$i677 = 0, $cmp$i1$i$i$i789 = 0, $cmp$i1$i13$i$i = 0, $cmp$i1$i13$i$i145 = 0;
 var $cmp$i1$i13$i$i217 = 0, $cmp$i1$i13$i$i381 = 0, $cmp$i1$i13$i$i533 = 0, $cmp$i1$i13$i$i695 = 0, $cmp$i1$i13$i$i807 = 0, $cmp110 = 0, $cmp111 = 0, $cmp116 = 0, $cmp120904 = 0, $cmp128 = 0, $cmp155 = 0, $cmp16 = 0, $cmp178 = 0, $cmp205 = 0, $cmp215 = 0, $cmp217 = 0, $cmp228 = 0, $cmp230 = 0, $cmp232 = 0, $cmp238 = 0;
 var $cmp245 = 0, $cmp252 = 0, $cmp264 = 0, $cmp277 = 0, $cmp289 = 0, $cmp298 = 0, $cmp309 = 0, $cmp35 = 0, $cmp38 = 0, $cmp40 = 0, $cmp43 = 0, $cmp49 = 0, $cmp54 = 0, $cmp64 = 0, $cmp69 = 0, $cmp79 = 0, $cmp84 = 0, $cmp92 = 0, $cmp97 = 0, $cmptmp$i$i = 0;
 var $cmptmp$i$i223 = 0, $cmptmp$i$i387 = 0, $cmptmp$i$i701 = 0, $cmptmp$i$i813 = 0, $cond = 0, $cond$i = 0, $cond$i$i$i = 0, $cond$i269 = 0, $cond$i279 = 0, $cond$i301 = 0, $cond$i311 = 0, $cond$i325 = 0, $cond$i414 = 0, $cond$i469 = 0, $cond$i566 = 0, $cond$i6$i = 0, $cond$i6$i736 = 0, $cond$i6$i848 = 0, $cond$i6$i886 = 0, $cond$i609 = 0;
 var $cond$i641 = 0, $cond$i7$i = 0, $cond$i7$i735 = 0, $cond$i7$i847 = 0, $cond$i7$i885 = 0, $cond$i776 = 0, $conv = 0, $conv$i$i = 0, $conv$i$i$i = 0, $conv$i$i$i732 = 0, $conv$i$i$i826 = 0, $conv$i$i$i844 = 0, $conv$i$i$i882 = 0, $conv$i$i266 = 0, $conv$i$i276 = 0, $conv$i$i298 = 0, $conv$i$i308 = 0, $conv$i$i322 = 0, $conv$i$i411 = 0, $conv$i$i466 = 0;
 var $conv$i$i563 = 0, $conv$i$i606 = 0, $conv$i$i638 = 0, $conv$i$i773 = 0, $dec = 0, $inc = 0, $inc282 = 0, $inc303 = 0, $incdec$ptr = 0, $incdec$ptr$i = 0, $incdec$ptr$i$i = 0, $incdec$ptr$i$i$i = 0, $incdec$ptr$i$i111 = 0, $incdec$ptr$i$i182 = 0, $incdec$ptr$i$i252 = 0, $incdec$ptr$i$i401 = 0, $incdec$ptr$i$i444 = 0, $incdec$ptr$i$i456 = 0, $incdec$ptr$i$i553 = 0, $incdec$ptr$i$i596 = 0;
 var $incdec$ptr$i$i619 = 0, $incdec$ptr$i$i749 = 0, $incdec$ptr$i2$i$i = 0, $incdec$ptr$i741 = 0, $incdec$ptr221 = 0, $incdec$ptr236 = 0, $incdec$ptr270 = 0, $lnot$i = 0, $lnot$i$i$i = 0, $lnot$i5$i$i = 0, $lnot$i724 = 0, $lnot$i836 = 0, $lpad$phi$index = 0, $lpad$phi$index8 = 0, $notlhs = 0, $notrhs = 0, $or = 0, $or$cond = 0, $or$cond76$not = 0, $or$cond77 = 0;
 var $or$cond988 = 0, $or101 = 0, $or190 = 0, $or247 = 0, $or262 = 0, $or279 = 0, $or300 = 0, $or316 = 0, $phitmp$i$i$i = 0, $phitmp$i$i$i130 = 0, $phitmp$i$i$i202 = 0, $phitmp$i$i$i366 = 0, $phitmp$i$i$i518 = 0, $phitmp$i$i$i680 = 0, $phitmp$i$i$i792 = 0, $phitmp$i16$i$i = 0, $phitmp$i16$i$i220 = 0, $phitmp$i16$i$i384 = 0, $phitmp$i16$i$i698 = 0, $phitmp$i16$i$i810 = 0;
 var $retval$0 = 0, $retval$0$i$i = 0, $retval$0$i$i$i$i = 0, $retval$0$i$i$i$i126 = 0, $retval$0$i$i$i$i198 = 0, $retval$0$i$i$i$i362 = 0, $retval$0$i$i$i$i514 = 0, $retval$0$i$i$i$i676 = 0, $retval$0$i$i$i$i788 = 0, $retval$0$i$i12$i$i = 0, $retval$0$i$i12$i$i144 = 0, $retval$0$i$i12$i$i216 = 0, $retval$0$i$i12$i$i380 = 0, $retval$0$i$i12$i$i532 = 0, $retval$0$i$i12$i$i694 = 0, $retval$0$i$i12$i$i806 = 0, $retval$0$i$i170 = 0, $retval$0$i$i184 = 0, $retval$0$i$i237 = 0, $retval$0$i$i254 = 0;
 var $retval$0$i$i289 = 0, $retval$0$i$i335 = 0, $retval$0$i$i347 = 0, $retval$0$i$i424 = 0, $retval$0$i$i479 = 0, $retval$0$i$i491 = 0, $retval$0$i$i576 = 0, $retval$0$i$i662 = 0, $retval$0$i$i764 = 0, $shr1$i$i = 0, $shr1$i$i$i = 0, $shr1$i$i$i733 = 0, $shr1$i$i$i827 = 0, $shr1$i$i$i845 = 0, $shr1$i$i$i883 = 0, $shr1$i$i267 = 0, $shr1$i$i277 = 0, $shr1$i$i299 = 0, $shr1$i$i309 = 0, $shr1$i$i323 = 0;
 var $shr1$i$i412 = 0, $shr1$i$i467 = 0, $shr1$i$i564 = 0, $shr1$i$i607 = 0, $shr1$i$i639 = 0, $shr1$i$i774 = 0, $sub = 0, $sub$ptr$div$i = 0, $sub$ptr$lhs$cast$i = 0, $sub$ptr$rhs$cast$i = 0, $sub$ptr$sub$i = 0, $switch = 0, $tobool$i$i = 0, $tobool$i$i$i = 0, $tobool$i$i$i$i = 0, $tobool$i$i$i117 = 0, $tobool$i$i$i157 = 0, $tobool$i$i$i189 = 0, $tobool$i$i$i351 = 0, $tobool$i$i$i353 = 0;
 var $tobool$i$i$i430 = 0, $tobool$i$i$i497 = 0, $tobool$i$i$i505 = 0, $tobool$i$i$i582 = 0, $tobool$i$i$i626 = 0, $tobool$i$i$i644 = 0, $tobool$i$i$i667 = 0, $tobool$i$i$i714 = 0, $tobool$i$i$i727 = 0, $tobool$i$i$i779 = 0, $tobool$i$i$i839 = 0, $tobool$i$i$i96 = 0, $tobool$i$i263 = 0, $tobool$i$i273 = 0, $tobool$i$i408 = 0, $tobool$i$i463 = 0, $tobool$i$i560 = 0, $tobool$i$i603 = 0, $tobool$i$i635 = 0, $tobool$i$i770 = 0;
 var $tobool$i2$i$i = 0, $tobool$i2$i$i134 = 0, $tobool$i2$i$i206 = 0, $tobool$i2$i$i370 = 0, $tobool$i2$i$i522 = 0, $tobool$i2$i$i684 = 0, $tobool$i2$i$i796 = 0, $tobool108 = 0, $tobool284 = 0, $tobool314 = 0, $vfn$i = 0, $vfn$i$i = 0, $vfn$i$i$i$i = 0, $vfn$i$i$i$i123 = 0, $vfn$i$i$i$i195 = 0, $vfn$i$i$i$i359 = 0, $vfn$i$i$i$i511 = 0, $vfn$i$i$i$i673 = 0, $vfn$i$i$i$i785 = 0, $vfn$i$i109 = 0;
 var $vfn$i$i167 = 0, $vfn$i$i180 = 0, $vfn$i$i234 = 0, $vfn$i$i250 = 0, $vfn$i$i286 = 0, $vfn$i$i332 = 0, $vfn$i$i344 = 0, $vfn$i$i399 = 0, $vfn$i$i421 = 0, $vfn$i$i442 = 0, $vfn$i$i454 = 0, $vfn$i$i476 = 0, $vfn$i$i488 = 0, $vfn$i$i551 = 0, $vfn$i$i573 = 0, $vfn$i$i594 = 0, $vfn$i$i617 = 0, $vfn$i$i659 = 0, $vfn$i$i747 = 0, $vfn$i$i761 = 0;
 var $vfn$i$i8$i$i = 0, $vfn$i$i8$i$i141 = 0, $vfn$i$i8$i$i213 = 0, $vfn$i$i8$i$i377 = 0, $vfn$i$i8$i$i529 = 0, $vfn$i$i8$i$i691 = 0, $vfn$i$i8$i$i803 = 0, $vfn$i$i90 = 0, $vfn$i242 = 0, $vfn$i314 = 0, $vfn$i650 = 0, $vfn$i708 = 0, $vtable$i = 0, $vtable$i$i = 0, $vtable$i$i$i$i = 0, $vtable$i$i$i$i122 = 0, $vtable$i$i$i$i194 = 0, $vtable$i$i$i$i358 = 0, $vtable$i$i$i$i510 = 0, $vtable$i$i$i$i672 = 0;
 var $vtable$i$i$i$i784 = 0, $vtable$i$i108 = 0, $vtable$i$i166 = 0, $vtable$i$i179 = 0, $vtable$i$i233 = 0, $vtable$i$i249 = 0, $vtable$i$i285 = 0, $vtable$i$i331 = 0, $vtable$i$i343 = 0, $vtable$i$i398 = 0, $vtable$i$i420 = 0, $vtable$i$i441 = 0, $vtable$i$i453 = 0, $vtable$i$i475 = 0, $vtable$i$i487 = 0, $vtable$i$i550 = 0, $vtable$i$i572 = 0, $vtable$i$i593 = 0, $vtable$i$i616 = 0, $vtable$i$i658 = 0;
 var $vtable$i$i7$i$i = 0, $vtable$i$i7$i$i140 = 0, $vtable$i$i7$i$i212 = 0, $vtable$i$i7$i$i376 = 0, $vtable$i$i7$i$i528 = 0, $vtable$i$i7$i$i690 = 0, $vtable$i$i7$i$i802 = 0, $vtable$i$i746 = 0, $vtable$i$i760 = 0, $vtable$i$i89 = 0, $vtable$i241 = 0, $vtable$i313 = 0, $vtable$i649 = 0, $vtable$i707 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 512|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__we$addr = sp + 500|0;
 $__gbuf = sp + 96|0;
 $__gb = sp + 40|0;
 $__gn = sp + 20|0;
 $__ge = sp + 12|0;
 $__pat = sp + 88|0;
 $__dp = sp + 496|0;
 $__ts = sp + 504|0;
 $__grp = sp + 24|0;
 $__sym = sp + 48|0;
 $__psn = sp;
 $__nsn = sp + 72|0;
 $__spaces = sp + 60|0;
 $__fd = sp + 16|0;
 $__et = sp + 84|0;
 HEAP32[$__we$addr>>2] = $__we;
 HEAP32[$__gb>>2] = $__gbuf;
 $__second_$i$i$i$i$i = (($__gb) + 4|0);
 HEAP32[$__second_$i$i$i$i$i>>2] = 411;
 HEAP32[$__gn>>2] = $__gbuf;
 $add$ptr = (($__gbuf) + 400|0);
 HEAP32[$__ge>>2] = $add$ptr;
 HEAP32[$__pat>>2] = 0;
 ;HEAP32[$__grp+0>>2]=0|0;HEAP32[$__grp+4>>2]=0|0;HEAP32[$__grp+8>>2]=0|0;
 ;HEAP32[$__sym+0>>2]=0|0;HEAP32[$__sym+4>>2]=0|0;HEAP32[$__sym+8>>2]=0|0;
 ;HEAP32[$__psn+0>>2]=0|0;HEAP32[$__psn+4>>2]=0|0;HEAP32[$__psn+8>>2]=0|0;
 ;HEAP32[$__nsn+0>>2]=0|0;HEAP32[$__nsn+4>>2]=0|0;HEAP32[$__nsn+8>>2]=0|0;
 ;HEAP32[$__spaces+0>>2]=0|0;HEAP32[$__spaces+4>>2]=0|0;HEAP32[$__spaces+8>>2]=0|0;
 __THREW__ = 0;
 invoke_viiiiiiiiii(422,($__intl|0),($__loc|0),($__pat|0),($__dp|0),($__ts|0),($__grp|0),($__sym|0),($__psn|0),($__nsn|0),($__fd|0));
 $0 = __THREW__; __THREW__ = 0;
 $1 = $0&1;
 L1: do {
  if ($1) {
   $33 = ___cxa_find_matching_catch()|0;
   $34 = tempRet0;
   $lpad$phi$index = $33;$lpad$phi$index8 = $34;
  } else {
   $2 = HEAP32[$__wb>>2]|0;
   HEAP32[$__wn>>2] = $2;
   $__data_$i$i$i433 = (($__nsn) + 4|0);
   $__data_$i1$i$i431 = (($__nsn) + 8|0);
   $__data_$i$i$i = (($__psn) + 4|0);
   $__data_$i1$i$i = (($__psn) + 8|0);
   $and903 = $__flags & 512;
   $cmp120904 = ($and903|0)!=(0);
   $__data_$i$i$i629 = (($__sym) + 4|0);
   $__data_$i1$i$i645 = (($__sym) + 8|0);
   $__data_$i$i$i825 = (($__spaces) + 4|0);
   $__data_$i1$i$i878 = (($__spaces) + 8|0);
   $arrayidx114 = (($__pat) + 3|0);
   $__size_$i2$i636 = (($__grp) + 4|0);
   $398 = $__gbuf;$__p$0945 = 0;$__trailing_sign$0947 = 0;
   L3: while(1) {
    $3 = HEAP32[$__b>>2]|0;
    $tobool$i$i$i117 = ($3|0)==(0|0);
    do {
     if ($tobool$i$i$i117) {
      $399 = 1;
     } else {
      $__ninp_$i$i$i$i118 = (($3) + 12|0);
      $4 = HEAP32[$__ninp_$i$i$i$i118>>2]|0;
      $__einp_$i$i$i$i119 = (($3) + 16|0);
      $5 = HEAP32[$__einp_$i$i$i$i119>>2]|0;
      $cmp$i$i$i$i120 = ($4|0)==($5|0);
      if ($cmp$i$i$i$i120) {
       $vtable$i$i$i$i122 = HEAP32[$3>>2]|0;
       $vfn$i$i$i$i123 = (($vtable$i$i$i$i122) + 36|0);
       $6 = HEAP32[$vfn$i$i$i$i123>>2]|0;
       __THREW__ = 0;
       $call$i$i$i$i153 = (invoke_ii($6|0,($3|0))|0);
       $7 = __THREW__; __THREW__ = 0;
       $8 = $7&1;
       if ($8) {
        label = 26;
        break L3;
       } else {
        $retval$0$i$i$i$i126 = $call$i$i$i$i153;
       }
      } else {
       $9 = HEAP32[$4>>2]|0;
       $retval$0$i$i$i$i126 = $9;
      }
      $cmp$i1$i$i$i127 = ($retval$0$i$i$i$i126|0)==(-1);
      if ($cmp$i1$i$i$i127) {
       HEAP32[$__b>>2] = 0;
       $399 = 1;
       break;
      } else {
       $$pre$i$i$i129 = HEAP32[$__b>>2]|0;
       $phitmp$i$i$i130 = ($$pre$i$i$i129|0)==(0|0);
       $399 = $phitmp$i$i$i130;
       break;
      }
     }
    } while(0);
    $10 = HEAP32[$__e>>2]|0;
    $tobool$i2$i$i134 = ($10|0)==(0|0);
    do {
     if ($tobool$i2$i$i134) {
      label = 16;
     } else {
      $__ninp_$i$i3$i$i136 = (($10) + 12|0);
      $11 = HEAP32[$__ninp_$i$i3$i$i136>>2]|0;
      $__einp_$i$i4$i$i137 = (($10) + 16|0);
      $12 = HEAP32[$__einp_$i$i4$i$i137>>2]|0;
      $cmp$i$i5$i$i138 = ($11|0)==($12|0);
      if ($cmp$i$i5$i$i138) {
       $vtable$i$i7$i$i140 = HEAP32[$10>>2]|0;
       $vfn$i$i8$i$i141 = (($vtable$i$i7$i$i140) + 36|0);
       $13 = HEAP32[$vfn$i$i8$i$i141>>2]|0;
       __THREW__ = 0;
       $call$i$i9$i$i155 = (invoke_ii($13|0,($10|0))|0);
       $14 = __THREW__; __THREW__ = 0;
       $15 = $14&1;
       if ($15) {
        label = 26;
        break L3;
       } else {
        $retval$0$i$i12$i$i144 = $call$i$i9$i$i155;
       }
      } else {
       $16 = HEAP32[$11>>2]|0;
       $retval$0$i$i12$i$i144 = $16;
      }
      $cmp$i1$i13$i$i145 = ($retval$0$i$i12$i$i144|0)==(-1);
      if ($cmp$i1$i13$i$i145) {
       HEAP32[$__e>>2] = 0;
       label = 16;
       break;
      } else {
       if ($399) {
        $401 = $10;
        break;
       } else {
        $389 = $398;$400 = $10;$__trailing_sign$0$lcssa = $__trailing_sign$0947;
        label = 292;
        break L3;
       }
      }
     }
    } while(0);
    if ((label|0) == 16) {
     label = 0;
     if ($399) {
      $389 = $398;$400 = 0;$__trailing_sign$0$lcssa = $__trailing_sign$0947;
      label = 292;
      break;
     } else {
      $401 = 0;
     }
    }
    $arrayidx = (($__pat) + ($__p$0945)|0);
    $17 = HEAP8[$arrayidx>>0]|0;
    $conv = $17 << 24 >> 24;
    L27: do {
     switch ($conv|0) {
     case 0:  {
      label = 43;
      break;
     }
     case 4:  {
      $18 = HEAP32[$__ts>>2]|0;
      $$pre$i15$i$i697 = $401;$236 = $401;$262 = $398;$__ng$0 = 0;
      L29: while(1) {
       $229 = HEAP32[$__b>>2]|0;
       $tobool$i$i$i667 = ($229|0)==(0|0);
       do {
        if ($tobool$i$i$i667) {
         $243 = 1;
        } else {
         $__ninp_$i$i$i$i668 = (($229) + 12|0);
         $230 = HEAP32[$__ninp_$i$i$i$i668>>2]|0;
         $__einp_$i$i$i$i669 = (($229) + 16|0);
         $231 = HEAP32[$__einp_$i$i$i$i669>>2]|0;
         $cmp$i$i$i$i670 = ($230|0)==($231|0);
         if ($cmp$i$i$i$i670) {
          $vtable$i$i$i$i672 = HEAP32[$229>>2]|0;
          $vfn$i$i$i$i673 = (($vtable$i$i$i$i672) + 36|0);
          $232 = HEAP32[$vfn$i$i$i$i673>>2]|0;
          __THREW__ = 0;
          $call$i$i$i$i703 = (invoke_ii($232|0,($229|0))|0);
          $233 = __THREW__; __THREW__ = 0;
          $234 = $233&1;
          if ($234) {
           label = 21;
           break L3;
          } else {
           $retval$0$i$i$i$i676 = $call$i$i$i$i703;
          }
         } else {
          $235 = HEAP32[$230>>2]|0;
          $retval$0$i$i$i$i676 = $235;
         }
         $cmp$i1$i$i$i677 = ($retval$0$i$i$i$i676|0)==(-1);
         if ($cmp$i1$i$i$i677) {
          HEAP32[$__b>>2] = 0;
          $243 = 1;
          break;
         } else {
          $$pre$i$i$i679 = HEAP32[$__b>>2]|0;
          $phitmp$i$i$i680 = ($$pre$i$i$i679|0)==(0|0);
          $243 = $phitmp$i$i$i680;
          break;
         }
        }
       } while(0);
       $tobool$i2$i$i684 = ($236|0)==(0|0);
       do {
        if ($tobool$i2$i$i684) {
         $407 = $$pre$i15$i$i697;
         label = 208;
        } else {
         $__ninp_$i$i3$i$i686 = (($236) + 12|0);
         $237 = HEAP32[$__ninp_$i$i3$i$i686>>2]|0;
         $__einp_$i$i4$i$i687 = (($236) + 16|0);
         $238 = HEAP32[$__einp_$i$i4$i$i687>>2]|0;
         $cmp$i$i5$i$i688 = ($237|0)==($238|0);
         if ($cmp$i$i5$i$i688) {
          $vtable$i$i7$i$i690 = HEAP32[$236>>2]|0;
          $vfn$i$i8$i$i691 = (($vtable$i$i7$i$i690) + 36|0);
          $239 = HEAP32[$vfn$i$i8$i$i691>>2]|0;
          __THREW__ = 0;
          $call$i$i9$i$i705 = (invoke_ii($239|0,($236|0))|0);
          $240 = __THREW__; __THREW__ = 0;
          $241 = $240&1;
          if ($241) {
           label = 21;
           break L3;
          } else {
           $retval$0$i$i12$i$i694 = $call$i$i9$i$i705;
          }
         } else {
          $242 = HEAP32[$237>>2]|0;
          $retval$0$i$i12$i$i694 = $242;
         }
         $cmp$i1$i13$i$i695 = ($retval$0$i$i12$i$i694|0)==(-1);
         if ($cmp$i1$i13$i$i695) {
          HEAP32[$__e>>2] = 0;
          $407 = 0;
          label = 208;
          break;
         } else {
          $phitmp$i16$i$i698 = ($$pre$i15$i$i697|0)==(0|0);
          $cmptmp$i$i701 = $243 ^ $phitmp$i16$i$i698;
          if ($cmptmp$i$i701) {
           $408 = $$pre$i15$i$i697;$409 = $$pre$i15$i$i697;
           break;
          } else {
           $$pre$i15$i$i535 = $$pre$i15$i$i697;
           break L29;
          }
         }
        }
       } while(0);
       if ((label|0) == 208) {
        label = 0;
        if ($243) {
         $$pre$i15$i$i535 = $407;
         break;
        } else {
         $408 = $407;$409 = 0;
        }
       }
       $244 = HEAP32[$__b>>2]|0;
       $__ninp_$i$i655 = (($244) + 12|0);
       $245 = HEAP32[$__ninp_$i$i655>>2]|0;
       $__einp_$i$i656 = (($244) + 16|0);
       $246 = HEAP32[$__einp_$i$i656>>2]|0;
       $cmp$i$i657 = ($245|0)==($246|0);
       if ($cmp$i$i657) {
        $vtable$i$i658 = HEAP32[$244>>2]|0;
        $vfn$i$i659 = (($vtable$i$i658) + 36|0);
        $247 = HEAP32[$vfn$i$i659>>2]|0;
        __THREW__ = 0;
        $call$i$i664 = (invoke_ii($247|0,($244|0))|0);
        $248 = __THREW__; __THREW__ = 0;
        $249 = $248&1;
        if ($249) {
         label = 21;
         break L3;
        } else {
         $retval$0$i$i662 = $call$i$i664;
        }
       } else {
        $250 = HEAP32[$245>>2]|0;
        $retval$0$i$i662 = $250;
       }
       $vtable$i649 = HEAP32[$__ct>>2]|0;
       $vfn$i650 = (($vtable$i649) + 12|0);
       $251 = HEAP32[$vfn$i650>>2]|0;
       __THREW__ = 0;
       $call$i651 = (invoke_iiii($251|0,($__ct|0),2048,($retval$0$i$i662|0))|0);
       $252 = __THREW__; __THREW__ = 0;
       $253 = $252&1;
       if ($253) {
        label = 21;
        break L3;
       }
       if ($call$i651) {
        $254 = HEAP32[$__wn>>2]|0;
        $255 = HEAP32[$__we$addr>>2]|0;
        $cmp205 = ($254|0)==($255|0);
        if ($cmp205) {
         __THREW__ = 0;
         invoke_viii(424,($__wb|0),($__wn|0),($__we$addr|0));
         $256 = __THREW__; __THREW__ = 0;
         $257 = $256&1;
         if ($257) {
          label = 21;
          break L3;
         }
         $$pre970 = HEAP32[$__wn>>2]|0;
         $258 = $$pre970;
        } else {
         $258 = $254;
        }
        $incdec$ptr = (($258) + 4|0);
        HEAP32[$__wn>>2] = $incdec$ptr;
        HEAP32[$258>>2] = $retval$0$i$i662;
        $inc = (($__ng$0) + 1)|0;
        $410 = $262;$__ng$1 = $inc;
       } else {
        $259 = HEAP8[$__grp>>0]|0;
        $and$i$i634 = $259 & 1;
        $tobool$i$i635 = ($and$i$i634<<24>>24)==(0);
        if ($tobool$i$i635) {
         $conv$i$i638 = $259&255;
         $shr1$i$i639 = $conv$i$i638 >>> 1;
         $cond$i641 = $shr1$i$i639;
        } else {
         $260 = HEAP32[$__size_$i2$i636>>2]|0;
         $cond$i641 = $260;
        }
        $notlhs = ($cond$i641|0)!=(0);
        $notrhs = ($__ng$0|0)!=(0);
        $or$cond76$not = $notrhs & $notlhs;
        $cmp215 = ($retval$0$i$i662|0)==($18|0);
        $or$cond988 = $or$cond76$not & $cmp215;
        if (!($or$cond988)) {
         $$pre$i15$i$i535 = $408;
         break;
        }
        $261 = HEAP32[$__ge>>2]|0;
        $cmp217 = ($262|0)==($261|0);
        if ($cmp217) {
         __THREW__ = 0;
         invoke_viii(417,($__gb|0),($__gn|0),($__ge|0));
         $263 = __THREW__; __THREW__ = 0;
         $264 = $263&1;
         if ($264) {
          label = 21;
          break L3;
         }
         $$pre971 = HEAP32[$__gn>>2]|0;
         $265 = $$pre971;
        } else {
         $265 = $262;
        }
        $incdec$ptr221 = (($265) + 4|0);
        HEAP32[$__gn>>2] = $incdec$ptr221;
        HEAP32[$265>>2] = $__ng$0;
        $410 = $incdec$ptr221;$__ng$1 = 0;
       }
       $266 = HEAP32[$__b>>2]|0;
       $__ninp_$i$i613 = (($266) + 12|0);
       $267 = HEAP32[$__ninp_$i$i613>>2]|0;
       $__einp_$i$i614 = (($266) + 16|0);
       $268 = HEAP32[$__einp_$i$i614>>2]|0;
       $cmp$i$i615 = ($267|0)==($268|0);
       if ($cmp$i$i615) {
        $vtable$i$i616 = HEAP32[$266>>2]|0;
        $vfn$i$i617 = (($vtable$i$i616) + 40|0);
        $269 = HEAP32[$vfn$i$i617>>2]|0;
        __THREW__ = 0;
        (invoke_ii($269|0,($266|0))|0);
        $270 = __THREW__; __THREW__ = 0;
        $271 = $270&1;
        if ($271) {
         label = 21;
         break L3;
        } else {
         $$pre$i15$i$i697 = $408;$236 = $409;$262 = $410;$__ng$0 = $__ng$1;
         continue;
        }
       } else {
        $incdec$ptr$i$i619 = (($267) + 4|0);
        HEAP32[$__ninp_$i$i613>>2] = $incdec$ptr$i$i619;
        $$pre$i15$i$i697 = $408;$236 = $409;$262 = $410;$__ng$0 = $__ng$1;
        continue;
       }
      }
      $272 = HEAP32[$__gb>>2]|0;
      $cmp228 = ($272|0)==($262|0);
      $cmp230 = ($__ng$0|0)==(0);
      $or$cond77 = $cmp228 | $cmp230;
      if ($or$cond77) {
       $411 = $262;
      } else {
       $273 = HEAP32[$__ge>>2]|0;
       $cmp232 = ($262|0)==($273|0);
       if ($cmp232) {
        __THREW__ = 0;
        invoke_viii(417,($__gb|0),($__gn|0),($__ge|0));
        $274 = __THREW__; __THREW__ = 0;
        $275 = $274&1;
        if ($275) {
         label = 26;
         break L3;
        }
        $$pre969 = HEAP32[$__gn>>2]|0;
        $276 = $$pre969;
       } else {
        $276 = $262;
       }
       $incdec$ptr236 = (($276) + 4|0);
       HEAP32[$__gn>>2] = $incdec$ptr236;
       HEAP32[$276>>2] = $__ng$0;
       $411 = $incdec$ptr236;
      }
      $277 = HEAP32[$__fd>>2]|0;
      $cmp238 = ($277|0)>(0);
      if ($cmp238) {
       $278 = HEAP32[$__b>>2]|0;
       $tobool$i$i$i505 = ($278|0)==(0|0);
       do {
        if ($tobool$i$i$i505) {
         $413 = 1;
        } else {
         $__ninp_$i$i$i$i506 = (($278) + 12|0);
         $279 = HEAP32[$__ninp_$i$i$i$i506>>2]|0;
         $__einp_$i$i$i$i507 = (($278) + 16|0);
         $280 = HEAP32[$__einp_$i$i$i$i507>>2]|0;
         $cmp$i$i$i$i508 = ($279|0)==($280|0);
         if ($cmp$i$i$i$i508) {
          $vtable$i$i$i$i510 = HEAP32[$278>>2]|0;
          $vfn$i$i$i$i511 = (($vtable$i$i$i$i510) + 36|0);
          $281 = HEAP32[$vfn$i$i$i$i511>>2]|0;
          __THREW__ = 0;
          $call$i$i$i$i542 = (invoke_ii($281|0,($278|0))|0);
          $282 = __THREW__; __THREW__ = 0;
          $283 = $282&1;
          if ($283) {
           label = 26;
           break L3;
          } else {
           $retval$0$i$i$i$i514 = $call$i$i$i$i542;
          }
         } else {
          $284 = HEAP32[$279>>2]|0;
          $retval$0$i$i$i$i514 = $284;
         }
         $cmp$i1$i$i$i515 = ($retval$0$i$i$i$i514|0)==(-1);
         if ($cmp$i1$i$i$i515) {
          HEAP32[$__b>>2] = 0;
          $413 = 1;
          break;
         } else {
          $$pre$i$i$i517 = HEAP32[$__b>>2]|0;
          $phitmp$i$i$i518 = ($$pre$i$i$i517|0)==(0|0);
          $413 = $phitmp$i$i$i518;
          break;
         }
        }
       } while(0);
       $tobool$i2$i$i522 = ($$pre$i15$i$i535|0)==(0|0);
       do {
        if ($tobool$i2$i$i522) {
         label = 249;
        } else {
         $__ninp_$i$i3$i$i524 = (($$pre$i15$i$i535) + 12|0);
         $285 = HEAP32[$__ninp_$i$i3$i$i524>>2]|0;
         $__einp_$i$i4$i$i525 = (($$pre$i15$i$i535) + 16|0);
         $286 = HEAP32[$__einp_$i$i4$i$i525>>2]|0;
         $cmp$i$i5$i$i526 = ($285|0)==($286|0);
         if ($cmp$i$i5$i$i526) {
          $vtable$i$i7$i$i528 = HEAP32[$$pre$i15$i$i535>>2]|0;
          $vfn$i$i8$i$i529 = (($vtable$i$i7$i$i528) + 36|0);
          $287 = HEAP32[$vfn$i$i8$i$i529>>2]|0;
          __THREW__ = 0;
          $call$i$i9$i$i544 = (invoke_ii($287|0,($$pre$i15$i$i535|0))|0);
          $288 = __THREW__; __THREW__ = 0;
          $289 = $288&1;
          if ($289) {
           label = 26;
           break L3;
          } else {
           $retval$0$i$i12$i$i532 = $call$i$i9$i$i544;
          }
         } else {
          $290 = HEAP32[$285>>2]|0;
          $retval$0$i$i12$i$i532 = $290;
         }
         $cmp$i1$i13$i$i533 = ($retval$0$i$i12$i$i532|0)==(-1);
         if ($cmp$i1$i13$i$i533) {
          HEAP32[$__e>>2] = 0;
          label = 249;
          break;
         } else {
          if ($413) {
           $414 = $$pre$i15$i$i535;
           break;
          } else {
           label = 255;
           break L3;
          }
         }
        }
       } while(0);
       if ((label|0) == 249) {
        label = 0;
        if ($413) {
         label = 255;
         break L3;
        } else {
         $414 = 0;
        }
       }
       $291 = HEAP32[$__b>>2]|0;
       $__ninp_$i$i472 = (($291) + 12|0);
       $292 = HEAP32[$__ninp_$i$i472>>2]|0;
       $__einp_$i$i473 = (($291) + 16|0);
       $293 = HEAP32[$__einp_$i$i473>>2]|0;
       $cmp$i$i474 = ($292|0)==($293|0);
       if ($cmp$i$i474) {
        $vtable$i$i475 = HEAP32[$291>>2]|0;
        $vfn$i$i476 = (($vtable$i$i475) + 36|0);
        $294 = HEAP32[$vfn$i$i476>>2]|0;
        __THREW__ = 0;
        $call$i$i481 = (invoke_ii($294|0,($291|0))|0);
        $295 = __THREW__; __THREW__ = 0;
        $296 = $295&1;
        if ($296) {
         label = 26;
         break L3;
        } else {
         $retval$0$i$i479 = $call$i$i481;
        }
       } else {
        $297 = HEAP32[$292>>2]|0;
        $retval$0$i$i479 = $297;
       }
       $298 = HEAP32[$__dp>>2]|0;
       $cmp245 = ($retval$0$i$i479|0)==($298|0);
       if (!($cmp245)) {
        label = 255;
        break L3;
       }
       $300 = HEAP32[$__b>>2]|0;
       $__ninp_$i$i438 = (($300) + 12|0);
       $301 = HEAP32[$__ninp_$i$i438>>2]|0;
       $__einp_$i$i439 = (($300) + 16|0);
       $302 = HEAP32[$__einp_$i$i439>>2]|0;
       $cmp$i$i440 = ($301|0)==($302|0);
       if ($cmp$i$i440) {
        $vtable$i$i441 = HEAP32[$300>>2]|0;
        $vfn$i$i442 = (($vtable$i$i441) + 40|0);
        $303 = HEAP32[$vfn$i$i442>>2]|0;
        __THREW__ = 0;
        (invoke_ii($303|0,($300|0))|0);
        $304 = __THREW__; __THREW__ = 0;
        $305 = $304&1;
        if ($305) {
         label = 26;
         break L3;
        } else {
         $$pre$i15$i$i383 = $414;$313 = $414;$344 = $277;
        }
       } else {
        $incdec$ptr$i$i444 = (($301) + 4|0);
        HEAP32[$__ninp_$i$i438>>2] = $incdec$ptr$i$i444;
        $$pre$i15$i$i383 = $414;$313 = $414;$344 = $277;
       }
       while(1) {
        $306 = HEAP32[$__b>>2]|0;
        $tobool$i$i$i353 = ($306|0)==(0|0);
        do {
         if ($tobool$i$i$i353) {
          $320 = 1;
         } else {
          $__ninp_$i$i$i$i354 = (($306) + 12|0);
          $307 = HEAP32[$__ninp_$i$i$i$i354>>2]|0;
          $__einp_$i$i$i$i355 = (($306) + 16|0);
          $308 = HEAP32[$__einp_$i$i$i$i355>>2]|0;
          $cmp$i$i$i$i356 = ($307|0)==($308|0);
          if ($cmp$i$i$i$i356) {
           $vtable$i$i$i$i358 = HEAP32[$306>>2]|0;
           $vfn$i$i$i$i359 = (($vtable$i$i$i$i358) + 36|0);
           $309 = HEAP32[$vfn$i$i$i$i359>>2]|0;
           __THREW__ = 0;
           $call$i$i$i$i390 = (invoke_ii($309|0,($306|0))|0);
           $310 = __THREW__; __THREW__ = 0;
           $311 = $310&1;
           if ($311) {
            label = 22;
            break L3;
           } else {
            $retval$0$i$i$i$i362 = $call$i$i$i$i390;
           }
          } else {
           $312 = HEAP32[$307>>2]|0;
           $retval$0$i$i$i$i362 = $312;
          }
          $cmp$i1$i$i$i363 = ($retval$0$i$i$i$i362|0)==(-1);
          if ($cmp$i1$i$i$i363) {
           HEAP32[$__b>>2] = 0;
           $320 = 1;
           break;
          } else {
           $$pre$i$i$i365 = HEAP32[$__b>>2]|0;
           $phitmp$i$i$i366 = ($$pre$i$i$i365|0)==(0|0);
           $320 = $phitmp$i$i$i366;
           break;
          }
         }
        } while(0);
        $tobool$i2$i$i370 = ($313|0)==(0|0);
        do {
         if ($tobool$i2$i$i370) {
          $$pre$i15$i$i383961$ph = $$pre$i15$i$i383;
          label = 272;
         } else {
          $__ninp_$i$i3$i$i372 = (($313) + 12|0);
          $314 = HEAP32[$__ninp_$i$i3$i$i372>>2]|0;
          $__einp_$i$i4$i$i373 = (($313) + 16|0);
          $315 = HEAP32[$__einp_$i$i4$i$i373>>2]|0;
          $cmp$i$i5$i$i374 = ($314|0)==($315|0);
          if ($cmp$i$i5$i$i374) {
           $vtable$i$i7$i$i376 = HEAP32[$313>>2]|0;
           $vfn$i$i8$i$i377 = (($vtable$i$i7$i$i376) + 36|0);
           $316 = HEAP32[$vfn$i$i8$i$i377>>2]|0;
           __THREW__ = 0;
           $call$i$i9$i$i392 = (invoke_ii($316|0,($313|0))|0);
           $317 = __THREW__; __THREW__ = 0;
           $318 = $317&1;
           if ($318) {
            label = 22;
            break L3;
           } else {
            $retval$0$i$i12$i$i380 = $call$i$i9$i$i392;
           }
          } else {
           $319 = HEAP32[$314>>2]|0;
           $retval$0$i$i12$i$i380 = $319;
          }
          $cmp$i1$i13$i$i381 = ($retval$0$i$i12$i$i380|0)==(-1);
          if ($cmp$i1$i13$i$i381) {
           HEAP32[$__e>>2] = 0;
           $$pre$i15$i$i383961$ph = 0;
           label = 272;
           break;
          } else {
           $phitmp$i16$i$i384 = ($$pre$i15$i$i383|0)==(0|0);
           $cmptmp$i$i387 = $320 ^ $phitmp$i16$i$i384;
           if ($cmptmp$i$i387) {
            $$pre$i15$i$i383961978 = $$pre$i15$i$i383;$415 = $$pre$i15$i$i383;
            break;
           } else {
            label = 279;
            break L3;
           }
          }
         }
        } while(0);
        if ((label|0) == 272) {
         label = 0;
         if ($320) {
          label = 279;
          break L3;
         } else {
          $$pre$i15$i$i383961978 = $$pre$i15$i$i383961$ph;$415 = 0;
         }
        }
        $321 = HEAP32[$__b>>2]|0;
        $__ninp_$i$i328 = (($321) + 12|0);
        $322 = HEAP32[$__ninp_$i$i328>>2]|0;
        $__einp_$i$i329 = (($321) + 16|0);
        $323 = HEAP32[$__einp_$i$i329>>2]|0;
        $cmp$i$i330 = ($322|0)==($323|0);
        if ($cmp$i$i330) {
         $vtable$i$i331 = HEAP32[$321>>2]|0;
         $vfn$i$i332 = (($vtable$i$i331) + 36|0);
         $324 = HEAP32[$vfn$i$i332>>2]|0;
         __THREW__ = 0;
         $call$i$i337 = (invoke_ii($324|0,($321|0))|0);
         $325 = __THREW__; __THREW__ = 0;
         $326 = $325&1;
         if ($326) {
          label = 22;
          break L3;
         } else {
          $retval$0$i$i335 = $call$i$i337;
         }
        } else {
         $327 = HEAP32[$322>>2]|0;
         $retval$0$i$i335 = $327;
        }
        $vtable$i313 = HEAP32[$__ct>>2]|0;
        $vfn$i314 = (($vtable$i313) + 12|0);
        $328 = HEAP32[$vfn$i314>>2]|0;
        __THREW__ = 0;
        $call$i315 = (invoke_iiii($328|0,($__ct|0),2048,($retval$0$i$i335|0))|0);
        $329 = __THREW__; __THREW__ = 0;
        $330 = $329&1;
        if ($330) {
         label = 22;
         break L3;
        }
        if (!($call$i315)) {
         label = 279;
         break L3;
        }
        $332 = HEAP32[$__wn>>2]|0;
        $333 = HEAP32[$__we$addr>>2]|0;
        $cmp264 = ($332|0)==($333|0);
        if ($cmp264) {
         __THREW__ = 0;
         invoke_viii(424,($__wb|0),($__wn|0),($__we$addr|0));
         $334 = __THREW__; __THREW__ = 0;
         $335 = $334&1;
         if ($335) {
          label = 22;
          break L3;
         }
        }
        $336 = HEAP32[$__b>>2]|0;
        $__ninp_$i$i282 = (($336) + 12|0);
        $337 = HEAP32[$__ninp_$i$i282>>2]|0;
        $__einp_$i$i283 = (($336) + 16|0);
        $338 = HEAP32[$__einp_$i$i283>>2]|0;
        $cmp$i$i284 = ($337|0)==($338|0);
        if ($cmp$i$i284) {
         $vtable$i$i285 = HEAP32[$336>>2]|0;
         $vfn$i$i286 = (($vtable$i$i285) + 36|0);
         $339 = HEAP32[$vfn$i$i286>>2]|0;
         __THREW__ = 0;
         $call$i$i291 = (invoke_ii($339|0,($336|0))|0);
         $340 = __THREW__; __THREW__ = 0;
         $341 = $340&1;
         if ($341) {
          label = 22;
          break L3;
         } else {
          $retval$0$i$i289 = $call$i$i291;
         }
        } else {
         $342 = HEAP32[$337>>2]|0;
         $retval$0$i$i289 = $342;
        }
        $343 = HEAP32[$__wn>>2]|0;
        $incdec$ptr270 = (($343) + 4|0);
        HEAP32[$__wn>>2] = $incdec$ptr270;
        HEAP32[$343>>2] = $retval$0$i$i289;
        $dec = (($344) + -1)|0;
        HEAP32[$__fd>>2] = $dec;
        $345 = HEAP32[$__b>>2]|0;
        $__ninp_$i$i105 = (($345) + 12|0);
        $346 = HEAP32[$__ninp_$i$i105>>2]|0;
        $__einp_$i$i106 = (($345) + 16|0);
        $347 = HEAP32[$__einp_$i$i106>>2]|0;
        $cmp$i$i107 = ($346|0)==($347|0);
        if ($cmp$i$i107) {
         $vtable$i$i108 = HEAP32[$345>>2]|0;
         $vfn$i$i109 = (($vtable$i$i108) + 40|0);
         $348 = HEAP32[$vfn$i$i109>>2]|0;
         __THREW__ = 0;
         (invoke_ii($348|0,($345|0))|0);
         $349 = __THREW__; __THREW__ = 0;
         $350 = $349&1;
         if ($350) {
          label = 22;
          break L3;
         }
        } else {
         $incdec$ptr$i$i111 = (($346) + 4|0);
         HEAP32[$__ninp_$i$i105>>2] = $incdec$ptr$i$i111;
        }
        $cmp252 = ($dec|0)>(0);
        if ($cmp252) {
         $$pre$i15$i$i383 = $$pre$i15$i$i383961978;$313 = $415;$344 = $dec;
        } else {
         $412 = $$pre$i15$i$i383961978;
         break;
        }
       }
      } else {
       $412 = $$pre$i15$i$i535;
      }
      $351 = HEAP32[$__wn>>2]|0;
      $352 = HEAP32[$__wb>>2]|0;
      $cmp277 = ($351|0)==($352|0);
      if ($cmp277) {
       label = 290;
       break L3;
      } else {
       $402 = $412;$403 = $411;$__trailing_sign$1 = $__trailing_sign$0947;
      }
      break;
     }
     case 1:  {
      $cond = ($__p$0945|0)==(3);
      if ($cond) {
       $389 = $398;$400 = $401;$__trailing_sign$0$lcssa = $__trailing_sign$0947;
       label = 292;
       break L3;
      }
      $41 = HEAP32[$__b>>2]|0;
      $__ninp_$i$i163 = (($41) + 12|0);
      $42 = HEAP32[$__ninp_$i$i163>>2]|0;
      $__einp_$i$i164 = (($41) + 16|0);
      $43 = HEAP32[$__einp_$i$i164>>2]|0;
      $cmp$i$i165 = ($42|0)==($43|0);
      if ($cmp$i$i165) {
       $vtable$i$i166 = HEAP32[$41>>2]|0;
       $vfn$i$i167 = (($vtable$i$i166) + 36|0);
       $44 = HEAP32[$vfn$i$i167>>2]|0;
       __THREW__ = 0;
       $call$i$i172 = (invoke_ii($44|0,($41|0))|0);
       $45 = __THREW__; __THREW__ = 0;
       $46 = $45&1;
       if ($46) {
        label = 26;
        break L3;
       } else {
        $retval$0$i$i170 = $call$i$i172;
       }
      } else {
       $47 = HEAP32[$42>>2]|0;
       $retval$0$i$i170 = $47;
      }
      $vtable$i = HEAP32[$__ct>>2]|0;
      $vfn$i = (($vtable$i) + 12|0);
      $48 = HEAP32[$vfn$i>>2]|0;
      __THREW__ = 0;
      $call$i174 = (invoke_iiii($48|0,($__ct|0),8192,($retval$0$i$i170|0))|0);
      $49 = __THREW__; __THREW__ = 0;
      $50 = $49&1;
      if ($50) {
       label = 26;
       break L3;
      }
      if (!($call$i174)) {
       label = 42;
       break L3;
      }
      $51 = HEAP32[$__b>>2]|0;
      $__ninp_$i$i176 = (($51) + 12|0);
      $52 = HEAP32[$__ninp_$i$i176>>2]|0;
      $__einp_$i$i177 = (($51) + 16|0);
      $53 = HEAP32[$__einp_$i$i177>>2]|0;
      $cmp$i$i178 = ($52|0)==($53|0);
      if ($cmp$i$i178) {
       $vtable$i$i179 = HEAP32[$51>>2]|0;
       $vfn$i$i180 = (($vtable$i$i179) + 40|0);
       $54 = HEAP32[$vfn$i$i180>>2]|0;
       __THREW__ = 0;
       $call$i$i187 = (invoke_ii($54|0,($51|0))|0);
       $55 = __THREW__; __THREW__ = 0;
       $56 = $55&1;
       if ($56) {
        label = 26;
        break L3;
       } else {
        $retval$0$i$i184 = $call$i$i187;
       }
      } else {
       $incdec$ptr$i$i182 = (($52) + 4|0);
       HEAP32[$__ninp_$i$i176>>2] = $incdec$ptr$i$i182;
       $57 = HEAP32[$52>>2]|0;
       $retval$0$i$i184 = $57;
      }
      __THREW__ = 0;
      invoke_vii(423,($__spaces|0),($retval$0$i$i184|0));
      $58 = __THREW__; __THREW__ = 0;
      $59 = $58&1;
      if ($59) {
       label = 26;
       break L3;
      } else {
       label = 43;
      }
      break;
     }
     case 3:  {
      $95 = HEAP8[$__psn>>0]|0;
      $and$i$i262 = $95 & 1;
      $tobool$i$i263 = ($and$i$i262<<24>>24)==(0);
      if ($tobool$i$i263) {
       $conv$i$i266 = $95&255;
       $shr1$i$i267 = $conv$i$i266 >>> 1;
       $cond$i269 = $shr1$i$i267;
      } else {
       $96 = HEAP32[$__data_$i$i$i>>2]|0;
       $cond$i269 = $96;
      }
      $97 = HEAP8[$__nsn>>0]|0;
      $and$i$i272 = $97 & 1;
      $tobool$i$i273 = ($and$i$i272<<24>>24)==(0);
      if ($tobool$i$i273) {
       $conv$i$i276 = $97&255;
       $shr1$i$i277 = $conv$i$i276 >>> 1;
       $cond$i279 = $shr1$i$i277;
      } else {
       $98 = HEAP32[$__data_$i$i$i433>>2]|0;
       $cond$i279 = $98;
      }
      $add = (0 - ($cond$i279))|0;
      $cmp35 = ($cond$i269|0)==($add|0);
      if ($cmp35) {
       $402 = $401;$403 = $398;$__trailing_sign$1 = $__trailing_sign$0947;
      } else {
       if ($tobool$i$i263) {
        $conv$i$i298 = $95&255;
        $shr1$i$i299 = $conv$i$i298 >>> 1;
        $cond$i301 = $shr1$i$i299;
       } else {
        $99 = HEAP32[$__data_$i$i$i>>2]|0;
        $cond$i301 = $99;
       }
       $cmp38 = ($cond$i301|0)==(0);
       if (!($cmp38)) {
        if ($tobool$i$i273) {
         $conv$i$i308 = $97&255;
         $shr1$i$i309 = $conv$i$i308 >>> 1;
         $cond$i311 = $shr1$i$i309;
        } else {
         $100 = HEAP32[$__data_$i$i$i433>>2]|0;
         $cond$i311 = $100;
        }
        $cmp40 = ($cond$i311|0)==(0);
        if (!($cmp40)) {
         $135 = HEAP32[$__b>>2]|0;
         $__ninp_$i$i484 = (($135) + 12|0);
         $136 = HEAP32[$__ninp_$i$i484>>2]|0;
         $__einp_$i$i485 = (($135) + 16|0);
         $137 = HEAP32[$__einp_$i$i485>>2]|0;
         $cmp$i$i486 = ($136|0)==($137|0);
         if ($cmp$i$i486) {
          $vtable$i$i487 = HEAP32[$135>>2]|0;
          $vfn$i$i488 = (($vtable$i$i487) + 36|0);
          $138 = HEAP32[$vfn$i$i488>>2]|0;
          __THREW__ = 0;
          $call$i$i493 = (invoke_ii($138|0,($135|0))|0);
          $139 = __THREW__; __THREW__ = 0;
          $140 = $139&1;
          if ($140) {
           label = 26;
           break L3;
          }
          $$pre966 = HEAP8[$__psn>>0]|0;
          $142 = $$pre966;$retval$0$i$i491 = $call$i$i493;
         } else {
          $141 = HEAP32[$136>>2]|0;
          $142 = $95;$retval$0$i$i491 = $141;
         }
         $and$i$i$i496 = $142 & 1;
         $tobool$i$i$i497 = ($and$i$i$i496<<24>>24)==(0);
         $143 = HEAP32[$__data_$i1$i$i>>2]|0;
         $__data_$i$i$i$983 = $tobool$i$i$i497 ? $__data_$i$i$i : $143;
         $144 = HEAP32[$__data_$i$i$i$983>>2]|0;
         $cmp79 = ($retval$0$i$i491|0)==($144|0);
         $145 = HEAP32[$__b>>2]|0;
         $__ninp_$i$i547 = (($145) + 12|0);
         $146 = HEAP32[$__ninp_$i$i547>>2]|0;
         $__einp_$i$i548 = (($145) + 16|0);
         $147 = HEAP32[$__einp_$i$i548>>2]|0;
         $cmp$i$i549 = ($146|0)==($147|0);
         if ($cmp79) {
          if ($cmp$i$i549) {
           $vtable$i$i550 = HEAP32[$145>>2]|0;
           $vfn$i$i551 = (($vtable$i$i550) + 40|0);
           $148 = HEAP32[$vfn$i$i551>>2]|0;
           __THREW__ = 0;
           (invoke_ii($148|0,($145|0))|0);
           $149 = __THREW__; __THREW__ = 0;
           $150 = $149&1;
           if ($150) {
            label = 26;
            break L3;
           }
          } else {
           $incdec$ptr$i$i553 = (($146) + 4|0);
           HEAP32[$__ninp_$i$i547>>2] = $incdec$ptr$i$i553;
          }
          $151 = HEAP8[$__psn>>0]|0;
          $and$i$i559 = $151 & 1;
          $tobool$i$i560 = ($and$i$i559<<24>>24)==(0);
          if ($tobool$i$i560) {
           $conv$i$i563 = $151&255;
           $shr1$i$i564 = $conv$i$i563 >>> 1;
           $cond$i566 = $shr1$i$i564;
          } else {
           $152 = HEAP32[$__data_$i$i$i>>2]|0;
           $cond$i566 = $152;
          }
          $cmp84 = ($cond$i566>>>0)>(1);
          $__psn$__trailing_sign$074 = $cmp84 ? $__psn : $__trailing_sign$0947;
          $402 = $401;$403 = $398;$__trailing_sign$1 = $__psn$__trailing_sign$074;
          break L27;
         }
         if ($cmp$i$i549) {
          $vtable$i$i572 = HEAP32[$145>>2]|0;
          $vfn$i$i573 = (($vtable$i$i572) + 36|0);
          $153 = HEAP32[$vfn$i$i573>>2]|0;
          __THREW__ = 0;
          $call$i$i578 = (invoke_ii($153|0,($145|0))|0);
          $154 = __THREW__; __THREW__ = 0;
          $155 = $154&1;
          if ($155) {
           label = 26;
           break L3;
          } else {
           $retval$0$i$i576 = $call$i$i578;
          }
         } else {
          $156 = HEAP32[$146>>2]|0;
          $retval$0$i$i576 = $156;
         }
         $157 = HEAP8[$__nsn>>0]|0;
         $and$i$i$i581 = $157 & 1;
         $tobool$i$i$i582 = ($and$i$i$i581<<24>>24)==(0);
         $158 = HEAP32[$__data_$i1$i$i431>>2]|0;
         $__data_$i$i$i433$984 = $tobool$i$i$i582 ? $__data_$i$i$i433 : $158;
         $159 = HEAP32[$__data_$i$i$i433$984>>2]|0;
         $cmp92 = ($retval$0$i$i576|0)==($159|0);
         if (!($cmp92)) {
          label = 135;
          break L3;
         }
         $160 = HEAP32[$__b>>2]|0;
         $__ninp_$i$i590 = (($160) + 12|0);
         $161 = HEAP32[$__ninp_$i$i590>>2]|0;
         $__einp_$i$i591 = (($160) + 16|0);
         $162 = HEAP32[$__einp_$i$i591>>2]|0;
         $cmp$i$i592 = ($161|0)==($162|0);
         if ($cmp$i$i592) {
          $vtable$i$i593 = HEAP32[$160>>2]|0;
          $vfn$i$i594 = (($vtable$i$i593) + 40|0);
          $163 = HEAP32[$vfn$i$i594>>2]|0;
          __THREW__ = 0;
          (invoke_ii($163|0,($160|0))|0);
          $164 = __THREW__; __THREW__ = 0;
          $165 = $164&1;
          if ($165) {
           label = 26;
           break L3;
          }
         } else {
          $incdec$ptr$i$i596 = (($161) + 4|0);
          HEAP32[$__ninp_$i$i590>>2] = $incdec$ptr$i$i596;
         }
         HEAP8[$__neg>>0] = 1;
         $166 = HEAP8[$__nsn>>0]|0;
         $and$i$i602 = $166 & 1;
         $tobool$i$i603 = ($and$i$i602<<24>>24)==(0);
         if ($tobool$i$i603) {
          $conv$i$i606 = $166&255;
          $shr1$i$i607 = $conv$i$i606 >>> 1;
          $cond$i609 = $shr1$i$i607;
         } else {
          $167 = HEAP32[$__data_$i$i$i433>>2]|0;
          $cond$i609 = $167;
         }
         $cmp97 = ($cond$i609>>>0)>(1);
         $__nsn$__trailing_sign$075 = $cmp97 ? $__nsn : $__trailing_sign$0947;
         $402 = $401;$403 = $398;$__trailing_sign$1 = $__nsn$__trailing_sign$075;
         break L27;
        }
       }
       if ($tobool$i$i263) {
        $conv$i$i322 = $95&255;
        $shr1$i$i323 = $conv$i$i322 >>> 1;
        $cond$i325 = $shr1$i$i323;
       } else {
        $101 = HEAP32[$__data_$i$i$i>>2]|0;
        $cond$i325 = $101;
       }
       $cmp43 = ($cond$i325|0)==(0);
       $102 = HEAP32[$__b>>2]|0;
       $__ninp_$i$i417 = (($102) + 12|0);
       $103 = HEAP32[$__ninp_$i$i417>>2]|0;
       $__einp_$i$i418 = (($102) + 16|0);
       $104 = HEAP32[$__einp_$i$i418>>2]|0;
       $cmp$i$i419 = ($103|0)==($104|0);
       if ($cmp43) {
        if ($cmp$i$i419) {
         $vtable$i$i420 = HEAP32[$102>>2]|0;
         $vfn$i$i421 = (($vtable$i$i420) + 36|0);
         $120 = HEAP32[$vfn$i$i421>>2]|0;
         __THREW__ = 0;
         $call$i$i426 = (invoke_ii($120|0,($102|0))|0);
         $121 = __THREW__; __THREW__ = 0;
         $122 = $121&1;
         if ($122) {
          label = 26;
          break L3;
         }
         $$pre964 = HEAP8[$__nsn>>0]|0;
         $124 = $$pre964;$retval$0$i$i424 = $call$i$i426;
        } else {
         $123 = HEAP32[$103>>2]|0;
         $124 = $97;$retval$0$i$i424 = $123;
        }
        $and$i$i$i429 = $124 & 1;
        $tobool$i$i$i430 = ($and$i$i$i429<<24>>24)==(0);
        $125 = HEAP32[$__data_$i1$i$i431>>2]|0;
        $__data_$i$i$i433$ = $tobool$i$i$i430 ? $__data_$i$i$i433 : $125;
        $126 = HEAP32[$__data_$i$i$i433$>>2]|0;
        $cmp64 = ($retval$0$i$i424|0)==($126|0);
        if (!($cmp64)) {
         $402 = $401;$403 = $398;$__trailing_sign$1 = $__trailing_sign$0947;
         break L27;
        }
        $127 = HEAP32[$__b>>2]|0;
        $__ninp_$i$i450 = (($127) + 12|0);
        $128 = HEAP32[$__ninp_$i$i450>>2]|0;
        $__einp_$i$i451 = (($127) + 16|0);
        $129 = HEAP32[$__einp_$i$i451>>2]|0;
        $cmp$i$i452 = ($128|0)==($129|0);
        if ($cmp$i$i452) {
         $vtable$i$i453 = HEAP32[$127>>2]|0;
         $vfn$i$i454 = (($vtable$i$i453) + 40|0);
         $130 = HEAP32[$vfn$i$i454>>2]|0;
         __THREW__ = 0;
         (invoke_ii($130|0,($127|0))|0);
         $131 = __THREW__; __THREW__ = 0;
         $132 = $131&1;
         if ($132) {
          label = 26;
          break L3;
         }
        } else {
         $incdec$ptr$i$i456 = (($128) + 4|0);
         HEAP32[$__ninp_$i$i450>>2] = $incdec$ptr$i$i456;
        }
        HEAP8[$__neg>>0] = 1;
        $133 = HEAP8[$__nsn>>0]|0;
        $and$i$i462 = $133 & 1;
        $tobool$i$i463 = ($and$i$i462<<24>>24)==(0);
        if ($tobool$i$i463) {
         $conv$i$i466 = $133&255;
         $shr1$i$i467 = $conv$i$i466 >>> 1;
         $cond$i469 = $shr1$i$i467;
        } else {
         $134 = HEAP32[$__data_$i$i$i433>>2]|0;
         $cond$i469 = $134;
        }
        $cmp69 = ($cond$i469>>>0)>(1);
        $__nsn$__trailing_sign$0 = $cmp69 ? $__nsn : $__trailing_sign$0947;
        $402 = $401;$403 = $398;$__trailing_sign$1 = $__nsn$__trailing_sign$0;
        break L27;
       }
       if ($cmp$i$i419) {
        $vtable$i$i343 = HEAP32[$102>>2]|0;
        $vfn$i$i344 = (($vtable$i$i343) + 36|0);
        $105 = HEAP32[$vfn$i$i344>>2]|0;
        __THREW__ = 0;
        $call$i$i349 = (invoke_ii($105|0,($102|0))|0);
        $106 = __THREW__; __THREW__ = 0;
        $107 = $106&1;
        if ($107) {
         label = 26;
         break L3;
        }
        $$pre965 = HEAP8[$__psn>>0]|0;
        $109 = $$pre965;$retval$0$i$i347 = $call$i$i349;
       } else {
        $108 = HEAP32[$103>>2]|0;
        $109 = $95;$retval$0$i$i347 = $108;
       }
       $and$i$i$i = $109 & 1;
       $tobool$i$i$i351 = ($and$i$i$i<<24>>24)==(0);
       $110 = HEAP32[$__data_$i1$i$i>>2]|0;
       $__data_$i$i$i$ = $tobool$i$i$i351 ? $__data_$i$i$i : $110;
       $111 = HEAP32[$__data_$i$i$i$>>2]|0;
       $cmp49 = ($retval$0$i$i347|0)==($111|0);
       if (!($cmp49)) {
        HEAP8[$__neg>>0] = 1;
        $402 = $401;$403 = $398;$__trailing_sign$1 = $__trailing_sign$0947;
        break L27;
       }
       $112 = HEAP32[$__b>>2]|0;
       $__ninp_$i$i395 = (($112) + 12|0);
       $113 = HEAP32[$__ninp_$i$i395>>2]|0;
       $__einp_$i$i396 = (($112) + 16|0);
       $114 = HEAP32[$__einp_$i$i396>>2]|0;
       $cmp$i$i397 = ($113|0)==($114|0);
       if ($cmp$i$i397) {
        $vtable$i$i398 = HEAP32[$112>>2]|0;
        $vfn$i$i399 = (($vtable$i$i398) + 40|0);
        $115 = HEAP32[$vfn$i$i399>>2]|0;
        __THREW__ = 0;
        (invoke_ii($115|0,($112|0))|0);
        $116 = __THREW__; __THREW__ = 0;
        $117 = $116&1;
        if ($117) {
         label = 26;
         break L3;
        }
       } else {
        $incdec$ptr$i$i401 = (($113) + 4|0);
        HEAP32[$__ninp_$i$i395>>2] = $incdec$ptr$i$i401;
       }
       $118 = HEAP8[$__psn>>0]|0;
       $and$i$i407 = $118 & 1;
       $tobool$i$i408 = ($and$i$i407<<24>>24)==(0);
       if ($tobool$i$i408) {
        $conv$i$i411 = $118&255;
        $shr1$i$i412 = $conv$i$i411 >>> 1;
        $cond$i414 = $shr1$i$i412;
       } else {
        $119 = HEAP32[$__data_$i$i$i>>2]|0;
        $cond$i414 = $119;
       }
       $cmp54 = ($cond$i414>>>0)>(1);
       $__psn$__trailing_sign$0 = $cmp54 ? $__psn : $__trailing_sign$0947;
       $402 = $401;$403 = $398;$__trailing_sign$1 = $__psn$__trailing_sign$0;
      }
      break;
     }
     case 2:  {
      $tobool108 = ($__trailing_sign$0947|0)!=(0|0);
      $cmp110 = ($__p$0945>>>0)<(2);
      $or$cond = $tobool108 | $cmp110;
      if (!($or$cond)) {
       $cmp111 = ($__p$0945|0)==(2);
       if ($cmp111) {
        $169 = HEAP8[$arrayidx114>>0]|0;
        $cmp116 = ($169<<24>>24)!=(0);
        $170 = $cmp116;
       } else {
        $170 = 0;
       }
       $brmerge = $cmp120904 | $170;
       if (!($brmerge)) {
        $402 = $401;$403 = $398;$__trailing_sign$1 = 0;
        break L27;
       }
      }
      $171 = HEAP8[$__sym>>0]|0;
      $and$i$i$i625 = $171 & 1;
      $tobool$i$i$i626 = ($and$i$i$i625<<24>>24)==(0);
      $172 = HEAP32[$__data_$i1$i$i645>>2]|0;
      $__data_$i$i$i629$ = $tobool$i$i$i626 ? $__data_$i$i$i629 : $172;
      $cmp128 = ($__p$0945|0)==(0);
      L267: do {
       if ($cmp128) {
        $$pre$i15$i$i809 = $401;$193 = $171;$203 = $401;$__sym_curr_char$sroa$0$0$load892897 = $__data_$i$i$i629$;
       } else {
        $sub = (($__p$0945) + -1)|0;
        $arrayidx130 = (($__pat) + ($sub)|0);
        $173 = HEAP8[$arrayidx130>>0]|0;
        $switch = ($173&255)<(2);
        if ($switch) {
         $174 = $171;$__sym_space_end$sroa$0$0$load896899 = $__data_$i$i$i629$;
         while(1) {
          $and$i$i$i643 = $174 & 1;
          $tobool$i$i$i644 = ($and$i$i$i643<<24>>24)==(0);
          if ($tobool$i$i$i644) {
           $conv$i$i$i = $174&255;
           $shr1$i$i$i = $conv$i$i$i >>> 1;
           $cond$i6$i = $shr1$i$i$i;$cond$i7$i = $__data_$i$i$i629;
          } else {
           $175 = HEAP32[$__data_$i1$i$i645>>2]|0;
           $176 = HEAP32[$__data_$i$i$i629>>2]|0;
           $cond$i6$i = $176;$cond$i7$i = $175;
          }
          $add$ptr$i647 = (($cond$i7$i) + ($cond$i6$i<<2)|0);
          $lnot$i = ($__sym_space_end$sroa$0$0$load896899|0)==($add$ptr$i647|0);
          if ($lnot$i) {
           $181 = $174;
           break;
          }
          $177 = HEAP32[$__sym_space_end$sroa$0$0$load896899>>2]|0;
          $vtable$i707 = HEAP32[$__ct>>2]|0;
          $vfn$i708 = (($vtable$i707) + 12|0);
          $178 = HEAP32[$vfn$i708>>2]|0;
          __THREW__ = 0;
          $call$i709 = (invoke_iiii($178|0,($__ct|0),8192,($177|0))|0);
          $179 = __THREW__; __THREW__ = 0;
          $180 = $179&1;
          if ($180) {
           label = 23;
           break L3;
          }
          if (!($call$i709)) {
           label = 149;
           break;
          }
          $incdec$ptr$i = (($__sym_space_end$sroa$0$0$load896899) + 4|0);
          $$pre967 = HEAP8[$__sym>>0]|0;
          $174 = $$pre967;$__sym_space_end$sroa$0$0$load896899 = $incdec$ptr$i;
         }
         if ((label|0) == 149) {
          label = 0;
          $$pre968 = HEAP8[$__sym>>0]|0;
          $181 = $$pre968;
         }
         $and$i$i$i713 = $181 & 1;
         $tobool$i$i$i714 = ($and$i$i$i713<<24>>24)==(0);
         $182 = HEAP32[$__data_$i1$i$i645>>2]|0;
         $__data_$i$i$i629$985 = $tobool$i$i$i714 ? $__data_$i$i$i629 : $182;
         $sub$ptr$lhs$cast$i = $__sym_space_end$sroa$0$0$load896899;
         $sub$ptr$rhs$cast$i = $__data_$i$i$i629$985;
         $sub$ptr$sub$i = (($sub$ptr$lhs$cast$i) - ($sub$ptr$rhs$cast$i))|0;
         $sub$ptr$div$i = $sub$ptr$sub$i >> 2;
         $183 = HEAP8[$__spaces>>0]|0;
         $and$i$i769 = $183 & 1;
         $tobool$i$i770 = ($and$i$i769<<24>>24)==(0);
         if ($tobool$i$i770) {
          $conv$i$i773 = $183&255;
          $shr1$i$i774 = $conv$i$i773 >>> 1;
          $cond$i776 = $shr1$i$i774;
         } else {
          $184 = HEAP32[$__data_$i$i$i825>>2]|0;
          $cond$i776 = $184;
         }
         $cmp155 = ($sub$ptr$div$i>>>0)>($cond$i776>>>0);
         L285: do {
          if (!($cmp155)) {
           if ($tobool$i$i770) {
            $conv$i$i$i826 = $183&255;
            $shr1$i$i$i827 = $conv$i$i$i826 >>> 1;
            $add$ptr$i831$sum972 = (($shr1$i$i$i827) - ($sub$ptr$div$i))|0;
            $add$ptr$i$i$i973 = (($__data_$i$i$i825) + ($add$ptr$i831$sum972<<2)|0);
            $conv$i$i$i882 = $183&255;
            $shr1$i$i$i883 = $conv$i$i$i882 >>> 1;
            $add$ptr$i$i$i974 = $add$ptr$i$i$i973;$cond$i6$i886 = $shr1$i$i$i883;$cond$i7$i885 = $__data_$i$i$i825;
           } else {
            $185 = HEAP32[$__data_$i1$i$i878>>2]|0;
            $186 = HEAP32[$__data_$i$i$i825>>2]|0;
            $add$ptr$i831$sum = (($186) - ($sub$ptr$div$i))|0;
            $add$ptr$i$i$i = (($185) + ($add$ptr$i831$sum<<2)|0);
            $add$ptr$i$i$i974 = $add$ptr$i$i$i;$cond$i6$i886 = $186;$cond$i7$i885 = $185;
           }
           $add$ptr$i887 = (($cond$i7$i885) + ($cond$i6$i886<<2)|0);
           $187 = HEAP32[$__data_$i1$i$i645>>2]|0;
           $__data_$i$i$i629$986 = $tobool$i$i$i714 ? $__data_$i$i$i629 : $187;
           $lnot$i5$i$i = ($add$ptr$i$i$i974|0)==($add$ptr$i887|0);
           if ($lnot$i5$i$i) {
            $$pre$i15$i$i809 = $401;$193 = $181;$203 = $401;$__sym_curr_char$sroa$0$0$load892897 = $__sym_space_end$sroa$0$0$load896899;
            break L267;
           } else {
            $189 = $add$ptr$i$i$i974;$191 = $__data_$i$i$i629$986;
           }
           while(1) {
            $188 = HEAP32[$189>>2]|0;
            $190 = HEAP32[$191>>2]|0;
            $cmp$i$i$i = ($188|0)==($190|0);
            if (!($cmp$i$i$i)) {
             break L285;
            }
            $incdec$ptr$i2$i$i = (($189) + 4|0);
            $lnot$i$i$i = ($incdec$ptr$i2$i$i|0)==($add$ptr$i887|0);
            if ($lnot$i$i$i) {
             $$pre$i15$i$i809 = $401;$193 = $181;$203 = $401;$__sym_curr_char$sroa$0$0$load892897 = $__sym_space_end$sroa$0$0$load896899;
             break L267;
            }
            $incdec$ptr$i$i$i = (($191) + 4|0);
            $189 = $incdec$ptr$i2$i$i;$191 = $incdec$ptr$i$i$i;
           }
          }
         } while(0);
         $192 = HEAP32[$__data_$i1$i$i645>>2]|0;
         $__data_$i$i$i629$987 = $tobool$i$i$i714 ? $__data_$i$i$i629 : $192;
         $$pre$i15$i$i809 = $401;$193 = $181;$203 = $401;$__sym_curr_char$sroa$0$0$load892897 = $__data_$i$i$i629$987;
        } else {
         $$pre$i15$i$i809 = $401;$193 = $171;$203 = $401;$__sym_curr_char$sroa$0$0$load892897 = $__data_$i$i$i629$;
        }
       }
      } while(0);
      L296: while(1) {
       $and$i$i$i838 = $193 & 1;
       $tobool$i$i$i839 = ($and$i$i$i838<<24>>24)==(0);
       if ($tobool$i$i$i839) {
        $conv$i$i$i844 = $193&255;
        $shr1$i$i$i845 = $conv$i$i$i844 >>> 1;
        $cond$i6$i848 = $shr1$i$i$i845;$cond$i7$i847 = $__data_$i$i$i629;
       } else {
        $194 = HEAP32[$__data_$i1$i$i645>>2]|0;
        $195 = HEAP32[$__data_$i$i$i629>>2]|0;
        $cond$i6$i848 = $195;$cond$i7$i847 = $194;
       }
       $add$ptr$i849 = (($cond$i7$i847) + ($cond$i6$i848<<2)|0);
       $lnot$i836 = ($__sym_curr_char$sroa$0$0$load892897|0)==($add$ptr$i849|0);
       if ($lnot$i836) {
        $405 = $$pre$i15$i$i809;
        break;
       }
       $196 = HEAP32[$__b>>2]|0;
       $tobool$i$i$i779 = ($196|0)==(0|0);
       do {
        if ($tobool$i$i$i779) {
         $210 = 1;
        } else {
         $__ninp_$i$i$i$i780 = (($196) + 12|0);
         $197 = HEAP32[$__ninp_$i$i$i$i780>>2]|0;
         $__einp_$i$i$i$i781 = (($196) + 16|0);
         $198 = HEAP32[$__einp_$i$i$i$i781>>2]|0;
         $cmp$i$i$i$i782 = ($197|0)==($198|0);
         if ($cmp$i$i$i$i782) {
          $vtable$i$i$i$i784 = HEAP32[$196>>2]|0;
          $vfn$i$i$i$i785 = (($vtable$i$i$i$i784) + 36|0);
          $199 = HEAP32[$vfn$i$i$i$i785>>2]|0;
          __THREW__ = 0;
          $call$i$i$i$i815 = (invoke_ii($199|0,($196|0))|0);
          $200 = __THREW__; __THREW__ = 0;
          $201 = $200&1;
          if ($201) {
           label = 24;
           break L3;
          } else {
           $retval$0$i$i$i$i788 = $call$i$i$i$i815;
          }
         } else {
          $202 = HEAP32[$197>>2]|0;
          $retval$0$i$i$i$i788 = $202;
         }
         $cmp$i1$i$i$i789 = ($retval$0$i$i$i$i788|0)==(-1);
         if ($cmp$i1$i$i$i789) {
          HEAP32[$__b>>2] = 0;
          $210 = 1;
          break;
         } else {
          $$pre$i$i$i791 = HEAP32[$__b>>2]|0;
          $phitmp$i$i$i792 = ($$pre$i$i$i791|0)==(0|0);
          $210 = $phitmp$i$i$i792;
          break;
         }
        }
       } while(0);
       $tobool$i2$i$i796 = ($203|0)==(0|0);
       do {
        if ($tobool$i2$i$i796) {
         $$pre$i15$i$i809958 = $$pre$i15$i$i809;
         label = 179;
        } else {
         $__ninp_$i$i3$i$i798 = (($203) + 12|0);
         $204 = HEAP32[$__ninp_$i$i3$i$i798>>2]|0;
         $__einp_$i$i4$i$i799 = (($203) + 16|0);
         $205 = HEAP32[$__einp_$i$i4$i$i799>>2]|0;
         $cmp$i$i5$i$i800 = ($204|0)==($205|0);
         if ($cmp$i$i5$i$i800) {
          $vtable$i$i7$i$i802 = HEAP32[$203>>2]|0;
          $vfn$i$i8$i$i803 = (($vtable$i$i7$i$i802) + 36|0);
          $206 = HEAP32[$vfn$i$i8$i$i803>>2]|0;
          __THREW__ = 0;
          $call$i$i9$i$i817 = (invoke_ii($206|0,($203|0))|0);
          $207 = __THREW__; __THREW__ = 0;
          $208 = $207&1;
          if ($208) {
           label = 24;
           break L3;
          } else {
           $retval$0$i$i12$i$i806 = $call$i$i9$i$i817;
          }
         } else {
          $209 = HEAP32[$204>>2]|0;
          $retval$0$i$i12$i$i806 = $209;
         }
         $cmp$i1$i13$i$i807 = ($retval$0$i$i12$i$i806|0)==(-1);
         if ($cmp$i1$i13$i$i807) {
          HEAP32[$__e>>2] = 0;
          $$pre$i15$i$i809958 = 0;
          label = 179;
          break;
         } else {
          $phitmp$i16$i$i810 = ($$pre$i15$i$i809|0)==(0|0);
          $cmptmp$i$i813 = $210 ^ $phitmp$i16$i$i810;
          if ($cmptmp$i$i813) {
           $$pre$i15$i$i809957 = $$pre$i15$i$i809;$406 = $$pre$i15$i$i809;
           break;
          } else {
           $405 = $$pre$i15$i$i809;
           break L296;
          }
         }
        }
       } while(0);
       if ((label|0) == 179) {
        label = 0;
        if ($210) {
         $405 = $$pre$i15$i$i809958;
         break;
        } else {
         $$pre$i15$i$i809957 = $$pre$i15$i$i809958;$406 = 0;
        }
       }
       $211 = HEAP32[$__b>>2]|0;
       $__ninp_$i$i757 = (($211) + 12|0);
       $212 = HEAP32[$__ninp_$i$i757>>2]|0;
       $__einp_$i$i758 = (($211) + 16|0);
       $213 = HEAP32[$__einp_$i$i758>>2]|0;
       $cmp$i$i759 = ($212|0)==($213|0);
       if ($cmp$i$i759) {
        $vtable$i$i760 = HEAP32[$211>>2]|0;
        $vfn$i$i761 = (($vtable$i$i760) + 36|0);
        $214 = HEAP32[$vfn$i$i761>>2]|0;
        __THREW__ = 0;
        $call$i$i766 = (invoke_ii($214|0,($211|0))|0);
        $215 = __THREW__; __THREW__ = 0;
        $216 = $215&1;
        if ($216) {
         label = 24;
         break L3;
        } else {
         $retval$0$i$i764 = $call$i$i766;
        }
       } else {
        $217 = HEAP32[$212>>2]|0;
        $retval$0$i$i764 = $217;
       }
       $218 = HEAP32[$__sym_curr_char$sroa$0$0$load892897>>2]|0;
       $cmp178 = ($retval$0$i$i764|0)==($218|0);
       if (!($cmp178)) {
        $405 = $$pre$i15$i$i809957;
        break;
       }
       $219 = HEAP32[$__b>>2]|0;
       $__ninp_$i$i743 = (($219) + 12|0);
       $220 = HEAP32[$__ninp_$i$i743>>2]|0;
       $__einp_$i$i744 = (($219) + 16|0);
       $221 = HEAP32[$__einp_$i$i744>>2]|0;
       $cmp$i$i745 = ($220|0)==($221|0);
       if ($cmp$i$i745) {
        $vtable$i$i746 = HEAP32[$219>>2]|0;
        $vfn$i$i747 = (($vtable$i$i746) + 40|0);
        $222 = HEAP32[$vfn$i$i747>>2]|0;
        __THREW__ = 0;
        (invoke_ii($222|0,($219|0))|0);
        $223 = __THREW__; __THREW__ = 0;
        $224 = $223&1;
        if ($224) {
         label = 24;
         break L3;
        }
       } else {
        $incdec$ptr$i$i749 = (($220) + 4|0);
        HEAP32[$__ninp_$i$i743>>2] = $incdec$ptr$i$i749;
       }
       $incdec$ptr$i741 = (($__sym_curr_char$sroa$0$0$load892897) + 4|0);
       $$pre = HEAP8[$__sym>>0]|0;
       $$pre$i15$i$i809 = $$pre$i15$i$i809957;$193 = $$pre;$203 = $406;$__sym_curr_char$sroa$0$0$load892897 = $incdec$ptr$i741;
      }
      if ($cmp120904) {
       $225 = HEAP8[$__sym>>0]|0;
       $and$i$i$i726 = $225 & 1;
       $tobool$i$i$i727 = ($and$i$i$i726<<24>>24)==(0);
       if ($tobool$i$i$i727) {
        $conv$i$i$i732 = $225&255;
        $shr1$i$i$i733 = $conv$i$i$i732 >>> 1;
        $cond$i6$i736 = $shr1$i$i$i733;$cond$i7$i735 = $__data_$i$i$i629;
       } else {
        $226 = HEAP32[$__data_$i1$i$i645>>2]|0;
        $227 = HEAP32[$__data_$i$i$i629>>2]|0;
        $cond$i6$i736 = $227;$cond$i7$i735 = $226;
       }
       $add$ptr$i737 = (($cond$i7$i735) + ($cond$i6$i736<<2)|0);
       $lnot$i724 = ($__sym_curr_char$sroa$0$0$load892897|0)==($add$ptr$i737|0);
       if ($lnot$i724) {
        $402 = $405;$403 = $398;$__trailing_sign$1 = $__trailing_sign$0947;
       } else {
        label = 194;
        break L3;
       }
      } else {
       $402 = $405;$403 = $398;$__trailing_sign$1 = $__trailing_sign$0947;
      }
      break;
     }
     default: {
      $402 = $401;$403 = $398;$__trailing_sign$1 = $__trailing_sign$0947;
     }
     }
    } while(0);
    L340: do {
     if ((label|0) == 43) {
      label = 0;
      $cmp16 = ($__p$0945|0)==(3);
      if ($cmp16) {
       $389 = $398;$400 = $401;$__trailing_sign$0$lcssa = $__trailing_sign$0947;
       label = 292;
       break L3;
      } else {
       $$pre$i15$i$i219 = $401;$68 = $401;
      }
      while(1) {
       $61 = HEAP32[$__b>>2]|0;
       $tobool$i$i$i189 = ($61|0)==(0|0);
       do {
        if ($tobool$i$i$i189) {
         $75 = 1;
        } else {
         $__ninp_$i$i$i$i190 = (($61) + 12|0);
         $62 = HEAP32[$__ninp_$i$i$i$i190>>2]|0;
         $__einp_$i$i$i$i191 = (($61) + 16|0);
         $63 = HEAP32[$__einp_$i$i$i$i191>>2]|0;
         $cmp$i$i$i$i192 = ($62|0)==($63|0);
         if ($cmp$i$i$i$i192) {
          $vtable$i$i$i$i194 = HEAP32[$61>>2]|0;
          $vfn$i$i$i$i195 = (($vtable$i$i$i$i194) + 36|0);
          $64 = HEAP32[$vfn$i$i$i$i195>>2]|0;
          __THREW__ = 0;
          $call$i$i$i$i225 = (invoke_ii($64|0,($61|0))|0);
          $65 = __THREW__; __THREW__ = 0;
          $66 = $65&1;
          if ($66) {
           label = 25;
           break L3;
          } else {
           $retval$0$i$i$i$i198 = $call$i$i$i$i225;
          }
         } else {
          $67 = HEAP32[$62>>2]|0;
          $retval$0$i$i$i$i198 = $67;
         }
         $cmp$i1$i$i$i199 = ($retval$0$i$i$i$i198|0)==(-1);
         if ($cmp$i1$i$i$i199) {
          HEAP32[$__b>>2] = 0;
          $75 = 1;
          break;
         } else {
          $$pre$i$i$i201 = HEAP32[$__b>>2]|0;
          $phitmp$i$i$i202 = ($$pre$i$i$i201|0)==(0|0);
          $75 = $phitmp$i$i$i202;
          break;
         }
        }
       } while(0);
       $tobool$i2$i$i206 = ($68|0)==(0|0);
       do {
        if ($tobool$i2$i$i206) {
         $$pre$i15$i$i219954 = $$pre$i15$i$i219;
         label = 57;
        } else {
         $__ninp_$i$i3$i$i208 = (($68) + 12|0);
         $69 = HEAP32[$__ninp_$i$i3$i$i208>>2]|0;
         $__einp_$i$i4$i$i209 = (($68) + 16|0);
         $70 = HEAP32[$__einp_$i$i4$i$i209>>2]|0;
         $cmp$i$i5$i$i210 = ($69|0)==($70|0);
         if ($cmp$i$i5$i$i210) {
          $vtable$i$i7$i$i212 = HEAP32[$68>>2]|0;
          $vfn$i$i8$i$i213 = (($vtable$i$i7$i$i212) + 36|0);
          $71 = HEAP32[$vfn$i$i8$i$i213>>2]|0;
          __THREW__ = 0;
          $call$i$i9$i$i227 = (invoke_ii($71|0,($68|0))|0);
          $72 = __THREW__; __THREW__ = 0;
          $73 = $72&1;
          if ($73) {
           label = 25;
           break L3;
          } else {
           $retval$0$i$i12$i$i216 = $call$i$i9$i$i227;
          }
         } else {
          $74 = HEAP32[$69>>2]|0;
          $retval$0$i$i12$i$i216 = $74;
         }
         $cmp$i1$i13$i$i217 = ($retval$0$i$i12$i$i216|0)==(-1);
         if ($cmp$i1$i13$i$i217) {
          HEAP32[$__e>>2] = 0;
          $$pre$i15$i$i219954 = 0;
          label = 57;
          break;
         } else {
          $phitmp$i16$i$i220 = ($$pre$i15$i$i219|0)==(0|0);
          $cmptmp$i$i223 = $75 ^ $phitmp$i16$i$i220;
          if ($cmptmp$i$i223) {
           $$pre$i15$i$i219956 = $$pre$i15$i$i219;$404 = $$pre$i15$i$i219;
           break;
          } else {
           $402 = $$pre$i15$i$i219;$403 = $398;$__trailing_sign$1 = $__trailing_sign$0947;
           break L340;
          }
         }
        }
       } while(0);
       if ((label|0) == 57) {
        label = 0;
        if ($75) {
         $402 = $$pre$i15$i$i219954;$403 = $398;$__trailing_sign$1 = $__trailing_sign$0947;
         break L340;
        } else {
         $$pre$i15$i$i219956 = $$pre$i15$i$i219954;$404 = 0;
        }
       }
       $76 = HEAP32[$__b>>2]|0;
       $__ninp_$i$i230 = (($76) + 12|0);
       $77 = HEAP32[$__ninp_$i$i230>>2]|0;
       $__einp_$i$i231 = (($76) + 16|0);
       $78 = HEAP32[$__einp_$i$i231>>2]|0;
       $cmp$i$i232 = ($77|0)==($78|0);
       if ($cmp$i$i232) {
        $vtable$i$i233 = HEAP32[$76>>2]|0;
        $vfn$i$i234 = (($vtable$i$i233) + 36|0);
        $79 = HEAP32[$vfn$i$i234>>2]|0;
        __THREW__ = 0;
        $call$i$i239 = (invoke_ii($79|0,($76|0))|0);
        $80 = __THREW__; __THREW__ = 0;
        $81 = $80&1;
        if ($81) {
         label = 25;
         break L3;
        } else {
         $retval$0$i$i237 = $call$i$i239;
        }
       } else {
        $82 = HEAP32[$77>>2]|0;
        $retval$0$i$i237 = $82;
       }
       $vtable$i241 = HEAP32[$__ct>>2]|0;
       $vfn$i242 = (($vtable$i241) + 12|0);
       $83 = HEAP32[$vfn$i242>>2]|0;
       __THREW__ = 0;
       $call$i243 = (invoke_iiii($83|0,($__ct|0),8192,($retval$0$i$i237|0))|0);
       $84 = __THREW__; __THREW__ = 0;
       $85 = $84&1;
       if ($85) {
        label = 25;
        break L3;
       }
       if (!($call$i243)) {
        $402 = $$pre$i15$i$i219956;$403 = $398;$__trailing_sign$1 = $__trailing_sign$0947;
        break L340;
       }
       $86 = HEAP32[$__b>>2]|0;
       $__ninp_$i$i246 = (($86) + 12|0);
       $87 = HEAP32[$__ninp_$i$i246>>2]|0;
       $__einp_$i$i247 = (($86) + 16|0);
       $88 = HEAP32[$__einp_$i$i247>>2]|0;
       $cmp$i$i248 = ($87|0)==($88|0);
       if ($cmp$i$i248) {
        $vtable$i$i249 = HEAP32[$86>>2]|0;
        $vfn$i$i250 = (($vtable$i$i249) + 40|0);
        $89 = HEAP32[$vfn$i$i250>>2]|0;
        __THREW__ = 0;
        $call$i$i258 = (invoke_ii($89|0,($86|0))|0);
        $90 = __THREW__; __THREW__ = 0;
        $91 = $90&1;
        if ($91) {
         label = 25;
         break L3;
        } else {
         $retval$0$i$i254 = $call$i$i258;
        }
       } else {
        $incdec$ptr$i$i252 = (($87) + 4|0);
        HEAP32[$__ninp_$i$i246>>2] = $incdec$ptr$i$i252;
        $92 = HEAP32[$87>>2]|0;
        $retval$0$i$i254 = $92;
       }
       __THREW__ = 0;
       invoke_vii(423,($__spaces|0),($retval$0$i$i254|0));
       $93 = __THREW__; __THREW__ = 0;
       $94 = $93&1;
       if ($94) {
        label = 25;
        break L3;
       } else {
        $$pre$i15$i$i219 = $$pre$i15$i$i219956;$68 = $404;
       }
      }
     }
    } while(0);
    $inc282 = (($__p$0945) + 1)|0;
    $cmp = ($inc282>>>0)<(4);
    if ($cmp) {
     $398 = $403;$__p$0945 = $inc282;$__trailing_sign$0947 = $__trailing_sign$1;
    } else {
     $389 = $403;$400 = $402;$__trailing_sign$0$lcssa = $__trailing_sign$1;
     label = 292;
     break;
    }
   }
   L377:    switch (label|0) {
    case 21: {
     $21 = ___cxa_find_matching_catch()|0;
     $22 = tempRet0;
     $lpad$phi$index = $21;$lpad$phi$index8 = $22;
     break L1;
     break;
    }
    case 22: {
     $23 = ___cxa_find_matching_catch()|0;
     $24 = tempRet0;
     $lpad$phi$index = $23;$lpad$phi$index8 = $24;
     break L1;
     break;
    }
    case 23: {
     $25 = ___cxa_find_matching_catch()|0;
     $26 = tempRet0;
     $lpad$phi$index = $25;$lpad$phi$index8 = $26;
     break L1;
     break;
    }
    case 24: {
     $27 = ___cxa_find_matching_catch()|0;
     $28 = tempRet0;
     $lpad$phi$index = $27;$lpad$phi$index8 = $28;
     break L1;
     break;
    }
    case 25: {
     $29 = ___cxa_find_matching_catch()|0;
     $30 = tempRet0;
     $lpad$phi$index = $29;$lpad$phi$index8 = $30;
     break L1;
     break;
    }
    case 26: {
     $31 = ___cxa_find_matching_catch()|0;
     $32 = tempRet0;
     $lpad$phi$index = $31;$lpad$phi$index8 = $32;
     break L1;
     break;
    }
    case 42: {
     $60 = HEAP32[$__err>>2]|0;
     $or = $60 | 4;
     HEAP32[$__err>>2] = $or;
     $retval$0 = 0;
     break;
    }
    case 135: {
     $168 = HEAP32[$__err>>2]|0;
     $or101 = $168 | 4;
     HEAP32[$__err>>2] = $or101;
     $retval$0 = 0;
     break;
    }
    case 194: {
     $228 = HEAP32[$__err>>2]|0;
     $or190 = $228 | 4;
     HEAP32[$__err>>2] = $or190;
     $retval$0 = 0;
     break;
    }
    case 255: {
     $299 = HEAP32[$__err>>2]|0;
     $or247 = $299 | 4;
     HEAP32[$__err>>2] = $or247;
     $retval$0 = 0;
     break;
    }
    case 279: {
     $331 = HEAP32[$__err>>2]|0;
     $or262 = $331 | 4;
     HEAP32[$__err>>2] = $or262;
     $retval$0 = 0;
     break;
    }
    case 290: {
     $353 = HEAP32[$__err>>2]|0;
     $or279 = $353 | 4;
     HEAP32[$__err>>2] = $or279;
     $retval$0 = 0;
     break;
    }
    case 292: {
     $tobool284 = ($__trailing_sign$0$lcssa|0)==(0|0);
     L391: do {
      if (!($tobool284)) {
       $__data_$i$i$i$i = (($__trailing_sign$0$lcssa) + 4|0);
       $__data_$i1$i$i$i = (($__trailing_sign$0$lcssa) + 8|0);
       $$pre$i15$i$i = $400;$363 = $400;$__i$0 = 1;
       L393: while(1) {
        $354 = HEAP8[$__trailing_sign$0$lcssa>>0]|0;
        $and$i$i = $354 & 1;
        $tobool$i$i = ($and$i$i<<24>>24)==(0);
        if ($tobool$i$i) {
         $conv$i$i = $354&255;
         $shr1$i$i = $conv$i$i >>> 1;
         $cond$i = $shr1$i$i;
        } else {
         $355 = HEAP32[$__data_$i$i$i$i>>2]|0;
         $cond$i = $355;
        }
        $cmp289 = ($__i$0>>>0)<($cond$i>>>0);
        if (!($cmp289)) {
         break L391;
        }
        $356 = HEAP32[$__b>>2]|0;
        $tobool$i$i$i96 = ($356|0)==(0|0);
        do {
         if ($tobool$i$i$i96) {
          $370 = 1;
         } else {
          $__ninp_$i$i$i$i = (($356) + 12|0);
          $357 = HEAP32[$__ninp_$i$i$i$i>>2]|0;
          $__einp_$i$i$i$i = (($356) + 16|0);
          $358 = HEAP32[$__einp_$i$i$i$i>>2]|0;
          $cmp$i$i$i$i = ($357|0)==($358|0);
          if ($cmp$i$i$i$i) {
           $vtable$i$i$i$i = HEAP32[$356>>2]|0;
           $vfn$i$i$i$i = (($vtable$i$i$i$i) + 36|0);
           $359 = HEAP32[$vfn$i$i$i$i>>2]|0;
           __THREW__ = 0;
           $call$i$i$i$i99 = (invoke_ii($359|0,($356|0))|0);
           $360 = __THREW__; __THREW__ = 0;
           $361 = $360&1;
           if ($361) {
            label = 20;
            break L393;
           } else {
            $retval$0$i$i$i$i = $call$i$i$i$i99;
           }
          } else {
           $362 = HEAP32[$357>>2]|0;
           $retval$0$i$i$i$i = $362;
          }
          $cmp$i1$i$i$i = ($retval$0$i$i$i$i|0)==(-1);
          if ($cmp$i1$i$i$i) {
           HEAP32[$__b>>2] = 0;
           $370 = 1;
           break;
          } else {
           $$pre$i$i$i = HEAP32[$__b>>2]|0;
           $phitmp$i$i$i = ($$pre$i$i$i|0)==(0|0);
           $370 = $phitmp$i$i$i;
           break;
          }
         }
        } while(0);
        $tobool$i2$i$i = ($363|0)==(0|0);
        do {
         if ($tobool$i2$i$i) {
          $$pre$i15$i$i963$ph = $$pre$i15$i$i;
          label = 311;
         } else {
          $__ninp_$i$i3$i$i = (($363) + 12|0);
          $364 = HEAP32[$__ninp_$i$i3$i$i>>2]|0;
          $__einp_$i$i4$i$i = (($363) + 16|0);
          $365 = HEAP32[$__einp_$i$i4$i$i>>2]|0;
          $cmp$i$i5$i$i = ($364|0)==($365|0);
          if ($cmp$i$i5$i$i) {
           $vtable$i$i7$i$i = HEAP32[$363>>2]|0;
           $vfn$i$i8$i$i = (($vtable$i$i7$i$i) + 36|0);
           $366 = HEAP32[$vfn$i$i8$i$i>>2]|0;
           __THREW__ = 0;
           $call$i$i9$i$i100 = (invoke_ii($366|0,($363|0))|0);
           $367 = __THREW__; __THREW__ = 0;
           $368 = $367&1;
           if ($368) {
            label = 20;
            break L393;
           } else {
            $retval$0$i$i12$i$i = $call$i$i9$i$i100;
           }
          } else {
           $369 = HEAP32[$364>>2]|0;
           $retval$0$i$i12$i$i = $369;
          }
          $cmp$i1$i13$i$i = ($retval$0$i$i12$i$i|0)==(-1);
          if ($cmp$i1$i13$i$i) {
           HEAP32[$__e>>2] = 0;
           $$pre$i15$i$i963$ph = 0;
           label = 311;
           break;
          } else {
           $phitmp$i16$i$i = ($$pre$i15$i$i|0)==(0|0);
           $cmptmp$i$i = $370 ^ $phitmp$i16$i$i;
           if ($cmptmp$i$i) {
            $$pre$i15$i$i963982 = $$pre$i15$i$i;$416 = $$pre$i15$i$i;
            break;
           } else {
            label = 319;
            break L393;
           }
          }
         }
        } while(0);
        if ((label|0) == 311) {
         label = 0;
         if ($370) {
          label = 319;
          break;
         } else {
          $$pre$i15$i$i963982 = $$pre$i15$i$i963$ph;$416 = 0;
         }
        }
        $371 = HEAP32[$__b>>2]|0;
        $__ninp_$i$i86 = (($371) + 12|0);
        $372 = HEAP32[$__ninp_$i$i86>>2]|0;
        $__einp_$i$i87 = (($371) + 16|0);
        $373 = HEAP32[$__einp_$i$i87>>2]|0;
        $cmp$i$i88 = ($372|0)==($373|0);
        if ($cmp$i$i88) {
         $vtable$i$i89 = HEAP32[$371>>2]|0;
         $vfn$i$i90 = (($vtable$i$i89) + 36|0);
         $374 = HEAP32[$vfn$i$i90>>2]|0;
         __THREW__ = 0;
         $call$i$i94 = (invoke_ii($374|0,($371|0))|0);
         $375 = __THREW__; __THREW__ = 0;
         $376 = $375&1;
         if ($376) {
          label = 20;
          break;
         } else {
          $retval$0$i$i = $call$i$i94;
         }
        } else {
         $377 = HEAP32[$372>>2]|0;
         $retval$0$i$i = $377;
        }
        $378 = HEAP8[$__trailing_sign$0$lcssa>>0]|0;
        $and$i$i$i$i = $378 & 1;
        $tobool$i$i$i$i = ($and$i$i$i$i<<24>>24)==(0);
        if ($tobool$i$i$i$i) {
         $cond$i$i$i = $__data_$i$i$i$i;
        } else {
         $379 = HEAP32[$__data_$i1$i$i$i>>2]|0;
         $cond$i$i$i = $379;
        }
        $add$ptr$i = (($cond$i$i$i) + ($__i$0<<2)|0);
        $380 = HEAP32[$add$ptr$i>>2]|0;
        $cmp298 = ($retval$0$i$i|0)==($380|0);
        if (!($cmp298)) {
         label = 319;
         break;
        }
        $inc303 = (($__i$0) + 1)|0;
        $382 = HEAP32[$__b>>2]|0;
        $__ninp_$i$i = (($382) + 12|0);
        $383 = HEAP32[$__ninp_$i$i>>2]|0;
        $__einp_$i$i = (($382) + 16|0);
        $384 = HEAP32[$__einp_$i$i>>2]|0;
        $cmp$i$i = ($383|0)==($384|0);
        if ($cmp$i$i) {
         $vtable$i$i = HEAP32[$382>>2]|0;
         $vfn$i$i = (($vtable$i$i) + 40|0);
         $385 = HEAP32[$vfn$i$i>>2]|0;
         __THREW__ = 0;
         (invoke_ii($385|0,($382|0))|0);
         $386 = __THREW__; __THREW__ = 0;
         $387 = $386&1;
         if ($387) {
          label = 20;
          break;
         } else {
          $$pre$i15$i$i = $$pre$i15$i$i963982;$363 = $416;$__i$0 = $inc303;
          continue;
         }
        } else {
         $incdec$ptr$i$i = (($383) + 4|0);
         HEAP32[$__ninp_$i$i>>2] = $incdec$ptr$i$i;
         $$pre$i15$i$i = $$pre$i15$i$i963982;$363 = $416;$__i$0 = $inc303;
         continue;
        }
       }
       if ((label|0) == 20) {
        $19 = ___cxa_find_matching_catch()|0;
        $20 = tempRet0;
        $lpad$phi$index = $19;$lpad$phi$index8 = $20;
        break L1;
       }
       else if ((label|0) == 319) {
        $381 = HEAP32[$__err>>2]|0;
        $or300 = $381 | 4;
        HEAP32[$__err>>2] = $or300;
        $retval$0 = 0;
        break L377;
       }
      }
     } while(0);
     $388 = HEAP32[$__gb>>2]|0;
     $cmp309 = ($388|0)==($389|0);
     if ($cmp309) {
      $retval$0 = 1;
     } else {
      HEAP32[$__et>>2] = 0;
      __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grp,$388,$389,$__et);
      $390 = HEAP32[$__et>>2]|0;
      $tobool314 = ($390|0)==(0);
      if ($tobool314) {
       $retval$0 = 1;
      } else {
       $391 = HEAP32[$__err>>2]|0;
       $or316 = $391 | 4;
       HEAP32[$__err>>2] = $or316;
       $retval$0 = 0;
      }
     }
     break;
    }
   }
   __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($__spaces);
   __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($__nsn);
   __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($__psn);
   __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($__sym);
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grp);
   $392 = HEAP32[$__gb>>2]|0;
   HEAP32[$__gb>>2] = 0;
   $tobool$i$i$i = ($392|0)==(0|0);
   if ($tobool$i$i$i) {
    STACKTOP = sp;return ($retval$0|0);
   }
   $393 = HEAP32[$__second_$i$i$i$i$i>>2]|0;
   __THREW__ = 0;
   invoke_vi($393|0,($392|0));
   $394 = __THREW__; __THREW__ = 0;
   $395 = $394&1;
   if ($395) {
    $396 = ___cxa_find_matching_catch(0|0)|0;
    $397 = tempRet0;
    ___clang_call_terminate($396);
    // unreachable;
   } else {
    STACKTOP = sp;return ($retval$0|0);
   }
  }
 } while(0);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($__spaces);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($__nsn);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($__psn);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($__sym);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grp);
 $35 = HEAP32[$__gb>>2]|0;
 HEAP32[$__gb>>2] = 0;
 $tobool$i$i$i157 = ($35|0)==(0|0);
 if ($tobool$i$i$i157) {
  ___resumeException($lpad$phi$index|0);
  // unreachable;
 }
 $36 = HEAP32[$__second_$i$i$i$i$i>>2]|0;
 __THREW__ = 0;
 invoke_vi($36|0,($35|0));
 $37 = __THREW__; __THREW__ = 0;
 $38 = $37&1;
 if ($38) {
  $39 = ___cxa_find_matching_catch(0|0)|0;
  $40 = tempRet0;
  ___clang_call_terminate($39);
  // unreachable;
 } else {
  ___resumeException($lpad$phi$index|0);
  // unreachable;
 }
 return 0|0;
}
function __ZNKSt3__19money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_bRNS_8ios_baseERjRNS_12basic_stringIwS3_NS_9allocatorIwEEEE($agg$result,$this,$__b,$__e,$__intl,$__iob,$__err,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__intl = $__intl|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$pre = 0, $$pre$i$i$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $__data_$i$i = 0, $__data_$i2$i = 0, $__einp_$i$i$i$i = 0, $__einp_$i$i4$i$i = 0, $__fmtflags_$i = 0, $__loc = 0, $__neg = 0, $__ninp_$i$i$i$i = 0, $__ninp_$i$i3$i$i = 0, $__second_$i$i$i$i$i = 0, $__size_$i1$i = 0, $__w$0$lcssa = 0, $__w$033 = 0, $__wb = 0, $__wbuf = 0, $__wn = 0, $add$ptr = 0, $add$ptr1731 = 0, $agg$tmp = 0, $agg$tmp$byval_copy = 0;
 var $and$i$i = 0, $call$i$i$i$i27 = 0, $call$i$i9$i$i28 = 0, $call$i12 = 0, $call$i19 = 0, $call$i2223 = 0, $call8 = 0, $cmp = 0, $cmp$i$i$i$i = 0, $cmp$i$i5$i$i = 0, $cmp$i1$i$i$i = 0, $cmp$i1$i13$i$i = 0, $cmp18 = 0, $cmp32 = 0, $ehselector$slot$039 = 0, $ehselector$slot$040 = 0, $exn$slot$041 = 0, $exn$slot$042 = 0, $incdec$ptr = 0, $or = 0;
 var $phitmp$i$i$i = 0, $retval$0$i$i$i$i = 0, $retval$0$i$i12$i$i = 0, $tobool$i$i = 0, $tobool$i$i$i = 0, $tobool$i$i$i14 = 0, $tobool$i$i$i25 = 0, $tobool$i2$i$i = 0, $tobool9 = 0, $vfn$i = 0, $vfn$i$i$i$i = 0, $vfn$i$i8$i$i = 0, $vfn$i21 = 0, $vtable$i = 0, $vtable$i$i$i$i = 0, $vtable$i$i7$i$i = 0, $vtable$i20 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 432|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $agg$tmp$byval_copy = sp + 4|0;
 $__wbuf = sp + 16|0;
 $__wb = sp + 8|0;
 $__wn = sp + 420|0;
 $__loc = sp;
 $__neg = sp + 424|0;
 $agg$tmp = sp + 416|0;
 HEAP32[$__wb>>2] = $__wbuf;
 $__second_$i$i$i$i$i = (($__wb) + 4|0);
 HEAP32[$__second_$i$i$i$i$i>>2] = 411;
 $add$ptr = (($__wbuf) + 400|0);
 __THREW__ = 0;
 invoke_vii(358,($__loc|0),($__iob|0));
 $0 = __THREW__; __THREW__ = 0;
 $1 = $0&1;
 if ($1) {
  $16 = ___cxa_find_matching_catch()|0;
  $17 = tempRet0;
  HEAP32[$__wb>>2] = 0;
  $52 = $__wbuf;$ehselector$slot$039 = $17;$exn$slot$041 = $16;
 } else {
  __THREW__ = 0;
  $call$i12 = (invoke_iii(359,($__loc|0),(4608|0))|0);
  $2 = __THREW__; __THREW__ = 0;
  $3 = $2&1;
  L4: do {
   if (!($3)) {
    HEAP8[$__neg>>0] = 0;
    $4 = HEAP32[$__e>>2]|0;
    HEAP32[$agg$tmp>>2] = $4;
    $__fmtflags_$i = (($__iob) + 4|0);
    $5 = HEAP32[$__fmtflags_$i>>2]|0;
    __THREW__ = 0;
    ;HEAP32[$agg$tmp$byval_copy+0>>2]=HEAP32[$agg$tmp+0>>2]|0;
    $call8 = (invoke_iiiiiiiiiiii(421,($__b|0),($agg$tmp$byval_copy|0),($__intl|0),($__loc|0),($5|0),($__err|0),($__neg|0),($call$i12|0),($__wb|0),($__wn|0),($add$ptr|0))|0);
    $6 = __THREW__; __THREW__ = 0;
    $7 = $6&1;
    if (!($7)) {
     if ($call8) {
      $8 = HEAP8[$__v>>0]|0;
      $and$i$i = $8 & 1;
      $tobool$i$i = ($and$i$i<<24>>24)==(0);
      if ($tobool$i$i) {
       $__data_$i$i = (($__v) + 4|0);
       HEAP32[$__data_$i$i>>2] = 0;
       HEAP8[$__v>>0] = 0;
      } else {
       $__data_$i2$i = (($__v) + 8|0);
       $9 = HEAP32[$__data_$i2$i>>2]|0;
       HEAP32[$9>>2] = 0;
       $__size_$i1$i = (($__v) + 4|0);
       HEAP32[$__size_$i1$i>>2] = 0;
      }
      $10 = HEAP8[$__neg>>0]|0;
      $tobool9 = ($10<<24>>24)==(0);
      if (!($tobool9)) {
       $vtable$i = HEAP32[$call$i12>>2]|0;
       $vfn$i = (($vtable$i) + 44|0);
       $11 = HEAP32[$vfn$i>>2]|0;
       __THREW__ = 0;
       $call$i19 = (invoke_iii($11|0,($call$i12|0),45)|0);
       $12 = __THREW__; __THREW__ = 0;
       $13 = $12&1;
       if ($13) {
        break;
       }
       __THREW__ = 0;
       invoke_vii(423,($__v|0),($call$i19|0));
       $14 = __THREW__; __THREW__ = 0;
       $15 = $14&1;
       if ($15) {
        break;
       }
      }
      $vtable$i20 = HEAP32[$call$i12>>2]|0;
      $vfn$i21 = (($vtable$i20) + 44|0);
      $18 = HEAP32[$vfn$i21>>2]|0;
      __THREW__ = 0;
      $call$i2223 = (invoke_iii($18|0,($call$i12|0),48)|0);
      $19 = __THREW__; __THREW__ = 0;
      $20 = $19&1;
      if ($20) {
       break;
      }
      $21 = HEAP32[$__wb>>2]|0;
      $22 = HEAP32[$__wn>>2]|0;
      $add$ptr1731 = (($22) + -4|0);
      $cmp32 = ($21>>>0)<($add$ptr1731>>>0);
      L18: do {
       if ($cmp32) {
        $__w$033 = $21;
        while(1) {
         $23 = HEAP32[$__w$033>>2]|0;
         $cmp18 = ($23|0)==($call$i2223|0);
         $incdec$ptr = (($__w$033) + 4|0);
         if (!($cmp18)) {
          $__w$0$lcssa = $__w$033;
          break L18;
         }
         $cmp = ($incdec$ptr>>>0)<($add$ptr1731>>>0);
         if ($cmp) {
          $__w$033 = $incdec$ptr;
         } else {
          $__w$0$lcssa = $incdec$ptr;
          break;
         }
        }
       } else {
        $__w$0$lcssa = $21;
       }
      } while(0);
      __THREW__ = 0;
      (invoke_iiii(425,($__v|0),($__w$0$lcssa|0),($22|0))|0);
      $24 = __THREW__; __THREW__ = 0;
      $25 = $24&1;
      if ($25) {
       break;
      }
     }
     $26 = HEAP32[$__b>>2]|0;
     $tobool$i$i$i25 = ($26|0)==(0|0);
     do {
      if ($tobool$i$i$i25) {
       $57 = 1;
      } else {
       $__ninp_$i$i$i$i = (($26) + 12|0);
       $27 = HEAP32[$__ninp_$i$i$i$i>>2]|0;
       $__einp_$i$i$i$i = (($26) + 16|0);
       $28 = HEAP32[$__einp_$i$i$i$i>>2]|0;
       $cmp$i$i$i$i = ($27|0)==($28|0);
       if ($cmp$i$i$i$i) {
        $vtable$i$i$i$i = HEAP32[$26>>2]|0;
        $vfn$i$i$i$i = (($vtable$i$i$i$i) + 36|0);
        $29 = HEAP32[$vfn$i$i$i$i>>2]|0;
        __THREW__ = 0;
        $call$i$i$i$i27 = (invoke_ii($29|0,($26|0))|0);
        $30 = __THREW__; __THREW__ = 0;
        $31 = $30&1;
        if ($31) {
         break L4;
        } else {
         $retval$0$i$i$i$i = $call$i$i$i$i27;
        }
       } else {
        $32 = HEAP32[$27>>2]|0;
        $retval$0$i$i$i$i = $32;
       }
       $cmp$i1$i$i$i = ($retval$0$i$i$i$i|0)==(-1);
       if ($cmp$i1$i$i$i) {
        HEAP32[$__b>>2] = 0;
        $57 = 1;
        break;
       } else {
        $$pre$i$i$i = HEAP32[$__b>>2]|0;
        $phitmp$i$i$i = ($$pre$i$i$i|0)==(0|0);
        $57 = $phitmp$i$i$i;
        break;
       }
      }
     } while(0);
     $tobool$i2$i$i = ($4|0)==(0|0);
     do {
      if ($tobool$i2$i$i) {
       label = 30;
      } else {
       $__ninp_$i$i3$i$i = (($4) + 12|0);
       $33 = HEAP32[$__ninp_$i$i3$i$i>>2]|0;
       $__einp_$i$i4$i$i = (($4) + 16|0);
       $34 = HEAP32[$__einp_$i$i4$i$i>>2]|0;
       $cmp$i$i5$i$i = ($33|0)==($34|0);
       if ($cmp$i$i5$i$i) {
        $vtable$i$i7$i$i = HEAP32[$4>>2]|0;
        $vfn$i$i8$i$i = (($vtable$i$i7$i$i) + 36|0);
        $35 = HEAP32[$vfn$i$i8$i$i>>2]|0;
        __THREW__ = 0;
        $call$i$i9$i$i28 = (invoke_ii($35|0,($4|0))|0);
        $36 = __THREW__; __THREW__ = 0;
        $37 = $36&1;
        if ($37) {
         break L4;
        } else {
         $retval$0$i$i12$i$i = $call$i$i9$i$i28;
        }
       } else {
        $38 = HEAP32[$33>>2]|0;
        $retval$0$i$i12$i$i = $38;
       }
       $cmp$i1$i13$i$i = ($retval$0$i$i12$i$i|0)==(-1);
       if ($cmp$i1$i13$i$i) {
        HEAP32[$__e>>2] = 0;
        label = 30;
        break;
       } else {
        if ($57) {
         break;
        } else {
         label = 32;
         break;
        }
       }
      }
     } while(0);
     if ((label|0) == 30) {
      if ($57) {
       label = 32;
      }
     }
     if ((label|0) == 32) {
      $39 = HEAP32[$__err>>2]|0;
      $or = $39 | 2;
      HEAP32[$__err>>2] = $or;
     }
     $40 = HEAP32[$__b>>2]|0;
     HEAP32[$agg$result>>2] = $40;
     $41 = HEAP32[$__loc>>2]|0;
     (__ZNSt3__114__shared_count16__release_sharedEv($41)|0);
     $42 = HEAP32[$__wb>>2]|0;
     HEAP32[$__wb>>2] = 0;
     $tobool$i$i$i14 = ($42|0)==(0|0);
     if ($tobool$i$i$i14) {
      STACKTOP = sp;return;
     }
     $43 = HEAP32[$__second_$i$i$i$i$i>>2]|0;
     __THREW__ = 0;
     invoke_vi($43|0,($42|0));
     $44 = __THREW__; __THREW__ = 0;
     $45 = $44&1;
     if ($45) {
      $46 = ___cxa_find_matching_catch(0|0)|0;
      $47 = tempRet0;
      ___clang_call_terminate($46);
      // unreachable;
     } else {
      STACKTOP = sp;return;
     }
    }
   }
  } while(0);
  $48 = ___cxa_find_matching_catch()|0;
  $49 = tempRet0;
  $50 = HEAP32[$__loc>>2]|0;
  (__ZNSt3__114__shared_count16__release_sharedEv($50)|0);
  $$pre = HEAP32[$__wb>>2]|0;
  HEAP32[$__wb>>2] = 0;
  $tobool$i$i$i = ($$pre|0)==(0|0);
  if ($tobool$i$i$i) {
   $ehselector$slot$040 = $49;$exn$slot$042 = $48;
   ___resumeException($exn$slot$042|0);
   // unreachable;
  } else {
   $52 = $$pre;$ehselector$slot$039 = $49;$exn$slot$041 = $48;
  }
 }
 $51 = HEAP32[$__second_$i$i$i$i$i>>2]|0;
 __THREW__ = 0;
 invoke_vi($51|0,($52|0));
 $53 = __THREW__; __THREW__ = 0;
 $54 = $53&1;
 if ($54) {
  $55 = ___cxa_find_matching_catch(0|0)|0;
  $56 = tempRet0;
  ___clang_call_terminate($55);
  // unreachable;
 } else {
  $ehselector$slot$040 = $ehselector$slot$039;$exn$slot$042 = $exn$slot$041;
  ___resumeException($exn$slot$042|0);
  // unreachable;
 }
}
function __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6appendIPwEENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueERS5_E4typeES9_S9_($this,$__first,$__last) {
 $this = $this|0;
 $__first = $__first|0;
 $__last = $__last|0;
 var $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__data_$i$i = 0, $__data_$i1$i = 0, $__first$addr$033 = 0, $__p$0$lcssa = 0, $__p$034 = 0, $__size_$i2$i = 0;
 var $__size_$i2$i19 = 0, $add = 0, $add$ptr = 0, $add9 = 0, $and$i$i = 0, $and$i$i17 = 0, $and$i$i22 = 0, $and$i1$i = 0, $cmp = 0, $cmp7 = 0, $cmp732 = 0, $cond$i26 = 0, $cond$i31 = 0, $cond$i40 = 0, $conv$i$i = 0, $conv$i$i20 = 0, $incdec$ptr = 0, $incdec$ptr8 = 0, $phitmp$i = 0, $scevgep = 0;
 var $scevgep37 = 0, $shl$i$i = 0, $shr1$i$i = 0, $sub = 0, $sub$ptr$div$i$i = 0, $sub$ptr$lhs$cast$i$i = 0, $sub$ptr$rhs$cast$i$i = 0, $sub$ptr$sub$i$i = 0, $sub5 = 0, $tobool = 0, $tobool$i$i = 0, $tobool$i$i18 = 0, $tobool$i$i23 = 0, $uglygep = 0, $uglygep36 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $sub$ptr$rhs$cast$i$i = $__first;
 $0 = HEAP8[$this>>0]|0;
 $and$i$i = $0 & 1;
 $tobool$i$i = ($and$i$i<<24>>24)==(0);
 if ($tobool$i$i) {
  $conv$i$i = $0&255;
  $shr1$i$i = $conv$i$i >>> 1;
  $12 = $0;$cond$i31 = 1;$cond$i40 = $shr1$i$i;
 } else {
  $__size_$i2$i = (($this) + 4|0);
  $1 = HEAP32[$__size_$i2$i>>2]|0;
  $2 = HEAP32[$this>>2]|0;
  $and$i1$i = $2 & -2;
  $phitmp$i = (($and$i1$i) + -1)|0;
  $3 = $2&255;
  $12 = $3;$cond$i31 = $phitmp$i;$cond$i40 = $1;
 }
 $sub$ptr$lhs$cast$i$i = $__last;
 $sub$ptr$sub$i$i = (($sub$ptr$lhs$cast$i$i) - ($sub$ptr$rhs$cast$i$i))|0;
 $sub$ptr$div$i$i = $sub$ptr$sub$i$i >> 2;
 $tobool = ($sub$ptr$div$i$i|0)==(0);
 if ($tobool) {
  STACKTOP = sp;return ($this|0);
 }
 $sub = (($cond$i31) - ($cond$i40))|0;
 $cmp = ($sub>>>0)<($sub$ptr$div$i$i>>>0);
 if ($cmp) {
  $add = (($cond$i40) + ($sub$ptr$div$i$i))|0;
  $sub5 = (($add) - ($cond$i31))|0;
  __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE9__grow_byEjjjjjj($this,$cond$i31,$sub5,$cond$i40,$cond$i40,0,0);
  $$pre = HEAP8[$this>>0]|0;
  $4 = $$pre;
 } else {
  $4 = $12;
 }
 $and$i$i22 = $4 & 1;
 $tobool$i$i23 = ($and$i$i22<<24>>24)==(0);
 if ($tobool$i$i23) {
  $__data_$i$i = (($this) + 4|0);
  $cond$i26 = $__data_$i$i;
 } else {
  $__data_$i1$i = (($this) + 8|0);
  $5 = HEAP32[$__data_$i1$i>>2]|0;
  $cond$i26 = $5;
 }
 $add$ptr = (($cond$i26) + ($cond$i40<<2)|0);
 $cmp732 = ($__first|0)==($__last|0);
 if ($cmp732) {
  $__p$0$lcssa = $add$ptr;
 } else {
  $scevgep = (($__last) + -4|0);
  $6 = (0 - ($sub$ptr$rhs$cast$i$i))|0;
  $uglygep = (($scevgep) + ($6)|0);
  $uglygep36 = $uglygep;
  $7 = $uglygep36 >>> 2;
  $8 = (($cond$i40) + ($7))|0;
  $9 = (($8) + 1)|0;
  $__first$addr$033 = $__first;$__p$034 = $add$ptr;
  while(1) {
   $10 = HEAP32[$__first$addr$033>>2]|0;
   HEAP32[$__p$034>>2] = $10;
   $incdec$ptr = (($__p$034) + 4|0);
   $incdec$ptr8 = (($__first$addr$033) + 4|0);
   $cmp7 = ($incdec$ptr8|0)==($__last|0);
   if ($cmp7) {
    break;
   } else {
    $__first$addr$033 = $incdec$ptr8;$__p$034 = $incdec$ptr;
   }
  }
  $scevgep37 = (($cond$i26) + ($9<<2)|0);
  $__p$0$lcssa = $scevgep37;
 }
 HEAP32[$__p$0$lcssa>>2] = 0;
 $add9 = (($cond$i40) + ($sub$ptr$div$i$i))|0;
 $11 = HEAP8[$this>>0]|0;
 $and$i$i17 = $11 & 1;
 $tobool$i$i18 = ($and$i$i17<<24>>24)==(0);
 if ($tobool$i$i18) {
  $shl$i$i = $add9 << 1;
  $conv$i$i20 = $shl$i$i&255;
  HEAP8[$this>>0] = $conv$i$i20;
  STACKTOP = sp;return ($this|0);
 } else {
  $__size_$i2$i19 = (($this) + 4|0);
  HEAP32[$__size_$i2$i19>>2] = $add9;
  STACKTOP = sp;return ($this|0);
 }
 return 0|0;
}
function __ZNSt3__111__money_getIwE13__gather_infoEbRKNS_6localeERNS_10money_base7patternERwS8_RNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERNS9_IwNSA_IwEENSC_IwEEEESJ_SJ_Ri($__intl,$__loc,$__pat,$__dp,$__ts,$__grp,$__sym,$__psn,$__nsn,$__fd) {
 $__intl = $__intl|0;
 $__loc = $__loc|0;
 $__pat = $__pat|0;
 $__dp = $__dp|0;
 $__ts = $__ts|0;
 $__grp = $__grp|0;
 $__sym = $__sym|0;
 $__psn = $__psn|0;
 $__nsn = $__nsn|0;
 $__fd = $__fd|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $7 = 0, $8 = 0, $9 = 0, $__data_$i$i$i$i = 0, $__data_$i$i$i$i110 = 0, $__data_$i$i$i$i127 = 0, $__data_$i$i$i$i34 = 0, $__data_$i$i$i$i49 = 0, $__data_$i$i$i$i62 = 0, $__data_$i$i$i$i81 = 0, $__data_$i$i$i$i94 = 0, $__data_$i2$i$i$i = 0, $__data_$i2$i$i$i124 = 0, $__data_$i2$i$i$i31 = 0, $__data_$i2$i$i$i59 = 0, $__data_$i2$i$i$i78 = 0, $__data_$i2$i$i$i91 = 0;
 var $__size_$i1$i$i$i = 0, $__size_$i1$i$i$i111 = 0, $__size_$i1$i$i$i125 = 0, $__size_$i1$i$i$i32 = 0, $__size_$i1$i$i$i50 = 0, $__size_$i1$i$i$i60 = 0, $__size_$i1$i$i$i79 = 0, $__size_$i1$i$i$i92 = 0, $and$i$i$i$i = 0, $and$i$i$i$i108 = 0, $and$i$i$i$i122 = 0, $and$i$i$i$i29 = 0, $and$i$i$i$i47 = 0, $and$i$i$i$i57 = 0, $and$i$i$i$i76 = 0, $and$i$i$i$i89 = 0, $arrayidx$i$i$i$i = 0, $arrayidx$i$i$i$i114 = 0, $call$i = 0, $call$i101 = 0;
 var $call$i104 = 0, $call$i134 = 0, $call$i41 = 0, $call$i44 = 0, $call$i69 = 0, $call$i70 = 0, $ref$tmp = 0, $ref$tmp1 = 0, $ref$tmp14 = 0, $ref$tmp15 = 0, $ref$tmp17 = 0, $ref$tmp21 = 0, $ref$tmp23 = 0, $ref$tmp3 = 0, $ref$tmp7 = 0, $ref$tmp9 = 0, $storemerge = 0, $tobool$i$i$i$i = 0, $tobool$i$i$i$i109 = 0, $tobool$i$i$i$i123 = 0;
 var $tobool$i$i$i$i30 = 0, $tobool$i$i$i$i48 = 0, $tobool$i$i$i$i58 = 0, $tobool$i$i$i$i77 = 0, $tobool$i$i$i$i90 = 0, $vfn$i = 0, $vfn$i100 = 0, $vfn$i103 = 0, $vfn$i106 = 0, $vfn$i120 = 0, $vfn$i133 = 0, $vfn$i25 = 0, $vfn$i27 = 0, $vfn$i40 = 0, $vfn$i43 = 0, $vfn$i46 = 0, $vfn$i55 = 0, $vfn$i68 = 0, $vfn$i72 = 0, $vfn$i74 = 0;
 var $vfn$i87 = 0, $vtable$i = 0, $vtable$i102 = 0, $vtable$i105 = 0, $vtable$i119 = 0, $vtable$i132 = 0, $vtable$i24 = 0, $vtable$i26 = 0, $vtable$i39 = 0, $vtable$i42 = 0, $vtable$i45 = 0, $vtable$i54 = 0, $vtable$i67 = 0, $vtable$i71 = 0, $vtable$i73 = 0, $vtable$i86 = 0, $vtable$i99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $ref$tmp = sp;
 $ref$tmp1 = sp + 40|0;
 $ref$tmp3 = sp + 76|0;
 $ref$tmp7 = sp + 4|0;
 $ref$tmp9 = sp + 88|0;
 $ref$tmp14 = sp + 100|0;
 $ref$tmp15 = sp + 28|0;
 $ref$tmp17 = sp + 64|0;
 $ref$tmp21 = sp + 52|0;
 $ref$tmp23 = sp + 16|0;
 if ($__intl) {
  $call$i = (__ZNKSt3__16locale9use_facetERNS0_2idE($__loc,4184)|0);
  $vtable$i = HEAP32[$call$i>>2]|0;
  $vfn$i = (($vtable$i) + 44|0);
  $0 = HEAP32[$vfn$i>>2]|0;
  FUNCTION_TABLE_vii[$0 & 511]($ref$tmp,$call$i);
  $1 = HEAP32[$ref$tmp>>2]|0;
  HEAP8[$__pat>>0]=$1&255;HEAP8[$__pat+1>>0]=($1>>8)&255;HEAP8[$__pat+2>>0]=($1>>16)&255;HEAP8[$__pat+3>>0]=$1>>24;
  $vtable$i24 = HEAP32[$call$i>>2]|0;
  $vfn$i25 = (($vtable$i24) + 32|0);
  $2 = HEAP32[$vfn$i25>>2]|0;
  FUNCTION_TABLE_vii[$2 & 511]($ref$tmp1,$call$i);
  $3 = HEAP8[$__nsn>>0]|0;
  $and$i$i$i$i = $3 & 1;
  $tobool$i$i$i$i = ($and$i$i$i$i<<24>>24)==(0);
  if ($tobool$i$i$i$i) {
   $__data_$i$i$i$i = (($__nsn) + 4|0);
   HEAP32[$__data_$i$i$i$i>>2] = 0;
   HEAP8[$__nsn>>0] = 0;
  } else {
   $__data_$i2$i$i$i = (($__nsn) + 8|0);
   $4 = HEAP32[$__data_$i2$i$i$i>>2]|0;
   HEAP32[$4>>2] = 0;
   $__size_$i1$i$i$i = (($__nsn) + 4|0);
   HEAP32[$__size_$i1$i$i$i>>2] = 0;
  }
  __THREW__ = 0;
  invoke_vii(426,($__nsn|0),0);
  $5 = __THREW__; __THREW__ = 0;
  $6 = $5&1;
  if ($6) {
   $7 = ___cxa_find_matching_catch(0|0)|0;
   $8 = tempRet0;
   ___clang_call_terminate($7);
   // unreachable;
  }
  ;HEAP32[$__nsn+0>>2]=HEAP32[$ref$tmp1+0>>2]|0;HEAP32[$__nsn+4>>2]=HEAP32[$ref$tmp1+4>>2]|0;HEAP32[$__nsn+8>>2]=HEAP32[$ref$tmp1+8>>2]|0;
  ;HEAP32[$ref$tmp1+0>>2]=0|0;HEAP32[$ref$tmp1+4>>2]=0|0;HEAP32[$ref$tmp1+8>>2]=0|0;
  __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($ref$tmp1);
  $vtable$i26 = HEAP32[$call$i>>2]|0;
  $vfn$i27 = (($vtable$i26) + 28|0);
  $9 = HEAP32[$vfn$i27>>2]|0;
  FUNCTION_TABLE_vii[$9 & 511]($ref$tmp3,$call$i);
  $10 = HEAP8[$__psn>>0]|0;
  $and$i$i$i$i29 = $10 & 1;
  $tobool$i$i$i$i30 = ($and$i$i$i$i29<<24>>24)==(0);
  if ($tobool$i$i$i$i30) {
   $__data_$i$i$i$i34 = (($__psn) + 4|0);
   HEAP32[$__data_$i$i$i$i34>>2] = 0;
   HEAP8[$__psn>>0] = 0;
  } else {
   $__data_$i2$i$i$i31 = (($__psn) + 8|0);
   $11 = HEAP32[$__data_$i2$i$i$i31>>2]|0;
   HEAP32[$11>>2] = 0;
   $__size_$i1$i$i$i32 = (($__psn) + 4|0);
   HEAP32[$__size_$i1$i$i$i32>>2] = 0;
  }
  __THREW__ = 0;
  invoke_vii(426,($__psn|0),0);
  $12 = __THREW__; __THREW__ = 0;
  $13 = $12&1;
  if ($13) {
   $14 = ___cxa_find_matching_catch(0|0)|0;
   $15 = tempRet0;
   ___clang_call_terminate($14);
   // unreachable;
  }
  ;HEAP32[$__psn+0>>2]=HEAP32[$ref$tmp3+0>>2]|0;HEAP32[$__psn+4>>2]=HEAP32[$ref$tmp3+4>>2]|0;HEAP32[$__psn+8>>2]=HEAP32[$ref$tmp3+8>>2]|0;
  ;HEAP32[$ref$tmp3+0>>2]=0|0;HEAP32[$ref$tmp3+4>>2]=0|0;HEAP32[$ref$tmp3+8>>2]=0|0;
  __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($ref$tmp3);
  $vtable$i39 = HEAP32[$call$i>>2]|0;
  $vfn$i40 = (($vtable$i39) + 12|0);
  $16 = HEAP32[$vfn$i40>>2]|0;
  $call$i41 = (FUNCTION_TABLE_ii[$16 & 511]($call$i)|0);
  HEAP32[$__dp>>2] = $call$i41;
  $vtable$i42 = HEAP32[$call$i>>2]|0;
  $vfn$i43 = (($vtable$i42) + 16|0);
  $17 = HEAP32[$vfn$i43>>2]|0;
  $call$i44 = (FUNCTION_TABLE_ii[$17 & 511]($call$i)|0);
  HEAP32[$__ts>>2] = $call$i44;
  $vtable$i45 = HEAP32[$call$i>>2]|0;
  $vfn$i46 = (($vtable$i45) + 20|0);
  $18 = HEAP32[$vfn$i46>>2]|0;
  FUNCTION_TABLE_vii[$18 & 511]($ref$tmp7,$call$i);
  $19 = HEAP8[$__grp>>0]|0;
  $and$i$i$i$i47 = $19 & 1;
  $tobool$i$i$i$i48 = ($and$i$i$i$i47<<24>>24)==(0);
  if ($tobool$i$i$i$i48) {
   $arrayidx$i$i$i$i = (($__grp) + 1|0);
   HEAP8[$arrayidx$i$i$i$i>>0] = 0;
   HEAP8[$__grp>>0] = 0;
  } else {
   $__data_$i$i$i$i49 = (($__grp) + 8|0);
   $20 = HEAP32[$__data_$i$i$i$i49>>2]|0;
   HEAP8[$20>>0] = 0;
   $__size_$i1$i$i$i50 = (($__grp) + 4|0);
   HEAP32[$__size_$i1$i$i$i50>>2] = 0;
  }
  __THREW__ = 0;
  invoke_vii(420,($__grp|0),0);
  $21 = __THREW__; __THREW__ = 0;
  $22 = $21&1;
  if ($22) {
   $23 = ___cxa_find_matching_catch(0|0)|0;
   $24 = tempRet0;
   ___clang_call_terminate($23);
   // unreachable;
  }
  ;HEAP32[$__grp+0>>2]=HEAP32[$ref$tmp7+0>>2]|0;HEAP32[$__grp+4>>2]=HEAP32[$ref$tmp7+4>>2]|0;HEAP32[$__grp+8>>2]=HEAP32[$ref$tmp7+8>>2]|0;
  ;HEAP32[$ref$tmp7+0>>2]=0|0;HEAP32[$ref$tmp7+4>>2]=0|0;HEAP32[$ref$tmp7+8>>2]=0|0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($ref$tmp7);
  $vtable$i54 = HEAP32[$call$i>>2]|0;
  $vfn$i55 = (($vtable$i54) + 24|0);
  $25 = HEAP32[$vfn$i55>>2]|0;
  FUNCTION_TABLE_vii[$25 & 511]($ref$tmp9,$call$i);
  $26 = HEAP8[$__sym>>0]|0;
  $and$i$i$i$i57 = $26 & 1;
  $tobool$i$i$i$i58 = ($and$i$i$i$i57<<24>>24)==(0);
  if ($tobool$i$i$i$i58) {
   $__data_$i$i$i$i62 = (($__sym) + 4|0);
   HEAP32[$__data_$i$i$i$i62>>2] = 0;
   HEAP8[$__sym>>0] = 0;
  } else {
   $__data_$i2$i$i$i59 = (($__sym) + 8|0);
   $27 = HEAP32[$__data_$i2$i$i$i59>>2]|0;
   HEAP32[$27>>2] = 0;
   $__size_$i1$i$i$i60 = (($__sym) + 4|0);
   HEAP32[$__size_$i1$i$i$i60>>2] = 0;
  }
  __THREW__ = 0;
  invoke_vii(426,($__sym|0),0);
  $28 = __THREW__; __THREW__ = 0;
  $29 = $28&1;
  if ($29) {
   $30 = ___cxa_find_matching_catch(0|0)|0;
   $31 = tempRet0;
   ___clang_call_terminate($30);
   // unreachable;
  }
  ;HEAP32[$__sym+0>>2]=HEAP32[$ref$tmp9+0>>2]|0;HEAP32[$__sym+4>>2]=HEAP32[$ref$tmp9+4>>2]|0;HEAP32[$__sym+8>>2]=HEAP32[$ref$tmp9+8>>2]|0;
  ;HEAP32[$ref$tmp9+0>>2]=0|0;HEAP32[$ref$tmp9+4>>2]=0|0;HEAP32[$ref$tmp9+8>>2]=0|0;
  __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($ref$tmp9);
  $vtable$i67 = HEAP32[$call$i>>2]|0;
  $vfn$i68 = (($vtable$i67) + 36|0);
  $32 = HEAP32[$vfn$i68>>2]|0;
  $call$i69 = (FUNCTION_TABLE_ii[$32 & 511]($call$i)|0);
  $storemerge = $call$i69;
  HEAP32[$__fd>>2] = $storemerge;
  STACKTOP = sp;return;
 } else {
  $call$i70 = (__ZNKSt3__16locale9use_facetERNS0_2idE($__loc,4120)|0);
  $vtable$i71 = HEAP32[$call$i70>>2]|0;
  $vfn$i72 = (($vtable$i71) + 44|0);
  $33 = HEAP32[$vfn$i72>>2]|0;
  FUNCTION_TABLE_vii[$33 & 511]($ref$tmp14,$call$i70);
  $34 = HEAP32[$ref$tmp14>>2]|0;
  HEAP8[$__pat>>0]=$34&255;HEAP8[$__pat+1>>0]=($34>>8)&255;HEAP8[$__pat+2>>0]=($34>>16)&255;HEAP8[$__pat+3>>0]=$34>>24;
  $vtable$i73 = HEAP32[$call$i70>>2]|0;
  $vfn$i74 = (($vtable$i73) + 32|0);
  $35 = HEAP32[$vfn$i74>>2]|0;
  FUNCTION_TABLE_vii[$35 & 511]($ref$tmp15,$call$i70);
  $36 = HEAP8[$__nsn>>0]|0;
  $and$i$i$i$i76 = $36 & 1;
  $tobool$i$i$i$i77 = ($and$i$i$i$i76<<24>>24)==(0);
  if ($tobool$i$i$i$i77) {
   $__data_$i$i$i$i81 = (($__nsn) + 4|0);
   HEAP32[$__data_$i$i$i$i81>>2] = 0;
   HEAP8[$__nsn>>0] = 0;
  } else {
   $__data_$i2$i$i$i78 = (($__nsn) + 8|0);
   $37 = HEAP32[$__data_$i2$i$i$i78>>2]|0;
   HEAP32[$37>>2] = 0;
   $__size_$i1$i$i$i79 = (($__nsn) + 4|0);
   HEAP32[$__size_$i1$i$i$i79>>2] = 0;
  }
  __THREW__ = 0;
  invoke_vii(426,($__nsn|0),0);
  $38 = __THREW__; __THREW__ = 0;
  $39 = $38&1;
  if ($39) {
   $40 = ___cxa_find_matching_catch(0|0)|0;
   $41 = tempRet0;
   ___clang_call_terminate($40);
   // unreachable;
  }
  ;HEAP32[$__nsn+0>>2]=HEAP32[$ref$tmp15+0>>2]|0;HEAP32[$__nsn+4>>2]=HEAP32[$ref$tmp15+4>>2]|0;HEAP32[$__nsn+8>>2]=HEAP32[$ref$tmp15+8>>2]|0;
  ;HEAP32[$ref$tmp15+0>>2]=0|0;HEAP32[$ref$tmp15+4>>2]=0|0;HEAP32[$ref$tmp15+8>>2]=0|0;
  __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($ref$tmp15);
  $vtable$i86 = HEAP32[$call$i70>>2]|0;
  $vfn$i87 = (($vtable$i86) + 28|0);
  $42 = HEAP32[$vfn$i87>>2]|0;
  FUNCTION_TABLE_vii[$42 & 511]($ref$tmp17,$call$i70);
  $43 = HEAP8[$__psn>>0]|0;
  $and$i$i$i$i89 = $43 & 1;
  $tobool$i$i$i$i90 = ($and$i$i$i$i89<<24>>24)==(0);
  if ($tobool$i$i$i$i90) {
   $__data_$i$i$i$i94 = (($__psn) + 4|0);
   HEAP32[$__data_$i$i$i$i94>>2] = 0;
   HEAP8[$__psn>>0] = 0;
  } else {
   $__data_$i2$i$i$i91 = (($__psn) + 8|0);
   $44 = HEAP32[$__data_$i2$i$i$i91>>2]|0;
   HEAP32[$44>>2] = 0;
   $__size_$i1$i$i$i92 = (($__psn) + 4|0);
   HEAP32[$__size_$i1$i$i$i92>>2] = 0;
  }
  __THREW__ = 0;
  invoke_vii(426,($__psn|0),0);
  $45 = __THREW__; __THREW__ = 0;
  $46 = $45&1;
  if ($46) {
   $47 = ___cxa_find_matching_catch(0|0)|0;
   $48 = tempRet0;
   ___clang_call_terminate($47);
   // unreachable;
  }
  ;HEAP32[$__psn+0>>2]=HEAP32[$ref$tmp17+0>>2]|0;HEAP32[$__psn+4>>2]=HEAP32[$ref$tmp17+4>>2]|0;HEAP32[$__psn+8>>2]=HEAP32[$ref$tmp17+8>>2]|0;
  ;HEAP32[$ref$tmp17+0>>2]=0|0;HEAP32[$ref$tmp17+4>>2]=0|0;HEAP32[$ref$tmp17+8>>2]=0|0;
  __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($ref$tmp17);
  $vtable$i99 = HEAP32[$call$i70>>2]|0;
  $vfn$i100 = (($vtable$i99) + 12|0);
  $49 = HEAP32[$vfn$i100>>2]|0;
  $call$i101 = (FUNCTION_TABLE_ii[$49 & 511]($call$i70)|0);
  HEAP32[$__dp>>2] = $call$i101;
  $vtable$i102 = HEAP32[$call$i70>>2]|0;
  $vfn$i103 = (($vtable$i102) + 16|0);
  $50 = HEAP32[$vfn$i103>>2]|0;
  $call$i104 = (FUNCTION_TABLE_ii[$50 & 511]($call$i70)|0);
  HEAP32[$__ts>>2] = $call$i104;
  $vtable$i105 = HEAP32[$call$i70>>2]|0;
  $vfn$i106 = (($vtable$i105) + 20|0);
  $51 = HEAP32[$vfn$i106>>2]|0;
  FUNCTION_TABLE_vii[$51 & 511]($ref$tmp21,$call$i70);
  $52 = HEAP8[$__grp>>0]|0;
  $and$i$i$i$i108 = $52 & 1;
  $tobool$i$i$i$i109 = ($and$i$i$i$i108<<24>>24)==(0);
  if ($tobool$i$i$i$i109) {
   $arrayidx$i$i$i$i114 = (($__grp) + 1|0);
   HEAP8[$arrayidx$i$i$i$i114>>0] = 0;
   HEAP8[$__grp>>0] = 0;
  } else {
   $__data_$i$i$i$i110 = (($__grp) + 8|0);
   $53 = HEAP32[$__data_$i$i$i$i110>>2]|0;
   HEAP8[$53>>0] = 0;
   $__size_$i1$i$i$i111 = (($__grp) + 4|0);
   HEAP32[$__size_$i1$i$i$i111>>2] = 0;
  }
  __THREW__ = 0;
  invoke_vii(420,($__grp|0),0);
  $54 = __THREW__; __THREW__ = 0;
  $55 = $54&1;
  if ($55) {
   $56 = ___cxa_find_matching_catch(0|0)|0;
   $57 = tempRet0;
   ___clang_call_terminate($56);
   // unreachable;
  }
  ;HEAP32[$__grp+0>>2]=HEAP32[$ref$tmp21+0>>2]|0;HEAP32[$__grp+4>>2]=HEAP32[$ref$tmp21+4>>2]|0;HEAP32[$__grp+8>>2]=HEAP32[$ref$tmp21+8>>2]|0;
  ;HEAP32[$ref$tmp21+0>>2]=0|0;HEAP32[$ref$tmp21+4>>2]=0|0;HEAP32[$ref$tmp21+8>>2]=0|0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($ref$tmp21);
  $vtable$i119 = HEAP32[$call$i70>>2]|0;
  $vfn$i120 = (($vtable$i119) + 24|0);
  $58 = HEAP32[$vfn$i120>>2]|0;
  FUNCTION_TABLE_vii[$58 & 511]($ref$tmp23,$call$i70);
  $59 = HEAP8[$__sym>>0]|0;
  $and$i$i$i$i122 = $59 & 1;
  $tobool$i$i$i$i123 = ($and$i$i$i$i122<<24>>24)==(0);
  if ($tobool$i$i$i$i123) {
   $__data_$i$i$i$i127 = (($__sym) + 4|0);
   HEAP32[$__data_$i$i$i$i127>>2] = 0;
   HEAP8[$__sym>>0] = 0;
  } else {
   $__data_$i2$i$i$i124 = (($__sym) + 8|0);
   $60 = HEAP32[$__data_$i2$i$i$i124>>2]|0;
   HEAP32[$60>>2] = 0;
   $__size_$i1$i$i$i125 = (($__sym) + 4|0);
   HEAP32[$__size_$i1$i$i$i125>>2] = 0;
  }
  __THREW__ = 0;
  invoke_vii(426,($__sym|0),0);
  $61 = __THREW__; __THREW__ = 0;
  $62 = $61&1;
  if ($62) {
   $63 = ___cxa_find_matching_catch(0|0)|0;
   $64 = tempRet0;
   ___clang_call_terminate($63);
   // unreachable;
  }
  ;HEAP32[$__sym+0>>2]=HEAP32[$ref$tmp23+0>>2]|0;HEAP32[$__sym+4>>2]=HEAP32[$ref$tmp23+4>>2]|0;HEAP32[$__sym+8>>2]=HEAP32[$ref$tmp23+8>>2]|0;
  ;HEAP32[$ref$tmp23+0>>2]=0|0;HEAP32[$ref$tmp23+4>>2]=0|0;HEAP32[$ref$tmp23+8>>2]=0|0;
  __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($ref$tmp23);
  $vtable$i132 = HEAP32[$call$i70>>2]|0;
  $vfn$i133 = (($vtable$i132) + 36|0);
  $65 = HEAP32[$vfn$i133>>2]|0;
  $call$i134 = (FUNCTION_TABLE_ii[$65 & 511]($call$i70)|0);
  $storemerge = $call$i134;
  HEAP32[$__fd>>2] = $storemerge;
  STACKTOP = sp;return;
 }
}
function __ZNSt3__119__double_or_nothingIwEEvRNS_10unique_ptrIT_PFvPvEEERPS2_S9_($__b,$__n,$__e) {
 $__b = $__b|0;
 $__n = $__n|0;
 $__e = $__e|0;
 var $$pr = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__second_$i$i$i = 0, $add$ptr = 0, $add$ptr27 = 0, $call16 = 0, $cmp = 0, $cmp17 = 0, $cmp3 = 0;
 var $cond15 = 0, $div24 = 0, $mul4 = 0, $mul4$ = 0, $sub$ptr$div10 = 0, $sub$ptr$lhs$cast = 0, $sub$ptr$lhs$cast7 = 0, $sub$ptr$rhs$cast = 0, $sub$ptr$sub = 0, $sub$ptr$sub9 = 0, $tobool$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $__second_$i$i$i = (($__b) + 4|0);
 $0 = HEAP32[$__second_$i$i$i>>2]|0;
 $cmp = ($0|0)!=(411|0);
 $1 = HEAP32[$__e>>2]|0;
 $2 = HEAP32[$__b>>2]|0;
 $sub$ptr$lhs$cast = $1;
 $sub$ptr$rhs$cast = $2;
 $sub$ptr$sub = (($sub$ptr$lhs$cast) - ($sub$ptr$rhs$cast))|0;
 $cmp3 = ($sub$ptr$sub>>>0)<(2147483647);
 $mul4 = $sub$ptr$sub << 1;
 $mul4$ = $cmp3 ? $mul4 : -1;
 $3 = HEAP32[$__n>>2]|0;
 $sub$ptr$lhs$cast7 = $3;
 $sub$ptr$sub9 = (($sub$ptr$lhs$cast7) - ($sub$ptr$rhs$cast))|0;
 $sub$ptr$div10 = $sub$ptr$sub9 >> 2;
 if ($cmp) {
  $cond15 = $2;
 } else {
  $cond15 = 0;
 }
 $call16 = (_realloc($cond15,$mul4$)|0);
 $cmp17 = ($call16|0)==(0|0);
 if ($cmp17) {
  __ZSt17__throw_bad_allocv();
 }
 do {
  if ($cmp) {
   HEAP32[$__b>>2] = $call16;
   $9 = $call16;
  } else {
   $$pr = HEAP32[$__b>>2]|0;
   HEAP32[$__b>>2] = $call16;
   $tobool$i$i = ($$pr|0)==(0|0);
   if ($tobool$i$i) {
    $9 = $call16;
   } else {
    $4 = HEAP32[$__second_$i$i$i>>2]|0;
    __THREW__ = 0;
    invoke_vi($4|0,($$pr|0));
    $5 = __THREW__; __THREW__ = 0;
    $6 = $5&1;
    if ($6) {
     $7 = ___cxa_find_matching_catch(0|0)|0;
     $8 = tempRet0;
     ___clang_call_terminate($7);
     // unreachable;
    } else {
     $$pre = HEAP32[$__b>>2]|0;
     $9 = $$pre;
     break;
    }
   }
  }
 } while(0);
 HEAP32[$__second_$i$i$i>>2] = 384;
 $div24 = $mul4$ >>> 2;
 $add$ptr = (($9) + ($sub$ptr$div10<<2)|0);
 HEAP32[$__n>>2] = $add$ptr;
 $10 = HEAP32[$__b>>2]|0;
 $add$ptr27 = (($10) + ($div24<<2)|0);
 HEAP32[$__e>>2] = $add$ptr27;
 STACKTOP = sp;return;
}
function __ZNSt3__19money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 STACKTOP = sp;return;
}
function __ZNSt3__19money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED1Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return;
}
function __ZNKSt3__19money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_bRNS_8ios_baseEce($agg$result,$this,$__s,$__intl,$__iob,$__fl,$__units) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__s = $__s|0;
 $__intl = $__intl|0;
 $__iob = $__iob|0;
 $__fl = $__fl|0;
 $__units = +$__units;
 var $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $7 = 0, $8 = 0, $9 = 0, $__bb = 0, $__buf = 0, $__db$0 = 0, $__digits = 0, $__dp = 0, $__fd = 0, $__fmtflags_$i = 0, $__grp = 0, $__loc = 0, $__mb$0 = 0, $__mbuf = 0, $__me = 0, $__mi = 0, $__n$0 = 0, $__pat = 0, $__size_$i2$i = 0;
 var $__size_$i2$i49 = 0, $__size_$i2$i65 = 0, $__size_$i2$i75 = 0, $__sn = 0, $__sym = 0, $__ts = 0, $add$ptr = 0, $add$ptr58 = 0, $add124 = 0, $add36 = 0, $add37 = 0, $add37$pn = 0, $add41 = 0, $add42 = 0, $agg$tmp = 0, $agg$tmp$byval_copy = 0, $and$i$i = 0, $and$i$i47 = 0, $and$i$i63 = 0, $and$i$i73 = 0;
 var $call = 0, $call$i28 = 0, $call11 = 0, $call4 = 0, $call49 = 0, $call6 = 0, $cmp = 0, $cmp24 = 0, $cmp25 = 0, $cmp32 = 0, $cmp44 = 0, $cmp51 = 0, $cmp7 = 0, $cond = 0, $cond$i = 0, $cond$i54 = 0, $cond$i70 = 0, $cond$i80 = 0, $conv$i$i = 0, $conv$i$i51 = 0;
 var $conv$i$i67 = 0, $conv$i$i77 = 0, $ehselector$slot$0 = 0, $ehselector$slot$1 = 0, $ehselector$slot$2 = 0, $exn$slot$0 = 0, $exn$slot$1 = 0, $exn$slot$2 = 0, $lnot$i = 0, $mul33 = 0, $shr1$i$i = 0, $shr1$i$i52 = 0, $shr1$i$i68 = 0, $shr1$i$i78 = 0, $sub = 0, $tobool$i$i = 0, $tobool$i$i48 = 0, $tobool$i$i64 = 0, $tobool$i$i74 = 0, $vararg_buffer = 0;
 var $vararg_buffer1 = 0, $vfn$i = 0, $vtable$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 400|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $agg$tmp$byval_copy = sp + 80|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $__buf = sp + 84|0;
 $__bb = sp + 48|0;
 $__digits = sp + 184|0;
 $__loc = sp + 76|0;
 $__pat = sp + 52|0;
 $__dp = sp + 284|0;
 $__ts = sp + 388|0;
 $__grp = sp + 64|0;
 $__sym = sp + 20|0;
 $__sn = sp + 32|0;
 $__fd = sp + 60|0;
 $__mbuf = sp + 288|0;
 $__mi = sp + 56|0;
 $__me = sp + 16|0;
 $agg$tmp = sp + 44|0;
 HEAP32[$__bb>>2] = $__buf;
 HEAPF64[tempDoublePtr>>3]=$__units;HEAP32[$vararg_buffer>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_buffer+4>>2]=HEAP32[tempDoublePtr+4>>2];
 $call = (_snprintf($__buf,100,4368,$vararg_buffer)|0);
 $cmp = ($call>>>0)>(99);
 do {
  if ($cmp) {
   __THREW__ = 0;
   $call4 = (invoke_i(395)|0);
   $0 = __THREW__; __THREW__ = 0;
   $1 = $0&1;
   if ($1) {
    $60 = 0;$61 = 0;
   } else {
    __THREW__ = 0;
    HEAPF64[tempDoublePtr>>3]=$__units;HEAP32[$vararg_buffer1>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_buffer1+4>>2]=HEAP32[tempDoublePtr+4>>2];
    $call6 = (invoke_iiiii(401,($__bb|0),($call4|0),(4368|0),($vararg_buffer1|0))|0);
    $2 = __THREW__; __THREW__ = 0;
    $3 = $2&1;
    if ($3) {
     $60 = 0;$61 = 0;
    } else {
     $4 = HEAP32[$__bb>>2]|0;
     $cmp7 = ($4|0)==(0|0);
     if ($cmp7) {
      __THREW__ = 0;
      invoke_v(383);
      $5 = __THREW__; __THREW__ = 0;
      $6 = $5&1;
      if ($6) {
       $60 = 0;$61 = 0;
       break;
      }
      $$pre = HEAP32[$__bb>>2]|0;
      $62 = $$pre;
     } else {
      $62 = $4;
     }
     $call11 = (_malloc($call6)|0);
     $lnot$i = ($call11|0)==(0|0);
     if ($lnot$i) {
      __THREW__ = 0;
      invoke_v(383);
      $9 = __THREW__; __THREW__ = 0;
      $10 = $9&1;
      if ($10) {
       $60 = $62;$61 = 0;
      } else {
       $55 = 0;$56 = $62;$__db$0 = 0;$__n$0 = $call6;
       label = 10;
      }
     } else {
      $55 = $call11;$56 = $62;$__db$0 = $call11;$__n$0 = $call6;
      label = 10;
     }
    }
   }
  } else {
   $55 = 0;$56 = 0;$__db$0 = $__digits;$__n$0 = $call;
   label = 10;
  }
 } while(0);
 if ((label|0) == 10) {
  __THREW__ = 0;
  invoke_vii(358,($__loc|0),($__iob|0));
  $11 = __THREW__; __THREW__ = 0;
  $12 = $11&1;
  if ($12) {
   $60 = $56;$61 = $55;
  } else {
   __THREW__ = 0;
   $call$i28 = (invoke_iii(359,($__loc|0),(4616|0))|0);
   $13 = __THREW__; __THREW__ = 0;
   $14 = $13&1;
   if ($14) {
    label = 35;
   } else {
    $15 = HEAP32[$__bb>>2]|0;
    $add$ptr = (($15) + ($__n$0)|0);
    $vtable$i = HEAP32[$call$i28>>2]|0;
    $vfn$i = (($vtable$i) + 32|0);
    $16 = HEAP32[$vfn$i>>2]|0;
    __THREW__ = 0;
    (invoke_iiiii($16|0,($call$i28|0),($15|0),($add$ptr|0),($__db$0|0))|0);
    $17 = __THREW__; __THREW__ = 0;
    $18 = $17&1;
    if ($18) {
     label = 35;
    } else {
     $cmp24 = ($__n$0|0)==(0);
     if ($cmp24) {
      $21 = 0;
     } else {
      $19 = HEAP32[$__bb>>2]|0;
      $20 = HEAP8[$19>>0]|0;
      $cmp25 = ($20<<24>>24)==(45);
      $21 = $cmp25;
     }
     HEAP32[$__pat>>2] = 0;
     ;HEAP32[$__grp+0>>2]=0|0;HEAP32[$__grp+4>>2]=0|0;HEAP32[$__grp+8>>2]=0|0;
     ;HEAP32[$__sym+0>>2]=0|0;HEAP32[$__sym+4>>2]=0|0;HEAP32[$__sym+8>>2]=0|0;
     ;HEAP32[$__sn+0>>2]=0|0;HEAP32[$__sn+4>>2]=0|0;HEAP32[$__sn+8>>2]=0|0;
     __THREW__ = 0;
     invoke_viiiiiiiiii(427,($__intl|0),($21|0),($__loc|0),($__pat|0),($__dp|0),($__ts|0),($__grp|0),($__sym|0),($__sn|0),($__fd|0));
     $22 = __THREW__; __THREW__ = 0;
     $23 = $22&1;
     do {
      if ($23) {
       $39 = ___cxa_find_matching_catch()|0;
       $40 = tempRet0;
       $ehselector$slot$0 = $40;$exn$slot$0 = $39;
      } else {
       $24 = HEAP32[$__fd>>2]|0;
       $cmp32 = ($__n$0|0)>($24|0);
       if ($cmp32) {
        $sub = (($__n$0) - ($24))|0;
        $mul33 = $sub << 1;
        $25 = HEAP8[$__sn>>0]|0;
        $and$i$i = $25 & 1;
        $tobool$i$i = ($and$i$i<<24>>24)==(0);
        if ($tobool$i$i) {
         $conv$i$i = $25&255;
         $shr1$i$i = $conv$i$i >>> 1;
         $cond$i = $shr1$i$i;
        } else {
         $__size_$i2$i = (($__sn) + 4|0);
         $26 = HEAP32[$__size_$i2$i>>2]|0;
         $cond$i = $26;
        }
        $27 = HEAP8[$__sym>>0]|0;
        $and$i$i47 = $27 & 1;
        $tobool$i$i48 = ($and$i$i47<<24>>24)==(0);
        if ($tobool$i$i48) {
         $conv$i$i51 = $27&255;
         $shr1$i$i52 = $conv$i$i51 >>> 1;
         $cond$i54 = $shr1$i$i52;
        } else {
         $__size_$i2$i49 = (($__sym) + 4|0);
         $28 = HEAP32[$__size_$i2$i49>>2]|0;
         $cond$i54 = $28;
        }
        $add124 = $mul33 | 1;
        $add36 = (($cond$i) + ($add124))|0;
        $add37 = (($add36) + ($cond$i54))|0;
        $add37$pn = $add37;
       } else {
        $29 = HEAP8[$__sn>>0]|0;
        $and$i$i63 = $29 & 1;
        $tobool$i$i64 = ($and$i$i63<<24>>24)==(0);
        if ($tobool$i$i64) {
         $conv$i$i67 = $29&255;
         $shr1$i$i68 = $conv$i$i67 >>> 1;
         $cond$i70 = $shr1$i$i68;
        } else {
         $__size_$i2$i65 = (($__sn) + 4|0);
         $30 = HEAP32[$__size_$i2$i65>>2]|0;
         $cond$i70 = $30;
        }
        $31 = HEAP8[$__sym>>0]|0;
        $and$i$i73 = $31 & 1;
        $tobool$i$i74 = ($and$i$i73<<24>>24)==(0);
        if ($tobool$i$i74) {
         $conv$i$i77 = $31&255;
         $shr1$i$i78 = $conv$i$i77 >>> 1;
         $cond$i80 = $shr1$i$i78;
        } else {
         $__size_$i2$i75 = (($__sym) + 4|0);
         $32 = HEAP32[$__size_$i2$i75>>2]|0;
         $cond$i80 = $32;
        }
        $add41 = (($cond$i70) + 2)|0;
        $add42 = (($add41) + ($cond$i80))|0;
        $add37$pn = $add42;
       }
       $cond = (($add37$pn) + ($24))|0;
       $cmp44 = ($cond>>>0)>(100);
       if ($cmp44) {
        $call49 = (_malloc($cond)|0);
        $cmp51 = ($call49|0)==(0|0);
        if ($cmp51) {
         __THREW__ = 0;
         invoke_v(383);
         $33 = __THREW__; __THREW__ = 0;
         $34 = $33&1;
         if ($34) {
          $35 = ___cxa_find_matching_catch()|0;
          $36 = tempRet0;
          $ehselector$slot$0 = $36;$exn$slot$0 = $35;
          break;
         } else {
          $43 = 0;$__mb$0 = 0;
         }
        } else {
         $43 = $call49;$__mb$0 = $call49;
        }
       } else {
        $43 = 0;$__mb$0 = $__mbuf;
       }
       $__fmtflags_$i = (($__iob) + 4|0);
       $44 = HEAP32[$__fmtflags_$i>>2]|0;
       $add$ptr58 = (($__db$0) + ($__n$0)|0);
       $45 = HEAP8[$__dp>>0]|0;
       $46 = HEAP8[$__ts>>0]|0;
       __THREW__ = 0;
       invoke_viiiiiiiiiiiiiii(428,($__mb$0|0),($__mi|0),($__me|0),($44|0),($__db$0|0),($add$ptr58|0),($call$i28|0),($21|0),($__pat|0),($45|0),($46|0),($__grp|0),($__sym|0),($__sn|0),($24|0));
       $47 = __THREW__; __THREW__ = 0;
       $48 = $47&1;
       if (!($48)) {
        $49 = HEAP32[$__s>>2]|0;
        HEAP32[$agg$tmp>>2] = $49;
        $50 = HEAP32[$__mi>>2]|0;
        $51 = HEAP32[$__me>>2]|0;
        __THREW__ = 0;
        ;HEAP32[$agg$tmp$byval_copy+0>>2]=HEAP32[$agg$tmp+0>>2]|0;
        invoke_viiiiiii(360,($agg$result|0),($agg$tmp$byval_copy|0),($__mb$0|0),($50|0),($51|0),($__iob|0),($__fl|0));
        $52 = __THREW__; __THREW__ = 0;
        $53 = $52&1;
        if (!($53)) {
         _free($43);
         __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__sn);
         __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__sym);
         __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grp);
         $54 = HEAP32[$__loc>>2]|0;
         (__ZNSt3__114__shared_count16__release_sharedEv($54)|0);
         _free($55);
         _free($56);
         STACKTOP = sp;return;
        }
       }
       $41 = ___cxa_find_matching_catch()|0;
       $42 = tempRet0;
       _free($43);
       $ehselector$slot$0 = $42;$exn$slot$0 = $41;
      }
     } while(0);
     __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__sn);
     __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__sym);
     __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grp);
     $ehselector$slot$1 = $ehselector$slot$0;$exn$slot$1 = $exn$slot$0;
    }
   }
   if ((label|0) == 35) {
    $37 = ___cxa_find_matching_catch()|0;
    $38 = tempRet0;
    $ehselector$slot$1 = $38;$exn$slot$1 = $37;
   }
   $57 = HEAP32[$__loc>>2]|0;
   (__ZNSt3__114__shared_count16__release_sharedEv($57)|0);
   $58 = $55;$59 = $56;$ehselector$slot$2 = $ehselector$slot$1;$exn$slot$2 = $exn$slot$1;
   _free($58);
   _free($59);
   ___resumeException($exn$slot$2|0);
   // unreachable;
  }
 }
 $7 = ___cxa_find_matching_catch()|0;
 $8 = tempRet0;
 $58 = $61;$59 = $60;$ehselector$slot$2 = $8;$exn$slot$2 = $7;
 _free($58);
 _free($59);
 ___resumeException($exn$slot$2|0);
 // unreachable;
}
function __ZNSt3__111__money_putIcE13__gather_infoEbbRKNS_6localeERNS_10money_base7patternERcS8_RNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEESF_SF_Ri($__intl,$__neg,$__loc,$__pat,$__dp,$__ts,$__grp,$__sym,$__sn,$__fd) {
 $__intl = $__intl|0;
 $__neg = $__neg|0;
 $__loc = $__loc|0;
 $__pat = $__pat|0;
 $__dp = $__dp|0;
 $__ts = $__ts|0;
 $__grp = $__grp|0;
 $__sym = $__sym|0;
 $__sn = $__sn|0;
 $__fd = $__fd|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $8 = 0, $9 = 0, $__data_$i$i$i$i = 0, $__data_$i$i$i$i107 = 0, $__data_$i$i$i$i127 = 0, $__data_$i$i$i$i141 = 0, $__data_$i$i$i$i37 = 0, $__data_$i$i$i$i57 = 0, $__data_$i$i$i$i71 = 0, $__data_$i$i$i$i91 = 0, $__size_$i1$i$i$i = 0, $__size_$i1$i$i$i108 = 0;
 var $__size_$i1$i$i$i128 = 0, $__size_$i1$i$i$i142 = 0, $__size_$i1$i$i$i38 = 0, $__size_$i1$i$i$i58 = 0, $__size_$i1$i$i$i72 = 0, $__size_$i1$i$i$i92 = 0, $and$i$i$i$i = 0, $and$i$i$i$i105 = 0, $and$i$i$i$i125 = 0, $and$i$i$i$i139 = 0, $and$i$i$i$i35 = 0, $and$i$i$i$i55 = 0, $and$i$i$i$i69 = 0, $and$i$i$i$i89 = 0, $arrayidx$i$i$i$i = 0, $arrayidx$i$i$i$i111 = 0, $arrayidx$i$i$i$i131 = 0, $arrayidx$i$i$i$i145 = 0, $arrayidx$i$i$i$i41 = 0, $arrayidx$i$i$i$i61 = 0;
 var $arrayidx$i$i$i$i75 = 0, $arrayidx$i$i$i$i95 = 0, $call$i = 0, $call$i118 = 0, $call$i121 = 0, $call$i152 = 0, $call$i48 = 0, $call$i51 = 0, $call$i82 = 0, $call$i83 = 0, $ref$tmp = 0, $ref$tmp11 = 0, $ref$tmp13 = 0, $ref$tmp21 = 0, $ref$tmp22 = 0, $ref$tmp25 = 0, $ref$tmp26 = 0, $ref$tmp31 = 0, $ref$tmp33 = 0, $ref$tmp4 = 0;
 var $ref$tmp6 = 0, $ref$tmp7 = 0, $storemerge = 0, $tobool$i$i$i$i = 0, $tobool$i$i$i$i106 = 0, $tobool$i$i$i$i126 = 0, $tobool$i$i$i$i140 = 0, $tobool$i$i$i$i36 = 0, $tobool$i$i$i$i56 = 0, $tobool$i$i$i$i70 = 0, $tobool$i$i$i$i90 = 0, $vfn$i = 0, $vfn$i101 = 0, $vfn$i103 = 0, $vfn$i117 = 0, $vfn$i120 = 0, $vfn$i123 = 0, $vfn$i137 = 0, $vfn$i151 = 0, $vfn$i29 = 0;
 var $vfn$i31 = 0, $vfn$i33 = 0, $vfn$i47 = 0, $vfn$i50 = 0, $vfn$i53 = 0, $vfn$i67 = 0, $vfn$i81 = 0, $vfn$i85 = 0, $vfn$i87 = 0, $vtable$i = 0, $vtable$i102 = 0, $vtable$i116 = 0, $vtable$i119 = 0, $vtable$i122 = 0, $vtable$i136 = 0, $vtable$i150 = 0, $vtable$i28 = 0, $vtable$i32 = 0, $vtable$i46 = 0, $vtable$i49 = 0;
 var $vtable$i52 = 0, $vtable$i66 = 0, $vtable$i80 = 0, $vtable$i84 = 0, $vtable$i86 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $ref$tmp = sp;
 $ref$tmp4 = sp + 16|0;
 $ref$tmp6 = sp + 92|0;
 $ref$tmp7 = sp + 40|0;
 $ref$tmp11 = sp + 80|0;
 $ref$tmp13 = sp + 96|0;
 $ref$tmp21 = sp + 108|0;
 $ref$tmp22 = sp + 56|0;
 $ref$tmp25 = sp + 52|0;
 $ref$tmp26 = sp + 28|0;
 $ref$tmp31 = sp + 4|0;
 $ref$tmp33 = sp + 68|0;
 if ($__intl) {
  $call$i = (__ZNKSt3__16locale9use_facetERNS0_2idE($__loc,4056)|0);
  $vtable$i = HEAP32[$call$i>>2]|0;
  do {
   if ($__neg) {
    $vfn$i = (($vtable$i) + 44|0);
    $0 = HEAP32[$vfn$i>>2]|0;
    FUNCTION_TABLE_vii[$0 & 511]($ref$tmp,$call$i);
    $1 = HEAP32[$ref$tmp>>2]|0;
    HEAP8[$__pat>>0]=$1&255;HEAP8[$__pat+1>>0]=($1>>8)&255;HEAP8[$__pat+2>>0]=($1>>16)&255;HEAP8[$__pat+3>>0]=$1>>24;
    $vtable$i28 = HEAP32[$call$i>>2]|0;
    $vfn$i29 = (($vtable$i28) + 32|0);
    $2 = HEAP32[$vfn$i29>>2]|0;
    FUNCTION_TABLE_vii[$2 & 511]($ref$tmp4,$call$i);
    $3 = HEAP8[$__sn>>0]|0;
    $and$i$i$i$i = $3 & 1;
    $tobool$i$i$i$i = ($and$i$i$i$i<<24>>24)==(0);
    if ($tobool$i$i$i$i) {
     $arrayidx$i$i$i$i = (($__sn) + 1|0);
     HEAP8[$arrayidx$i$i$i$i>>0] = 0;
     HEAP8[$__sn>>0] = 0;
    } else {
     $__data_$i$i$i$i = (($__sn) + 8|0);
     $4 = HEAP32[$__data_$i$i$i$i>>2]|0;
     HEAP8[$4>>0] = 0;
     $__size_$i1$i$i$i = (($__sn) + 4|0);
     HEAP32[$__size_$i1$i$i$i>>2] = 0;
    }
    __THREW__ = 0;
    invoke_vii(420,($__sn|0),0);
    $5 = __THREW__; __THREW__ = 0;
    $6 = $5&1;
    if ($6) {
     $7 = ___cxa_find_matching_catch(0|0)|0;
     $8 = tempRet0;
     ___clang_call_terminate($7);
     // unreachable;
    } else {
     ;HEAP32[$__sn+0>>2]=HEAP32[$ref$tmp4+0>>2]|0;HEAP32[$__sn+4>>2]=HEAP32[$ref$tmp4+4>>2]|0;HEAP32[$__sn+8>>2]=HEAP32[$ref$tmp4+8>>2]|0;
     ;HEAP32[$ref$tmp4+0>>2]=0|0;HEAP32[$ref$tmp4+4>>2]=0|0;HEAP32[$ref$tmp4+8>>2]=0|0;
     __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($ref$tmp4);
     break;
    }
   } else {
    $vfn$i31 = (($vtable$i) + 40|0);
    $9 = HEAP32[$vfn$i31>>2]|0;
    FUNCTION_TABLE_vii[$9 & 511]($ref$tmp6,$call$i);
    $10 = HEAP32[$ref$tmp6>>2]|0;
    HEAP8[$__pat>>0]=$10&255;HEAP8[$__pat+1>>0]=($10>>8)&255;HEAP8[$__pat+2>>0]=($10>>16)&255;HEAP8[$__pat+3>>0]=$10>>24;
    $vtable$i32 = HEAP32[$call$i>>2]|0;
    $vfn$i33 = (($vtable$i32) + 28|0);
    $11 = HEAP32[$vfn$i33>>2]|0;
    FUNCTION_TABLE_vii[$11 & 511]($ref$tmp7,$call$i);
    $12 = HEAP8[$__sn>>0]|0;
    $and$i$i$i$i35 = $12 & 1;
    $tobool$i$i$i$i36 = ($and$i$i$i$i35<<24>>24)==(0);
    if ($tobool$i$i$i$i36) {
     $arrayidx$i$i$i$i41 = (($__sn) + 1|0);
     HEAP8[$arrayidx$i$i$i$i41>>0] = 0;
     HEAP8[$__sn>>0] = 0;
    } else {
     $__data_$i$i$i$i37 = (($__sn) + 8|0);
     $13 = HEAP32[$__data_$i$i$i$i37>>2]|0;
     HEAP8[$13>>0] = 0;
     $__size_$i1$i$i$i38 = (($__sn) + 4|0);
     HEAP32[$__size_$i1$i$i$i38>>2] = 0;
    }
    __THREW__ = 0;
    invoke_vii(420,($__sn|0),0);
    $14 = __THREW__; __THREW__ = 0;
    $15 = $14&1;
    if ($15) {
     $16 = ___cxa_find_matching_catch(0|0)|0;
     $17 = tempRet0;
     ___clang_call_terminate($16);
     // unreachable;
    } else {
     ;HEAP32[$__sn+0>>2]=HEAP32[$ref$tmp7+0>>2]|0;HEAP32[$__sn+4>>2]=HEAP32[$ref$tmp7+4>>2]|0;HEAP32[$__sn+8>>2]=HEAP32[$ref$tmp7+8>>2]|0;
     ;HEAP32[$ref$tmp7+0>>2]=0|0;HEAP32[$ref$tmp7+4>>2]=0|0;HEAP32[$ref$tmp7+8>>2]=0|0;
     __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($ref$tmp7);
     break;
    }
   }
  } while(0);
  $vtable$i46 = HEAP32[$call$i>>2]|0;
  $vfn$i47 = (($vtable$i46) + 12|0);
  $18 = HEAP32[$vfn$i47>>2]|0;
  $call$i48 = (FUNCTION_TABLE_ii[$18 & 511]($call$i)|0);
  HEAP8[$__dp>>0] = $call$i48;
  $vtable$i49 = HEAP32[$call$i>>2]|0;
  $vfn$i50 = (($vtable$i49) + 16|0);
  $19 = HEAP32[$vfn$i50>>2]|0;
  $call$i51 = (FUNCTION_TABLE_ii[$19 & 511]($call$i)|0);
  HEAP8[$__ts>>0] = $call$i51;
  $vtable$i52 = HEAP32[$call$i>>2]|0;
  $vfn$i53 = (($vtable$i52) + 20|0);
  $20 = HEAP32[$vfn$i53>>2]|0;
  FUNCTION_TABLE_vii[$20 & 511]($ref$tmp11,$call$i);
  $21 = HEAP8[$__grp>>0]|0;
  $and$i$i$i$i55 = $21 & 1;
  $tobool$i$i$i$i56 = ($and$i$i$i$i55<<24>>24)==(0);
  if ($tobool$i$i$i$i56) {
   $arrayidx$i$i$i$i61 = (($__grp) + 1|0);
   HEAP8[$arrayidx$i$i$i$i61>>0] = 0;
   HEAP8[$__grp>>0] = 0;
  } else {
   $__data_$i$i$i$i57 = (($__grp) + 8|0);
   $22 = HEAP32[$__data_$i$i$i$i57>>2]|0;
   HEAP8[$22>>0] = 0;
   $__size_$i1$i$i$i58 = (($__grp) + 4|0);
   HEAP32[$__size_$i1$i$i$i58>>2] = 0;
  }
  __THREW__ = 0;
  invoke_vii(420,($__grp|0),0);
  $23 = __THREW__; __THREW__ = 0;
  $24 = $23&1;
  if ($24) {
   $25 = ___cxa_find_matching_catch(0|0)|0;
   $26 = tempRet0;
   ___clang_call_terminate($25);
   // unreachable;
  }
  ;HEAP32[$__grp+0>>2]=HEAP32[$ref$tmp11+0>>2]|0;HEAP32[$__grp+4>>2]=HEAP32[$ref$tmp11+4>>2]|0;HEAP32[$__grp+8>>2]=HEAP32[$ref$tmp11+8>>2]|0;
  ;HEAP32[$ref$tmp11+0>>2]=0|0;HEAP32[$ref$tmp11+4>>2]=0|0;HEAP32[$ref$tmp11+8>>2]=0|0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($ref$tmp11);
  $vtable$i66 = HEAP32[$call$i>>2]|0;
  $vfn$i67 = (($vtable$i66) + 24|0);
  $27 = HEAP32[$vfn$i67>>2]|0;
  FUNCTION_TABLE_vii[$27 & 511]($ref$tmp13,$call$i);
  $28 = HEAP8[$__sym>>0]|0;
  $and$i$i$i$i69 = $28 & 1;
  $tobool$i$i$i$i70 = ($and$i$i$i$i69<<24>>24)==(0);
  if ($tobool$i$i$i$i70) {
   $arrayidx$i$i$i$i75 = (($__sym) + 1|0);
   HEAP8[$arrayidx$i$i$i$i75>>0] = 0;
   HEAP8[$__sym>>0] = 0;
  } else {
   $__data_$i$i$i$i71 = (($__sym) + 8|0);
   $29 = HEAP32[$__data_$i$i$i$i71>>2]|0;
   HEAP8[$29>>0] = 0;
   $__size_$i1$i$i$i72 = (($__sym) + 4|0);
   HEAP32[$__size_$i1$i$i$i72>>2] = 0;
  }
  __THREW__ = 0;
  invoke_vii(420,($__sym|0),0);
  $30 = __THREW__; __THREW__ = 0;
  $31 = $30&1;
  if ($31) {
   $32 = ___cxa_find_matching_catch(0|0)|0;
   $33 = tempRet0;
   ___clang_call_terminate($32);
   // unreachable;
  }
  ;HEAP32[$__sym+0>>2]=HEAP32[$ref$tmp13+0>>2]|0;HEAP32[$__sym+4>>2]=HEAP32[$ref$tmp13+4>>2]|0;HEAP32[$__sym+8>>2]=HEAP32[$ref$tmp13+8>>2]|0;
  ;HEAP32[$ref$tmp13+0>>2]=0|0;HEAP32[$ref$tmp13+4>>2]=0|0;HEAP32[$ref$tmp13+8>>2]=0|0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($ref$tmp13);
  $vtable$i80 = HEAP32[$call$i>>2]|0;
  $vfn$i81 = (($vtable$i80) + 36|0);
  $34 = HEAP32[$vfn$i81>>2]|0;
  $call$i82 = (FUNCTION_TABLE_ii[$34 & 511]($call$i)|0);
  $storemerge = $call$i82;
  HEAP32[$__fd>>2] = $storemerge;
  STACKTOP = sp;return;
 } else {
  $call$i83 = (__ZNKSt3__16locale9use_facetERNS0_2idE($__loc,3992)|0);
  $vtable$i84 = HEAP32[$call$i83>>2]|0;
  do {
   if ($__neg) {
    $vfn$i85 = (($vtable$i84) + 44|0);
    $35 = HEAP32[$vfn$i85>>2]|0;
    FUNCTION_TABLE_vii[$35 & 511]($ref$tmp21,$call$i83);
    $36 = HEAP32[$ref$tmp21>>2]|0;
    HEAP8[$__pat>>0]=$36&255;HEAP8[$__pat+1>>0]=($36>>8)&255;HEAP8[$__pat+2>>0]=($36>>16)&255;HEAP8[$__pat+3>>0]=$36>>24;
    $vtable$i86 = HEAP32[$call$i83>>2]|0;
    $vfn$i87 = (($vtable$i86) + 32|0);
    $37 = HEAP32[$vfn$i87>>2]|0;
    FUNCTION_TABLE_vii[$37 & 511]($ref$tmp22,$call$i83);
    $38 = HEAP8[$__sn>>0]|0;
    $and$i$i$i$i89 = $38 & 1;
    $tobool$i$i$i$i90 = ($and$i$i$i$i89<<24>>24)==(0);
    if ($tobool$i$i$i$i90) {
     $arrayidx$i$i$i$i95 = (($__sn) + 1|0);
     HEAP8[$arrayidx$i$i$i$i95>>0] = 0;
     HEAP8[$__sn>>0] = 0;
    } else {
     $__data_$i$i$i$i91 = (($__sn) + 8|0);
     $39 = HEAP32[$__data_$i$i$i$i91>>2]|0;
     HEAP8[$39>>0] = 0;
     $__size_$i1$i$i$i92 = (($__sn) + 4|0);
     HEAP32[$__size_$i1$i$i$i92>>2] = 0;
    }
    __THREW__ = 0;
    invoke_vii(420,($__sn|0),0);
    $40 = __THREW__; __THREW__ = 0;
    $41 = $40&1;
    if ($41) {
     $42 = ___cxa_find_matching_catch(0|0)|0;
     $43 = tempRet0;
     ___clang_call_terminate($42);
     // unreachable;
    } else {
     ;HEAP32[$__sn+0>>2]=HEAP32[$ref$tmp22+0>>2]|0;HEAP32[$__sn+4>>2]=HEAP32[$ref$tmp22+4>>2]|0;HEAP32[$__sn+8>>2]=HEAP32[$ref$tmp22+8>>2]|0;
     ;HEAP32[$ref$tmp22+0>>2]=0|0;HEAP32[$ref$tmp22+4>>2]=0|0;HEAP32[$ref$tmp22+8>>2]=0|0;
     __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($ref$tmp22);
     break;
    }
   } else {
    $vfn$i101 = (($vtable$i84) + 40|0);
    $44 = HEAP32[$vfn$i101>>2]|0;
    FUNCTION_TABLE_vii[$44 & 511]($ref$tmp25,$call$i83);
    $45 = HEAP32[$ref$tmp25>>2]|0;
    HEAP8[$__pat>>0]=$45&255;HEAP8[$__pat+1>>0]=($45>>8)&255;HEAP8[$__pat+2>>0]=($45>>16)&255;HEAP8[$__pat+3>>0]=$45>>24;
    $vtable$i102 = HEAP32[$call$i83>>2]|0;
    $vfn$i103 = (($vtable$i102) + 28|0);
    $46 = HEAP32[$vfn$i103>>2]|0;
    FUNCTION_TABLE_vii[$46 & 511]($ref$tmp26,$call$i83);
    $47 = HEAP8[$__sn>>0]|0;
    $and$i$i$i$i105 = $47 & 1;
    $tobool$i$i$i$i106 = ($and$i$i$i$i105<<24>>24)==(0);
    if ($tobool$i$i$i$i106) {
     $arrayidx$i$i$i$i111 = (($__sn) + 1|0);
     HEAP8[$arrayidx$i$i$i$i111>>0] = 0;
     HEAP8[$__sn>>0] = 0;
    } else {
     $__data_$i$i$i$i107 = (($__sn) + 8|0);
     $48 = HEAP32[$__data_$i$i$i$i107>>2]|0;
     HEAP8[$48>>0] = 0;
     $__size_$i1$i$i$i108 = (($__sn) + 4|0);
     HEAP32[$__size_$i1$i$i$i108>>2] = 0;
    }
    __THREW__ = 0;
    invoke_vii(420,($__sn|0),0);
    $49 = __THREW__; __THREW__ = 0;
    $50 = $49&1;
    if ($50) {
     $51 = ___cxa_find_matching_catch(0|0)|0;
     $52 = tempRet0;
     ___clang_call_terminate($51);
     // unreachable;
    } else {
     ;HEAP32[$__sn+0>>2]=HEAP32[$ref$tmp26+0>>2]|0;HEAP32[$__sn+4>>2]=HEAP32[$ref$tmp26+4>>2]|0;HEAP32[$__sn+8>>2]=HEAP32[$ref$tmp26+8>>2]|0;
     ;HEAP32[$ref$tmp26+0>>2]=0|0;HEAP32[$ref$tmp26+4>>2]=0|0;HEAP32[$ref$tmp26+8>>2]=0|0;
     __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($ref$tmp26);
     break;
    }
   }
  } while(0);
  $vtable$i116 = HEAP32[$call$i83>>2]|0;
  $vfn$i117 = (($vtable$i116) + 12|0);
  $53 = HEAP32[$vfn$i117>>2]|0;
  $call$i118 = (FUNCTION_TABLE_ii[$53 & 511]($call$i83)|0);
  HEAP8[$__dp>>0] = $call$i118;
  $vtable$i119 = HEAP32[$call$i83>>2]|0;
  $vfn$i120 = (($vtable$i119) + 16|0);
  $54 = HEAP32[$vfn$i120>>2]|0;
  $call$i121 = (FUNCTION_TABLE_ii[$54 & 511]($call$i83)|0);
  HEAP8[$__ts>>0] = $call$i121;
  $vtable$i122 = HEAP32[$call$i83>>2]|0;
  $vfn$i123 = (($vtable$i122) + 20|0);
  $55 = HEAP32[$vfn$i123>>2]|0;
  FUNCTION_TABLE_vii[$55 & 511]($ref$tmp31,$call$i83);
  $56 = HEAP8[$__grp>>0]|0;
  $and$i$i$i$i125 = $56 & 1;
  $tobool$i$i$i$i126 = ($and$i$i$i$i125<<24>>24)==(0);
  if ($tobool$i$i$i$i126) {
   $arrayidx$i$i$i$i131 = (($__grp) + 1|0);
   HEAP8[$arrayidx$i$i$i$i131>>0] = 0;
   HEAP8[$__grp>>0] = 0;
  } else {
   $__data_$i$i$i$i127 = (($__grp) + 8|0);
   $57 = HEAP32[$__data_$i$i$i$i127>>2]|0;
   HEAP8[$57>>0] = 0;
   $__size_$i1$i$i$i128 = (($__grp) + 4|0);
   HEAP32[$__size_$i1$i$i$i128>>2] = 0;
  }
  __THREW__ = 0;
  invoke_vii(420,($__grp|0),0);
  $58 = __THREW__; __THREW__ = 0;
  $59 = $58&1;
  if ($59) {
   $60 = ___cxa_find_matching_catch(0|0)|0;
   $61 = tempRet0;
   ___clang_call_terminate($60);
   // unreachable;
  }
  ;HEAP32[$__grp+0>>2]=HEAP32[$ref$tmp31+0>>2]|0;HEAP32[$__grp+4>>2]=HEAP32[$ref$tmp31+4>>2]|0;HEAP32[$__grp+8>>2]=HEAP32[$ref$tmp31+8>>2]|0;
  ;HEAP32[$ref$tmp31+0>>2]=0|0;HEAP32[$ref$tmp31+4>>2]=0|0;HEAP32[$ref$tmp31+8>>2]=0|0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($ref$tmp31);
  $vtable$i136 = HEAP32[$call$i83>>2]|0;
  $vfn$i137 = (($vtable$i136) + 24|0);
  $62 = HEAP32[$vfn$i137>>2]|0;
  FUNCTION_TABLE_vii[$62 & 511]($ref$tmp33,$call$i83);
  $63 = HEAP8[$__sym>>0]|0;
  $and$i$i$i$i139 = $63 & 1;
  $tobool$i$i$i$i140 = ($and$i$i$i$i139<<24>>24)==(0);
  if ($tobool$i$i$i$i140) {
   $arrayidx$i$i$i$i145 = (($__sym) + 1|0);
   HEAP8[$arrayidx$i$i$i$i145>>0] = 0;
   HEAP8[$__sym>>0] = 0;
  } else {
   $__data_$i$i$i$i141 = (($__sym) + 8|0);
   $64 = HEAP32[$__data_$i$i$i$i141>>2]|0;
   HEAP8[$64>>0] = 0;
   $__size_$i1$i$i$i142 = (($__sym) + 4|0);
   HEAP32[$__size_$i1$i$i$i142>>2] = 0;
  }
  __THREW__ = 0;
  invoke_vii(420,($__sym|0),0);
  $65 = __THREW__; __THREW__ = 0;
  $66 = $65&1;
  if ($66) {
   $67 = ___cxa_find_matching_catch(0|0)|0;
   $68 = tempRet0;
   ___clang_call_terminate($67);
   // unreachable;
  }
  ;HEAP32[$__sym+0>>2]=HEAP32[$ref$tmp33+0>>2]|0;HEAP32[$__sym+4>>2]=HEAP32[$ref$tmp33+4>>2]|0;HEAP32[$__sym+8>>2]=HEAP32[$ref$tmp33+8>>2]|0;
  ;HEAP32[$ref$tmp33+0>>2]=0|0;HEAP32[$ref$tmp33+4>>2]=0|0;HEAP32[$ref$tmp33+8>>2]=0|0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($ref$tmp33);
  $vtable$i150 = HEAP32[$call$i83>>2]|0;
  $vfn$i151 = (($vtable$i150) + 36|0);
  $69 = HEAP32[$vfn$i151>>2]|0;
  $call$i152 = (FUNCTION_TABLE_ii[$69 & 511]($call$i83)|0);
  $storemerge = $call$i152;
  HEAP32[$__fd>>2] = $storemerge;
  STACKTOP = sp;return;
 }
}
function __ZNSt3__111__money_putIcE8__formatEPcRS2_S3_jPKcS5_RKNS_5ctypeIcEEbRKNS_10money_base7patternEccRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEESL_SL_i($__mb,$__mi,$__me,$__flags,$__db,$__de,$__ct,$__neg,$__pat,$__dp,$__ts,$__grp,$__sym,$__sn,$__fd) {
 $__mb = $__mb|0;
 $__mi = $__mi|0;
 $__me = $__me|0;
 $__flags = $__flags|0;
 $__db = $__db|0;
 $__de = $__de|0;
 $__ct = $__ct|0;
 $__neg = $__neg|0;
 $__pat = $__pat|0;
 $__dp = $__dp|0;
 $__ts = $__ts|0;
 $__grp = $__grp|0;
 $__sym = $__sym|0;
 $__sn = $__sn|0;
 $__fd = $__fd|0;
 var $$lcssa = 0, $$pn = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__d$0$lcssa = 0;
 var $__d$0$lcssa223 = 0, $__d$0198 = 0, $__d$1$lcssa238 = 0, $__d$1$lcssa239 = 0, $__d$1202 = 0, $__d$2 = 0, $__d$3212 = 0, $__data_$i$i$i$i108 = 0, $__data_$i$i$i$i132 = 0, $__data_$i$i$i173 = 0, $__db$addr$0217 = 0, $__db$addr$2 = 0, $__f$0$lcssa236 = 0, $__f$0$lcssa237 = 0, $__f$0203 = 0, $__f$1209 = 0, $__first$addr$08$i$i = 0, $__gl$0215 = 0, $__gl$1 = 0, $__ig$0214 = 0;
 var $__ig$1 = 0, $__ng$0213 = 0, $__ng$1 = 0, $__p$0216 = 0, $__result$addr$0$lcssa$i$i = 0, $__result$addr$0$lcssa$i$i168 = 0, $__result$addr$05$i$i = 0, $__result$addr$05$i$i163 = 0, $__size_$i2$i$i = 0, $__size_$i2$i$i174 = 0, $__size_$i2$i98 = 0, $__tab_$i = 0, $add$ptr$i = 0, $add$ptr$i$i241 = 0, $add$ptr$i183 = 0, $add$ptr$i83 = 0, $add$ptr$i93 = 0, $and = 0, $and$i$i = 0, $and$i$i$i = 0;
 var $and$i$i$i116 = 0, $and$i$i$i143 = 0, $and$i$i96 = 0, $and3$i = 0, $and92 = 0, $arrayidx = 0, $arrayidx$i = 0, $arrayidx$i$i$i$i111 = 0, $arrayidx$i$i$i$i135 = 0, $arrayidx$i$i$i192 = 0, $brmerge = 0, $call$i = 0, $call$i128 = 0, $call$i141 = 0, $cmp$i = 0, $cmp$i$i = 0, $cmp$i124 = 0, $cmp$i151 = 0, $cmp$i153 = 0, $cmp1$i$i = 0;
 var $cmp17$i$i = 0, $cmp18 = 0, $cmp18197 = 0, $cmp24 = 0, $cmp27 = 0, $cmp27199 = 0, $cmp28 = 0, $cmp37 = 0, $cmp37207 = 0, $cmp45 = 0, $cmp57 = 0, $cmp58 = 0, $cmp62 = 0, $cmp68 = 0, $cmp86 = 0, $cond = 0, $cond$i = 0, $cond$i$i = 0, $cond$i$i$i = 0, $cond$i$i$i113 = 0;
 var $cond$i$i$i137 = 0, $cond$i$i$i92 = 0, $cond$i$i123 = 0, $cond$i$i150 = 0, $cond$i$i194234 = 0, $cond$i103 = 0, $cond$i6$i = 0, $cond$i6$i182 = 0, $cond$i7$i = 0, $cond$i7$i181 = 0, $conv = 0, $conv$i = 0, $conv$i$i = 0, $conv$i$i$i = 0, $conv$i$i$i120 = 0, $conv$i$i$i147 = 0, $conv$i$i$i178 = 0, $conv$i$i$i69 = 0, $conv$i$i100 = 0, $conv54 = 0;
 var $conv73 = 0, $dec = 0, $dec41 = 0, $exitcond = 0, $inc = 0, $inc80 = 0, $inc83 = 0, $incdec$ptr = 0, $incdec$ptr$i$i = 0, $incdec$ptr$i$i$i = 0, $incdec$ptr$i$i$i164 = 0, $incdec$ptr$i$i165 = 0, $incdec$ptr$i$i81 = 0, $incdec$ptr15 = 0, $incdec$ptr15$__db$addr$0 = 0, $incdec$ptr2$i$i = 0, $incdec$ptr23 = 0, $incdec$ptr30 = 0, $incdec$ptr31 = 0, $incdec$ptr39 = 0;
 var $incdec$ptr39208 = 0, $incdec$ptr48 = 0, $incdec$ptr5 = 0, $incdec$ptr6$i$i = 0, $incdec$ptr60 = 0, $incdec$ptr78 = 0, $incdec$ptr79 = 0, $incdec$ptr9$i$i = 0, $isascii2$i = 0, $lnot$i$i$i = 0, $lnot$i$i$i166 = 0, $lnot$i4$i$i = 0, $lnot$i4$i$i162 = 0, $or$cond = 0, $scevgep = 0, $scevgep224 = 0, $scevgep226 = 0, $scevgep226227 = 0, $scevgep228 = 0, $shr1$i$i = 0;
 var $shr1$i$i$i = 0, $shr1$i$i$i121 = 0, $shr1$i$i$i148 = 0, $shr1$i$i$i179 = 0, $shr1$i$i$i70 = 0, $shr1$i$i101 = 0, $tobool = 0, $tobool$i$i = 0, $tobool$i$i$i = 0, $tobool$i$i$i117 = 0, $tobool$i$i$i144 = 0, $tobool$i$i97 = 0, $umax = 0, $umax225 = 0, $vfn$i = 0, $vfn$i127 = 0, $vfn$i140 = 0, $vtable$i = 0, $vtable$i126 = 0, $vtable$i139 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$__me>>2] = $__mb;
 $arrayidx$i$i$i$i135 = (($__sn) + 1|0);
 $__data_$i$i$i$i132 = (($__sn) + 8|0);
 $__size_$i2$i$i = (($__sn) + 4|0);
 $and = $__flags & 512;
 $tobool = ($and|0)==(0);
 $arrayidx$i$i$i192 = (($__sym) + 1|0);
 $__data_$i$i$i173 = (($__sym) + 8|0);
 $__size_$i2$i$i174 = (($__sym) + 4|0);
 $cmp24 = ($__fd|0)>(0);
 $arrayidx$i$i$i$i111 = (($__grp) + 1|0);
 $__data_$i$i$i$i108 = (($__grp) + 8|0);
 $__size_$i2$i98 = (($__grp) + 4|0);
 $__tab_$i = (($__ct) + 8|0);
 $0 = (0 - ($__fd))|0;
 $__db$addr$0217 = $__db;$__p$0216 = 0;
 while(1) {
  $arrayidx = (($__pat) + ($__p$0216)|0);
  $1 = HEAP8[$arrayidx>>0]|0;
  $conv = $1 << 24 >> 24;
  switch ($conv|0) {
  case 0:  {
   $2 = HEAP32[$__me>>2]|0;
   HEAP32[$__mi>>2] = $2;
   $__db$addr$2 = $__db$addr$0217;
   break;
  }
  case 2:  {
   $11 = HEAP8[$__sym>>0]|0;
   $and$i$i$i143 = $11 & 1;
   $tobool$i$i$i144 = ($and$i$i$i143<<24>>24)==(0);
   if ($tobool$i$i$i144) {
    $conv$i$i$i147 = $11&255;
    $shr1$i$i$i148 = $conv$i$i$i147 >>> 1;
    $cond$i$i150 = $shr1$i$i$i148;
   } else {
    $12 = HEAP32[$__size_$i2$i$i174>>2]|0;
    $cond$i$i150 = $12;
   }
   $cmp$i151 = ($cond$i$i150|0)==(0);
   $brmerge = $cmp$i151 | $tobool;
   if ($brmerge) {
    $__db$addr$2 = $__db$addr$0217;
   } else {
    if ($tobool$i$i$i144) {
     $conv$i$i$i178 = $11&255;
     $shr1$i$i$i179 = $conv$i$i$i178 >>> 1;
     $cond$i$i194234 = $arrayidx$i$i$i192;$cond$i6$i182 = $shr1$i$i$i179;$cond$i7$i181 = $arrayidx$i$i$i192;
    } else {
     $13 = HEAP32[$__data_$i$i$i173>>2]|0;
     $14 = HEAP32[$__size_$i2$i$i174>>2]|0;
     $cond$i$i194234 = $13;$cond$i6$i182 = $14;$cond$i7$i181 = $13;
    }
    $add$ptr$i183 = (($cond$i7$i181) + ($cond$i6$i182)|0);
    $15 = HEAP32[$__me>>2]|0;
    $lnot$i4$i$i162 = ($cond$i$i194234|0)==($add$ptr$i183|0);
    if ($lnot$i4$i$i162) {
     $__result$addr$0$lcssa$i$i168 = $15;
    } else {
     $17 = $cond$i$i194234;$__result$addr$05$i$i163 = $15;
     while(1) {
      $16 = HEAP8[$17>>0]|0;
      HEAP8[$__result$addr$05$i$i163>>0] = $16;
      $incdec$ptr$i$i$i164 = (($17) + 1|0);
      $incdec$ptr$i$i165 = (($__result$addr$05$i$i163) + 1|0);
      $lnot$i$i$i166 = ($incdec$ptr$i$i$i164|0)==($add$ptr$i183|0);
      if ($lnot$i$i$i166) {
       $__result$addr$0$lcssa$i$i168 = $incdec$ptr$i$i165;
       break;
      } else {
       $17 = $incdec$ptr$i$i$i164;$__result$addr$05$i$i163 = $incdec$ptr$i$i165;
      }
     }
    }
    HEAP32[$__me>>2] = $__result$addr$0$lcssa$i$i168;
    $__db$addr$2 = $__db$addr$0217;
   }
   break;
  }
  case 3:  {
   $6 = HEAP8[$__sn>>0]|0;
   $and$i$i$i = $6 & 1;
   $tobool$i$i$i = ($and$i$i$i<<24>>24)==(0);
   if ($tobool$i$i$i) {
    $conv$i$i$i = $6&255;
    $shr1$i$i$i = $conv$i$i$i >>> 1;
    $cond$i$i = $shr1$i$i$i;
   } else {
    $7 = HEAP32[$__size_$i2$i$i>>2]|0;
    $cond$i$i = $7;
   }
   $cmp$i = ($cond$i$i|0)==(0);
   if ($cmp$i) {
    $__db$addr$2 = $__db$addr$0217;
   } else {
    if ($tobool$i$i$i) {
     $cond$i$i$i137 = $arrayidx$i$i$i$i135;
    } else {
     $8 = HEAP32[$__data_$i$i$i$i132>>2]|0;
     $cond$i$i$i137 = $8;
    }
    $9 = HEAP8[$cond$i$i$i137>>0]|0;
    $10 = HEAP32[$__me>>2]|0;
    $incdec$ptr5 = (($10) + 1|0);
    HEAP32[$__me>>2] = $incdec$ptr5;
    HEAP8[$10>>0] = $9;
    $__db$addr$2 = $__db$addr$0217;
   }
   break;
  }
  case 1:  {
   $3 = HEAP32[$__me>>2]|0;
   HEAP32[$__mi>>2] = $3;
   $vtable$i = HEAP32[$__ct>>2]|0;
   $vfn$i = (($vtable$i) + 28|0);
   $4 = HEAP32[$vfn$i>>2]|0;
   $call$i = (FUNCTION_TABLE_iii[$4 & 511]($__ct,32)|0);
   $5 = HEAP32[$__me>>2]|0;
   $incdec$ptr = (($5) + 1|0);
   HEAP32[$__me>>2] = $incdec$ptr;
   HEAP8[$5>>0] = $call$i;
   $__db$addr$2 = $__db$addr$0217;
   break;
  }
  case 4:  {
   $18 = HEAP32[$__me>>2]|0;
   $incdec$ptr15 = (($__db$addr$0217) + 1|0);
   $incdec$ptr15$__db$addr$0 = $__neg ? $incdec$ptr15 : $__db$addr$0217;
   $cmp18197 = ($incdec$ptr15$__db$addr$0>>>0)<($__de>>>0);
   L30: do {
    if ($cmp18197) {
     $__d$0198 = $incdec$ptr15$__db$addr$0;
     while(1) {
      $19 = HEAP8[$__d$0198>>0]|0;
      $isascii2$i = ($19<<24>>24)>(-1);
      if (!($isascii2$i)) {
       $__d$0$lcssa = $__d$0198;
       break L30;
      }
      $conv$i = $19 << 24 >> 24;
      $20 = HEAP32[$__tab_$i>>2]|0;
      $arrayidx$i = (($20) + ($conv$i<<1)|0);
      $21 = HEAP16[$arrayidx$i>>1]|0;
      $and3$i = $21 & 2048;
      $cmp$i153 = ($and3$i<<16>>16)==(0);
      $incdec$ptr23 = (($__d$0198) + 1|0);
      if ($cmp$i153) {
       $__d$0$lcssa = $__d$0198;
       break L30;
      }
      $cmp18 = ($incdec$ptr23>>>0)<($__de>>>0);
      if ($cmp18) {
       $__d$0198 = $incdec$ptr23;
      } else {
       $__d$0$lcssa = $incdec$ptr23;
       break;
      }
     }
    } else {
     $__d$0$lcssa = $incdec$ptr15$__db$addr$0;
    }
   } while(0);
   $__d$0$lcssa223 = $__d$0$lcssa;
   if ($cmp24) {
    $cmp27199 = ($__d$0$lcssa>>>0)>($incdec$ptr15$__db$addr$0>>>0);
    if ($cmp27199) {
     $22 = (0 - ($__d$0$lcssa223))|0;
     $scevgep = (($incdec$ptr15$__db$addr$0) + ($22)|0);
     $scevgep224 = $scevgep;
     $23 = ($scevgep224>>>0)<($0>>>0);
     $umax = $23 ? $0 : $scevgep224;
     $umax225 = $umax;
     $scevgep226 = (($umax225) + ($__fd)|0);
     $scevgep226227 = $scevgep226;
     $25 = $18;$__d$1202 = $__d$0$lcssa;$__f$0203 = $__fd;
     while(1) {
      $incdec$ptr30 = (($__d$1202) + -1|0);
      $24 = HEAP8[$incdec$ptr30>>0]|0;
      $incdec$ptr31 = (($25) + 1|0);
      HEAP32[$__me>>2] = $incdec$ptr31;
      HEAP8[$25>>0] = $24;
      $dec = (($__f$0203) + -1)|0;
      $cmp27 = ($incdec$ptr30>>>0)>($incdec$ptr15$__db$addr$0>>>0);
      $cmp28 = ($dec|0)>(0);
      $or$cond = $cmp27 & $cmp28;
      if (!($or$cond)) {
       break;
      }
      $$pre = HEAP32[$__me>>2]|0;
      $25 = $$pre;$__d$1202 = $incdec$ptr30;$__f$0203 = $dec;
     }
     $scevgep228 = (($__d$0$lcssa) + ($umax)|0);
     if ($cmp28) {
      $__d$1$lcssa239 = $scevgep228;$__f$0$lcssa237 = $scevgep226227;
      label = 32;
     } else {
      $__d$1$lcssa238 = $scevgep228;$__f$0$lcssa236 = $scevgep226227;$cond = 0;
     }
    } else {
     $__d$1$lcssa239 = $__d$0$lcssa;$__f$0$lcssa237 = $__fd;
     label = 32;
    }
    if ((label|0) == 32) {
     label = 0;
     $vtable$i139 = HEAP32[$__ct>>2]|0;
     $vfn$i140 = (($vtable$i139) + 28|0);
     $26 = HEAP32[$vfn$i140>>2]|0;
     $call$i141 = (FUNCTION_TABLE_iii[$26 & 511]($__ct,48)|0);
     $__d$1$lcssa238 = $__d$1$lcssa239;$__f$0$lcssa236 = $__f$0$lcssa237;$cond = $call$i141;
    }
    $cmp37207 = ($__f$0$lcssa236|0)>(0);
    $27 = HEAP32[$__me>>2]|0;
    $incdec$ptr39208 = (($27) + 1|0);
    HEAP32[$__me>>2] = $incdec$ptr39208;
    if ($cmp37207) {
     $28 = $27;$__f$1209 = $__f$0$lcssa236;
     while(1) {
      HEAP8[$28>>0] = $cond;
      $dec41 = (($__f$1209) + -1)|0;
      $cmp37 = ($dec41|0)>(0);
      $29 = HEAP32[$__me>>2]|0;
      $incdec$ptr39 = (($29) + 1|0);
      HEAP32[$__me>>2] = $incdec$ptr39;
      if ($cmp37) {
       $28 = $29;$__f$1209 = $dec41;
      } else {
       $$lcssa = $29;
       break;
      }
     }
    } else {
     $$lcssa = $27;
    }
    HEAP8[$$lcssa>>0] = $__dp;
    $__d$2 = $__d$1$lcssa238;
   } else {
    $__d$2 = $__d$0$lcssa;
   }
   $cmp45 = ($__d$2|0)==($incdec$ptr15$__db$addr$0|0);
   if ($cmp45) {
    $vtable$i126 = HEAP32[$__ct>>2]|0;
    $vfn$i127 = (($vtable$i126) + 28|0);
    $30 = HEAP32[$vfn$i127>>2]|0;
    $call$i128 = (FUNCTION_TABLE_iii[$30 & 511]($__ct,48)|0);
    $31 = HEAP32[$__me>>2]|0;
    $incdec$ptr48 = (($31) + 1|0);
    HEAP32[$__me>>2] = $incdec$ptr48;
    HEAP8[$31>>0] = $call$i128;
   } else {
    $32 = HEAP8[$__grp>>0]|0;
    $and$i$i$i116 = $32 & 1;
    $tobool$i$i$i117 = ($and$i$i$i116<<24>>24)==(0);
    if ($tobool$i$i$i117) {
     $conv$i$i$i120 = $32&255;
     $shr1$i$i$i121 = $conv$i$i$i120 >>> 1;
     $cond$i$i123 = $shr1$i$i$i121;
    } else {
     $33 = HEAP32[$__size_$i2$i98>>2]|0;
     $cond$i$i123 = $33;
    }
    $cmp$i124 = ($cond$i$i123|0)==(0);
    if ($cmp$i124) {
     $__d$3212 = $__d$2;$__gl$0215 = -1;$__ig$0214 = 0;$__ng$0213 = 0;
    } else {
     if ($tobool$i$i$i117) {
      $cond$i$i$i113 = $arrayidx$i$i$i$i111;
     } else {
      $34 = HEAP32[$__data_$i$i$i$i108>>2]|0;
      $cond$i$i$i113 = $34;
     }
     $35 = HEAP8[$cond$i$i$i113>>0]|0;
     $conv54 = $35 << 24 >> 24;
     $__d$3212 = $__d$2;$__gl$0215 = $conv54;$__ig$0214 = 0;$__ng$0213 = 0;
    }
    while(1) {
     $cmp58 = ($__ng$0213|0)==($__gl$0215|0);
     if ($cmp58) {
      $36 = HEAP32[$__me>>2]|0;
      $incdec$ptr60 = (($36) + 1|0);
      HEAP32[$__me>>2] = $incdec$ptr60;
      HEAP8[$36>>0] = $__ts;
      $inc = (($__ig$0214) + 1)|0;
      $37 = HEAP8[$__grp>>0]|0;
      $and$i$i96 = $37 & 1;
      $tobool$i$i97 = ($and$i$i96<<24>>24)==(0);
      if ($tobool$i$i97) {
       $conv$i$i100 = $37&255;
       $shr1$i$i101 = $conv$i$i100 >>> 1;
       $cond$i103 = $shr1$i$i101;
      } else {
       $38 = HEAP32[$__size_$i2$i98>>2]|0;
       $cond$i103 = $38;
      }
      $cmp62 = ($inc>>>0)<($cond$i103>>>0);
      if ($cmp62) {
       if ($tobool$i$i97) {
        $cond$i$i$i92 = $arrayidx$i$i$i$i111;
       } else {
        $39 = HEAP32[$__data_$i$i$i$i108>>2]|0;
        $cond$i$i$i92 = $39;
       }
       $add$ptr$i93 = (($cond$i$i$i92) + ($inc)|0);
       $40 = HEAP8[$add$ptr$i93>>0]|0;
       $cmp68 = ($40<<24>>24)==(127);
       if ($cmp68) {
        $__gl$1 = -1;$__ig$1 = $inc;$__ng$1 = 0;
       } else {
        if ($tobool$i$i97) {
         $cond$i$i$i = $arrayidx$i$i$i$i111;
        } else {
         $41 = HEAP32[$__data_$i$i$i$i108>>2]|0;
         $cond$i$i$i = $41;
        }
        $add$ptr$i83 = (($cond$i$i$i) + ($inc)|0);
        $42 = HEAP8[$add$ptr$i83>>0]|0;
        $conv73 = $42 << 24 >> 24;
        $__gl$1 = $conv73;$__ig$1 = $inc;$__ng$1 = 0;
       }
      } else {
       $__gl$1 = $__gl$0215;$__ig$1 = $inc;$__ng$1 = 0;
      }
     } else {
      $__gl$1 = $__gl$0215;$__ig$1 = $__ig$0214;$__ng$1 = $__ng$0213;
     }
     $incdec$ptr78 = (($__d$3212) + -1|0);
     $43 = HEAP8[$incdec$ptr78>>0]|0;
     $44 = HEAP32[$__me>>2]|0;
     $incdec$ptr79 = (($44) + 1|0);
     HEAP32[$__me>>2] = $incdec$ptr79;
     HEAP8[$44>>0] = $43;
     $inc80 = (($__ng$1) + 1)|0;
     $cmp57 = ($incdec$ptr78|0)==($incdec$ptr15$__db$addr$0|0);
     if ($cmp57) {
      break;
     } else {
      $__d$3212 = $incdec$ptr78;$__gl$0215 = $__gl$1;$__ig$0214 = $__ig$1;$__ng$0213 = $inc80;
     }
    }
   }
   $45 = HEAP32[$__me>>2]|0;
   $cmp$i$i = ($18|0)==($45|0);
   if ($cmp$i$i) {
    $__db$addr$2 = $incdec$ptr15$__db$addr$0;
   } else {
    $incdec$ptr6$i$i = (($45) + -1|0);
    $cmp17$i$i = ($incdec$ptr6$i$i>>>0)>($18>>>0);
    if ($cmp17$i$i) {
     $__first$addr$08$i$i = $18;$incdec$ptr9$i$i = $incdec$ptr6$i$i;
     while(1) {
      $46 = HEAP8[$__first$addr$08$i$i>>0]|0;
      $47 = HEAP8[$incdec$ptr9$i$i>>0]|0;
      HEAP8[$__first$addr$08$i$i>>0] = $47;
      HEAP8[$incdec$ptr9$i$i>>0] = $46;
      $incdec$ptr2$i$i = (($__first$addr$08$i$i) + 1|0);
      $incdec$ptr$i$i81 = (($incdec$ptr9$i$i) + -1|0);
      $cmp1$i$i = ($incdec$ptr2$i$i>>>0)<($incdec$ptr$i$i81>>>0);
      if ($cmp1$i$i) {
       $__first$addr$08$i$i = $incdec$ptr2$i$i;$incdec$ptr9$i$i = $incdec$ptr$i$i81;
      } else {
       $__db$addr$2 = $incdec$ptr15$__db$addr$0;
       break;
      }
     }
    } else {
     $__db$addr$2 = $incdec$ptr15$__db$addr$0;
    }
   }
   break;
  }
  default: {
   $__db$addr$2 = $__db$addr$0217;
  }
  }
  $inc83 = (($__p$0216) + 1)|0;
  $exitcond = ($inc83|0)==(4);
  if ($exitcond) {
   break;
  } else {
   $__db$addr$0217 = $__db$addr$2;$__p$0216 = $inc83;
  }
 }
 $48 = HEAP8[$__sn>>0]|0;
 $and$i$i = $48 & 1;
 $tobool$i$i = ($and$i$i<<24>>24)==(0);
 if ($tobool$i$i) {
  $conv$i$i = $48&255;
  $shr1$i$i = $conv$i$i >>> 1;
  $cond$i = $shr1$i$i;
 } else {
  $49 = HEAP32[$__size_$i2$i$i>>2]|0;
  $cond$i = $49;
 }
 $cmp86 = ($cond$i>>>0)>(1);
 if ($cmp86) {
  if ($tobool$i$i) {
   $conv$i$i$i69 = $48&255;
   $shr1$i$i$i70 = $conv$i$i$i69 >>> 1;
   $$pn = $arrayidx$i$i$i$i135;$cond$i6$i = $shr1$i$i$i70;$cond$i7$i = $arrayidx$i$i$i$i135;
  } else {
   $50 = HEAP32[$__data_$i$i$i$i132>>2]|0;
   $51 = HEAP32[$__size_$i2$i$i>>2]|0;
   $$pn = $50;$cond$i6$i = $51;$cond$i7$i = $50;
  }
  $add$ptr$i$i241 = (($$pn) + 1|0);
  $add$ptr$i = (($cond$i7$i) + ($cond$i6$i)|0);
  $52 = HEAP32[$__me>>2]|0;
  $lnot$i4$i$i = ($add$ptr$i$i241|0)==($add$ptr$i|0);
  if ($lnot$i4$i$i) {
   $__result$addr$0$lcssa$i$i = $52;
  } else {
   $54 = $add$ptr$i$i241;$__result$addr$05$i$i = $52;
   while(1) {
    $53 = HEAP8[$54>>0]|0;
    HEAP8[$__result$addr$05$i$i>>0] = $53;
    $incdec$ptr$i$i$i = (($54) + 1|0);
    $incdec$ptr$i$i = (($__result$addr$05$i$i) + 1|0);
    $lnot$i$i$i = ($incdec$ptr$i$i$i|0)==($add$ptr$i|0);
    if ($lnot$i$i$i) {
     $__result$addr$0$lcssa$i$i = $incdec$ptr$i$i;
     break;
    } else {
     $54 = $incdec$ptr$i$i$i;$__result$addr$05$i$i = $incdec$ptr$i$i;
    }
   }
  }
  HEAP32[$__me>>2] = $__result$addr$0$lcssa$i$i;
 }
 $and92 = $__flags & 176;
 if ((($and92|0) == 32)) {
  $55 = HEAP32[$__me>>2]|0;
  HEAP32[$__mi>>2] = $55;
  STACKTOP = sp;return;
 } else if ((($and92|0) == 16)) {
  STACKTOP = sp;return;
 } else {
  HEAP32[$__mi>>2] = $__mb;
  STACKTOP = sp;return;
 }
}
function __ZNKSt3__19money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_bRNS_8ios_baseEcRKNS_12basic_stringIcS3_NS_9allocatorIcEEEE($agg$result,$this,$__s,$__intl,$__iob,$__fl,$__digits) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__s = $__s|0;
 $__intl = $__intl|0;
 $__iob = $__iob|0;
 $__fl = $__fl|0;
 $__digits = $__digits|0;
 var $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__data_$i$i$i$i = 0, $__data_$i$i$i47 = 0, $__dp = 0, $__fd = 0, $__fmtflags_$i = 0, $__grp = 0, $__loc = 0, $__mb$0 = 0, $__mbuf = 0, $__me = 0;
 var $__mi = 0, $__pat = 0, $__size_$i2$i = 0, $__size_$i2$i104 = 0, $__size_$i2$i26 = 0, $__size_$i2$i36 = 0, $__size_$i2$i63 = 0, $__size_$i2$i73 = 0, $__size_$i2$i84 = 0, $__size_$i2$i94 = 0, $__sn = 0, $__sym = 0, $__ts = 0, $add$ptr = 0, $add119 = 0, $add18 = 0, $add19 = 0, $add19$pn = 0, $add23 = 0, $add24 = 0;
 var $agg$tmp = 0, $agg$tmp$byval_copy = 0, $and$i$i = 0, $and$i$i$i45 = 0, $and$i$i102 = 0, $and$i$i24 = 0, $and$i$i71 = 0, $and$i$i82 = 0, $and$i$i92 = 0, $arrayidx$i$i$i$i = 0, $arrayidx$i$i$i50 = 0, $call$i14 = 0, $call$i1718 = 0, $call30 = 0, $call30116 = 0, $cmp = 0, $cmp14 = 0, $cmp26 = 0, $cmp32 = 0, $cmp8 = 0;
 var $cond = 0, $cond$i = 0, $cond$i$i$i = 0, $cond$i$i124 = 0, $cond$i109 = 0, $cond$i31 = 0, $cond$i41 = 0, $cond$i68 = 0, $cond$i78 = 0, $cond$i89 = 0, $cond$i99 = 0, $conv$i$i = 0, $conv$i$i106 = 0, $conv$i$i28 = 0, $conv$i$i38 = 0, $conv$i$i65 = 0, $conv$i$i75 = 0, $conv$i$i86 = 0, $conv$i$i96 = 0, $ehselector$slot$0 = 0;
 var $ehselector$slot$1 = 0, $exn$slot$0 = 0, $exn$slot$1 = 0, $mul = 0, $shr1$i$i = 0, $shr1$i$i107 = 0, $shr1$i$i29 = 0, $shr1$i$i39 = 0, $shr1$i$i66 = 0, $shr1$i$i76 = 0, $shr1$i$i87 = 0, $shr1$i$i97 = 0, $sub = 0, $tobool$i$i = 0, $tobool$i$i$i46 = 0, $tobool$i$i103 = 0, $tobool$i$i25 = 0, $tobool$i$i72 = 0, $tobool$i$i83 = 0, $tobool$i$i93 = 0;
 var $vfn$i = 0, $vtable$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 176|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $agg$tmp$byval_copy = sp + 20|0;
 $__loc = sp + 24|0;
 $__pat = sp + 12|0;
 $__dp = sp + 64|0;
 $__ts = sp + 65|0;
 $__grp = sp;
 $__sym = sp + 52|0;
 $__sn = sp + 32|0;
 $__fd = sp + 28|0;
 $__mbuf = sp + 68|0;
 $__mi = sp + 44|0;
 $__me = sp + 48|0;
 $agg$tmp = sp + 16|0;
 __ZNKSt3__18ios_base6getlocEv($__loc,$__iob);
 __THREW__ = 0;
 $call$i14 = (invoke_iii(359,($__loc|0),(4616|0))|0);
 $0 = __THREW__; __THREW__ = 0;
 $1 = $0&1;
 do {
  if (!($1)) {
   $2 = HEAP8[$__digits>>0]|0;
   $and$i$i = $2 & 1;
   $tobool$i$i = ($and$i$i<<24>>24)==(0);
   if ($tobool$i$i) {
    $conv$i$i = $2&255;
    $shr1$i$i = $conv$i$i >>> 1;
    $cond$i = $shr1$i$i;
   } else {
    $__size_$i2$i = (($__digits) + 4|0);
    $3 = HEAP32[$__size_$i2$i>>2]|0;
    $cond$i = $3;
   }
   $cmp = ($cond$i|0)==(0);
   if ($cmp) {
    $9 = 0;
   } else {
    if ($tobool$i$i) {
     $arrayidx$i$i$i$i = (($__digits) + 1|0);
     $cond$i$i$i = $arrayidx$i$i$i$i;
    } else {
     $__data_$i$i$i$i = (($__digits) + 8|0);
     $4 = HEAP32[$__data_$i$i$i$i>>2]|0;
     $cond$i$i$i = $4;
    }
    $5 = HEAP8[$cond$i$i$i>>0]|0;
    $vtable$i = HEAP32[$call$i14>>2]|0;
    $vfn$i = (($vtable$i) + 28|0);
    $6 = HEAP32[$vfn$i>>2]|0;
    __THREW__ = 0;
    $call$i1718 = (invoke_iii($6|0,($call$i14|0),45)|0);
    $7 = __THREW__; __THREW__ = 0;
    $8 = $7&1;
    if ($8) {
     break;
    }
    $cmp8 = ($5<<24>>24)==($call$i1718<<24>>24);
    $9 = $cmp8;
   }
   HEAP32[$__pat>>2] = 0;
   ;HEAP32[$__grp+0>>2]=0|0;HEAP32[$__grp+4>>2]=0|0;HEAP32[$__grp+8>>2]=0|0;
   ;HEAP32[$__sym+0>>2]=0|0;HEAP32[$__sym+4>>2]=0|0;HEAP32[$__sym+8>>2]=0|0;
   ;HEAP32[$__sn+0>>2]=0|0;HEAP32[$__sn+4>>2]=0|0;HEAP32[$__sn+8>>2]=0|0;
   __THREW__ = 0;
   invoke_viiiiiiiiii(427,($__intl|0),($9|0),($__loc|0),($__pat|0),($__dp|0),($__ts|0),($__grp|0),($__sym|0),($__sn|0),($__fd|0));
   $10 = __THREW__; __THREW__ = 0;
   $11 = $10&1;
   L15: do {
    if ($11) {
     $30 = ___cxa_find_matching_catch()|0;
     $31 = tempRet0;
     $ehselector$slot$0 = $31;$exn$slot$0 = $30;
    } else {
     $12 = HEAP8[$__digits>>0]|0;
     $and$i$i24 = $12 & 1;
     $tobool$i$i25 = ($and$i$i24<<24>>24)==(0);
     if ($tobool$i$i25) {
      $conv$i$i28 = $12&255;
      $shr1$i$i29 = $conv$i$i28 >>> 1;
      $cond$i31 = $shr1$i$i29;
     } else {
      $__size_$i2$i26 = (($__digits) + 4|0);
      $13 = HEAP32[$__size_$i2$i26>>2]|0;
      $cond$i31 = $13;
     }
     $14 = HEAP32[$__fd>>2]|0;
     $cmp14 = ($cond$i31|0)>($14|0);
     if ($cmp14) {
      if ($tobool$i$i25) {
       $conv$i$i65 = $12&255;
       $shr1$i$i66 = $conv$i$i65 >>> 1;
       $cond$i68 = $shr1$i$i66;
      } else {
       $__size_$i2$i63 = (($__digits) + 4|0);
       $15 = HEAP32[$__size_$i2$i63>>2]|0;
       $cond$i68 = $15;
      }
      $sub = (($cond$i68) - ($14))|0;
      $mul = $sub << 1;
      $16 = HEAP8[$__sn>>0]|0;
      $and$i$i71 = $16 & 1;
      $tobool$i$i72 = ($and$i$i71<<24>>24)==(0);
      if ($tobool$i$i72) {
       $conv$i$i75 = $16&255;
       $shr1$i$i76 = $conv$i$i75 >>> 1;
       $cond$i78 = $shr1$i$i76;
      } else {
       $__size_$i2$i73 = (($__sn) + 4|0);
       $17 = HEAP32[$__size_$i2$i73>>2]|0;
       $cond$i78 = $17;
      }
      $18 = HEAP8[$__sym>>0]|0;
      $and$i$i82 = $18 & 1;
      $tobool$i$i83 = ($and$i$i82<<24>>24)==(0);
      if ($tobool$i$i83) {
       $conv$i$i86 = $18&255;
       $shr1$i$i87 = $conv$i$i86 >>> 1;
       $cond$i89 = $shr1$i$i87;
      } else {
       $__size_$i2$i84 = (($__sym) + 4|0);
       $19 = HEAP32[$__size_$i2$i84>>2]|0;
       $cond$i89 = $19;
      }
      $add119 = $mul | 1;
      $add18 = (($cond$i78) + ($add119))|0;
      $add19 = (($add18) + ($cond$i89))|0;
      $add19$pn = $add19;
     } else {
      $20 = HEAP8[$__sn>>0]|0;
      $and$i$i92 = $20 & 1;
      $tobool$i$i93 = ($and$i$i92<<24>>24)==(0);
      if ($tobool$i$i93) {
       $conv$i$i96 = $20&255;
       $shr1$i$i97 = $conv$i$i96 >>> 1;
       $cond$i99 = $shr1$i$i97;
      } else {
       $__size_$i2$i94 = (($__sn) + 4|0);
       $21 = HEAP32[$__size_$i2$i94>>2]|0;
       $cond$i99 = $21;
      }
      $22 = HEAP8[$__sym>>0]|0;
      $and$i$i102 = $22 & 1;
      $tobool$i$i103 = ($and$i$i102<<24>>24)==(0);
      if ($tobool$i$i103) {
       $conv$i$i106 = $22&255;
       $shr1$i$i107 = $conv$i$i106 >>> 1;
       $cond$i109 = $shr1$i$i107;
      } else {
       $__size_$i2$i104 = (($__sym) + 4|0);
       $23 = HEAP32[$__size_$i2$i104>>2]|0;
       $cond$i109 = $23;
      }
      $add23 = (($cond$i99) + 2)|0;
      $add24 = (($add23) + ($cond$i109))|0;
      $add19$pn = $add24;
     }
     $cond = (($add19$pn) + ($14))|0;
     $cmp26 = ($cond>>>0)>(100);
     do {
      if ($cmp26) {
       $call30 = (_malloc($cond)|0);
       $cmp32 = ($call30|0)==(0|0);
       if ($cmp32) {
        __THREW__ = 0;
        invoke_v(383);
        $24 = __THREW__; __THREW__ = 0;
        $25 = $24&1;
        if ($25) {
         $26 = ___cxa_find_matching_catch()|0;
         $27 = tempRet0;
         $ehselector$slot$0 = $27;$exn$slot$0 = $26;
         break L15;
        } else {
         $$pre = HEAP8[$__digits>>0]|0;
         $35 = $$pre;$__mb$0 = 0;$call30116 = 0;
         break;
        }
       } else {
        $35 = $12;$__mb$0 = $call30;$call30116 = $call30;
       }
      } else {
       $35 = $12;$__mb$0 = $__mbuf;$call30116 = 0;
      }
     } while(0);
     $__fmtflags_$i = (($__iob) + 4|0);
     $34 = HEAP32[$__fmtflags_$i>>2]|0;
     $and$i$i$i45 = $35 & 1;
     $tobool$i$i$i46 = ($and$i$i$i45<<24>>24)==(0);
     if ($tobool$i$i$i46) {
      $arrayidx$i$i$i50 = (($__digits) + 1|0);
      $conv$i$i38 = $35&255;
      $shr1$i$i39 = $conv$i$i38 >>> 1;
      $cond$i$i124 = $arrayidx$i$i$i50;$cond$i41 = $shr1$i$i39;
     } else {
      $__data_$i$i$i47 = (($__digits) + 8|0);
      $36 = HEAP32[$__data_$i$i$i47>>2]|0;
      $__size_$i2$i36 = (($__digits) + 4|0);
      $37 = HEAP32[$__size_$i2$i36>>2]|0;
      $cond$i$i124 = $36;$cond$i41 = $37;
     }
     $add$ptr = (($cond$i$i124) + ($cond$i41)|0);
     $38 = HEAP8[$__dp>>0]|0;
     $39 = HEAP8[$__ts>>0]|0;
     __THREW__ = 0;
     invoke_viiiiiiiiiiiiiii(428,($__mb$0|0),($__mi|0),($__me|0),($34|0),($cond$i$i124|0),($add$ptr|0),($call$i14|0),($9|0),($__pat|0),($38|0),($39|0),($__grp|0),($__sym|0),($__sn|0),($14|0));
     $40 = __THREW__; __THREW__ = 0;
     $41 = $40&1;
     if (!($41)) {
      $42 = HEAP32[$__s>>2]|0;
      HEAP32[$agg$tmp>>2] = $42;
      $43 = HEAP32[$__mi>>2]|0;
      $44 = HEAP32[$__me>>2]|0;
      __THREW__ = 0;
      ;HEAP32[$agg$tmp$byval_copy+0>>2]=HEAP32[$agg$tmp+0>>2]|0;
      invoke_viiiiiii(360,($agg$result|0),($agg$tmp$byval_copy|0),($__mb$0|0),($43|0),($44|0),($__iob|0),($__fl|0));
      $45 = __THREW__; __THREW__ = 0;
      $46 = $45&1;
      if (!($46)) {
       _free($call30116);
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__sn);
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__sym);
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grp);
       $47 = HEAP32[$__loc>>2]|0;
       (__ZNSt3__114__shared_count16__release_sharedEv($47)|0);
       STACKTOP = sp;return;
      }
     }
     $32 = ___cxa_find_matching_catch()|0;
     $33 = tempRet0;
     _free($call30116);
     $ehselector$slot$0 = $33;$exn$slot$0 = $32;
    }
   } while(0);
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__sn);
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__sym);
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grp);
   $ehselector$slot$1 = $ehselector$slot$0;$exn$slot$1 = $exn$slot$0;
   $48 = HEAP32[$__loc>>2]|0;
   (__ZNSt3__114__shared_count16__release_sharedEv($48)|0);
   ___resumeException($exn$slot$1|0);
   // unreachable;
  }
 } while(0);
 $28 = ___cxa_find_matching_catch()|0;
 $29 = tempRet0;
 $ehselector$slot$1 = $29;$exn$slot$1 = $28;
 $48 = HEAP32[$__loc>>2]|0;
 (__ZNSt3__114__shared_count16__release_sharedEv($48)|0);
 ___resumeException($exn$slot$1|0);
 // unreachable;
}
function __ZNSt3__19money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 STACKTOP = sp;return;
}
function __ZNSt3__19money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED1Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return;
}
function __ZNKSt3__19money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_bRNS_8ios_baseEwe($agg$result,$this,$__s,$__intl,$__iob,$__fl,$__units) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__s = $__s|0;
 $__intl = $__intl|0;
 $__iob = $__iob|0;
 $__fl = $__fl|0;
 $__units = +$__units;
 var $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $7 = 0, $8 = 0, $9 = 0, $__bb = 0, $__buf = 0, $__db$0 = 0, $__digits = 0, $__dp = 0, $__fd = 0, $__fmtflags_$i = 0, $__grp = 0, $__loc = 0, $__mb$0 = 0, $__mbuf = 0, $__me = 0, $__mi = 0, $__n$0 = 0, $__pat = 0, $__size_$i2$i = 0;
 var $__size_$i2$i47 = 0, $__size_$i2$i63 = 0, $__size_$i2$i73 = 0, $__sn = 0, $__sym = 0, $__ts = 0, $add$ptr = 0, $add$ptr58 = 0, $add122 = 0, $add36 = 0, $add37 = 0, $add37$pn = 0, $add41 = 0, $add42 = 0, $agg$tmp = 0, $agg$tmp$byval_copy = 0, $and$i$i = 0, $and$i$i45 = 0, $and$i$i61 = 0, $and$i$i71 = 0;
 var $call = 0, $call$i27 = 0, $call11 = 0, $call4 = 0, $call49 = 0, $call6 = 0, $cmp = 0, $cmp24 = 0, $cmp25 = 0, $cmp32 = 0, $cmp44 = 0, $cmp51 = 0, $cmp7 = 0, $cond = 0, $cond$i = 0, $cond$i52 = 0, $cond$i68 = 0, $cond$i78 = 0, $conv$i$i = 0, $conv$i$i49 = 0;
 var $conv$i$i65 = 0, $conv$i$i75 = 0, $ehselector$slot$0 = 0, $ehselector$slot$1 = 0, $ehselector$slot$2 = 0, $exn$slot$0 = 0, $exn$slot$1 = 0, $exn$slot$2 = 0, $lnot$i = 0, $mul = 0, $mul33 = 0, $mul46 = 0, $shr1$i$i = 0, $shr1$i$i50 = 0, $shr1$i$i66 = 0, $shr1$i$i76 = 0, $sub = 0, $tobool$i$i = 0, $tobool$i$i$i30 = 0, $tobool$i$i$i55 = 0;
 var $tobool$i$i$i90 = 0, $tobool$i$i$i96 = 0, $tobool$i$i46 = 0, $tobool$i$i62 = 0, $tobool$i$i72 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vfn$i = 0, $vtable$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1008|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $agg$tmp$byval_copy = sp + 444|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $__buf = sp + 896|0;
 $__bb = sp + 20|0;
 $__digits = sp + 32|0;
 $__loc = sp + 24|0;
 $__pat = sp + 436|0;
 $__dp = sp + 888|0;
 $__ts = sp + 892|0;
 $__grp = sp + 448|0;
 $__sym = sp + 460|0;
 $__sn = sp + 472|0;
 $__fd = sp + 484|0;
 $__mbuf = sp + 488|0;
 $__mi = sp + 16|0;
 $__me = sp + 432|0;
 $agg$tmp = sp + 440|0;
 HEAP32[$__bb>>2] = $__buf;
 HEAPF64[tempDoublePtr>>3]=$__units;HEAP32[$vararg_buffer>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_buffer+4>>2]=HEAP32[tempDoublePtr+4>>2];
 $call = (_snprintf($__buf,100,4368,$vararg_buffer)|0);
 $cmp = ($call>>>0)>(99);
 do {
  if ($cmp) {
   __THREW__ = 0;
   $call4 = (invoke_i(395)|0);
   $0 = __THREW__; __THREW__ = 0;
   $1 = $0&1;
   if ($1) {
    $60 = 0;$61 = 0;
    label = 7;
   } else {
    __THREW__ = 0;
    HEAPF64[tempDoublePtr>>3]=$__units;HEAP32[$vararg_buffer1>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_buffer1+4>>2]=HEAP32[tempDoublePtr+4>>2];
    $call6 = (invoke_iiiii(401,($__bb|0),($call4|0),(4368|0),($vararg_buffer1|0))|0);
    $2 = __THREW__; __THREW__ = 0;
    $3 = $2&1;
    if ($3) {
     $60 = 0;$61 = 0;
     label = 7;
    } else {
     $4 = HEAP32[$__bb>>2]|0;
     $cmp7 = ($4|0)==(0|0);
     if ($cmp7) {
      __THREW__ = 0;
      invoke_v(383);
      $5 = __THREW__; __THREW__ = 0;
      $6 = $5&1;
      if ($6) {
       $60 = 0;$61 = 0;
       label = 7;
       break;
      }
      $$pre = HEAP32[$__bb>>2]|0;
      $62 = $$pre;
     } else {
      $62 = $4;
     }
     $mul = $call6 << 2;
     $call11 = (_malloc($mul)|0);
     $lnot$i = ($call11|0)==(0|0);
     if ($lnot$i) {
      __THREW__ = 0;
      invoke_v(383);
      $9 = __THREW__; __THREW__ = 0;
      $10 = $9&1;
      if ($10) {
       $60 = $62;$61 = 0;
       label = 7;
      } else {
       $55 = 0;$56 = $62;$__db$0 = 0;$__n$0 = $call6;
       label = 10;
      }
     } else {
      $55 = $call11;$56 = $62;$__db$0 = $call11;$__n$0 = $call6;
      label = 10;
     }
    }
   }
  } else {
   $55 = 0;$56 = 0;$__db$0 = $__digits;$__n$0 = $call;
   label = 10;
  }
 } while(0);
 if ((label|0) == 10) {
  __THREW__ = 0;
  invoke_vii(358,($__loc|0),($__iob|0));
  $11 = __THREW__; __THREW__ = 0;
  $12 = $11&1;
  if ($12) {
   $60 = $56;$61 = $55;
   label = 7;
  } else {
   __THREW__ = 0;
   $call$i27 = (invoke_iii(359,($__loc|0),(4608|0))|0);
   $13 = __THREW__; __THREW__ = 0;
   $14 = $13&1;
   if ($14) {
    label = 35;
   } else {
    $15 = HEAP32[$__bb>>2]|0;
    $add$ptr = (($15) + ($__n$0)|0);
    $vtable$i = HEAP32[$call$i27>>2]|0;
    $vfn$i = (($vtable$i) + 48|0);
    $16 = HEAP32[$vfn$i>>2]|0;
    __THREW__ = 0;
    (invoke_iiiii($16|0,($call$i27|0),($15|0),($add$ptr|0),($__db$0|0))|0);
    $17 = __THREW__; __THREW__ = 0;
    $18 = $17&1;
    if ($18) {
     label = 35;
    } else {
     $cmp24 = ($__n$0|0)==(0);
     if ($cmp24) {
      $21 = 0;
     } else {
      $19 = HEAP32[$__bb>>2]|0;
      $20 = HEAP8[$19>>0]|0;
      $cmp25 = ($20<<24>>24)==(45);
      $21 = $cmp25;
     }
     HEAP32[$__pat>>2] = 0;
     ;HEAP32[$__grp+0>>2]=0|0;HEAP32[$__grp+4>>2]=0|0;HEAP32[$__grp+8>>2]=0|0;
     ;HEAP32[$__sym+0>>2]=0|0;HEAP32[$__sym+4>>2]=0|0;HEAP32[$__sym+8>>2]=0|0;
     ;HEAP32[$__sn+0>>2]=0|0;HEAP32[$__sn+4>>2]=0|0;HEAP32[$__sn+8>>2]=0|0;
     __THREW__ = 0;
     invoke_viiiiiiiiii(429,($__intl|0),($21|0),($__loc|0),($__pat|0),($__dp|0),($__ts|0),($__grp|0),($__sym|0),($__sn|0),($__fd|0));
     $22 = __THREW__; __THREW__ = 0;
     $23 = $22&1;
     do {
      if ($23) {
       $39 = ___cxa_find_matching_catch()|0;
       $40 = tempRet0;
       $ehselector$slot$0 = $40;$exn$slot$0 = $39;
      } else {
       $24 = HEAP32[$__fd>>2]|0;
       $cmp32 = ($__n$0|0)>($24|0);
       if ($cmp32) {
        $sub = (($__n$0) - ($24))|0;
        $mul33 = $sub << 1;
        $25 = HEAP8[$__sn>>0]|0;
        $and$i$i = $25 & 1;
        $tobool$i$i = ($and$i$i<<24>>24)==(0);
        if ($tobool$i$i) {
         $conv$i$i = $25&255;
         $shr1$i$i = $conv$i$i >>> 1;
         $cond$i = $shr1$i$i;
        } else {
         $__size_$i2$i = (($__sn) + 4|0);
         $26 = HEAP32[$__size_$i2$i>>2]|0;
         $cond$i = $26;
        }
        $27 = HEAP8[$__sym>>0]|0;
        $and$i$i45 = $27 & 1;
        $tobool$i$i46 = ($and$i$i45<<24>>24)==(0);
        if ($tobool$i$i46) {
         $conv$i$i49 = $27&255;
         $shr1$i$i50 = $conv$i$i49 >>> 1;
         $cond$i52 = $shr1$i$i50;
        } else {
         $__size_$i2$i47 = (($__sym) + 4|0);
         $28 = HEAP32[$__size_$i2$i47>>2]|0;
         $cond$i52 = $28;
        }
        $add122 = $mul33 | 1;
        $add36 = (($cond$i) + ($add122))|0;
        $add37 = (($add36) + ($cond$i52))|0;
        $add37$pn = $add37;
       } else {
        $29 = HEAP8[$__sn>>0]|0;
        $and$i$i61 = $29 & 1;
        $tobool$i$i62 = ($and$i$i61<<24>>24)==(0);
        if ($tobool$i$i62) {
         $conv$i$i65 = $29&255;
         $shr1$i$i66 = $conv$i$i65 >>> 1;
         $cond$i68 = $shr1$i$i66;
        } else {
         $__size_$i2$i63 = (($__sn) + 4|0);
         $30 = HEAP32[$__size_$i2$i63>>2]|0;
         $cond$i68 = $30;
        }
        $31 = HEAP8[$__sym>>0]|0;
        $and$i$i71 = $31 & 1;
        $tobool$i$i72 = ($and$i$i71<<24>>24)==(0);
        if ($tobool$i$i72) {
         $conv$i$i75 = $31&255;
         $shr1$i$i76 = $conv$i$i75 >>> 1;
         $cond$i78 = $shr1$i$i76;
        } else {
         $__size_$i2$i73 = (($__sym) + 4|0);
         $32 = HEAP32[$__size_$i2$i73>>2]|0;
         $cond$i78 = $32;
        }
        $add41 = (($cond$i68) + 2)|0;
        $add42 = (($add41) + ($cond$i78))|0;
        $add37$pn = $add42;
       }
       $cond = (($add37$pn) + ($24))|0;
       $cmp44 = ($cond>>>0)>(100);
       if ($cmp44) {
        $mul46 = $cond << 2;
        $call49 = (_malloc($mul46)|0);
        $cmp51 = ($call49|0)==(0|0);
        if ($cmp51) {
         __THREW__ = 0;
         invoke_v(383);
         $33 = __THREW__; __THREW__ = 0;
         $34 = $33&1;
         if ($34) {
          $35 = ___cxa_find_matching_catch()|0;
          $36 = tempRet0;
          $ehselector$slot$0 = $36;$exn$slot$0 = $35;
          break;
         } else {
          $43 = 0;$__mb$0 = 0;
         }
        } else {
         $43 = $call49;$__mb$0 = $call49;
        }
       } else {
        $43 = 0;$__mb$0 = $__mbuf;
       }
       $__fmtflags_$i = (($__iob) + 4|0);
       $44 = HEAP32[$__fmtflags_$i>>2]|0;
       $add$ptr58 = (($__db$0) + ($__n$0<<2)|0);
       $45 = HEAP32[$__dp>>2]|0;
       $46 = HEAP32[$__ts>>2]|0;
       __THREW__ = 0;
       invoke_viiiiiiiiiiiiiii(430,($__mb$0|0),($__mi|0),($__me|0),($44|0),($__db$0|0),($add$ptr58|0),($call$i27|0),($21|0),($__pat|0),($45|0),($46|0),($__grp|0),($__sym|0),($__sn|0),($24|0));
       $47 = __THREW__; __THREW__ = 0;
       $48 = $47&1;
       if (!($48)) {
        $49 = HEAP32[$__s>>2]|0;
        HEAP32[$agg$tmp>>2] = $49;
        $50 = HEAP32[$__mi>>2]|0;
        $51 = HEAP32[$__me>>2]|0;
        __THREW__ = 0;
        ;HEAP32[$agg$tmp$byval_copy+0>>2]=HEAP32[$agg$tmp+0>>2]|0;
        invoke_viiiiiii(408,($agg$result|0),($agg$tmp$byval_copy|0),($__mb$0|0),($50|0),($51|0),($__iob|0),($__fl|0));
        $52 = __THREW__; __THREW__ = 0;
        $53 = $52&1;
        if (!($53)) {
         $tobool$i$i$i96 = ($43|0)==(0|0);
         if (!($tobool$i$i$i96)) {
          _free($43);
         }
         __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($__sn);
         __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($__sym);
         __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grp);
         $54 = HEAP32[$__loc>>2]|0;
         (__ZNSt3__114__shared_count16__release_sharedEv($54)|0);
         $tobool$i$i$i55 = ($55|0)==(0|0);
         if ($tobool$i$i$i55) {
          _free($56);
          STACKTOP = sp;return;
         }
         _free($55);
         _free($56);
         STACKTOP = sp;return;
        }
       }
       $41 = ___cxa_find_matching_catch()|0;
       $42 = tempRet0;
       $tobool$i$i$i90 = ($43|0)==(0|0);
       if ($tobool$i$i$i90) {
        $ehselector$slot$0 = $42;$exn$slot$0 = $41;
       } else {
        _free($43);
        $ehselector$slot$0 = $42;$exn$slot$0 = $41;
       }
      }
     } while(0);
     __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($__sn);
     __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($__sym);
     __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grp);
     $ehselector$slot$1 = $ehselector$slot$0;$exn$slot$1 = $exn$slot$0;
    }
   }
   if ((label|0) == 35) {
    $37 = ___cxa_find_matching_catch()|0;
    $38 = tempRet0;
    $ehselector$slot$1 = $38;$exn$slot$1 = $37;
   }
   $57 = HEAP32[$__loc>>2]|0;
   (__ZNSt3__114__shared_count16__release_sharedEv($57)|0);
   $58 = $55;$59 = $56;$ehselector$slot$2 = $ehselector$slot$1;$exn$slot$2 = $exn$slot$1;
  }
 }
 if ((label|0) == 7) {
  $7 = ___cxa_find_matching_catch()|0;
  $8 = tempRet0;
  $58 = $61;$59 = $60;$ehselector$slot$2 = $8;$exn$slot$2 = $7;
 }
 $tobool$i$i$i30 = ($58|0)==(0|0);
 if ($tobool$i$i$i30) {
  _free($59);
  ___resumeException($exn$slot$2|0);
  // unreachable;
 }
 _free($58);
 _free($59);
 ___resumeException($exn$slot$2|0);
 // unreachable;
}
function __ZNSt3__111__money_putIwE13__gather_infoEbbRKNS_6localeERNS_10money_base7patternERwS8_RNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERNS9_IwNSA_IwEENSC_IwEEEESJ_Ri($__intl,$__neg,$__loc,$__pat,$__dp,$__ts,$__grp,$__sym,$__sn,$__fd) {
 $__intl = $__intl|0;
 $__neg = $__neg|0;
 $__loc = $__loc|0;
 $__pat = $__pat|0;
 $__dp = $__dp|0;
 $__ts = $__ts|0;
 $__grp = $__grp|0;
 $__sym = $__sym|0;
 $__sn = $__sn|0;
 $__fd = $__fd|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $8 = 0, $9 = 0, $__data_$i$i$i$i = 0, $__data_$i$i$i$i102 = 0, $__data_$i$i$i$i118 = 0, $__data_$i$i$i$i135 = 0, $__data_$i$i$i$i40 = 0, $__data_$i$i$i$i55 = 0, $__data_$i$i$i$i68 = 0, $__data_$i$i$i$i87 = 0, $__data_$i2$i$i$i = 0, $__data_$i2$i$i$i132 = 0;
 var $__data_$i2$i$i$i37 = 0, $__data_$i2$i$i$i65 = 0, $__data_$i2$i$i$i84 = 0, $__data_$i2$i$i$i99 = 0, $__size_$i1$i$i$i = 0, $__size_$i1$i$i$i100 = 0, $__size_$i1$i$i$i119 = 0, $__size_$i1$i$i$i133 = 0, $__size_$i1$i$i$i38 = 0, $__size_$i1$i$i$i56 = 0, $__size_$i1$i$i$i66 = 0, $__size_$i1$i$i$i85 = 0, $and$i$i$i$i = 0, $and$i$i$i$i116 = 0, $and$i$i$i$i130 = 0, $and$i$i$i$i35 = 0, $and$i$i$i$i53 = 0, $and$i$i$i$i63 = 0, $and$i$i$i$i82 = 0, $and$i$i$i$i97 = 0;
 var $arrayidx$i$i$i$i = 0, $arrayidx$i$i$i$i122 = 0, $call$i = 0, $call$i109 = 0, $call$i112 = 0, $call$i142 = 0, $call$i47 = 0, $call$i50 = 0, $call$i75 = 0, $call$i76 = 0, $ref$tmp = 0, $ref$tmp11 = 0, $ref$tmp13 = 0, $ref$tmp21 = 0, $ref$tmp22 = 0, $ref$tmp25 = 0, $ref$tmp26 = 0, $ref$tmp31 = 0, $ref$tmp33 = 0, $ref$tmp4 = 0;
 var $ref$tmp6 = 0, $ref$tmp7 = 0, $storemerge = 0, $tobool$i$i$i$i = 0, $tobool$i$i$i$i117 = 0, $tobool$i$i$i$i131 = 0, $tobool$i$i$i$i36 = 0, $tobool$i$i$i$i54 = 0, $tobool$i$i$i$i64 = 0, $tobool$i$i$i$i83 = 0, $tobool$i$i$i$i98 = 0, $vfn$i = 0, $vfn$i108 = 0, $vfn$i111 = 0, $vfn$i114 = 0, $vfn$i128 = 0, $vfn$i141 = 0, $vfn$i29 = 0, $vfn$i31 = 0, $vfn$i33 = 0;
 var $vfn$i46 = 0, $vfn$i49 = 0, $vfn$i52 = 0, $vfn$i61 = 0, $vfn$i74 = 0, $vfn$i78 = 0, $vfn$i80 = 0, $vfn$i93 = 0, $vfn$i95 = 0, $vtable$i = 0, $vtable$i107 = 0, $vtable$i110 = 0, $vtable$i113 = 0, $vtable$i127 = 0, $vtable$i140 = 0, $vtable$i28 = 0, $vtable$i32 = 0, $vtable$i45 = 0, $vtable$i48 = 0, $vtable$i51 = 0;
 var $vtable$i60 = 0, $vtable$i73 = 0, $vtable$i77 = 0, $vtable$i79 = 0, $vtable$i94 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $ref$tmp = sp;
 $ref$tmp4 = sp + 16|0;
 $ref$tmp6 = sp + 92|0;
 $ref$tmp7 = sp + 40|0;
 $ref$tmp11 = sp + 80|0;
 $ref$tmp13 = sp + 96|0;
 $ref$tmp21 = sp + 108|0;
 $ref$tmp22 = sp + 56|0;
 $ref$tmp25 = sp + 52|0;
 $ref$tmp26 = sp + 28|0;
 $ref$tmp31 = sp + 4|0;
 $ref$tmp33 = sp + 68|0;
 if ($__intl) {
  $call$i = (__ZNKSt3__16locale9use_facetERNS0_2idE($__loc,4184)|0);
  $vtable$i = HEAP32[$call$i>>2]|0;
  do {
   if ($__neg) {
    $vfn$i = (($vtable$i) + 44|0);
    $0 = HEAP32[$vfn$i>>2]|0;
    FUNCTION_TABLE_vii[$0 & 511]($ref$tmp,$call$i);
    $1 = HEAP32[$ref$tmp>>2]|0;
    HEAP8[$__pat>>0]=$1&255;HEAP8[$__pat+1>>0]=($1>>8)&255;HEAP8[$__pat+2>>0]=($1>>16)&255;HEAP8[$__pat+3>>0]=$1>>24;
    $vtable$i28 = HEAP32[$call$i>>2]|0;
    $vfn$i29 = (($vtable$i28) + 32|0);
    $2 = HEAP32[$vfn$i29>>2]|0;
    FUNCTION_TABLE_vii[$2 & 511]($ref$tmp4,$call$i);
    $3 = HEAP8[$__sn>>0]|0;
    $and$i$i$i$i = $3 & 1;
    $tobool$i$i$i$i = ($and$i$i$i$i<<24>>24)==(0);
    if ($tobool$i$i$i$i) {
     $__data_$i$i$i$i = (($__sn) + 4|0);
     HEAP32[$__data_$i$i$i$i>>2] = 0;
     HEAP8[$__sn>>0] = 0;
    } else {
     $__data_$i2$i$i$i = (($__sn) + 8|0);
     $4 = HEAP32[$__data_$i2$i$i$i>>2]|0;
     HEAP32[$4>>2] = 0;
     $__size_$i1$i$i$i = (($__sn) + 4|0);
     HEAP32[$__size_$i1$i$i$i>>2] = 0;
    }
    __THREW__ = 0;
    invoke_vii(426,($__sn|0),0);
    $5 = __THREW__; __THREW__ = 0;
    $6 = $5&1;
    if ($6) {
     $7 = ___cxa_find_matching_catch(0|0)|0;
     $8 = tempRet0;
     ___clang_call_terminate($7);
     // unreachable;
    } else {
     ;HEAP32[$__sn+0>>2]=HEAP32[$ref$tmp4+0>>2]|0;HEAP32[$__sn+4>>2]=HEAP32[$ref$tmp4+4>>2]|0;HEAP32[$__sn+8>>2]=HEAP32[$ref$tmp4+8>>2]|0;
     ;HEAP32[$ref$tmp4+0>>2]=0|0;HEAP32[$ref$tmp4+4>>2]=0|0;HEAP32[$ref$tmp4+8>>2]=0|0;
     __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($ref$tmp4);
     break;
    }
   } else {
    $vfn$i31 = (($vtable$i) + 40|0);
    $9 = HEAP32[$vfn$i31>>2]|0;
    FUNCTION_TABLE_vii[$9 & 511]($ref$tmp6,$call$i);
    $10 = HEAP32[$ref$tmp6>>2]|0;
    HEAP8[$__pat>>0]=$10&255;HEAP8[$__pat+1>>0]=($10>>8)&255;HEAP8[$__pat+2>>0]=($10>>16)&255;HEAP8[$__pat+3>>0]=$10>>24;
    $vtable$i32 = HEAP32[$call$i>>2]|0;
    $vfn$i33 = (($vtable$i32) + 28|0);
    $11 = HEAP32[$vfn$i33>>2]|0;
    FUNCTION_TABLE_vii[$11 & 511]($ref$tmp7,$call$i);
    $12 = HEAP8[$__sn>>0]|0;
    $and$i$i$i$i35 = $12 & 1;
    $tobool$i$i$i$i36 = ($and$i$i$i$i35<<24>>24)==(0);
    if ($tobool$i$i$i$i36) {
     $__data_$i$i$i$i40 = (($__sn) + 4|0);
     HEAP32[$__data_$i$i$i$i40>>2] = 0;
     HEAP8[$__sn>>0] = 0;
    } else {
     $__data_$i2$i$i$i37 = (($__sn) + 8|0);
     $13 = HEAP32[$__data_$i2$i$i$i37>>2]|0;
     HEAP32[$13>>2] = 0;
     $__size_$i1$i$i$i38 = (($__sn) + 4|0);
     HEAP32[$__size_$i1$i$i$i38>>2] = 0;
    }
    __THREW__ = 0;
    invoke_vii(426,($__sn|0),0);
    $14 = __THREW__; __THREW__ = 0;
    $15 = $14&1;
    if ($15) {
     $16 = ___cxa_find_matching_catch(0|0)|0;
     $17 = tempRet0;
     ___clang_call_terminate($16);
     // unreachable;
    } else {
     ;HEAP32[$__sn+0>>2]=HEAP32[$ref$tmp7+0>>2]|0;HEAP32[$__sn+4>>2]=HEAP32[$ref$tmp7+4>>2]|0;HEAP32[$__sn+8>>2]=HEAP32[$ref$tmp7+8>>2]|0;
     ;HEAP32[$ref$tmp7+0>>2]=0|0;HEAP32[$ref$tmp7+4>>2]=0|0;HEAP32[$ref$tmp7+8>>2]=0|0;
     __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($ref$tmp7);
     break;
    }
   }
  } while(0);
  $vtable$i45 = HEAP32[$call$i>>2]|0;
  $vfn$i46 = (($vtable$i45) + 12|0);
  $18 = HEAP32[$vfn$i46>>2]|0;
  $call$i47 = (FUNCTION_TABLE_ii[$18 & 511]($call$i)|0);
  HEAP32[$__dp>>2] = $call$i47;
  $vtable$i48 = HEAP32[$call$i>>2]|0;
  $vfn$i49 = (($vtable$i48) + 16|0);
  $19 = HEAP32[$vfn$i49>>2]|0;
  $call$i50 = (FUNCTION_TABLE_ii[$19 & 511]($call$i)|0);
  HEAP32[$__ts>>2] = $call$i50;
  $vtable$i51 = HEAP32[$call$i>>2]|0;
  $vfn$i52 = (($vtable$i51) + 20|0);
  $20 = HEAP32[$vfn$i52>>2]|0;
  FUNCTION_TABLE_vii[$20 & 511]($ref$tmp11,$call$i);
  $21 = HEAP8[$__grp>>0]|0;
  $and$i$i$i$i53 = $21 & 1;
  $tobool$i$i$i$i54 = ($and$i$i$i$i53<<24>>24)==(0);
  if ($tobool$i$i$i$i54) {
   $arrayidx$i$i$i$i = (($__grp) + 1|0);
   HEAP8[$arrayidx$i$i$i$i>>0] = 0;
   HEAP8[$__grp>>0] = 0;
  } else {
   $__data_$i$i$i$i55 = (($__grp) + 8|0);
   $22 = HEAP32[$__data_$i$i$i$i55>>2]|0;
   HEAP8[$22>>0] = 0;
   $__size_$i1$i$i$i56 = (($__grp) + 4|0);
   HEAP32[$__size_$i1$i$i$i56>>2] = 0;
  }
  __THREW__ = 0;
  invoke_vii(420,($__grp|0),0);
  $23 = __THREW__; __THREW__ = 0;
  $24 = $23&1;
  if ($24) {
   $25 = ___cxa_find_matching_catch(0|0)|0;
   $26 = tempRet0;
   ___clang_call_terminate($25);
   // unreachable;
  }
  ;HEAP32[$__grp+0>>2]=HEAP32[$ref$tmp11+0>>2]|0;HEAP32[$__grp+4>>2]=HEAP32[$ref$tmp11+4>>2]|0;HEAP32[$__grp+8>>2]=HEAP32[$ref$tmp11+8>>2]|0;
  ;HEAP32[$ref$tmp11+0>>2]=0|0;HEAP32[$ref$tmp11+4>>2]=0|0;HEAP32[$ref$tmp11+8>>2]=0|0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($ref$tmp11);
  $vtable$i60 = HEAP32[$call$i>>2]|0;
  $vfn$i61 = (($vtable$i60) + 24|0);
  $27 = HEAP32[$vfn$i61>>2]|0;
  FUNCTION_TABLE_vii[$27 & 511]($ref$tmp13,$call$i);
  $28 = HEAP8[$__sym>>0]|0;
  $and$i$i$i$i63 = $28 & 1;
  $tobool$i$i$i$i64 = ($and$i$i$i$i63<<24>>24)==(0);
  if ($tobool$i$i$i$i64) {
   $__data_$i$i$i$i68 = (($__sym) + 4|0);
   HEAP32[$__data_$i$i$i$i68>>2] = 0;
   HEAP8[$__sym>>0] = 0;
  } else {
   $__data_$i2$i$i$i65 = (($__sym) + 8|0);
   $29 = HEAP32[$__data_$i2$i$i$i65>>2]|0;
   HEAP32[$29>>2] = 0;
   $__size_$i1$i$i$i66 = (($__sym) + 4|0);
   HEAP32[$__size_$i1$i$i$i66>>2] = 0;
  }
  __THREW__ = 0;
  invoke_vii(426,($__sym|0),0);
  $30 = __THREW__; __THREW__ = 0;
  $31 = $30&1;
  if ($31) {
   $32 = ___cxa_find_matching_catch(0|0)|0;
   $33 = tempRet0;
   ___clang_call_terminate($32);
   // unreachable;
  }
  ;HEAP32[$__sym+0>>2]=HEAP32[$ref$tmp13+0>>2]|0;HEAP32[$__sym+4>>2]=HEAP32[$ref$tmp13+4>>2]|0;HEAP32[$__sym+8>>2]=HEAP32[$ref$tmp13+8>>2]|0;
  ;HEAP32[$ref$tmp13+0>>2]=0|0;HEAP32[$ref$tmp13+4>>2]=0|0;HEAP32[$ref$tmp13+8>>2]=0|0;
  __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($ref$tmp13);
  $vtable$i73 = HEAP32[$call$i>>2]|0;
  $vfn$i74 = (($vtable$i73) + 36|0);
  $34 = HEAP32[$vfn$i74>>2]|0;
  $call$i75 = (FUNCTION_TABLE_ii[$34 & 511]($call$i)|0);
  $storemerge = $call$i75;
  HEAP32[$__fd>>2] = $storemerge;
  STACKTOP = sp;return;
 } else {
  $call$i76 = (__ZNKSt3__16locale9use_facetERNS0_2idE($__loc,4120)|0);
  $vtable$i77 = HEAP32[$call$i76>>2]|0;
  do {
   if ($__neg) {
    $vfn$i78 = (($vtable$i77) + 44|0);
    $35 = HEAP32[$vfn$i78>>2]|0;
    FUNCTION_TABLE_vii[$35 & 511]($ref$tmp21,$call$i76);
    $36 = HEAP32[$ref$tmp21>>2]|0;
    HEAP8[$__pat>>0]=$36&255;HEAP8[$__pat+1>>0]=($36>>8)&255;HEAP8[$__pat+2>>0]=($36>>16)&255;HEAP8[$__pat+3>>0]=$36>>24;
    $vtable$i79 = HEAP32[$call$i76>>2]|0;
    $vfn$i80 = (($vtable$i79) + 32|0);
    $37 = HEAP32[$vfn$i80>>2]|0;
    FUNCTION_TABLE_vii[$37 & 511]($ref$tmp22,$call$i76);
    $38 = HEAP8[$__sn>>0]|0;
    $and$i$i$i$i82 = $38 & 1;
    $tobool$i$i$i$i83 = ($and$i$i$i$i82<<24>>24)==(0);
    if ($tobool$i$i$i$i83) {
     $__data_$i$i$i$i87 = (($__sn) + 4|0);
     HEAP32[$__data_$i$i$i$i87>>2] = 0;
     HEAP8[$__sn>>0] = 0;
    } else {
     $__data_$i2$i$i$i84 = (($__sn) + 8|0);
     $39 = HEAP32[$__data_$i2$i$i$i84>>2]|0;
     HEAP32[$39>>2] = 0;
     $__size_$i1$i$i$i85 = (($__sn) + 4|0);
     HEAP32[$__size_$i1$i$i$i85>>2] = 0;
    }
    __THREW__ = 0;
    invoke_vii(426,($__sn|0),0);
    $40 = __THREW__; __THREW__ = 0;
    $41 = $40&1;
    if ($41) {
     $42 = ___cxa_find_matching_catch(0|0)|0;
     $43 = tempRet0;
     ___clang_call_terminate($42);
     // unreachable;
    } else {
     ;HEAP32[$__sn+0>>2]=HEAP32[$ref$tmp22+0>>2]|0;HEAP32[$__sn+4>>2]=HEAP32[$ref$tmp22+4>>2]|0;HEAP32[$__sn+8>>2]=HEAP32[$ref$tmp22+8>>2]|0;
     ;HEAP32[$ref$tmp22+0>>2]=0|0;HEAP32[$ref$tmp22+4>>2]=0|0;HEAP32[$ref$tmp22+8>>2]=0|0;
     __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($ref$tmp22);
     break;
    }
   } else {
    $vfn$i93 = (($vtable$i77) + 40|0);
    $44 = HEAP32[$vfn$i93>>2]|0;
    FUNCTION_TABLE_vii[$44 & 511]($ref$tmp25,$call$i76);
    $45 = HEAP32[$ref$tmp25>>2]|0;
    HEAP8[$__pat>>0]=$45&255;HEAP8[$__pat+1>>0]=($45>>8)&255;HEAP8[$__pat+2>>0]=($45>>16)&255;HEAP8[$__pat+3>>0]=$45>>24;
    $vtable$i94 = HEAP32[$call$i76>>2]|0;
    $vfn$i95 = (($vtable$i94) + 28|0);
    $46 = HEAP32[$vfn$i95>>2]|0;
    FUNCTION_TABLE_vii[$46 & 511]($ref$tmp26,$call$i76);
    $47 = HEAP8[$__sn>>0]|0;
    $and$i$i$i$i97 = $47 & 1;
    $tobool$i$i$i$i98 = ($and$i$i$i$i97<<24>>24)==(0);
    if ($tobool$i$i$i$i98) {
     $__data_$i$i$i$i102 = (($__sn) + 4|0);
     HEAP32[$__data_$i$i$i$i102>>2] = 0;
     HEAP8[$__sn>>0] = 0;
    } else {
     $__data_$i2$i$i$i99 = (($__sn) + 8|0);
     $48 = HEAP32[$__data_$i2$i$i$i99>>2]|0;
     HEAP32[$48>>2] = 0;
     $__size_$i1$i$i$i100 = (($__sn) + 4|0);
     HEAP32[$__size_$i1$i$i$i100>>2] = 0;
    }
    __THREW__ = 0;
    invoke_vii(426,($__sn|0),0);
    $49 = __THREW__; __THREW__ = 0;
    $50 = $49&1;
    if ($50) {
     $51 = ___cxa_find_matching_catch(0|0)|0;
     $52 = tempRet0;
     ___clang_call_terminate($51);
     // unreachable;
    } else {
     ;HEAP32[$__sn+0>>2]=HEAP32[$ref$tmp26+0>>2]|0;HEAP32[$__sn+4>>2]=HEAP32[$ref$tmp26+4>>2]|0;HEAP32[$__sn+8>>2]=HEAP32[$ref$tmp26+8>>2]|0;
     ;HEAP32[$ref$tmp26+0>>2]=0|0;HEAP32[$ref$tmp26+4>>2]=0|0;HEAP32[$ref$tmp26+8>>2]=0|0;
     __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($ref$tmp26);
     break;
    }
   }
  } while(0);
  $vtable$i107 = HEAP32[$call$i76>>2]|0;
  $vfn$i108 = (($vtable$i107) + 12|0);
  $53 = HEAP32[$vfn$i108>>2]|0;
  $call$i109 = (FUNCTION_TABLE_ii[$53 & 511]($call$i76)|0);
  HEAP32[$__dp>>2] = $call$i109;
  $vtable$i110 = HEAP32[$call$i76>>2]|0;
  $vfn$i111 = (($vtable$i110) + 16|0);
  $54 = HEAP32[$vfn$i111>>2]|0;
  $call$i112 = (FUNCTION_TABLE_ii[$54 & 511]($call$i76)|0);
  HEAP32[$__ts>>2] = $call$i112;
  $vtable$i113 = HEAP32[$call$i76>>2]|0;
  $vfn$i114 = (($vtable$i113) + 20|0);
  $55 = HEAP32[$vfn$i114>>2]|0;
  FUNCTION_TABLE_vii[$55 & 511]($ref$tmp31,$call$i76);
  $56 = HEAP8[$__grp>>0]|0;
  $and$i$i$i$i116 = $56 & 1;
  $tobool$i$i$i$i117 = ($and$i$i$i$i116<<24>>24)==(0);
  if ($tobool$i$i$i$i117) {
   $arrayidx$i$i$i$i122 = (($__grp) + 1|0);
   HEAP8[$arrayidx$i$i$i$i122>>0] = 0;
   HEAP8[$__grp>>0] = 0;
  } else {
   $__data_$i$i$i$i118 = (($__grp) + 8|0);
   $57 = HEAP32[$__data_$i$i$i$i118>>2]|0;
   HEAP8[$57>>0] = 0;
   $__size_$i1$i$i$i119 = (($__grp) + 4|0);
   HEAP32[$__size_$i1$i$i$i119>>2] = 0;
  }
  __THREW__ = 0;
  invoke_vii(420,($__grp|0),0);
  $58 = __THREW__; __THREW__ = 0;
  $59 = $58&1;
  if ($59) {
   $60 = ___cxa_find_matching_catch(0|0)|0;
   $61 = tempRet0;
   ___clang_call_terminate($60);
   // unreachable;
  }
  ;HEAP32[$__grp+0>>2]=HEAP32[$ref$tmp31+0>>2]|0;HEAP32[$__grp+4>>2]=HEAP32[$ref$tmp31+4>>2]|0;HEAP32[$__grp+8>>2]=HEAP32[$ref$tmp31+8>>2]|0;
  ;HEAP32[$ref$tmp31+0>>2]=0|0;HEAP32[$ref$tmp31+4>>2]=0|0;HEAP32[$ref$tmp31+8>>2]=0|0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($ref$tmp31);
  $vtable$i127 = HEAP32[$call$i76>>2]|0;
  $vfn$i128 = (($vtable$i127) + 24|0);
  $62 = HEAP32[$vfn$i128>>2]|0;
  FUNCTION_TABLE_vii[$62 & 511]($ref$tmp33,$call$i76);
  $63 = HEAP8[$__sym>>0]|0;
  $and$i$i$i$i130 = $63 & 1;
  $tobool$i$i$i$i131 = ($and$i$i$i$i130<<24>>24)==(0);
  if ($tobool$i$i$i$i131) {
   $__data_$i$i$i$i135 = (($__sym) + 4|0);
   HEAP32[$__data_$i$i$i$i135>>2] = 0;
   HEAP8[$__sym>>0] = 0;
  } else {
   $__data_$i2$i$i$i132 = (($__sym) + 8|0);
   $64 = HEAP32[$__data_$i2$i$i$i132>>2]|0;
   HEAP32[$64>>2] = 0;
   $__size_$i1$i$i$i133 = (($__sym) + 4|0);
   HEAP32[$__size_$i1$i$i$i133>>2] = 0;
  }
  __THREW__ = 0;
  invoke_vii(426,($__sym|0),0);
  $65 = __THREW__; __THREW__ = 0;
  $66 = $65&1;
  if ($66) {
   $67 = ___cxa_find_matching_catch(0|0)|0;
   $68 = tempRet0;
   ___clang_call_terminate($67);
   // unreachable;
  }
  ;HEAP32[$__sym+0>>2]=HEAP32[$ref$tmp33+0>>2]|0;HEAP32[$__sym+4>>2]=HEAP32[$ref$tmp33+4>>2]|0;HEAP32[$__sym+8>>2]=HEAP32[$ref$tmp33+8>>2]|0;
  ;HEAP32[$ref$tmp33+0>>2]=0|0;HEAP32[$ref$tmp33+4>>2]=0|0;HEAP32[$ref$tmp33+8>>2]=0|0;
  __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($ref$tmp33);
  $vtable$i140 = HEAP32[$call$i76>>2]|0;
  $vfn$i141 = (($vtable$i140) + 36|0);
  $69 = HEAP32[$vfn$i141>>2]|0;
  $call$i142 = (FUNCTION_TABLE_ii[$69 & 511]($call$i76)|0);
  $storemerge = $call$i142;
  HEAP32[$__fd>>2] = $storemerge;
  STACKTOP = sp;return;
 }
}
function __ZNSt3__111__money_putIwE8__formatEPwRS2_S3_jPKwS5_RKNS_5ctypeIwEEbRKNS_10money_base7patternEwwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERKNSE_IwNSF_IwEENSH_IwEEEESQ_i($__mb,$__mi,$__me,$__flags,$__db,$__de,$__ct,$__neg,$__pat,$__dp,$__ts,$__grp,$__sym,$__sn,$__fd) {
 $__mb = $__mb|0;
 $__mi = $__mi|0;
 $__me = $__me|0;
 $__flags = $__flags|0;
 $__db = $__db|0;
 $__de = $__de|0;
 $__ct = $__ct|0;
 $__neg = $__neg|0;
 $__pat = $__pat|0;
 $__dp = $__dp|0;
 $__ts = $__ts|0;
 $__grp = $__grp|0;
 $__sym = $__sym|0;
 $__sn = $__sn|0;
 $__fd = $__fd|0;
 var $$lcssa = 0, $$pn = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $27$phi = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $__d$0$lcssa = 0, $__d$0198 = 0, $__d$1$lcssa232236 = 0, $__d$1$lcssa233 = 0, $__d$1202 = 0, $__d$2 = 0, $__d$3215 = 0, $__data_$i$i$i$i106 = 0, $__data_$i$i$i$i130 = 0, $__data_$i$i$i155 = 0, $__data_$i1$i$i$i = 0, $__data_$i1$i$i185 = 0, $__db$addr$0220 = 0, $__db$addr$2 = 0, $__f$0$lcssa231 = 0, $__f$0203 = 0, $__f$1210 = 0, $__first$addr$08$i$i = 0, $__gl$0218 = 0, $__gl$1 = 0;
 var $__i$i$i$i$promoted7$i$i = 0, $__i$i$i$i$promoted7$i$i167 = 0, $__ig$0217 = 0, $__ig$1 = 0, $__me$promoted = 0, $__ng$0216 = 0, $__ng$1 = 0, $__p$0219 = 0, $__result$addr$0$lcssa$i$i = 0, $__result$addr$0$lcssa$i$i180 = 0, $__result$addr$05$i$i = 0, $__result$addr$05$i$i173 = 0, $__size_$i2$i97 = 0, $add$ptr$i = 0, $add$ptr$i$i238 = 0, $add$ptr$i$sum = 0, $add$ptr$i194 = 0, $add$ptr$i194$sum = 0, $add$ptr$i82 = 0, $add$ptr$i92 = 0;
 var $and = 0, $and$i$i = 0, $and$i$i$i = 0, $and$i$i$i114 = 0, $and$i$i$i137 = 0, $and$i$i95 = 0, $and92 = 0, $arrayidx = 0, $arrayidx$i$i$i$i109 = 0, $brmerge = 0, $call$i = 0, $call$i125 = 0, $call$i135 = 0, $call$i149 = 0, $cmp$i = 0, $cmp$i$i = 0, $cmp$i122 = 0, $cmp$i145 = 0, $cmp1$i$i = 0, $cmp17$i$i = 0;
 var $cmp18 = 0, $cmp18197 = 0, $cmp24 = 0, $cmp27 = 0, $cmp27199 = 0, $cmp28 = 0, $cmp37 = 0, $cmp37208 = 0, $cmp45 = 0, $cmp57 = 0, $cmp58 = 0, $cmp62 = 0, $cmp68 = 0, $cmp86 = 0, $cond$i = 0, $cond$i$i = 0, $cond$i$i$i = 0, $cond$i$i$i111 = 0, $cond$i$i$i132 = 0, $cond$i$i$i91 = 0;
 var $cond$i$i121 = 0, $cond$i$i144 = 0, $cond$i$i157228 = 0, $cond$i102 = 0, $cond$i6$i = 0, $cond$i6$i193 = 0, $cond$i7$i = 0, $cond$i7$i192 = 0, $conv = 0, $conv$i$i = 0, $conv$i$i$i = 0, $conv$i$i$i118 = 0, $conv$i$i$i141 = 0, $conv$i$i$i189 = 0, $conv$i$i$i69 = 0, $conv$i$i99 = 0, $conv54 = 0, $conv73 = 0, $dec = 0, $dec41 = 0;
 var $exitcond = 0, $inc = 0, $inc80 = 0, $inc83 = 0, $incdec$ptr = 0, $incdec$ptr$i$i = 0, $incdec$ptr$i$i$i = 0, $incdec$ptr$i$i$i174 = 0, $incdec$ptr$i$i175 = 0, $incdec$ptr$i$i80 = 0, $incdec$ptr15 = 0, $incdec$ptr15$__db$addr$0 = 0, $incdec$ptr2$i$i = 0, $incdec$ptr23 = 0, $incdec$ptr30 = 0, $incdec$ptr31 = 0, $incdec$ptr31207 = 0, $incdec$ptr39 = 0, $incdec$ptr39209 = 0, $incdec$ptr39209$sum = 0;
 var $incdec$ptr39209235 = 0, $incdec$ptr39213 = 0, $incdec$ptr48 = 0, $incdec$ptr5 = 0, $incdec$ptr6$i$i = 0, $incdec$ptr60 = 0, $incdec$ptr78 = 0, $incdec$ptr79 = 0, $incdec$ptr9$i$i = 0, $lnot$i$i$i = 0, $lnot$i$i$i176 = 0, $lnot$i4$i$i = 0, $lnot$i4$i$i166 = 0, $or$cond = 0, $scevgep = 0, $scevgep$i$i = 0, $scevgep$i$i168 = 0, $scevgep225 = 0, $scevgep9$i$i = 0, $scevgep9$i$i178 = 0;
 var $shr1$i$i = 0, $shr1$i$i$i = 0, $shr1$i$i$i119 = 0, $shr1$i$i$i142 = 0, $shr1$i$i$i190 = 0, $shr1$i$i$i70 = 0, $shr1$i$i100 = 0, $tobool = 0, $tobool$i$i = 0, $tobool$i$i$i = 0, $tobool$i$i$i115 = 0, $tobool$i$i$i138 = 0, $tobool$i$i96 = 0, $uglygep$i$i = 0, $uglygep$i$i170 = 0, $uglygep8$i$i = 0, $uglygep8$i$i171 = 0, $vfn$i = 0, $vfn$i124 = 0, $vfn$i134 = 0;
 var $vfn$i148 = 0, $vtable$i = 0, $vtable$i123 = 0, $vtable$i133 = 0, $vtable$i147 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$__me>>2] = $__mb;
 $__data_$i$i$i$i130 = (($__sn) + 4|0);
 $__data_$i1$i$i$i = (($__sn) + 8|0);
 $and = $__flags & 512;
 $tobool = ($and|0)==(0);
 $__data_$i$i$i155 = (($__sym) + 4|0);
 $__data_$i1$i$i185 = (($__sym) + 8|0);
 $cmp24 = ($__fd|0)>(0);
 $arrayidx$i$i$i$i109 = (($__grp) + 1|0);
 $__data_$i$i$i$i106 = (($__grp) + 8|0);
 $__size_$i2$i97 = (($__grp) + 4|0);
 $__db$addr$0220 = $__db;$__p$0219 = 0;
 while(1) {
  $arrayidx = (($__pat) + ($__p$0219)|0);
  $0 = HEAP8[$arrayidx>>0]|0;
  $conv = $0 << 24 >> 24;
  switch ($conv|0) {
  case 3:  {
   $5 = HEAP8[$__sn>>0]|0;
   $and$i$i$i = $5 & 1;
   $tobool$i$i$i = ($and$i$i$i<<24>>24)==(0);
   if ($tobool$i$i$i) {
    $conv$i$i$i = $5&255;
    $shr1$i$i$i = $conv$i$i$i >>> 1;
    $cond$i$i = $shr1$i$i$i;
   } else {
    $6 = HEAP32[$__data_$i$i$i$i130>>2]|0;
    $cond$i$i = $6;
   }
   $cmp$i = ($cond$i$i|0)==(0);
   if ($cmp$i) {
    $__db$addr$2 = $__db$addr$0220;
   } else {
    if ($tobool$i$i$i) {
     $cond$i$i$i132 = $__data_$i$i$i$i130;
    } else {
     $7 = HEAP32[$__data_$i1$i$i$i>>2]|0;
     $cond$i$i$i132 = $7;
    }
    $8 = HEAP32[$cond$i$i$i132>>2]|0;
    $9 = HEAP32[$__me>>2]|0;
    $incdec$ptr5 = (($9) + 4|0);
    HEAP32[$__me>>2] = $incdec$ptr5;
    HEAP32[$9>>2] = $8;
    $__db$addr$2 = $__db$addr$0220;
   }
   break;
  }
  case 1:  {
   $2 = HEAP32[$__me>>2]|0;
   HEAP32[$__mi>>2] = $2;
   $vtable$i = HEAP32[$__ct>>2]|0;
   $vfn$i = (($vtable$i) + 44|0);
   $3 = HEAP32[$vfn$i>>2]|0;
   $call$i = (FUNCTION_TABLE_iii[$3 & 511]($__ct,32)|0);
   $4 = HEAP32[$__me>>2]|0;
   $incdec$ptr = (($4) + 4|0);
   HEAP32[$__me>>2] = $incdec$ptr;
   HEAP32[$4>>2] = $call$i;
   $__db$addr$2 = $__db$addr$0220;
   break;
  }
  case 0:  {
   $1 = HEAP32[$__me>>2]|0;
   HEAP32[$__mi>>2] = $1;
   $__db$addr$2 = $__db$addr$0220;
   break;
  }
  case 4:  {
   $20 = HEAP32[$__me>>2]|0;
   $incdec$ptr15 = (($__db$addr$0220) + 4|0);
   $incdec$ptr15$__db$addr$0 = $__neg ? $incdec$ptr15 : $__db$addr$0220;
   $cmp18197 = ($incdec$ptr15$__db$addr$0>>>0)<($__de>>>0);
   L16: do {
    if ($cmp18197) {
     $__d$0198 = $incdec$ptr15$__db$addr$0;
     while(1) {
      $21 = HEAP32[$__d$0198>>2]|0;
      $vtable$i147 = HEAP32[$__ct>>2]|0;
      $vfn$i148 = (($vtable$i147) + 12|0);
      $22 = HEAP32[$vfn$i148>>2]|0;
      $call$i149 = (FUNCTION_TABLE_iiii[$22 & 511]($__ct,2048,$21)|0);
      $incdec$ptr23 = (($__d$0198) + 4|0);
      if (!($call$i149)) {
       $__d$0$lcssa = $__d$0198;
       break L16;
      }
      $cmp18 = ($incdec$ptr23>>>0)<($__de>>>0);
      if ($cmp18) {
       $__d$0198 = $incdec$ptr23;
      } else {
       $__d$0$lcssa = $incdec$ptr23;
       break;
      }
     }
    } else {
     $__d$0$lcssa = $incdec$ptr15$__db$addr$0;
    }
   } while(0);
   if ($cmp24) {
    $cmp27199 = ($__d$0$lcssa>>>0)>($incdec$ptr15$__db$addr$0>>>0);
    if ($cmp27199) {
     $__me$promoted = HEAP32[$__me>>2]|0;
     $__d$1202 = $__d$0$lcssa;$__f$0203 = $__fd;$incdec$ptr31207 = $__me$promoted;
     while(1) {
      $incdec$ptr30 = (($__d$1202) + -4|0);
      $23 = HEAP32[$incdec$ptr30>>2]|0;
      $incdec$ptr31 = (($incdec$ptr31207) + 4|0);
      HEAP32[$incdec$ptr31207>>2] = $23;
      $dec = (($__f$0203) + -1)|0;
      $cmp27 = ($incdec$ptr30>>>0)>($incdec$ptr15$__db$addr$0>>>0);
      $cmp28 = ($dec|0)>(0);
      $or$cond = $cmp27 & $cmp28;
      if ($or$cond) {
       $__d$1202 = $incdec$ptr30;$__f$0203 = $dec;$incdec$ptr31207 = $incdec$ptr31;
      } else {
       break;
      }
     }
     HEAP32[$__me>>2] = $incdec$ptr31;
     if ($cmp28) {
      $__d$1$lcssa233 = $incdec$ptr30;$__f$0$lcssa231 = $dec;
      label = 34;
     } else {
      $24 = HEAP32[$__me>>2]|0;
      $incdec$ptr39209235 = (($24) + 4|0);
      HEAP32[$__me>>2] = $incdec$ptr39209235;
      $$lcssa = $24;$__d$1$lcssa232236 = $incdec$ptr30;
     }
    } else {
     $__d$1$lcssa233 = $__d$0$lcssa;$__f$0$lcssa231 = $__fd;
     label = 34;
    }
    if ((label|0) == 34) {
     label = 0;
     $vtable$i133 = HEAP32[$__ct>>2]|0;
     $vfn$i134 = (($vtable$i133) + 44|0);
     $25 = HEAP32[$vfn$i134>>2]|0;
     $call$i135 = (FUNCTION_TABLE_iii[$25 & 511]($__ct,48)|0);
     $cmp37208 = ($__f$0$lcssa231|0)>(0);
     $26 = HEAP32[$__me>>2]|0;
     $incdec$ptr39209 = (($26) + 4|0);
     HEAP32[$__me>>2] = $incdec$ptr39209;
     if ($cmp37208) {
      $27 = $26;$__f$1210 = $__f$0$lcssa231;$incdec$ptr39213 = $incdec$ptr39209;
      while(1) {
       HEAP32[$27>>2] = $call$i135;
       $dec41 = (($__f$1210) + -1)|0;
       $cmp37 = ($dec41|0)>(0);
       $incdec$ptr39 = (($incdec$ptr39213) + 4|0);
       if ($cmp37) {
        $27$phi = $incdec$ptr39213;$__f$1210 = $dec41;$incdec$ptr39213 = $incdec$ptr39;$27 = $27$phi;
       } else {
        break;
       }
      }
      $incdec$ptr39209$sum = (($__f$0$lcssa231) + 1)|0;
      $scevgep = (($26) + ($incdec$ptr39209$sum<<2)|0);
      $scevgep225 = (($26) + ($__f$0$lcssa231<<2)|0);
      HEAP32[$__me>>2] = $scevgep;
      $$lcssa = $scevgep225;$__d$1$lcssa232236 = $__d$1$lcssa233;
     } else {
      $$lcssa = $26;$__d$1$lcssa232236 = $__d$1$lcssa233;
     }
    }
    HEAP32[$$lcssa>>2] = $__dp;
    $__d$2 = $__d$1$lcssa232236;
   } else {
    $__d$2 = $__d$0$lcssa;
   }
   $cmp45 = ($__d$2|0)==($incdec$ptr15$__db$addr$0|0);
   if ($cmp45) {
    $vtable$i123 = HEAP32[$__ct>>2]|0;
    $vfn$i124 = (($vtable$i123) + 44|0);
    $28 = HEAP32[$vfn$i124>>2]|0;
    $call$i125 = (FUNCTION_TABLE_iii[$28 & 511]($__ct,48)|0);
    $29 = HEAP32[$__me>>2]|0;
    $incdec$ptr48 = (($29) + 4|0);
    HEAP32[$__me>>2] = $incdec$ptr48;
    HEAP32[$29>>2] = $call$i125;
    $43 = $incdec$ptr48;
   } else {
    $30 = HEAP8[$__grp>>0]|0;
    $and$i$i$i114 = $30 & 1;
    $tobool$i$i$i115 = ($and$i$i$i114<<24>>24)==(0);
    if ($tobool$i$i$i115) {
     $conv$i$i$i118 = $30&255;
     $shr1$i$i$i119 = $conv$i$i$i118 >>> 1;
     $cond$i$i121 = $shr1$i$i$i119;
    } else {
     $31 = HEAP32[$__size_$i2$i97>>2]|0;
     $cond$i$i121 = $31;
    }
    $cmp$i122 = ($cond$i$i121|0)==(0);
    if ($cmp$i122) {
     $__d$3215 = $__d$2;$__gl$0218 = -1;$__ig$0217 = 0;$__ng$0216 = 0;
    } else {
     if ($tobool$i$i$i115) {
      $cond$i$i$i111 = $arrayidx$i$i$i$i109;
     } else {
      $32 = HEAP32[$__data_$i$i$i$i106>>2]|0;
      $cond$i$i$i111 = $32;
     }
     $33 = HEAP8[$cond$i$i$i111>>0]|0;
     $conv54 = $33 << 24 >> 24;
     $__d$3215 = $__d$2;$__gl$0218 = $conv54;$__ig$0217 = 0;$__ng$0216 = 0;
    }
    while(1) {
     $cmp58 = ($__ng$0216|0)==($__gl$0218|0);
     $34 = HEAP32[$__me>>2]|0;
     if ($cmp58) {
      $incdec$ptr60 = (($34) + 4|0);
      HEAP32[$__me>>2] = $incdec$ptr60;
      HEAP32[$34>>2] = $__ts;
      $inc = (($__ig$0217) + 1)|0;
      $35 = HEAP8[$__grp>>0]|0;
      $and$i$i95 = $35 & 1;
      $tobool$i$i96 = ($and$i$i95<<24>>24)==(0);
      if ($tobool$i$i96) {
       $conv$i$i99 = $35&255;
       $shr1$i$i100 = $conv$i$i99 >>> 1;
       $cond$i102 = $shr1$i$i100;
      } else {
       $36 = HEAP32[$__size_$i2$i97>>2]|0;
       $cond$i102 = $36;
      }
      $cmp62 = ($inc>>>0)<($cond$i102>>>0);
      if ($cmp62) {
       if ($tobool$i$i96) {
        $cond$i$i$i91 = $arrayidx$i$i$i$i109;
       } else {
        $37 = HEAP32[$__data_$i$i$i$i106>>2]|0;
        $cond$i$i$i91 = $37;
       }
       $add$ptr$i92 = (($cond$i$i$i91) + ($inc)|0);
       $38 = HEAP8[$add$ptr$i92>>0]|0;
       $cmp68 = ($38<<24>>24)==(127);
       if ($cmp68) {
        $42 = $incdec$ptr60;$__gl$1 = -1;$__ig$1 = $inc;$__ng$1 = 0;
       } else {
        if ($tobool$i$i96) {
         $cond$i$i$i = $arrayidx$i$i$i$i109;
        } else {
         $39 = HEAP32[$__data_$i$i$i$i106>>2]|0;
         $cond$i$i$i = $39;
        }
        $add$ptr$i82 = (($cond$i$i$i) + ($inc)|0);
        $40 = HEAP8[$add$ptr$i82>>0]|0;
        $conv73 = $40 << 24 >> 24;
        $42 = $incdec$ptr60;$__gl$1 = $conv73;$__ig$1 = $inc;$__ng$1 = 0;
       }
      } else {
       $42 = $incdec$ptr60;$__gl$1 = $__gl$0218;$__ig$1 = $inc;$__ng$1 = 0;
      }
     } else {
      $42 = $34;$__gl$1 = $__gl$0218;$__ig$1 = $__ig$0217;$__ng$1 = $__ng$0216;
     }
     $incdec$ptr78 = (($__d$3215) + -4|0);
     $41 = HEAP32[$incdec$ptr78>>2]|0;
     $incdec$ptr79 = (($42) + 4|0);
     HEAP32[$__me>>2] = $incdec$ptr79;
     HEAP32[$42>>2] = $41;
     $inc80 = (($__ng$1) + 1)|0;
     $cmp57 = ($incdec$ptr78|0)==($incdec$ptr15$__db$addr$0|0);
     if ($cmp57) {
      $43 = $incdec$ptr79;
      break;
     } else {
      $__d$3215 = $incdec$ptr78;$__gl$0218 = $__gl$1;$__ig$0217 = $__ig$1;$__ng$0216 = $inc80;
     }
    }
   }
   $cmp$i$i = ($20|0)==($43|0);
   if ($cmp$i$i) {
    $__db$addr$2 = $incdec$ptr15$__db$addr$0;
   } else {
    $incdec$ptr6$i$i = (($43) + -4|0);
    $cmp17$i$i = ($incdec$ptr6$i$i>>>0)>($20>>>0);
    if ($cmp17$i$i) {
     $__first$addr$08$i$i = $20;$incdec$ptr9$i$i = $incdec$ptr6$i$i;
     while(1) {
      $44 = HEAP32[$__first$addr$08$i$i>>2]|0;
      $45 = HEAP32[$incdec$ptr9$i$i>>2]|0;
      HEAP32[$__first$addr$08$i$i>>2] = $45;
      HEAP32[$incdec$ptr9$i$i>>2] = $44;
      $incdec$ptr2$i$i = (($__first$addr$08$i$i) + 4|0);
      $incdec$ptr$i$i80 = (($incdec$ptr9$i$i) + -4|0);
      $cmp1$i$i = ($incdec$ptr2$i$i>>>0)<($incdec$ptr$i$i80>>>0);
      if ($cmp1$i$i) {
       $__first$addr$08$i$i = $incdec$ptr2$i$i;$incdec$ptr9$i$i = $incdec$ptr$i$i80;
      } else {
       $__db$addr$2 = $incdec$ptr15$__db$addr$0;
       break;
      }
     }
    } else {
     $__db$addr$2 = $incdec$ptr15$__db$addr$0;
    }
   }
   break;
  }
  case 2:  {
   $10 = HEAP8[$__sym>>0]|0;
   $and$i$i$i137 = $10 & 1;
   $tobool$i$i$i138 = ($and$i$i$i137<<24>>24)==(0);
   if ($tobool$i$i$i138) {
    $conv$i$i$i141 = $10&255;
    $shr1$i$i$i142 = $conv$i$i$i141 >>> 1;
    $cond$i$i144 = $shr1$i$i$i142;
   } else {
    $11 = HEAP32[$__data_$i$i$i155>>2]|0;
    $cond$i$i144 = $11;
   }
   $cmp$i145 = ($cond$i$i144|0)==(0);
   $brmerge = $cmp$i145 | $tobool;
   if ($brmerge) {
    $__db$addr$2 = $__db$addr$0220;
   } else {
    if ($tobool$i$i$i138) {
     $conv$i$i$i189 = $10&255;
     $shr1$i$i$i190 = $conv$i$i$i189 >>> 1;
     $cond$i$i157228 = $__data_$i$i$i155;$cond$i6$i193 = $shr1$i$i$i190;$cond$i7$i192 = $__data_$i$i$i155;
    } else {
     $12 = HEAP32[$__data_$i1$i$i185>>2]|0;
     $13 = HEAP32[$__data_$i$i$i155>>2]|0;
     $cond$i$i157228 = $12;$cond$i6$i193 = $13;$cond$i7$i192 = $12;
    }
    $add$ptr$i194 = (($cond$i7$i192) + ($cond$i6$i193<<2)|0);
    $14 = HEAP32[$__me>>2]|0;
    $lnot$i4$i$i166 = ($cond$i$i157228|0)==($add$ptr$i194|0);
    if ($lnot$i4$i$i166) {
     $__result$addr$0$lcssa$i$i180 = $14;
    } else {
     $__i$i$i$i$promoted7$i$i167 = $cond$i$i157228;
     $add$ptr$i194$sum = (($cond$i6$i193) + -1)|0;
     $scevgep$i$i168 = (($cond$i7$i192) + ($add$ptr$i194$sum<<2)|0);
     $15 = (0 - ($__i$i$i$i$promoted7$i$i167))|0;
     $uglygep$i$i170 = (($scevgep$i$i168) + ($15)|0);
     $uglygep8$i$i171 = $uglygep$i$i170;
     $16 = $uglygep8$i$i171 >>> 2;
     $18 = $cond$i$i157228;$__result$addr$05$i$i173 = $14;
     while(1) {
      $17 = HEAP32[$18>>2]|0;
      HEAP32[$__result$addr$05$i$i173>>2] = $17;
      $incdec$ptr$i$i$i174 = (($18) + 4|0);
      $lnot$i$i$i176 = ($incdec$ptr$i$i$i174|0)==($add$ptr$i194|0);
      if ($lnot$i$i$i176) {
       break;
      }
      $incdec$ptr$i$i175 = (($__result$addr$05$i$i173) + 4|0);
      $18 = $incdec$ptr$i$i$i174;$__result$addr$05$i$i173 = $incdec$ptr$i$i175;
     }
     $19 = (($16) + 1)|0;
     $scevgep9$i$i178 = (($14) + ($19<<2)|0);
     $__result$addr$0$lcssa$i$i180 = $scevgep9$i$i178;
    }
    HEAP32[$__me>>2] = $__result$addr$0$lcssa$i$i180;
    $__db$addr$2 = $__db$addr$0220;
   }
   break;
  }
  default: {
   $__db$addr$2 = $__db$addr$0220;
  }
  }
  $inc83 = (($__p$0219) + 1)|0;
  $exitcond = ($inc83|0)==(4);
  if ($exitcond) {
   break;
  } else {
   $__db$addr$0220 = $__db$addr$2;$__p$0219 = $inc83;
  }
 }
 $46 = HEAP8[$__sn>>0]|0;
 $and$i$i = $46 & 1;
 $tobool$i$i = ($and$i$i<<24>>24)==(0);
 if ($tobool$i$i) {
  $conv$i$i = $46&255;
  $shr1$i$i = $conv$i$i >>> 1;
  $cond$i = $shr1$i$i;
 } else {
  $47 = HEAP32[$__data_$i$i$i$i130>>2]|0;
  $cond$i = $47;
 }
 $cmp86 = ($cond$i>>>0)>(1);
 if ($cmp86) {
  if ($tobool$i$i) {
   $conv$i$i$i69 = $46&255;
   $shr1$i$i$i70 = $conv$i$i$i69 >>> 1;
   $$pn = $__data_$i$i$i$i130;$cond$i6$i = $shr1$i$i$i70;$cond$i7$i = $__data_$i$i$i$i130;
  } else {
   $48 = HEAP32[$__data_$i1$i$i$i>>2]|0;
   $49 = HEAP32[$__data_$i$i$i$i130>>2]|0;
   $$pn = $48;$cond$i6$i = $49;$cond$i7$i = $48;
  }
  $add$ptr$i$i238 = (($$pn) + 4|0);
  $add$ptr$i = (($cond$i7$i) + ($cond$i6$i<<2)|0);
  $50 = HEAP32[$__me>>2]|0;
  $lnot$i4$i$i = ($add$ptr$i$i238|0)==($add$ptr$i|0);
  if ($lnot$i4$i$i) {
   $__result$addr$0$lcssa$i$i = $50;
  } else {
   $__i$i$i$i$promoted7$i$i = $add$ptr$i$i238;
   $add$ptr$i$sum = (($cond$i6$i) + -1)|0;
   $scevgep$i$i = (($cond$i7$i) + ($add$ptr$i$sum<<2)|0);
   $51 = (0 - ($__i$i$i$i$promoted7$i$i))|0;
   $uglygep$i$i = (($scevgep$i$i) + ($51)|0);
   $uglygep8$i$i = $uglygep$i$i;
   $52 = $uglygep8$i$i >>> 2;
   $54 = $add$ptr$i$i238;$__result$addr$05$i$i = $50;
   while(1) {
    $53 = HEAP32[$54>>2]|0;
    HEAP32[$__result$addr$05$i$i>>2] = $53;
    $incdec$ptr$i$i$i = (($54) + 4|0);
    $incdec$ptr$i$i = (($__result$addr$05$i$i) + 4|0);
    $lnot$i$i$i = ($incdec$ptr$i$i$i|0)==($add$ptr$i|0);
    if ($lnot$i$i$i) {
     break;
    } else {
     $54 = $incdec$ptr$i$i$i;$__result$addr$05$i$i = $incdec$ptr$i$i;
    }
   }
   $55 = (($52) + 1)|0;
   $scevgep9$i$i = (($50) + ($55<<2)|0);
   $__result$addr$0$lcssa$i$i = $scevgep9$i$i;
  }
  HEAP32[$__me>>2] = $__result$addr$0$lcssa$i$i;
 }
 $and92 = $__flags & 176;
 if ((($and92|0) == 32)) {
  $56 = HEAP32[$__me>>2]|0;
  HEAP32[$__mi>>2] = $56;
  STACKTOP = sp;return;
 } else if ((($and92|0) == 16)) {
  STACKTOP = sp;return;
 } else {
  HEAP32[$__mi>>2] = $__mb;
  STACKTOP = sp;return;
 }
}
function __ZNKSt3__19money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_bRNS_8ios_baseEwRKNS_12basic_stringIwS3_NS_9allocatorIwEEEE($agg$result,$this,$__s,$__intl,$__iob,$__fl,$__digits) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__s = $__s|0;
 $__intl = $__intl|0;
 $__iob = $__iob|0;
 $__fl = $__fl|0;
 $__digits = $__digits|0;
 var $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__data_$i$i$i$i = 0, $__data_$i$i$i49 = 0, $__data_$i1$i$i$i = 0, $__data_$i1$i$i47 = 0, $__dp = 0, $__fd = 0, $__fmtflags_$i = 0, $__grp = 0, $__loc = 0;
 var $__mb$0 = 0, $__mbuf = 0, $__me = 0, $__mi = 0, $__pat = 0, $__size_$i2$i = 0, $__size_$i2$i103 = 0, $__size_$i2$i26 = 0, $__size_$i2$i36 = 0, $__size_$i2$i62 = 0, $__size_$i2$i72 = 0, $__size_$i2$i83 = 0, $__size_$i2$i93 = 0, $__sn = 0, $__sym = 0, $__ts = 0, $add$ptr = 0, $add116 = 0, $add17 = 0, $add18 = 0;
 var $add18$pn = 0, $add22 = 0, $add23 = 0, $agg$tmp = 0, $agg$tmp$byval_copy = 0, $and$i$i = 0, $and$i$i$i45 = 0, $and$i$i101 = 0, $and$i$i24 = 0, $and$i$i70 = 0, $and$i$i81 = 0, $and$i$i91 = 0, $call$i14 = 0, $call$i1718 = 0, $call29 = 0, $cmp = 0, $cmp13 = 0, $cmp25 = 0, $cmp31 = 0, $cmp7 = 0;
 var $cond = 0, $cond$i = 0, $cond$i$i$i = 0, $cond$i$i121 = 0, $cond$i108 = 0, $cond$i31 = 0, $cond$i41 = 0, $cond$i67 = 0, $cond$i77 = 0, $cond$i88 = 0, $cond$i98 = 0, $conv$i$i = 0, $conv$i$i105 = 0, $conv$i$i28 = 0, $conv$i$i38 = 0, $conv$i$i64 = 0, $conv$i$i74 = 0, $conv$i$i85 = 0, $conv$i$i95 = 0, $ehselector$slot$0 = 0;
 var $ehselector$slot$1 = 0, $exn$slot$0 = 0, $exn$slot$1 = 0, $mul = 0, $mul26 = 0, $shr1$i$i = 0, $shr1$i$i106 = 0, $shr1$i$i29 = 0, $shr1$i$i39 = 0, $shr1$i$i65 = 0, $shr1$i$i75 = 0, $shr1$i$i86 = 0, $shr1$i$i96 = 0, $sub = 0, $tobool$i$i = 0, $tobool$i$i$i = 0, $tobool$i$i$i46 = 0, $tobool$i$i$i54 = 0, $tobool$i$i102 = 0, $tobool$i$i25 = 0;
 var $tobool$i$i71 = 0, $tobool$i$i82 = 0, $tobool$i$i92 = 0, $vfn$i = 0, $vtable$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 480|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $agg$tmp$byval_copy = sp + 456|0;
 $__loc = sp + 440|0;
 $__pat = sp + 12|0;
 $__dp = sp + 8|0;
 $__ts = sp + 436|0;
 $__grp = sp + 444|0;
 $__sym = sp + 460|0;
 $__sn = sp + 16|0;
 $__fd = sp;
 $__mbuf = sp + 32|0;
 $__mi = sp + 4|0;
 $__me = sp + 432|0;
 $agg$tmp = sp + 28|0;
 __ZNKSt3__18ios_base6getlocEv($__loc,$__iob);
 __THREW__ = 0;
 $call$i14 = (invoke_iii(359,($__loc|0),(4608|0))|0);
 $0 = __THREW__; __THREW__ = 0;
 $1 = $0&1;
 do {
  if (!($1)) {
   $2 = HEAP8[$__digits>>0]|0;
   $and$i$i = $2 & 1;
   $tobool$i$i = ($and$i$i<<24>>24)==(0);
   if ($tobool$i$i) {
    $conv$i$i = $2&255;
    $shr1$i$i = $conv$i$i >>> 1;
    $cond$i = $shr1$i$i;
   } else {
    $__size_$i2$i = (($__digits) + 4|0);
    $3 = HEAP32[$__size_$i2$i>>2]|0;
    $cond$i = $3;
   }
   $cmp = ($cond$i|0)==(0);
   if ($cmp) {
    $9 = 0;
   } else {
    if ($tobool$i$i) {
     $__data_$i$i$i$i = (($__digits) + 4|0);
     $cond$i$i$i = $__data_$i$i$i$i;
    } else {
     $__data_$i1$i$i$i = (($__digits) + 8|0);
     $4 = HEAP32[$__data_$i1$i$i$i>>2]|0;
     $cond$i$i$i = $4;
    }
    $5 = HEAP32[$cond$i$i$i>>2]|0;
    $vtable$i = HEAP32[$call$i14>>2]|0;
    $vfn$i = (($vtable$i) + 44|0);
    $6 = HEAP32[$vfn$i>>2]|0;
    __THREW__ = 0;
    $call$i1718 = (invoke_iii($6|0,($call$i14|0),45)|0);
    $7 = __THREW__; __THREW__ = 0;
    $8 = $7&1;
    if ($8) {
     break;
    }
    $cmp7 = ($5|0)==($call$i1718|0);
    $9 = $cmp7;
   }
   HEAP32[$__pat>>2] = 0;
   ;HEAP32[$__grp+0>>2]=0|0;HEAP32[$__grp+4>>2]=0|0;HEAP32[$__grp+8>>2]=0|0;
   ;HEAP32[$__sym+0>>2]=0|0;HEAP32[$__sym+4>>2]=0|0;HEAP32[$__sym+8>>2]=0|0;
   ;HEAP32[$__sn+0>>2]=0|0;HEAP32[$__sn+4>>2]=0|0;HEAP32[$__sn+8>>2]=0|0;
   __THREW__ = 0;
   invoke_viiiiiiiiii(429,($__intl|0),($9|0),($__loc|0),($__pat|0),($__dp|0),($__ts|0),($__grp|0),($__sym|0),($__sn|0),($__fd|0));
   $10 = __THREW__; __THREW__ = 0;
   $11 = $10&1;
   L15: do {
    if ($11) {
     $30 = ___cxa_find_matching_catch()|0;
     $31 = tempRet0;
     $ehselector$slot$0 = $31;$exn$slot$0 = $30;
    } else {
     $12 = HEAP8[$__digits>>0]|0;
     $and$i$i24 = $12 & 1;
     $tobool$i$i25 = ($and$i$i24<<24>>24)==(0);
     if ($tobool$i$i25) {
      $conv$i$i28 = $12&255;
      $shr1$i$i29 = $conv$i$i28 >>> 1;
      $cond$i31 = $shr1$i$i29;
     } else {
      $__size_$i2$i26 = (($__digits) + 4|0);
      $13 = HEAP32[$__size_$i2$i26>>2]|0;
      $cond$i31 = $13;
     }
     $14 = HEAP32[$__fd>>2]|0;
     $cmp13 = ($cond$i31|0)>($14|0);
     if ($cmp13) {
      if ($tobool$i$i25) {
       $conv$i$i64 = $12&255;
       $shr1$i$i65 = $conv$i$i64 >>> 1;
       $cond$i67 = $shr1$i$i65;
      } else {
       $__size_$i2$i62 = (($__digits) + 4|0);
       $15 = HEAP32[$__size_$i2$i62>>2]|0;
       $cond$i67 = $15;
      }
      $sub = (($cond$i67) - ($14))|0;
      $mul = $sub << 1;
      $16 = HEAP8[$__sn>>0]|0;
      $and$i$i70 = $16 & 1;
      $tobool$i$i71 = ($and$i$i70<<24>>24)==(0);
      if ($tobool$i$i71) {
       $conv$i$i74 = $16&255;
       $shr1$i$i75 = $conv$i$i74 >>> 1;
       $cond$i77 = $shr1$i$i75;
      } else {
       $__size_$i2$i72 = (($__sn) + 4|0);
       $17 = HEAP32[$__size_$i2$i72>>2]|0;
       $cond$i77 = $17;
      }
      $18 = HEAP8[$__sym>>0]|0;
      $and$i$i81 = $18 & 1;
      $tobool$i$i82 = ($and$i$i81<<24>>24)==(0);
      if ($tobool$i$i82) {
       $conv$i$i85 = $18&255;
       $shr1$i$i86 = $conv$i$i85 >>> 1;
       $cond$i88 = $shr1$i$i86;
      } else {
       $__size_$i2$i83 = (($__sym) + 4|0);
       $19 = HEAP32[$__size_$i2$i83>>2]|0;
       $cond$i88 = $19;
      }
      $add116 = $mul | 1;
      $add17 = (($cond$i77) + ($add116))|0;
      $add18 = (($add17) + ($cond$i88))|0;
      $add18$pn = $add18;
     } else {
      $20 = HEAP8[$__sn>>0]|0;
      $and$i$i91 = $20 & 1;
      $tobool$i$i92 = ($and$i$i91<<24>>24)==(0);
      if ($tobool$i$i92) {
       $conv$i$i95 = $20&255;
       $shr1$i$i96 = $conv$i$i95 >>> 1;
       $cond$i98 = $shr1$i$i96;
      } else {
       $__size_$i2$i93 = (($__sn) + 4|0);
       $21 = HEAP32[$__size_$i2$i93>>2]|0;
       $cond$i98 = $21;
      }
      $22 = HEAP8[$__sym>>0]|0;
      $and$i$i101 = $22 & 1;
      $tobool$i$i102 = ($and$i$i101<<24>>24)==(0);
      if ($tobool$i$i102) {
       $conv$i$i105 = $22&255;
       $shr1$i$i106 = $conv$i$i105 >>> 1;
       $cond$i108 = $shr1$i$i106;
      } else {
       $__size_$i2$i103 = (($__sym) + 4|0);
       $23 = HEAP32[$__size_$i2$i103>>2]|0;
       $cond$i108 = $23;
      }
      $add22 = (($cond$i98) + 2)|0;
      $add23 = (($add22) + ($cond$i108))|0;
      $add18$pn = $add23;
     }
     $cond = (($add18$pn) + ($14))|0;
     $cmp25 = ($cond>>>0)>(100);
     do {
      if ($cmp25) {
       $mul26 = $cond << 2;
       $call29 = (_malloc($mul26)|0);
       $cmp31 = ($call29|0)==(0|0);
       if ($cmp31) {
        __THREW__ = 0;
        invoke_v(383);
        $24 = __THREW__; __THREW__ = 0;
        $25 = $24&1;
        if ($25) {
         $26 = ___cxa_find_matching_catch()|0;
         $27 = tempRet0;
         $ehselector$slot$0 = $27;$exn$slot$0 = $26;
         break L15;
        } else {
         $$pre = HEAP8[$__digits>>0]|0;
         $34 = 0;$36 = $$pre;$__mb$0 = 0;
         break;
        }
       } else {
        $34 = $call29;$36 = $12;$__mb$0 = $call29;
       }
      } else {
       $34 = 0;$36 = $12;$__mb$0 = $__mbuf;
      }
     } while(0);
     $__fmtflags_$i = (($__iob) + 4|0);
     $35 = HEAP32[$__fmtflags_$i>>2]|0;
     $and$i$i$i45 = $36 & 1;
     $tobool$i$i$i46 = ($and$i$i$i45<<24>>24)==(0);
     if ($tobool$i$i$i46) {
      $__data_$i$i$i49 = (($__digits) + 4|0);
      $conv$i$i38 = $36&255;
      $shr1$i$i39 = $conv$i$i38 >>> 1;
      $cond$i$i121 = $__data_$i$i$i49;$cond$i41 = $shr1$i$i39;
     } else {
      $__data_$i1$i$i47 = (($__digits) + 8|0);
      $37 = HEAP32[$__data_$i1$i$i47>>2]|0;
      $__size_$i2$i36 = (($__digits) + 4|0);
      $38 = HEAP32[$__size_$i2$i36>>2]|0;
      $cond$i$i121 = $37;$cond$i41 = $38;
     }
     $add$ptr = (($cond$i$i121) + ($cond$i41<<2)|0);
     $39 = HEAP32[$__dp>>2]|0;
     $40 = HEAP32[$__ts>>2]|0;
     __THREW__ = 0;
     invoke_viiiiiiiiiiiiiii(430,($__mb$0|0),($__mi|0),($__me|0),($35|0),($cond$i$i121|0),($add$ptr|0),($call$i14|0),($9|0),($__pat|0),($39|0),($40|0),($__grp|0),($__sym|0),($__sn|0),($14|0));
     $41 = __THREW__; __THREW__ = 0;
     $42 = $41&1;
     if (!($42)) {
      $43 = HEAP32[$__s>>2]|0;
      HEAP32[$agg$tmp>>2] = $43;
      $44 = HEAP32[$__mi>>2]|0;
      $45 = HEAP32[$__me>>2]|0;
      __THREW__ = 0;
      ;HEAP32[$agg$tmp$byval_copy+0>>2]=HEAP32[$agg$tmp+0>>2]|0;
      invoke_viiiiiii(408,($agg$result|0),($agg$tmp$byval_copy|0),($__mb$0|0),($44|0),($45|0),($__iob|0),($__fl|0));
      $46 = __THREW__; __THREW__ = 0;
      $47 = $46&1;
      if (!($47)) {
       $tobool$i$i$i = ($34|0)==(0|0);
       if ($tobool$i$i$i) {
        __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($__sn);
        __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($__sym);
        __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grp);
        $48 = HEAP32[$__loc>>2]|0;
        (__ZNSt3__114__shared_count16__release_sharedEv($48)|0);
        STACKTOP = sp;return;
       }
       _free($34);
       __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($__sn);
       __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($__sym);
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grp);
       $48 = HEAP32[$__loc>>2]|0;
       (__ZNSt3__114__shared_count16__release_sharedEv($48)|0);
       STACKTOP = sp;return;
      }
     }
     $32 = ___cxa_find_matching_catch()|0;
     $33 = tempRet0;
     $tobool$i$i$i54 = ($34|0)==(0|0);
     if ($tobool$i$i$i54) {
      $ehselector$slot$0 = $33;$exn$slot$0 = $32;
     } else {
      _free($34);
      $ehselector$slot$0 = $33;$exn$slot$0 = $32;
     }
    }
   } while(0);
   __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($__sn);
   __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($__sym);
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grp);
   $ehselector$slot$1 = $ehselector$slot$0;$exn$slot$1 = $exn$slot$0;
   $49 = HEAP32[$__loc>>2]|0;
   (__ZNSt3__114__shared_count16__release_sharedEv($49)|0);
   ___resumeException($exn$slot$1|0);
   // unreachable;
  }
 } while(0);
 $28 = ___cxa_find_matching_catch()|0;
 $29 = tempRet0;
 $ehselector$slot$1 = $29;$exn$slot$1 = $28;
 $49 = HEAP32[$__loc>>2]|0;
 (__ZNSt3__114__shared_count16__release_sharedEv($49)|0);
 ___resumeException($exn$slot$1|0);
 // unreachable;
}
function __ZNSt3__18messagesIcED0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 STACKTOP = sp;return;
}
function __ZNSt3__18messagesIcED1Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return;
}
function __ZNKSt3__18messagesIcE7do_openERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERKNS_6localeE($this,$__nm,$0) {
 $this = $this|0;
 $__nm = $__nm|0;
 $0 = $0|0;
 var $$shr = 0, $1 = 0, $2 = 0, $3 = 0, $__data_$i$i$i$i = 0, $and$i$i$i$i = 0, $arrayidx$i$i$i$i = 0, $call2 = 0, $cond$i$i$i = 0, $not$cmp = 0, $shr = 0, $tobool$i$i$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP8[$__nm>>0]|0;
 $and$i$i$i$i = $1 & 1;
 $tobool$i$i$i$i = ($and$i$i$i$i<<24>>24)==(0);
 if ($tobool$i$i$i$i) {
  $arrayidx$i$i$i$i = (($__nm) + 1|0);
  $cond$i$i$i = $arrayidx$i$i$i$i;
 } else {
  $__data_$i$i$i$i = (($__nm) + 8|0);
  $2 = HEAP32[$__data_$i$i$i$i>>2]|0;
  $cond$i$i$i = $2;
 }
 $call2 = (_catopen(($cond$i$i$i|0),1)|0);
 $3 = $call2;
 $not$cmp = ($call2|0)!=((-1)|0);
 $shr = $not$cmp&1;
 $$shr = $3 >>> $shr;
 STACKTOP = sp;return ($$shr|0);
}
function __ZNKSt3__18messagesIcE6do_getEiiiRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE($agg$result,$this,$__c,$__set,$__msgid,$__dflt) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__c = $__c|0;
 $__set = $__set|0;
 $__msgid = $__msgid|0;
 $__dflt = $__dflt|0;
 var $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__data_$i$i$i$i = 0, $__data_$i$i$i$i23 = 0, $__nb$addr$04$i = 0, $__ndflt = 0, $__size_$i2$i = 0, $__wb$addr$04$i = 0, $add$ptr = 0, $add$ptr17 = 0, $and$i$i$i$i21 = 0, $arrayidx$i$i$i$i = 0, $arrayidx$i$i$i$i26 = 0, $arrayidx$i$i$i$i36 = 0, $call10 = 0, $call16 = 0, $cmp = 0;
 var $cmp3$i = 0, $cmp3$i14 = 0, $cmp49 = 0, $cond$i = 0, $cond$i$i$i = 0, $cond$i$i$i284345 = 0, $cond$i$i$i3847 = 0, $conv$i$i = 0, $ehselector$slot$0 = 0, $exitcond$i = 0, $exitcond$i17 = 0, $exn$slot$0 = 0, $incdec$ptr$i = 0, $incdec$ptr$i16 = 0, $lpad$phi$index = 0, $lpad$phi$index2 = 0, $phitmp = 0, $phitmp42 = 0, $shl = 0, $shl50 = 0;
 var $shr1$i$i = 0, $tobool$i$i$i$i22 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__ndflt = sp;
 ;HEAP32[$__ndflt+0>>2]=0|0;HEAP32[$__ndflt+4>>2]=0|0;HEAP32[$__ndflt+8>>2]=0|0;
 $0 = HEAP8[$__dflt>>0]|0;
 $and$i$i$i$i21 = $0 & 1;
 $tobool$i$i$i$i22 = ($and$i$i$i$i21<<24>>24)==(0);
 if ($tobool$i$i$i$i22) {
  $arrayidx$i$i$i$i26 = (($__dflt) + 1|0);
  $arrayidx$i$i$i$i36 = (($__dflt) + 1|0);
  $conv$i$i = $0&255;
  $shr1$i$i = $conv$i$i >>> 1;
  $cond$i = $shr1$i$i;$cond$i$i$i284345 = $arrayidx$i$i$i$i26;$cond$i$i$i3847 = $arrayidx$i$i$i$i36;
 } else {
  $__data_$i$i$i$i23 = (($__dflt) + 8|0);
  $1 = HEAP32[$__data_$i$i$i$i23>>2]|0;
  $__size_$i2$i = (($__dflt) + 4|0);
  $2 = HEAP32[$__size_$i2$i>>2]|0;
  $cond$i = $2;$cond$i$i$i284345 = $1;$cond$i$i$i3847 = $1;
 }
 $add$ptr = (($cond$i$i$i3847) + ($cond$i)|0);
 $cmp3$i14 = ($cond$i$i$i284345>>>0)<($add$ptr>>>0);
 do {
  if ($cmp3$i14) {
   $__wb$addr$04$i = $cond$i$i$i284345;
   while(1) {
    $5 = HEAP8[$__wb$addr$04$i>>0]|0;
    __THREW__ = 0;
    invoke_vii(415,($__ndflt|0),($5|0));
    $6 = __THREW__; __THREW__ = 0;
    $7 = $6&1;
    if ($7) {
     label = 12;
     break;
    }
    $incdec$ptr$i16 = (($__wb$addr$04$i) + 1|0);
    $exitcond$i17 = ($incdec$ptr$i16|0)==($add$ptr|0);
    if ($exitcond$i17) {
     break;
    } else {
     $__wb$addr$04$i = $incdec$ptr$i16;
    }
   }
   if ((label|0) == 12) {
    $14 = ___cxa_find_matching_catch()|0;
    $15 = tempRet0;
    $lpad$phi$index = $14;$lpad$phi$index2 = $15;
    break;
   }
   $$pre = HEAP8[$__ndflt>>0]|0;
   $phitmp = $$pre & 1;
   $phitmp42 = ($phitmp<<24>>24)==(0);
   $cmp = ($__c|0)==(-1);
   $shl = $__c << 1;
   $8 = $shl;
   $9 = $cmp ? (-1) : $8;
   if ($phitmp42) {
    $23 = $9;
    label = 10;
   } else {
    $__data_$i$i$i$i = (($__ndflt) + 8|0);
    $10 = HEAP32[$__data_$i$i$i$i>>2]|0;
    $11 = $9;$cond$i$i$i = $10;
    label = 11;
   }
  } else {
   $cmp49 = ($__c|0)==(-1);
   $shl50 = $__c << 1;
   $3 = $shl50;
   $4 = $cmp49 ? (-1) : $3;
   $23 = $4;
   label = 10;
  }
 } while(0);
 if ((label|0) == 10) {
  $arrayidx$i$i$i$i = (($__ndflt) + 1|0);
  $11 = $23;$cond$i$i$i = $arrayidx$i$i$i$i;
  label = 11;
 }
 do {
  if ((label|0) == 11) {
   __THREW__ = 0;
   $call10 = (invoke_iiiii(431,($11|0),($__set|0),($__msgid|0),($cond$i$i$i|0))|0);
   $12 = __THREW__; __THREW__ = 0;
   $13 = $12&1;
   if ($13) {
    $16 = ___cxa_find_matching_catch()|0;
    $17 = tempRet0;
    $lpad$phi$index = $16;$lpad$phi$index2 = $17;
    break;
   }
   ;HEAP32[$agg$result+0>>2]=0|0;HEAP32[$agg$result+4>>2]=0|0;HEAP32[$agg$result+8>>2]=0|0;
   $call16 = (_strlen(($call10|0))|0);
   $add$ptr17 = (($call10) + ($call16)|0);
   $cmp3$i = ($call16|0)>(0);
   if ($cmp3$i) {
    $__nb$addr$04$i = $call10;
   } else {
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__ndflt);
    STACKTOP = sp;return;
   }
   while(1) {
    $18 = HEAP8[$__nb$addr$04$i>>0]|0;
    __THREW__ = 0;
    invoke_vii(415,($agg$result|0),($18|0));
    $19 = __THREW__; __THREW__ = 0;
    $20 = $19&1;
    if ($20) {
     break;
    }
    $incdec$ptr$i = (($__nb$addr$04$i) + 1|0);
    $exitcond$i = ($incdec$ptr$i|0)==($add$ptr17|0);
    if ($exitcond$i) {
     label = 19;
     break;
    } else {
     $__nb$addr$04$i = $incdec$ptr$i;
    }
   }
   if ((label|0) == 19) {
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__ndflt);
    STACKTOP = sp;return;
   }
   $21 = ___cxa_find_matching_catch()|0;
   $22 = tempRet0;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($agg$result);
   $ehselector$slot$0 = $22;$exn$slot$0 = $21;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__ndflt);
   ___resumeException($exn$slot$0|0);
   // unreachable;
  }
 } while(0);
 $ehselector$slot$0 = $lpad$phi$index2;$exn$slot$0 = $lpad$phi$index;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__ndflt);
 ___resumeException($exn$slot$0|0);
 // unreachable;
}
function __ZNKSt3__18messagesIcE8do_closeEi($this,$__c) {
 $this = $this|0;
 $__c = $__c|0;
 var $0 = 0, $1 = 0, $cmp = 0, $shl = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $cmp = ($__c|0)==(-1);
 $shl = $__c << 1;
 $0 = $shl;
 $1 = $cmp ? (-1) : $0;
 (_catclose(($1|0))|0);
 STACKTOP = sp;return;
}
function __ZNSt3__18messagesIwED0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 STACKTOP = sp;return;
}
function __ZNSt3__18messagesIwED1Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return;
}
function __ZNKSt3__18messagesIwE7do_openERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERKNS_6localeE($this,$__nm,$0) {
 $this = $this|0;
 $__nm = $__nm|0;
 $0 = $0|0;
 var $$shr = 0, $1 = 0, $2 = 0, $3 = 0, $__data_$i$i$i$i = 0, $and$i$i$i$i = 0, $arrayidx$i$i$i$i = 0, $call2 = 0, $cond$i$i$i = 0, $not$cmp = 0, $shr = 0, $tobool$i$i$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP8[$__nm>>0]|0;
 $and$i$i$i$i = $1 & 1;
 $tobool$i$i$i$i = ($and$i$i$i$i<<24>>24)==(0);
 if ($tobool$i$i$i$i) {
  $arrayidx$i$i$i$i = (($__nm) + 1|0);
  $cond$i$i$i = $arrayidx$i$i$i$i;
 } else {
  $__data_$i$i$i$i = (($__nm) + 8|0);
  $2 = HEAP32[$__data_$i$i$i$i>>2]|0;
  $cond$i$i$i = $2;
 }
 $call2 = (_catopen(($cond$i$i$i|0),1)|0);
 $3 = $call2;
 $not$cmp = ($call2|0)!=((-1)|0);
 $shr = $not$cmp&1;
 $$shr = $3 >>> $shr;
 STACKTOP = sp;return ($$shr|0);
}
function __ZNKSt3__18messagesIwE6do_getEiiiRKNS_12basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEEE($agg$result,$this,$__c,$__set,$__msgid,$__dflt) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__c = $__c|0;
 $__set = $__set|0;
 $__msgid = $__msgid|0;
 $__dflt = $__dflt|0;
 var $$pre$i = 0, $$pre$i45 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__bn$i = 0, $__bn$i31 = 0, $__buf$i = 0;
 var $__buf$i30 = 0, $__data_$i$i$i$i = 0, $__data_$i$i$i$i17 = 0, $__data_$i$i$i$i56 = 0, $__data_$i1$i$i$i = 0, $__mb$i = 0, $__mb$i28 = 0, $__nb$addr$015$i = 0, $__ndflt = 0, $__nn$i = 0, $__p$010$i = 0, $__p$013$i = 0, $__shared_owners_$i$i$i$i$i = 0, $__shared_owners_$i$i$i$i$i23 = 0, $__size_$i2$i = 0, $__wb$addr$012$i = 0, $__wn$i = 0, $add$ptr = 0, $add$ptr$i = 0, $add$ptr$i34 = 0;
 var $add$ptr20 = 0, $add$ptr5$i = 0, $and$i$i$i$i = 0, $and$i$i$i$i54 = 0, $arrayidx$i$i$i$i = 0, $call$i10 = 0, $call$i50 = 0, $call11 = 0, $call19 = 0, $cmp = 0, $cmp$i = 0, $cmp$i47 = 0, $cmp11$i = 0, $cmp14$i = 0, $cmp3$i = 0, $cmp4$i = 0, $cmp5$i = 0, $cmp6$i = 0, $cmp7$i = 0, $cmp7$i43 = 0;
 var $cmp79$i = 0, $cmp9$i = 0, $cmp912$i = 0, $cond$i = 0, $cond$i$i$i1977 = 0, $cond$i$i$i59 = 0, $cond$i$i$i7375 = 0, $cond$i21 = 0, $conv$i$i = 0, $ehselector$slot$1 = 0, $exn$slot$1 = 0, $incdec$ptr$i = 0, $incdec$ptr$i42 = 0, $lpad$phi$index = 0, $lpad$phi$index10 = 0, $lpad$phi67$index = 0, $lpad$phi67$index3 = 0, $or$cond11$i = 0, $or$cond8$i = 0, $shl = 0;
 var $shr1$i$i = 0, $sub$ptr$lhs$cast$i = 0, $sub$ptr$rhs$cast$i = 0, $sub$ptr$sub$i = 0, $temp$lvalue = 0, $temp$lvalue12 = 0, $tobool$i$i$i$i = 0, $tobool$i$i$i$i55 = 0, $vfn$i = 0, $vfn$i38 = 0, $vtable$i = 0, $vtable$i$pre = 0, $vtable$i37 = 0, $vtable$i37$pre = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 224|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__mb$i28 = sp + 8|0;
 $__buf$i30 = sp + 192|0;
 $__bn$i31 = sp + 168|0;
 $__wn$i = sp + 152|0;
 $__mb$i = sp;
 $__buf$i = sp + 24|0;
 $__bn$i = sp + 20|0;
 $__nn$i = sp + 16|0;
 $__ndflt = sp + 172|0;
 $temp$lvalue = sp + 160|0;
 $temp$lvalue12 = sp + 184|0;
 ;HEAP32[$__ndflt+0>>2]=0|0;HEAP32[$__ndflt+4>>2]=0|0;HEAP32[$__ndflt+8>>2]=0|0;
 $__shared_owners_$i$i$i$i$i = (($temp$lvalue) + 4|0);
 HEAP32[$__shared_owners_$i$i$i$i$i>>2] = 0;
 HEAP32[$temp$lvalue>>2] = ((6264 + 8|0));
 $0 = HEAP8[$__dflt>>0]|0;
 $and$i$i$i$i = $0 & 1;
 $tobool$i$i$i$i = ($and$i$i$i$i<<24>>24)==(0);
 if ($tobool$i$i$i$i) {
  $__data_$i$i$i$i = (($__dflt) + 4|0);
  $__data_$i$i$i$i17 = (($__dflt) + 4|0);
  $conv$i$i = $0&255;
  $shr1$i$i = $conv$i$i >>> 1;
  $cond$i$i$i1977 = $__data_$i$i$i$i17;$cond$i$i$i7375 = $__data_$i$i$i$i;$cond$i21 = $shr1$i$i;
 } else {
  $__data_$i1$i$i$i = (($__dflt) + 8|0);
  $1 = HEAP32[$__data_$i1$i$i$i>>2]|0;
  $__size_$i2$i = (($__dflt) + 4|0);
  $2 = HEAP32[$__size_$i2$i>>2]|0;
  $cond$i$i$i1977 = $1;$cond$i$i$i7375 = $1;$cond$i21 = $2;
 }
 $add$ptr = (($cond$i$i$i1977) + ($cond$i21<<2)|0);
 $3 = $__mb$i28;
 $4 = $3;
 HEAP32[$4>>2] = 0;
 $5 = (($3) + 4)|0;
 $6 = $5;
 HEAP32[$6>>2] = 0;
 $cmp11$i = ($cond$i$i$i7375>>>0)<($add$ptr>>>0);
 L5: do {
  if ($cmp11$i) {
   $add$ptr$i34 = (($__buf$i30) + 32|0);
   $__wb$addr$012$i = $cond$i$i$i7375;$vtable$i37 = ((6264 + 8|0));
   L7: while(1) {
    HEAP32[$__wn$i>>2] = $__wb$addr$012$i;
    $vfn$i38 = (($vtable$i37) + 12|0);
    $7 = HEAP32[$vfn$i38>>2]|0;
    __THREW__ = 0;
    $call$i50 = (invoke_iiiiiiiii($7|0,($temp$lvalue|0),($__mb$i28|0),($__wb$addr$012$i|0),($add$ptr|0),($__wn$i|0),($__buf$i30|0),($add$ptr$i34|0),($__bn$i31|0))|0);
    $8 = __THREW__; __THREW__ = 0;
    $9 = $8&1;
    if ($9) {
     label = 22;
     break;
    }
    $cmp4$i = ($call$i50|0)==(2);
    $10 = HEAP32[$__wn$i>>2]|0;
    $cmp5$i = ($10|0)==($__wb$addr$012$i|0);
    $or$cond8$i = $cmp4$i | $cmp5$i;
    if ($or$cond8$i) {
     label = 9;
     break;
    }
    $11 = HEAP32[$__bn$i31>>2]|0;
    $cmp79$i = ($__buf$i30>>>0)<($11>>>0);
    if ($cmp79$i) {
     $__p$010$i = $__buf$i30;
     while(1) {
      $14 = HEAP8[$__p$010$i>>0]|0;
      __THREW__ = 0;
      invoke_vii(415,($__ndflt|0),($14|0));
      $15 = __THREW__; __THREW__ = 0;
      $16 = $15&1;
      if ($16) {
       label = 21;
       break L7;
      }
      $incdec$ptr$i42 = (($__p$010$i) + 1|0);
      $17 = HEAP32[$__bn$i31>>2]|0;
      $cmp7$i43 = ($incdec$ptr$i42>>>0)<($17>>>0);
      if ($cmp7$i43) {
       $__p$010$i = $incdec$ptr$i42;
      } else {
       break;
      }
     }
     $$pre$i45 = HEAP32[$__wn$i>>2]|0;
     $18 = $$pre$i45;
    } else {
     $18 = $10;
    }
    $cmp$i47 = ($18>>>0)<($add$ptr>>>0);
    if (!($cmp$i47)) {
     break L5;
    }
    $vtable$i37$pre = HEAP32[$temp$lvalue>>2]|0;
    $__wb$addr$012$i = $18;$vtable$i37 = $vtable$i37$pre;
   }
   do {
    if ((label|0) == 9) {
     __THREW__ = 0;
     invoke_vi(413,(5496|0));
     $12 = __THREW__; __THREW__ = 0;
     $13 = $12&1;
     if ($13) {
      $31 = ___cxa_find_matching_catch()|0;
      $32 = tempRet0;
      $lpad$phi67$index = $31;$lpad$phi67$index3 = $32;
      break;
     } else {
      // unreachable;
     }
    }
    else if ((label|0) == 21) {
     $27 = ___cxa_find_matching_catch()|0;
     $28 = tempRet0;
     $lpad$phi67$index = $27;$lpad$phi67$index3 = $28;
    }
    else if ((label|0) == 22) {
     $29 = ___cxa_find_matching_catch()|0;
     $30 = tempRet0;
     $lpad$phi67$index = $29;$lpad$phi67$index3 = $30;
    }
   } while(0);
   $ehselector$slot$1 = $lpad$phi67$index3;$exn$slot$1 = $lpad$phi67$index;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__ndflt);
   ___resumeException($exn$slot$1|0);
   // unreachable;
  }
 } while(0);
 $cmp = ($__c|0)==(-1);
 $shl = $__c << 1;
 $19 = $shl;
 $20 = $cmp ? (-1) : $19;
 $21 = HEAP8[$__ndflt>>0]|0;
 $and$i$i$i$i54 = $21 & 1;
 $tobool$i$i$i$i55 = ($and$i$i$i$i54<<24>>24)==(0);
 if ($tobool$i$i$i$i55) {
  $arrayidx$i$i$i$i = (($__ndflt) + 1|0);
  $cond$i$i$i59 = $arrayidx$i$i$i$i;
 } else {
  $__data_$i$i$i$i56 = (($__ndflt) + 8|0);
  $22 = HEAP32[$__data_$i$i$i$i56>>2]|0;
  $cond$i$i$i59 = $22;
 }
 __THREW__ = 0;
 $call11 = (invoke_iiiii(431,($20|0),($__set|0),($__msgid|0),($cond$i$i$i59|0))|0);
 $23 = __THREW__; __THREW__ = 0;
 $24 = $23&1;
 if ($24) {
  $25 = ___cxa_find_matching_catch()|0;
  $26 = tempRet0;
  $ehselector$slot$1 = $26;$exn$slot$1 = $25;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__ndflt);
  ___resumeException($exn$slot$1|0);
  // unreachable;
 }
 ;HEAP32[$agg$result+0>>2]=0|0;HEAP32[$agg$result+4>>2]=0|0;HEAP32[$agg$result+8>>2]=0|0;
 $__shared_owners_$i$i$i$i$i23 = (($temp$lvalue12) + 4|0);
 HEAP32[$__shared_owners_$i$i$i$i$i23>>2] = 0;
 HEAP32[$temp$lvalue12>>2] = ((6368 + 8|0));
 $call19 = (_strlen(($call11|0))|0);
 $add$ptr20 = (($call11) + ($call19)|0);
 $33 = $__mb$i;
 $34 = $33;
 HEAP32[$34>>2] = 0;
 $35 = (($33) + 4)|0;
 $36 = $35;
 HEAP32[$36>>2] = 0;
 $cmp14$i = ($call19|0)>(0);
 if (!($cmp14$i)) {
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__ndflt);
  STACKTOP = sp;return;
 }
 $sub$ptr$lhs$cast$i = $add$ptr20;
 $add$ptr5$i = (($__buf$i) + 128|0);
 $__nb$addr$015$i = $call11;$vtable$i = ((6368 + 8|0));
 L39: while(1) {
  HEAP32[$__nn$i>>2] = $__nb$addr$015$i;
  $vfn$i = (($vtable$i) + 16|0);
  $37 = HEAP32[$vfn$i>>2]|0;
  $sub$ptr$rhs$cast$i = $__nb$addr$015$i;
  $sub$ptr$sub$i = (($sub$ptr$lhs$cast$i) - ($sub$ptr$rhs$cast$i))|0;
  $cmp3$i = ($sub$ptr$sub$i|0)>(32);
  $add$ptr$i = (($__nb$addr$015$i) + 32|0);
  $cond$i = $cmp3$i ? $add$ptr$i : $add$ptr20;
  __THREW__ = 0;
  $call$i10 = (invoke_iiiiiiiii($37|0,($temp$lvalue12|0),($__mb$i|0),($__nb$addr$015$i|0),($cond$i|0),($__nn$i|0),($__buf$i|0),($add$ptr5$i|0),($__bn$i|0))|0);
  $38 = __THREW__; __THREW__ = 0;
  $39 = $38&1;
  if ($39) {
   label = 39;
   break;
  }
  $cmp6$i = ($call$i10|0)==(2);
  $40 = HEAP32[$__nn$i>>2]|0;
  $cmp7$i = ($40|0)==($__nb$addr$015$i|0);
  $or$cond11$i = $cmp6$i | $cmp7$i;
  if ($or$cond11$i) {
   label = 30;
   break;
  }
  $41 = HEAP32[$__bn$i>>2]|0;
  $cmp912$i = ($__buf$i>>>0)<($41>>>0);
  if ($cmp912$i) {
   $__p$013$i = $__buf$i;
   while(1) {
    $44 = HEAP32[$__p$013$i>>2]|0;
    __THREW__ = 0;
    invoke_vii(423,($agg$result|0),($44|0));
    $45 = __THREW__; __THREW__ = 0;
    $46 = $45&1;
    if ($46) {
     label = 38;
     break L39;
    }
    $incdec$ptr$i = (($__p$013$i) + 4|0);
    $47 = HEAP32[$__bn$i>>2]|0;
    $cmp9$i = ($incdec$ptr$i>>>0)<($47>>>0);
    if ($cmp9$i) {
     $__p$013$i = $incdec$ptr$i;
    } else {
     break;
    }
   }
   $$pre$i = HEAP32[$__nn$i>>2]|0;
   $48 = $$pre$i;
  } else {
   $48 = $40;
  }
  $cmp$i = ($48>>>0)<($add$ptr20>>>0);
  if (!($cmp$i)) {
   label = 37;
   break;
  }
  $vtable$i$pre = HEAP32[$temp$lvalue12>>2]|0;
  $__nb$addr$015$i = $48;$vtable$i = $vtable$i$pre;
 }
 do {
  if ((label|0) == 30) {
   __THREW__ = 0;
   invoke_vi(413,(5496|0));
   $42 = __THREW__; __THREW__ = 0;
   $43 = $42&1;
   if ($43) {
    $53 = ___cxa_find_matching_catch()|0;
    $54 = tempRet0;
    $lpad$phi$index = $53;$lpad$phi$index10 = $54;
    break;
   } else {
    // unreachable;
   }
  }
  else if ((label|0) == 37) {
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__ndflt);
   STACKTOP = sp;return;
  }
  else if ((label|0) == 38) {
   $49 = ___cxa_find_matching_catch()|0;
   $50 = tempRet0;
   $lpad$phi$index = $49;$lpad$phi$index10 = $50;
  }
  else if ((label|0) == 39) {
   $51 = ___cxa_find_matching_catch()|0;
   $52 = tempRet0;
   $lpad$phi$index = $51;$lpad$phi$index10 = $52;
  }
 } while(0);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($agg$result);
 $ehselector$slot$1 = $lpad$phi$index10;$exn$slot$1 = $lpad$phi$index;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__ndflt);
 ___resumeException($exn$slot$1|0);
 // unreachable;
}
function __ZNKSt3__18messagesIwE8do_closeEi($this,$__c) {
 $this = $this|0;
 $__c = $__c|0;
 var $0 = 0, $1 = 0, $cmp = 0, $shl = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $cmp = ($__c|0)==(-1);
 $shl = $__c << 1;
 $0 = $shl;
 $1 = $cmp ? (-1) : $0;
 (_catclose(($1|0))|0);
 STACKTOP = sp;return;
}
function __ZNSt3__17codecvtIwc11__mbstate_tED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $__l = 0, $call = 0, $cmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = ((4696 + 8|0));
 $__l = (($this) + 8|0);
 $0 = HEAP32[$__l>>2]|0;
 __THREW__ = 0;
 $call = (invoke_i(395)|0);
 $1 = __THREW__; __THREW__ = 0;
 $2 = $1&1;
 if (!($2)) {
  $cmp = ($0|0)==($call|0);
  if ($cmp) {
   STACKTOP = sp;return;
  }
  $3 = HEAP32[$__l>>2]|0;
  __THREW__ = 0;
  invoke_vi(409,($3|0));
  $4 = __THREW__; __THREW__ = 0;
  $5 = $4&1;
  if (!($5)) {
   STACKTOP = sp;return;
  }
 }
 $6 = ___cxa_find_matching_catch(0|0)|0;
 $7 = tempRet0;
 __ZSt9terminatev();
 // unreachable;
}
function __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $exception = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $exception = (___cxa_allocate_exception(8)|0);
 __THREW__ = 0;
 invoke_vii(376,($exception|0),(4496|0));
 $0 = __THREW__; __THREW__ = 0;
 $1 = $0&1;
 if ($1) {
  $2 = ___cxa_find_matching_catch()|0;
  $3 = tempRet0;
  ___cxa_free_exception(($exception|0));
  ___resumeException($2|0);
  // unreachable;
 } else {
  HEAP32[$exception>>2] = ((13144 + 8|0));
  ___cxa_throw(($exception|0),(13192|0),(328|0));
  // unreachable;
 }
}
function __ZNSt3__16locale5__impC2Ej($this,$refs) {
 $this = $this|0;
 $refs = $refs|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $9 = 0, $__end_$i$i$i = 0, $__new_last3$i$i$i = 0, $__shared_owners_$i$i = 0, $call$i1$i$i$i = 0, $call$i1$i$i$i1 = 0, $cmp1$i$i$i = 0, $eh$lpad$body$index3Z2D = 0, $eh$lpad$body$indexZ2D = 0, $ehselector$slot$0 = 0, $ehselector$slot$1 = 0, $exn$slot$0 = 0, $exn$slot$1 = 0, $facets_ = 0, $name_ = 0, $scevgep$i$i$i = 0, $scevgep5$i$i$i = 0, $sub$i = 0, $uglygep$i$i$i = 0, $uglygep4$i$i$i = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $sub$i = (($refs) + -1)|0;
 $__shared_owners_$i$i = (($this) + 4|0);
 HEAP32[$__shared_owners_$i$i>>2] = $sub$i;
 HEAP32[$this>>2] = ((4528 + 8|0));
 $facets_ = (($this) + 8|0);
 __THREW__ = 0;
 invoke_vii(432,($facets_|0),28);
 $0 = __THREW__; __THREW__ = 0;
 $1 = $0&1;
 if ($1) {
  $75 = ___cxa_find_matching_catch()|0;
  $76 = tempRet0;
  $ehselector$slot$1 = $76;$exn$slot$1 = $75;
  ___resumeException($exn$slot$1|0);
  // unreachable;
 }
 $name_ = (($this) + 144|0);
 __THREW__ = 0;
 invoke_viii(433,($name_|0),(4520|0),1);
 $2 = __THREW__; __THREW__ = 0;
 $3 = $2&1;
 if ($3) {
  $77 = ___cxa_find_matching_catch()|0;
  $78 = tempRet0;
  $ehselector$slot$0 = $78;$exn$slot$0 = $77;
 } else {
  $4 = HEAP32[$facets_>>2]|0;
  $__end_$i$i$i = (($this) + 12|0);
  $5 = HEAP32[$__end_$i$i$i>>2]|0;
  $cmp1$i$i$i = ($5|0)==($4|0);
  if (!($cmp1$i$i$i)) {
   $__new_last3$i$i$i = $4;
   $scevgep$i$i$i = (($5) + -4|0);
   $6 = (0 - ($__new_last3$i$i$i))|0;
   $uglygep$i$i$i = (($scevgep$i$i$i) + ($6)|0);
   $uglygep4$i$i$i = $uglygep$i$i$i;
   $7 = $uglygep4$i$i$i >>> 2;
   $8 = $7 ^ -1;
   $scevgep5$i$i$i = (($5) + ($8<<2)|0);
   HEAP32[$__end_$i$i$i>>2] = $scevgep5$i$i$i;
  }
  HEAP32[((9424 + 4|0))>>2] = 0;
  HEAP32[9424>>2] = ((2976 + 8|0));
  __THREW__ = 0;
  invoke_vii(434,($this|0),(9424|0));
  $9 = __THREW__; __THREW__ = 0;
  $10 = $9&1;
  do {
   if ($10) {
    label = 41;
   } else {
    HEAP32[((9416 + 4|0))>>2] = 0;
    HEAP32[9416>>2] = ((3016 + 8|0));
    __THREW__ = 0;
    invoke_vii(435,($this|0),(9416|0));
    $11 = __THREW__; __THREW__ = 0;
    $12 = $11&1;
    if ($12) {
     label = 41;
    } else {
     __ZNSt3__15ctypeIcEC2EPKtbj(9400,0,0,1);
     __THREW__ = 0;
     invoke_vii(436,($this|0),(9400|0));
     $13 = __THREW__; __THREW__ = 0;
     $14 = $13&1;
     if ($14) {
      label = 41;
     } else {
      HEAP32[((9392 + 4|0))>>2] = 0;
      HEAP32[9392>>2] = ((5584 + 8|0));
      __THREW__ = 0;
      invoke_vii(437,($this|0),(9392|0));
      $15 = __THREW__; __THREW__ = 0;
      $16 = $15&1;
      if ($16) {
       label = 41;
      } else {
       HEAP32[((9384 + 4|0))>>2] = 0;
       HEAP32[9384>>2] = ((5800 + 8|0));
       __THREW__ = 0;
       invoke_vii(438,($this|0),(9384|0));
       $17 = __THREW__; __THREW__ = 0;
       $18 = $17&1;
       if ($18) {
        label = 41;
       } else {
        __THREW__ = 0;
        invoke_vii(439,(9368|0),1);
        $19 = __THREW__; __THREW__ = 0;
        $20 = $19&1;
        if ($20) {
         label = 41;
        } else {
         __THREW__ = 0;
         invoke_vii(440,($this|0),(9368|0));
         $21 = __THREW__; __THREW__ = 0;
         $22 = $21&1;
         if ($22) {
          label = 41;
         } else {
          HEAP32[((9360 + 4|0))>>2] = 0;
          HEAP32[9360>>2] = ((6024 + 8|0));
          __THREW__ = 0;
          invoke_vii(441,($this|0),(9360|0));
          $23 = __THREW__; __THREW__ = 0;
          $24 = $23&1;
          if ($24) {
           label = 41;
          } else {
           HEAP32[((9352 + 4|0))>>2] = 0;
           HEAP32[9352>>2] = ((6144 + 8|0));
           __THREW__ = 0;
           invoke_vii(442,($this|0),(9352|0));
           $25 = __THREW__; __THREW__ = 0;
           $26 = $25&1;
           if ($26) {
            label = 41;
           } else {
            HEAP32[((9328 + 4|0))>>2] = 0;
            HEAP32[9328>>2] = ((4776 + 8|0));
            HEAP8[((9328 + 8|0))>>0] = 46;
            HEAP8[((9328 + 9|0))>>0] = 44;
            ;HEAP32[((9328 + 12|0))+0>>2]=0|0;HEAP32[((9328 + 12|0))+4>>2]=0|0;HEAP32[((9328 + 12|0))+8>>2]=0|0;
            __THREW__ = 0;
            invoke_vii(443,($this|0),(9328|0));
            $27 = __THREW__; __THREW__ = 0;
            $28 = $27&1;
            if ($28) {
             label = 41;
            } else {
             HEAP32[((9296 + 4|0))>>2] = 0;
             HEAP32[9296>>2] = ((4816 + 8|0));
             HEAP32[((9296 + 8|0))>>2] = 46;
             HEAP32[((9296 + 12|0))>>2] = 44;
             ;HEAP32[((9296 + 16|0))+0>>2]=0|0;HEAP32[((9296 + 16|0))+4>>2]=0|0;HEAP32[((9296 + 16|0))+8>>2]=0|0;
             __THREW__ = 0;
             invoke_vii(444,($this|0),(9296|0));
             $29 = __THREW__; __THREW__ = 0;
             $30 = $29&1;
             if ($30) {
              label = 41;
             } else {
              HEAP32[((9288 + 4|0))>>2] = 0;
              HEAP32[9288>>2] = ((3056 + 8|0));
              __THREW__ = 0;
              invoke_vii(445,($this|0),(9288|0));
              $31 = __THREW__; __THREW__ = 0;
              $32 = $31&1;
              if ($32) {
               label = 41;
              } else {
               HEAP32[((9280 + 4|0))>>2] = 0;
               HEAP32[9280>>2] = ((3176 + 8|0));
               __THREW__ = 0;
               invoke_vii(446,($this|0),(9280|0));
               $33 = __THREW__; __THREW__ = 0;
               $34 = $33&1;
               if ($34) {
                label = 41;
               } else {
                HEAP32[((9272 + 4|0))>>2] = 0;
                HEAP32[9272>>2] = ((3248 + 8|0));
                __THREW__ = 0;
                invoke_vii(447,($this|0),(9272|0));
                $35 = __THREW__; __THREW__ = 0;
                $36 = $35&1;
                if ($36) {
                 label = 41;
                } else {
                 HEAP32[((9264 + 4|0))>>2] = 0;
                 HEAP32[9264>>2] = ((3344 + 8|0));
                 __THREW__ = 0;
                 invoke_vii(448,($this|0),(9264|0));
                 $37 = __THREW__; __THREW__ = 0;
                 $38 = $37&1;
                 if ($38) {
                  label = 41;
                 } else {
                  HEAP32[((9256 + 4|0))>>2] = 0;
                  HEAP32[9256>>2] = ((3936 + 8|0));
                  __THREW__ = 0;
                  invoke_vii(449,($this|0),(9256|0));
                  $39 = __THREW__; __THREW__ = 0;
                  $40 = $39&1;
                  if ($40) {
                   label = 41;
                   break;
                  }
                  HEAP32[((9248 + 4|0))>>2] = 0;
                  HEAP32[9248>>2] = ((4000 + 8|0));
                  __THREW__ = 0;
                  invoke_vii(450,($this|0),(9248|0));
                  $41 = __THREW__; __THREW__ = 0;
                  $42 = $41&1;
                  if ($42) {
                   label = 41;
                   break;
                  }
                  HEAP32[((9240 + 4|0))>>2] = 0;
                  HEAP32[9240>>2] = ((4064 + 8|0));
                  __THREW__ = 0;
                  invoke_vii(451,($this|0),(9240|0));
                  $43 = __THREW__; __THREW__ = 0;
                  $44 = $43&1;
                  if ($44) {
                   label = 41;
                   break;
                  }
                  HEAP32[((9232 + 4|0))>>2] = 0;
                  HEAP32[9232>>2] = ((4128 + 8|0));
                  __THREW__ = 0;
                  invoke_vii(452,($this|0),(9232|0));
                  $45 = __THREW__; __THREW__ = 0;
                  $46 = $45&1;
                  if ($46) {
                   label = 41;
                   break;
                  }
                  HEAP32[((9224 + 4|0))>>2] = 0;
                  HEAP32[9224>>2] = ((4192 + 8|0));
                  __THREW__ = 0;
                  invoke_vii(453,($this|0),(9224|0));
                  $47 = __THREW__; __THREW__ = 0;
                  $48 = $47&1;
                  if ($48) {
                   label = 41;
                   break;
                  }
                  HEAP32[((9216 + 4|0))>>2] = 0;
                  HEAP32[9216>>2] = ((4272 + 8|0));
                  __THREW__ = 0;
                  invoke_vii(454,($this|0),(9216|0));
                  $49 = __THREW__; __THREW__ = 0;
                  $50 = $49&1;
                  if ($50) {
                   label = 41;
                   break;
                  }
                  HEAP32[((9208 + 4|0))>>2] = 0;
                  HEAP32[9208>>2] = ((4328 + 8|0));
                  __THREW__ = 0;
                  invoke_vii(455,($this|0),(9208|0));
                  $51 = __THREW__; __THREW__ = 0;
                  $52 = $51&1;
                  if ($52) {
                   label = 41;
                   break;
                  }
                  HEAP32[((9200 + 4|0))>>2] = 0;
                  HEAP32[9200>>2] = ((4376 + 8|0));
                  __THREW__ = 0;
                  invoke_vii(456,($this|0),(9200|0));
                  $53 = __THREW__; __THREW__ = 0;
                  $54 = $53&1;
                  if ($54) {
                   label = 41;
                   break;
                  }
                  HEAP32[((9184 + 4|0))>>2] = 0;
                  HEAP32[9184>>2] = ((3424 + 8|0));
                  HEAP32[((9184 + 8|0))>>2] = ((3424 + 56|0));
                  __THREW__ = 0;
                  invoke_vii(457,($this|0),(9184|0));
                  $55 = __THREW__; __THREW__ = 0;
                  $56 = $55&1;
                  if ($56) {
                   label = 41;
                   break;
                  }
                  HEAP32[((9168 + 4|0))>>2] = 0;
                  HEAP32[9168>>2] = ((3576 + 8|0));
                  HEAP32[((9168 + 8|0))>>2] = ((3576 + 56|0));
                  __THREW__ = 0;
                  invoke_vii(458,($this|0),(9168|0));
                  $57 = __THREW__; __THREW__ = 0;
                  $58 = $57&1;
                  if ($58) {
                   label = 41;
                   break;
                  }
                  HEAP32[((9152 + 4|0))>>2] = 0;
                  HEAP32[9152>>2] = ((5520 + 8|0));
                  __THREW__ = 0;
                  $call$i1$i$i$i1 = (invoke_i(395)|0);
                  $59 = __THREW__; __THREW__ = 0;
                  $60 = $59&1;
                  if ($60) {
                   $61 = ___cxa_find_matching_catch()|0;
                   $62 = tempRet0;
                   $eh$lpad$body$index3Z2D = $62;$eh$lpad$body$indexZ2D = $61;
                   break;
                  }
                  HEAP32[((9152 + 8|0))>>2] = $call$i1$i$i$i1;
                  HEAP32[9152>>2] = ((3872 + 8|0));
                  __THREW__ = 0;
                  invoke_vii(459,($this|0),(9152|0));
                  $63 = __THREW__; __THREW__ = 0;
                  $64 = $63&1;
                  if ($64) {
                   label = 41;
                   break;
                  }
                  HEAP32[((9136 + 4|0))>>2] = 0;
                  HEAP32[9136>>2] = ((5520 + 8|0));
                  __THREW__ = 0;
                  $call$i1$i$i$i = (invoke_i(395)|0);
                  $65 = __THREW__; __THREW__ = 0;
                  $66 = $65&1;
                  if ($66) {
                   $67 = ___cxa_find_matching_catch()|0;
                   $68 = tempRet0;
                   $eh$lpad$body$index3Z2D = $68;$eh$lpad$body$indexZ2D = $67;
                   break;
                  }
                  HEAP32[((9136 + 8|0))>>2] = $call$i1$i$i$i;
                  HEAP32[9136>>2] = ((3904 + 8|0));
                  __THREW__ = 0;
                  invoke_vii(460,($this|0),(9136|0));
                  $69 = __THREW__; __THREW__ = 0;
                  $70 = $69&1;
                  if ($70) {
                   label = 41;
                   break;
                  }
                  HEAP32[((9128 + 4|0))>>2] = 0;
                  HEAP32[9128>>2] = ((4416 + 8|0));
                  __THREW__ = 0;
                  invoke_vii(461,($this|0),(9128|0));
                  $71 = __THREW__; __THREW__ = 0;
                  $72 = $71&1;
                  if ($72) {
                   label = 41;
                   break;
                  }
                  HEAP32[((9120 + 4|0))>>2] = 0;
                  HEAP32[9120>>2] = ((4456 + 8|0));
                  __THREW__ = 0;
                  invoke_vii(462,($this|0),(9120|0));
                  $73 = __THREW__; __THREW__ = 0;
                  $74 = $73&1;
                  if ($74) {
                   label = 41;
                   break;
                  }
                  STACKTOP = sp;return;
                 }
                }
               }
              }
             }
            }
           }
          }
         }
        }
       }
      }
     }
    }
   }
  } while(0);
  if ((label|0) == 41) {
   $79 = ___cxa_find_matching_catch()|0;
   $80 = tempRet0;
   $eh$lpad$body$index3Z2D = $80;$eh$lpad$body$indexZ2D = $79;
  }
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($name_);
  $ehselector$slot$0 = $eh$lpad$body$index3Z2D;$exn$slot$0 = $eh$lpad$body$indexZ2D;
 }
 __ZNSt3__113__vector_baseIPNS_6locale5facetENS_15__sso_allocatorIS3_Lj28EEEED2Ev($facets_);
 $ehselector$slot$1 = $ehselector$slot$0;$exn$slot$1 = $exn$slot$0;
 ___resumeException($exn$slot$1|0);
 // unreachable;
}
function __ZNSt3__16locale5__imp7installINS_7collateIcEEEEvPT_($this,$f) {
 $this = $this|0;
 $f = $f|0;
 var $call = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $call = (__ZNSt3__16locale2id5__getEv(3008)|0);
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this,$f,$call);
 STACKTOP = sp;return;
}
function __ZNSt3__16locale5__imp7installINS_7collateIwEEEEvPT_($this,$f) {
 $this = $this|0;
 $f = $f|0;
 var $call = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $call = (__ZNSt3__16locale2id5__getEv(3048)|0);
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this,$f,$call);
 STACKTOP = sp;return;
}
function __ZNSt3__16locale5__imp7installINS_5ctypeIcEEEEvPT_($this,$f) {
 $this = $this|0;
 $f = $f|0;
 var $call = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $call = (__ZNSt3__16locale2id5__getEv(4616)|0);
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this,$f,$call);
 STACKTOP = sp;return;
}
function __ZNSt3__16locale5__imp7installINS_5ctypeIwEEEEvPT_($this,$f) {
 $this = $this|0;
 $f = $f|0;
 var $call = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $call = (__ZNSt3__16locale2id5__getEv(4608)|0);
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this,$f,$call);
 STACKTOP = sp;return;
}
function __ZNSt3__16locale5__imp7installINS_7codecvtIcc11__mbstate_tEEEEvPT_($this,$f) {
 $this = $this|0;
 $f = $f|0;
 var $call = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $call = (__ZNSt3__16locale2id5__getEv(4680)|0);
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this,$f,$call);
 STACKTOP = sp;return;
}
function __ZNSt3__16locale5__imp7installINS_7codecvtIwc11__mbstate_tEEEEvPT_($this,$f) {
 $this = $this|0;
 $f = $f|0;
 var $call = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $call = (__ZNSt3__16locale2id5__getEv(4688)|0);
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this,$f,$call);
 STACKTOP = sp;return;
}
function __ZNSt3__16locale5__imp7installINS_7codecvtIDsc11__mbstate_tEEEEvPT_($this,$f) {
 $this = $this|0;
 $f = $f|0;
 var $call = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $call = (__ZNSt3__16locale2id5__getEv(4744)|0);
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this,$f,$call);
 STACKTOP = sp;return;
}
function __ZNSt3__16locale5__imp7installINS_7codecvtIDic11__mbstate_tEEEEvPT_($this,$f) {
 $this = $this|0;
 $f = $f|0;
 var $call = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $call = (__ZNSt3__16locale2id5__getEv(4752)|0);
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this,$f,$call);
 STACKTOP = sp;return;
}
function __ZNSt3__16locale5__imp7installINS_8numpunctIcEEEEvPT_($this,$f) {
 $this = $this|0;
 $f = $f|0;
 var $call = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $call = (__ZNSt3__16locale2id5__getEv(4760)|0);
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this,$f,$call);
 STACKTOP = sp;return;
}
function __ZNSt3__16locale5__imp7installINS_8numpunctIwEEEEvPT_($this,$f) {
 $this = $this|0;
 $f = $f|0;
 var $call = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $call = (__ZNSt3__16locale2id5__getEv(4768)|0);
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this,$f,$call);
 STACKTOP = sp;return;
}
function __ZNSt3__16locale5__imp7installINS_7num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEEEvPT_($this,$f) {
 $this = $this|0;
 $f = $f|0;
 var $call = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $call = (__ZNSt3__16locale2id5__getEv(3120)|0);
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this,$f,$call);
 STACKTOP = sp;return;
}
function __ZNSt3__16locale5__imp7installINS_7num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEEEvPT_($this,$f) {
 $this = $this|0;
 $f = $f|0;
 var $call = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $call = (__ZNSt3__16locale2id5__getEv(3240)|0);
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this,$f,$call);
 STACKTOP = sp;return;
}
function __ZNSt3__16locale5__imp7installINS_7num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEEEEEvPT_($this,$f) {
 $this = $this|0;
 $f = $f|0;
 var $call = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $call = (__ZNSt3__16locale2id5__getEv(3304)|0);
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this,$f,$call);
 STACKTOP = sp;return;
}
function __ZNSt3__16locale5__imp7installINS_7num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEEEEEvPT_($this,$f) {
 $this = $this|0;
 $f = $f|0;
 var $call = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $call = (__ZNSt3__16locale2id5__getEv(3400)|0);
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this,$f,$call);
 STACKTOP = sp;return;
}
function __ZNSt3__16locale5__imp7installINS_10moneypunctIcLb0EEEEEvPT_($this,$f) {
 $this = $this|0;
 $f = $f|0;
 var $call = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $call = (__ZNSt3__16locale2id5__getEv(3992)|0);
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this,$f,$call);
 STACKTOP = sp;return;
}
function __ZNSt3__16locale5__imp7installINS_10moneypunctIcLb1EEEEEvPT_($this,$f) {
 $this = $this|0;
 $f = $f|0;
 var $call = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $call = (__ZNSt3__16locale2id5__getEv(4056)|0);
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this,$f,$call);
 STACKTOP = sp;return;
}
function __ZNSt3__16locale5__imp7installINS_10moneypunctIwLb0EEEEEvPT_($this,$f) {
 $this = $this|0;
 $f = $f|0;
 var $call = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $call = (__ZNSt3__16locale2id5__getEv(4120)|0);
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this,$f,$call);
 STACKTOP = sp;return;
}
function __ZNSt3__16locale5__imp7installINS_10moneypunctIwLb1EEEEEvPT_($this,$f) {
 $this = $this|0;
 $f = $f|0;
 var $call = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $call = (__ZNSt3__16locale2id5__getEv(4184)|0);
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this,$f,$call);
 STACKTOP = sp;return;
}
function __ZNSt3__16locale5__imp7installINS_9money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEEEvPT_($this,$f) {
 $this = $this|0;
 $f = $f|0;
 var $call = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $call = (__ZNSt3__16locale2id5__getEv(4224)|0);
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this,$f,$call);
 STACKTOP = sp;return;
}
function __ZNSt3__16locale5__imp7installINS_9money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEEEvPT_($this,$f) {
 $this = $this|0;
 $f = $f|0;
 var $call = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $call = (__ZNSt3__16locale2id5__getEv(4304)|0);
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this,$f,$call);
 STACKTOP = sp;return;
}
function __ZNSt3__16locale5__imp7installINS_9money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEEEEEvPT_($this,$f) {
 $this = $this|0;
 $f = $f|0;
 var $call = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $call = (__ZNSt3__16locale2id5__getEv(4360)|0);
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this,$f,$call);
 STACKTOP = sp;return;
}
function __ZNSt3__16locale5__imp7installINS_9money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEEEEEvPT_($this,$f) {
 $this = $this|0;
 $f = $f|0;
 var $call = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $call = (__ZNSt3__16locale2id5__getEv(4408)|0);
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this,$f,$call);
 STACKTOP = sp;return;
}
function __ZNSt3__16locale5__imp7installINS_8time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEEEvPT_($this,$f) {
 $this = $this|0;
 $f = $f|0;
 var $call = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $call = (__ZNSt3__16locale2id5__getEv(3512)|0);
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this,$f,$call);
 STACKTOP = sp;return;
}
function __ZNSt3__16locale5__imp7installINS_8time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEEEvPT_($this,$f) {
 $this = $this|0;
 $f = $f|0;
 var $call = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $call = (__ZNSt3__16locale2id5__getEv(3664)|0);
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this,$f,$call);
 STACKTOP = sp;return;
}
function __ZNSt3__16locale5__imp7installINS_8time_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEEEEEvPT_($this,$f) {
 $this = $this|0;
 $f = $f|0;
 var $call = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $call = (__ZNSt3__16locale2id5__getEv(3896)|0);
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this,$f,$call);
 STACKTOP = sp;return;
}
function __ZNSt3__16locale5__imp7installINS_8time_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEEEEEvPT_($this,$f) {
 $this = $this|0;
 $f = $f|0;
 var $call = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $call = (__ZNSt3__16locale2id5__getEv(3928)|0);
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this,$f,$call);
 STACKTOP = sp;return;
}
function __ZNSt3__16locale5__imp7installINS_8messagesIcEEEEvPT_($this,$f) {
 $this = $this|0;
 $f = $f|0;
 var $call = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $call = (__ZNSt3__16locale2id5__getEv(4448)|0);
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this,$f,$call);
 STACKTOP = sp;return;
}
function __ZNSt3__16locale5__imp7installINS_8messagesIwEEEEvPT_($this,$f) {
 $this = $this|0;
 $f = $f|0;
 var $call = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $call = (__ZNSt3__16locale2id5__getEv(4488)|0);
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this,$f,$call);
 STACKTOP = sp;return;
}
function __ZNSt3__16locale7classicEv() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $guard$uninitialized = 0, $tobool = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[4568>>0]|0;
 $guard$uninitialized = ($0<<24>>24)==(0);
 do {
  if ($guard$uninitialized) {
   $1 = (___cxa_guard_acquire((4568|0))|0);
   $tobool = ($1|0)==(0);
   if (!($tobool)) {
    __THREW__ = 0;
    (invoke_i(463)|0);
    $2 = __THREW__; __THREW__ = 0;
    $3 = $2&1;
    if ($3) {
     $5 = ___cxa_find_matching_catch()|0;
     $6 = tempRet0;
     ___cxa_guard_abort((4568|0));
     ___resumeException($5|0);
     // unreachable;
    } else {
     HEAP32[4560>>2] = 4552;
     ___cxa_guard_release((4568|0));
     break;
    }
   }
  }
 } while(0);
 $4 = HEAP32[4560>>2]|0;
 STACKTOP = sp;return ($4|0);
}
function __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this,$f,$id) {
 $this = $this|0;
 $f = $f|0;
 $id = $id|0;
 var $$pre = 0, $$pre19 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $__end_$i = 0, $add = 0, $arrayidx$i = 0, $arrayidx$i11 = 0, $cmp = 0, $facets_ = 0, $sub$ptr$div$i = 0, $sub$ptr$lhs$cast$i = 0, $sub$ptr$rhs$cast$i = 0;
 var $sub$ptr$sub$i = 0, $tobool = 0, $tobool$i$i13 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__114__shared_count12__add_sharedEv($f);
 $facets_ = (($this) + 8|0);
 $__end_$i = (($this) + 12|0);
 $0 = HEAP32[$__end_$i>>2]|0;
 $1 = HEAP32[$facets_>>2]|0;
 $sub$ptr$lhs$cast$i = $0;
 $sub$ptr$rhs$cast$i = $1;
 $sub$ptr$sub$i = (($sub$ptr$lhs$cast$i) - ($sub$ptr$rhs$cast$i))|0;
 $sub$ptr$div$i = $sub$ptr$sub$i >> 2;
 $cmp = ($sub$ptr$div$i>>>0)>($id>>>0);
 do {
  if ($cmp) {
   $6 = $1;
  } else {
   $add = (($id) + 1)|0;
   __THREW__ = 0;
   invoke_vii(464,($facets_|0),($add|0));
   $2 = __THREW__; __THREW__ = 0;
   $3 = $2&1;
   if (!($3)) {
    $$pre19 = HEAP32[$facets_>>2]|0;
    $6 = $$pre19;
    break;
   }
   $4 = ___cxa_find_matching_catch()|0;
   $5 = tempRet0;
   $tobool$i$i13 = ($f|0)==(0|0);
   if ($tobool$i$i13) {
    ___resumeException($4|0);
    // unreachable;
   }
   (__ZNSt3__114__shared_count16__release_sharedEv($f)|0);
   ___resumeException($4|0);
   // unreachable;
  }
 } while(0);
 $arrayidx$i11 = (($6) + ($id<<2)|0);
 $7 = HEAP32[$arrayidx$i11>>2]|0;
 $tobool = ($7|0)==(0|0);
 if ($tobool) {
  $8 = $6;
  $arrayidx$i = (($8) + ($id<<2)|0);
  HEAP32[$arrayidx$i>>2] = $f;
  STACKTOP = sp;return;
 }
 (__ZNSt3__114__shared_count16__release_sharedEv($7)|0);
 $$pre = HEAP32[$facets_>>2]|0;
 $8 = $$pre;
 $arrayidx$i = (($8) + ($id<<2)|0);
 HEAP32[$arrayidx$i>>2] = $f;
 STACKTOP = sp;return;
}
function __ZNSt3__16locale5__impD0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__16locale5__impD2Ev($this);
 __ZdlPv($this);
 STACKTOP = sp;return;
}
function __ZNSt3__16locale5__impD2Ev($this) {
 $this = $this|0;
 var $$pre = 0, $$pre13 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $__end_$i = 0, $arrayidx$i = 0, $cmp = 0, $cmp11 = 0, $facets_ = 0, $i$012 = 0, $inc = 0, $name_ = 0, $sub$ptr$div$i = 0, $sub$ptr$lhs$cast$i = 0, $sub$ptr$rhs$cast$i = 0;
 var $sub$ptr$sub$i = 0, $tobool = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = ((4528 + 8|0));
 $facets_ = (($this) + 8|0);
 $__end_$i = (($this) + 12|0);
 $0 = HEAP32[$__end_$i>>2]|0;
 $1 = HEAP32[$facets_>>2]|0;
 $cmp11 = ($0|0)==($1|0);
 if (!($cmp11)) {
  $2 = $1;$6 = $0;$i$012 = 0;
  while(1) {
   $arrayidx$i = (($2) + ($i$012<<2)|0);
   $3 = HEAP32[$arrayidx$i>>2]|0;
   $tobool = ($3|0)==(0|0);
   if ($tobool) {
    $4 = $6;$5 = $2;
   } else {
    (__ZNSt3__114__shared_count16__release_sharedEv($3)|0);
    $$pre = HEAP32[$__end_$i>>2]|0;
    $$pre13 = HEAP32[$facets_>>2]|0;
    $4 = $$pre;$5 = $$pre13;
   }
   $inc = (($i$012) + 1)|0;
   $sub$ptr$lhs$cast$i = $4;
   $sub$ptr$rhs$cast$i = $5;
   $sub$ptr$sub$i = (($sub$ptr$lhs$cast$i) - ($sub$ptr$rhs$cast$i))|0;
   $sub$ptr$div$i = $sub$ptr$sub$i >> 2;
   $cmp = ($inc>>>0)<($sub$ptr$div$i>>>0);
   if ($cmp) {
    $2 = $5;$6 = $4;$i$012 = $inc;
   } else {
    break;
   }
  }
 }
 $name_ = (($this) + 144|0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($name_);
 __ZNSt3__113__vector_baseIPNS_6locale5facetENS_15__sso_allocatorIS3_Lj28EEEED2Ev($facets_);
 STACKTOP = sp;return;
}
function __ZNSt3__16vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lj28EEEE6resizeEj($this,$__sz) {
 $this = $this|0;
 $__sz = $__sz|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $__end_$i = 0, $__new_last3$i$i = 0, $add$ptr = 0, $cmp = 0, $cmp1$i$i = 0, $cmp2 = 0, $scevgep$i$i = 0, $scevgep5$i$i = 0, $sub = 0, $sub$ptr$div$i = 0, $sub$ptr$lhs$cast$i = 0, $sub$ptr$rhs$cast$i = 0, $sub$ptr$sub$i = 0, $uglygep$i$i = 0, $uglygep4$i$i = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $__end_$i = (($this) + 4|0);
 $0 = HEAP32[$__end_$i>>2]|0;
 $1 = HEAP32[$this>>2]|0;
 $sub$ptr$lhs$cast$i = $0;
 $sub$ptr$rhs$cast$i = $1;
 $sub$ptr$sub$i = (($sub$ptr$lhs$cast$i) - ($sub$ptr$rhs$cast$i))|0;
 $sub$ptr$div$i = $sub$ptr$sub$i >> 2;
 $cmp = ($sub$ptr$div$i>>>0)<($__sz>>>0);
 if ($cmp) {
  $sub = (($__sz) - ($sub$ptr$div$i))|0;
  __ZNSt3__16vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lj28EEEE8__appendEj($this,$sub);
  STACKTOP = sp;return;
 }
 $cmp2 = ($sub$ptr$div$i>>>0)>($__sz>>>0);
 if (!($cmp2)) {
  STACKTOP = sp;return;
 }
 $add$ptr = (($1) + ($__sz<<2)|0);
 $cmp1$i$i = ($0|0)==($add$ptr|0);
 if ($cmp1$i$i) {
  STACKTOP = sp;return;
 }
 $__new_last3$i$i = $add$ptr;
 $scevgep$i$i = (($0) + -4|0);
 $2 = (0 - ($__new_last3$i$i))|0;
 $uglygep$i$i = (($scevgep$i$i) + ($2)|0);
 $uglygep4$i$i = $uglygep$i$i;
 $3 = $uglygep4$i$i >>> 2;
 $4 = $3 ^ -1;
 $scevgep5$i$i = (($0) + ($4<<2)|0);
 HEAP32[$__end_$i>>2] = $scevgep5$i$i;
 STACKTOP = sp;return;
}
function __ZNKSt3__16locale5__imp9use_facetEl($this,$id) {
 $this = $this|0;
 $id = $id|0;
 var $0 = 0, $1 = 0, $__begin_$i = 0, $arrayidx$i = 0, $call = 0, $exception = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $call = (__ZNKSt3__16locale5__imp9has_facetEl($this,$id)|0);
 if ($call) {
  $__begin_$i = (($this) + 8|0);
  $0 = HEAP32[$__begin_$i>>2]|0;
  $arrayidx$i = (($0) + ($id<<2)|0);
  $1 = HEAP32[$arrayidx$i>>2]|0;
  STACKTOP = sp;return ($1|0);
 } else {
  $exception = (___cxa_allocate_exception(4)|0);
  __ZNSt8bad_castC2Ev($exception);
  ___cxa_throw(($exception|0),(13328|0),(334|0));
  // unreachable;
 }
 return 0|0;
}
function __ZNKSt3__16locale5__imp9has_facetEl($this,$id) {
 $this = $this|0;
 $id = $id|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $__begin_$i = 0, $__end_$i = 0, $arrayidx$i = 0, $cmp = 0, $sub$ptr$div$i = 0, $sub$ptr$lhs$cast$i = 0, $sub$ptr$rhs$cast$i = 0, $sub$ptr$sub$i = 0, $tobool = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $__end_$i = (($this) + 12|0);
 $0 = HEAP32[$__end_$i>>2]|0;
 $__begin_$i = (($this) + 8|0);
 $1 = HEAP32[$__begin_$i>>2]|0;
 $sub$ptr$lhs$cast$i = $0;
 $sub$ptr$rhs$cast$i = $1;
 $sub$ptr$sub$i = (($sub$ptr$lhs$cast$i) - ($sub$ptr$rhs$cast$i))|0;
 $sub$ptr$div$i = $sub$ptr$sub$i >> 2;
 $cmp = ($sub$ptr$div$i>>>0)>($id>>>0);
 if (!($cmp)) {
  $3 = 0;
  STACKTOP = sp;return ($3|0);
 }
 $arrayidx$i = (($1) + ($id<<2)|0);
 $2 = HEAP32[$arrayidx$i>>2]|0;
 $tobool = ($2|0)!=(0|0);
 $3 = $tobool;
 STACKTOP = sp;return ($3|0);
}
function __ZNSt3__16locale5__imp12make_classicEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__16locale5__impC2Ej(8960,1);
 HEAP32[4552>>2] = 8960;
 STACKTOP = sp;return (4552|0);
}
function __ZNSt3__16locale5__imp11make_globalEv() {
 var $0 = 0, $call = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $call = (__ZNSt3__16locale7classicEv()|0);
 $0 = HEAP32[$call>>2]|0;
 HEAP32[4576>>2] = $0;
 __ZNSt3__114__shared_count12__add_sharedEv($0);
 STACKTOP = sp;return (4576|0);
}
function __ZNSt3__16locale8__globalEv() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $guard$uninitialized = 0, $tobool = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[4592>>0]|0;
 $guard$uninitialized = ($0<<24>>24)==(0);
 do {
  if ($guard$uninitialized) {
   $1 = (___cxa_guard_acquire((4592|0))|0);
   $tobool = ($1|0)==(0);
   if (!($tobool)) {
    __THREW__ = 0;
    (invoke_i(465)|0);
    $2 = __THREW__; __THREW__ = 0;
    $3 = $2&1;
    if ($3) {
     $5 = ___cxa_find_matching_catch()|0;
     $6 = tempRet0;
     ___cxa_guard_abort((4592|0));
     ___resumeException($5|0);
     // unreachable;
    } else {
     HEAP32[4584>>2] = 4576;
     ___cxa_guard_release((4592|0));
     break;
    }
   }
  }
 } while(0);
 $4 = HEAP32[4584>>2]|0;
 STACKTOP = sp;return ($4|0);
}
function __ZNSt3__16localeC2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $call = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __THREW__ = 0;
 $call = (invoke_i(466)|0);
 $0 = __THREW__; __THREW__ = 0;
 $1 = $0&1;
 if ($1) {
  $3 = ___cxa_find_matching_catch(0|0)|0;
  $4 = tempRet0;
  ___clang_call_terminate($3);
  // unreachable;
 } else {
  $2 = HEAP32[$call>>2]|0;
  HEAP32[$this>>2] = $2;
  __ZNSt3__114__shared_count12__add_sharedEv($2);
  STACKTOP = sp;return;
 }
}
function __ZNSt3__16localeC2ERKS0_($this,$l) {
 $this = $this|0;
 $l = $l|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$l>>2]|0;
 HEAP32[$this>>2] = $0;
 __ZNSt3__114__shared_count12__add_sharedEv($0);
 STACKTOP = sp;return;
}
function __ZNSt3__16localeD2Ev($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$this>>2]|0;
 (__ZNSt3__114__shared_count16__release_sharedEv($0)|0);
 STACKTOP = sp;return;
}
function __ZNSt3__16locale2id5__getEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $__id_ = 0, $__p$i = 0, $cmp$i = 0, $ref$tmp$sroa$1$4$idx5 = 0, $ref$tmp$sroa$2$8$idx6 = 0, $sub = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__p$i = sp;
 $0 = HEAP32[$this>>2]|0;
 $cmp$i = ($0|0)==(-1);
 if (!($cmp$i)) {
  HEAP32[$__p$i>>2] = $this;
  $ref$tmp$sroa$1$4$idx5 = (($__p$i) + 4|0);
  HEAP32[$ref$tmp$sroa$1$4$idx5>>2] = (467);
  $ref$tmp$sroa$2$8$idx6 = (($__p$i) + 8|0);
  HEAP32[$ref$tmp$sroa$2$8$idx6>>2] = 0;
  __ZNSt3__111__call_onceERVmPvPFvS2_E($this,$__p$i,468);
 }
 $__id_ = (($this) + 4|0);
 $1 = HEAP32[$__id_>>2]|0;
 $sub = (($1) + -1)|0;
 STACKTOP = sp;return ($sub|0);
}
function __ZNKSt3__16locale9use_facetERNS0_2idE($this,$x) {
 $this = $this|0;
 $x = $x|0;
 var $0 = 0, $call = 0, $call2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$this>>2]|0;
 $call = (__ZNSt3__16locale2id5__getEv($x)|0);
 $call2 = (__ZNKSt3__16locale5__imp9use_facetEl($0,$call)|0);
 STACKTOP = sp;return ($call2|0);
}
function __ZNSt3__16locale5facetD0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 STACKTOP = sp;return;
}
function __ZNSt3__16locale5facet16__on_zero_sharedEv($this) {
 $this = $this|0;
 var $0 = 0, $isnull = 0, $vfn = 0, $vtable = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $isnull = ($this|0)==(0|0);
 if ($isnull) {
  STACKTOP = sp;return;
 }
 $vtable = HEAP32[$this>>2]|0;
 $vfn = (($vtable) + 4|0);
 $0 = HEAP32[$vfn>>2]|0;
 FUNCTION_TABLE_vi[$0 & 511]($this);
 STACKTOP = sp;return;
}
function __ZNSt3__16locale2id6__initEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $__id_ = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[4600>>2]|0;HEAP32[4600>>2] = (($0+1)|0);
 $1 = (($0) + 1)|0;
 $__id_ = (($this) + 4|0);
 HEAP32[$__id_>>2] = $1;
 STACKTOP = sp;return;
}
function __ZNSt3__15ctypeIwED0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 STACKTOP = sp;return;
}
function __ZNKSt3__15ctypeIwE5do_isEtw($this,$m,$c) {
 $this = $this|0;
 $m = $m|0;
 $c = $c|0;
 var $0 = 0, $and2 = 0, $arrayidx = 0, $call2 = 0, $cmp = 0, $cond = 0, $isascii = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $isascii = ($c>>>0)<(128);
 if (!($isascii)) {
  $cond = 0;
  STACKTOP = sp;return ($cond|0);
 }
 $call2 = (__ZNSt3__15ctypeIcE13classic_tableEv()|0);
 $arrayidx = (($call2) + ($c<<1)|0);
 $0 = HEAP16[$arrayidx>>1]|0;
 $and2 = $0 & $m;
 $cmp = ($and2<<16>>16)!=(0);
 $cond = $cmp;
 STACKTOP = sp;return ($cond|0);
}
function __ZNSt3__15ctypeIcE13classic_tableEv() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $call = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __THREW__ = 0;
 $call = (invoke_i(469)|0);
 $0 = __THREW__; __THREW__ = 0;
 $1 = $0&1;
 if ($1) {
  $3 = ___cxa_find_matching_catch(0|0)|0;
  $4 = tempRet0;
  ___clang_call_terminate($3);
  // unreachable;
 } else {
  $2 = HEAP32[$call>>2]|0;
  STACKTOP = sp;return ($2|0);
 }
 return 0|0;
}
function __ZNKSt3__15ctypeIwE5do_isEPKwS3_Pt($this,$low,$high,$vec) {
 $this = $this|0;
 $low = $low|0;
 $high = $high|0;
 $vec = $vec|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $arrayidx = 0, $call2 = 0, $cmp = 0, $cmp5 = 0, $cond = 0, $incdec$ptr = 0, $incdec$ptr4 = 0, $isascii = 0, $low$addr$0$lcssa = 0, $low$addr$06 = 0, $low9 = 0, $scevgep = 0, $scevgep11 = 0, $uglygep = 0, $uglygep10 = 0;
 var $vec$addr$07 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $cmp5 = ($low|0)==($high|0);
 if ($cmp5) {
  $low$addr$0$lcssa = $low;
  STACKTOP = sp;return ($low$addr$0$lcssa|0);
 }
 $low9 = $low;
 $scevgep = (($high) + -4|0);
 $0 = (0 - ($low9))|0;
 $uglygep = (($scevgep) + ($0)|0);
 $uglygep10 = $uglygep;
 $1 = $uglygep10 >>> 2;
 $2 = (($1) + 1)|0;
 $low$addr$06 = $low;$vec$addr$07 = $vec;
 while(1) {
  $3 = HEAP32[$low$addr$06>>2]|0;
  $isascii = ($3>>>0)<(128);
  if ($isascii) {
   $call2 = (__ZNSt3__15ctypeIcE13classic_tableEv()|0);
   $arrayidx = (($call2) + ($3<<1)|0);
   $4 = HEAP16[$arrayidx>>1]|0;
   $cond = $4;
  } else {
   $cond = 0;
  }
  HEAP16[$vec$addr$07>>1] = $cond;
  $incdec$ptr = (($low$addr$06) + 4|0);
  $incdec$ptr4 = (($vec$addr$07) + 2|0);
  $cmp = ($incdec$ptr|0)==($high|0);
  if ($cmp) {
   break;
  } else {
   $low$addr$06 = $incdec$ptr;$vec$addr$07 = $incdec$ptr4;
  }
 }
 $scevgep11 = (($low) + ($2<<2)|0);
 $low$addr$0$lcssa = $scevgep11;
 STACKTOP = sp;return ($low$addr$0$lcssa|0);
}
function __ZNKSt3__15ctypeIwE10do_scan_isEtPKwS3_($this,$m,$low,$high) {
 $this = $this|0;
 $m = $m|0;
 $low = $low|0;
 $high = $high|0;
 var $0 = 0, $1 = 0, $and5 = 0, $arrayidx = 0, $call2 = 0, $cmp = 0, $cmp6 = 0, $incdec$ptr = 0, $isascii = 0, $low$addr$0$lcssa = 0, $low$addr$07 = 0, $tobool4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $cmp6 = ($low|0)==($high|0);
 L1: do {
  if ($cmp6) {
   $low$addr$0$lcssa = $low;
  } else {
   $low$addr$07 = $low;
   while(1) {
    $0 = HEAP32[$low$addr$07>>2]|0;
    $isascii = ($0>>>0)<(128);
    if ($isascii) {
     $call2 = (__ZNSt3__15ctypeIcE13classic_tableEv()|0);
     $arrayidx = (($call2) + ($0<<1)|0);
     $1 = HEAP16[$arrayidx>>1]|0;
     $and5 = $1 & $m;
     $tobool4 = ($and5<<16>>16)==(0);
     if (!($tobool4)) {
      $low$addr$0$lcssa = $low$addr$07;
      break L1;
     }
    }
    $incdec$ptr = (($low$addr$07) + 4|0);
    $cmp = ($incdec$ptr|0)==($high|0);
    if ($cmp) {
     $low$addr$0$lcssa = $high;
     break;
    } else {
     $low$addr$07 = $incdec$ptr;
    }
   }
  }
 } while(0);
 STACKTOP = sp;return ($low$addr$0$lcssa|0);
}
function __ZNKSt3__15ctypeIwE11do_scan_notEtPKwS3_($this,$m,$low,$high) {
 $this = $this|0;
 $m = $m|0;
 $low = $low|0;
 $high = $high|0;
 var $0 = 0, $1 = 0, $and5 = 0, $arrayidx = 0, $call2 = 0, $cmp = 0, $cmp6 = 0, $incdec$ptr = 0, $isascii = 0, $low$addr$0$lcssa = 0, $low$addr$07 = 0, $tobool4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $cmp6 = ($low|0)==($high|0);
 L1: do {
  if ($cmp6) {
   $low$addr$0$lcssa = $low;
  } else {
   $low$addr$07 = $low;
   while(1) {
    $0 = HEAP32[$low$addr$07>>2]|0;
    $isascii = ($0>>>0)<(128);
    if (!($isascii)) {
     $low$addr$0$lcssa = $low$addr$07;
     break L1;
    }
    $call2 = (__ZNSt3__15ctypeIcE13classic_tableEv()|0);
    $arrayidx = (($call2) + ($0<<1)|0);
    $1 = HEAP16[$arrayidx>>1]|0;
    $and5 = $1 & $m;
    $tobool4 = ($and5<<16>>16)==(0);
    $incdec$ptr = (($low$addr$07) + 4|0);
    if ($tobool4) {
     $low$addr$0$lcssa = $low$addr$07;
     break L1;
    }
    $cmp = ($incdec$ptr|0)==($high|0);
    if ($cmp) {
     $low$addr$0$lcssa = $high;
     break;
    } else {
     $low$addr$07 = $incdec$ptr;
    }
   }
  }
 } while(0);
 STACKTOP = sp;return ($low$addr$0$lcssa|0);
}
function __ZNKSt3__15ctypeIwE10do_toupperEw($this,$c) {
 $this = $this|0;
 $c = $c|0;
 var $0 = 0, $arrayidx = 0, $call2 = 0, $cond = 0, $isascii = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $isascii = ($c>>>0)<(128);
 if (!($isascii)) {
  $cond = $c;
  STACKTOP = sp;return ($cond|0);
 }
 $call2 = (__ZNSt3__15ctypeIcE21__classic_upper_tableEv()|0);
 $arrayidx = (($call2) + ($c<<2)|0);
 $0 = HEAP32[$arrayidx>>2]|0;
 $cond = $0;
 STACKTOP = sp;return ($cond|0);
}
function __ZNSt3__15ctypeIcE21__classic_upper_tableEv() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $call = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __THREW__ = 0;
 $call = (invoke_i(470)|0);
 $0 = __THREW__; __THREW__ = 0;
 $1 = $0&1;
 if ($1) {
  $3 = ___cxa_find_matching_catch(0|0)|0;
  $4 = tempRet0;
  ___clang_call_terminate($3);
  // unreachable;
 } else {
  $2 = HEAP32[$call>>2]|0;
  STACKTOP = sp;return ($2|0);
 }
 return 0|0;
}
function __ZNKSt3__15ctypeIwE10do_toupperEPwPKw($this,$low,$high) {
 $this = $this|0;
 $low = $low|0;
 $high = $high|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $arrayidx = 0, $call2 = 0, $cmp = 0, $cmp5 = 0, $cond = 0, $incdec$ptr = 0, $isascii = 0, $low$addr$0$lcssa = 0, $low$addr$06 = 0, $low8 = 0, $scevgep = 0, $scevgep10 = 0, $uglygep = 0, $uglygep9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $cmp5 = ($low|0)==($high|0);
 if ($cmp5) {
  $low$addr$0$lcssa = $low;
  STACKTOP = sp;return ($low$addr$0$lcssa|0);
 }
 $low8 = $low;
 $scevgep = (($high) + -4|0);
 $0 = (0 - ($low8))|0;
 $uglygep = (($scevgep) + ($0)|0);
 $uglygep9 = $uglygep;
 $1 = $uglygep9 >>> 2;
 $2 = (($1) + 1)|0;
 $low$addr$06 = $low;
 while(1) {
  $3 = HEAP32[$low$addr$06>>2]|0;
  $isascii = ($3>>>0)<(128);
  if ($isascii) {
   $call2 = (__ZNSt3__15ctypeIcE21__classic_upper_tableEv()|0);
   $arrayidx = (($call2) + ($3<<2)|0);
   $4 = HEAP32[$arrayidx>>2]|0;
   $cond = $4;
  } else {
   $cond = $3;
  }
  HEAP32[$low$addr$06>>2] = $cond;
  $incdec$ptr = (($low$addr$06) + 4|0);
  $cmp = ($incdec$ptr|0)==($high|0);
  if ($cmp) {
   break;
  } else {
   $low$addr$06 = $incdec$ptr;
  }
 }
 $scevgep10 = (($low) + ($2<<2)|0);
 $low$addr$0$lcssa = $scevgep10;
 STACKTOP = sp;return ($low$addr$0$lcssa|0);
}
function __ZNKSt3__15ctypeIwE10do_tolowerEw($this,$c) {
 $this = $this|0;
 $c = $c|0;
 var $0 = 0, $arrayidx = 0, $call2 = 0, $cond = 0, $isascii = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $isascii = ($c>>>0)<(128);
 if (!($isascii)) {
  $cond = $c;
  STACKTOP = sp;return ($cond|0);
 }
 $call2 = (__ZNSt3__15ctypeIcE21__classic_lower_tableEv()|0);
 $arrayidx = (($call2) + ($c<<2)|0);
 $0 = HEAP32[$arrayidx>>2]|0;
 $cond = $0;
 STACKTOP = sp;return ($cond|0);
}
function __ZNSt3__15ctypeIcE21__classic_lower_tableEv() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $call = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __THREW__ = 0;
 $call = (invoke_i(471)|0);
 $0 = __THREW__; __THREW__ = 0;
 $1 = $0&1;
 if ($1) {
  $3 = ___cxa_find_matching_catch(0|0)|0;
  $4 = tempRet0;
  ___clang_call_terminate($3);
  // unreachable;
 } else {
  $2 = HEAP32[$call>>2]|0;
  STACKTOP = sp;return ($2|0);
 }
 return 0|0;
}
function __ZNKSt3__15ctypeIwE10do_tolowerEPwPKw($this,$low,$high) {
 $this = $this|0;
 $low = $low|0;
 $high = $high|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $arrayidx = 0, $call2 = 0, $cmp = 0, $cmp5 = 0, $cond = 0, $incdec$ptr = 0, $isascii = 0, $low$addr$0$lcssa = 0, $low$addr$06 = 0, $low8 = 0, $scevgep = 0, $scevgep10 = 0, $uglygep = 0, $uglygep9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $cmp5 = ($low|0)==($high|0);
 if ($cmp5) {
  $low$addr$0$lcssa = $low;
  STACKTOP = sp;return ($low$addr$0$lcssa|0);
 }
 $low8 = $low;
 $scevgep = (($high) + -4|0);
 $0 = (0 - ($low8))|0;
 $uglygep = (($scevgep) + ($0)|0);
 $uglygep9 = $uglygep;
 $1 = $uglygep9 >>> 2;
 $2 = (($1) + 1)|0;
 $low$addr$06 = $low;
 while(1) {
  $3 = HEAP32[$low$addr$06>>2]|0;
  $isascii = ($3>>>0)<(128);
  if ($isascii) {
   $call2 = (__ZNSt3__15ctypeIcE21__classic_lower_tableEv()|0);
   $arrayidx = (($call2) + ($3<<2)|0);
   $4 = HEAP32[$arrayidx>>2]|0;
   $cond = $4;
  } else {
   $cond = $3;
  }
  HEAP32[$low$addr$06>>2] = $cond;
  $incdec$ptr = (($low$addr$06) + 4|0);
  $cmp = ($incdec$ptr|0)==($high|0);
  if ($cmp) {
   break;
  } else {
   $low$addr$06 = $incdec$ptr;
  }
 }
 $scevgep10 = (($low) + ($2<<2)|0);
 $low$addr$0$lcssa = $scevgep10;
 STACKTOP = sp;return ($low$addr$0$lcssa|0);
}
function __ZNKSt3__15ctypeIwE8do_widenEc($this,$c) {
 $this = $this|0;
 $c = $c|0;
 var $conv = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $conv = $c << 24 >> 24;
 STACKTOP = sp;return ($conv|0);
}
function __ZNKSt3__15ctypeIwE8do_widenEPKcS3_Pw($this,$low,$high,$dest) {
 $this = $this|0;
 $low = $low|0;
 $high = $high|0;
 $dest = $dest|0;
 var $0 = 0, $cmp = 0, $cmp4 = 0, $conv = 0, $dest$addr$06 = 0, $incdec$ptr = 0, $incdec$ptr2 = 0, $low$addr$0$lcssa = 0, $low$addr$05 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $cmp4 = ($low|0)==($high|0);
 if ($cmp4) {
  $low$addr$0$lcssa = $low;
  STACKTOP = sp;return ($low$addr$0$lcssa|0);
 } else {
  $dest$addr$06 = $dest;$low$addr$05 = $low;
 }
 while(1) {
  $0 = HEAP8[$low$addr$05>>0]|0;
  $conv = $0 << 24 >> 24;
  HEAP32[$dest$addr$06>>2] = $conv;
  $incdec$ptr = (($low$addr$05) + 1|0);
  $incdec$ptr2 = (($dest$addr$06) + 4|0);
  $cmp = ($incdec$ptr|0)==($high|0);
  if ($cmp) {
   $low$addr$0$lcssa = $high;
   break;
  } else {
   $dest$addr$06 = $incdec$ptr2;$low$addr$05 = $incdec$ptr;
  }
 }
 STACKTOP = sp;return ($low$addr$0$lcssa|0);
}
function __ZNKSt3__15ctypeIwE9do_narrowEwc($this,$c,$dfault) {
 $this = $this|0;
 $c = $c|0;
 $dfault = $dfault|0;
 var $conv = 0, $isascii = 0, $retval$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $isascii = ($c>>>0)<(128);
 $conv = $c&255;
 $retval$0 = $isascii ? $conv : $dfault;
 STACKTOP = sp;return ($retval$0|0);
}
function __ZNKSt3__15ctypeIwE9do_narrowEPKwS3_cPc($this,$low,$high,$dfault,$dest) {
 $this = $this|0;
 $low = $low|0;
 $high = $high|0;
 $dfault = $dfault|0;
 $dest = $dest|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $cmp = 0, $cmp6 = 0, $conv = 0, $conv$dfault = 0, $dest$addr$08 = 0, $incdec$ptr = 0, $incdec$ptr2 = 0, $isascii = 0, $low$addr$0$lcssa = 0, $low$addr$07 = 0, $low10 = 0, $scevgep = 0, $scevgep12 = 0, $uglygep = 0, $uglygep11 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $cmp6 = ($low|0)==($high|0);
 if ($cmp6) {
  $low$addr$0$lcssa = $low;
  STACKTOP = sp;return ($low$addr$0$lcssa|0);
 }
 $low10 = $low;
 $scevgep = (($high) + -4|0);
 $0 = (0 - ($low10))|0;
 $uglygep = (($scevgep) + ($0)|0);
 $uglygep11 = $uglygep;
 $1 = $uglygep11 >>> 2;
 $2 = (($1) + 1)|0;
 $dest$addr$08 = $dest;$low$addr$07 = $low;
 while(1) {
  $3 = HEAP32[$low$addr$07>>2]|0;
  $isascii = ($3>>>0)<(128);
  $conv = $3&255;
  $conv$dfault = $isascii ? $conv : $dfault;
  HEAP8[$dest$addr$08>>0] = $conv$dfault;
  $incdec$ptr = (($low$addr$07) + 4|0);
  $incdec$ptr2 = (($dest$addr$08) + 1|0);
  $cmp = ($incdec$ptr|0)==($high|0);
  if ($cmp) {
   break;
  } else {
   $dest$addr$08 = $incdec$ptr2;$low$addr$07 = $incdec$ptr;
  }
 }
 $scevgep12 = (($low) + ($2<<2)|0);
 $low$addr$0$lcssa = $scevgep12;
 STACKTOP = sp;return ($low$addr$0$lcssa|0);
}
function __ZNSt3__15ctypeIcEC2EPKtbj($this,$tab,$del,$refs) {
 $this = $this|0;
 $tab = $tab|0;
 $del = $del|0;
 $refs = $refs|0;
 var $__del_ = 0, $__shared_owners_$i$i = 0, $__tab_ = 0, $call = 0, $cmp = 0, $frombool2 = 0, $sub$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $sub$i = (($refs) + -1)|0;
 $__shared_owners_$i$i = (($this) + 4|0);
 HEAP32[$__shared_owners_$i$i>>2] = $sub$i;
 HEAP32[$this>>2] = ((4624 + 8|0));
 $__tab_ = (($this) + 8|0);
 HEAP32[$__tab_>>2] = $tab;
 $__del_ = (($this) + 12|0);
 $frombool2 = $del&1;
 HEAP8[$__del_>>0] = $frombool2;
 $cmp = ($tab|0)==(0|0);
 if (!($cmp)) {
  STACKTOP = sp;return;
 }
 $call = (__ZNSt3__15ctypeIcE13classic_tableEv()|0);
 HEAP32[$__tab_>>2] = $call;
 STACKTOP = sp;return;
}
function __ZNSt3__15ctypeIcED0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__15ctypeIcED2Ev($this);
 __ZdlPv($this);
 STACKTOP = sp;return;
}
function __ZNSt3__15ctypeIcED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $__del_ = 0, $__tab_ = 0, $tobool = 0, $tobool2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = ((4624 + 8|0));
 $__tab_ = (($this) + 8|0);
 $0 = HEAP32[$__tab_>>2]|0;
 $tobool = ($0|0)==(0|0);
 if ($tobool) {
  STACKTOP = sp;return;
 }
 $__del_ = (($this) + 12|0);
 $1 = HEAP8[$__del_>>0]|0;
 $tobool2 = ($1<<24>>24)==(0);
 if ($tobool2) {
  STACKTOP = sp;return;
 }
 __ZdaPv($0);
 STACKTOP = sp;return;
}
function __ZNKSt3__15ctypeIcE10do_toupperEc($this,$c) {
 $this = $this|0;
 $c = $c|0;
 var $0 = 0, $arrayidx = 0, $call2 = 0, $cond = 0, $conv3 = 0, $idxprom = 0, $isascii2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $isascii2 = ($c<<24>>24)>(-1);
 if (!($isascii2)) {
  $cond = $c;
  STACKTOP = sp;return ($cond|0);
 }
 $idxprom = $c&255;
 $call2 = (__ZNSt3__15ctypeIcE21__classic_upper_tableEv()|0);
 $arrayidx = (($call2) + ($idxprom<<2)|0);
 $0 = HEAP32[$arrayidx>>2]|0;
 $conv3 = $0&255;
 $cond = $conv3;
 STACKTOP = sp;return ($cond|0);
}
function __ZNKSt3__15ctypeIcE10do_toupperEPcPKc($this,$low,$high) {
 $this = $this|0;
 $low = $low|0;
 $high = $high|0;
 var $0 = 0, $1 = 0, $arrayidx = 0, $call3 = 0, $cmp = 0, $cmp6 = 0, $cond = 0, $conv2 = 0, $conv4 = 0, $incdec$ptr = 0, $isascii5 = 0, $low$addr$0$lcssa = 0, $low$addr$07 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $cmp6 = ($low|0)==($high|0);
 if ($cmp6) {
  $low$addr$0$lcssa = $low;
  STACKTOP = sp;return ($low$addr$0$lcssa|0);
 } else {
  $low$addr$07 = $low;
 }
 while(1) {
  $0 = HEAP8[$low$addr$07>>0]|0;
  $isascii5 = ($0<<24>>24)>(-1);
  if ($isascii5) {
   $conv2 = $0 << 24 >> 24;
   $call3 = (__ZNSt3__15ctypeIcE21__classic_upper_tableEv()|0);
   $arrayidx = (($call3) + ($conv2<<2)|0);
   $1 = HEAP32[$arrayidx>>2]|0;
   $conv4 = $1&255;
   $cond = $conv4;
  } else {
   $cond = $0;
  }
  HEAP8[$low$addr$07>>0] = $cond;
  $incdec$ptr = (($low$addr$07) + 1|0);
  $cmp = ($incdec$ptr|0)==($high|0);
  if ($cmp) {
   $low$addr$0$lcssa = $high;
   break;
  } else {
   $low$addr$07 = $incdec$ptr;
  }
 }
 STACKTOP = sp;return ($low$addr$0$lcssa|0);
}
function __ZNKSt3__15ctypeIcE10do_tolowerEc($this,$c) {
 $this = $this|0;
 $c = $c|0;
 var $0 = 0, $arrayidx = 0, $call3 = 0, $cond = 0, $conv = 0, $conv4 = 0, $isascii2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $isascii2 = ($c<<24>>24)>(-1);
 if (!($isascii2)) {
  $cond = $c;
  STACKTOP = sp;return ($cond|0);
 }
 $conv = $c << 24 >> 24;
 $call3 = (__ZNSt3__15ctypeIcE21__classic_lower_tableEv()|0);
 $arrayidx = (($call3) + ($conv<<2)|0);
 $0 = HEAP32[$arrayidx>>2]|0;
 $conv4 = $0&255;
 $cond = $conv4;
 STACKTOP = sp;return ($cond|0);
}
function __ZNKSt3__15ctypeIcE10do_tolowerEPcPKc($this,$low,$high) {
 $this = $this|0;
 $low = $low|0;
 $high = $high|0;
 var $0 = 0, $1 = 0, $arrayidx = 0, $call3 = 0, $cmp = 0, $cmp6 = 0, $cond = 0, $conv2 = 0, $conv4 = 0, $incdec$ptr = 0, $isascii5 = 0, $low$addr$0$lcssa = 0, $low$addr$07 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $cmp6 = ($low|0)==($high|0);
 if ($cmp6) {
  $low$addr$0$lcssa = $low;
  STACKTOP = sp;return ($low$addr$0$lcssa|0);
 } else {
  $low$addr$07 = $low;
 }
 while(1) {
  $0 = HEAP8[$low$addr$07>>0]|0;
  $isascii5 = ($0<<24>>24)>(-1);
  if ($isascii5) {
   $conv2 = $0 << 24 >> 24;
   $call3 = (__ZNSt3__15ctypeIcE21__classic_lower_tableEv()|0);
   $arrayidx = (($call3) + ($conv2<<2)|0);
   $1 = HEAP32[$arrayidx>>2]|0;
   $conv4 = $1&255;
   $cond = $conv4;
  } else {
   $cond = $0;
  }
  HEAP8[$low$addr$07>>0] = $cond;
  $incdec$ptr = (($low$addr$07) + 1|0);
  $cmp = ($incdec$ptr|0)==($high|0);
  if ($cmp) {
   $low$addr$0$lcssa = $high;
   break;
  } else {
   $low$addr$07 = $incdec$ptr;
  }
 }
 STACKTOP = sp;return ($low$addr$0$lcssa|0);
}
function __ZNKSt3__15ctypeIcE8do_widenEc($this,$c) {
 $this = $this|0;
 $c = $c|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return ($c|0);
}
function __ZNKSt3__15ctypeIcE8do_widenEPKcS3_Pc($this,$low,$high,$dest) {
 $this = $this|0;
 $low = $low|0;
 $high = $high|0;
 $dest = $dest|0;
 var $0 = 0, $cmp = 0, $cmp4 = 0, $dest$addr$06 = 0, $incdec$ptr = 0, $incdec$ptr2 = 0, $low$addr$0$lcssa = 0, $low$addr$05 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $cmp4 = ($low|0)==($high|0);
 if ($cmp4) {
  $low$addr$0$lcssa = $low;
  STACKTOP = sp;return ($low$addr$0$lcssa|0);
 } else {
  $dest$addr$06 = $dest;$low$addr$05 = $low;
 }
 while(1) {
  $0 = HEAP8[$low$addr$05>>0]|0;
  HEAP8[$dest$addr$06>>0] = $0;
  $incdec$ptr = (($low$addr$05) + 1|0);
  $incdec$ptr2 = (($dest$addr$06) + 1|0);
  $cmp = ($incdec$ptr|0)==($high|0);
  if ($cmp) {
   $low$addr$0$lcssa = $high;
   break;
  } else {
   $dest$addr$06 = $incdec$ptr2;$low$addr$05 = $incdec$ptr;
  }
 }
 STACKTOP = sp;return ($low$addr$0$lcssa|0);
}
function __ZNKSt3__15ctypeIcE9do_narrowEcc($this,$c,$dfault) {
 $this = $this|0;
 $c = $c|0;
 $dfault = $dfault|0;
 var $c$dfault = 0, $isascii2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $isascii2 = ($c<<24>>24)>(-1);
 $c$dfault = $isascii2 ? $c : $dfault;
 STACKTOP = sp;return ($c$dfault|0);
}
function __ZNKSt3__15ctypeIcE9do_narrowEPKcS3_cPc($this,$low,$high,$dfault,$dest) {
 $this = $this|0;
 $low = $low|0;
 $high = $high|0;
 $dfault = $dfault|0;
 $dest = $dest|0;
 var $$dfault = 0, $0 = 0, $cmp = 0, $cmp7 = 0, $dest$addr$09 = 0, $incdec$ptr = 0, $incdec$ptr2 = 0, $isascii6 = 0, $low$addr$0$lcssa = 0, $low$addr$08 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $cmp7 = ($low|0)==($high|0);
 if ($cmp7) {
  $low$addr$0$lcssa = $low;
  STACKTOP = sp;return ($low$addr$0$lcssa|0);
 } else {
  $dest$addr$09 = $dest;$low$addr$08 = $low;
 }
 while(1) {
  $0 = HEAP8[$low$addr$08>>0]|0;
  $isascii6 = ($0<<24>>24)>(-1);
  $$dfault = $isascii6 ? $0 : $dfault;
  HEAP8[$dest$addr$09>>0] = $$dfault;
  $incdec$ptr = (($low$addr$08) + 1|0);
  $incdec$ptr2 = (($dest$addr$09) + 1|0);
  $cmp = ($incdec$ptr|0)==($high|0);
  if ($cmp) {
   $low$addr$0$lcssa = $high;
   break;
  } else {
   $dest$addr$09 = $incdec$ptr2;$low$addr$08 = $incdec$ptr;
  }
 }
 STACKTOP = sp;return ($low$addr$0$lcssa|0);
}
function __ZNSt3__17codecvtIcc11__mbstate_tED0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 STACKTOP = sp;return;
}
function __ZNKSt3__17codecvtIcc11__mbstate_tE6do_outERS1_PKcS5_RS5_PcS7_RS7_($this,$0,$frm,$1,$frm_nxt,$to,$2,$to_nxt) {
 $this = $this|0;
 $0 = $0|0;
 $frm = $frm|0;
 $1 = $1|0;
 $frm_nxt = $frm_nxt|0;
 $to = $to|0;
 $2 = $2|0;
 $to_nxt = $to_nxt|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$frm_nxt>>2] = $frm;
 HEAP32[$to_nxt>>2] = $to;
 STACKTOP = sp;return 3;
}
function __ZNKSt3__17codecvtIcc11__mbstate_tE5do_inERS1_PKcS5_RS5_PcS7_RS7_($this,$0,$frm,$1,$frm_nxt,$to,$2,$to_nxt) {
 $this = $this|0;
 $0 = $0|0;
 $frm = $frm|0;
 $1 = $1|0;
 $frm_nxt = $frm_nxt|0;
 $to = $to|0;
 $2 = $2|0;
 $to_nxt = $to_nxt|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$frm_nxt>>2] = $frm;
 HEAP32[$to_nxt>>2] = $to;
 STACKTOP = sp;return 3;
}
function __ZNKSt3__17codecvtIcc11__mbstate_tE10do_unshiftERS1_PcS4_RS4_($this,$0,$to,$1,$to_nxt) {
 $this = $this|0;
 $0 = $0|0;
 $to = $to|0;
 $1 = $1|0;
 $to_nxt = $to_nxt|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$to_nxt>>2] = $to;
 STACKTOP = sp;return 3;
}
function __ZNKSt3__17codecvtIcc11__mbstate_tE11do_encodingEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return 1;
}
function __ZNKSt3__17codecvtIcc11__mbstate_tE16do_always_noconvEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return 1;
}
function __ZNKSt3__17codecvtIcc11__mbstate_tE9do_lengthERS1_PKcS5_j($this,$0,$frm,$end,$mx) {
 $this = $this|0;
 $0 = $0|0;
 $frm = $frm|0;
 $end = $end|0;
 $mx = $mx|0;
 var $$sroa$speculated = 0, $cmp$i$i$i = 0, $sub$ptr$lhs$cast = 0, $sub$ptr$rhs$cast = 0, $sub$ptr$sub = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $sub$ptr$lhs$cast = $end;
 $sub$ptr$rhs$cast = $frm;
 $sub$ptr$sub = (($sub$ptr$lhs$cast) - ($sub$ptr$rhs$cast))|0;
 $cmp$i$i$i = ($sub$ptr$sub>>>0)<($mx>>>0);
 $$sroa$speculated = $cmp$i$i$i ? $sub$ptr$sub : $mx;
 STACKTOP = sp;return ($$sroa$speculated|0);
}
function __ZNKSt3__17codecvtIcc11__mbstate_tE13do_max_lengthEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return 1;
}
function __ZNSt3__17codecvtIwc11__mbstate_tEC2Ej($this,$refs) {
 $this = $this|0;
 $refs = $refs|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $__l = 0, $__shared_owners_$i$i = 0, $call = 0, $sub$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $sub$i = (($refs) + -1)|0;
 $__shared_owners_$i$i = (($this) + 4|0);
 HEAP32[$__shared_owners_$i$i>>2] = $sub$i;
 HEAP32[$this>>2] = ((4696 + 8|0));
 __THREW__ = 0;
 $call = (invoke_i(395)|0);
 $0 = __THREW__; __THREW__ = 0;
 $1 = $0&1;
 if ($1) {
  $2 = ___cxa_find_matching_catch()|0;
  $3 = tempRet0;
  ___resumeException($2|0);
  // unreachable;
 } else {
  $__l = (($this) + 8|0);
  HEAP32[$__l>>2] = $call;
  STACKTOP = sp;return;
 }
}
function __ZNSt3__17codecvtIwc11__mbstate_tED0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__17codecvtIwc11__mbstate_tED2Ev($this);
 __ZdlPv($this);
 STACKTOP = sp;return;
}
function __ZNKSt3__17codecvtIwc11__mbstate_tE6do_outERS1_PKwS5_RS5_PcS7_RS7_($this,$st,$frm,$frm_end,$frm_nxt,$to,$to_end,$to_nxt) {
 $this = $this|0;
 $st = $st|0;
 $frm = $frm|0;
 $frm_end = $frm_end|0;
 $frm_nxt = $frm_nxt|0;
 $to = $to|0;
 $to_end = $to_end|0;
 $to_nxt = $to_nxt|0;
 var $$pre = 0, $$pre153 = 0, $$pre154 = 0, $$pre155 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $7 = 0, $8 = 0, $9 = 0, $__l = 0, $add$ptr = 0, $add$ptr27 = 0, $call$i = 0, $call$i51 = 0, $call$i64 = 0, $call1$i = 0, $call1$i52 = 0, $call1$i65 = 0, $cmp = 0, $cmp118 = 0, $cmp13 = 0;
 var $cmp1381 = 0, $cmp17 = 0, $cmp2 = 0, $cmp28 = 0, $cmp31 = 0, $cmp35 = 0, $cmp4 = 0, $cmp41 = 0, $cmp5 = 0, $cmp5113 = 0, $cmp54 = 0, $cmp5486 = 0, $cmp56 = 0, $cond = 0, $dec = 0, $fend$0$lcssa = 0, $fend$0119 = 0, $fend$1117 = 0, $fend$2$lcssa = 0, $fend$287 = 0;
 var $fend$3 = 0, $frm$addr$0116 = 0, $frm$addr$1$lcssa = 0, $frm$addr$182 = 0, $incdec$ptr = 0, $incdec$ptr21 = 0, $incdec$ptr48 = 0, $incdec$ptr49 = 0, $incdec$ptr52 = 0, $incdec$ptr60 = 0, $n$084 = 0, $not$cmp65 = 0, $or$cond = 0, $or$cond114 = 0, $p$085 = 0, $retval$0 = 0, $save_state = 0, $sub$ptr$div = 0, $sub$ptr$lhs$cast = 0, $sub$ptr$lhs$cast7 = 0;
 var $sub$ptr$rhs$cast = 0, $sub$ptr$rhs$cast39 = 0, $sub$ptr$rhs$cast8 = 0, $sub$ptr$sub = 0, $sub$ptr$sub40 = 0, $sub$ptr$sub9 = 0, $tmp = 0, $to$addr$0115 = 0, $tobool = 0, $tobool$i$i$i$i = 0, $tobool$i$i$i$i58 = 0, $tobool$i$i$i$i71 = 0, $tobool$i$i$i4$i = 0, $tobool$i$i$i4$i53 = 0, $tobool$i$i$i4$i66 = 0, $tobool83 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $save_state = sp;
 $tmp = sp + 8|0;
 $cmp118 = ($frm|0)==($frm_end|0);
 L1: do {
  if ($cmp118) {
   HEAP32[$to_nxt>>2] = $to;
   HEAP32[$frm_nxt>>2] = $frm;
   $63 = $frm;
  } else {
   $fend$0119 = $frm;
   while(1) {
    $0 = HEAP32[$fend$0119>>2]|0;
    $cmp2 = ($0|0)==(0);
    $incdec$ptr = (($fend$0119) + 4|0);
    if ($cmp2) {
     $fend$0$lcssa = $fend$0119;
     break;
    }
    $cmp = ($incdec$ptr|0)==($frm_end|0);
    if ($cmp) {
     $fend$0$lcssa = $frm_end;
     break;
    } else {
     $fend$0119 = $incdec$ptr;
    }
   }
   HEAP32[$to_nxt>>2] = $to;
   HEAP32[$frm_nxt>>2] = $frm;
   $cmp5113 = ($to|0)==($to_end|0);
   $or$cond114 = $cmp118 | $cmp5113;
   if ($or$cond114) {
    $63 = $frm;
   } else {
    $sub$ptr$lhs$cast7 = $to_end;
    $__l = (($this) + 8|0);
    $fend$1117 = $fend$0$lcssa;$frm$addr$0116 = $frm;$to$addr$0115 = $to;
    while(1) {
     $1 = $st;
     $2 = $1;
     $3 = HEAP32[$2>>2]|0;
     $4 = (($1) + 4)|0;
     $5 = $4;
     $6 = HEAP32[$5>>2]|0;
     $7 = $save_state;
     $8 = $7;
     HEAP32[$8>>2] = $3;
     $9 = (($7) + 4)|0;
     $10 = $9;
     HEAP32[$10>>2] = $6;
     $sub$ptr$lhs$cast = $fend$1117;
     $sub$ptr$rhs$cast = $frm$addr$0116;
     $sub$ptr$sub = (($sub$ptr$lhs$cast) - ($sub$ptr$rhs$cast))|0;
     $sub$ptr$div = $sub$ptr$sub >> 2;
     $sub$ptr$rhs$cast8 = $to$addr$0115;
     $sub$ptr$sub9 = (($sub$ptr$lhs$cast7) - ($sub$ptr$rhs$cast8))|0;
     $11 = HEAP32[$__l>>2]|0;
     $call$i = (_uselocale(($11|0))|0);
     __THREW__ = 0;
     $call1$i = (invoke_iiiiii(472,($to$addr$0115|0),($frm_nxt|0),($sub$ptr$div|0),($sub$ptr$sub9|0),($st|0))|0);
     $12 = __THREW__; __THREW__ = 0;
     $13 = $12&1;
     if ($13) {
      label = 11;
      break;
     }
     $tobool$i$i$i4$i = ($call$i|0)==(0|0);
     if (!($tobool$i$i$i4$i)) {
      __THREW__ = 0;
      (invoke_ii(397,($call$i|0))|0);
      $14 = __THREW__; __THREW__ = 0;
      $15 = $14&1;
      if ($15) {
       label = 10;
       break;
      }
     }
     if ((($call1$i|0) == -1)) {
      label = 16;
      break;
     } else if ((($call1$i|0) == 0)) {
      $retval$0 = 1;
      label = 51;
      break;
     }
     $42 = HEAP32[$to_nxt>>2]|0;
     $add$ptr27 = (($42) + ($call1$i)|0);
     HEAP32[$to_nxt>>2] = $add$ptr27;
     $cmp28 = ($add$ptr27|0)==($to_end|0);
     if ($cmp28) {
      label = 49;
      break;
     }
     $cmp31 = ($fend$1117|0)==($frm_end|0);
     if ($cmp31) {
      $$pre154 = HEAP32[$frm_nxt>>2]|0;
      $61 = $$pre154;$62 = $add$ptr27;$fend$3 = $frm_end;
     } else {
      $43 = HEAP32[$__l>>2]|0;
      $call$i64 = (_uselocale(($43|0))|0);
      __THREW__ = 0;
      $call1$i65 = (invoke_iiii(473,($tmp|0),0,($st|0))|0);
      $44 = __THREW__; __THREW__ = 0;
      $45 = $44&1;
      if ($45) {
       label = 35;
       break;
      }
      $tobool$i$i$i4$i66 = ($call$i64|0)==(0|0);
      if (!($tobool$i$i$i4$i66)) {
       __THREW__ = 0;
       (invoke_ii(397,($call$i64|0))|0);
       $46 = __THREW__; __THREW__ = 0;
       $47 = $46&1;
       if ($47) {
        label = 34;
        break;
       }
      }
      $cmp35 = ($call1$i65|0)==(-1);
      if ($cmp35) {
       $retval$0 = 2;
       label = 51;
       break;
      }
      $56 = HEAP32[$to_nxt>>2]|0;
      $sub$ptr$rhs$cast39 = $56;
      $sub$ptr$sub40 = (($sub$ptr$lhs$cast7) - ($sub$ptr$rhs$cast39))|0;
      $cmp41 = ($call1$i65>>>0)>($sub$ptr$sub40>>>0);
      if ($cmp41) {
       $retval$0 = 1;
       label = 51;
       break;
      }
      $tobool83 = ($call1$i65|0)==(0);
      L24: do {
       if (!($tobool83)) {
        $58 = $56;$n$084 = $call1$i65;$p$085 = $tmp;
        while(1) {
         $57 = HEAP8[$p$085>>0]|0;
         $incdec$ptr49 = (($58) + 1|0);
         HEAP32[$to_nxt>>2] = $incdec$ptr49;
         HEAP8[$58>>0] = $57;
         $dec = (($n$084) + -1)|0;
         $tobool = ($dec|0)==(0);
         if ($tobool) {
          break L24;
         }
         $incdec$ptr48 = (($p$085) + 1|0);
         $$pre155 = HEAP32[$to_nxt>>2]|0;
         $58 = $$pre155;$n$084 = $dec;$p$085 = $incdec$ptr48;
        }
       }
      } while(0);
      $59 = HEAP32[$frm_nxt>>2]|0;
      $incdec$ptr52 = (($59) + 4|0);
      HEAP32[$frm_nxt>>2] = $incdec$ptr52;
      $cmp5486 = ($incdec$ptr52|0)==($frm_end|0);
      L29: do {
       if ($cmp5486) {
        $fend$2$lcssa = $frm_end;
       } else {
        $fend$287 = $incdec$ptr52;
        while(1) {
         $60 = HEAP32[$fend$287>>2]|0;
         $cmp56 = ($60|0)==(0);
         $incdec$ptr60 = (($fend$287) + 4|0);
         if ($cmp56) {
          $fend$2$lcssa = $fend$287;
          break L29;
         }
         $cmp54 = ($incdec$ptr60|0)==($frm_end|0);
         if ($cmp54) {
          $fend$2$lcssa = $frm_end;
          break;
         } else {
          $fend$287 = $incdec$ptr60;
         }
        }
       }
      } while(0);
      $$pre153 = HEAP32[$to_nxt>>2]|0;
      $61 = $incdec$ptr52;$62 = $$pre153;$fend$3 = $fend$2$lcssa;
     }
     $cmp4 = ($61|0)==($frm_end|0);
     $cmp5 = ($62|0)==($to_end|0);
     $or$cond = $cmp4 | $cmp5;
     if ($or$cond) {
      $63 = $61;
      break L1;
     } else {
      $fend$1117 = $fend$3;$frm$addr$0116 = $61;$to$addr$0115 = $62;
     }
    }
    if ((label|0) == 10) {
     $16 = ___cxa_find_matching_catch(0|0)|0;
     $17 = tempRet0;
     ___clang_call_terminate($16);
     // unreachable;
    }
    else if ((label|0) == 11) {
     $18 = ___cxa_find_matching_catch()|0;
     $19 = tempRet0;
     $tobool$i$i$i$i = ($call$i|0)==(0|0);
     if ($tobool$i$i$i$i) {
      ___resumeException($18|0);
      // unreachable;
     }
     __THREW__ = 0;
     (invoke_ii(397,($call$i|0))|0);
     $20 = __THREW__; __THREW__ = 0;
     $21 = $20&1;
     if ($21) {
      $22 = ___cxa_find_matching_catch(0|0)|0;
      $23 = tempRet0;
      ___clang_call_terminate($22);
      // unreachable;
     } else {
      ___resumeException($18|0);
      // unreachable;
     }
    }
    else if ((label|0) == 16) {
     HEAP32[$to_nxt>>2] = $to$addr$0115;
     $24 = HEAP32[$frm_nxt>>2]|0;
     $cmp1381 = ($frm$addr$0116|0)==($24|0);
     L46: do {
      if ($cmp1381) {
       $frm$addr$1$lcssa = $frm$addr$0116;
      } else {
       $27 = $to$addr$0115;$frm$addr$182 = $frm$addr$0116;
       while(1) {
        $25 = HEAP32[$frm$addr$182>>2]|0;
        $26 = HEAP32[$__l>>2]|0;
        $call$i51 = (_uselocale(($26|0))|0);
        __THREW__ = 0;
        $call1$i52 = (invoke_iiii(473,($27|0),($25|0),($save_state|0))|0);
        $28 = __THREW__; __THREW__ = 0;
        $29 = $28&1;
        if ($29) {
         break;
        }
        $tobool$i$i$i4$i53 = ($call$i51|0)==(0|0);
        if (!($tobool$i$i$i4$i53)) {
         __THREW__ = 0;
         (invoke_ii(397,($call$i51|0))|0);
         $30 = __THREW__; __THREW__ = 0;
         $31 = $30&1;
         if ($31) {
          label = 20;
          break;
         }
        }
        $cmp17 = ($call1$i52|0)==(-1);
        if ($cmp17) {
         $frm$addr$1$lcssa = $frm$addr$182;
         break L46;
        }
        $40 = HEAP32[$to_nxt>>2]|0;
        $add$ptr = (($40) + ($call1$i52)|0);
        HEAP32[$to_nxt>>2] = $add$ptr;
        $incdec$ptr21 = (($frm$addr$182) + 4|0);
        $41 = HEAP32[$frm_nxt>>2]|0;
        $cmp13 = ($incdec$ptr21|0)==($41|0);
        if ($cmp13) {
         $frm$addr$1$lcssa = $incdec$ptr21;
         break L46;
        } else {
         $27 = $add$ptr;$frm$addr$182 = $incdec$ptr21;
        }
       }
       if ((label|0) == 20) {
        $32 = ___cxa_find_matching_catch(0|0)|0;
        $33 = tempRet0;
        ___clang_call_terminate($32);
        // unreachable;
       }
       $34 = ___cxa_find_matching_catch()|0;
       $35 = tempRet0;
       $tobool$i$i$i$i58 = ($call$i51|0)==(0|0);
       if ($tobool$i$i$i$i58) {
        ___resumeException($34|0);
        // unreachable;
       }
       __THREW__ = 0;
       (invoke_ii(397,($call$i51|0))|0);
       $36 = __THREW__; __THREW__ = 0;
       $37 = $36&1;
       if ($37) {
        $38 = ___cxa_find_matching_catch(0|0)|0;
        $39 = tempRet0;
        ___clang_call_terminate($38);
        // unreachable;
       } else {
        ___resumeException($34|0);
        // unreachable;
       }
      }
     } while(0);
     HEAP32[$frm_nxt>>2] = $frm$addr$1$lcssa;
     $retval$0 = 2;
     STACKTOP = sp;return ($retval$0|0);
    }
    else if ((label|0) == 34) {
     $48 = ___cxa_find_matching_catch(0|0)|0;
     $49 = tempRet0;
     ___clang_call_terminate($48);
     // unreachable;
    }
    else if ((label|0) == 35) {
     $50 = ___cxa_find_matching_catch()|0;
     $51 = tempRet0;
     $tobool$i$i$i$i71 = ($call$i64|0)==(0|0);
     if ($tobool$i$i$i$i71) {
      ___resumeException($50|0);
      // unreachable;
     }
     __THREW__ = 0;
     (invoke_ii(397,($call$i64|0))|0);
     $52 = __THREW__; __THREW__ = 0;
     $53 = $52&1;
     if ($53) {
      $54 = ___cxa_find_matching_catch(0|0)|0;
      $55 = tempRet0;
      ___clang_call_terminate($54);
      // unreachable;
     } else {
      ___resumeException($50|0);
      // unreachable;
     }
    }
    else if ((label|0) == 49) {
     $$pre = HEAP32[$frm_nxt>>2]|0;
     $63 = $$pre;
     break;
    }
    else if ((label|0) == 51) {
     STACKTOP = sp;return ($retval$0|0);
    }
   }
  }
 } while(0);
 $not$cmp65 = ($63|0)!=($frm_end|0);
 $cond = $not$cmp65&1;
 $retval$0 = $cond;
 STACKTOP = sp;return ($retval$0|0);
}
function __ZNKSt3__17codecvtIwc11__mbstate_tE5do_inERS1_PKcS5_RS5_PwS7_RS7_($this,$st,$frm,$frm_end,$frm_nxt,$to,$to_end,$to_nxt) {
 $this = $this|0;
 $st = $st|0;
 $frm = $frm|0;
 $frm_end = $frm_end|0;
 $frm_nxt = $frm_nxt|0;
 $to = $to|0;
 $to_end = $to_end|0;
 $to_nxt = $to_nxt|0;
 var $$pre = 0, $$pre175 = 0, $$pre176 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $__l = 0, $add$ptr = 0, $add$ptr31 = 0, $call$i = 0, $call$i57 = 0, $call$i70 = 0, $call1$i = 0, $call1$i58 = 0, $call1$i71 = 0, $cmp = 0, $cmp13 = 0, $cmp131 = 0, $cmp1391 = 0, $cmp2 = 0, $cmp32 = 0, $cmp35 = 0, $cmp39 = 0;
 var $cmp4 = 0, $cmp45 = 0, $cmp4594 = 0, $cmp48 = 0, $cmp5 = 0, $cmp5126 = 0, $cond = 0, $cond58 = 0, $fend$0$lcssa = 0, $fend$0132 = 0, $fend$1130 = 0, $fend$2$lcssa = 0, $fend$295 = 0, $fend$3 = 0, $frm$addr$0129 = 0, $frm$addr$1$lcssa = 0, $frm$addr$193 = 0, $frm$addr$2 = 0, $incdec$ptr = 0, $incdec$ptr20 = 0;
 var $incdec$ptr24 = 0, $incdec$ptr42 = 0, $incdec$ptr43 = 0, $incdec$ptr52 = 0, $not$cmp26 = 0, $not$cmp57 = 0, $or$cond = 0, $or$cond127 = 0, $retval$0 = 0, $save_state = 0, $storemerge92 = 0, $sub$ptr$div = 0, $sub$ptr$lhs$cast = 0, $sub$ptr$lhs$cast7 = 0, $sub$ptr$rhs$cast = 0, $sub$ptr$rhs$cast16 = 0, $sub$ptr$rhs$cast8 = 0, $sub$ptr$sub = 0, $sub$ptr$sub17 = 0, $sub$ptr$sub9 = 0;
 var $to$addr$0128 = 0, $tobool$i$i$i$i = 0, $tobool$i$i$i$i64 = 0, $tobool$i$i$i$i77 = 0, $tobool$i$i$i4$i = 0, $tobool$i$i$i4$i59 = 0, $tobool$i$i$i4$i72 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $save_state = sp;
 $cmp131 = ($frm|0)==($frm_end|0);
 L1: do {
  if ($cmp131) {
   HEAP32[$to_nxt>>2] = $to;
   HEAP32[$frm_nxt>>2] = $frm;
   $59 = $frm;
  } else {
   $fend$0132 = $frm;
   while(1) {
    $0 = HEAP8[$fend$0132>>0]|0;
    $cmp2 = ($0<<24>>24)==(0);
    $incdec$ptr = (($fend$0132) + 1|0);
    if ($cmp2) {
     $fend$0$lcssa = $fend$0132;
     break;
    }
    $cmp = ($incdec$ptr|0)==($frm_end|0);
    if ($cmp) {
     $fend$0$lcssa = $frm_end;
     break;
    } else {
     $fend$0132 = $incdec$ptr;
    }
   }
   HEAP32[$to_nxt>>2] = $to;
   HEAP32[$frm_nxt>>2] = $frm;
   $cmp5126 = ($to|0)==($to_end|0);
   $or$cond127 = $cmp131 | $cmp5126;
   if ($or$cond127) {
    $59 = $frm;
   } else {
    $sub$ptr$lhs$cast7 = $to_end;
    $__l = (($this) + 8|0);
    $fend$1130 = $fend$0$lcssa;$frm$addr$0129 = $frm;$to$addr$0128 = $to;
    while(1) {
     $1 = $st;
     $2 = $1;
     $3 = HEAP32[$2>>2]|0;
     $4 = (($1) + 4)|0;
     $5 = $4;
     $6 = HEAP32[$5>>2]|0;
     $7 = $save_state;
     $8 = $7;
     HEAP32[$8>>2] = $3;
     $9 = (($7) + 4)|0;
     $10 = $9;
     HEAP32[$10>>2] = $6;
     $sub$ptr$lhs$cast = $fend$1130;
     $sub$ptr$rhs$cast = $frm$addr$0129;
     $sub$ptr$sub = (($sub$ptr$lhs$cast) - ($sub$ptr$rhs$cast))|0;
     $sub$ptr$rhs$cast8 = $to$addr$0128;
     $sub$ptr$sub9 = (($sub$ptr$lhs$cast7) - ($sub$ptr$rhs$cast8))|0;
     $sub$ptr$div = $sub$ptr$sub9 >> 2;
     $11 = HEAP32[$__l>>2]|0;
     $call$i = (_uselocale(($11|0))|0);
     __THREW__ = 0;
     $call1$i = (invoke_iiiiii(474,($to$addr$0128|0),($frm_nxt|0),($sub$ptr$sub|0),($sub$ptr$div|0),($st|0))|0);
     $12 = __THREW__; __THREW__ = 0;
     $13 = $12&1;
     if ($13) {
      label = 11;
      break;
     }
     $tobool$i$i$i4$i = ($call$i|0)==(0|0);
     if (!($tobool$i$i$i4$i)) {
      __THREW__ = 0;
      (invoke_ii(397,($call$i|0))|0);
      $14 = __THREW__; __THREW__ = 0;
      $15 = $14&1;
      if ($15) {
       label = 10;
       break;
      }
     }
     if ((($call1$i|0) == 0)) {
      $retval$0 = 2;
      label = 50;
      break;
     } else if ((($call1$i|0) == -1)) {
      label = 16;
      break;
     }
     $40 = HEAP32[$to_nxt>>2]|0;
     $add$ptr31 = (($40) + ($call1$i<<2)|0);
     HEAP32[$to_nxt>>2] = $add$ptr31;
     $cmp32 = ($add$ptr31|0)==($to_end|0);
     if ($cmp32) {
      label = 48;
      break;
     }
     $cmp35 = ($fend$1130|0)==($frm_end|0);
     $$pre176 = HEAP32[$frm_nxt>>2]|0;
     if ($cmp35) {
      $57 = $$pre176;$58 = $add$ptr31;$fend$3 = $frm_end;
     } else {
      $41 = HEAP32[$__l>>2]|0;
      $call$i70 = (_uselocale(($41|0))|0);
      __THREW__ = 0;
      $call1$i71 = (invoke_iiiii(475,($add$ptr31|0),($$pre176|0),1,($st|0))|0);
      $42 = __THREW__; __THREW__ = 0;
      $43 = $42&1;
      if ($43) {
       label = 38;
       break;
      }
      $tobool$i$i$i4$i72 = ($call$i70|0)==(0|0);
      if (!($tobool$i$i$i4$i72)) {
       __THREW__ = 0;
       (invoke_ii(397,($call$i70|0))|0);
       $44 = __THREW__; __THREW__ = 0;
       $45 = $44&1;
       if ($45) {
        label = 37;
        break;
       }
      }
      $cmp39 = ($call1$i71|0)==(0);
      if (!($cmp39)) {
       $retval$0 = 2;
       label = 50;
       break;
      }
      $54 = HEAP32[$to_nxt>>2]|0;
      $incdec$ptr42 = (($54) + 4|0);
      HEAP32[$to_nxt>>2] = $incdec$ptr42;
      $55 = HEAP32[$frm_nxt>>2]|0;
      $incdec$ptr43 = (($55) + 1|0);
      HEAP32[$frm_nxt>>2] = $incdec$ptr43;
      $cmp4594 = ($incdec$ptr43|0)==($frm_end|0);
      L23: do {
       if ($cmp4594) {
        $fend$2$lcssa = $frm_end;
       } else {
        $fend$295 = $incdec$ptr43;
        while(1) {
         $56 = HEAP8[$fend$295>>0]|0;
         $cmp48 = ($56<<24>>24)==(0);
         $incdec$ptr52 = (($fend$295) + 1|0);
         if ($cmp48) {
          $fend$2$lcssa = $fend$295;
          break L23;
         }
         $cmp45 = ($incdec$ptr52|0)==($frm_end|0);
         if ($cmp45) {
          $fend$2$lcssa = $frm_end;
          break;
         } else {
          $fend$295 = $incdec$ptr52;
         }
        }
       }
      } while(0);
      $$pre175 = HEAP32[$to_nxt>>2]|0;
      $57 = $incdec$ptr43;$58 = $$pre175;$fend$3 = $fend$2$lcssa;
     }
     $cmp4 = ($57|0)==($frm_end|0);
     $cmp5 = ($58|0)==($to_end|0);
     $or$cond = $cmp4 | $cmp5;
     if ($or$cond) {
      $59 = $57;
      break L1;
     } else {
      $fend$1130 = $fend$3;$frm$addr$0129 = $57;$to$addr$0128 = $58;
     }
    }
    if ((label|0) == 10) {
     $16 = ___cxa_find_matching_catch(0|0)|0;
     $17 = tempRet0;
     ___clang_call_terminate($16);
     // unreachable;
    }
    else if ((label|0) == 11) {
     $18 = ___cxa_find_matching_catch()|0;
     $19 = tempRet0;
     $tobool$i$i$i$i = ($call$i|0)==(0|0);
     if ($tobool$i$i$i$i) {
      ___resumeException($18|0);
      // unreachable;
     }
     __THREW__ = 0;
     (invoke_ii(397,($call$i|0))|0);
     $20 = __THREW__; __THREW__ = 0;
     $21 = $20&1;
     if ($21) {
      $22 = ___cxa_find_matching_catch(0|0)|0;
      $23 = tempRet0;
      ___clang_call_terminate($22);
      // unreachable;
     } else {
      ___resumeException($18|0);
      // unreachable;
     }
    }
    else if ((label|0) == 16) {
     HEAP32[$to_nxt>>2] = $to$addr$0128;
     $24 = HEAP32[$frm_nxt>>2]|0;
     $cmp1391 = ($frm$addr$0129|0)==($24|0);
     L42: do {
      if ($cmp1391) {
       $frm$addr$1$lcssa = $frm$addr$0129;
      } else {
       $frm$addr$193 = $frm$addr$0129;$storemerge92 = $to$addr$0128;
       while(1) {
        $sub$ptr$rhs$cast16 = $frm$addr$193;
        $sub$ptr$sub17 = (($sub$ptr$lhs$cast) - ($sub$ptr$rhs$cast16))|0;
        $25 = HEAP32[$__l>>2]|0;
        $call$i57 = (_uselocale(($25|0))|0);
        __THREW__ = 0;
        $call1$i58 = (invoke_iiiii(475,($storemerge92|0),($frm$addr$193|0),($sub$ptr$sub17|0),($save_state|0))|0);
        $26 = __THREW__; __THREW__ = 0;
        $27 = $26&1;
        if ($27) {
         label = 21;
         break;
        }
        $tobool$i$i$i4$i59 = ($call$i57|0)==(0|0);
        if (!($tobool$i$i$i4$i59)) {
         __THREW__ = 0;
         (invoke_ii(397,($call$i57|0))|0);
         $28 = __THREW__; __THREW__ = 0;
         $29 = $28&1;
         if ($29) {
          label = 20;
          break;
         }
        }
        if ((($call1$i58|0) == 0)) {
         $incdec$ptr20 = (($frm$addr$193) + 1|0);
         $frm$addr$2 = $incdec$ptr20;
        } else if ((($call1$i58|0) == -1)) {
         label = 27;
         break;
        } else if ((($call1$i58|0) == -2)) {
         label = 28;
         break;
        } else {
         $add$ptr = (($frm$addr$193) + ($call1$i58)|0);
         $frm$addr$2 = $add$ptr;
        }
        $38 = HEAP32[$to_nxt>>2]|0;
        $incdec$ptr24 = (($38) + 4|0);
        HEAP32[$to_nxt>>2] = $incdec$ptr24;
        $39 = HEAP32[$frm_nxt>>2]|0;
        $cmp13 = ($frm$addr$2|0)==($39|0);
        if ($cmp13) {
         $frm$addr$1$lcssa = $frm$addr$2;
         break L42;
        } else {
         $frm$addr$193 = $frm$addr$2;$storemerge92 = $incdec$ptr24;
        }
       }
       if ((label|0) == 20) {
        $30 = ___cxa_find_matching_catch(0|0)|0;
        $31 = tempRet0;
        ___clang_call_terminate($30);
        // unreachable;
       }
       else if ((label|0) == 21) {
        $32 = ___cxa_find_matching_catch()|0;
        $33 = tempRet0;
        $tobool$i$i$i$i64 = ($call$i57|0)==(0|0);
        if ($tobool$i$i$i$i64) {
         ___resumeException($32|0);
         // unreachable;
        }
        __THREW__ = 0;
        (invoke_ii(397,($call$i57|0))|0);
        $34 = __THREW__; __THREW__ = 0;
        $35 = $34&1;
        if ($35) {
         $36 = ___cxa_find_matching_catch(0|0)|0;
         $37 = tempRet0;
         ___clang_call_terminate($36);
         // unreachable;
        } else {
         ___resumeException($32|0);
         // unreachable;
        }
       }
       else if ((label|0) == 27) {
        HEAP32[$frm_nxt>>2] = $frm$addr$193;
        $retval$0 = 2;
        STACKTOP = sp;return ($retval$0|0);
       }
       else if ((label|0) == 28) {
        HEAP32[$frm_nxt>>2] = $frm$addr$193;
        $retval$0 = 1;
        STACKTOP = sp;return ($retval$0|0);
       }
      }
     } while(0);
     HEAP32[$frm_nxt>>2] = $frm$addr$1$lcssa;
     $not$cmp26 = ($frm$addr$1$lcssa|0)!=($frm_end|0);
     $cond = $not$cmp26&1;
     $retval$0 = $cond;
     STACKTOP = sp;return ($retval$0|0);
    }
    else if ((label|0) == 37) {
     $46 = ___cxa_find_matching_catch(0|0)|0;
     $47 = tempRet0;
     ___clang_call_terminate($46);
     // unreachable;
    }
    else if ((label|0) == 38) {
     $48 = ___cxa_find_matching_catch()|0;
     $49 = tempRet0;
     $tobool$i$i$i$i77 = ($call$i70|0)==(0|0);
     if ($tobool$i$i$i$i77) {
      ___resumeException($48|0);
      // unreachable;
     }
     __THREW__ = 0;
     (invoke_ii(397,($call$i70|0))|0);
     $50 = __THREW__; __THREW__ = 0;
     $51 = $50&1;
     if ($51) {
      $52 = ___cxa_find_matching_catch(0|0)|0;
      $53 = tempRet0;
      ___clang_call_terminate($52);
      // unreachable;
     } else {
      ___resumeException($48|0);
      // unreachable;
     }
    }
    else if ((label|0) == 48) {
     $$pre = HEAP32[$frm_nxt>>2]|0;
     $59 = $$pre;
     break;
    }
    else if ((label|0) == 50) {
     STACKTOP = sp;return ($retval$0|0);
    }
   }
  }
 } while(0);
 $not$cmp57 = ($59|0)!=($frm_end|0);
 $cond58 = $not$cmp57&1;
 $retval$0 = $cond58;
 STACKTOP = sp;return ($retval$0|0);
}
function __ZNKSt3__17codecvtIwc11__mbstate_tE10do_unshiftERS1_PcS4_RS4_($this,$st,$to,$to_end,$to_nxt) {
 $this = $this|0;
 $st = $st|0;
 $to = $to|0;
 $to_end = $to_end|0;
 $to_nxt = $to_nxt|0;
 var $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__l = 0, $call$i = 0, $call1$i = 0;
 var $cmp4 = 0, $dec = 0, $dec10 = 0, $incdec$ptr = 0, $incdec$ptr9 = 0, $n$09 = 0, $p$010 = 0, $retval$0 = 0, $sub$ptr$lhs$cast = 0, $sub$ptr$rhs$cast = 0, $sub$ptr$sub = 0, $tmp = 0, $tobool = 0, $tobool$i$i$i$i = 0, $tobool$i$i$i4$i = 0, $tobool8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $tmp = sp;
 HEAP32[$to_nxt>>2] = $to;
 $__l = (($this) + 8|0);
 $0 = HEAP32[$__l>>2]|0;
 $call$i = (_uselocale(($0|0))|0);
 __THREW__ = 0;
 $call1$i = (invoke_iiii(473,($tmp|0),0,($st|0))|0);
 $1 = __THREW__; __THREW__ = 0;
 $2 = $1&1;
 if ($2) {
  $7 = ___cxa_find_matching_catch()|0;
  $8 = tempRet0;
  $tobool$i$i$i$i = ($call$i|0)==(0|0);
  if ($tobool$i$i$i$i) {
   ___resumeException($7|0);
   // unreachable;
  }
  __THREW__ = 0;
  (invoke_ii(397,($call$i|0))|0);
  $9 = __THREW__; __THREW__ = 0;
  $10 = $9&1;
  if ($10) {
   $11 = ___cxa_find_matching_catch(0|0)|0;
   $12 = tempRet0;
   ___clang_call_terminate($11);
   // unreachable;
  } else {
   ___resumeException($7|0);
   // unreachable;
  }
 }
 $tobool$i$i$i4$i = ($call$i|0)==(0|0);
 if (!($tobool$i$i$i4$i)) {
  __THREW__ = 0;
  (invoke_ii(397,($call$i|0))|0);
  $3 = __THREW__; __THREW__ = 0;
  $4 = $3&1;
  if ($4) {
   $5 = ___cxa_find_matching_catch(0|0)|0;
   $6 = tempRet0;
   ___clang_call_terminate($5);
   // unreachable;
  }
 }
 if ((($call1$i|0) == 0) | (($call1$i|0) == -1)) {
  $retval$0 = 2;
  STACKTOP = sp;return ($retval$0|0);
 }
 $dec = (($call1$i) + -1)|0;
 $13 = HEAP32[$to_nxt>>2]|0;
 $sub$ptr$lhs$cast = $to_end;
 $sub$ptr$rhs$cast = $13;
 $sub$ptr$sub = (($sub$ptr$lhs$cast) - ($sub$ptr$rhs$cast))|0;
 $cmp4 = ($dec>>>0)>($sub$ptr$sub>>>0);
 if ($cmp4) {
  $retval$0 = 1;
  STACKTOP = sp;return ($retval$0|0);
 }
 $tobool8 = ($dec|0)==(0);
 if ($tobool8) {
  $retval$0 = 0;
  STACKTOP = sp;return ($retval$0|0);
 } else {
  $15 = $13;$n$09 = $dec;$p$010 = $tmp;
 }
 while(1) {
  $14 = HEAP8[$p$010>>0]|0;
  $incdec$ptr9 = (($15) + 1|0);
  HEAP32[$to_nxt>>2] = $incdec$ptr9;
  HEAP8[$15>>0] = $14;
  $dec10 = (($n$09) + -1)|0;
  $tobool = ($dec10|0)==(0);
  if ($tobool) {
   $retval$0 = 0;
   break;
  }
  $incdec$ptr = (($p$010) + 1|0);
  $$pre = HEAP32[$to_nxt>>2]|0;
  $15 = $$pre;$n$09 = $dec10;$p$010 = $incdec$ptr;
 }
 STACKTOP = sp;return ($retval$0|0);
}
function __ZNKSt3__17codecvtIwc11__mbstate_tE11do_encodingEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__l = 0, $call$i1 = 0, $call$i8 = 0, $call1$i = 0, $cmp = 0, $cmp3 = 0, $eh$lpad$body$indexZ2D = 0, $retval$0 = 0, $tobool$i$i$i$i = 0, $tobool$i$i$i$i2 = 0, $tobool$i$i$i4$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $__l = (($this) + 8|0);
 $0 = HEAP32[$__l>>2]|0;
 __THREW__ = 0;
 $call$i1 = (invoke_ii(397,($0|0))|0);
 $1 = __THREW__; __THREW__ = 0;
 $2 = $1&1;
 if (!($2)) {
  __THREW__ = 0;
  $call1$i = (invoke_iiii(476,(0|0),(0|0),4)|0);
  $3 = __THREW__; __THREW__ = 0;
  $4 = $3&1;
  if ($4) {
   $9 = ___cxa_find_matching_catch(0|0)|0;
   $10 = tempRet0;
   $tobool$i$i$i$i = ($call$i1|0)==(0|0);
   if ($tobool$i$i$i$i) {
    $eh$lpad$body$indexZ2D = $9;
    ___clang_call_terminate($eh$lpad$body$indexZ2D);
    // unreachable;
   }
   __THREW__ = 0;
   (invoke_ii(397,($call$i1|0))|0);
   $11 = __THREW__; __THREW__ = 0;
   $12 = $11&1;
   if ($12) {
    $13 = ___cxa_find_matching_catch(0|0)|0;
    $14 = tempRet0;
    ___clang_call_terminate($13);
    // unreachable;
   } else {
    $eh$lpad$body$indexZ2D = $9;
    ___clang_call_terminate($eh$lpad$body$indexZ2D);
    // unreachable;
   }
  }
  $tobool$i$i$i4$i = ($call$i1|0)==(0|0);
  if (!($tobool$i$i$i4$i)) {
   __THREW__ = 0;
   (invoke_ii(397,($call$i1|0))|0);
   $5 = __THREW__; __THREW__ = 0;
   $6 = $5&1;
   if ($6) {
    $7 = ___cxa_find_matching_catch(0|0)|0;
    $8 = tempRet0;
    ___clang_call_terminate($7);
    // unreachable;
   }
  }
  $cmp = ($call1$i|0)==(0);
  if (!($cmp)) {
   $retval$0 = -1;
   STACKTOP = sp;return ($retval$0|0);
  }
  $15 = HEAP32[$__l>>2]|0;
  $cmp3 = ($15|0)==(0|0);
  if ($cmp3) {
   $retval$0 = 1;
   STACKTOP = sp;return ($retval$0|0);
  }
  __THREW__ = 0;
  $call$i8 = (invoke_ii(397,($15|0))|0);
  $16 = __THREW__; __THREW__ = 0;
  $17 = $16&1;
  if (!($17)) {
   $tobool$i$i$i$i2 = ($call$i8|0)==(0|0);
   if ($tobool$i$i$i$i2) {
    $retval$0 = 0;
    STACKTOP = sp;return ($retval$0|0);
   }
   __THREW__ = 0;
   (invoke_ii(397,($call$i8|0))|0);
   $18 = __THREW__; __THREW__ = 0;
   $19 = $18&1;
   if ($19) {
    $20 = ___cxa_find_matching_catch(0|0)|0;
    $21 = tempRet0;
    ___clang_call_terminate($20);
    // unreachable;
   } else {
    $retval$0 = 0;
    STACKTOP = sp;return ($retval$0|0);
   }
  }
 }
 $22 = ___cxa_find_matching_catch(0|0)|0;
 $23 = tempRet0;
 $eh$lpad$body$indexZ2D = $22;
 ___clang_call_terminate($eh$lpad$body$indexZ2D);
 // unreachable;
 return 0|0;
}
function __ZNKSt3__17codecvtIwc11__mbstate_tE16do_always_noconvEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return 0;
}
function __ZNKSt3__17codecvtIwc11__mbstate_tE9do_lengthERS1_PKcS5_j($this,$st,$frm,$frm_end,$mx) {
 $this = $this|0;
 $st = $st|0;
 $frm = $frm|0;
 $frm_end = $frm_end|0;
 $mx = $mx|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__l = 0, $add$ptr = 0, $call$i = 0, $call$pn = 0, $call1$i = 0, $cmp = 0, $cmp15 = 0;
 var $cmp2 = 0, $cmp216 = 0, $frm$addr$018 = 0, $frm$addr$1 = 0, $inc4 = 0, $incdec$ptr = 0, $nbytes$0$lcssa = 0, $nbytes$019 = 0, $nbytes$1 = 0, $nwchar_t$020 = 0, $or$cond = 0, $or$cond17 = 0, $sub$ptr$lhs$cast = 0, $sub$ptr$rhs$cast = 0, $sub$ptr$sub = 0, $tobool$i$i$i$i = 0, $tobool$i$i$i4$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $cmp15 = ($mx|0)==(0);
 $cmp216 = ($frm|0)==($frm_end|0);
 $or$cond17 = $cmp15 | $cmp216;
 if ($or$cond17) {
  $nbytes$0$lcssa = 0;
  STACKTOP = sp;return ($nbytes$0$lcssa|0);
 }
 $sub$ptr$lhs$cast = $frm_end;
 $__l = (($this) + 8|0);
 $frm$addr$018 = $frm;$nbytes$019 = 0;$nwchar_t$020 = 0;
 while(1) {
  $sub$ptr$rhs$cast = $frm$addr$018;
  $sub$ptr$sub = (($sub$ptr$lhs$cast) - ($sub$ptr$rhs$cast))|0;
  $0 = HEAP32[$__l>>2]|0;
  $call$i = (_uselocale(($0|0))|0);
  __THREW__ = 0;
  $call1$i = (invoke_iiii(477,($frm$addr$018|0),($sub$ptr$sub|0),($st|0))|0);
  $1 = __THREW__; __THREW__ = 0;
  $2 = $1&1;
  if ($2) {
   label = 7;
   break;
  }
  $tobool$i$i$i4$i = ($call$i|0)==(0|0);
  if (!($tobool$i$i$i4$i)) {
   __THREW__ = 0;
   (invoke_ii(397,($call$i|0))|0);
   $3 = __THREW__; __THREW__ = 0;
   $4 = $3&1;
   if ($4) {
    label = 6;
    break;
   }
  }
  if ((($call1$i|0) == -2) | (($call1$i|0) == -1)) {
   $nbytes$0$lcssa = $nbytes$019;
   label = 15;
   break;
  } else if ((($call1$i|0) == 0)) {
   $incdec$ptr = (($frm$addr$018) + 1|0);
   $call$pn = 1;$frm$addr$1 = $incdec$ptr;
  } else {
   $add$ptr = (($frm$addr$018) + ($call1$i)|0);
   $call$pn = $call1$i;$frm$addr$1 = $add$ptr;
  }
  $nbytes$1 = (($call$pn) + ($nbytes$019))|0;
  $inc4 = (($nwchar_t$020) + 1)|0;
  $cmp = ($inc4>>>0)>=($mx>>>0);
  $cmp2 = ($frm$addr$1|0)==($frm_end|0);
  $or$cond = $cmp | $cmp2;
  if ($or$cond) {
   $nbytes$0$lcssa = $nbytes$1;
   label = 15;
   break;
  } else {
   $frm$addr$018 = $frm$addr$1;$nbytes$019 = $nbytes$1;$nwchar_t$020 = $inc4;
  }
 }
 if ((label|0) == 6) {
  $5 = ___cxa_find_matching_catch(0|0)|0;
  $6 = tempRet0;
  ___clang_call_terminate($5);
  // unreachable;
 }
 else if ((label|0) == 7) {
  $7 = ___cxa_find_matching_catch()|0;
  $8 = tempRet0;
  $tobool$i$i$i$i = ($call$i|0)==(0|0);
  if ($tobool$i$i$i$i) {
   ___resumeException($7|0);
   // unreachable;
  }
  __THREW__ = 0;
  (invoke_ii(397,($call$i|0))|0);
  $9 = __THREW__; __THREW__ = 0;
  $10 = $9&1;
  if ($10) {
   $11 = ___cxa_find_matching_catch(0|0)|0;
   $12 = tempRet0;
   ___clang_call_terminate($11);
   // unreachable;
  } else {
   ___resumeException($7|0);
   // unreachable;
  }
 }
 else if ((label|0) == 15) {
  STACKTOP = sp;return ($nbytes$0$lcssa|0);
 }
 return 0|0;
}
function __ZNKSt3__17codecvtIwc11__mbstate_tE13do_max_lengthEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $__l = 0, $call$i1 = 0, $cmp = 0, $cond = 0, $tobool$i$i$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $__l = (($this) + 8|0);
 $0 = HEAP32[$__l>>2]|0;
 $cmp = ($0|0)==(0|0);
 if ($cmp) {
  $cond = 1;
  STACKTOP = sp;return ($cond|0);
 }
 __THREW__ = 0;
 $call$i1 = (invoke_ii(397,($0|0))|0);
 $1 = __THREW__; __THREW__ = 0;
 $2 = $1&1;
 if ($2) {
  $7 = ___cxa_find_matching_catch(0|0)|0;
  $8 = tempRet0;
  ___clang_call_terminate($7);
  // unreachable;
 }
 $tobool$i$i$i$i = ($call$i1|0)==(0|0);
 if ($tobool$i$i$i$i) {
  $cond = 4;
  STACKTOP = sp;return ($cond|0);
 }
 __THREW__ = 0;
 (invoke_ii(397,($call$i1|0))|0);
 $3 = __THREW__; __THREW__ = 0;
 $4 = $3&1;
 if ($4) {
  $5 = ___cxa_find_matching_catch(0|0)|0;
  $6 = tempRet0;
  ___clang_call_terminate($5);
  // unreachable;
 } else {
  $cond = 4;
  STACKTOP = sp;return ($cond|0);
 }
 return 0|0;
}
function __ZNSt3__17codecvtIDsc11__mbstate_tED0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 STACKTOP = sp;return;
}
function __ZNKSt3__17codecvtIDsc11__mbstate_tE6do_outERS1_PKDsS5_RS5_PcS7_RS7_($this,$0,$frm,$frm_end,$frm_nxt,$to,$to_end,$to_nxt) {
 $this = $this|0;
 $0 = $0|0;
 $frm = $frm|0;
 $frm_end = $frm_end|0;
 $frm_nxt = $frm_nxt|0;
 $to = $to|0;
 $to_end = $to_end|0;
 $to_nxt = $to_nxt|0;
 var $1 = 0, $2 = 0, $_frm_nxt = 0, $_to_nxt = 0, $add$ptr = 0, $add$ptr5 = 0, $call = 0, $sub$ptr$div = 0, $sub$ptr$lhs$cast = 0, $sub$ptr$lhs$cast2 = 0, $sub$ptr$rhs$cast = 0, $sub$ptr$rhs$cast3 = 0, $sub$ptr$sub = 0, $sub$ptr$sub4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $_frm_nxt = sp + 4|0;
 $_to_nxt = sp;
 HEAP32[$_frm_nxt>>2] = $frm;
 HEAP32[$_to_nxt>>2] = $to;
 $call = (__ZNSt3__1L13utf16_to_utf8EPKtS1_RS1_PhS3_RS3_mNS_12codecvt_modeE($frm,$frm_end,$_frm_nxt,$to,$to_end,$_to_nxt,1114111,0)|0);
 $1 = HEAP32[$_frm_nxt>>2]|0;
 $sub$ptr$lhs$cast = $1;
 $sub$ptr$rhs$cast = $frm;
 $sub$ptr$sub = (($sub$ptr$lhs$cast) - ($sub$ptr$rhs$cast))|0;
 $sub$ptr$div = $sub$ptr$sub >> 1;
 $add$ptr = (($frm) + ($sub$ptr$div<<1)|0);
 HEAP32[$frm_nxt>>2] = $add$ptr;
 $2 = HEAP32[$_to_nxt>>2]|0;
 $sub$ptr$lhs$cast2 = $2;
 $sub$ptr$rhs$cast3 = $to;
 $sub$ptr$sub4 = (($sub$ptr$lhs$cast2) - ($sub$ptr$rhs$cast3))|0;
 $add$ptr5 = (($to) + ($sub$ptr$sub4)|0);
 HEAP32[$to_nxt>>2] = $add$ptr5;
 STACKTOP = sp;return ($call|0);
}
function __ZNSt3__1L13utf16_to_utf8EPKtS1_RS1_PhS3_RS3_mNS_12codecvt_modeE($frm,$frm_end,$frm_nxt,$to,$to_end,$to_nxt,$Maxcode,$mode) {
 $frm = $frm|0;
 $frm_end = $frm_end|0;
 $frm_nxt = $frm_nxt|0;
 $to = $to|0;
 $to_end = $to_end|0;
 $to_nxt = $to_nxt|0;
 $Maxcode = $Maxcode|0;
 $mode = $mode|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $add = 0, $add101 = 0, $add90 = 0, $add93 = 0, $and = 0, $and109 = 0, $and113 = 0, $and119 = 0, $and123 = 0, $and129 = 0, $and150 = 0, $and156 = 0, $and33 = 0, $and53 = 0, $and59 = 0, $and74 = 0, $and85 = 0, $and88 = 0, $and92 = 0;
 var $arrayidx = 0, $cmp = 0, $cmp10 = 0, $cmp135 = 0, $cmp141 = 0, $cmp15 = 0, $cmp21 = 0, $cmp26 = 0, $cmp39 = 0, $cmp44 = 0, $cmp5 = 0, $cmp568 = 0, $cmp6 = 0, $cmp65 = 0, $cmp70 = 0, $cmp75 = 0, $cmp81 = 0, $cmp94 = 0, $conv = 0, $conv106 = 0;
 var $conv116 = 0, $conv126 = 0, $conv131 = 0, $conv147 = 0, $conv153 = 0, $conv158 = 0, $conv18 = 0, $conv30 = 0, $conv35 = 0, $conv50 = 0, $conv56 = 0, $conv61 = 0, $conv73 = 0, $incdec$ptr = 0, $incdec$ptr107 = 0, $incdec$ptr117 = 0, $incdec$ptr127 = 0, $incdec$ptr132 = 0, $incdec$ptr148 = 0, $incdec$ptr154 = 0;
 var $incdec$ptr159 = 0, $incdec$ptr165 = 0, $incdec$ptr19 = 0, $incdec$ptr2 = 0, $incdec$ptr3 = 0, $incdec$ptr31 = 0, $incdec$ptr36 = 0, $incdec$ptr51 = 0, $incdec$ptr57 = 0, $incdec$ptr62 = 0, $or = 0, $or105 = 0, $or111 = 0, $or115 = 0, $or121 = 0, $or125 = 0, $or130 = 0, $or146 = 0, $or152 = 0, $or157 = 0;
 var $or34 = 0, $or49 = 0, $or55 = 0, $or60 = 0, $retval$0 = 0, $shl = 0, $shl110 = 0, $shl120 = 0, $shl89 = 0, $shr10061 = 0, $shr10462 = 0, $shr11463 = 0, $shr12464 = 0, $shr14559 = 0, $shr15160 = 0, $shr4865 = 0, $shr5466 = 0, $shr67 = 0, $sub$ptr$lhs$cast = 0, $sub$ptr$lhs$cast12 = 0;
 var $sub$ptr$lhs$cast67 = 0, $sub$ptr$rhs$cast = 0, $sub$ptr$rhs$cast13 = 0, $sub$ptr$rhs$cast139 = 0, $sub$ptr$rhs$cast24 = 0, $sub$ptr$rhs$cast42 = 0, $sub$ptr$rhs$cast68 = 0, $sub$ptr$rhs$cast79 = 0, $sub$ptr$sub = 0, $sub$ptr$sub14 = 0, $sub$ptr$sub140 = 0, $sub$ptr$sub25 = 0, $sub$ptr$sub43 = 0, $sub$ptr$sub69 = 0, $sub$ptr$sub80 = 0, $tobool = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$frm_nxt>>2] = $frm;
 HEAP32[$to_nxt>>2] = $to;
 $and = $mode & 2;
 $tobool = ($and|0)==(0);
 do {
  if (!($tobool)) {
   $sub$ptr$lhs$cast = $to_end;
   $sub$ptr$rhs$cast = $to;
   $sub$ptr$sub = (($sub$ptr$lhs$cast) - ($sub$ptr$rhs$cast))|0;
   $cmp = ($sub$ptr$sub|0)<(3);
   if ($cmp) {
    $retval$0 = 1;
    STACKTOP = sp;return ($retval$0|0);
   } else {
    $incdec$ptr = (($to) + 1|0);
    HEAP32[$to_nxt>>2] = $incdec$ptr;
    HEAP8[$to>>0] = -17;
    $0 = HEAP32[$to_nxt>>2]|0;
    $incdec$ptr2 = (($0) + 1|0);
    HEAP32[$to_nxt>>2] = $incdec$ptr2;
    HEAP8[$0>>0] = -69;
    $1 = HEAP32[$to_nxt>>2]|0;
    $incdec$ptr3 = (($1) + 1|0);
    HEAP32[$to_nxt>>2] = $incdec$ptr3;
    HEAP8[$1>>0] = -65;
    break;
   }
  }
 } while(0);
 $sub$ptr$lhs$cast67 = $frm_end;
 $2 = HEAP32[$frm_nxt>>2]|0;
 $cmp568 = ($2>>>0)<($frm_end>>>0);
 if (!($cmp568)) {
  $retval$0 = 0;
  STACKTOP = sp;return ($retval$0|0);
 }
 $sub$ptr$lhs$cast12 = $to_end;
 $4 = $2;
 L10: while(1) {
  $3 = HEAP16[$4>>1]|0;
  $conv = $3&65535;
  $cmp6 = ($conv>>>0)>($Maxcode>>>0);
  if ($cmp6) {
   $retval$0 = 2;
   label = 26;
   break;
  }
  $cmp10 = ($3&65535)<(128);
  do {
   if ($cmp10) {
    $5 = HEAP32[$to_nxt>>2]|0;
    $sub$ptr$rhs$cast13 = $5;
    $sub$ptr$sub14 = (($sub$ptr$lhs$cast12) - ($sub$ptr$rhs$cast13))|0;
    $cmp15 = ($sub$ptr$sub14|0)<(1);
    if ($cmp15) {
     $retval$0 = 1;
     label = 26;
     break L10;
    }
    $conv18 = $3&255;
    $incdec$ptr19 = (($5) + 1|0);
    HEAP32[$to_nxt>>2] = $incdec$ptr19;
    HEAP8[$5>>0] = $conv18;
   } else {
    $cmp21 = ($3&65535)<(2048);
    if ($cmp21) {
     $6 = HEAP32[$to_nxt>>2]|0;
     $sub$ptr$rhs$cast24 = $6;
     $sub$ptr$sub25 = (($sub$ptr$lhs$cast12) - ($sub$ptr$rhs$cast24))|0;
     $cmp26 = ($sub$ptr$sub25|0)<(2);
     if ($cmp26) {
      $retval$0 = 1;
      label = 26;
      break L10;
     }
     $shr67 = $conv >>> 6;
     $or = $shr67 | 192;
     $conv30 = $or&255;
     $incdec$ptr31 = (($6) + 1|0);
     HEAP32[$to_nxt>>2] = $incdec$ptr31;
     HEAP8[$6>>0] = $conv30;
     $and33 = $conv & 63;
     $or34 = $and33 | 128;
     $conv35 = $or34&255;
     $7 = HEAP32[$to_nxt>>2]|0;
     $incdec$ptr36 = (($7) + 1|0);
     HEAP32[$to_nxt>>2] = $incdec$ptr36;
     HEAP8[$7>>0] = $conv35;
     break;
    }
    $cmp39 = ($3&65535)<(55296);
    if ($cmp39) {
     $8 = HEAP32[$to_nxt>>2]|0;
     $sub$ptr$rhs$cast42 = $8;
     $sub$ptr$sub43 = (($sub$ptr$lhs$cast12) - ($sub$ptr$rhs$cast42))|0;
     $cmp44 = ($sub$ptr$sub43|0)<(3);
     if ($cmp44) {
      $retval$0 = 1;
      label = 26;
      break L10;
     }
     $shr4865 = $conv >>> 12;
     $or49 = $shr4865 | 224;
     $conv50 = $or49&255;
     $incdec$ptr51 = (($8) + 1|0);
     HEAP32[$to_nxt>>2] = $incdec$ptr51;
     HEAP8[$8>>0] = $conv50;
     $and53 = $conv >>> 6;
     $shr5466 = $and53 & 63;
     $or55 = $shr5466 | 128;
     $conv56 = $or55&255;
     $9 = HEAP32[$to_nxt>>2]|0;
     $incdec$ptr57 = (($9) + 1|0);
     HEAP32[$to_nxt>>2] = $incdec$ptr57;
     HEAP8[$9>>0] = $conv56;
     $and59 = $conv & 63;
     $or60 = $and59 | 128;
     $conv61 = $or60&255;
     $10 = HEAP32[$to_nxt>>2]|0;
     $incdec$ptr62 = (($10) + 1|0);
     HEAP32[$to_nxt>>2] = $incdec$ptr62;
     HEAP8[$10>>0] = $conv61;
     break;
    }
    $cmp65 = ($3&65535)<(56320);
    if (!($cmp65)) {
     $cmp135 = ($3&65535)<(57344);
     if ($cmp135) {
      $retval$0 = 2;
      label = 26;
      break L10;
     }
     $17 = HEAP32[$to_nxt>>2]|0;
     $sub$ptr$rhs$cast139 = $17;
     $sub$ptr$sub140 = (($sub$ptr$lhs$cast12) - ($sub$ptr$rhs$cast139))|0;
     $cmp141 = ($sub$ptr$sub140|0)<(3);
     if ($cmp141) {
      $retval$0 = 1;
      label = 26;
      break L10;
     }
     $shr14559 = $conv >>> 12;
     $or146 = $shr14559 | 224;
     $conv147 = $or146&255;
     $incdec$ptr148 = (($17) + 1|0);
     HEAP32[$to_nxt>>2] = $incdec$ptr148;
     HEAP8[$17>>0] = $conv147;
     $and150 = $conv >>> 6;
     $shr15160 = $and150 & 63;
     $or152 = $shr15160 | 128;
     $conv153 = $or152&255;
     $18 = HEAP32[$to_nxt>>2]|0;
     $incdec$ptr154 = (($18) + 1|0);
     HEAP32[$to_nxt>>2] = $incdec$ptr154;
     HEAP8[$18>>0] = $conv153;
     $and156 = $conv & 63;
     $or157 = $and156 | 128;
     $conv158 = $or157&255;
     $19 = HEAP32[$to_nxt>>2]|0;
     $incdec$ptr159 = (($19) + 1|0);
     HEAP32[$to_nxt>>2] = $incdec$ptr159;
     HEAP8[$19>>0] = $conv158;
     break;
    }
    $sub$ptr$rhs$cast68 = $4;
    $sub$ptr$sub69 = (($sub$ptr$lhs$cast67) - ($sub$ptr$rhs$cast68))|0;
    $cmp70 = ($sub$ptr$sub69|0)<(4);
    if ($cmp70) {
     $retval$0 = 1;
     label = 26;
     break L10;
    }
    $arrayidx = (($4) + 2|0);
    $11 = HEAP16[$arrayidx>>1]|0;
    $conv73 = $11&65535;
    $and74 = $conv73 & 64512;
    $cmp75 = ($and74|0)==(56320);
    if (!($cmp75)) {
     $retval$0 = 2;
     label = 26;
     break L10;
    }
    $12 = HEAP32[$to_nxt>>2]|0;
    $sub$ptr$rhs$cast79 = $12;
    $sub$ptr$sub80 = (($sub$ptr$lhs$cast12) - ($sub$ptr$rhs$cast79))|0;
    $cmp81 = ($sub$ptr$sub80|0)<(4);
    if ($cmp81) {
     $retval$0 = 1;
     label = 26;
     break L10;
    }
    $and85 = $conv & 960;
    $add = $and85 << 10;
    $shl = (($add) + 65536)|0;
    $and88 = $conv << 10;
    $shl89 = $and88 & 64512;
    $add90 = $shl | $shl89;
    $and92 = $conv73 & 1023;
    $add93 = $add90 | $and92;
    $cmp94 = ($add93>>>0)>($Maxcode>>>0);
    if ($cmp94) {
     $retval$0 = 2;
     label = 26;
     break L10;
    }
    HEAP32[$frm_nxt>>2] = $arrayidx;
    $shr10061 = $and85 >>> 6;
    $add101 = (($shr10061) + 1)|0;
    $shr10462 = $add101 >>> 2;
    $or105 = $shr10462 | 240;
    $conv106 = $or105&255;
    $13 = HEAP32[$to_nxt>>2]|0;
    $incdec$ptr107 = (($13) + 1|0);
    HEAP32[$to_nxt>>2] = $incdec$ptr107;
    HEAP8[$13>>0] = $conv106;
    $and109 = $add101 << 4;
    $shl110 = $and109 & 48;
    $and113 = $conv >>> 2;
    $shr11463 = $and113 & 15;
    $or111 = $shr11463 | $shl110;
    $or115 = $or111 | 128;
    $conv116 = $or115&255;
    $14 = HEAP32[$to_nxt>>2]|0;
    $incdec$ptr117 = (($14) + 1|0);
    HEAP32[$to_nxt>>2] = $incdec$ptr117;
    HEAP8[$14>>0] = $conv116;
    $and119 = $conv << 4;
    $shl120 = $and119 & 48;
    $and123 = $conv73 >>> 6;
    $shr12464 = $and123 & 15;
    $or121 = $shl120 | $shr12464;
    $or125 = $or121 | 128;
    $conv126 = $or125&255;
    $15 = HEAP32[$to_nxt>>2]|0;
    $incdec$ptr127 = (($15) + 1|0);
    HEAP32[$to_nxt>>2] = $incdec$ptr127;
    HEAP8[$15>>0] = $conv126;
    $and129 = $conv73 & 63;
    $or130 = $and129 | 128;
    $conv131 = $or130&255;
    $16 = HEAP32[$to_nxt>>2]|0;
    $incdec$ptr132 = (($16) + 1|0);
    HEAP32[$to_nxt>>2] = $incdec$ptr132;
    HEAP8[$16>>0] = $conv131;
   }
  } while(0);
  $20 = HEAP32[$frm_nxt>>2]|0;
  $incdec$ptr165 = (($20) + 2|0);
  HEAP32[$frm_nxt>>2] = $incdec$ptr165;
  $cmp5 = ($incdec$ptr165>>>0)<($frm_end>>>0);
  if ($cmp5) {
   $4 = $incdec$ptr165;
  } else {
   $retval$0 = 0;
   label = 26;
   break;
  }
 }
 if ((label|0) == 26) {
  STACKTOP = sp;return ($retval$0|0);
 }
 return 0|0;
}
function __ZNKSt3__17codecvtIDsc11__mbstate_tE5do_inERS1_PKcS5_RS5_PDsS7_RS7_($this,$0,$frm,$frm_end,$frm_nxt,$to,$to_end,$to_nxt) {
 $this = $this|0;
 $0 = $0|0;
 $frm = $frm|0;
 $frm_end = $frm_end|0;
 $frm_nxt = $frm_nxt|0;
 $to = $to|0;
 $to_end = $to_end|0;
 $to_nxt = $to_nxt|0;
 var $1 = 0, $2 = 0, $_frm_nxt = 0, $_to_nxt = 0, $add$ptr = 0, $add$ptr5 = 0, $call = 0, $sub$ptr$div = 0, $sub$ptr$lhs$cast = 0, $sub$ptr$lhs$cast2 = 0, $sub$ptr$rhs$cast = 0, $sub$ptr$rhs$cast3 = 0, $sub$ptr$sub = 0, $sub$ptr$sub4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $_frm_nxt = sp + 4|0;
 $_to_nxt = sp;
 HEAP32[$_frm_nxt>>2] = $frm;
 HEAP32[$_to_nxt>>2] = $to;
 $call = (__ZNSt3__1L13utf8_to_utf16EPKhS1_RS1_PtS3_RS3_mNS_12codecvt_modeE($frm,$frm_end,$_frm_nxt,$to,$to_end,$_to_nxt,1114111,0)|0);
 $1 = HEAP32[$_frm_nxt>>2]|0;
 $sub$ptr$lhs$cast = $1;
 $sub$ptr$rhs$cast = $frm;
 $sub$ptr$sub = (($sub$ptr$lhs$cast) - ($sub$ptr$rhs$cast))|0;
 $add$ptr = (($frm) + ($sub$ptr$sub)|0);
 HEAP32[$frm_nxt>>2] = $add$ptr;
 $2 = HEAP32[$_to_nxt>>2]|0;
 $sub$ptr$lhs$cast2 = $2;
 $sub$ptr$rhs$cast3 = $to;
 $sub$ptr$sub4 = (($sub$ptr$lhs$cast2) - ($sub$ptr$rhs$cast3))|0;
 $sub$ptr$div = $sub$ptr$sub4 >> 1;
 $add$ptr5 = (($to) + ($sub$ptr$div<<1)|0);
 HEAP32[$to_nxt>>2] = $add$ptr5;
 STACKTOP = sp;return ($call|0);
}
function __ZNSt3__1L13utf8_to_utf16EPKhS1_RS1_PtS3_RS3_mNS_12codecvt_modeE($frm,$frm_end,$frm_nxt,$to,$to_end,$to_nxt,$Maxcode,$mode) {
 $frm = $frm|0;
 $frm_end = $frm_end|0;
 $frm_nxt = $frm_nxt|0;
 $to = $to|0;
 $to_end = $to_end|0;
 $to_nxt = $to_nxt|0;
 $Maxcode = $Maxcode|0;
 $mode = $mode|0;
 var $$off = 0, $$pre = 0, $$pre73 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $add = 0, $add$ptr = 0, $add$ptr102 = 0, $add$ptr196 = 0, $add$ptr50 = 0, $add163 = 0, $add166 = 0, $and = 0, $and129 = 0, $and135 = 0, $and141 = 0, $and144 = 0, $and155 = 0, $and158 = 0, $and161 = 0, $and165 = 0, $and174 = 0, $and179 = 0, $and183 = 0;
 var $and37 = 0, $and42 = 0, $and44 = 0, $and66 = 0, $and72 = 0, $and77 = 0, $and82 = 0, $and88 = 0, $and91 = 0, $and95 = 0, $arrayidx114 = 0, $arrayidx116 = 0, $arrayidx117 = 0, $arrayidx3 = 0, $arrayidx35 = 0, $arrayidx62 = 0, $arrayidx63 = 0, $arrayidx7 = 0, $cmp = 0, $cmp1 = 0;
 var $cmp105 = 0, $cmp110 = 0, $cmp12 = 0, $cmp1270 = 0, $cmp13 = 0, $cmp130 = 0, $cmp136 = 0, $cmp142 = 0, $cmp145 = 0, $cmp15 = 0, $cmp151 = 0, $cmp167 = 0, $cmp19 = 0, $cmp204 = 0, $cmp23 = 0, $cmp27 = 0, $cmp32 = 0, $cmp38 = 0, $cmp47 = 0, $cmp5 = 0;
 var $cmp53 = 0, $cmp58 = 0, $cmp67 = 0, $cmp73 = 0, $cmp78 = 0, $cmp83 = 0, $cmp9 = 0, $cmp99 = 0, $cond = 0, $conv14 = 0, $conv140 = 0, $conv143 = 0, $conv157 = 0, $conv186 = 0, $conv194 = 0, $conv21 = 0, $conv36 = 0, $conv45 = 0, $conv81 = 0, $conv90 = 0;
 var $conv97 = 0, $conv98 = 0, $incdec$ptr = 0, $incdec$ptr195 = 0, $incdec$ptr203 = 0, $or = 0, $or175 = 0, $or177 = 0, $or181 = 0, $or185 = 0, $or190 = 0, $or193 = 0, $or93 = 0, $or96 = 0, $retval$0 = 0, $shl = 0, $shl156 = 0, $shl159 = 0, $shl162 = 0, $shl172 = 0;
 var $shl176 = 0, $shl180 = 0, $shl189 = 0, $shl92 = 0, $shr18468 = 0, $shr67 = 0, $sub = 0, $sub$ptr$lhs$cast = 0, $sub$ptr$lhs$cast148 = 0, $sub$ptr$lhs$cast29 = 0, $sub$ptr$rhs$cast = 0, $sub$ptr$rhs$cast108 = 0, $sub$ptr$rhs$cast149 = 0, $sub$ptr$rhs$cast30 = 0, $sub$ptr$rhs$cast56 = 0, $sub$ptr$sub = 0, $sub$ptr$sub109 = 0, $sub$ptr$sub150 = 0, $sub$ptr$sub31 = 0, $sub$ptr$sub57 = 0;
 var $tobool = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$frm_nxt>>2] = $frm;
 HEAP32[$to_nxt>>2] = $to;
 $and = $mode & 4;
 $tobool = ($and|0)==(0);
 $$pre73 = HEAP32[$frm_nxt>>2]|0;
 if ($tobool) {
  $3 = $$pre73;
 } else {
  $sub$ptr$lhs$cast = $frm_end;
  $sub$ptr$rhs$cast = $$pre73;
  $sub$ptr$sub = (($sub$ptr$lhs$cast) - ($sub$ptr$rhs$cast))|0;
  $cmp = ($sub$ptr$sub|0)>(2);
  if ($cmp) {
   $0 = HEAP8[$$pre73>>0]|0;
   $cmp1 = ($0<<24>>24)==(-17);
   if ($cmp1) {
    $arrayidx3 = (($$pre73) + 1|0);
    $1 = HEAP8[$arrayidx3>>0]|0;
    $cmp5 = ($1<<24>>24)==(-69);
    if ($cmp5) {
     $arrayidx7 = (($$pre73) + 2|0);
     $2 = HEAP8[$arrayidx7>>0]|0;
     $cmp9 = ($2<<24>>24)==(-65);
     if ($cmp9) {
      $add$ptr = (($$pre73) + 3|0);
      HEAP32[$frm_nxt>>2] = $add$ptr;
      $3 = $add$ptr;
     } else {
      $3 = $$pre73;
     }
    } else {
     $3 = $$pre73;
    }
   } else {
    $3 = $$pre73;
   }
  } else {
   $3 = $$pre73;
  }
 }
 $cmp1270 = ($3>>>0)<($frm_end>>>0);
 L8: do {
  if ($cmp1270) {
   $sub$ptr$lhs$cast29 = $frm_end;
   $sub$ptr$lhs$cast148 = $to_end;
   $$pre = HEAP32[$to_nxt>>2]|0;
   $4 = $$pre;$6 = $3;
   L10: while(1) {
    $cmp13 = ($4>>>0)<($to_end>>>0);
    if (!($cmp13)) {
     $17 = $6;
     break L8;
    }
    $5 = HEAP8[$6>>0]|0;
    $conv14 = $5&255;
    $cmp15 = ($conv14>>>0)>($Maxcode>>>0);
    if ($cmp15) {
     $retval$0 = 2;
     label = 41;
     break;
    }
    $cmp19 = ($5<<24>>24)>(-1);
    do {
     if ($cmp19) {
      $conv21 = $5&255;
      HEAP16[$4>>1] = $conv21;
      $incdec$ptr = (($6) + 1|0);
      HEAP32[$frm_nxt>>2] = $incdec$ptr;
     } else {
      $cmp23 = ($5&255)<(194);
      if ($cmp23) {
       $retval$0 = 2;
       label = 41;
       break L10;
      }
      $cmp27 = ($5&255)<(224);
      if ($cmp27) {
       $sub$ptr$rhs$cast30 = $6;
       $sub$ptr$sub31 = (($sub$ptr$lhs$cast29) - ($sub$ptr$rhs$cast30))|0;
       $cmp32 = ($sub$ptr$sub31|0)<(2);
       if ($cmp32) {
        $retval$0 = 1;
        label = 41;
        break L10;
       }
       $arrayidx35 = (($6) + 1|0);
       $7 = HEAP8[$arrayidx35>>0]|0;
       $conv36 = $7&255;
       $and37 = $conv36 & 192;
       $cmp38 = ($and37|0)==(128);
       if (!($cmp38)) {
        $retval$0 = 2;
        label = 41;
        break L10;
       }
       $and42 = $conv14 << 6;
       $shl = $and42 & 1984;
       $and44 = $conv36 & 63;
       $or = $and44 | $shl;
       $cmp47 = ($or>>>0)>($Maxcode>>>0);
       if ($cmp47) {
        $retval$0 = 2;
        label = 41;
        break L10;
       }
       $conv45 = $or&65535;
       HEAP16[$4>>1] = $conv45;
       $add$ptr50 = (($6) + 2|0);
       HEAP32[$frm_nxt>>2] = $add$ptr50;
       break;
      }
      $cmp53 = ($5&255)<(240);
      if ($cmp53) {
       $sub$ptr$rhs$cast56 = $6;
       $sub$ptr$sub57 = (($sub$ptr$lhs$cast29) - ($sub$ptr$rhs$cast56))|0;
       $cmp58 = ($sub$ptr$sub57|0)<(3);
       if ($cmp58) {
        $retval$0 = 1;
        label = 41;
        break L10;
       }
       $arrayidx62 = (($6) + 1|0);
       $8 = HEAP8[$arrayidx62>>0]|0;
       $arrayidx63 = (($6) + 2|0);
       $9 = HEAP8[$arrayidx63>>0]|0;
       if ((($conv14|0) == 224)) {
        $and66 = $8 & -32;
        $cmp67 = ($and66<<24>>24)==(-96);
        if (!($cmp67)) {
         $retval$0 = 2;
         label = 41;
         break L10;
        }
       } else if ((($conv14|0) == 237)) {
        $and72 = $8 & -32;
        $cmp73 = ($and72<<24>>24)==(-128);
        if (!($cmp73)) {
         $retval$0 = 2;
         label = 41;
         break L10;
        }
       } else {
        $and77 = $8 & -64;
        $cmp78 = ($and77<<24>>24)==(-128);
        if (!($cmp78)) {
         $retval$0 = 2;
         label = 41;
         break L10;
        }
       }
       $conv81 = $9&255;
       $and82 = $conv81 & 192;
       $cmp83 = ($and82|0)==(128);
       if (!($cmp83)) {
        $retval$0 = 2;
        label = 41;
        break L10;
       }
       $and88 = $conv14 << 12;
       $conv90 = $8&255;
       $and91 = $conv90 << 6;
       $shl92 = $and91 & 4032;
       $or93 = $shl92 | $and88;
       $and95 = $conv81 & 63;
       $or96 = $or93 | $and95;
       $conv98 = $or96 & 65535;
       $cmp99 = ($conv98>>>0)>($Maxcode>>>0);
       if ($cmp99) {
        $retval$0 = 2;
        label = 41;
        break L10;
       }
       $conv97 = $or96&65535;
       HEAP16[$4>>1] = $conv97;
       $add$ptr102 = (($6) + 3|0);
       HEAP32[$frm_nxt>>2] = $add$ptr102;
       break;
      }
      $cmp105 = ($5&255)<(245);
      if (!($cmp105)) {
       $retval$0 = 2;
       label = 41;
       break L10;
      }
      $sub$ptr$rhs$cast108 = $6;
      $sub$ptr$sub109 = (($sub$ptr$lhs$cast29) - ($sub$ptr$rhs$cast108))|0;
      $cmp110 = ($sub$ptr$sub109|0)<(4);
      if ($cmp110) {
       $retval$0 = 1;
       label = 41;
       break L10;
      }
      $arrayidx114 = (($6) + 1|0);
      $10 = HEAP8[$arrayidx114>>0]|0;
      $arrayidx116 = (($6) + 2|0);
      $11 = HEAP8[$arrayidx116>>0]|0;
      $arrayidx117 = (($6) + 3|0);
      $12 = HEAP8[$arrayidx117>>0]|0;
      if ((($conv14|0) == 244)) {
       $and129 = $10 & -16;
       $cmp130 = ($and129<<24>>24)==(-128);
       if (!($cmp130)) {
        $retval$0 = 2;
        label = 41;
        break L10;
       }
      } else if ((($conv14|0) == 240)) {
       $$off = (($10) + 112)<<24>>24;
       $13 = ($$off&255)<(48);
       if (!($13)) {
        $retval$0 = 2;
        label = 41;
        break L10;
       }
      } else {
       $and135 = $10 & -64;
       $cmp136 = ($and135<<24>>24)==(-128);
       if (!($cmp136)) {
        $retval$0 = 2;
        label = 41;
        break L10;
       }
      }
      $conv140 = $11&255;
      $and141 = $conv140 & 192;
      $cmp142 = ($and141|0)==(128);
      if (!($cmp142)) {
       $retval$0 = 2;
       label = 41;
       break L10;
      }
      $conv143 = $12&255;
      $and144 = $conv143 & 192;
      $cmp145 = ($and144|0)==(128);
      if (!($cmp145)) {
       $retval$0 = 2;
       label = 41;
       break L10;
      }
      $sub$ptr$rhs$cast149 = $4;
      $sub$ptr$sub150 = (($sub$ptr$lhs$cast148) - ($sub$ptr$rhs$cast149))|0;
      $cmp151 = ($sub$ptr$sub150|0)<(4);
      if ($cmp151) {
       $retval$0 = 1;
       label = 41;
       break L10;
      }
      $and155 = $conv14 & 7;
      $shl156 = $and155 << 18;
      $conv157 = $10&255;
      $and158 = $conv157 << 12;
      $shl159 = $and158 & 258048;
      $add = $shl159 | $shl156;
      $and161 = $conv140 << 6;
      $shl162 = $and161 & 4032;
      $add163 = $add | $shl162;
      $and165 = $conv143 & 63;
      $add166 = $add163 | $and165;
      $cmp167 = ($add166>>>0)>($Maxcode>>>0);
      if ($cmp167) {
       $retval$0 = 2;
       label = 41;
       break L10;
      }
      $shl172 = $and155 << 2;
      $and174 = $conv157 >>> 4;
      $shr67 = $and174 & 3;
      $or175 = $shr67 | $shl172;
      $sub = $or175 << 6;
      $shl176 = (($sub) + 16320)|0;
      $and179 = $conv157 << 2;
      $shl180 = $and179 & 60;
      $and183 = $conv140 >>> 4;
      $shr18468 = $and183 & 3;
      $or177 = $shl180 | $shr18468;
      $or181 = $or177 | $shl176;
      $or185 = $or181 | 55296;
      $conv186 = $or185&65535;
      HEAP16[$4>>1] = $conv186;
      $shl189 = $and161 & 960;
      $or190 = $and165 | $shl189;
      $or193 = $or190 | 56320;
      $conv194 = $or193&65535;
      $incdec$ptr195 = (($4) + 2|0);
      HEAP32[$to_nxt>>2] = $incdec$ptr195;
      HEAP16[$incdec$ptr195>>1] = $conv194;
      $14 = HEAP32[$frm_nxt>>2]|0;
      $add$ptr196 = (($14) + 4|0);
      HEAP32[$frm_nxt>>2] = $add$ptr196;
     }
    } while(0);
    $15 = HEAP32[$to_nxt>>2]|0;
    $incdec$ptr203 = (($15) + 2|0);
    HEAP32[$to_nxt>>2] = $incdec$ptr203;
    $16 = HEAP32[$frm_nxt>>2]|0;
    $cmp12 = ($16>>>0)<($frm_end>>>0);
    if ($cmp12) {
     $4 = $incdec$ptr203;$6 = $16;
    } else {
     $17 = $16;
     break L8;
    }
   }
   if ((label|0) == 41) {
    STACKTOP = sp;return ($retval$0|0);
   }
  } else {
   $17 = $3;
  }
 } while(0);
 $cmp204 = ($17>>>0)<($frm_end>>>0);
 $cond = $cmp204&1;
 $retval$0 = $cond;
 STACKTOP = sp;return ($retval$0|0);
}
function __ZNKSt3__17codecvtIDsc11__mbstate_tE10do_unshiftERS1_PcS4_RS4_($this,$0,$to,$1,$to_nxt) {
 $this = $this|0;
 $0 = $0|0;
 $to = $to|0;
 $1 = $1|0;
 $to_nxt = $to_nxt|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$to_nxt>>2] = $to;
 STACKTOP = sp;return 3;
}
function __ZNKSt3__17codecvtIDsc11__mbstate_tE11do_encodingEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return 0;
}
function __ZNKSt3__17codecvtIDsc11__mbstate_tE16do_always_noconvEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return 0;
}
function __ZNKSt3__17codecvtIDsc11__mbstate_tE9do_lengthERS1_PKcS5_j($this,$0,$frm,$frm_end,$mx) {
 $this = $this|0;
 $0 = $0|0;
 $frm = $frm|0;
 $frm_end = $frm_end|0;
 $mx = $mx|0;
 var $call = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $call = (__ZNSt3__1L20utf8_to_utf16_lengthEPKhS1_jmNS_12codecvt_modeE($frm,$frm_end,$mx,1114111,0)|0);
 STACKTOP = sp;return ($call|0);
}
function __ZNSt3__1L20utf8_to_utf16_lengthEPKhS1_jmNS_12codecvt_modeE($frm,$frm_end,$mx,$Maxcode,$mode) {
 $frm = $frm|0;
 $frm_end = $frm_end|0;
 $mx = $mx|0;
 $Maxcode = $Maxcode|0;
 $mode = $mode|0;
 var $$off = 0, $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $add = 0, $add$ptr = 0, $add$ptr$frm = 0, $add$ptr105 = 0, $add$ptr179 = 0, $add$ptr48 = 0, $add172 = 0, $add175 = 0;
 var $and = 0, $and100 = 0, $and137 = 0, $and146 = 0, $and155 = 0, $and159 = 0, $and164 = 0, $and167 = 0, $and170 = 0, $and174 = 0, $and34 = 0, $and39 = 0, $and42 = 0, $and63 = 0, $and72 = 0, $and80 = 0, $and88 = 0, $and93 = 0, $and96 = 0, $arrayidx119 = 0;
 var $arrayidx121 = 0, $arrayidx122 = 0, $arrayidx3 = 0, $arrayidx32 = 0, $arrayidx59 = 0, $arrayidx60 = 0, $arrayidx7 = 0, $cmp = 0, $cmp1 = 0, $cmp102 = 0, $cmp108 = 0, $cmp113 = 0, $cmp115 = 0, $cmp12 = 0, $cmp1277 = 0, $cmp13 = 0, $cmp1378 = 0, $cmp138 = 0, $cmp147 = 0, $cmp15 = 0;
 var $cmp156 = 0, $cmp160 = 0, $cmp176 = 0, $cmp19 = 0, $cmp22 = 0, $cmp26 = 0, $cmp31 = 0, $cmp35 = 0, $cmp45 = 0, $cmp5 = 0, $cmp51 = 0, $cmp56 = 0, $cmp64 = 0, $cmp73 = 0, $cmp81 = 0, $cmp89 = 0, $cmp9 = 0, $conv14 = 0, $conv154 = 0, $conv158 = 0;
 var $conv166 = 0, $conv33 = 0, $conv87 = 0, $conv95 = 0, $frm_nxt$1$lcssa = 0, $frm_nxt$1$ph = 0, $frm_nxt$181 = 0, $frm_nxt$2 = 0, $inc = 0, $inc186 = 0, $incdec$ptr = 0, $nchar16_t$080 = 0, $nchar16_t$1 = 0, $or = 0, $or$cond = 0, $or$cond79 = 0, $or101 = 0, $or98 = 0, $retval$0 = 0, $shl = 0;
 var $shl165 = 0, $shl168 = 0, $shl171 = 0, $shl94 = 0, $shl97 = 0, $sub = 0, $sub$ptr$lhs$cast = 0, $sub$ptr$lhs$cast187 = 0, $sub$ptr$lhs$cast28 = 0, $sub$ptr$rhs$cast = 0, $sub$ptr$rhs$cast111 = 0, $sub$ptr$rhs$cast132 = 0, $sub$ptr$rhs$cast141 = 0, $sub$ptr$rhs$cast150 = 0, $sub$ptr$rhs$cast188 = 0, $sub$ptr$rhs$cast29 = 0, $sub$ptr$rhs$cast54 = 0, $sub$ptr$rhs$cast67 = 0, $sub$ptr$rhs$cast76 = 0, $sub$ptr$rhs$cast84 = 0;
 var $sub$ptr$sub = 0, $sub$ptr$sub112 = 0, $sub$ptr$sub133 = 0, $sub$ptr$sub142 = 0, $sub$ptr$sub151 = 0, $sub$ptr$sub189 = 0, $sub$ptr$sub30 = 0, $sub$ptr$sub55 = 0, $sub$ptr$sub68 = 0, $sub$ptr$sub77 = 0, $sub$ptr$sub85 = 0, $tobool = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $and = $mode & 4;
 $tobool = ($and|0)==(0);
 if ($tobool) {
  $frm_nxt$1$ph = $frm;
 } else {
  $sub$ptr$lhs$cast = $frm_end;
  $sub$ptr$rhs$cast = $frm;
  $sub$ptr$sub = (($sub$ptr$lhs$cast) - ($sub$ptr$rhs$cast))|0;
  $cmp = ($sub$ptr$sub|0)>(2);
  if ($cmp) {
   $0 = HEAP8[$frm>>0]|0;
   $cmp1 = ($0<<24>>24)==(-17);
   if ($cmp1) {
    $arrayidx3 = (($frm) + 1|0);
    $1 = HEAP8[$arrayidx3>>0]|0;
    $cmp5 = ($1<<24>>24)==(-69);
    if ($cmp5) {
     $arrayidx7 = (($frm) + 2|0);
     $2 = HEAP8[$arrayidx7>>0]|0;
     $cmp9 = ($2<<24>>24)==(-65);
     $add$ptr = (($frm) + 3|0);
     $add$ptr$frm = $cmp9 ? $add$ptr : $frm;
     $frm_nxt$1$ph = $add$ptr$frm;
    } else {
     $frm_nxt$1$ph = $frm;
    }
   } else {
    $frm_nxt$1$ph = $frm;
   }
  } else {
   $frm_nxt$1$ph = $frm;
  }
 }
 $cmp1277 = ($frm_nxt$1$ph>>>0)<($frm_end>>>0);
 $cmp1378 = ($mx|0)!=(0);
 $or$cond79 = $cmp1277 & $cmp1378;
 L7: do {
  if ($or$cond79) {
   $sub$ptr$lhs$cast28 = $frm_end;
   $frm_nxt$181 = $frm_nxt$1$ph;$nchar16_t$080 = 0;
   L9: while(1) {
    $3 = HEAP8[$frm_nxt$181>>0]|0;
    $conv14 = $3&255;
    $cmp15 = ($conv14>>>0)>($Maxcode>>>0);
    if ($cmp15) {
     $frm_nxt$1$lcssa = $frm_nxt$181;
     break L7;
    }
    $cmp19 = ($3<<24>>24)>(-1);
    do {
     if ($cmp19) {
      $incdec$ptr = (($frm_nxt$181) + 1|0);
      $frm_nxt$2 = $incdec$ptr;$nchar16_t$1 = $nchar16_t$080;
     } else {
      $cmp22 = ($3&255)<(194);
      if ($cmp22) {
       $frm_nxt$1$lcssa = $frm_nxt$181;
       break L7;
      }
      $cmp26 = ($3&255)<(224);
      if ($cmp26) {
       $sub$ptr$rhs$cast29 = $frm_nxt$181;
       $sub$ptr$sub30 = (($sub$ptr$lhs$cast28) - ($sub$ptr$rhs$cast29))|0;
       $cmp31 = ($sub$ptr$sub30|0)<(2);
       if ($cmp31) {
        $frm_nxt$1$lcssa = $frm_nxt$181;
        break L7;
       }
       $arrayidx32 = (($frm_nxt$181) + 1|0);
       $4 = HEAP8[$arrayidx32>>0]|0;
       $conv33 = $4&255;
       $and34 = $conv33 & 192;
       $cmp35 = ($and34|0)==(128);
       if (!($cmp35)) {
        $frm_nxt$1$lcssa = $frm_nxt$181;
        break L7;
       }
       $and39 = $conv14 << 6;
       $shl = $and39 & 1984;
       $and42 = $conv33 & 63;
       $or = $and42 | $shl;
       $cmp45 = ($or>>>0)>($Maxcode>>>0);
       if ($cmp45) {
        $frm_nxt$1$lcssa = $frm_nxt$181;
        break L7;
       }
       $add$ptr48 = (($frm_nxt$181) + 2|0);
       $frm_nxt$2 = $add$ptr48;$nchar16_t$1 = $nchar16_t$080;
       break;
      }
      $cmp51 = ($3&255)<(240);
      if ($cmp51) {
       $sub$ptr$rhs$cast54 = $frm_nxt$181;
       $sub$ptr$sub55 = (($sub$ptr$lhs$cast28) - ($sub$ptr$rhs$cast54))|0;
       $cmp56 = ($sub$ptr$sub55|0)<(3);
       if ($cmp56) {
        $frm_nxt$1$lcssa = $frm_nxt$181;
        break L7;
       }
       $arrayidx59 = (($frm_nxt$181) + 1|0);
       $5 = HEAP8[$arrayidx59>>0]|0;
       $arrayidx60 = (($frm_nxt$181) + 2|0);
       $6 = HEAP8[$arrayidx60>>0]|0;
       if ((($conv14|0) == 224)) {
        $and63 = $5 & -32;
        $cmp64 = ($and63<<24>>24)==(-96);
        if (!($cmp64)) {
         label = 21;
         break L9;
        }
       } else if ((($conv14|0) == 237)) {
        $and72 = $5 & -32;
        $cmp73 = ($and72<<24>>24)==(-128);
        if (!($cmp73)) {
         label = 23;
         break L9;
        }
       } else {
        $and80 = $5 & -64;
        $cmp81 = ($and80<<24>>24)==(-128);
        if (!($cmp81)) {
         label = 25;
         break L9;
        }
       }
       $conv87 = $6&255;
       $and88 = $conv87 & 192;
       $cmp89 = ($and88|0)==(128);
       if (!($cmp89)) {
        $frm_nxt$1$lcssa = $frm_nxt$181;
        break L7;
       }
       $and93 = $conv14 << 12;
       $shl94 = $and93 & 61440;
       $conv95 = $5&255;
       $and96 = $conv95 << 6;
       $shl97 = $and96 & 4032;
       $or98 = $shl97 | $shl94;
       $and100 = $conv87 & 63;
       $or101 = $or98 | $and100;
       $cmp102 = ($or101>>>0)>($Maxcode>>>0);
       if ($cmp102) {
        $frm_nxt$1$lcssa = $frm_nxt$181;
        break L7;
       }
       $add$ptr105 = (($frm_nxt$181) + 3|0);
       $frm_nxt$2 = $add$ptr105;$nchar16_t$1 = $nchar16_t$080;
       break;
      }
      $cmp108 = ($3&255)<(245);
      if (!($cmp108)) {
       $frm_nxt$1$lcssa = $frm_nxt$181;
       break L7;
      }
      $sub$ptr$rhs$cast111 = $frm_nxt$181;
      $sub$ptr$sub112 = (($sub$ptr$lhs$cast28) - ($sub$ptr$rhs$cast111))|0;
      $cmp113 = ($sub$ptr$sub112|0)<(4);
      if ($cmp113) {
       $frm_nxt$1$lcssa = $frm_nxt$181;
       break L7;
      }
      $sub = (($mx) - ($nchar16_t$080))|0;
      $cmp115 = ($sub>>>0)<(2);
      if ($cmp115) {
       $frm_nxt$1$lcssa = $frm_nxt$181;
       break L7;
      }
      $arrayidx119 = (($frm_nxt$181) + 1|0);
      $7 = HEAP8[$arrayidx119>>0]|0;
      $arrayidx121 = (($frm_nxt$181) + 2|0);
      $8 = HEAP8[$arrayidx121>>0]|0;
      $arrayidx122 = (($frm_nxt$181) + 3|0);
      $9 = HEAP8[$arrayidx122>>0]|0;
      if ((($conv14|0) == 244)) {
       $and137 = $7 & -16;
       $cmp138 = ($and137<<24>>24)==(-128);
       if (!($cmp138)) {
        label = 36;
        break L9;
       }
      } else if ((($conv14|0) == 240)) {
       $$off = (($7) + 112)<<24>>24;
       $10 = ($$off&255)<(48);
       if (!($10)) {
        label = 34;
        break L9;
       }
      } else {
       $and146 = $7 & -64;
       $cmp147 = ($and146<<24>>24)==(-128);
       if (!($cmp147)) {
        label = 38;
        break L9;
       }
      }
      $conv154 = $8&255;
      $and155 = $conv154 & 192;
      $cmp156 = ($and155|0)==(128);
      if (!($cmp156)) {
       $frm_nxt$1$lcssa = $frm_nxt$181;
       break L7;
      }
      $conv158 = $9&255;
      $and159 = $conv158 & 192;
      $cmp160 = ($and159|0)==(128);
      if (!($cmp160)) {
       $frm_nxt$1$lcssa = $frm_nxt$181;
       break L7;
      }
      $and164 = $conv14 << 18;
      $shl165 = $and164 & 1835008;
      $conv166 = $7&255;
      $and167 = $conv166 << 12;
      $shl168 = $and167 & 258048;
      $add = $shl168 | $shl165;
      $and170 = $conv154 << 6;
      $shl171 = $and170 & 4032;
      $add172 = $add | $shl171;
      $and174 = $conv158 & 63;
      $add175 = $add172 | $and174;
      $cmp176 = ($add175>>>0)>($Maxcode>>>0);
      if ($cmp176) {
       $frm_nxt$1$lcssa = $frm_nxt$181;
       break L7;
      }
      $inc = (($nchar16_t$080) + 1)|0;
      $add$ptr179 = (($frm_nxt$181) + 4|0);
      $frm_nxt$2 = $add$ptr179;$nchar16_t$1 = $inc;
     }
    } while(0);
    $inc186 = (($nchar16_t$1) + 1)|0;
    $cmp12 = ($frm_nxt$2>>>0)<($frm_end>>>0);
    $cmp13 = ($inc186>>>0)<($mx>>>0);
    $or$cond = $cmp12 & $cmp13;
    if ($or$cond) {
     $frm_nxt$181 = $frm_nxt$2;$nchar16_t$080 = $inc186;
    } else {
     $frm_nxt$1$lcssa = $frm_nxt$2;
     break L7;
    }
   }
   if ((label|0) == 21) {
    $sub$ptr$rhs$cast67 = $frm;
    $sub$ptr$sub68 = (($sub$ptr$rhs$cast54) - ($sub$ptr$rhs$cast67))|0;
    $retval$0 = $sub$ptr$sub68;
    STACKTOP = sp;return ($retval$0|0);
   }
   else if ((label|0) == 23) {
    $sub$ptr$rhs$cast76 = $frm;
    $sub$ptr$sub77 = (($sub$ptr$rhs$cast54) - ($sub$ptr$rhs$cast76))|0;
    $retval$0 = $sub$ptr$sub77;
    STACKTOP = sp;return ($retval$0|0);
   }
   else if ((label|0) == 25) {
    $sub$ptr$rhs$cast84 = $frm;
    $sub$ptr$sub85 = (($sub$ptr$rhs$cast54) - ($sub$ptr$rhs$cast84))|0;
    $retval$0 = $sub$ptr$sub85;
    STACKTOP = sp;return ($retval$0|0);
   }
   else if ((label|0) == 34) {
    $sub$ptr$rhs$cast132 = $frm;
    $sub$ptr$sub133 = (($sub$ptr$rhs$cast111) - ($sub$ptr$rhs$cast132))|0;
    $retval$0 = $sub$ptr$sub133;
    STACKTOP = sp;return ($retval$0|0);
   }
   else if ((label|0) == 36) {
    $sub$ptr$rhs$cast141 = $frm;
    $sub$ptr$sub142 = (($sub$ptr$rhs$cast111) - ($sub$ptr$rhs$cast141))|0;
    $retval$0 = $sub$ptr$sub142;
    STACKTOP = sp;return ($retval$0|0);
   }
   else if ((label|0) == 38) {
    $sub$ptr$rhs$cast150 = $frm;
    $sub$ptr$sub151 = (($sub$ptr$rhs$cast111) - ($sub$ptr$rhs$cast150))|0;
    $retval$0 = $sub$ptr$sub151;
    STACKTOP = sp;return ($retval$0|0);
   }
  } else {
   $frm_nxt$1$lcssa = $frm_nxt$1$ph;
  }
 } while(0);
 $sub$ptr$lhs$cast187 = $frm_nxt$1$lcssa;
 $sub$ptr$rhs$cast188 = $frm;
 $sub$ptr$sub189 = (($sub$ptr$lhs$cast187) - ($sub$ptr$rhs$cast188))|0;
 $retval$0 = $sub$ptr$sub189;
 STACKTOP = sp;return ($retval$0|0);
}
function __ZNKSt3__17codecvtIDsc11__mbstate_tE13do_max_lengthEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return 4;
}
function __ZNSt3__17codecvtIDic11__mbstate_tED0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 STACKTOP = sp;return;
}
function __ZNKSt3__17codecvtIDic11__mbstate_tE6do_outERS1_PKDiS5_RS5_PcS7_RS7_($this,$0,$frm,$frm_end,$frm_nxt,$to,$to_end,$to_nxt) {
 $this = $this|0;
 $0 = $0|0;
 $frm = $frm|0;
 $frm_end = $frm_end|0;
 $frm_nxt = $frm_nxt|0;
 $to = $to|0;
 $to_end = $to_end|0;
 $to_nxt = $to_nxt|0;
 var $1 = 0, $2 = 0, $_frm_nxt = 0, $_to_nxt = 0, $add$ptr = 0, $add$ptr5 = 0, $call = 0, $sub$ptr$div = 0, $sub$ptr$lhs$cast = 0, $sub$ptr$lhs$cast2 = 0, $sub$ptr$rhs$cast = 0, $sub$ptr$rhs$cast3 = 0, $sub$ptr$sub = 0, $sub$ptr$sub4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $_frm_nxt = sp + 4|0;
 $_to_nxt = sp;
 HEAP32[$_frm_nxt>>2] = $frm;
 HEAP32[$_to_nxt>>2] = $to;
 $call = (__ZNSt3__1L12ucs4_to_utf8EPKjS1_RS1_PhS3_RS3_mNS_12codecvt_modeE($frm,$frm_end,$_frm_nxt,$to,$to_end,$_to_nxt,1114111,0)|0);
 $1 = HEAP32[$_frm_nxt>>2]|0;
 $sub$ptr$lhs$cast = $1;
 $sub$ptr$rhs$cast = $frm;
 $sub$ptr$sub = (($sub$ptr$lhs$cast) - ($sub$ptr$rhs$cast))|0;
 $sub$ptr$div = $sub$ptr$sub >> 2;
 $add$ptr = (($frm) + ($sub$ptr$div<<2)|0);
 HEAP32[$frm_nxt>>2] = $add$ptr;
 $2 = HEAP32[$_to_nxt>>2]|0;
 $sub$ptr$lhs$cast2 = $2;
 $sub$ptr$rhs$cast3 = $to;
 $sub$ptr$sub4 = (($sub$ptr$lhs$cast2) - ($sub$ptr$rhs$cast3))|0;
 $add$ptr5 = (($to) + ($sub$ptr$sub4)|0);
 HEAP32[$to_nxt>>2] = $add$ptr5;
 STACKTOP = sp;return ($call|0);
}
function __ZNSt3__1L12ucs4_to_utf8EPKjS1_RS1_PhS3_RS3_mNS_12codecvt_modeE($frm,$frm_end,$frm_nxt,$to,$to_end,$to_nxt,$Maxcode,$mode) {
 $frm = $frm|0;
 $frm_end = $frm_end|0;
 $frm_nxt = $frm_nxt|0;
 $to = $to|0;
 $to_end = $to_end|0;
 $to_nxt = $to_nxt|0;
 $Maxcode = $Maxcode|0;
 $mode = $mode|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $and = 0, $and30 = 0, $and47 = 0, $and52 = 0, $and6 = 0;
 var $and67 = 0, $and72 = 0, $and77 = 0, $cmp = 0, $cmp11 = 0, $cmp16 = 0, $cmp20 = 0, $cmp25 = 0, $cmp35 = 0, $cmp40 = 0, $cmp5 = 0, $cmp538 = 0, $cmp60 = 0, $cmp7 = 0, $cmp8 = 0, $conv = 0, $conv28 = 0, $conv32 = 0, $conv45 = 0, $conv50 = 0;
 var $conv54 = 0, $conv65 = 0, $conv70 = 0, $conv75 = 0, $conv79 = 0, $incdec$ptr = 0, $incdec$ptr19 = 0, $incdec$ptr2 = 0, $incdec$ptr29 = 0, $incdec$ptr3 = 0, $incdec$ptr33 = 0, $incdec$ptr46 = 0, $incdec$ptr51 = 0, $incdec$ptr55 = 0, $incdec$ptr66 = 0, $incdec$ptr71 = 0, $incdec$ptr76 = 0, $incdec$ptr80 = 0, $incdec$ptr84 = 0, $or = 0;
 var $or$cond = 0, $or31 = 0, $or44 = 0, $or49 = 0, $or53 = 0, $or64 = 0, $or69 = 0, $or74 = 0, $or78 = 0, $retval$0 = 0, $shr = 0, $shr43 = 0, $shr48 = 0, $shr63 = 0, $shr68 = 0, $shr73 = 0, $sub$ptr$lhs$cast = 0, $sub$ptr$lhs$cast13 = 0, $sub$ptr$rhs$cast = 0, $sub$ptr$rhs$cast14 = 0;
 var $sub$ptr$rhs$cast23 = 0, $sub$ptr$rhs$cast38 = 0, $sub$ptr$sub = 0, $sub$ptr$sub15 = 0, $sub$ptr$sub24 = 0, $sub$ptr$sub39 = 0, $tobool = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$frm_nxt>>2] = $frm;
 HEAP32[$to_nxt>>2] = $to;
 $and = $mode & 2;
 $tobool = ($and|0)==(0);
 do {
  if (!($tobool)) {
   $sub$ptr$lhs$cast = $to_end;
   $sub$ptr$rhs$cast = $to;
   $sub$ptr$sub = (($sub$ptr$lhs$cast) - ($sub$ptr$rhs$cast))|0;
   $cmp = ($sub$ptr$sub|0)<(3);
   if ($cmp) {
    $retval$0 = 1;
    STACKTOP = sp;return ($retval$0|0);
   } else {
    $incdec$ptr = (($to) + 1|0);
    HEAP32[$to_nxt>>2] = $incdec$ptr;
    HEAP8[$to>>0] = -17;
    $0 = HEAP32[$to_nxt>>2]|0;
    $incdec$ptr2 = (($0) + 1|0);
    HEAP32[$to_nxt>>2] = $incdec$ptr2;
    HEAP8[$0>>0] = -69;
    $1 = HEAP32[$to_nxt>>2]|0;
    $incdec$ptr3 = (($1) + 1|0);
    HEAP32[$to_nxt>>2] = $incdec$ptr3;
    HEAP8[$1>>0] = -65;
    break;
   }
  }
 } while(0);
 $2 = HEAP32[$frm_nxt>>2]|0;
 $cmp538 = ($2>>>0)<($frm_end>>>0);
 if (!($cmp538)) {
  $retval$0 = 0;
  STACKTOP = sp;return ($retval$0|0);
 }
 $sub$ptr$lhs$cast13 = $to_end;
 $4 = $2;
 L10: while(1) {
  $3 = HEAP32[$4>>2]|0;
  $and6 = $3 & -2048;
  $cmp7 = ($and6|0)==(55296);
  $cmp8 = ($3>>>0)>($Maxcode>>>0);
  $or$cond = $cmp7 | $cmp8;
  if ($or$cond) {
   $retval$0 = 2;
   label = 19;
   break;
  }
  $cmp11 = ($3>>>0)<(128);
  do {
   if ($cmp11) {
    $5 = HEAP32[$to_nxt>>2]|0;
    $sub$ptr$rhs$cast14 = $5;
    $sub$ptr$sub15 = (($sub$ptr$lhs$cast13) - ($sub$ptr$rhs$cast14))|0;
    $cmp16 = ($sub$ptr$sub15|0)<(1);
    if ($cmp16) {
     $retval$0 = 1;
     label = 19;
     break L10;
    }
    $conv = $3&255;
    $incdec$ptr19 = (($5) + 1|0);
    HEAP32[$to_nxt>>2] = $incdec$ptr19;
    HEAP8[$5>>0] = $conv;
   } else {
    $cmp20 = ($3>>>0)<(2048);
    if ($cmp20) {
     $6 = HEAP32[$to_nxt>>2]|0;
     $sub$ptr$rhs$cast23 = $6;
     $sub$ptr$sub24 = (($sub$ptr$lhs$cast13) - ($sub$ptr$rhs$cast23))|0;
     $cmp25 = ($sub$ptr$sub24|0)<(2);
     if ($cmp25) {
      $retval$0 = 1;
      label = 19;
      break L10;
     }
     $shr = $3 >>> 6;
     $or = $shr | 192;
     $conv28 = $or&255;
     $incdec$ptr29 = (($6) + 1|0);
     HEAP32[$to_nxt>>2] = $incdec$ptr29;
     HEAP8[$6>>0] = $conv28;
     $and30 = $3 & 63;
     $or31 = $and30 | 128;
     $conv32 = $or31&255;
     $7 = HEAP32[$to_nxt>>2]|0;
     $incdec$ptr33 = (($7) + 1|0);
     HEAP32[$to_nxt>>2] = $incdec$ptr33;
     HEAP8[$7>>0] = $conv32;
     break;
    }
    $cmp35 = ($3>>>0)<(65536);
    $8 = HEAP32[$to_nxt>>2]|0;
    $sub$ptr$rhs$cast38 = $8;
    $sub$ptr$sub39 = (($sub$ptr$lhs$cast13) - ($sub$ptr$rhs$cast38))|0;
    if ($cmp35) {
     $cmp40 = ($sub$ptr$sub39|0)<(3);
     if ($cmp40) {
      $retval$0 = 1;
      label = 19;
      break L10;
     }
     $shr43 = $3 >>> 12;
     $or44 = $shr43 | 224;
     $conv45 = $or44&255;
     $incdec$ptr46 = (($8) + 1|0);
     HEAP32[$to_nxt>>2] = $incdec$ptr46;
     HEAP8[$8>>0] = $conv45;
     $and47 = $3 >>> 6;
     $shr48 = $and47 & 63;
     $or49 = $shr48 | 128;
     $conv50 = $or49&255;
     $9 = HEAP32[$to_nxt>>2]|0;
     $incdec$ptr51 = (($9) + 1|0);
     HEAP32[$to_nxt>>2] = $incdec$ptr51;
     HEAP8[$9>>0] = $conv50;
     $and52 = $3 & 63;
     $or53 = $and52 | 128;
     $conv54 = $or53&255;
     $10 = HEAP32[$to_nxt>>2]|0;
     $incdec$ptr55 = (($10) + 1|0);
     HEAP32[$to_nxt>>2] = $incdec$ptr55;
     HEAP8[$10>>0] = $conv54;
     break;
    } else {
     $cmp60 = ($sub$ptr$sub39|0)<(4);
     if ($cmp60) {
      $retval$0 = 1;
      label = 19;
      break L10;
     }
     $shr63 = $3 >>> 18;
     $or64 = $shr63 | 240;
     $conv65 = $or64&255;
     $incdec$ptr66 = (($8) + 1|0);
     HEAP32[$to_nxt>>2] = $incdec$ptr66;
     HEAP8[$8>>0] = $conv65;
     $and67 = $3 >>> 12;
     $shr68 = $and67 & 63;
     $or69 = $shr68 | 128;
     $conv70 = $or69&255;
     $11 = HEAP32[$to_nxt>>2]|0;
     $incdec$ptr71 = (($11) + 1|0);
     HEAP32[$to_nxt>>2] = $incdec$ptr71;
     HEAP8[$11>>0] = $conv70;
     $and72 = $3 >>> 6;
     $shr73 = $and72 & 63;
     $or74 = $shr73 | 128;
     $conv75 = $or74&255;
     $12 = HEAP32[$to_nxt>>2]|0;
     $incdec$ptr76 = (($12) + 1|0);
     HEAP32[$to_nxt>>2] = $incdec$ptr76;
     HEAP8[$12>>0] = $conv75;
     $and77 = $3 & 63;
     $or78 = $and77 | 128;
     $conv79 = $or78&255;
     $13 = HEAP32[$to_nxt>>2]|0;
     $incdec$ptr80 = (($13) + 1|0);
     HEAP32[$to_nxt>>2] = $incdec$ptr80;
     HEAP8[$13>>0] = $conv79;
     break;
    }
   }
  } while(0);
  $14 = HEAP32[$frm_nxt>>2]|0;
  $incdec$ptr84 = (($14) + 4|0);
  HEAP32[$frm_nxt>>2] = $incdec$ptr84;
  $cmp5 = ($incdec$ptr84>>>0)<($frm_end>>>0);
  if ($cmp5) {
   $4 = $incdec$ptr84;
  } else {
   $retval$0 = 0;
   label = 19;
   break;
  }
 }
 if ((label|0) == 19) {
  STACKTOP = sp;return ($retval$0|0);
 }
 return 0|0;
}
function __ZNKSt3__17codecvtIDic11__mbstate_tE5do_inERS1_PKcS5_RS5_PDiS7_RS7_($this,$0,$frm,$frm_end,$frm_nxt,$to,$to_end,$to_nxt) {
 $this = $this|0;
 $0 = $0|0;
 $frm = $frm|0;
 $frm_end = $frm_end|0;
 $frm_nxt = $frm_nxt|0;
 $to = $to|0;
 $to_end = $to_end|0;
 $to_nxt = $to_nxt|0;
 var $1 = 0, $2 = 0, $_frm_nxt = 0, $_to_nxt = 0, $add$ptr = 0, $add$ptr5 = 0, $call = 0, $sub$ptr$div = 0, $sub$ptr$lhs$cast = 0, $sub$ptr$lhs$cast2 = 0, $sub$ptr$rhs$cast = 0, $sub$ptr$rhs$cast3 = 0, $sub$ptr$sub = 0, $sub$ptr$sub4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $_frm_nxt = sp + 4|0;
 $_to_nxt = sp;
 HEAP32[$_frm_nxt>>2] = $frm;
 HEAP32[$_to_nxt>>2] = $to;
 $call = (__ZNSt3__1L12utf8_to_ucs4EPKhS1_RS1_PjS3_RS3_mNS_12codecvt_modeE($frm,$frm_end,$_frm_nxt,$to,$to_end,$_to_nxt,1114111,0)|0);
 $1 = HEAP32[$_frm_nxt>>2]|0;
 $sub$ptr$lhs$cast = $1;
 $sub$ptr$rhs$cast = $frm;
 $sub$ptr$sub = (($sub$ptr$lhs$cast) - ($sub$ptr$rhs$cast))|0;
 $add$ptr = (($frm) + ($sub$ptr$sub)|0);
 HEAP32[$frm_nxt>>2] = $add$ptr;
 $2 = HEAP32[$_to_nxt>>2]|0;
 $sub$ptr$lhs$cast2 = $2;
 $sub$ptr$rhs$cast3 = $to;
 $sub$ptr$sub4 = (($sub$ptr$lhs$cast2) - ($sub$ptr$rhs$cast3))|0;
 $sub$ptr$div = $sub$ptr$sub4 >> 2;
 $add$ptr5 = (($to) + ($sub$ptr$div<<2)|0);
 HEAP32[$to_nxt>>2] = $add$ptr5;
 STACKTOP = sp;return ($call|0);
}
function __ZNSt3__1L12utf8_to_ucs4EPKhS1_RS1_PjS3_RS3_mNS_12codecvt_modeE($frm,$frm_end,$frm_nxt,$to,$to_end,$to_nxt,$Maxcode,$mode) {
 $frm = $frm|0;
 $frm_end = $frm_end|0;
 $frm_nxt = $frm_nxt|0;
 $to = $to|0;
 $to_end = $to_end|0;
 $to_nxt = $to_nxt|0;
 $Maxcode = $Maxcode|0;
 $mode = $mode|0;
 var $$off = 0, $$pre = 0, $$pre63 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $add$ptr = 0, $add$ptr162 = 0, $add$ptr48 = 0, $add$ptr98 = 0, $and = 0, $and125 = 0, $and131 = 0, $and137 = 0, $and140 = 0, $and146 = 0, $and149 = 0, $and153 = 0, $and157 = 0, $and37 = 0, $and42 = 0, $and44 = 0, $and64 = 0, $and70 = 0, $and75 = 0, $and80 = 0;
 var $and86 = 0, $and89 = 0, $and93 = 0, $arrayidx110 = 0, $arrayidx112 = 0, $arrayidx113 = 0, $arrayidx3 = 0, $arrayidx35 = 0, $arrayidx60 = 0, $arrayidx61 = 0, $arrayidx7 = 0, $cmp = 0, $cmp1 = 0, $cmp101 = 0, $cmp106 = 0, $cmp12 = 0, $cmp126 = 0, $cmp1260 = 0, $cmp13 = 0, $cmp132 = 0;
 var $cmp138 = 0, $cmp141 = 0, $cmp15 = 0, $cmp159 = 0, $cmp170 = 0, $cmp18 = 0, $cmp23 = 0, $cmp27 = 0, $cmp32 = 0, $cmp38 = 0, $cmp45 = 0, $cmp5 = 0, $cmp51 = 0, $cmp56 = 0, $cmp65 = 0, $cmp71 = 0, $cmp76 = 0, $cmp81 = 0, $cmp9 = 0, $cmp95 = 0;
 var $cond = 0, $conv136 = 0, $conv139 = 0, $conv14 = 0, $conv148 = 0, $conv36 = 0, $conv79 = 0, $conv88 = 0, $incdec$ptr = 0, $incdec$ptr169 = 0, $or = 0, $or151 = 0, $or155 = 0, $or158 = 0, $or91 = 0, $or94 = 0, $retval$0 = 0, $shl = 0, $shl147 = 0, $shl150 = 0;
 var $shl154 = 0, $shl87 = 0, $shl90 = 0, $sub$ptr$lhs$cast = 0, $sub$ptr$lhs$cast29 = 0, $sub$ptr$rhs$cast = 0, $sub$ptr$rhs$cast104 = 0, $sub$ptr$rhs$cast30 = 0, $sub$ptr$rhs$cast54 = 0, $sub$ptr$sub = 0, $sub$ptr$sub105 = 0, $sub$ptr$sub31 = 0, $sub$ptr$sub55 = 0, $tobool = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$frm_nxt>>2] = $frm;
 HEAP32[$to_nxt>>2] = $to;
 $and = $mode & 4;
 $tobool = ($and|0)==(0);
 $$pre63 = HEAP32[$frm_nxt>>2]|0;
 if ($tobool) {
  $3 = $$pre63;
 } else {
  $sub$ptr$lhs$cast = $frm_end;
  $sub$ptr$rhs$cast = $$pre63;
  $sub$ptr$sub = (($sub$ptr$lhs$cast) - ($sub$ptr$rhs$cast))|0;
  $cmp = ($sub$ptr$sub|0)>(2);
  if ($cmp) {
   $0 = HEAP8[$$pre63>>0]|0;
   $cmp1 = ($0<<24>>24)==(-17);
   if ($cmp1) {
    $arrayidx3 = (($$pre63) + 1|0);
    $1 = HEAP8[$arrayidx3>>0]|0;
    $cmp5 = ($1<<24>>24)==(-69);
    if ($cmp5) {
     $arrayidx7 = (($$pre63) + 2|0);
     $2 = HEAP8[$arrayidx7>>0]|0;
     $cmp9 = ($2<<24>>24)==(-65);
     if ($cmp9) {
      $add$ptr = (($$pre63) + 3|0);
      HEAP32[$frm_nxt>>2] = $add$ptr;
      $3 = $add$ptr;
     } else {
      $3 = $$pre63;
     }
    } else {
     $3 = $$pre63;
    }
   } else {
    $3 = $$pre63;
   }
  } else {
   $3 = $$pre63;
  }
 }
 $cmp1260 = ($3>>>0)<($frm_end>>>0);
 L8: do {
  if ($cmp1260) {
   $sub$ptr$lhs$cast29 = $frm_end;
   $$pre = HEAP32[$to_nxt>>2]|0;
   $4 = $$pre;$6 = $3;
   L10: while(1) {
    $cmp13 = ($4>>>0)<($to_end>>>0);
    if (!($cmp13)) {
     $16 = $6;
     break L8;
    }
    $5 = HEAP8[$6>>0]|0;
    $conv14 = $5&255;
    $cmp15 = ($5<<24>>24)>(-1);
    do {
     if ($cmp15) {
      $cmp18 = ($conv14>>>0)>($Maxcode>>>0);
      if ($cmp18) {
       $retval$0 = 2;
       label = 40;
       break L10;
      }
      HEAP32[$4>>2] = $conv14;
      $incdec$ptr = (($6) + 1|0);
      HEAP32[$frm_nxt>>2] = $incdec$ptr;
     } else {
      $cmp23 = ($5&255)<(194);
      if ($cmp23) {
       $retval$0 = 2;
       label = 40;
       break L10;
      }
      $cmp27 = ($5&255)<(224);
      if ($cmp27) {
       $sub$ptr$rhs$cast30 = $6;
       $sub$ptr$sub31 = (($sub$ptr$lhs$cast29) - ($sub$ptr$rhs$cast30))|0;
       $cmp32 = ($sub$ptr$sub31|0)<(2);
       if ($cmp32) {
        $retval$0 = 1;
        label = 40;
        break L10;
       }
       $arrayidx35 = (($6) + 1|0);
       $7 = HEAP8[$arrayidx35>>0]|0;
       $conv36 = $7&255;
       $and37 = $conv36 & 192;
       $cmp38 = ($and37|0)==(128);
       if (!($cmp38)) {
        $retval$0 = 2;
        label = 40;
        break L10;
       }
       $and42 = $conv14 << 6;
       $shl = $and42 & 1984;
       $and44 = $conv36 & 63;
       $or = $and44 | $shl;
       $cmp45 = ($or>>>0)>($Maxcode>>>0);
       if ($cmp45) {
        $retval$0 = 2;
        label = 40;
        break L10;
       }
       HEAP32[$4>>2] = $or;
       $add$ptr48 = (($6) + 2|0);
       HEAP32[$frm_nxt>>2] = $add$ptr48;
       break;
      }
      $cmp51 = ($5&255)<(240);
      if ($cmp51) {
       $sub$ptr$rhs$cast54 = $6;
       $sub$ptr$sub55 = (($sub$ptr$lhs$cast29) - ($sub$ptr$rhs$cast54))|0;
       $cmp56 = ($sub$ptr$sub55|0)<(3);
       if ($cmp56) {
        $retval$0 = 1;
        label = 40;
        break L10;
       }
       $arrayidx60 = (($6) + 1|0);
       $8 = HEAP8[$arrayidx60>>0]|0;
       $arrayidx61 = (($6) + 2|0);
       $9 = HEAP8[$arrayidx61>>0]|0;
       if ((($conv14|0) == 224)) {
        $and64 = $8 & -32;
        $cmp65 = ($and64<<24>>24)==(-96);
        if (!($cmp65)) {
         $retval$0 = 2;
         label = 40;
         break L10;
        }
       } else if ((($conv14|0) == 237)) {
        $and70 = $8 & -32;
        $cmp71 = ($and70<<24>>24)==(-128);
        if (!($cmp71)) {
         $retval$0 = 2;
         label = 40;
         break L10;
        }
       } else {
        $and75 = $8 & -64;
        $cmp76 = ($and75<<24>>24)==(-128);
        if (!($cmp76)) {
         $retval$0 = 2;
         label = 40;
         break L10;
        }
       }
       $conv79 = $9&255;
       $and80 = $conv79 & 192;
       $cmp81 = ($and80|0)==(128);
       if (!($cmp81)) {
        $retval$0 = 2;
        label = 40;
        break L10;
       }
       $and86 = $conv14 << 12;
       $shl87 = $and86 & 61440;
       $conv88 = $8&255;
       $and89 = $conv88 << 6;
       $shl90 = $and89 & 4032;
       $or91 = $shl90 | $shl87;
       $and93 = $conv79 & 63;
       $or94 = $or91 | $and93;
       $cmp95 = ($or94>>>0)>($Maxcode>>>0);
       if ($cmp95) {
        $retval$0 = 2;
        label = 40;
        break L10;
       }
       HEAP32[$4>>2] = $or94;
       $add$ptr98 = (($6) + 3|0);
       HEAP32[$frm_nxt>>2] = $add$ptr98;
       break;
      }
      $cmp101 = ($5&255)<(245);
      if (!($cmp101)) {
       $retval$0 = 2;
       label = 40;
       break L10;
      }
      $sub$ptr$rhs$cast104 = $6;
      $sub$ptr$sub105 = (($sub$ptr$lhs$cast29) - ($sub$ptr$rhs$cast104))|0;
      $cmp106 = ($sub$ptr$sub105|0)<(4);
      if ($cmp106) {
       $retval$0 = 1;
       label = 40;
       break L10;
      }
      $arrayidx110 = (($6) + 1|0);
      $10 = HEAP8[$arrayidx110>>0]|0;
      $arrayidx112 = (($6) + 2|0);
      $11 = HEAP8[$arrayidx112>>0]|0;
      $arrayidx113 = (($6) + 3|0);
      $12 = HEAP8[$arrayidx113>>0]|0;
      if ((($conv14|0) == 240)) {
       $$off = (($10) + 112)<<24>>24;
       $13 = ($$off&255)<(48);
       if (!($13)) {
        $retval$0 = 2;
        label = 40;
        break L10;
       }
      } else if ((($conv14|0) == 244)) {
       $and125 = $10 & -16;
       $cmp126 = ($and125<<24>>24)==(-128);
       if (!($cmp126)) {
        $retval$0 = 2;
        label = 40;
        break L10;
       }
      } else {
       $and131 = $10 & -64;
       $cmp132 = ($and131<<24>>24)==(-128);
       if (!($cmp132)) {
        $retval$0 = 2;
        label = 40;
        break L10;
       }
      }
      $conv136 = $11&255;
      $and137 = $conv136 & 192;
      $cmp138 = ($and137|0)==(128);
      if (!($cmp138)) {
       $retval$0 = 2;
       label = 40;
       break L10;
      }
      $conv139 = $12&255;
      $and140 = $conv139 & 192;
      $cmp141 = ($and140|0)==(128);
      if (!($cmp141)) {
       $retval$0 = 2;
       label = 40;
       break L10;
      }
      $and146 = $conv14 << 18;
      $shl147 = $and146 & 1835008;
      $conv148 = $10&255;
      $and149 = $conv148 << 12;
      $shl150 = $and149 & 258048;
      $or151 = $shl150 | $shl147;
      $and153 = $conv136 << 6;
      $shl154 = $and153 & 4032;
      $or155 = $or151 | $shl154;
      $and157 = $conv139 & 63;
      $or158 = $or155 | $and157;
      $cmp159 = ($or158>>>0)>($Maxcode>>>0);
      if ($cmp159) {
       $retval$0 = 2;
       label = 40;
       break L10;
      }
      HEAP32[$4>>2] = $or158;
      $add$ptr162 = (($6) + 4|0);
      HEAP32[$frm_nxt>>2] = $add$ptr162;
     }
    } while(0);
    $14 = HEAP32[$to_nxt>>2]|0;
    $incdec$ptr169 = (($14) + 4|0);
    HEAP32[$to_nxt>>2] = $incdec$ptr169;
    $15 = HEAP32[$frm_nxt>>2]|0;
    $cmp12 = ($15>>>0)<($frm_end>>>0);
    if ($cmp12) {
     $4 = $incdec$ptr169;$6 = $15;
    } else {
     $16 = $15;
     break L8;
    }
   }
   if ((label|0) == 40) {
    STACKTOP = sp;return ($retval$0|0);
   }
  } else {
   $16 = $3;
  }
 } while(0);
 $cmp170 = ($16>>>0)<($frm_end>>>0);
 $cond = $cmp170&1;
 $retval$0 = $cond;
 STACKTOP = sp;return ($retval$0|0);
}
function __ZNKSt3__17codecvtIDic11__mbstate_tE10do_unshiftERS1_PcS4_RS4_($this,$0,$to,$1,$to_nxt) {
 $this = $this|0;
 $0 = $0|0;
 $to = $to|0;
 $1 = $1|0;
 $to_nxt = $to_nxt|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$to_nxt>>2] = $to;
 STACKTOP = sp;return 3;
}
function __ZNKSt3__17codecvtIDic11__mbstate_tE11do_encodingEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return 0;
}
function __ZNKSt3__17codecvtIDic11__mbstate_tE16do_always_noconvEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return 0;
}
function __ZNKSt3__17codecvtIDic11__mbstate_tE9do_lengthERS1_PKcS5_j($this,$0,$frm,$frm_end,$mx) {
 $this = $this|0;
 $0 = $0|0;
 $frm = $frm|0;
 $frm_end = $frm_end|0;
 $mx = $mx|0;
 var $call = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $call = (__ZNSt3__1L19utf8_to_ucs4_lengthEPKhS1_jmNS_12codecvt_modeE($frm,$frm_end,$mx,1114111,0)|0);
 STACKTOP = sp;return ($call|0);
}
function __ZNSt3__1L19utf8_to_ucs4_lengthEPKhS1_jmNS_12codecvt_modeE($frm,$frm_end,$mx,$Maxcode,$mode) {
 $frm = $frm|0;
 $frm_end = $frm_end|0;
 $mx = $mx|0;
 $Maxcode = $Maxcode|0;
 $mode = $mode|0;
 var $$off = 0, $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $add$ptr = 0, $add$ptr$frm = 0, $add$ptr103 = 0, $add$ptr176 = 0, $add$ptr46 = 0, $and = 0, $and133 = 0, $and142 = 0;
 var $and151 = 0, $and155 = 0, $and160 = 0, $and163 = 0, $and167 = 0, $and171 = 0, $and34 = 0, $and39 = 0, $and42 = 0, $and61 = 0, $and70 = 0, $and78 = 0, $and86 = 0, $and91 = 0, $and94 = 0, $and98 = 0, $arrayidx115 = 0, $arrayidx117 = 0, $arrayidx118 = 0, $arrayidx3 = 0;
 var $arrayidx32 = 0, $arrayidx57 = 0, $arrayidx58 = 0, $arrayidx7 = 0, $cmp = 0, $cmp1 = 0, $cmp100 = 0, $cmp106 = 0, $cmp111 = 0, $cmp12 = 0, $cmp1273 = 0, $cmp13 = 0, $cmp134 = 0, $cmp1374 = 0, $cmp143 = 0, $cmp15 = 0, $cmp152 = 0, $cmp156 = 0, $cmp173 = 0, $cmp18 = 0;
 var $cmp22 = 0, $cmp26 = 0, $cmp31 = 0, $cmp35 = 0, $cmp43 = 0, $cmp49 = 0, $cmp5 = 0, $cmp54 = 0, $cmp62 = 0, $cmp71 = 0, $cmp79 = 0, $cmp87 = 0, $cmp9 = 0, $conv14 = 0, $conv150 = 0, $conv154 = 0, $conv162 = 0, $conv33 = 0, $conv85 = 0, $conv93 = 0;
 var $frm_nxt$1$lcssa = 0, $frm_nxt$1$ph = 0, $frm_nxt$177 = 0, $frm_nxt$2 = 0, $incdec$ptr = 0, $nchar32_t$076 = 0, $or = 0, $or$cond = 0, $or$cond75 = 0, $or165 = 0, $or169 = 0, $or172 = 0, $or96 = 0, $or99 = 0, $phitmp = 0, $retval$0 = 0, $shl = 0, $shl161 = 0, $shl164 = 0, $shl168 = 0;
 var $shl92 = 0, $shl95 = 0, $sub$ptr$lhs$cast = 0, $sub$ptr$lhs$cast183 = 0, $sub$ptr$lhs$cast28 = 0, $sub$ptr$rhs$cast = 0, $sub$ptr$rhs$cast109 = 0, $sub$ptr$rhs$cast128 = 0, $sub$ptr$rhs$cast137 = 0, $sub$ptr$rhs$cast146 = 0, $sub$ptr$rhs$cast184 = 0, $sub$ptr$rhs$cast29 = 0, $sub$ptr$rhs$cast52 = 0, $sub$ptr$rhs$cast65 = 0, $sub$ptr$rhs$cast74 = 0, $sub$ptr$rhs$cast82 = 0, $sub$ptr$sub = 0, $sub$ptr$sub110 = 0, $sub$ptr$sub129 = 0, $sub$ptr$sub138 = 0;
 var $sub$ptr$sub147 = 0, $sub$ptr$sub185 = 0, $sub$ptr$sub30 = 0, $sub$ptr$sub53 = 0, $sub$ptr$sub66 = 0, $sub$ptr$sub75 = 0, $sub$ptr$sub83 = 0, $tobool = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $and = $mode & 4;
 $tobool = ($and|0)==(0);
 if ($tobool) {
  $frm_nxt$1$ph = $frm;
 } else {
  $sub$ptr$lhs$cast = $frm_end;
  $sub$ptr$rhs$cast = $frm;
  $sub$ptr$sub = (($sub$ptr$lhs$cast) - ($sub$ptr$rhs$cast))|0;
  $cmp = ($sub$ptr$sub|0)>(2);
  if ($cmp) {
   $0 = HEAP8[$frm>>0]|0;
   $cmp1 = ($0<<24>>24)==(-17);
   if ($cmp1) {
    $arrayidx3 = (($frm) + 1|0);
    $1 = HEAP8[$arrayidx3>>0]|0;
    $cmp5 = ($1<<24>>24)==(-69);
    if ($cmp5) {
     $arrayidx7 = (($frm) + 2|0);
     $2 = HEAP8[$arrayidx7>>0]|0;
     $cmp9 = ($2<<24>>24)==(-65);
     $add$ptr = (($frm) + 3|0);
     $add$ptr$frm = $cmp9 ? $add$ptr : $frm;
     $frm_nxt$1$ph = $add$ptr$frm;
    } else {
     $frm_nxt$1$ph = $frm;
    }
   } else {
    $frm_nxt$1$ph = $frm;
   }
  } else {
   $frm_nxt$1$ph = $frm;
  }
 }
 $cmp1273 = ($frm_nxt$1$ph>>>0)<($frm_end>>>0);
 $cmp1374 = ($mx|0)!=(0);
 $or$cond75 = $cmp1273 & $cmp1374;
 L7: do {
  if ($or$cond75) {
   $sub$ptr$lhs$cast28 = $frm_end;
   $frm_nxt$177 = $frm_nxt$1$ph;$nchar32_t$076 = 1;
   L9: while(1) {
    $3 = HEAP8[$frm_nxt$177>>0]|0;
    $conv14 = $3&255;
    $cmp15 = ($3<<24>>24)>(-1);
    do {
     if ($cmp15) {
      $cmp18 = ($conv14>>>0)>($Maxcode>>>0);
      if ($cmp18) {
       $frm_nxt$1$lcssa = $frm_nxt$177;
       break L7;
      }
      $incdec$ptr = (($frm_nxt$177) + 1|0);
      $frm_nxt$2 = $incdec$ptr;
     } else {
      $cmp22 = ($3&255)<(194);
      if ($cmp22) {
       $frm_nxt$1$lcssa = $frm_nxt$177;
       break L7;
      }
      $cmp26 = ($3&255)<(224);
      if ($cmp26) {
       $sub$ptr$rhs$cast29 = $frm_nxt$177;
       $sub$ptr$sub30 = (($sub$ptr$lhs$cast28) - ($sub$ptr$rhs$cast29))|0;
       $cmp31 = ($sub$ptr$sub30|0)<(2);
       if ($cmp31) {
        $frm_nxt$1$lcssa = $frm_nxt$177;
        break L7;
       }
       $arrayidx32 = (($frm_nxt$177) + 1|0);
       $4 = HEAP8[$arrayidx32>>0]|0;
       $conv33 = $4&255;
       $and34 = $conv33 & 192;
       $cmp35 = ($and34|0)==(128);
       if (!($cmp35)) {
        $frm_nxt$1$lcssa = $frm_nxt$177;
        break L7;
       }
       $and39 = $conv14 << 6;
       $shl = $and39 & 1984;
       $and42 = $conv33 & 63;
       $or = $and42 | $shl;
       $cmp43 = ($or>>>0)>($Maxcode>>>0);
       if ($cmp43) {
        $frm_nxt$1$lcssa = $frm_nxt$177;
        break L7;
       }
       $add$ptr46 = (($frm_nxt$177) + 2|0);
       $frm_nxt$2 = $add$ptr46;
       break;
      }
      $cmp49 = ($3&255)<(240);
      if ($cmp49) {
       $sub$ptr$rhs$cast52 = $frm_nxt$177;
       $sub$ptr$sub53 = (($sub$ptr$lhs$cast28) - ($sub$ptr$rhs$cast52))|0;
       $cmp54 = ($sub$ptr$sub53|0)<(3);
       if ($cmp54) {
        $frm_nxt$1$lcssa = $frm_nxt$177;
        break L7;
       }
       $arrayidx57 = (($frm_nxt$177) + 1|0);
       $5 = HEAP8[$arrayidx57>>0]|0;
       $arrayidx58 = (($frm_nxt$177) + 2|0);
       $6 = HEAP8[$arrayidx58>>0]|0;
       if ((($conv14|0) == 224)) {
        $and61 = $5 & -32;
        $cmp62 = ($and61<<24>>24)==(-96);
        if (!($cmp62)) {
         label = 21;
         break L9;
        }
       } else if ((($conv14|0) == 237)) {
        $and70 = $5 & -32;
        $cmp71 = ($and70<<24>>24)==(-128);
        if (!($cmp71)) {
         label = 23;
         break L9;
        }
       } else {
        $and78 = $5 & -64;
        $cmp79 = ($and78<<24>>24)==(-128);
        if (!($cmp79)) {
         label = 25;
         break L9;
        }
       }
       $conv85 = $6&255;
       $and86 = $conv85 & 192;
       $cmp87 = ($and86|0)==(128);
       if (!($cmp87)) {
        $frm_nxt$1$lcssa = $frm_nxt$177;
        break L7;
       }
       $and91 = $conv14 << 12;
       $shl92 = $and91 & 61440;
       $conv93 = $5&255;
       $and94 = $conv93 << 6;
       $shl95 = $and94 & 4032;
       $or96 = $shl95 | $shl92;
       $and98 = $conv85 & 63;
       $or99 = $or96 | $and98;
       $cmp100 = ($or99>>>0)>($Maxcode>>>0);
       if ($cmp100) {
        $frm_nxt$1$lcssa = $frm_nxt$177;
        break L7;
       }
       $add$ptr103 = (($frm_nxt$177) + 3|0);
       $frm_nxt$2 = $add$ptr103;
       break;
      }
      $cmp106 = ($3&255)<(245);
      if (!($cmp106)) {
       $frm_nxt$1$lcssa = $frm_nxt$177;
       break L7;
      }
      $sub$ptr$rhs$cast109 = $frm_nxt$177;
      $sub$ptr$sub110 = (($sub$ptr$lhs$cast28) - ($sub$ptr$rhs$cast109))|0;
      $cmp111 = ($sub$ptr$sub110|0)<(4);
      if ($cmp111) {
       $frm_nxt$1$lcssa = $frm_nxt$177;
       break L7;
      }
      $arrayidx115 = (($frm_nxt$177) + 1|0);
      $7 = HEAP8[$arrayidx115>>0]|0;
      $arrayidx117 = (($frm_nxt$177) + 2|0);
      $8 = HEAP8[$arrayidx117>>0]|0;
      $arrayidx118 = (($frm_nxt$177) + 3|0);
      $9 = HEAP8[$arrayidx118>>0]|0;
      if ((($conv14|0) == 244)) {
       $and133 = $7 & -16;
       $cmp134 = ($and133<<24>>24)==(-128);
       if (!($cmp134)) {
        label = 35;
        break L9;
       }
      } else if ((($conv14|0) == 240)) {
       $$off = (($7) + 112)<<24>>24;
       $10 = ($$off&255)<(48);
       if (!($10)) {
        label = 33;
        break L9;
       }
      } else {
       $and142 = $7 & -64;
       $cmp143 = ($and142<<24>>24)==(-128);
       if (!($cmp143)) {
        label = 37;
        break L9;
       }
      }
      $conv150 = $8&255;
      $and151 = $conv150 & 192;
      $cmp152 = ($and151|0)==(128);
      if (!($cmp152)) {
       $frm_nxt$1$lcssa = $frm_nxt$177;
       break L7;
      }
      $conv154 = $9&255;
      $and155 = $conv154 & 192;
      $cmp156 = ($and155|0)==(128);
      if (!($cmp156)) {
       $frm_nxt$1$lcssa = $frm_nxt$177;
       break L7;
      }
      $and160 = $conv14 << 18;
      $shl161 = $and160 & 1835008;
      $conv162 = $7&255;
      $and163 = $conv162 << 12;
      $shl164 = $and163 & 258048;
      $or165 = $shl164 | $shl161;
      $and167 = $conv150 << 6;
      $shl168 = $and167 & 4032;
      $or169 = $or165 | $shl168;
      $and171 = $conv154 & 63;
      $or172 = $or169 | $and171;
      $cmp173 = ($or172>>>0)>($Maxcode>>>0);
      if ($cmp173) {
       $frm_nxt$1$lcssa = $frm_nxt$177;
       break L7;
      }
      $add$ptr176 = (($frm_nxt$177) + 4|0);
      $frm_nxt$2 = $add$ptr176;
     }
    } while(0);
    $cmp12 = ($frm_nxt$2>>>0)<($frm_end>>>0);
    $cmp13 = ($nchar32_t$076>>>0)<($mx>>>0);
    $or$cond = $cmp12 & $cmp13;
    if (!($or$cond)) {
     $frm_nxt$1$lcssa = $frm_nxt$2;
     break L7;
    }
    $phitmp = (($nchar32_t$076) + 1)|0;
    $frm_nxt$177 = $frm_nxt$2;$nchar32_t$076 = $phitmp;
   }
   if ((label|0) == 21) {
    $sub$ptr$rhs$cast65 = $frm;
    $sub$ptr$sub66 = (($sub$ptr$rhs$cast52) - ($sub$ptr$rhs$cast65))|0;
    $retval$0 = $sub$ptr$sub66;
    STACKTOP = sp;return ($retval$0|0);
   }
   else if ((label|0) == 23) {
    $sub$ptr$rhs$cast74 = $frm;
    $sub$ptr$sub75 = (($sub$ptr$rhs$cast52) - ($sub$ptr$rhs$cast74))|0;
    $retval$0 = $sub$ptr$sub75;
    STACKTOP = sp;return ($retval$0|0);
   }
   else if ((label|0) == 25) {
    $sub$ptr$rhs$cast82 = $frm;
    $sub$ptr$sub83 = (($sub$ptr$rhs$cast52) - ($sub$ptr$rhs$cast82))|0;
    $retval$0 = $sub$ptr$sub83;
    STACKTOP = sp;return ($retval$0|0);
   }
   else if ((label|0) == 33) {
    $sub$ptr$rhs$cast128 = $frm;
    $sub$ptr$sub129 = (($sub$ptr$rhs$cast109) - ($sub$ptr$rhs$cast128))|0;
    $retval$0 = $sub$ptr$sub129;
    STACKTOP = sp;return ($retval$0|0);
   }
   else if ((label|0) == 35) {
    $sub$ptr$rhs$cast137 = $frm;
    $sub$ptr$sub138 = (($sub$ptr$rhs$cast109) - ($sub$ptr$rhs$cast137))|0;
    $retval$0 = $sub$ptr$sub138;
    STACKTOP = sp;return ($retval$0|0);
   }
   else if ((label|0) == 37) {
    $sub$ptr$rhs$cast146 = $frm;
    $sub$ptr$sub147 = (($sub$ptr$rhs$cast109) - ($sub$ptr$rhs$cast146))|0;
    $retval$0 = $sub$ptr$sub147;
    STACKTOP = sp;return ($retval$0|0);
   }
  } else {
   $frm_nxt$1$lcssa = $frm_nxt$1$ph;
  }
 } while(0);
 $sub$ptr$lhs$cast183 = $frm_nxt$1$lcssa;
 $sub$ptr$rhs$cast184 = $frm;
 $sub$ptr$sub185 = (($sub$ptr$lhs$cast183) - ($sub$ptr$rhs$cast184))|0;
 $retval$0 = $sub$ptr$sub185;
 STACKTOP = sp;return ($retval$0|0);
}
function __ZNKSt3__17codecvtIDic11__mbstate_tE13do_max_lengthEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return 4;
}
function __ZNSt3__116__narrow_to_utf8ILj32EED0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 STACKTOP = sp;return;
}
function __ZNSt3__117__widen_from_utf8ILj32EED0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 STACKTOP = sp;return;
}
function __ZNSt3__18numpunctIcED0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__18numpunctIcED2Ev($this);
 __ZdlPv($this);
 STACKTOP = sp;return;
}
function __ZNSt3__18numpunctIcED2Ev($this) {
 $this = $this|0;
 var $__grouping_ = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = ((4776 + 8|0));
 $__grouping_ = (($this) + 12|0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping_);
 STACKTOP = sp;return;
}
function __ZNSt3__18numpunctIwED0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__18numpunctIwED2Ev($this);
 __ZdlPv($this);
 STACKTOP = sp;return;
}
function __ZNSt3__18numpunctIwED2Ev($this) {
 $this = $this|0;
 var $__grouping_ = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = ((4816 + 8|0));
 $__grouping_ = (($this) + 16|0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping_);
 STACKTOP = sp;return;
}
function __ZNKSt3__18numpunctIcE16do_decimal_pointEv($this) {
 $this = $this|0;
 var $0 = 0, $__decimal_point_ = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $__decimal_point_ = (($this) + 8|0);
 $0 = HEAP8[$__decimal_point_>>0]|0;
 STACKTOP = sp;return ($0|0);
}
function __ZNKSt3__18numpunctIwE16do_decimal_pointEv($this) {
 $this = $this|0;
 var $0 = 0, $__decimal_point_ = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $__decimal_point_ = (($this) + 8|0);
 $0 = HEAP32[$__decimal_point_>>2]|0;
 STACKTOP = sp;return ($0|0);
}
function __ZNKSt3__18numpunctIcE16do_thousands_sepEv($this) {
 $this = $this|0;
 var $0 = 0, $__thousands_sep_ = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $__thousands_sep_ = (($this) + 9|0);
 $0 = HEAP8[$__thousands_sep_>>0]|0;
 STACKTOP = sp;return ($0|0);
}
function __ZNKSt3__18numpunctIwE16do_thousands_sepEv($this) {
 $this = $this|0;
 var $0 = 0, $__thousands_sep_ = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $__thousands_sep_ = (($this) + 12|0);
 $0 = HEAP32[$__thousands_sep_>>2]|0;
 STACKTOP = sp;return ($0|0);
}
function __ZNKSt3__18numpunctIcE11do_groupingEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var $__grouping_ = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $__grouping_ = (($this) + 12|0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC1ERKS5_($agg$result,$__grouping_);
 STACKTOP = sp;return;
}
function __ZNKSt3__18numpunctIwE11do_groupingEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var $__grouping_ = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $__grouping_ = (($this) + 16|0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC1ERKS5_($agg$result,$__grouping_);
 STACKTOP = sp;return;
}
function __ZNKSt3__18numpunctIcE11do_truenameEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj($agg$result,4856,4);
 STACKTOP = sp;return;
}
function __ZNKSt3__18numpunctIwE11do_truenameEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var $call$i$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $call$i$i$i = (_wcslen(4864)|0);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6__initEPKwj($agg$result,4864,$call$i$i$i);
 STACKTOP = sp;return;
}
function __ZNKSt3__18numpunctIcE12do_falsenameEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj($agg$result,4888,5);
 STACKTOP = sp;return;
}
function __ZNKSt3__18numpunctIwE12do_falsenameEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var $call$i$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $call$i$i$i = (_wcslen(4896)|0);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6__initEPKwj($agg$result,4896,$call$i$i$i);
 STACKTOP = sp;return;
}
function __ZNSt3__114__num_get_base10__get_baseERNS_8ios_baseE($iob) {
 $iob = $iob|0;
 var $0 = 0, $__fmtflags_$i = 0, $and = 0, $retval$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $__fmtflags_$i = (($iob) + 4|0);
 $0 = HEAP32[$__fmtflags_$i>>2]|0;
 $and = $0 & 74;
 if ((($and|0) == 0)) {
  $retval$0 = 0;
 } else if ((($and|0) == 8)) {
  $retval$0 = 16;
 } else if ((($and|0) == 64)) {
  $retval$0 = 8;
 } else {
  $retval$0 = 10;
 }
 STACKTOP = sp;return ($retval$0|0);
}
function __ZNKSt3__120__time_get_c_storageIcE7__weeksEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $guard$uninitialized = 0, $guard$uninitialized$i = 0, $tobool = 0, $tobool$i = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[4928>>0]|0;
 $guard$uninitialized = ($0<<24>>24)==(0);
 if (!($guard$uninitialized)) {
  $32 = HEAP32[4920>>2]|0;
  STACKTOP = sp;return ($32|0);
 }
 $1 = (___cxa_guard_acquire((4928|0))|0);
 $tobool = ($1|0)==(0);
 if ($tobool) {
  $32 = HEAP32[4920>>2]|0;
  STACKTOP = sp;return ($32|0);
 }
 $2 = HEAP8[12128>>0]|0;
 $guard$uninitialized$i = ($2<<24>>24)==(0);
 if ($guard$uninitialized$i) {
  $3 = (___cxa_guard_acquire((12128|0))|0);
  $tobool$i = ($3|0)==(0);
  if (!($tobool$i)) {
   _memset((11960|0),0,168)|0;
   (___cxa_atexit((478|0),(0|0),(___dso_handle|0))|0);
   ___cxa_guard_release((12128|0));
  }
 }
 __THREW__ = 0;
 (invoke_iii(479,(11960|0),(12136|0))|0);
 $4 = __THREW__; __THREW__ = 0;
 $5 = $4&1;
 if (!($5)) {
  __THREW__ = 0;
  (invoke_iii(479,(((11960 + 12|0))|0),(12144|0))|0);
  $6 = __THREW__; __THREW__ = 0;
  $7 = $6&1;
  if (!($7)) {
   __THREW__ = 0;
   (invoke_iii(479,(((11960 + 24|0))|0),(12152|0))|0);
   $8 = __THREW__; __THREW__ = 0;
   $9 = $8&1;
   if (!($9)) {
    __THREW__ = 0;
    (invoke_iii(479,(((11960 + 36|0))|0),(12160|0))|0);
    $10 = __THREW__; __THREW__ = 0;
    $11 = $10&1;
    if (!($11)) {
     __THREW__ = 0;
     (invoke_iii(479,(((11960 + 48|0))|0),(12176|0))|0);
     $12 = __THREW__; __THREW__ = 0;
     $13 = $12&1;
     if (!($13)) {
      __THREW__ = 0;
      (invoke_iii(479,(((11960 + 60|0))|0),(12192|0))|0);
      $14 = __THREW__; __THREW__ = 0;
      $15 = $14&1;
      if (!($15)) {
       __THREW__ = 0;
       (invoke_iii(479,(((11960 + 72|0))|0),(12200|0))|0);
       $16 = __THREW__; __THREW__ = 0;
       $17 = $16&1;
       if (!($17)) {
        __THREW__ = 0;
        (invoke_iii(479,(((11960 + 84|0))|0),(12216|0))|0);
        $18 = __THREW__; __THREW__ = 0;
        $19 = $18&1;
        if (!($19)) {
         __THREW__ = 0;
         (invoke_iii(479,(((11960 + 96|0))|0),(12224|0))|0);
         $20 = __THREW__; __THREW__ = 0;
         $21 = $20&1;
         if (!($21)) {
          __THREW__ = 0;
          (invoke_iii(479,(((11960 + 108|0))|0),(12232|0))|0);
          $22 = __THREW__; __THREW__ = 0;
          $23 = $22&1;
          if (!($23)) {
           __THREW__ = 0;
           (invoke_iii(479,(((11960 + 120|0))|0),(12240|0))|0);
           $24 = __THREW__; __THREW__ = 0;
           $25 = $24&1;
           if (!($25)) {
            __THREW__ = 0;
            (invoke_iii(479,(((11960 + 132|0))|0),(12248|0))|0);
            $26 = __THREW__; __THREW__ = 0;
            $27 = $26&1;
            if (!($27)) {
             __THREW__ = 0;
             (invoke_iii(479,(((11960 + 144|0))|0),(12256|0))|0);
             $28 = __THREW__; __THREW__ = 0;
             $29 = $28&1;
             if (!($29)) {
              __THREW__ = 0;
              (invoke_iii(479,(((11960 + 156|0))|0),(12264|0))|0);
              $30 = __THREW__; __THREW__ = 0;
              $31 = $30&1;
              if (!($31)) {
               HEAP32[4920>>2] = 11960;
               ___cxa_guard_release((4928|0));
               $32 = HEAP32[4920>>2]|0;
               STACKTOP = sp;return ($32|0);
              }
             }
            }
           }
          }
         }
        }
       }
      }
     }
    }
   }
  }
 }
 $33 = ___cxa_find_matching_catch()|0;
 $34 = tempRet0;
 ___cxa_guard_abort((4928|0));
 ___resumeException($33|0);
 // unreachable;
 return 0|0;
}
function __ZNKSt3__120__time_get_c_storageIwE7__weeksEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $guard$uninitialized = 0, $guard$uninitialized$i = 0, $tobool = 0, $tobool$i = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[4944>>0]|0;
 $guard$uninitialized = ($0<<24>>24)==(0);
 if (!($guard$uninitialized)) {
  $32 = HEAP32[4936>>2]|0;
  STACKTOP = sp;return ($32|0);
 }
 $1 = (___cxa_guard_acquire((4944|0))|0);
 $tobool = ($1|0)==(0);
 if ($tobool) {
  $32 = HEAP32[4936>>2]|0;
  STACKTOP = sp;return ($32|0);
 }
 $2 = HEAP8[11592>>0]|0;
 $guard$uninitialized$i = ($2<<24>>24)==(0);
 if ($guard$uninitialized$i) {
  $3 = (___cxa_guard_acquire((11592|0))|0);
  $tobool$i = ($3|0)==(0);
  if (!($tobool$i)) {
   _memset((11424|0),0,168)|0;
   (___cxa_atexit((480|0),(0|0),(___dso_handle|0))|0);
   ___cxa_guard_release((11592|0));
  }
 }
 __THREW__ = 0;
 (invoke_iii(481,(11424|0),(11600|0))|0);
 $4 = __THREW__; __THREW__ = 0;
 $5 = $4&1;
 if (!($5)) {
  __THREW__ = 0;
  (invoke_iii(481,(((11424 + 12|0))|0),(11632|0))|0);
  $6 = __THREW__; __THREW__ = 0;
  $7 = $6&1;
  if (!($7)) {
   __THREW__ = 0;
   (invoke_iii(481,(((11424 + 24|0))|0),(11664|0))|0);
   $8 = __THREW__; __THREW__ = 0;
   $9 = $8&1;
   if (!($9)) {
    __THREW__ = 0;
    (invoke_iii(481,(((11424 + 36|0))|0),(11696|0))|0);
    $10 = __THREW__; __THREW__ = 0;
    $11 = $10&1;
    if (!($11)) {
     __THREW__ = 0;
     (invoke_iii(481,(((11424 + 48|0))|0),(11736|0))|0);
     $12 = __THREW__; __THREW__ = 0;
     $13 = $12&1;
     if (!($13)) {
      __THREW__ = 0;
      (invoke_iii(481,(((11424 + 60|0))|0),(11776|0))|0);
      $14 = __THREW__; __THREW__ = 0;
      $15 = $14&1;
      if (!($15)) {
       __THREW__ = 0;
       (invoke_iii(481,(((11424 + 72|0))|0),(11808|0))|0);
       $16 = __THREW__; __THREW__ = 0;
       $17 = $16&1;
       if (!($17)) {
        __THREW__ = 0;
        (invoke_iii(481,(((11424 + 84|0))|0),(11848|0))|0);
        $18 = __THREW__; __THREW__ = 0;
        $19 = $18&1;
        if (!($19)) {
         __THREW__ = 0;
         (invoke_iii(481,(((11424 + 96|0))|0),(11864|0))|0);
         $20 = __THREW__; __THREW__ = 0;
         $21 = $20&1;
         if (!($21)) {
          __THREW__ = 0;
          (invoke_iii(481,(((11424 + 108|0))|0),(11880|0))|0);
          $22 = __THREW__; __THREW__ = 0;
          $23 = $22&1;
          if (!($23)) {
           __THREW__ = 0;
           (invoke_iii(481,(((11424 + 120|0))|0),(11896|0))|0);
           $24 = __THREW__; __THREW__ = 0;
           $25 = $24&1;
           if (!($25)) {
            __THREW__ = 0;
            (invoke_iii(481,(((11424 + 132|0))|0),(11912|0))|0);
            $26 = __THREW__; __THREW__ = 0;
            $27 = $26&1;
            if (!($27)) {
             __THREW__ = 0;
             (invoke_iii(481,(((11424 + 144|0))|0),(11928|0))|0);
             $28 = __THREW__; __THREW__ = 0;
             $29 = $28&1;
             if (!($29)) {
              __THREW__ = 0;
              (invoke_iii(481,(((11424 + 156|0))|0),(11944|0))|0);
              $30 = __THREW__; __THREW__ = 0;
              $31 = $30&1;
              if (!($31)) {
               HEAP32[4936>>2] = 11424;
               ___cxa_guard_release((4944|0));
               $32 = HEAP32[4936>>2]|0;
               STACKTOP = sp;return ($32|0);
              }
             }
            }
           }
          }
         }
        }
       }
      }
     }
    }
   }
  }
 }
 $33 = ___cxa_find_matching_catch()|0;
 $34 = tempRet0;
 ___cxa_guard_abort((4944|0));
 ___resumeException($33|0);
 // unreachable;
 return 0|0;
}
function __ZNKSt3__120__time_get_c_storageIcE8__monthsEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $guard$uninitialized = 0, $guard$uninitialized$i = 0, $tobool = 0, $tobool$i = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[4960>>0]|0;
 $guard$uninitialized = ($0<<24>>24)==(0);
 if (!($guard$uninitialized)) {
  $52 = HEAP32[4952>>2]|0;
  STACKTOP = sp;return ($52|0);
 }
 $1 = (___cxa_guard_acquire((4960|0))|0);
 $tobool = ($1|0)==(0);
 if ($tobool) {
  $52 = HEAP32[4952>>2]|0;
  STACKTOP = sp;return ($52|0);
 }
 $2 = HEAP8[11200>>0]|0;
 $guard$uninitialized$i = ($2<<24>>24)==(0);
 if ($guard$uninitialized$i) {
  $3 = (___cxa_guard_acquire((11200|0))|0);
  $tobool$i = ($3|0)==(0);
  if (!($tobool$i)) {
   _memset((10912|0),0,288)|0;
   (___cxa_atexit((482|0),(0|0),(___dso_handle|0))|0);
   ___cxa_guard_release((11200|0));
  }
 }
 __THREW__ = 0;
 (invoke_iii(479,(10912|0),(11208|0))|0);
 $4 = __THREW__; __THREW__ = 0;
 $5 = $4&1;
 do {
  if (!($5)) {
   __THREW__ = 0;
   (invoke_iii(479,(((10912 + 12|0))|0),(11216|0))|0);
   $6 = __THREW__; __THREW__ = 0;
   $7 = $6&1;
   if (!($7)) {
    __THREW__ = 0;
    (invoke_iii(479,(((10912 + 24|0))|0),(11232|0))|0);
    $8 = __THREW__; __THREW__ = 0;
    $9 = $8&1;
    if (!($9)) {
     __THREW__ = 0;
     (invoke_iii(479,(((10912 + 36|0))|0),(11240|0))|0);
     $10 = __THREW__; __THREW__ = 0;
     $11 = $10&1;
     if (!($11)) {
      __THREW__ = 0;
      (invoke_iii(479,(((10912 + 48|0))|0),(11248|0))|0);
      $12 = __THREW__; __THREW__ = 0;
      $13 = $12&1;
      if (!($13)) {
       __THREW__ = 0;
       (invoke_iii(479,(((10912 + 60|0))|0),(11256|0))|0);
       $14 = __THREW__; __THREW__ = 0;
       $15 = $14&1;
       if (!($15)) {
        __THREW__ = 0;
        (invoke_iii(479,(((10912 + 72|0))|0),(11264|0))|0);
        $16 = __THREW__; __THREW__ = 0;
        $17 = $16&1;
        if (!($17)) {
         __THREW__ = 0;
         (invoke_iii(479,(((10912 + 84|0))|0),(11272|0))|0);
         $18 = __THREW__; __THREW__ = 0;
         $19 = $18&1;
         if (!($19)) {
          __THREW__ = 0;
          (invoke_iii(479,(((10912 + 96|0))|0),(11280|0))|0);
          $20 = __THREW__; __THREW__ = 0;
          $21 = $20&1;
          if (!($21)) {
           __THREW__ = 0;
           (invoke_iii(479,(((10912 + 108|0))|0),(11296|0))|0);
           $22 = __THREW__; __THREW__ = 0;
           $23 = $22&1;
           if (!($23)) {
            __THREW__ = 0;
            (invoke_iii(479,(((10912 + 120|0))|0),(11304|0))|0);
            $24 = __THREW__; __THREW__ = 0;
            $25 = $24&1;
            if (!($25)) {
             __THREW__ = 0;
             (invoke_iii(479,(((10912 + 132|0))|0),(11320|0))|0);
             $26 = __THREW__; __THREW__ = 0;
             $27 = $26&1;
             if (!($27)) {
              __THREW__ = 0;
              (invoke_iii(479,(((10912 + 144|0))|0),(11336|0))|0);
              $28 = __THREW__; __THREW__ = 0;
              $29 = $28&1;
              if (!($29)) {
               __THREW__ = 0;
               (invoke_iii(479,(((10912 + 156|0))|0),(11344|0))|0);
               $30 = __THREW__; __THREW__ = 0;
               $31 = $30&1;
               if (!($31)) {
                __THREW__ = 0;
                (invoke_iii(479,(((10912 + 168|0))|0),(11352|0))|0);
                $32 = __THREW__; __THREW__ = 0;
                $33 = $32&1;
                if (!($33)) {
                 __THREW__ = 0;
                 (invoke_iii(479,(((10912 + 180|0))|0),(11360|0))|0);
                 $34 = __THREW__; __THREW__ = 0;
                 $35 = $34&1;
                 if (!($35)) {
                  __THREW__ = 0;
                  (invoke_iii(479,(((10912 + 192|0))|0),(11248|0))|0);
                  $36 = __THREW__; __THREW__ = 0;
                  $37 = $36&1;
                  if ($37) {
                   break;
                  }
                  __THREW__ = 0;
                  (invoke_iii(479,(((10912 + 204|0))|0),(11368|0))|0);
                  $38 = __THREW__; __THREW__ = 0;
                  $39 = $38&1;
                  if ($39) {
                   break;
                  }
                  __THREW__ = 0;
                  (invoke_iii(479,(((10912 + 216|0))|0),(11376|0))|0);
                  $40 = __THREW__; __THREW__ = 0;
                  $41 = $40&1;
                  if ($41) {
                   break;
                  }
                  __THREW__ = 0;
                  (invoke_iii(479,(((10912 + 228|0))|0),(11384|0))|0);
                  $42 = __THREW__; __THREW__ = 0;
                  $43 = $42&1;
                  if ($43) {
                   break;
                  }
                  __THREW__ = 0;
                  (invoke_iii(479,(((10912 + 240|0))|0),(11392|0))|0);
                  $44 = __THREW__; __THREW__ = 0;
                  $45 = $44&1;
                  if ($45) {
                   break;
                  }
                  __THREW__ = 0;
                  (invoke_iii(479,(((10912 + 252|0))|0),(11400|0))|0);
                  $46 = __THREW__; __THREW__ = 0;
                  $47 = $46&1;
                  if ($47) {
                   break;
                  }
                  __THREW__ = 0;
                  (invoke_iii(479,(((10912 + 264|0))|0),(11408|0))|0);
                  $48 = __THREW__; __THREW__ = 0;
                  $49 = $48&1;
                  if ($49) {
                   break;
                  }
                  __THREW__ = 0;
                  (invoke_iii(479,(((10912 + 276|0))|0),(11416|0))|0);
                  $50 = __THREW__; __THREW__ = 0;
                  $51 = $50&1;
                  if ($51) {
                   break;
                  }
                  HEAP32[4952>>2] = 10912;
                  ___cxa_guard_release((4960|0));
                  $52 = HEAP32[4952>>2]|0;
                  STACKTOP = sp;return ($52|0);
                 }
                }
               }
              }
             }
            }
           }
          }
         }
        }
       }
      }
     }
    }
   }
  }
 } while(0);
 $53 = ___cxa_find_matching_catch()|0;
 $54 = tempRet0;
 ___cxa_guard_abort((4960|0));
 ___resumeException($53|0);
 // unreachable;
 return 0|0;
}
function __ZNKSt3__120__time_get_c_storageIwE8__monthsEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $guard$uninitialized = 0, $guard$uninitialized$i = 0, $tobool = 0, $tobool$i = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[4976>>0]|0;
 $guard$uninitialized = ($0<<24>>24)==(0);
 if (!($guard$uninitialized)) {
  $52 = HEAP32[4968>>2]|0;
  STACKTOP = sp;return ($52|0);
 }
 $1 = (___cxa_guard_acquire((4976|0))|0);
 $tobool = ($1|0)==(0);
 if ($tobool) {
  $52 = HEAP32[4968>>2]|0;
  STACKTOP = sp;return ($52|0);
 }
 $2 = HEAP8[10360>>0]|0;
 $guard$uninitialized$i = ($2<<24>>24)==(0);
 if ($guard$uninitialized$i) {
  $3 = (___cxa_guard_acquire((10360|0))|0);
  $tobool$i = ($3|0)==(0);
  if (!($tobool$i)) {
   _memset((10072|0),0,288)|0;
   (___cxa_atexit((483|0),(0|0),(___dso_handle|0))|0);
   ___cxa_guard_release((10360|0));
  }
 }
 __THREW__ = 0;
 (invoke_iii(481,(10072|0),(10368|0))|0);
 $4 = __THREW__; __THREW__ = 0;
 $5 = $4&1;
 do {
  if (!($5)) {
   __THREW__ = 0;
   (invoke_iii(481,(((10072 + 12|0))|0),(10400|0))|0);
   $6 = __THREW__; __THREW__ = 0;
   $7 = $6&1;
   if (!($7)) {
    __THREW__ = 0;
    (invoke_iii(481,(((10072 + 24|0))|0),(10440|0))|0);
    $8 = __THREW__; __THREW__ = 0;
    $9 = $8&1;
    if (!($9)) {
     __THREW__ = 0;
     (invoke_iii(481,(((10072 + 36|0))|0),(10464|0))|0);
     $10 = __THREW__; __THREW__ = 0;
     $11 = $10&1;
     if (!($11)) {
      __THREW__ = 0;
      (invoke_iii(481,(((10072 + 48|0))|0),(10784|0))|0);
      $12 = __THREW__; __THREW__ = 0;
      $13 = $12&1;
      if (!($13)) {
       __THREW__ = 0;
       (invoke_iii(481,(((10072 + 60|0))|0),(10488|0))|0);
       $14 = __THREW__; __THREW__ = 0;
       $15 = $14&1;
       if (!($15)) {
        __THREW__ = 0;
        (invoke_iii(481,(((10072 + 72|0))|0),(10512|0))|0);
        $16 = __THREW__; __THREW__ = 0;
        $17 = $16&1;
        if (!($17)) {
         __THREW__ = 0;
         (invoke_iii(481,(((10072 + 84|0))|0),(10536|0))|0);
         $18 = __THREW__; __THREW__ = 0;
         $19 = $18&1;
         if (!($19)) {
          __THREW__ = 0;
          (invoke_iii(481,(((10072 + 96|0))|0),(10568|0))|0);
          $20 = __THREW__; __THREW__ = 0;
          $21 = $20&1;
          if (!($21)) {
           __THREW__ = 0;
           (invoke_iii(481,(((10072 + 108|0))|0),(10608|0))|0);
           $22 = __THREW__; __THREW__ = 0;
           $23 = $22&1;
           if (!($23)) {
            __THREW__ = 0;
            (invoke_iii(481,(((10072 + 120|0))|0),(10640|0))|0);
            $24 = __THREW__; __THREW__ = 0;
            $25 = $24&1;
            if (!($25)) {
             __THREW__ = 0;
             (invoke_iii(481,(((10072 + 132|0))|0),(10680|0))|0);
             $26 = __THREW__; __THREW__ = 0;
             $27 = $26&1;
             if (!($27)) {
              __THREW__ = 0;
              (invoke_iii(481,(((10072 + 144|0))|0),(10720|0))|0);
              $28 = __THREW__; __THREW__ = 0;
              $29 = $28&1;
              if (!($29)) {
               __THREW__ = 0;
               (invoke_iii(481,(((10072 + 156|0))|0),(10736|0))|0);
               $30 = __THREW__; __THREW__ = 0;
               $31 = $30&1;
               if (!($31)) {
                __THREW__ = 0;
                (invoke_iii(481,(((10072 + 168|0))|0),(10752|0))|0);
                $32 = __THREW__; __THREW__ = 0;
                $33 = $32&1;
                if (!($33)) {
                 __THREW__ = 0;
                 (invoke_iii(481,(((10072 + 180|0))|0),(10768|0))|0);
                 $34 = __THREW__; __THREW__ = 0;
                 $35 = $34&1;
                 if (!($35)) {
                  __THREW__ = 0;
                  (invoke_iii(481,(((10072 + 192|0))|0),(10784|0))|0);
                  $36 = __THREW__; __THREW__ = 0;
                  $37 = $36&1;
                  if ($37) {
                   break;
                  }
                  __THREW__ = 0;
                  (invoke_iii(481,(((10072 + 204|0))|0),(10800|0))|0);
                  $38 = __THREW__; __THREW__ = 0;
                  $39 = $38&1;
                  if ($39) {
                   break;
                  }
                  __THREW__ = 0;
                  (invoke_iii(481,(((10072 + 216|0))|0),(10816|0))|0);
                  $40 = __THREW__; __THREW__ = 0;
                  $41 = $40&1;
                  if ($41) {
                   break;
                  }
                  __THREW__ = 0;
                  (invoke_iii(481,(((10072 + 228|0))|0),(10832|0))|0);
                  $42 = __THREW__; __THREW__ = 0;
                  $43 = $42&1;
                  if ($43) {
                   break;
                  }
                  __THREW__ = 0;
                  (invoke_iii(481,(((10072 + 240|0))|0),(10848|0))|0);
                  $44 = __THREW__; __THREW__ = 0;
                  $45 = $44&1;
                  if ($45) {
                   break;
                  }
                  __THREW__ = 0;
                  (invoke_iii(481,(((10072 + 252|0))|0),(10864|0))|0);
                  $46 = __THREW__; __THREW__ = 0;
                  $47 = $46&1;
                  if ($47) {
                   break;
                  }
                  __THREW__ = 0;
                  (invoke_iii(481,(((10072 + 264|0))|0),(10880|0))|0);
                  $48 = __THREW__; __THREW__ = 0;
                  $49 = $48&1;
                  if ($49) {
                   break;
                  }
                  __THREW__ = 0;
                  (invoke_iii(481,(((10072 + 276|0))|0),(10896|0))|0);
                  $50 = __THREW__; __THREW__ = 0;
                  $51 = $50&1;
                  if ($51) {
                   break;
                  }
                  HEAP32[4968>>2] = 10072;
                  ___cxa_guard_release((4976|0));
                  $52 = HEAP32[4968>>2]|0;
                  STACKTOP = sp;return ($52|0);
                 }
                }
               }
              }
             }
            }
           }
          }
         }
        }
       }
      }
     }
    }
   }
  }
 } while(0);
 $53 = ___cxa_find_matching_catch()|0;
 $54 = tempRet0;
 ___cxa_guard_abort((4976|0));
 ___resumeException($53|0);
 // unreachable;
 return 0|0;
}
function __ZNKSt3__120__time_get_c_storageIcE7__am_pmEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $guard$uninitialized = 0, $guard$uninitialized$i = 0, $tobool = 0, $tobool$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[4992>>0]|0;
 $guard$uninitialized = ($0<<24>>24)==(0);
 if (!($guard$uninitialized)) {
  $8 = HEAP32[4984>>2]|0;
  STACKTOP = sp;return ($8|0);
 }
 $1 = (___cxa_guard_acquire((4992|0))|0);
 $tobool = ($1|0)==(0);
 if ($tobool) {
  $8 = HEAP32[4984>>2]|0;
  STACKTOP = sp;return ($8|0);
 }
 $2 = HEAP8[10048>>0]|0;
 $guard$uninitialized$i = ($2<<24>>24)==(0);
 if ($guard$uninitialized$i) {
  $3 = (___cxa_guard_acquire((10048|0))|0);
  $tobool$i = ($3|0)==(0);
  if (!($tobool$i)) {
   _memset((9760|0),0,288)|0;
   (___cxa_atexit((484|0),(0|0),(___dso_handle|0))|0);
   ___cxa_guard_release((10048|0));
  }
 }
 __THREW__ = 0;
 (invoke_iii(479,(9760|0),(10056|0))|0);
 $4 = __THREW__; __THREW__ = 0;
 $5 = $4&1;
 if ($5) {
  $9 = ___cxa_find_matching_catch()|0;
  $10 = tempRet0;
  ___cxa_guard_abort((4992|0));
  ___resumeException($9|0);
  // unreachable;
 }
 __THREW__ = 0;
 (invoke_iii(479,(((9760 + 12|0))|0),(10064|0))|0);
 $6 = __THREW__; __THREW__ = 0;
 $7 = $6&1;
 if ($7) {
  $9 = ___cxa_find_matching_catch()|0;
  $10 = tempRet0;
  ___cxa_guard_abort((4992|0));
  ___resumeException($9|0);
  // unreachable;
 }
 HEAP32[4984>>2] = 9760;
 ___cxa_guard_release((4992|0));
 $8 = HEAP32[4984>>2]|0;
 STACKTOP = sp;return ($8|0);
}
function __ZNKSt3__120__time_get_c_storageIwE7__am_pmEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $guard$uninitialized = 0, $guard$uninitialized$i = 0, $tobool = 0, $tobool$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[5008>>0]|0;
 $guard$uninitialized = ($0<<24>>24)==(0);
 if (!($guard$uninitialized)) {
  $8 = HEAP32[5000>>2]|0;
  STACKTOP = sp;return ($8|0);
 }
 $1 = (___cxa_guard_acquire((5008|0))|0);
 $tobool = ($1|0)==(0);
 if ($tobool) {
  $8 = HEAP32[5000>>2]|0;
  STACKTOP = sp;return ($8|0);
 }
 $2 = HEAP8[9720>>0]|0;
 $guard$uninitialized$i = ($2<<24>>24)==(0);
 if ($guard$uninitialized$i) {
  $3 = (___cxa_guard_acquire((9720|0))|0);
  $tobool$i = ($3|0)==(0);
  if (!($tobool$i)) {
   _memset((9432|0),0,288)|0;
   (___cxa_atexit((485|0),(0|0),(___dso_handle|0))|0);
   ___cxa_guard_release((9720|0));
  }
 }
 __THREW__ = 0;
 (invoke_iii(481,(9432|0),(9728|0))|0);
 $4 = __THREW__; __THREW__ = 0;
 $5 = $4&1;
 if ($5) {
  $9 = ___cxa_find_matching_catch()|0;
  $10 = tempRet0;
  ___cxa_guard_abort((5008|0));
  ___resumeException($9|0);
  // unreachable;
 }
 __THREW__ = 0;
 (invoke_iii(481,(((9432 + 12|0))|0),(9744|0))|0);
 $6 = __THREW__; __THREW__ = 0;
 $7 = $6&1;
 if ($7) {
  $9 = ___cxa_find_matching_catch()|0;
  $10 = tempRet0;
  ___cxa_guard_abort((5008|0));
  ___resumeException($9|0);
  // unreachable;
 }
 HEAP32[5000>>2] = 9432;
 ___cxa_guard_release((5008|0));
 $8 = HEAP32[5000>>2]|0;
 STACKTOP = sp;return ($8|0);
}
function __ZNKSt3__120__time_get_c_storageIcE3__xEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $guard$uninitialized = 0, $tobool = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[5032>>0]|0;
 $guard$uninitialized = ($0<<24>>24)==(0);
 if (!($guard$uninitialized)) {
  STACKTOP = sp;return (5016|0);
 }
 $1 = (___cxa_guard_acquire((5032|0))|0);
 $tobool = ($1|0)==(0);
 if ($tobool) {
  STACKTOP = sp;return (5016|0);
 }
 __THREW__ = 0;
 invoke_viii(433,(5016|0),(5040|0),8);
 $2 = __THREW__; __THREW__ = 0;
 $3 = $2&1;
 if ($3) {
  $4 = ___cxa_find_matching_catch()|0;
  $5 = tempRet0;
  ___cxa_guard_abort((5032|0));
  ___resumeException($4|0);
  // unreachable;
 }
 (___cxa_atexit((486|0),(5016|0),(___dso_handle|0))|0);
 ___cxa_guard_release((5032|0));
 STACKTOP = sp;return (5016|0);
}
function __ZNKSt3__120__time_get_c_storageIwE3__xEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $call$i$i$i1 = 0, $guard$uninitialized = 0, $tobool = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[5072>>0]|0;
 $guard$uninitialized = ($0<<24>>24)==(0);
 if (!($guard$uninitialized)) {
  STACKTOP = sp;return (5056|0);
 }
 $1 = (___cxa_guard_acquire((5072|0))|0);
 $tobool = ($1|0)==(0);
 if ($tobool) {
  STACKTOP = sp;return (5056|0);
 }
 __THREW__ = 0;
 $call$i$i$i1 = (invoke_ii(487,(5080|0))|0);
 $2 = __THREW__; __THREW__ = 0;
 $3 = $2&1;
 if (!($3)) {
  __THREW__ = 0;
  invoke_viii(488,(5056|0),(5080|0),($call$i$i$i1|0));
  $4 = __THREW__; __THREW__ = 0;
  $5 = $4&1;
  if (!($5)) {
   (___cxa_atexit((489|0),(5056|0),(___dso_handle|0))|0);
   ___cxa_guard_release((5072|0));
   STACKTOP = sp;return (5056|0);
  }
 }
 $6 = ___cxa_find_matching_catch()|0;
 $7 = tempRet0;
 ___cxa_guard_abort((5072|0));
 ___resumeException($6|0);
 // unreachable;
 return 0|0;
}
function __ZNKSt3__120__time_get_c_storageIcE3__XEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $guard$uninitialized = 0, $tobool = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[5136>>0]|0;
 $guard$uninitialized = ($0<<24>>24)==(0);
 if (!($guard$uninitialized)) {
  STACKTOP = sp;return (5120|0);
 }
 $1 = (___cxa_guard_acquire((5136|0))|0);
 $tobool = ($1|0)==(0);
 if ($tobool) {
  STACKTOP = sp;return (5120|0);
 }
 __THREW__ = 0;
 invoke_viii(433,(5120|0),(5144|0),8);
 $2 = __THREW__; __THREW__ = 0;
 $3 = $2&1;
 if ($3) {
  $4 = ___cxa_find_matching_catch()|0;
  $5 = tempRet0;
  ___cxa_guard_abort((5136|0));
  ___resumeException($4|0);
  // unreachable;
 }
 (___cxa_atexit((486|0),(5120|0),(___dso_handle|0))|0);
 ___cxa_guard_release((5136|0));
 STACKTOP = sp;return (5120|0);
}
function __ZNKSt3__120__time_get_c_storageIwE3__XEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $call$i$i$i1 = 0, $guard$uninitialized = 0, $tobool = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[5176>>0]|0;
 $guard$uninitialized = ($0<<24>>24)==(0);
 if (!($guard$uninitialized)) {
  STACKTOP = sp;return (5160|0);
 }
 $1 = (___cxa_guard_acquire((5176|0))|0);
 $tobool = ($1|0)==(0);
 if ($tobool) {
  STACKTOP = sp;return (5160|0);
 }
 __THREW__ = 0;
 $call$i$i$i1 = (invoke_ii(487,(5184|0))|0);
 $2 = __THREW__; __THREW__ = 0;
 $3 = $2&1;
 if (!($3)) {
  __THREW__ = 0;
  invoke_viii(488,(5160|0),(5184|0),($call$i$i$i1|0));
  $4 = __THREW__; __THREW__ = 0;
  $5 = $4&1;
  if (!($5)) {
   (___cxa_atexit((489|0),(5160|0),(___dso_handle|0))|0);
   ___cxa_guard_release((5176|0));
   STACKTOP = sp;return (5160|0);
  }
 }
 $6 = ___cxa_find_matching_catch()|0;
 $7 = tempRet0;
 ___cxa_guard_abort((5176|0));
 ___resumeException($6|0);
 // unreachable;
 return 0|0;
}
function __ZNKSt3__120__time_get_c_storageIcE3__cEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $guard$uninitialized = 0, $tobool = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[5240>>0]|0;
 $guard$uninitialized = ($0<<24>>24)==(0);
 if (!($guard$uninitialized)) {
  STACKTOP = sp;return (5224|0);
 }
 $1 = (___cxa_guard_acquire((5240|0))|0);
 $tobool = ($1|0)==(0);
 if ($tobool) {
  STACKTOP = sp;return (5224|0);
 }
 __THREW__ = 0;
 invoke_viii(433,(5224|0),(5248|0),20);
 $2 = __THREW__; __THREW__ = 0;
 $3 = $2&1;
 if ($3) {
  $4 = ___cxa_find_matching_catch()|0;
  $5 = tempRet0;
  ___cxa_guard_abort((5240|0));
  ___resumeException($4|0);
  // unreachable;
 }
 (___cxa_atexit((486|0),(5224|0),(___dso_handle|0))|0);
 ___cxa_guard_release((5240|0));
 STACKTOP = sp;return (5224|0);
}
function __ZNKSt3__120__time_get_c_storageIwE3__cEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $call$i$i$i1 = 0, $guard$uninitialized = 0, $tobool = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[5288>>0]|0;
 $guard$uninitialized = ($0<<24>>24)==(0);
 if (!($guard$uninitialized)) {
  STACKTOP = sp;return (5272|0);
 }
 $1 = (___cxa_guard_acquire((5288|0))|0);
 $tobool = ($1|0)==(0);
 if ($tobool) {
  STACKTOP = sp;return (5272|0);
 }
 __THREW__ = 0;
 $call$i$i$i1 = (invoke_ii(487,(5296|0))|0);
 $2 = __THREW__; __THREW__ = 0;
 $3 = $2&1;
 if (!($3)) {
  __THREW__ = 0;
  invoke_viii(488,(5272|0),(5296|0),($call$i$i$i1|0));
  $4 = __THREW__; __THREW__ = 0;
  $5 = $4&1;
  if (!($5)) {
   (___cxa_atexit((489|0),(5272|0),(___dso_handle|0))|0);
   ___cxa_guard_release((5288|0));
   STACKTOP = sp;return (5272|0);
  }
 }
 $6 = ___cxa_find_matching_catch()|0;
 $7 = tempRet0;
 ___cxa_guard_abort((5288|0));
 ___resumeException($6|0);
 // unreachable;
 return 0|0;
}
function __ZNKSt3__120__time_get_c_storageIcE3__rEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $guard$uninitialized = 0, $tobool = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[5400>>0]|0;
 $guard$uninitialized = ($0<<24>>24)==(0);
 if (!($guard$uninitialized)) {
  STACKTOP = sp;return (5384|0);
 }
 $1 = (___cxa_guard_acquire((5400|0))|0);
 $tobool = ($1|0)==(0);
 if ($tobool) {
  STACKTOP = sp;return (5384|0);
 }
 __THREW__ = 0;
 invoke_viii(433,(5384|0),(5408|0),11);
 $2 = __THREW__; __THREW__ = 0;
 $3 = $2&1;
 if ($3) {
  $4 = ___cxa_find_matching_catch()|0;
  $5 = tempRet0;
  ___cxa_guard_abort((5400|0));
  ___resumeException($4|0);
  // unreachable;
 }
 (___cxa_atexit((486|0),(5384|0),(___dso_handle|0))|0);
 ___cxa_guard_release((5400|0));
 STACKTOP = sp;return (5384|0);
}
function __ZNKSt3__120__time_get_c_storageIwE3__rEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $call$i$i$i1 = 0, $guard$uninitialized = 0, $tobool = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[5440>>0]|0;
 $guard$uninitialized = ($0<<24>>24)==(0);
 if (!($guard$uninitialized)) {
  STACKTOP = sp;return (5424|0);
 }
 $1 = (___cxa_guard_acquire((5440|0))|0);
 $tobool = ($1|0)==(0);
 if ($tobool) {
  STACKTOP = sp;return (5424|0);
 }
 __THREW__ = 0;
 $call$i$i$i1 = (invoke_ii(487,(5448|0))|0);
 $2 = __THREW__; __THREW__ = 0;
 $3 = $2&1;
 if (!($3)) {
  __THREW__ = 0;
  invoke_viii(488,(5424|0),(5448|0),($call$i$i$i1|0));
  $4 = __THREW__; __THREW__ = 0;
  $5 = $4&1;
  if (!($5)) {
   (___cxa_atexit((489|0),(5424|0),(___dso_handle|0))|0);
   ___cxa_guard_release((5440|0));
   STACKTOP = sp;return (5424|0);
  }
 }
 $6 = ___cxa_find_matching_catch()|0;
 $7 = tempRet0;
 ___cxa_guard_abort((5440|0));
 ___resumeException($6|0);
 // unreachable;
 return 0|0;
}
function __ZNSt3__115__num_get_floatIeEET_PKcS3_Rj($__a,$__a_end,$__err) {
 $__a = $__a|0;
 $__a_end = $__a_end|0;
 $__err = $__err|0;
 var $0 = 0, $1 = 0, $2 = 0, $__p2 = 0, $call = 0, $call2 = 0, $call3 = 0.0, $cmp = 0, $cmp10 = 0, $cmp5 = 0, $cmp8 = 0, $retval$0 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__p2 = sp;
 $cmp = ($__a|0)==($__a_end|0);
 do {
  if ($cmp) {
   HEAP32[$__err>>2] = 4;
   $retval$0 = 0.0;
  } else {
   $call = (___errno_location()|0);
   $0 = HEAP32[$call>>2]|0;
   HEAP32[$call>>2] = 0;
   $call2 = (__ZNSt3__16__clocEv()|0);
   $call3 = (+_strtold_l($__a,$__p2,$call2));
   $1 = HEAP32[$call>>2]|0;
   $cmp5 = ($1|0)==(0);
   if ($cmp5) {
    HEAP32[$call>>2] = $0;
   }
   $2 = HEAP32[$__p2>>2]|0;
   $cmp8 = ($2|0)==($__a_end|0);
   if (!($cmp8)) {
    HEAP32[$__err>>2] = 4;
    $retval$0 = 0.0;
    break;
   }
   $cmp10 = ($1|0)==(34);
   if ($cmp10) {
    HEAP32[$__err>>2] = 4;
    $retval$0 = $call3;
   } else {
    $retval$0 = $call3;
   }
  }
 } while(0);
 STACKTOP = sp;return (+$retval$0);
}
function __ZNSt3__115__num_get_floatIdEET_PKcS3_Rj($__a,$__a_end,$__err) {
 $__a = $__a|0;
 $__a_end = $__a_end|0;
 $__err = $__err|0;
 var $0 = 0, $1 = 0, $2 = 0, $__p2 = 0, $call = 0, $call2 = 0, $call3 = 0.0, $cmp = 0, $cmp10 = 0, $cmp5 = 0, $cmp8 = 0, $retval$0 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__p2 = sp;
 $cmp = ($__a|0)==($__a_end|0);
 do {
  if ($cmp) {
   HEAP32[$__err>>2] = 4;
   $retval$0 = 0.0;
  } else {
   $call = (___errno_location()|0);
   $0 = HEAP32[$call>>2]|0;
   HEAP32[$call>>2] = 0;
   $call2 = (__ZNSt3__16__clocEv()|0);
   $call3 = (+_strtold_l($__a,$__p2,$call2));
   $1 = HEAP32[$call>>2]|0;
   $cmp5 = ($1|0)==(0);
   if ($cmp5) {
    HEAP32[$call>>2] = $0;
   }
   $2 = HEAP32[$__p2>>2]|0;
   $cmp8 = ($2|0)==($__a_end|0);
   if (!($cmp8)) {
    HEAP32[$__err>>2] = 4;
    $retval$0 = 0.0;
    break;
   }
   $cmp10 = ($1|0)==(34);
   if ($cmp10) {
    HEAP32[$__err>>2] = 4;
    $retval$0 = $call3;
   } else {
    $retval$0 = $call3;
   }
  }
 } while(0);
 STACKTOP = sp;return (+$retval$0);
}
function __ZNSt3__115__num_get_floatIfEET_PKcS3_Rj($__a,$__a_end,$__err) {
 $__a = $__a|0;
 $__a_end = $__a_end|0;
 $__err = $__err|0;
 var $0 = 0, $1 = 0, $2 = 0, $__p2 = 0, $call = 0, $call2 = 0, $call3 = 0.0, $cmp = 0, $cmp10 = 0, $cmp5 = 0, $cmp8 = 0, $conv = 0.0, $retval$0 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__p2 = sp;
 $cmp = ($__a|0)==($__a_end|0);
 if ($cmp) {
  HEAP32[$__err>>2] = 4;
  $retval$0 = 0.0;
  STACKTOP = sp;return (+$retval$0);
 }
 $call = (___errno_location()|0);
 $0 = HEAP32[$call>>2]|0;
 HEAP32[$call>>2] = 0;
 $call2 = (__ZNSt3__16__clocEv()|0);
 $call3 = (+_strtold_l($__a,$__p2,$call2));
 $1 = HEAP32[$call>>2]|0;
 $cmp5 = ($1|0)==(0);
 if ($cmp5) {
  HEAP32[$call>>2] = $0;
 }
 $2 = HEAP32[$__p2>>2]|0;
 $cmp8 = ($2|0)==($__a_end|0);
 if (!($cmp8)) {
  HEAP32[$__err>>2] = 4;
  $retval$0 = 0.0;
  STACKTOP = sp;return (+$retval$0);
 }
 $cmp10 = ($1|0)==(34);
 if ($cmp10) {
  HEAP32[$__err>>2] = 4;
 }
 $conv = $call3;
 $retval$0 = $conv;
 STACKTOP = sp;return (+$retval$0);
}
function __ZNSt3__127__num_get_unsigned_integralIyEET_PKcS3_Rji($__a,$__a_end,$__err,$__base) {
 $__a = $__a|0;
 $__a_end = $__a_end|0;
 $__err = $__err|0;
 $__base = $__base|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $__p2 = 0, $call = 0, $call4 = 0, $cmp = 0, $cmp1 = 0, $cmp11 = 0, $cmp13 = 0, $cmp7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__p2 = sp;
 $cmp = ($__a|0)==($__a_end|0);
 do {
  if ($cmp) {
   HEAP32[$__err>>2] = 4;
   $6 = 0;$7 = 0;
  } else {
   $0 = HEAP8[$__a>>0]|0;
   $cmp1 = ($0<<24>>24)==(45);
   if ($cmp1) {
    HEAP32[$__err>>2] = 4;
    $6 = 0;$7 = 0;
    break;
   }
   $call = (___errno_location()|0);
   $1 = HEAP32[$call>>2]|0;
   HEAP32[$call>>2] = 0;
   $call4 = (__ZNSt3__16__clocEv()|0);
   $2 = (_strtoull_l($__a,$__p2,$__base,$call4)|0);
   $3 = tempRet0;
   $4 = HEAP32[$call>>2]|0;
   $cmp7 = ($4|0)==(0);
   if ($cmp7) {
    HEAP32[$call>>2] = $1;
   }
   $5 = HEAP32[$__p2>>2]|0;
   $cmp11 = ($5|0)==($__a_end|0);
   if (!($cmp11)) {
    HEAP32[$__err>>2] = 4;
    $6 = 0;$7 = 0;
    break;
   }
   $cmp13 = ($4|0)==(34);
   if ($cmp13) {
    HEAP32[$__err>>2] = 4;
    $6 = -1;$7 = -1;
   } else {
    $6 = $3;$7 = $2;
   }
  }
 } while(0);
 tempRet0 = $6;
 STACKTOP = sp;return ($7|0);
}
function __ZNSt3__127__num_get_unsigned_integralImEET_PKcS3_Rji($__a,$__a_end,$__err,$__base) {
 $__a = $__a|0;
 $__a_end = $__a_end|0;
 $__err = $__err|0;
 $__base = $__base|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__p2 = 0, $call = 0, $call4 = 0, $cmp = 0, $cmp1 = 0, $cmp11 = 0, $cmp13 = 0, $cmp7 = 0, $or$cond = 0;
 var $retval$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__p2 = sp;
 $cmp = ($__a|0)==($__a_end|0);
 do {
  if ($cmp) {
   HEAP32[$__err>>2] = 4;
   $retval$0 = 0;
  } else {
   $0 = HEAP8[$__a>>0]|0;
   $cmp1 = ($0<<24>>24)==(45);
   if ($cmp1) {
    HEAP32[$__err>>2] = 4;
    $retval$0 = 0;
    break;
   }
   $call = (___errno_location()|0);
   $1 = HEAP32[$call>>2]|0;
   HEAP32[$call>>2] = 0;
   $call4 = (__ZNSt3__16__clocEv()|0);
   $2 = (_strtoull_l($__a,$__p2,$__base,$call4)|0);
   $3 = tempRet0;
   $4 = HEAP32[$call>>2]|0;
   $cmp7 = ($4|0)==(0);
   if ($cmp7) {
    HEAP32[$call>>2] = $1;
   }
   $5 = HEAP32[$__p2>>2]|0;
   $cmp11 = ($5|0)==($__a_end|0);
   if (!($cmp11)) {
    HEAP32[$__err>>2] = 4;
    $retval$0 = 0;
    break;
   }
   $cmp13 = ($4|0)==(34);
   $6 = ($3>>>0)>(0);
   $7 = ($3|0)==(0);
   $8 = ($2>>>0)>(4294967295);
   $9 = $7 & $8;
   $10 = $6 | $9;
   $or$cond = $cmp13 | $10;
   if ($or$cond) {
    HEAP32[$__err>>2] = 4;
    $retval$0 = -1;
    break;
   } else {
    $retval$0 = $2;
    break;
   }
  }
 } while(0);
 STACKTOP = sp;return ($retval$0|0);
}
function __ZNSt3__127__num_get_unsigned_integralIjEET_PKcS3_Rji($__a,$__a_end,$__err,$__base) {
 $__a = $__a|0;
 $__a_end = $__a_end|0;
 $__err = $__err|0;
 $__base = $__base|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__p2 = 0, $call = 0, $call4 = 0, $cmp = 0, $cmp1 = 0, $cmp11 = 0, $cmp13 = 0, $cmp7 = 0, $or$cond = 0;
 var $retval$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__p2 = sp;
 $cmp = ($__a|0)==($__a_end|0);
 do {
  if ($cmp) {
   HEAP32[$__err>>2] = 4;
   $retval$0 = 0;
  } else {
   $0 = HEAP8[$__a>>0]|0;
   $cmp1 = ($0<<24>>24)==(45);
   if ($cmp1) {
    HEAP32[$__err>>2] = 4;
    $retval$0 = 0;
    break;
   }
   $call = (___errno_location()|0);
   $1 = HEAP32[$call>>2]|0;
   HEAP32[$call>>2] = 0;
   $call4 = (__ZNSt3__16__clocEv()|0);
   $2 = (_strtoull_l($__a,$__p2,$__base,$call4)|0);
   $3 = tempRet0;
   $4 = HEAP32[$call>>2]|0;
   $cmp7 = ($4|0)==(0);
   if ($cmp7) {
    HEAP32[$call>>2] = $1;
   }
   $5 = HEAP32[$__p2>>2]|0;
   $cmp11 = ($5|0)==($__a_end|0);
   if (!($cmp11)) {
    HEAP32[$__err>>2] = 4;
    $retval$0 = 0;
    break;
   }
   $cmp13 = ($4|0)==(34);
   $6 = ($3>>>0)>(0);
   $7 = ($3|0)==(0);
   $8 = ($2>>>0)>(4294967295);
   $9 = $7 & $8;
   $10 = $6 | $9;
   $or$cond = $cmp13 | $10;
   if ($or$cond) {
    HEAP32[$__err>>2] = 4;
    $retval$0 = -1;
    break;
   } else {
    $retval$0 = $2;
    break;
   }
  }
 } while(0);
 STACKTOP = sp;return ($retval$0|0);
}
function __ZNSt3__127__num_get_unsigned_integralItEET_PKcS3_Rji($__a,$__a_end,$__err,$__base) {
 $__a = $__a|0;
 $__a_end = $__a_end|0;
 $__err = $__err|0;
 $__base = $__base|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__p2 = 0, $call = 0, $call4 = 0, $cmp = 0, $cmp1 = 0, $cmp11 = 0, $cmp13 = 0, $cmp7 = 0;
 var $or$cond = 0, $retval$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__p2 = sp;
 $cmp = ($__a|0)==($__a_end|0);
 do {
  if ($cmp) {
   HEAP32[$__err>>2] = 4;
   $retval$0 = 0;
  } else {
   $0 = HEAP8[$__a>>0]|0;
   $cmp1 = ($0<<24>>24)==(45);
   if ($cmp1) {
    HEAP32[$__err>>2] = 4;
    $retval$0 = 0;
    break;
   }
   $call = (___errno_location()|0);
   $1 = HEAP32[$call>>2]|0;
   HEAP32[$call>>2] = 0;
   $call4 = (__ZNSt3__16__clocEv()|0);
   $2 = (_strtoull_l($__a,$__p2,$__base,$call4)|0);
   $3 = tempRet0;
   $4 = HEAP32[$call>>2]|0;
   $cmp7 = ($4|0)==(0);
   if ($cmp7) {
    HEAP32[$call>>2] = $1;
   }
   $5 = HEAP32[$__p2>>2]|0;
   $cmp11 = ($5|0)==($__a_end|0);
   if (!($cmp11)) {
    HEAP32[$__err>>2] = 4;
    $retval$0 = 0;
    break;
   }
   $cmp13 = ($4|0)==(34);
   $6 = ($3>>>0)>(0);
   $7 = ($3|0)==(0);
   $8 = ($2>>>0)>(65535);
   $9 = $7 & $8;
   $10 = $6 | $9;
   $or$cond = $cmp13 | $10;
   if ($or$cond) {
    HEAP32[$__err>>2] = 4;
    $retval$0 = -1;
    break;
   } else {
    $11 = $2&65535;
    $retval$0 = $11;
    break;
   }
  }
 } while(0);
 STACKTOP = sp;return ($retval$0|0);
}
function __ZNSt3__125__num_get_signed_integralIxEET_PKcS3_Rji($__a,$__a_end,$__err,$__base) {
 $__a = $__a|0;
 $__a_end = $__a_end|0;
 $__err = $__err|0;
 $__base = $__base|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__p2 = 0, $call = 0, $call2 = 0, $cmp = 0, $cmp10 = 0, $cmp5 = 0;
 var $cmp8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__p2 = sp;
 $cmp = ($__a|0)==($__a_end|0);
 if ($cmp) {
  HEAP32[$__err>>2] = 4;
  $12 = 0;$13 = 0;
  tempRet0 = $12;
  STACKTOP = sp;return ($13|0);
 }
 $call = (___errno_location()|0);
 $0 = HEAP32[$call>>2]|0;
 HEAP32[$call>>2] = 0;
 $call2 = (__ZNSt3__16__clocEv()|0);
 $1 = (_strtoll_l($__a,$__p2,$__base,$call2)|0);
 $2 = tempRet0;
 $3 = HEAP32[$call>>2]|0;
 $cmp5 = ($3|0)==(0);
 if ($cmp5) {
  HEAP32[$call>>2] = $0;
 }
 $4 = HEAP32[$__p2>>2]|0;
 $cmp8 = ($4|0)==($__a_end|0);
 if (!($cmp8)) {
  HEAP32[$__err>>2] = 4;
  $12 = 0;$13 = 0;
  tempRet0 = $12;
  STACKTOP = sp;return ($13|0);
 }
 $cmp10 = ($3|0)==(34);
 if ($cmp10) {
  HEAP32[$__err>>2] = 4;
  $5 = ($2|0)>(0);
  $6 = ($2|0)==(0);
  $7 = ($1>>>0)>(0);
  $8 = $6 & $7;
  $9 = $5 | $8;
  $10 = $9 ? -1 : 0;
  $11 = $9 ? 2147483647 : -2147483648;
  tempRet0 = $11;
  STACKTOP = sp;return ($10|0);
 } else {
  $12 = $2;$13 = $1;
  tempRet0 = $12;
  STACKTOP = sp;return ($13|0);
 }
 return 0|0;
}
function __ZNSt3__125__num_get_signed_integralIlEET_PKcS3_Rji($__a,$__a_end,$__err,$__base) {
 $__a = $__a|0;
 $__a_end = $__a_end|0;
 $__err = $__err|0;
 $__base = $__base|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $__p2 = 0, $call = 0, $call2 = 0, $cmp = 0, $cmp10 = 0, $cmp5 = 0, $cmp8 = 0, $retval$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__p2 = sp;
 $cmp = ($__a|0)==($__a_end|0);
 L1: do {
  if ($cmp) {
   HEAP32[$__err>>2] = 4;
   $retval$0 = 0;
  } else {
   $call = (___errno_location()|0);
   $0 = HEAP32[$call>>2]|0;
   HEAP32[$call>>2] = 0;
   $call2 = (__ZNSt3__16__clocEv()|0);
   $1 = (_strtoll_l($__a,$__p2,$__base,$call2)|0);
   $2 = tempRet0;
   $3 = HEAP32[$call>>2]|0;
   $cmp5 = ($3|0)==(0);
   if ($cmp5) {
    HEAP32[$call>>2] = $0;
   }
   $4 = HEAP32[$__p2>>2]|0;
   $cmp8 = ($4|0)==($__a_end|0);
   if (!($cmp8)) {
    HEAP32[$__err>>2] = 4;
    $retval$0 = 0;
    break;
   }
   $cmp10 = ($3|0)==(34);
   do {
    if ($cmp10) {
     HEAP32[$__err>>2] = 4;
     $15 = ($2|0)>(0);
     $16 = ($2|0)==(0);
     $17 = ($1>>>0)>(0);
     $18 = $16 & $17;
     $19 = $15 | $18;
     if ($19) {
      $retval$0 = 2147483647;
      break L1;
     }
    } else {
     $5 = ($2|0)<(-1);
     $6 = ($2|0)==(-1);
     $7 = ($1>>>0)<(2147483648);
     $8 = $6 & $7;
     $9 = $5 | $8;
     if ($9) {
      HEAP32[$__err>>2] = 4;
      break;
     }
     $10 = ($2|0)>(0);
     $11 = ($2|0)==(0);
     $12 = ($1>>>0)>(2147483647);
     $13 = $11 & $12;
     $14 = $10 | $13;
     if ($14) {
      HEAP32[$__err>>2] = 4;
      $retval$0 = 2147483647;
      break L1;
     } else {
      $retval$0 = $1;
      break L1;
     }
    }
   } while(0);
   $retval$0 = -2147483648;
  }
 } while(0);
 STACKTOP = sp;return ($retval$0|0);
}
function __ZNSt3__117__call_once_proxyINS_5tupleIJNS_12_GLOBAL__N_111__fake_bindEEEEEEvPv($__vp) {
 $__vp = $__vp|0;
 var $$field = 0, $$field2 = 0, $$index1 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $memptr$adj$shifted$i$i$i$i = 0, $memptr$isvirtual$i$i$i$i = 0, $memptr$nonvirtualfn$i$i$i$i = 0, $memptr$virtualfn$i$i$i$i = 0, $memptr$vtable$i$i$i$i = 0, $pmf_$i$i$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $pmf_$i$i$i$i = (($__vp) + 4|0);
 $$field = HEAPU8[$pmf_$i$i$i$i>>0]|(HEAPU8[$pmf_$i$i$i$i+1>>0]<<8)|(HEAPU8[$pmf_$i$i$i$i+2>>0]<<16)|(HEAPU8[$pmf_$i$i$i$i+3>>0]<<24);
 $$index1 = (($pmf_$i$i$i$i) + 4|0);
 $$field2 = HEAPU8[$$index1>>0]|(HEAPU8[$$index1+1>>0]<<8)|(HEAPU8[$$index1+2>>0]<<16)|(HEAPU8[$$index1+3>>0]<<24);
 $0 = HEAP32[$__vp>>2]|0;
 $memptr$adj$shifted$i$i$i$i = $$field2 >> 1;
 $1 = (($0) + ($memptr$adj$shifted$i$i$i$i)|0);
 $2 = $$field2 & 1;
 $memptr$isvirtual$i$i$i$i = ($2|0)==(0);
 if ($memptr$isvirtual$i$i$i$i) {
  $memptr$nonvirtualfn$i$i$i$i = $$field;
  $4 = $memptr$nonvirtualfn$i$i$i$i;
  FUNCTION_TABLE_vi[$4 & 511]($1);
  STACKTOP = sp;return;
 } else {
  $memptr$vtable$i$i$i$i = HEAP32[$1>>2]|0;
  $3 = (($memptr$vtable$i$i$i$i) + ($$field)|0);
  $memptr$virtualfn$i$i$i$i = HEAP32[$3>>2]|0;
  $4 = $memptr$virtualfn$i$i$i$i;
  FUNCTION_TABLE_vi[$4 & 511]($1);
  STACKTOP = sp;return;
 }
}
function __ZNSt3__16vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lj28EEEE8__appendEj($this,$__n) {
 $this = $this|0;
 $__n = $__n|0;
 var $$sroa$speculated$i = 0, $0 = 0, $1 = 0, $2 = 0, $__end_ = 0, $__first_$i$i$i = 0, $__second_$i$i$i = 0, $__v = 0, $add = 0, $cmp = 0, $cmp$i = 0, $cmp$i$i$i$i = 0, $cmp3$i = 0, $mul$i = 0, $retval$0$i = 0, $sub$ptr$div = 0, $sub$ptr$div$i = 0, $sub$ptr$div$i$i$i = 0, $sub$ptr$lhs$cast = 0, $sub$ptr$rhs$cast = 0;
 var $sub$ptr$rhs$cast$i = 0, $sub$ptr$sub = 0, $sub$ptr$sub$i = 0, $sub$ptr$sub$i$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__v = sp;
 $__first_$i$i$i = (($this) + 8|0);
 $0 = HEAP32[$__first_$i$i$i>>2]|0;
 $__end_ = (($this) + 4|0);
 $1 = HEAP32[$__end_>>2]|0;
 $sub$ptr$lhs$cast = $0;
 $sub$ptr$rhs$cast = $1;
 $sub$ptr$sub = (($sub$ptr$lhs$cast) - ($sub$ptr$rhs$cast))|0;
 $sub$ptr$div = $sub$ptr$sub >> 2;
 $cmp = ($sub$ptr$div>>>0)<($__n>>>0);
 if (!($cmp)) {
  __ZNSt3__16vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lj28EEEE18__construct_at_endEj($this,$__n);
  STACKTOP = sp;return;
 }
 $__second_$i$i$i = (($this) + 16|0);
 $2 = HEAP32[$this>>2]|0;
 $sub$ptr$rhs$cast$i = $2;
 $sub$ptr$sub$i = (($sub$ptr$rhs$cast) - ($sub$ptr$rhs$cast$i))|0;
 $sub$ptr$div$i = $sub$ptr$sub$i >> 2;
 $add = (($sub$ptr$div$i) + ($__n))|0;
 $cmp$i = ($add>>>0)>(1073741823);
 if ($cmp$i) {
  __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(0);
  // unreachable;
 }
 $sub$ptr$sub$i$i$i = (($sub$ptr$lhs$cast) - ($sub$ptr$rhs$cast$i))|0;
 $sub$ptr$div$i$i$i = $sub$ptr$sub$i$i$i >> 2;
 $cmp3$i = ($sub$ptr$div$i$i$i>>>0)<(536870911);
 if ($cmp3$i) {
  $mul$i = $sub$ptr$sub$i$i$i >> 1;
  $cmp$i$i$i$i = ($mul$i>>>0)<($add>>>0);
  $$sroa$speculated$i = $cmp$i$i$i$i ? $add : $mul$i;
  $retval$0$i = $$sroa$speculated$i;
 } else {
  $retval$0$i = 1073741823;
 }
 __ZNSt3__114__split_bufferIPNS_6locale5facetERNS_15__sso_allocatorIS3_Lj28EEEEC2EjjS6_($__v,$retval$0$i,$sub$ptr$div$i,$__second_$i$i$i);
 __ZNSt3__114__split_bufferIPNS_6locale5facetERNS_15__sso_allocatorIS3_Lj28EEEE18__construct_at_endEj($__v,$__n);
 __ZNSt3__16vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lj28EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($this,$__v);
 __ZNSt3__114__split_bufferIPNS_6locale5facetERNS_15__sso_allocatorIS3_Lj28EEEED2Ev($__v);
 STACKTOP = sp;return;
}
function __ZNSt3__16vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lj28EEEE18__construct_at_endEj($this,$__n) {
 $this = $this|0;
 $__n = $__n|0;
 var $$pre = 0, $$pre2 = 0, $0 = 0, $1 = 0, $__end_ = 0, $__n$addr$0 = 0, $cmp = 0, $dec = 0, $incdec$ptr = 0, $new$isnull$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $__end_ = (($this) + 4|0);
 $$pre = HEAP32[$__end_>>2]|0;
 $0 = $$pre;$__n$addr$0 = $__n;
 while(1) {
  $new$isnull$i$i = ($0|0)==(0|0);
  if ($new$isnull$i$i) {
   $1 = 0;
  } else {
   HEAP32[$0>>2] = 0;
   $$pre2 = HEAP32[$__end_>>2]|0;
   $1 = $$pre2;
  }
  $incdec$ptr = (($1) + 4|0);
  HEAP32[$__end_>>2] = $incdec$ptr;
  $dec = (($__n$addr$0) + -1)|0;
  $cmp = ($dec|0)==(0);
  if ($cmp) {
   break;
  } else {
   $0 = $incdec$ptr;$__n$addr$0 = $dec;
  }
 }
 STACKTOP = sp;return;
}
function __ZNSt3__114__split_bufferIPNS_6locale5facetERNS_15__sso_allocatorIS3_Lj28EEEE18__construct_at_endEj($this,$__n) {
 $this = $this|0;
 $__n = $__n|0;
 var $$pre = 0, $$pre2 = 0, $0 = 0, $1 = 0, $__end_ = 0, $__n$addr$0 = 0, $cmp = 0, $dec = 0, $incdec$ptr = 0, $new$isnull$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $__end_ = (($this) + 8|0);
 $$pre = HEAP32[$__end_>>2]|0;
 $0 = $$pre;$__n$addr$0 = $__n;
 while(1) {
  $new$isnull$i$i = ($0|0)==(0|0);
  if ($new$isnull$i$i) {
   $1 = 0;
  } else {
   HEAP32[$0>>2] = 0;
   $$pre2 = HEAP32[$__end_>>2]|0;
   $1 = $$pre2;
  }
  $incdec$ptr = (($1) + 4|0);
  HEAP32[$__end_>>2] = $incdec$ptr;
  $dec = (($__n$addr$0) + -1)|0;
  $cmp = ($dec|0)==(0);
  if ($cmp) {
   break;
  } else {
   $0 = $incdec$ptr;$__n$addr$0 = $dec;
  }
 }
 STACKTOP = sp;return;
}
function __ZNSt3__16vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lj28EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($this,$__v) {
 $this = $this|0;
 $__v = $__v|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__begin_2 = 0, $__end_ = 0, $__end_6 = 0, $__first_$i$i$i = 0, $__first_$i$i$i6 = 0, $add$ptr$i = 0, $idx$neg$i = 0, $sub$ptr$div$i = 0, $sub$ptr$lhs$cast$i = 0, $sub$ptr$rhs$cast$i = 0;
 var $sub$ptr$sub$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$this>>2]|0;
 $__end_ = (($this) + 4|0);
 $1 = HEAP32[$__end_>>2]|0;
 $__begin_2 = (($__v) + 4|0);
 $sub$ptr$lhs$cast$i = $1;
 $sub$ptr$rhs$cast$i = $0;
 $sub$ptr$sub$i = (($sub$ptr$lhs$cast$i) - ($sub$ptr$rhs$cast$i))|0;
 $sub$ptr$div$i = $sub$ptr$sub$i >> 2;
 $2 = HEAP32[$__begin_2>>2]|0;
 $idx$neg$i = (0 - ($sub$ptr$div$i))|0;
 $add$ptr$i = (($2) + ($idx$neg$i<<2)|0);
 HEAP32[$__begin_2>>2] = $add$ptr$i;
 _memcpy(($add$ptr$i|0),($0|0),($sub$ptr$sub$i|0))|0;
 $3 = HEAP32[$this>>2]|0;
 $4 = HEAP32[$__begin_2>>2]|0;
 HEAP32[$this>>2] = $4;
 HEAP32[$__begin_2>>2] = $3;
 $__end_6 = (($__v) + 8|0);
 $5 = HEAP32[$__end_>>2]|0;
 $6 = HEAP32[$__end_6>>2]|0;
 HEAP32[$__end_>>2] = $6;
 HEAP32[$__end_6>>2] = $5;
 $__first_$i$i$i6 = (($this) + 8|0);
 $__first_$i$i$i = (($__v) + 12|0);
 $7 = HEAP32[$__first_$i$i$i6>>2]|0;
 $8 = HEAP32[$__first_$i$i$i>>2]|0;
 HEAP32[$__first_$i$i$i6>>2] = $8;
 HEAP32[$__first_$i$i$i>>2] = $7;
 $9 = HEAP32[$__begin_2>>2]|0;
 HEAP32[$__v>>2] = $9;
 STACKTOP = sp;return;
}
function __ZNSt3__114__split_bufferIPNS_6locale5facetERNS_15__sso_allocatorIS3_Lj28EEEED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $__allocated_$i$i = 0, $__begin_$i = 0, $__end_$i$i$i = 0, $__new_last3$i$i$i = 0, $__second_$i$i$i = 0, $cmp$i$i = 0, $cmp1$i$i$i = 0, $ref$i$i$i = 0, $scevgep$i$i$i = 0, $scevgep5$i$i$i = 0, $tobool = 0, $uglygep$i$i$i = 0, $uglygep4$i$i$i = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $__begin_$i = (($this) + 4|0);
 $0 = HEAP32[$__begin_$i>>2]|0;
 $__end_$i$i$i = (($this) + 8|0);
 $1 = HEAP32[$__end_$i$i$i>>2]|0;
 $cmp1$i$i$i = ($1|0)==($0|0);
 if (!($cmp1$i$i$i)) {
  $__new_last3$i$i$i = $0;
  $scevgep$i$i$i = (($1) + -4|0);
  $2 = (0 - ($__new_last3$i$i$i))|0;
  $uglygep$i$i$i = (($scevgep$i$i$i) + ($2)|0);
  $uglygep4$i$i$i = $uglygep$i$i$i;
  $3 = $uglygep4$i$i$i >>> 2;
  $4 = $3 ^ -1;
  $scevgep5$i$i$i = (($1) + ($4<<2)|0);
  HEAP32[$__end_$i$i$i>>2] = $scevgep5$i$i$i;
 }
 $5 = HEAP32[$this>>2]|0;
 $tobool = ($5|0)==(0|0);
 if ($tobool) {
  STACKTOP = sp;return;
 }
 $__second_$i$i$i = (($this) + 16|0);
 $ref$i$i$i = HEAP32[$__second_$i$i$i>>2]|0;
 $cmp$i$i = ($ref$i$i$i|0)==($5|0);
 if ($cmp$i$i) {
  $__allocated_$i$i = (($ref$i$i$i) + 112|0);
  HEAP8[$__allocated_$i$i>>0] = 0;
  STACKTOP = sp;return;
 } else {
  __ZdlPv($5);
  STACKTOP = sp;return;
 }
}
function __ZNSt3__114__split_bufferIPNS_6locale5facetERNS_15__sso_allocatorIS3_Lj28EEEEC2EjjS6_($this,$__cap,$__start,$__a) {
 $this = $this|0;
 $__cap = $__cap|0;
 $__start = $__start|0;
 $__a = $__a|0;
 var $0 = 0, $1 = 0, $__allocated_$i$i = 0, $__begin_ = 0, $__end_ = 0, $__first_$i$i$i = 0, $add$ptr = 0, $add$ptr5 = 0, $call$i$i = 0, $cmp = 0, $cmp$i$i = 0, $cond = 0, $mul$i$i = 0, $or$cond$i$i = 0, $tobool$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $__first_$i$i$i = (($this) + 12|0);
 HEAP32[$__first_$i$i$i>>2] = 0;
 $0 = (($this) + 16|0);
 HEAP32[$0>>2] = $__a;
 $cmp = ($__cap|0)==(0);
 do {
  if ($cmp) {
   $cond = 0;
  } else {
   $__allocated_$i$i = (($__a) + 112|0);
   $1 = HEAP8[$__allocated_$i$i>>0]|0;
   $tobool$i$i = ($1<<24>>24)==(0);
   $cmp$i$i = ($__cap>>>0)<(29);
   $or$cond$i$i = $tobool$i$i & $cmp$i$i;
   if ($or$cond$i$i) {
    HEAP8[$__allocated_$i$i>>0] = 1;
    $cond = $__a;
    break;
   } else {
    $mul$i$i = $__cap << 2;
    $call$i$i = (__Znwj($mul$i$i)|0);
    $cond = $call$i$i;
    break;
   }
  }
 } while(0);
 HEAP32[$this>>2] = $cond;
 $add$ptr = (($cond) + ($__start<<2)|0);
 $__end_ = (($this) + 8|0);
 HEAP32[$__end_>>2] = $add$ptr;
 $__begin_ = (($this) + 4|0);
 HEAP32[$__begin_>>2] = $add$ptr;
 $add$ptr5 = (($cond) + ($__cap<<2)|0);
 HEAP32[$__first_$i$i$i>>2] = $add$ptr5;
 STACKTOP = sp;return;
}
function __ZNSt3__16vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lj28EEEE8allocateEj($this,$__n) {
 $this = $this|0;
 $__n = $__n|0;
 var $0 = 0, $__allocated_$i$i = 0, $__end_ = 0, $__first_$i$i$i = 0, $__second_$i$i$i = 0, $add$ptr = 0, $call$i$i = 0, $cmp = 0, $cmp$i$i = 0, $mul$i$i = 0, $or$cond$i$i = 0, $retval$0$i$i = 0, $tobool$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $cmp = ($__n>>>0)>(1073741823);
 if ($cmp) {
  __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(0);
  // unreachable;
 }
 $__allocated_$i$i = (($this) + 128|0);
 $0 = HEAP8[$__allocated_$i$i>>0]|0;
 $tobool$i$i = ($0<<24>>24)==(0);
 $cmp$i$i = ($__n>>>0)<(29);
 $or$cond$i$i = $tobool$i$i & $cmp$i$i;
 if ($or$cond$i$i) {
  $__second_$i$i$i = (($this) + 16|0);
  HEAP8[$__allocated_$i$i>>0] = 1;
  $retval$0$i$i = $__second_$i$i$i;
 } else {
  $mul$i$i = $__n << 2;
  $call$i$i = (__Znwj($mul$i$i)|0);
  $retval$0$i$i = $call$i$i;
 }
 $__end_ = (($this) + 4|0);
 HEAP32[$__end_>>2] = $retval$0$i$i;
 HEAP32[$this>>2] = $retval$0$i$i;
 $add$ptr = (($retval$0$i$i) + ($__n<<2)|0);
 $__first_$i$i$i = (($this) + 8|0);
 HEAP32[$__first_$i$i$i>>2] = $add$ptr;
 STACKTOP = sp;return;
}
function __ZNSt3__16vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lj28EEEEC2Ej($this,$__n) {
 $this = $this|0;
 $__n = $__n|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $__allocated_$i$i$i$i$i$i = 0, $__end_$i = 0, $__first_$i$i$i$i = 0, $cmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = 0;
 $__end_$i = (($this) + 4|0);
 HEAP32[$__end_$i>>2] = 0;
 $__first_$i$i$i$i = (($this) + 8|0);
 HEAP32[$__first_$i$i$i$i>>2] = 0;
 $__allocated_$i$i$i$i$i$i = (($this) + 128|0);
 HEAP8[$__allocated_$i$i$i$i$i$i>>0] = 0;
 $cmp = ($__n|0)==(0);
 if ($cmp) {
  STACKTOP = sp;return;
 }
 __THREW__ = 0;
 invoke_vii(490,($this|0),($__n|0));
 $0 = __THREW__; __THREW__ = 0;
 $1 = $0&1;
 if ($1) {
  $2 = ___cxa_find_matching_catch()|0;
  $3 = tempRet0;
  __ZNSt3__113__vector_baseIPNS_6locale5facetENS_15__sso_allocatorIS3_Lj28EEEED2Ev($this);
  ___resumeException($2|0);
  // unreachable;
 }
 __ZNSt3__16vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lj28EEEE18__construct_at_endEj($this,$__n);
 STACKTOP = sp;return;
}
function __ZNSt3__113__vector_baseIPNS_6locale5facetENS_15__sso_allocatorIS3_Lj28EEEED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $__allocated_$i$i = 0, $__end_$i$i = 0, $__new_last3$i$i = 0, $__second_$i$i$i = 0, $cmp = 0, $cmp$i$i = 0, $cmp1$i$i = 0, $scevgep$i$i = 0, $scevgep5$i$i = 0, $uglygep$i$i = 0, $uglygep4$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$this>>2]|0;
 $cmp = ($0|0)==(0|0);
 if ($cmp) {
  STACKTOP = sp;return;
 }
 $__end_$i$i = (($this) + 4|0);
 $1 = HEAP32[$__end_$i$i>>2]|0;
 $cmp1$i$i = ($1|0)==($0|0);
 if (!($cmp1$i$i)) {
  $__new_last3$i$i = $0;
  $scevgep$i$i = (($1) + -4|0);
  $2 = (0 - ($__new_last3$i$i))|0;
  $uglygep$i$i = (($scevgep$i$i) + ($2)|0);
  $uglygep4$i$i = $uglygep$i$i;
  $3 = $uglygep4$i$i >>> 2;
  $4 = $3 ^ -1;
  $scevgep5$i$i = (($1) + ($4<<2)|0);
  HEAP32[$__end_$i$i>>2] = $scevgep5$i$i;
 }
 $__second_$i$i$i = (($this) + 16|0);
 $cmp$i$i = ($__second_$i$i$i|0)==($0|0);
 if ($cmp$i$i) {
  $__allocated_$i$i = (($this) + 128|0);
  HEAP8[$__allocated_$i$i>>0] = 0;
  STACKTOP = sp;return;
 } else {
  __ZdlPv($0);
  STACKTOP = sp;return;
 }
}
function ___cxx_global_array_dtor($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((9432 + 276|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((9432 + 264|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((9432 + 252|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((9432 + 240|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((9432 + 228|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((9432 + 216|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((9432 + 204|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((9432 + 192|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((9432 + 180|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((9432 + 168|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((9432 + 156|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((9432 + 144|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((9432 + 132|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((9432 + 120|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((9432 + 108|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((9432 + 96|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((9432 + 84|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((9432 + 72|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((9432 + 60|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((9432 + 48|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((9432 + 36|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((9432 + 24|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((9432 + 12|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(9432);
 STACKTOP = sp;return;
}
function ___cxx_global_array_dtor53($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((9760 + 276|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((9760 + 264|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((9760 + 252|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((9760 + 240|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((9760 + 228|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((9760 + 216|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((9760 + 204|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((9760 + 192|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((9760 + 180|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((9760 + 168|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((9760 + 156|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((9760 + 144|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((9760 + 132|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((9760 + 120|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((9760 + 108|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((9760 + 96|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((9760 + 84|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((9760 + 72|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((9760 + 60|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((9760 + 48|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((9760 + 36|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((9760 + 24|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((9760 + 12|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(9760);
 STACKTOP = sp;return;
}
function ___cxx_global_array_dtor56($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((10072 + 276|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((10072 + 264|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((10072 + 252|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((10072 + 240|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((10072 + 228|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((10072 + 216|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((10072 + 204|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((10072 + 192|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((10072 + 180|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((10072 + 168|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((10072 + 156|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((10072 + 144|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((10072 + 132|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((10072 + 120|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((10072 + 108|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((10072 + 96|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((10072 + 84|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((10072 + 72|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((10072 + 60|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((10072 + 48|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((10072 + 36|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((10072 + 24|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((10072 + 12|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(10072);
 STACKTOP = sp;return;
}
function ___cxx_global_array_dtor81($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((10912 + 276|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((10912 + 264|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((10912 + 252|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((10912 + 240|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((10912 + 228|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((10912 + 216|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((10912 + 204|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((10912 + 192|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((10912 + 180|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((10912 + 168|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((10912 + 156|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((10912 + 144|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((10912 + 132|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((10912 + 120|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((10912 + 108|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((10912 + 96|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((10912 + 84|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((10912 + 72|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((10912 + 60|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((10912 + 48|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((10912 + 36|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((10912 + 24|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((10912 + 12|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(10912);
 STACKTOP = sp;return;
}
function ___cxx_global_array_dtor105($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((11424 + 156|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((11424 + 144|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((11424 + 132|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((11424 + 120|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((11424 + 108|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((11424 + 96|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((11424 + 84|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((11424 + 72|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((11424 + 60|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((11424 + 48|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((11424 + 36|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((11424 + 24|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((11424 + 12|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(11424);
 STACKTOP = sp;return;
}
function ___cxx_global_array_dtor120($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((11960 + 156|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((11960 + 144|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((11960 + 132|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((11960 + 120|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((11960 + 108|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((11960 + 96|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((11960 + 84|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((11960 + 72|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((11960 + 60|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((11960 + 48|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((11960 + 36|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((11960 + 24|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((11960 + 12|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(11960);
 STACKTOP = sp;return;
}
function _strtoull_l($s,$p,$base,$loc) {
 $s = $s|0;
 $p = $p|0;
 $base = $base|0;
 $loc = $loc|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_strtoull($s,$p,$base)|0);
 $1 = tempRet0;
 tempRet0 = $1;
 STACKTOP = sp;return ($0|0);
}
function _strtoll_l($s,$p,$base,$loc) {
 $s = $s|0;
 $p = $p|0;
 $base = $base|0;
 $loc = $loc|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_strtoll($s,$p,$base)|0);
 $1 = tempRet0;
 tempRet0 = $1;
 STACKTOP = sp;return ($0|0);
}
function _isdigit_l($c,$l) {
 $c = $c|0;
 $l = $l|0;
 var $0 = 0, $isdigit = 0, $isdigittmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $isdigittmp = (($c) + -48)|0;
 $isdigit = ($isdigittmp>>>0)<(10);
 $0 = $isdigit&1;
 STACKTOP = sp;return ($0|0);
}
function _isxdigit_l($c,$l) {
 $c = $c|0;
 $l = $l|0;
 var $call = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $call = (_isxdigit($c)|0);
 STACKTOP = sp;return ($call|0);
}
function _mbrlen($s,$n,$st) {
 $s = $s|0;
 $n = $n|0;
 $st = $st|0;
 var $call = 0, $cond = 0, $tobool = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $tobool = ($st|0)!=(0|0);
 $cond = $tobool ? $st : 12480;
 $call = (_mbrtowc(0,$s,$n,$cond)|0);
 STACKTOP = sp;return ($call|0);
}
function _mbrtowc($wc,$src,$n,$st) {
 $wc = $wc|0;
 $src = $src|0;
 $n = $n|0;
 $st = $st|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $add = 0, $arrayidx = 0, $c$0 = 0, $c$1 = 0, $c$2 = 0, $call = 0, $cmp = 0, $cmp22 = 0, $cmp53 = 0, $conv = 0, $conv31 = 0, $conv40 = 0, $conv51 = 0;
 var $dec = 0, $dec43 = 0, $incdec$ptr = 0, $incdec$ptr39 = 0, $lnot$ext = 0, $n$addr$0 = 0, $n$addr$1 = 0, $or = 0, $or42 = 0, $retval$0 = 0, $s$0 = 0, $s$1 = 0, $shl = 0, $shr24 = 0, $shr35 = 0, $st$addr$0 = 0, $sub = 0, $sub32 = 0, $sub41 = 0, $sub47 = 0;
 var $sub52 = 0, $tobool = 0, $tobool1 = 0, $tobool10 = 0, $tobool13 = 0, $tobool18 = 0, $tobool29 = 0, $tobool3 = 0, $tobool36 = 0, $tobool45 = 0, $tobool49 = 0, $tobool6 = 0, $wc$addr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $wc$addr = sp;
 HEAP32[$wc$addr>>2] = $wc;
 $tobool = ($st|0)==(0|0);
 $st$addr$0 = $tobool ? 12488 : $st;
 $0 = HEAP32[$st$addr$0>>2]|0;
 $tobool1 = ($src|0)==(0|0);
 L1: do {
  if ($tobool1) {
   $tobool3 = ($0|0)==(0);
   if ($tobool3) {
    $retval$0 = 0;
    STACKTOP = sp;return ($retval$0|0);
   }
  } else {
   $tobool6 = ($wc|0)==(0|0);
   if ($tobool6) {
    HEAP32[$wc$addr>>2] = $wc$addr;
    $2 = $wc$addr;
   } else {
    $2 = $wc;
   }
   $tobool10 = ($n|0)==(0);
   if ($tobool10) {
    $retval$0 = -2;
    STACKTOP = sp;return ($retval$0|0);
   }
   $tobool13 = ($0|0)==(0);
   do {
    if ($tobool13) {
     $1 = HEAP8[$src>>0]|0;
     $conv = $1&255;
     $cmp = ($1<<24>>24)>(-1);
     if ($cmp) {
      HEAP32[$2>>2] = $conv;
      $tobool18 = ($1<<24>>24)!=(0);
      $lnot$ext = $tobool18&1;
      $retval$0 = $lnot$ext;
      STACKTOP = sp;return ($retval$0|0);
     } else {
      $sub = (($conv) + -194)|0;
      $cmp22 = ($sub>>>0)>(50);
      if ($cmp22) {
       break L1;
      }
      $incdec$ptr = (($src) + 1|0);
      $arrayidx = (12272 + ($sub<<2)|0);
      $3 = HEAP32[$arrayidx>>2]|0;
      $dec = (($n) + -1)|0;
      $c$0 = $3;$n$addr$0 = $dec;$s$0 = $incdec$ptr;
      break;
     }
    } else {
     $c$0 = $0;$n$addr$0 = $n;$s$0 = $src;
    }
   } while(0);
   $tobool29 = ($n$addr$0|0)==(0);
   L19: do {
    if ($tobool29) {
     $c$2 = $c$0;
    } else {
     $4 = HEAP8[$s$0>>0]|0;
     $conv31 = $4&255;
     $shr24 = $conv31 >>> 3;
     $sub32 = (($shr24) + -16)|0;
     $shr35 = $c$0 >> 26;
     $add = (($shr24) + ($shr35))|0;
     $or = $sub32 | $add;
     $tobool36 = ($or>>>0)>(7);
     if ($tobool36) {
      break L1;
     } else {
      $5 = $4;$c$1 = $c$0;$n$addr$1 = $n$addr$0;$s$1 = $s$0;
     }
     while(1) {
      $shl = $c$1 << 6;
      $incdec$ptr39 = (($s$1) + 1|0);
      $conv40 = $5&255;
      $sub41 = (($conv40) + -128)|0;
      $or42 = $sub41 | $shl;
      $dec43 = (($n$addr$1) + -1)|0;
      $tobool45 = ($or42|0)<(0);
      if (!($tobool45)) {
       break;
      }
      $tobool49 = ($dec43|0)==(0);
      if ($tobool49) {
       $c$2 = $or42;
       break L19;
      }
      $6 = HEAP8[$incdec$ptr39>>0]|0;
      $conv51 = $6&255;
      $sub52 = (($conv51) + -128)|0;
      $cmp53 = ($sub52>>>0)>(63);
      if ($cmp53) {
       break L1;
      } else {
       $5 = $6;$c$1 = $or42;$n$addr$1 = $dec43;$s$1 = $incdec$ptr39;
      }
     }
     HEAP32[$st$addr$0>>2] = 0;
     HEAP32[$2>>2] = $or42;
     $sub47 = (($n) - ($dec43))|0;
     $retval$0 = $sub47;
     STACKTOP = sp;return ($retval$0|0);
    }
   } while(0);
   HEAP32[$st$addr$0>>2] = $c$2;
   $retval$0 = -2;
   STACKTOP = sp;return ($retval$0|0);
  }
 } while(0);
 HEAP32[$st$addr$0>>2] = 0;
 $call = (___errno_location()|0);
 HEAP32[$call>>2] = 84;
 $retval$0 = -1;
 STACKTOP = sp;return ($retval$0|0);
}
function _mbsinit($st) {
 $st = $st|0;
 var $0 = 0, $1 = 0, $lnot = 0, $lor$ext = 0, $tobool = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $tobool = ($st|0)==(0|0);
 if ($tobool) {
  $1 = 1;
 } else {
  $0 = HEAP32[$st>>2]|0;
  $lnot = ($0|0)==(0);
  $1 = $lnot;
 }
 $lor$ext = $1&1;
 STACKTOP = sp;return ($lor$ext|0);
}
function _mbsnrtowcs($wcs,$src,$n,$wn,$st) {
 $wcs = $wcs|0;
 $src = $src|0;
 $n = $n|0;
 $wn = $wn|0;
 $st = $st|0;
 var $$pr$pre = 0, $$pr67 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $add$ptr = 0, $add$ptr36 = 0, $add15 = 0, $add25 = 0, $call = 0, $call24 = 0, $cmp = 0, $cmp11 = 0, $cmp26 = 0, $cmp3 = 0, $cnt$054 = 0, $cnt$1 = 0;
 var $cnt$241 = 0, $cnt$3 = 0, $dec = 0, $div = 0, $inc = 0, $incdec$ptr = 0, $n$addr$056 = 0, $n$addr$1 = 0, $n$addr$243 = 0, $or$cond = 0, $or$cond34 = 0, $or$cond35 = 0, $or$cond3539 = 0, $or$cond52 = 0, $s = 0, $sub = 0, $sub13 = 0, $sub37 = 0, $tobool = 0, $tobool1 = 0;
 var $tobool150 = 0, $tobool16 = 0, $tobool19 = 0, $tobool1937 = 0, $tobool2 = 0, $tobool21 = 0, $tobool2138 = 0, $tobool251 = 0, $tobool7 = 0, $wbuf = 0, $wcs$arraydecay = 0, $wn$ = 0, $wn$addr$0$div = 0, $wn$addr$053 = 0, $wn$addr$1 = 0, $wn$addr$2 = 0, $wn$addr$340 = 0, $ws$047 = 0, $ws$055 = 0, $ws$1 = 0;
 var $ws$242 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1040|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $wbuf = sp + 8|0;
 $s = sp;
 $0 = HEAP32[$src>>2]|0;
 HEAP32[$s>>2] = $0;
 $tobool = ($wcs|0)!=(0|0);
 $wn$ = $tobool ? $wn : 256;
 $wcs$arraydecay = $tobool ? $wcs : $wbuf;
 $tobool150 = ($0|0)==(0|0);
 $tobool251 = ($wn$|0)==(0);
 $or$cond52 = $tobool150 | $tobool251;
 L1: do {
  if ($or$cond52) {
   $2 = $0;$cnt$1 = 0;$n$addr$1 = $n;$wn$addr$2 = $wn$;$ws$047 = $wcs$arraydecay;
  } else {
   $$pr67 = $0;$cnt$054 = 0;$n$addr$056 = $n;$wn$addr$053 = $wn$;$ws$055 = $wcs$arraydecay;
   while(1) {
    $div = $n$addr$056 >>> 2;
    $cmp = ($div>>>0)>=($wn$addr$053>>>0);
    $cmp3 = ($n$addr$056>>>0)>(131);
    $or$cond34 = $cmp | $cmp3;
    if (!($or$cond34)) {
     $2 = $$pr67;$cnt$1 = $cnt$054;$n$addr$1 = $n$addr$056;$wn$addr$2 = $wn$addr$053;$ws$047 = $ws$055;
     break L1;
    }
    $wn$addr$0$div = $cmp ? $wn$addr$053 : $div;
    $sub = (($n$addr$056) - ($wn$addr$0$div))|0;
    $call = (_mbsrtowcs($ws$055,$s,$wn$addr$0$div,$st)|0);
    $tobool7 = ($call|0)==(-1);
    if ($tobool7) {
     break;
    }
    $cmp11 = ($ws$055|0)==($wbuf|0);
    if ($cmp11) {
     $wn$addr$1 = $wn$addr$053;$ws$1 = $wbuf;
    } else {
     $add$ptr = (($ws$055) + ($call<<2)|0);
     $sub13 = (($wn$addr$053) - ($call))|0;
     $wn$addr$1 = $sub13;$ws$1 = $add$ptr;
    }
    $add15 = (($call) + ($cnt$054))|0;
    $1 = HEAP32[$s>>2]|0;
    $tobool1 = ($1|0)==(0|0);
    $tobool2 = ($wn$addr$1|0)==(0);
    $or$cond = $tobool1 | $tobool2;
    if ($or$cond) {
     $2 = $1;$cnt$1 = $add15;$n$addr$1 = $sub;$wn$addr$2 = $wn$addr$1;$ws$047 = $ws$1;
     break L1;
    } else {
     $$pr67 = $1;$cnt$054 = $add15;$n$addr$056 = $sub;$wn$addr$053 = $wn$addr$1;$ws$055 = $ws$1;
    }
   }
   $$pr$pre = HEAP32[$s>>2]|0;
   $2 = $$pr$pre;$cnt$1 = -1;$n$addr$1 = $sub;$wn$addr$2 = 0;$ws$047 = $ws$055;
  }
 } while(0);
 $tobool16 = ($2|0)==(0|0);
 L11: do {
  if ($tobool16) {
   $cnt$3 = $cnt$1;
  } else {
   $tobool1937 = ($wn$addr$2|0)==(0);
   $tobool2138 = ($n$addr$1|0)==(0);
   $or$cond3539 = $tobool1937 | $tobool2138;
   if ($or$cond3539) {
    $cnt$3 = $cnt$1;
   } else {
    $3 = $2;$cnt$241 = $cnt$1;$n$addr$243 = $n$addr$1;$wn$addr$340 = $wn$addr$2;$ws$242 = $ws$047;
    while(1) {
     $call24 = (_mbrtowc($ws$242,$3,$n$addr$243,$st)|0);
     $add25 = (($call24) + 2)|0;
     $cmp26 = ($add25>>>0)<(3);
     if ($cmp26) {
      break;
     }
     $4 = HEAP32[$s>>2]|0;
     $add$ptr36 = (($4) + ($call24)|0);
     HEAP32[$s>>2] = $add$ptr36;
     $sub37 = (($n$addr$243) - ($call24))|0;
     $incdec$ptr = (($ws$242) + 4|0);
     $dec = (($wn$addr$340) + -1)|0;
     $inc = (($cnt$241) + 1)|0;
     $tobool19 = ($dec|0)==(0);
     $tobool21 = ($n$addr$243|0)==($call24|0);
     $or$cond35 = $tobool19 | $tobool21;
     if ($or$cond35) {
      $cnt$3 = $inc;
      break L11;
     } else {
      $3 = $add$ptr36;$cnt$241 = $inc;$n$addr$243 = $sub37;$wn$addr$340 = $dec;$ws$242 = $incdec$ptr;
     }
    }
    if ((($call24|0) == 0)) {
     HEAP32[$s>>2] = 0;
     $cnt$3 = $cnt$241;
     break;
    } else if ((($call24|0) == -1)) {
     $cnt$3 = -1;
     break;
    } else {
     HEAP32[$st>>2] = 0;
     $cnt$3 = $cnt$241;
     break;
    }
   }
  }
 } while(0);
 if (!($tobool)) {
  STACKTOP = sp;return ($cnt$3|0);
 }
 $5 = HEAP32[$s>>2]|0;
 HEAP32[$src>>2] = $5;
 STACKTOP = sp;return ($cnt$3|0);
}
function _mbsrtowcs($ws,$src,$wn,$st) {
 $ws = $ws|0;
 $src = $src|0;
 $wn = $wn|0;
 $st = $st|0;
 var $$in = 0, $$pre$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $add = 0, $add$ptr = 0, $add$ptr150 = 0, $add$ptr165 = 0, $add$ptr50 = 0, $add$ptr61 = 0, $add131 = 0, $and = 0, $and42 = 0, $and53 = 0, $and77 = 0, $and86 = 0, $arrayidx = 0;
 var $arrayidx124 = 0, $c$2 = 0, $c$4 = 0, $c$5 = 0, $c$6 = 0, $call = 0, $cmp = 0, $cmp107 = 0, $cmp117 = 0, $cmp147 = 0, $cmp162 = 0, $cmp17 = 0, $cmp23 = 0, $cmp47 = 0, $cmp58 = 0, $cmp74 = 0, $cmp78 = 0, $cmp8 = 0, $cmp82 = 0, $cmp8282 = 0;
 var $conv = 0, $conv100 = 0, $conv105 = 0, $conv125 = 0, $conv145 = 0, $conv15 = 0, $conv160 = 0, $conv30 = 0, $conv45 = 0, $conv56 = 0, $conv72 = 0, $conv91 = 0, $conv94 = 0, $conv97 = 0, $dec = 0, $dec113 = 0, $dec175 = 0, $dec66 = 0, $incdec$ptr = 0, $incdec$ptr101 = 0;
 var $incdec$ptr110 = 0, $incdec$ptr112 = 0, $incdec$ptr121 = 0, $incdec$ptr136 = 0, $incdec$ptr138 = 0, $incdec$ptr153 = 0, $incdec$ptr168 = 0, $incdec$ptr174 = 0, $incdec$ptr27 = 0, $incdec$ptr39 = 0, $incdec$ptr41 = 0, $incdec$ptr52 = 0, $incdec$ptr63 = 0, $incdec$ptr90 = 0, $incdec$ptr92 = 0, $incdec$ptr93 = 0, $incdec$ptr95 = 0, $incdec$ptr96 = 0, $incdec$ptr98 = 0, $incdec$ptr99 = 0;
 var $lnot = 0, $lnot78 = 0, $lnot88 = 0, $or = 0, $or$cond = 0, $or132 = 0, $or141 = 0, $or156 = 0, $or171 = 0, $or35 = 0, $or76 = 0, $or85 = 0, $rem = 0, $rem77 = 0, $retval$0 = 0, $s$0 = 0, $s$1$lcssa = 0, $s$10 = 0, $s$10107 = 0, $s$10108 = 0;
 var $s$180 = 0, $s$2 = 0, $s$3 = 0, $s$4 = 0, $s$5$lcssa = 0, $s$5$ph = 0, $s$593 = 0, $s$685 = 0, $s$7 = 0, $s$8 = 0, $s$9 = 0, $shl = 0, $shl152 = 0, $shl167 = 0, $shr12674 = 0, $shr130 = 0, $shr34 = 0, $shr73 = 0, $sub = 0, $sub102 = 0;
 var $sub106 = 0, $sub11 = 0, $sub116 = 0, $sub1175 = 0, $sub127 = 0, $sub13 = 0, $sub140 = 0, $sub146 = 0, $sub16 = 0, $sub161 = 0, $sub185 = 0, $sub22 = 0, $sub31 = 0, $sub46 = 0, $sub57 = 0, $sub73 = 0, $sub84 = 0, $tobool = 0, $tobool1 = 0, $tobool134 = 0;
 var $tobool143 = 0, $tobool158 = 0, $tobool178 = 0, $tobool180 = 0, $tobool182 = 0, $tobool187 = 0, $tobool2 = 0, $tobool37 = 0, $tobool4 = 0, $tobool43 = 0, $tobool54 = 0, $tobool69 = 0, $tobool6990 = 0, $wn$addr$0 = 0, $wn$addr$1$lcssa = 0, $wn$addr$179 = 0, $wn$addr$2 = 0, $wn$addr$3 = 0, $wn$addr$4$ph = 0, $wn$addr$491 = 0;
 var $wn$addr$583 = 0, $wn$addr$6 = 0, $wn$addr$7 = 0, $wn$addr$8 = 0, $wn$addr$8104 = 0, $ws$addr$0$ph = 0, $ws$addr$092 = 0, $ws$addr$184 = 0, $ws$addr$2 = 0, $ws$addr$3 = 0, $ws$addr$4 = 0, $ws$addr$4105 = 0, $ws$addr$4106 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$src>>2]|0;
 $tobool = ($st|0)==(0|0);
 if ($tobool) {
  label = 5;
 } else {
  $1 = HEAP32[$st>>2]|0;
  $tobool1 = ($1|0)==(0);
  if ($tobool1) {
   label = 5;
  } else {
   $tobool2 = ($ws|0)==(0|0);
   if ($tobool2) {
    $c$2 = $1;$s$3 = $0;$wn$addr$3 = $wn;
    label = 16;
   } else {
    HEAP32[$st>>2] = 0;
    $c$4 = $1;$s$8 = $0;$wn$addr$7 = $wn;$ws$addr$3 = $ws;
    label = 37;
   }
  }
 }
 if ((label|0) == 5) {
  $tobool4 = ($ws|0)==(0|0);
  if ($tobool4) {
   $s$0 = $0;$wn$addr$0 = $wn;
   label = 7;
  } else {
   $s$5$ph = $0;$wn$addr$4$ph = $wn;$ws$addr$0$ph = $ws;
   label = 6;
  }
 }
 L7: while(1) {
  if ((label|0) == 6) {
   label = 0;
   $tobool6990 = ($wn$addr$4$ph|0)==(0);
   if ($tobool6990) {
    $s$5$lcssa = $s$5$ph;
    label = 26;
    break;
   } else {
    $s$593 = $s$5$ph;$wn$addr$491 = $wn$addr$4$ph;$ws$addr$092 = $ws$addr$0$ph;
   }
   while(1) {
    $12 = HEAP8[$s$593>>0]|0;
    $conv72 = $12&255;
    $sub73 = (($conv72) + -1)|0;
    $cmp74 = ($sub73>>>0)<(127);
    do {
     if ($cmp74) {
      $13 = $s$593;
      $rem77 = $13 & 3;
      $cmp78 = ($rem77|0)==(0);
      $cmp8282 = ($wn$addr$491>>>0)>(4);
      $or$cond = $cmp78 & $cmp8282;
      if ($or$cond) {
       $s$685 = $s$593;$wn$addr$583 = $wn$addr$491;$ws$addr$184 = $ws$addr$092;
       while(1) {
        $14 = HEAP32[$s$685>>2]|0;
        $sub84 = (($14) + -16843009)|0;
        $or85 = $sub84 | $14;
        $and86 = $or85 & -2139062144;
        $lnot88 = ($and86|0)==(0);
        if (!($lnot88)) {
         label = 31;
         break;
        }
        $incdec$ptr90 = (($s$685) + 1|0);
        $conv91 = $14 & 255;
        $incdec$ptr92 = (($ws$addr$184) + 4|0);
        HEAP32[$ws$addr$184>>2] = $conv91;
        $incdec$ptr93 = (($s$685) + 2|0);
        $15 = HEAP8[$incdec$ptr90>>0]|0;
        $conv94 = $15&255;
        $incdec$ptr95 = (($ws$addr$184) + 8|0);
        HEAP32[$incdec$ptr92>>2] = $conv94;
        $incdec$ptr96 = (($s$685) + 3|0);
        $16 = HEAP8[$incdec$ptr93>>0]|0;
        $conv97 = $16&255;
        $incdec$ptr98 = (($ws$addr$184) + 12|0);
        HEAP32[$incdec$ptr95>>2] = $conv97;
        $incdec$ptr99 = (($s$685) + 4|0);
        $17 = HEAP8[$incdec$ptr96>>0]|0;
        $conv100 = $17&255;
        $incdec$ptr101 = (($ws$addr$184) + 16|0);
        HEAP32[$incdec$ptr98>>2] = $conv100;
        $sub102 = (($wn$addr$583) + -4)|0;
        $cmp82 = ($sub102>>>0)>(4);
        if ($cmp82) {
         $s$685 = $incdec$ptr99;$wn$addr$583 = $sub102;$ws$addr$184 = $incdec$ptr101;
        } else {
         label = 32;
         break;
        }
       }
       if ((label|0) == 31) {
        label = 0;
        $18 = $14&255;
        $19 = $18;$s$7 = $s$685;$wn$addr$6 = $wn$addr$583;$ws$addr$2 = $ws$addr$184;
        break;
       }
       else if ((label|0) == 32) {
        label = 0;
        $$pre$pre = HEAP8[$incdec$ptr99>>0]|0;
        $19 = $$pre$pre;$s$7 = $incdec$ptr99;$wn$addr$6 = $sub102;$ws$addr$2 = $incdec$ptr101;
        break;
       }
      } else {
       $19 = $12;$s$7 = $s$593;$wn$addr$6 = $wn$addr$491;$ws$addr$2 = $ws$addr$092;
      }
     } else {
      $19 = $12;$s$7 = $s$593;$wn$addr$6 = $wn$addr$491;$ws$addr$2 = $ws$addr$092;
     }
    } while(0);
    $conv105 = $19&255;
    $sub106 = (($conv105) + -1)|0;
    $cmp107 = ($sub106>>>0)<(127);
    if (!($cmp107)) {
     break;
    }
    $incdec$ptr110 = (($s$7) + 1|0);
    $incdec$ptr112 = (($ws$addr$2) + 4|0);
    HEAP32[$ws$addr$2>>2] = $conv105;
    $dec113 = (($wn$addr$6) + -1)|0;
    $tobool69 = ($dec113|0)==(0);
    if ($tobool69) {
     $s$5$lcssa = $incdec$ptr110;
     label = 26;
     break L7;
    } else {
     $s$593 = $incdec$ptr110;$wn$addr$491 = $dec113;$ws$addr$092 = $incdec$ptr112;
    }
   }
   $sub116 = (($conv105) + -194)|0;
   $cmp117 = ($sub116>>>0)>(50);
   if ($cmp117) {
    $s$10108 = $s$7;$wn$addr$8104 = $wn$addr$6;$ws$addr$4106 = $ws$addr$2;
    label = 48;
    break;
   }
   $incdec$ptr121 = (($s$7) + 1|0);
   $arrayidx124 = (12272 + ($sub116<<2)|0);
   $20 = HEAP32[$arrayidx124>>2]|0;
   $c$4 = $20;$s$8 = $incdec$ptr121;$wn$addr$7 = $wn$addr$6;$ws$addr$3 = $ws$addr$2;
   label = 37;
   continue;
  }
  else if ((label|0) == 7) {
   label = 0;
   $2 = HEAP8[$s$0>>0]|0;
   $conv = $2&255;
   $sub = (($conv) + -1)|0;
   $cmp = ($sub>>>0)<(127);
   if ($cmp) {
    $3 = $s$0;
    $rem = $3 & 3;
    $cmp8 = ($rem|0)==(0);
    if ($cmp8) {
     $4 = HEAP32[$s$0>>2]|0;
     $sub1175 = (($4) + -16843009)|0;
     $or76 = $sub1175 | $4;
     $and77 = $or76 & -2139062144;
     $lnot78 = ($and77|0)==(0);
     if ($lnot78) {
      $s$180 = $s$0;$wn$addr$179 = $wn$addr$0;
      while(1) {
       $add$ptr = (($s$180) + 4|0);
       $sub13 = (($wn$addr$179) + -4)|0;
       $5 = HEAP32[$add$ptr>>2]|0;
       $sub11 = (($5) + -16843009)|0;
       $or = $sub11 | $5;
       $and = $or & -2139062144;
       $lnot = ($and|0)==(0);
       if ($lnot) {
        $s$180 = $add$ptr;$wn$addr$179 = $sub13;
       } else {
        $$in = $5;$s$1$lcssa = $add$ptr;$wn$addr$1$lcssa = $sub13;
        break;
       }
      }
     } else {
      $$in = $4;$s$1$lcssa = $s$0;$wn$addr$1$lcssa = $wn$addr$0;
     }
     $6 = $$in&255;
     $7 = $6;$s$2 = $s$1$lcssa;$wn$addr$2 = $wn$addr$1$lcssa;
    } else {
     $7 = $2;$s$2 = $s$0;$wn$addr$2 = $wn$addr$0;
    }
   } else {
    $7 = $2;$s$2 = $s$0;$wn$addr$2 = $wn$addr$0;
   }
   $conv15 = $7&255;
   $sub16 = (($conv15) + -1)|0;
   $cmp17 = ($sub16>>>0)<(127);
   if ($cmp17) {
    $incdec$ptr = (($s$2) + 1|0);
    $dec = (($wn$addr$2) + -1)|0;
    $s$0 = $incdec$ptr;$wn$addr$0 = $dec;
    label = 7;
    continue;
   }
   $sub22 = (($conv15) + -194)|0;
   $cmp23 = ($sub22>>>0)>(50);
   if ($cmp23) {
    $s$10108 = $s$2;$wn$addr$8104 = $wn$addr$2;$ws$addr$4106 = $ws;
    label = 48;
    break;
   }
   $incdec$ptr27 = (($s$2) + 1|0);
   $arrayidx = (12272 + ($sub22<<2)|0);
   $8 = HEAP32[$arrayidx>>2]|0;
   $c$2 = $8;$s$3 = $incdec$ptr27;$wn$addr$3 = $wn$addr$2;
   label = 16;
   continue;
  }
  else if ((label|0) == 16) {
   label = 0;
   $9 = HEAP8[$s$3>>0]|0;
   $conv30 = $9&255;
   $shr73 = $conv30 >>> 3;
   $sub31 = (($shr73) + -16)|0;
   $shr34 = $c$2 >> 26;
   $add = (($shr73) + ($shr34))|0;
   $or35 = $sub31 | $add;
   $tobool37 = ($or35>>>0)>(7);
   if ($tobool37) {
    label = 17;
    break;
   }
   $incdec$ptr41 = (($s$3) + 1|0);
   $and42 = $c$2 & 33554432;
   $tobool43 = ($and42|0)==(0);
   if ($tobool43) {
    $s$4 = $incdec$ptr41;
   } else {
    $10 = HEAP8[$incdec$ptr41>>0]|0;
    $conv45 = $10&255;
    $sub46 = (($conv45) + -128)|0;
    $cmp47 = ($sub46>>>0)>(63);
    if ($cmp47) {
     label = 20;
     break;
    }
    $incdec$ptr52 = (($s$3) + 2|0);
    $and53 = $c$2 & 524288;
    $tobool54 = ($and53|0)==(0);
    if ($tobool54) {
     $s$4 = $incdec$ptr52;
    } else {
     $11 = HEAP8[$incdec$ptr52>>0]|0;
     $conv56 = $11&255;
     $sub57 = (($conv56) + -128)|0;
     $cmp58 = ($sub57>>>0)>(63);
     if ($cmp58) {
      label = 23;
      break;
     }
     $incdec$ptr63 = (($s$3) + 3|0);
     $s$4 = $incdec$ptr63;
    }
   }
   $dec66 = (($wn$addr$3) + -1)|0;
   $s$0 = $s$4;$wn$addr$0 = $dec66;
   label = 7;
   continue;
  }
  else if ((label|0) == 37) {
   label = 0;
   $21 = HEAP8[$s$8>>0]|0;
   $conv125 = $21&255;
   $shr12674 = $conv125 >>> 3;
   $sub127 = (($shr12674) + -16)|0;
   $shr130 = $c$4 >> 26;
   $add131 = (($shr12674) + ($shr130))|0;
   $or132 = $sub127 | $add131;
   $tobool134 = ($or132>>>0)>(7);
   if ($tobool134) {
    label = 38;
    break;
   }
   $shl = $c$4 << 6;
   $incdec$ptr138 = (($s$8) + 1|0);
   $sub140 = (($conv125) + -128)|0;
   $or141 = $sub140 | $shl;
   $tobool143 = ($or141|0)<(0);
   if ($tobool143) {
    $22 = HEAP8[$incdec$ptr138>>0]|0;
    $conv145 = $22&255;
    $sub146 = (($conv145) + -128)|0;
    $cmp147 = ($sub146>>>0)>(63);
    if ($cmp147) {
     label = 41;
     break;
    }
    $shl152 = $or141 << 6;
    $incdec$ptr153 = (($s$8) + 2|0);
    $or156 = $sub146 | $shl152;
    $tobool158 = ($or156|0)<(0);
    if ($tobool158) {
     $23 = HEAP8[$incdec$ptr153>>0]|0;
     $conv160 = $23&255;
     $sub161 = (($conv160) + -128)|0;
     $cmp162 = ($sub161>>>0)>(63);
     if ($cmp162) {
      label = 44;
      break;
     }
     $shl167 = $or156 << 6;
     $incdec$ptr168 = (($s$8) + 3|0);
     $or171 = $sub161 | $shl167;
     $c$5 = $or171;$s$9 = $incdec$ptr168;
    } else {
     $c$5 = $or156;$s$9 = $incdec$ptr153;
    }
   } else {
    $c$5 = $or141;$s$9 = $incdec$ptr138;
   }
   $incdec$ptr174 = (($ws$addr$3) + 4|0);
   HEAP32[$ws$addr$3>>2] = $c$5;
   $dec175 = (($wn$addr$7) + -1)|0;
   $s$5$ph = $s$9;$wn$addr$4$ph = $dec175;$ws$addr$0$ph = $incdec$ptr174;
   label = 6;
   continue;
  }
 }
 if ((label|0) == 17) {
  $incdec$ptr39 = (($s$3) + -1|0);
  $c$6 = $c$2;$s$10 = $incdec$ptr39;$wn$addr$8 = $wn$addr$3;$ws$addr$4 = $ws;
  label = 47;
 }
 else if ((label|0) == 20) {
  $add$ptr50 = (($s$3) + -1|0);
  $c$6 = $c$2;$s$10 = $add$ptr50;$wn$addr$8 = $wn$addr$3;$ws$addr$4 = $ws;
  label = 47;
 }
 else if ((label|0) == 23) {
  $add$ptr61 = (($s$3) + -1|0);
  $c$6 = $c$2;$s$10 = $add$ptr61;$wn$addr$8 = $wn$addr$3;$ws$addr$4 = $ws;
  label = 47;
 }
 else if ((label|0) == 26) {
  HEAP32[$src>>2] = $s$5$lcssa;
  $retval$0 = $wn;
  STACKTOP = sp;return ($retval$0|0);
 }
 else if ((label|0) == 38) {
  $incdec$ptr136 = (($s$8) + -1|0);
  $c$6 = $c$4;$s$10 = $incdec$ptr136;$wn$addr$8 = $wn$addr$7;$ws$addr$4 = $ws$addr$3;
  label = 47;
 }
 else if ((label|0) == 41) {
  $add$ptr150 = (($s$8) + -1|0);
  $c$6 = $or141;$s$10 = $add$ptr150;$wn$addr$8 = $wn$addr$7;$ws$addr$4 = $ws$addr$3;
  label = 47;
 }
 else if ((label|0) == 44) {
  $add$ptr165 = (($s$8) + -1|0);
  $c$6 = $or156;$s$10 = $add$ptr165;$wn$addr$8 = $wn$addr$7;$ws$addr$4 = $ws$addr$3;
  label = 47;
 }
 if ((label|0) == 47) {
  $tobool178 = ($c$6|0)==(0);
  if ($tobool178) {
   $s$10108 = $s$10;$wn$addr$8104 = $wn$addr$8;$ws$addr$4106 = $ws$addr$4;
   label = 48;
  } else {
   $s$10107 = $s$10;$ws$addr$4105 = $ws$addr$4;
  }
 }
 if ((label|0) == 48) {
  $24 = HEAP8[$s$10108>>0]|0;
  $tobool180 = ($24<<24>>24)==(0);
  if ($tobool180) {
   $tobool182 = ($ws$addr$4106|0)==(0|0);
   if (!($tobool182)) {
    HEAP32[$ws$addr$4106>>2] = 0;
    HEAP32[$src>>2] = 0;
   }
   $sub185 = (($wn) - ($wn$addr$8104))|0;
   $retval$0 = $sub185;
   STACKTOP = sp;return ($retval$0|0);
  } else {
   $s$10107 = $s$10108;$ws$addr$4105 = $ws$addr$4106;
  }
 }
 $call = (___errno_location()|0);
 HEAP32[$call>>2] = 84;
 $tobool187 = ($ws$addr$4105|0)==(0|0);
 if ($tobool187) {
  $retval$0 = -1;
  STACKTOP = sp;return ($retval$0|0);
 }
 HEAP32[$src>>2] = $s$10107;
 $retval$0 = -1;
 STACKTOP = sp;return ($retval$0|0);
}
function _mbtowc($wc,$src,$n) {
 $wc = $wc|0;
 $src = $src|0;
 $n = $n|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $add = 0, $and22 = 0, $arrayidx = 0, $call = 0, $cmp = 0, $cmp14 = 0, $cmp20 = 0, $cmp46 = 0, $cmp61 = 0, $conv = 0, $conv26 = 0, $conv44 = 0, $conv59 = 0;
 var $incdec$ptr = 0, $incdec$ptr36 = 0, $incdec$ptr51 = 0, $lnot$ext = 0, $mul = 0, $or = 0, $or39 = 0, $or54 = 0, $or69 = 0, $retval$0 = 0, $shl35 = 0, $shl50 = 0, $shl65 = 0, $shr21 = 0, $shr30 = 0, $sub = 0, $sub22 = 0, $sub27 = 0, $sub38 = 0, $sub45 = 0;
 var $sub60 = 0, $tobool = 0, $tobool1 = 0, $tobool10 = 0, $tobool23 = 0, $tobool32 = 0, $tobool4 = 0, $tobool41 = 0, $tobool56 = 0, $wc$addr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $wc$addr = sp;
 HEAP32[$wc$addr>>2] = $wc;
 $tobool = ($src|0)==(0|0);
 if ($tobool) {
  $retval$0 = 0;
  STACKTOP = sp;return ($retval$0|0);
 }
 $tobool1 = ($n|0)==(0);
 do {
  if (!($tobool1)) {
   $tobool4 = ($wc|0)==(0|0);
   if ($tobool4) {
    HEAP32[$wc$addr>>2] = $wc$addr;
    $1 = $wc$addr;
   } else {
    $1 = $wc;
   }
   $0 = HEAP8[$src>>0]|0;
   $conv = $0&255;
   $cmp = ($0<<24>>24)>(-1);
   if ($cmp) {
    HEAP32[$1>>2] = $conv;
    $tobool10 = ($0<<24>>24)!=(0);
    $lnot$ext = $tobool10&1;
    $retval$0 = $lnot$ext;
    STACKTOP = sp;return ($retval$0|0);
   }
   $sub = (($conv) + -194)|0;
   $cmp14 = ($sub>>>0)>(50);
   if (!($cmp14)) {
    $incdec$ptr = (($src) + 1|0);
    $arrayidx = (12272 + ($sub<<2)|0);
    $2 = HEAP32[$arrayidx>>2]|0;
    $cmp20 = ($n>>>0)<(4);
    if ($cmp20) {
     $mul = ($n*6)|0;
     $sub22 = (($mul) + -6)|0;
     $3 = -2147483648 >>> $sub22;
     $and22 = $2 & $3;
     $tobool23 = ($and22|0)==(0);
     if (!($tobool23)) {
      break;
     }
    }
    $4 = HEAP8[$incdec$ptr>>0]|0;
    $conv26 = $4&255;
    $shr21 = $conv26 >>> 3;
    $sub27 = (($shr21) + -16)|0;
    $shr30 = $2 >> 26;
    $add = (($shr21) + ($shr30))|0;
    $or = $sub27 | $add;
    $tobool32 = ($or>>>0)>(7);
    if (!($tobool32)) {
     $shl35 = $2 << 6;
     $sub38 = (($conv26) + -128)|0;
     $or39 = $sub38 | $shl35;
     $tobool41 = ($or39|0)<(0);
     if (!($tobool41)) {
      HEAP32[$1>>2] = $or39;
      $retval$0 = 2;
      STACKTOP = sp;return ($retval$0|0);
     }
     $incdec$ptr36 = (($src) + 2|0);
     $5 = HEAP8[$incdec$ptr36>>0]|0;
     $conv44 = $5&255;
     $sub45 = (($conv44) + -128)|0;
     $cmp46 = ($sub45>>>0)>(63);
     if (!($cmp46)) {
      $shl50 = $or39 << 6;
      $or54 = $sub45 | $shl50;
      $tobool56 = ($or54|0)<(0);
      if (!($tobool56)) {
       HEAP32[$1>>2] = $or54;
       $retval$0 = 3;
       STACKTOP = sp;return ($retval$0|0);
      }
      $incdec$ptr51 = (($src) + 3|0);
      $6 = HEAP8[$incdec$ptr51>>0]|0;
      $conv59 = $6&255;
      $sub60 = (($conv59) + -128)|0;
      $cmp61 = ($sub60>>>0)>(63);
      if (!($cmp61)) {
       $shl65 = $or54 << 6;
       $or69 = $sub60 | $shl65;
       HEAP32[$1>>2] = $or69;
       $retval$0 = 4;
       STACKTOP = sp;return ($retval$0|0);
      }
     }
    }
   }
  }
 } while(0);
 $call = (___errno_location()|0);
 HEAP32[$call>>2] = 84;
 $retval$0 = -1;
 STACKTOP = sp;return ($retval$0|0);
}
function _wcsnrtombs($dst,$wcs,$wn,$n,$st) {
 $dst = $dst|0;
 $wcs = $wcs|0;
 $wn = $wn|0;
 $n = $n|0;
 $st = $st|0;
 var $$pr$pre = 0, $$pr65 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $add$ptr = 0, $add$ptr33 = 0, $add15 = 0, $add25 = 0, $buf = 0, $call = 0, $call24 = 0, $cmp = 0, $cmp11 = 0, $cmp26 = 0, $cmp3 = 0;
 var $cnt$052 = 0, $cnt$1 = 0, $cnt$239 = 0, $cnt$3 = 0, $dec = 0, $dst$arraydecay = 0, $inc = 0, $incdec$ptr = 0, $n$ = 0, $n$addr$0$wn$addr$0 = 0, $n$addr$051 = 0, $n$addr$1 = 0, $n$addr$2 = 0, $n$addr$338 = 0, $or$cond = 0, $or$cond32 = 0, $or$cond33 = 0, $or$cond3337 = 0, $or$cond50 = 0, $s$045 = 0;
 var $s$053 = 0, $s$1 = 0, $s$240 = 0, $sub = 0, $sub13 = 0, $sub34 = 0, $tobool = 0, $tobool1 = 0, $tobool148 = 0, $tobool16 = 0, $tobool19 = 0, $tobool1935 = 0, $tobool2 = 0, $tobool21 = 0, $tobool2136 = 0, $tobool249 = 0, $tobool28 = 0, $tobool7 = 0, $wn$addr$054 = 0, $wn$addr$1 = 0;
 var $wn$addr$241 = 0, $ws = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 272|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $buf = sp + 8|0;
 $ws = sp;
 $0 = HEAP32[$wcs>>2]|0;
 HEAP32[$ws>>2] = $0;
 $tobool = ($dst|0)!=(0|0);
 $n$ = $tobool ? $n : 256;
 $dst$arraydecay = $tobool ? $dst : $buf;
 $tobool148 = ($0|0)==(0|0);
 $tobool249 = ($n$|0)==(0);
 $or$cond50 = $tobool148 | $tobool249;
 L1: do {
  if ($or$cond50) {
   $2 = $0;$cnt$1 = 0;$n$addr$2 = $n$;$s$045 = $dst$arraydecay;$wn$addr$1 = $wn;
  } else {
   $$pr65 = $0;$cnt$052 = 0;$n$addr$051 = $n$;$s$053 = $dst$arraydecay;$wn$addr$054 = $wn;
   while(1) {
    $cmp = ($wn$addr$054>>>0)>=($n$addr$051>>>0);
    $cmp3 = ($wn$addr$054>>>0)>(32);
    $or$cond32 = $cmp | $cmp3;
    if (!($or$cond32)) {
     $2 = $$pr65;$cnt$1 = $cnt$052;$n$addr$2 = $n$addr$051;$s$045 = $s$053;$wn$addr$1 = $wn$addr$054;
     break L1;
    }
    $n$addr$0$wn$addr$0 = $cmp ? $n$addr$051 : $wn$addr$054;
    $sub = (($wn$addr$054) - ($n$addr$0$wn$addr$0))|0;
    $call = (_wcsrtombs($s$053,$ws,$n$addr$0$wn$addr$0,0)|0);
    $tobool7 = ($call|0)==(-1);
    if ($tobool7) {
     break;
    }
    $cmp11 = ($s$053|0)==($buf|0);
    if ($cmp11) {
     $n$addr$1 = $n$addr$051;$s$1 = $buf;
    } else {
     $add$ptr = (($s$053) + ($call)|0);
     $sub13 = (($n$addr$051) - ($call))|0;
     $n$addr$1 = $sub13;$s$1 = $add$ptr;
    }
    $add15 = (($call) + ($cnt$052))|0;
    $1 = HEAP32[$ws>>2]|0;
    $tobool1 = ($1|0)==(0|0);
    $tobool2 = ($n$addr$1|0)==(0);
    $or$cond = $tobool1 | $tobool2;
    if ($or$cond) {
     $2 = $1;$cnt$1 = $add15;$n$addr$2 = $n$addr$1;$s$045 = $s$1;$wn$addr$1 = $sub;
     break L1;
    } else {
     $$pr65 = $1;$cnt$052 = $add15;$n$addr$051 = $n$addr$1;$s$053 = $s$1;$wn$addr$054 = $sub;
    }
   }
   $$pr$pre = HEAP32[$ws>>2]|0;
   $2 = $$pr$pre;$cnt$1 = -1;$n$addr$2 = 0;$s$045 = $s$053;$wn$addr$1 = $sub;
  }
 } while(0);
 $tobool16 = ($2|0)==(0|0);
 L11: do {
  if ($tobool16) {
   $cnt$3 = $cnt$1;
  } else {
   $tobool1935 = ($n$addr$2|0)==(0);
   $tobool2136 = ($wn$addr$1|0)==(0);
   $or$cond3337 = $tobool1935 | $tobool2136;
   if ($or$cond3337) {
    $cnt$3 = $cnt$1;
   } else {
    $4 = $2;$cnt$239 = $cnt$1;$n$addr$338 = $n$addr$2;$s$240 = $s$045;$wn$addr$241 = $wn$addr$1;
    while(1) {
     $3 = HEAP32[$4>>2]|0;
     $call24 = (_wcrtomb($s$240,$3,0)|0);
     $add25 = (($call24) + 1)|0;
     $cmp26 = ($add25>>>0)<(2);
     if ($cmp26) {
      break;
     }
     $5 = HEAP32[$ws>>2]|0;
     $incdec$ptr = (($5) + 4|0);
     HEAP32[$ws>>2] = $incdec$ptr;
     $dec = (($wn$addr$241) + -1)|0;
     $add$ptr33 = (($s$240) + ($call24)|0);
     $sub34 = (($n$addr$338) - ($call24))|0;
     $inc = (($cnt$239) + 1)|0;
     $tobool19 = ($n$addr$338|0)==($call24|0);
     $tobool21 = ($dec|0)==(0);
     $or$cond33 = $tobool19 | $tobool21;
     if ($or$cond33) {
      $cnt$3 = $inc;
      break L11;
     } else {
      $4 = $incdec$ptr;$cnt$239 = $inc;$n$addr$338 = $sub34;$s$240 = $add$ptr33;$wn$addr$241 = $dec;
     }
    }
    $tobool28 = ($call24|0)==(0);
    if ($tobool28) {
     HEAP32[$ws>>2] = 0;
     $cnt$3 = $cnt$239;
    } else {
     $cnt$3 = -1;
    }
   }
  }
 } while(0);
 if (!($tobool)) {
  STACKTOP = sp;return ($cnt$3|0);
 }
 $6 = HEAP32[$ws>>2]|0;
 HEAP32[$wcs>>2] = $6;
 STACKTOP = sp;return ($cnt$3|0);
}
function _wcsrtombs($s,$ws,$n,$st) {
 $s = $s|0;
 $ws = $ws|0;
 $n = $n|0;
 $st = $st|0;
 var $$pre = 0, $$pre79 = 0, $$pre80 = 0, $$pre81 = 0, $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $add$ptr = 0, $add$ptr48 = 0, $buf = 0, $call = 0, $call$pn = 0;
 var $call15 = 0, $call37 = 0, $cmp = 0, $cmp29 = 0, $cmp42 = 0, $cmp8 = 0, $cmp864 = 0, $cmp9 = 0, $conv = 0, $conv51 = 0, $dec = 0, $dec53 = 0, $incdec$ptr = 0, $incdec$ptr22 = 0, $incdec$ptr24 = 0, $incdec$ptr52 = 0, $incdec$ptr55 = 0, $n$addr$047 = 0, $n$addr$1 = 0, $n$addr$2$lcssa = 0;
 var $n$addr$265 = 0, $n$addr$3 = 0, $n$addr$456 = 0, $n$addr$5 = 0, $retval$0 = 0, $s$addr$0$lcssa = 0, $s$addr$066 = 0, $s$addr$1 = 0, $s$addr$257 = 0, $s$addr$3 = 0, $sub = 0, $sub13 = 0, $sub20 = 0, $sub28 = 0, $sub34 = 0, $sub45 = 0, $sub49 = 0, $tobool = 0, $tobool1 = 0, $tobool11 = 0;
 var $tobool146 = 0, $tobool17 = 0, $tobool26 = 0, $tobool2655 = 0, $tobool3 = 0, $tobool32 = 0, $tobool39 = 0, $ws2$048 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $buf = sp;
 $tobool = ($s|0)==(0|0);
 if ($tobool) {
  $0 = HEAP32[$ws>>2]|0;
  $1 = HEAP32[$0>>2]|0;
  $tobool146 = ($1|0)==(0);
  if ($tobool146) {
   $retval$0 = 0;
   STACKTOP = sp;return ($retval$0|0);
  } else {
   $2 = $1;$n$addr$047 = 0;$ws2$048 = $0;
  }
  while(1) {
   $cmp = ($2>>>0)>(127);
   if ($cmp) {
    $call = (_wcrtomb($buf,$2,0)|0);
    $tobool3 = ($call|0)==(-1);
    if ($tobool3) {
     $retval$0 = -1;
     label = 26;
     break;
    } else {
     $call$pn = $call;
    }
   } else {
    $call$pn = 1;
   }
   $n$addr$1 = (($call$pn) + ($n$addr$047))|0;
   $incdec$ptr = (($ws2$048) + 4|0);
   $3 = HEAP32[$incdec$ptr>>2]|0;
   $tobool1 = ($3|0)==(0);
   if ($tobool1) {
    $retval$0 = $n$addr$1;
    label = 26;
    break;
   } else {
    $2 = $3;$n$addr$047 = $n$addr$1;$ws2$048 = $incdec$ptr;
   }
  }
  if ((label|0) == 26) {
   STACKTOP = sp;return ($retval$0|0);
  }
 }
 $cmp864 = ($n>>>0)>(3);
 L14: do {
  if ($cmp864) {
   $$pre80 = HEAP32[$ws>>2]|0;
   $5 = $$pre80;$n$addr$265 = $n;$s$addr$066 = $s;
   while(1) {
    $4 = HEAP32[$5>>2]|0;
    $sub = (($4) + -1)|0;
    $cmp9 = ($sub>>>0)>(126);
    if ($cmp9) {
     $tobool11 = ($4|0)==(0);
     if ($tobool11) {
      break;
     }
     $call15 = (_wcrtomb($s$addr$066,$4,0)|0);
     $tobool17 = ($call15|0)==(-1);
     if ($tobool17) {
      $retval$0 = -1;
      label = 26;
      break;
     }
     $add$ptr = (($s$addr$066) + ($call15)|0);
     $sub20 = (($n$addr$265) - ($call15))|0;
     $6 = $5;$n$addr$3 = $sub20;$s$addr$1 = $add$ptr;
    } else {
     $conv = $4&255;
     $incdec$ptr22 = (($s$addr$066) + 1|0);
     HEAP8[$s$addr$066>>0] = $conv;
     $dec = (($n$addr$265) + -1)|0;
     $$pre81 = HEAP32[$ws>>2]|0;
     $6 = $$pre81;$n$addr$3 = $dec;$s$addr$1 = $incdec$ptr22;
    }
    $incdec$ptr24 = (($6) + 4|0);
    HEAP32[$ws>>2] = $incdec$ptr24;
    $cmp8 = ($n$addr$3>>>0)>(3);
    if ($cmp8) {
     $5 = $incdec$ptr24;$n$addr$265 = $n$addr$3;$s$addr$066 = $s$addr$1;
    } else {
     $n$addr$2$lcssa = $n$addr$3;$s$addr$0$lcssa = $s$addr$1;
     break L14;
    }
   }
   if ((label|0) == 26) {
    STACKTOP = sp;return ($retval$0|0);
   }
   HEAP8[$s$addr$066>>0] = 0;
   HEAP32[$ws>>2] = 0;
   $sub13 = (($n) - ($n$addr$265))|0;
   $retval$0 = $sub13;
   STACKTOP = sp;return ($retval$0|0);
  } else {
   $n$addr$2$lcssa = $n;$s$addr$0$lcssa = $s;
  }
 } while(0);
 $tobool2655 = ($n$addr$2$lcssa|0)==(0);
 if ($tobool2655) {
  $retval$0 = $n;
  STACKTOP = sp;return ($retval$0|0);
 }
 $$pre = HEAP32[$ws>>2]|0;
 $8 = $$pre;$n$addr$456 = $n$addr$2$lcssa;$s$addr$257 = $s$addr$0$lcssa;
 while(1) {
  $7 = HEAP32[$8>>2]|0;
  $sub28 = (($7) + -1)|0;
  $cmp29 = ($sub28>>>0)>(126);
  if ($cmp29) {
   $tobool32 = ($7|0)==(0);
   if ($tobool32) {
    label = 19;
    break;
   }
   $call37 = (_wcrtomb($buf,$7,0)|0);
   $tobool39 = ($call37|0)==(-1);
   if ($tobool39) {
    $retval$0 = -1;
    label = 26;
    break;
   }
   $cmp42 = ($call37>>>0)>($n$addr$456>>>0);
   if ($cmp42) {
    label = 22;
    break;
   }
   $9 = HEAP32[$8>>2]|0;
   (_wcrtomb($s$addr$257,$9,0)|0);
   $add$ptr48 = (($s$addr$257) + ($call37)|0);
   $sub49 = (($n$addr$456) - ($call37))|0;
   $10 = $8;$n$addr$5 = $sub49;$s$addr$3 = $add$ptr48;
  } else {
   $conv51 = $7&255;
   $incdec$ptr52 = (($s$addr$257) + 1|0);
   HEAP8[$s$addr$257>>0] = $conv51;
   $dec53 = (($n$addr$456) + -1)|0;
   $$pre79 = HEAP32[$ws>>2]|0;
   $10 = $$pre79;$n$addr$5 = $dec53;$s$addr$3 = $incdec$ptr52;
  }
  $incdec$ptr55 = (($10) + 4|0);
  HEAP32[$ws>>2] = $incdec$ptr55;
  $tobool26 = ($n$addr$5|0)==(0);
  if ($tobool26) {
   $retval$0 = $n;
   label = 26;
   break;
  } else {
   $8 = $incdec$ptr55;$n$addr$456 = $n$addr$5;$s$addr$257 = $s$addr$3;
  }
 }
 if ((label|0) == 19) {
  HEAP8[$s$addr$257>>0] = 0;
  HEAP32[$ws>>2] = 0;
  $sub34 = (($n) - ($n$addr$456))|0;
  $retval$0 = $sub34;
  STACKTOP = sp;return ($retval$0|0);
 }
 else if ((label|0) == 22) {
  $sub45 = (($n) - ($n$addr$456))|0;
  $retval$0 = $sub45;
  STACKTOP = sp;return ($retval$0|0);
 }
 else if ((label|0) == 26) {
  STACKTOP = sp;return ($retval$0|0);
 }
 return 0|0;
}
function ___string_read($f,$buf,$len) {
 $f = $f|0;
 $buf = $buf|0;
 $len = $len|0;
 var $0 = 0, $add = 0, $add$ptr = 0, $add$ptr3 = 0, $call = 0, $cmp = 0, $cookie = 0, $k$0 = 0, $k$0$len = 0, $rend = 0, $rpos = 0, $sub$ptr$lhs$cast = 0, $sub$ptr$rhs$cast = 0, $sub$ptr$sub = 0, $tobool = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $cookie = (($f) + 84|0);
 $0 = HEAP32[$cookie>>2]|0;
 $add = (($len) + 256)|0;
 $call = (_memchr($0,0,$add)|0);
 $tobool = ($call|0)==(0|0);
 if ($tobool) {
  $k$0 = $add;
 } else {
  $sub$ptr$lhs$cast = $call;
  $sub$ptr$rhs$cast = $0;
  $sub$ptr$sub = (($sub$ptr$lhs$cast) - ($sub$ptr$rhs$cast))|0;
  $k$0 = $sub$ptr$sub;
 }
 $cmp = ($k$0>>>0)<($len>>>0);
 $k$0$len = $cmp ? $k$0 : $len;
 _memcpy(($buf|0),($0|0),($k$0$len|0))|0;
 $add$ptr = (($0) + ($k$0$len)|0);
 $rpos = (($f) + 4|0);
 HEAP32[$rpos>>2] = $add$ptr;
 $add$ptr3 = (($0) + ($k$0)|0);
 $rend = (($f) + 8|0);
 HEAP32[$rend>>2] = $add$ptr3;
 HEAP32[$cookie>>2] = $add$ptr3;
 STACKTOP = sp;return ($k$0$len|0);
}
function _sscanf($s,$fmt,$varargs) {
 $s = $s|0;
 $fmt = $fmt|0;
 $varargs = $varargs|0;
 var $ap = 0, $call = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $ap = sp;
 HEAP32[$ap>>2] = $varargs;
 $call = (_vsscanf($s,$fmt,$ap)|0);
 STACKTOP = sp;return ($call|0);
}
function _vasprintf($s,$fmt,$ap) {
 $s = $s|0;
 $fmt = $fmt|0;
 $ap = $ap|0;
 var $add = 0, $add10 = 0, $ap2 = 0, $call = 0, $call11 = 0, $call16 = 0, $call2 = 0, $call6 = 0, $cmp = 0, $cmp9 = 0, $cond = 0, $retval$0 = 0, $tobool = 0, $tobool12 = 0, $tobool7 = 0, $vacopy_currentptr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $ap2 = sp;
 $call = (_malloc(240)|0);
 $tobool = ($call|0)==(0|0);
 do {
  if ($tobool) {
   $retval$0 = -1;
  } else {
   $vacopy_currentptr = HEAP32[$ap>>2]|0;
   HEAP32[$ap2>>2] = $vacopy_currentptr;
   $call2 = (_vsnprintf($call,240,$fmt,$ap2)|0);
   $cmp = ($call2>>>0)<(240);
   if ($cmp) {
    $add = (($call2) + 1)|0;
    $call6 = (_realloc($call,$add)|0);
    $tobool7 = ($call6|0)!=(0|0);
    $cond = $tobool7 ? $call6 : $call;
    HEAP32[$s>>2] = $cond;
    $retval$0 = $call2;
    break;
   }
   _free($call);
   $cmp9 = ($call2|0)<(0);
   if ($cmp9) {
    $retval$0 = -1;
   } else {
    $add10 = (($call2) + 1)|0;
    $call11 = (_malloc($add10)|0);
    HEAP32[$s>>2] = $call11;
    $tobool12 = ($call11|0)==(0|0);
    if ($tobool12) {
     $retval$0 = -1;
    } else {
     $call16 = (_vsnprintf($call11,$add10,$fmt,$ap)|0);
     $retval$0 = $call16;
    }
   }
  }
 } while(0);
 STACKTOP = sp;return ($retval$0|0);
}
function _MUSL_vfscanf($f,$fmt,$ap) {
 $f = $f|0;
 $fmt = $fmt|0;
 $ap = $ap|0;
 var $$ = 0, $$198 = 0, $$compoundliteral$sroa$1$4$idx3 = 0, $$compoundliteral322 = 0, $$lcssa214 = 0, $$pre = 0, $$pre421 = 0, $$pre422 = 0, $$pre423 = 0, $$pre424 = 0, $$pre425 = 0, $$pre426 = 0, $$pre427 = 0, $$size$0 = 0, $$width$0 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0;
 var $102 = 0, $103 = 0, $104 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0;
 var $add = 0, $add$ptr = 0, $add$ptr80 = 0, $add167 = 0, $add168 = 0, $add23 = 0, $add271 = 0, $add280 = 0, $add289 = 0, $add289$ = 0, $add318 = 0, $add318$us = 0, $add318$us247 = 0, $add339343 = 0, $add371 = 0, $add382342 = 0, $add407 = 0, $add429 = 0, $add450 = 0, $add538 = 0;
 var $add539 = 0, $add90 = 0, $alloc$0 = 0, $alloc$1 = 0, $alloc$2 = 0, $and = 0, $ap2$i = 0, $arglist_current = 0, $arglist_current2 = 0, $arglist_next = 0, $arglist_next3 = 0, $arrayidx = 0, $arrayidx204 = 0, $arrayidx209 = 0, $arrayidx228 = 0, $arrayidx237 = 0, $arrayidx252 = 0, $arrayidx262 = 0, $arrayidx27 = 0, $arrayidx272 = 0;
 var $arrayidx281 = 0, $arrayidx319 = 0, $arrayidx319$us = 0, $arrayidx319$us248 = 0, $arrayidx331 = 0, $arrayidx331$us256 = 0, $arrayidx372 = 0, $arrayidx377 = 0, $arrayidx408 = 0, $arrayidx413 = 0, $arrayidx430 = 0, $arrayidx481 = 0, $arrayidx485 = 0, $arrayidx73 = 0, $base$0 = 0, $c$0225 = 0, $call = 0, $call10 = 0, $call11 = 0, $call147 = 0;
 var $call150 = 0, $call179 = 0, $call299 = 0, $call3 = 0, $call315 = 0, $call315$us = 0, $call315$us241 = 0, $call324 = 0, $call324$us = 0, $call324$us252 = 0, $call341 = 0, $call347 = 0, $call354 = 0, $call368 = 0, $call385 = 0, $call404 = 0, $call426 = 0, $call44 = 0, $call512 = 0.0, $cmp = 0;
 var $cmp$i = 0, $cmp105 = 0, $cmp113 = 0, $cmp125 = 0, $cmp130 = 0, $cmp140 = 0, $cmp172 = 0, $cmp182 = 0, $cmp194 = 0, $cmp194$not = 0, $cmp197 = 0, $cmp214 = 0, $cmp25 = 0, $cmp266 = 0, $cmp266224 = 0, $cmp293 = 0, $cmp308 = 0, $cmp308$us = 0, $cmp308$us262 = 0, $cmp335$us = 0;
 var $cmp335$us259 = 0, $cmp361 = 0, $cmp37 = 0, $cmp378 = 0, $cmp397 = 0, $cmp419 = 0, $cmp464 = 0, $cmp48 = 0, $cmp503 = 0, $cmp58 = 0, $cmp75 = 0, $cmp94 = 0, $cond = 0, $cond149 = 0, $cond317 = 0, $cond317$us = 0, $cond317$us246 = 0, $cond370 = 0, $cond406 = 0, $cond428 = 0;
 var $cond46 = 0, $conv = 0, $conv$i201 = 0, $conv103 = 0, $conv124 = 0, $conv145 = 0, $conv2 = 0, $conv2$i203 = 0, $conv227 = 0, $conv236 = 0, $conv263 = 0, $conv265 = 0, $conv278$pre = 0, $conv278$pre$phiZ2D = 0, $conv279 = 0, $conv28 = 0, $conv313 = 0, $conv313$us = 0, $conv313$us244 = 0, $conv323 = 0;
 var $conv323$us = 0, $conv323$us251 = 0, $conv34 = 0, $conv366 = 0, $conv375 = 0, $conv402 = 0, $conv411 = 0, $conv42 = 0, $conv424 = 0, $conv47 = 0, $conv526 = 0.0, $conv85 = 0, $conv85215 = 0, $conv85220 = 0, $conv9 = 0, $dec = 0, $dec$i = 0, $dec$matches$0 = 0, $dest$0 = 0, $factor = 0;
 var $factor213 = 0, $i$0$i = 0, $i$0$ph = 0, $i$0$ph233 = 0, $i$0$ph233$lcssa = 0, $i$0$ph233$us239 = 0, $i$1$lcssa = 0, $i$2 = 0, $i$2$ph = 0, $i$2$ph$phi = 0, $i$3 = 0, $i$4 = 0, $inc = 0, $inc330 = 0, $inc330$us255 = 0, $inc376 = 0, $inc412 = 0, $inc542 = 0, $incdec$ptr102 = 0, $incdec$ptr108 = 0;
 var $incdec$ptr108$incdec$ptr102 = 0, $incdec$ptr116 = 0, $incdec$ptr116$incdec$ptr102 = 0, $incdec$ptr144 = 0, $incdec$ptr158 = 0, $incdec$ptr176 = 0, $incdec$ptr19 = 0, $incdec$ptr190 = 0, $incdec$ptr212 = 0, $incdec$ptr217 = 0, $incdec$ptr225 = 0, $incdec$ptr234 = 0, $incdec$ptr283 = 0, $incdec$ptr312 = 0, $incdec$ptr312$us = 0, $incdec$ptr312$us243 = 0, $incdec$ptr365 = 0, $incdec$ptr401 = 0, $incdec$ptr41 = 0, $incdec$ptr423 = 0;
 var $incdec$ptr441 = 0, $incdec$ptr545 = 0, $incdec$ptr55 = 0, $incdec$ptr69 = 0, $incdec$ptr8 = 0, $incdec$ptr92 = 0, $incdec$ptr99 = 0, $invert$0 = 0, $isdigit = 0, $isdigit193 = 0, $isdigit193217 = 0, $isdigittmp = 0, $isdigittmp192 = 0, $isdigittmp192216 = 0, $k$0$ph = 0, $k$1$ph = 0, $lnot$ext = 0, $matches$0$inc542 = 0, $matches$0334 = 0, $matches$1 = 0;
 var $matches$2 = 0, $matches$3 = 0, $mul = 0, $mul298 = 0, $mul340 = 0, $not$tobool540 = 0, $or = 0, $or$cond$us = 0, $or$cond196 = 0, $or$cond197 = 0, $or$conv124 = 0, $p$0340 = 0, $p$1 = 0, $p$10 = 0, $p$11 = 0, $p$2 = 0, $p$3$lcssa = 0, $p$3218 = 0, $p$4 = 0, $p$5 = 0;
 var $p$6 = 0, $p$7 = 0, $p$7$ph = 0, $p$8 = 0, $p$9 = 0, $pos$0339 = 0, $pos$1 = 0, $pos$2 = 0, $rend163 = 0, $rpos138 = 0, $s$0332 = 0, $s$1 = 0, $s$2$ph = 0, $s$3 = 0, $s$4 = 0, $s$5 = 0, $s$6 = 0, $s$7 = 0, $scanset = 0, $shcnt161 = 0;
 var $shend139 = 0, $size$0 = 0, $st = 0, $sub$ptr$lhs$cast = 0, $sub$ptr$lhs$cast164 = 0, $sub$ptr$lhs$cast447 = 0, $sub$ptr$lhs$cast496 = 0, $sub$ptr$lhs$cast516 = 0, $sub$ptr$lhs$cast535 = 0, $sub$ptr$rhs$cast = 0, $sub$ptr$rhs$cast165 = 0, $sub$ptr$rhs$cast448 = 0, $sub$ptr$rhs$cast497 = 0, $sub$ptr$rhs$cast517 = 0, $sub$ptr$rhs$cast536 = 0, $sub$ptr$sub = 0, $sub$ptr$sub166 = 0, $sub$ptr$sub449 = 0, $sub$ptr$sub498195 = 0, $sub$ptr$sub518194 = 0;
 var $sub$ptr$sub537 = 0, $sub91 = 0, $tobool = 0, $tobool$i199 = 0, $tobool1 = 0, $tobool12 = 0, $tobool151 = 0, $tobool155 = 0, $tobool16 = 0, $tobool187 = 0, $tobool296 = 0, $tobool300 = 0, $tobool320 = 0, $tobool320$us = 0, $tobool320$us249 = 0, $tobool328 = 0, $tobool331 = 0, $tobool342 = 0, $tobool348 = 0, $tobool355 = 0;
 var $tobool373 = 0, $tobool386 = 0, $tobool392 = 0, $tobool4 = 0, $tobool409 = 0, $tobool431 = 0, $tobool438 = 0, $tobool451 = 0, $tobool479 = 0, $tobool483 = 0, $tobool500 = 0, $tobool506 = 0, $tobool52 = 0, $tobool520 = 0, $tobool523 = 0, $tobool548 = 0, $tobool551 = 0, $tobool97 = 0, $vacopy_currentptr = 0, $wc = 0;
 var $wcs$0333 = 0, $wcs$1 = 0, $wcs$2 = 0, $wcs$3$ph = 0, $wcs$3$ph361 = 0, $wcs$4 = 0, $wcs$5 = 0, $wcs$6 = 0, $wcs$7 = 0, $wcs$8 = 0, $width$0$lcssa = 0, $width$0219 = 0, $width$1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 304|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $ap2$i = sp + 16|0;
 $st = sp + 8|0;
 $scanset = sp + 33|0;
 $wc = sp;
 $$compoundliteral322 = sp + 32|0;
 $0 = HEAP8[$fmt>>0]|0;
 $tobool331 = ($0<<24>>24)==(0);
 if ($tobool331) {
  $matches$3 = 0;
  STACKTOP = sp;return ($matches$3|0);
 }
 $rpos138 = (($f) + 4|0);
 $shend139 = (($f) + 100|0);
 $shcnt161 = (($f) + 108|0);
 $rend163 = (($f) + 8|0);
 $arrayidx204 = (($scanset) + 10|0);
 $arrayidx209 = (($scanset) + 33|0);
 $$compoundliteral$sroa$1$4$idx3 = (($st) + 4|0);
 $arrayidx228 = (($scanset) + 46|0);
 $arrayidx237 = (($scanset) + 94|0);
 $1 = $0;$matches$0334 = 0;$p$0340 = $fmt;$pos$0339 = 0;$s$0332 = 0;$wcs$0333 = 0;
 L4: while(1) {
  $conv = $1&255;
  $call = (_isspace($conv)|0);
  $tobool1 = ($call|0)==(0);
  L6: do {
   if ($tobool1) {
    $10 = HEAP8[$p$0340>>0]|0;
    $cmp25 = ($10<<24>>24)==(37);
    L21: do {
     if ($cmp25) {
      $arrayidx27 = (($p$0340) + 1|0);
      $11 = HEAP8[$arrayidx27>>0]|0;
      do {
       if ((($11<<24>>24) == 37)) {
        break L21;
       } else if ((($11<<24>>24) == 42)) {
        $incdec$ptr69 = (($p$0340) + 2|0);
        $dest$0 = 0;$p$2 = $incdec$ptr69;
       } else {
        $conv28 = $11&255;
        $isdigittmp = (($conv28) + -48)|0;
        $isdigit = ($isdigittmp>>>0)<(10);
        if ($isdigit) {
         $arrayidx73 = (($p$0340) + 2|0);
         $18 = HEAP8[$arrayidx73>>0]|0;
         $cmp75 = ($18<<24>>24)==(36);
         if ($cmp75) {
          $vacopy_currentptr = HEAP32[$ap>>2]|0;
          HEAP32[$ap2$i>>2] = $vacopy_currentptr;
          $i$0$i = $isdigittmp;
          while(1) {
           $cmp$i = ($i$0$i>>>0)>(1);
           $arglist_current = HEAP32[$ap2$i>>2]|0;
           $19 = HEAP32[$arglist_current>>2]|0;
           $arglist_next = (($arglist_current) + 4|0);
           HEAP32[$ap2$i>>2] = $arglist_next;
           $dec$i = (($i$0$i) + -1)|0;
           if ($cmp$i) {
            $i$0$i = $dec$i;
           } else {
            break;
           }
          }
          $add$ptr80 = (($p$0340) + 3|0);
          $dest$0 = $19;$p$2 = $add$ptr80;
          break;
         }
        }
        $arglist_current2 = HEAP32[$ap>>2]|0;
        $20 = HEAP32[$arglist_current2>>2]|0;
        $arglist_next3 = (($arglist_current2) + 4|0);
        HEAP32[$ap>>2] = $arglist_next3;
        $dest$0 = $20;$p$2 = $arrayidx27;
       }
      } while(0);
      $21 = HEAP8[$p$2>>0]|0;
      $conv85215 = $21&255;
      $isdigittmp192216 = (($conv85215) + -48)|0;
      $isdigit193217 = ($isdigittmp192216>>>0)<(10);
      if ($isdigit193217) {
       $conv85220 = $conv85215;$p$3218 = $p$2;$width$0219 = 0;
       while(1) {
        $mul = ($width$0219*10)|0;
        $add90 = (($mul) + -48)|0;
        $sub91 = (($add90) + ($conv85220))|0;
        $incdec$ptr92 = (($p$3218) + 1|0);
        $22 = HEAP8[$incdec$ptr92>>0]|0;
        $conv85 = $22&255;
        $isdigittmp192 = (($conv85) + -48)|0;
        $isdigit193 = ($isdigittmp192>>>0)<(10);
        if ($isdigit193) {
         $conv85220 = $conv85;$p$3218 = $incdec$ptr92;$width$0219 = $sub91;
        } else {
         $$lcssa214 = $22;$p$3$lcssa = $incdec$ptr92;$width$0$lcssa = $sub91;
         break;
        }
       }
      } else {
       $$lcssa214 = $21;$p$3$lcssa = $p$2;$width$0$lcssa = 0;
      }
      $cmp94 = ($$lcssa214<<24>>24)==(109);
      if ($cmp94) {
       $tobool97 = ($dest$0|0)!=(0|0);
       $lnot$ext = $tobool97&1;
       $incdec$ptr99 = (($p$3$lcssa) + 1|0);
       $$pre = HEAP8[$incdec$ptr99>>0]|0;
       $23 = $$pre;$alloc$0 = $lnot$ext;$p$4 = $incdec$ptr99;$s$1 = 0;$wcs$1 = 0;
      } else {
       $23 = $$lcssa214;$alloc$0 = 0;$p$4 = $p$3$lcssa;$s$1 = $s$0332;$wcs$1 = $wcs$0333;
      }
      $incdec$ptr102 = (($p$4) + 1|0);
      $conv103 = $23&255;
      switch ($conv103|0) {
      case 104:  {
       $24 = HEAP8[$incdec$ptr102>>0]|0;
       $cmp105 = ($24<<24>>24)==(104);
       $incdec$ptr108 = (($p$4) + 2|0);
       $incdec$ptr108$incdec$ptr102 = $cmp105 ? $incdec$ptr108 : $incdec$ptr102;
       $$ = $cmp105 ? -2 : -1;
       $p$5 = $incdec$ptr108$incdec$ptr102;$size$0 = $$;
       break;
      }
      case 106:  {
       $p$5 = $incdec$ptr102;$size$0 = 3;
       break;
      }
      case 108:  {
       $25 = HEAP8[$incdec$ptr102>>0]|0;
       $cmp113 = ($25<<24>>24)==(108);
       $incdec$ptr116 = (($p$4) + 2|0);
       $incdec$ptr116$incdec$ptr102 = $cmp113 ? $incdec$ptr116 : $incdec$ptr102;
       $$198 = $cmp113 ? 3 : 1;
       $p$5 = $incdec$ptr116$incdec$ptr102;$size$0 = $$198;
       break;
      }
      case 116: case 122:  {
       $p$5 = $incdec$ptr102;$size$0 = 1;
       break;
      }
      case 76:  {
       $p$5 = $incdec$ptr102;$size$0 = 2;
       break;
      }
      case 110: case 112: case 67: case 83: case 91: case 99: case 115: case 88: case 71: case 70: case 69: case 65: case 103: case 102: case 101: case 97: case 120: case 117: case 111: case 105: case 100:  {
       $p$5 = $p$4;$size$0 = 0;
       break;
      }
      default: {
       $alloc$1 = $alloc$0;$s$6 = $s$1;$wcs$7 = $wcs$1;
       label = 162;
       break L4;
      }
      }
      $26 = HEAP8[$p$5>>0]|0;
      $conv124 = $26&255;
      $and = $conv124 & 47;
      $cmp125 = ($and|0)==(3);
      $or = $conv124 | 32;
      $or$conv124 = $cmp125 ? $or : $conv124;
      $$size$0 = $cmp125 ? 1 : $size$0;
      if ((($or$conv124|0) == 91)) {
       $pos$1 = $pos$0339;$width$1 = $width$0$lcssa;
      } else if ((($or$conv124|0) == 99)) {
       $cmp130 = ($width$0$lcssa|0)<(1);
       $$width$0 = $cmp130 ? 1 : $width$0$lcssa;
       $pos$1 = $pos$0339;$width$1 = $$width$0;
      } else if ((($or$conv124|0) == 110)) {
       $27 = ($pos$0339|0)<(0);
       $28 = $27 << 31 >> 31;
       $tobool$i199 = ($dest$0|0)==(0|0);
       if ($tobool$i199) {
        $matches$1 = $matches$0334;$p$11 = $p$5;$pos$2 = $pos$0339;$s$5 = $s$1;$wcs$6 = $wcs$1;
        break L6;
       }
       switch ($$size$0|0) {
       case -1:  {
        $conv2$i203 = $pos$0339&65535;
        HEAP16[$dest$0>>1] = $conv2$i203;
        $matches$1 = $matches$0334;$p$11 = $p$5;$pos$2 = $pos$0339;$s$5 = $s$1;$wcs$6 = $wcs$1;
        break L6;
        break;
       }
       case 1:  {
        HEAP32[$dest$0>>2] = $pos$0339;
        $matches$1 = $matches$0334;$p$11 = $p$5;$pos$2 = $pos$0339;$s$5 = $s$1;$wcs$6 = $wcs$1;
        break L6;
        break;
       }
       case 3:  {
        $29 = $dest$0;
        $30 = $29;
        HEAP32[$30>>2] = $pos$0339;
        $31 = (($29) + 4)|0;
        $32 = $31;
        HEAP32[$32>>2] = $28;
        $matches$1 = $matches$0334;$p$11 = $p$5;$pos$2 = $pos$0339;$s$5 = $s$1;$wcs$6 = $wcs$1;
        break L6;
        break;
       }
       case 0:  {
        HEAP32[$dest$0>>2] = $pos$0339;
        $matches$1 = $matches$0334;$p$11 = $p$5;$pos$2 = $pos$0339;$s$5 = $s$1;$wcs$6 = $wcs$1;
        break L6;
        break;
       }
       case -2:  {
        $conv$i201 = $pos$0339&255;
        HEAP8[$dest$0>>0] = $conv$i201;
        $matches$1 = $matches$0334;$p$11 = $p$5;$pos$2 = $pos$0339;$s$5 = $s$1;$wcs$6 = $wcs$1;
        break L6;
        break;
       }
       default: {
        $matches$1 = $matches$0334;$p$11 = $p$5;$pos$2 = $pos$0339;$s$5 = $s$1;$wcs$6 = $wcs$1;
        break L6;
       }
       }
      } else {
       ___shlim($f,0);
       while(1) {
        $33 = HEAP32[$rpos138>>2]|0;
        $34 = HEAP32[$shend139>>2]|0;
        $cmp140 = ($33>>>0)<($34>>>0);
        if ($cmp140) {
         $incdec$ptr144 = (($33) + 1|0);
         HEAP32[$rpos138>>2] = $incdec$ptr144;
         $35 = HEAP8[$33>>0]|0;
         $conv145 = $35&255;
         $cond149 = $conv145;
        } else {
         $call147 = (___shgetc($f)|0);
         $cond149 = $call147;
        }
        $call150 = (_isspace($cond149)|0);
        $tobool151 = ($call150|0)==(0);
        if ($tobool151) {
         break;
        }
       }
       $36 = HEAP32[$shend139>>2]|0;
       $tobool155 = ($36|0)==(0|0);
       $$pre422 = HEAP32[$rpos138>>2]|0;
       if ($tobool155) {
        $39 = $$pre422;
       } else {
        $incdec$ptr158 = (($$pre422) + -1|0);
        HEAP32[$rpos138>>2] = $incdec$ptr158;
        $39 = $incdec$ptr158;
       }
       $37 = HEAP32[$shcnt161>>2]|0;
       $38 = HEAP32[$rend163>>2]|0;
       $sub$ptr$lhs$cast164 = $39;
       $sub$ptr$rhs$cast165 = $38;
       $sub$ptr$sub166 = (($37) + ($pos$0339))|0;
       $add167 = (($sub$ptr$sub166) + ($sub$ptr$lhs$cast164))|0;
       $add168 = (($add167) - ($sub$ptr$rhs$cast165))|0;
       $pos$1 = $add168;$width$1 = $width$0$lcssa;
      }
      ___shlim($f,$width$1);
      $40 = HEAP32[$rpos138>>2]|0;
      $41 = HEAP32[$shend139>>2]|0;
      $cmp172 = ($40>>>0)<($41>>>0);
      if ($cmp172) {
       $incdec$ptr176 = (($40) + 1|0);
       HEAP32[$rpos138>>2] = $incdec$ptr176;
       $42 = $41;
      } else {
       $call179 = (___shgetc($f)|0);
       $cmp182 = ($call179|0)<(0);
       if ($cmp182) {
        $alloc$1 = $alloc$0;$s$6 = $s$1;$wcs$7 = $wcs$1;
        label = 162;
        break L4;
       }
       $$pre423 = HEAP32[$shend139>>2]|0;
       $42 = $$pre423;
      }
      $tobool187 = ($42|0)==(0|0);
      if (!($tobool187)) {
       $43 = HEAP32[$rpos138>>2]|0;
       $incdec$ptr190 = (($43) + -1|0);
       HEAP32[$rpos138>>2] = $incdec$ptr190;
      }
      L78: do {
       switch ($or$conv124|0) {
       case 111:  {
        $base$0 = 8;
        label = 144;
        break;
       }
       case 117: case 100:  {
        $base$0 = 10;
        label = 144;
        break;
       }
       case 105:  {
        $base$0 = 0;
        label = 144;
        break;
       }
       case 91: case 99: case 115:  {
        $cmp194 = ($or$conv124|0)==(99);
        $44 = $or$conv124 & 239;
        $45 = ($44|0)==(99);
        L83: do {
         if ($45) {
          $cmp197 = ($or$conv124|0)==(115);
          _memset(($scanset|0),-1,257)|0;
          HEAP8[$scanset>>0] = 0;
          if ($cmp197) {
           HEAP8[$arrayidx209>>0] = 0;
           ;HEAP8[$arrayidx204+0>>0]=0|0;HEAP8[$arrayidx204+1>>0]=0|0;HEAP8[$arrayidx204+2>>0]=0|0;HEAP8[$arrayidx204+3>>0]=0|0;HEAP8[$arrayidx204+4>>0]=0|0;
           $p$9 = $p$5;
          } else {
           $p$9 = $p$5;
          }
         } else {
          $incdec$ptr212 = (($p$5) + 1|0);
          $46 = HEAP8[$incdec$ptr212>>0]|0;
          $cmp214 = ($46<<24>>24)==(94);
          $incdec$ptr217 = (($p$5) + 2|0);
          $invert$0 = $cmp214&1;
          $p$6 = $cmp214 ? $incdec$ptr217 : $incdec$ptr212;
          $47 = $cmp214&1;
          _memset(($scanset|0),($47|0),257)|0;
          HEAP8[$scanset>>0] = 0;
          $48 = HEAP8[$p$6>>0]|0;
          if ((($48<<24>>24) == 45)) {
           $incdec$ptr225 = (($p$6) + 1|0);
           $49 = $invert$0 ^ 1;
           $conv227 = $49&255;
           HEAP8[$arrayidx228>>0] = $conv227;
           $conv278$pre$phiZ2D = $conv227;$p$7$ph = $incdec$ptr225;
          } else if ((($48<<24>>24) == 93)) {
           $incdec$ptr234 = (($p$6) + 1|0);
           $50 = $invert$0 ^ 1;
           $conv236 = $50&255;
           HEAP8[$arrayidx237>>0] = $conv236;
           $conv278$pre$phiZ2D = $conv236;$p$7$ph = $incdec$ptr234;
          } else {
           $$pre427 = $invert$0 ^ 1;
           $conv278$pre = $$pre427&255;
           $conv278$pre$phiZ2D = $conv278$pre;$p$7$ph = $p$6;
          }
          $p$7 = $p$7$ph;
          while(1) {
           $51 = HEAP8[$p$7>>0]|0;
           if ((($51<<24>>24) == 93)) {
            $p$9 = $p$7;
            break L83;
           } else if ((($51<<24>>24) == 45)) {
            $arrayidx252 = (($p$7) + 1|0);
            $52 = HEAP8[$arrayidx252>>0]|0;
            if ((($52<<24>>24) == 93) | (($52<<24>>24) == 0)) {
             $55 = 45;$p$8 = $p$7;
            } else {
             $arrayidx262 = (($p$7) + -1|0);
             $53 = HEAP8[$arrayidx262>>0]|0;
             $cmp266224 = ($53&255)<($52&255);
             if ($cmp266224) {
              $conv263 = $53&255;
              $c$0225 = $conv263;
              while(1) {
               $add271 = (($c$0225) + 1)|0;
               $arrayidx272 = (($scanset) + ($add271)|0);
               HEAP8[$arrayidx272>>0] = $conv278$pre$phiZ2D;
               $54 = HEAP8[$arrayidx252>>0]|0;
               $conv265 = $54&255;
               $cmp266 = ($add271|0)<($conv265|0);
               if ($cmp266) {
                $c$0225 = $add271;
               } else {
                $55 = $54;$p$8 = $arrayidx252;
                break;
               }
              }
             } else {
              $55 = $52;$p$8 = $arrayidx252;
             }
            }
           } else if ((($51<<24>>24) == 0)) {
            $alloc$1 = $alloc$0;$s$6 = $s$1;$wcs$7 = $wcs$1;
            label = 162;
            break L4;
           } else {
            $55 = $51;$p$8 = $p$7;
           }
           $conv279 = $55&255;
           $add280 = (($conv279) + 1)|0;
           $arrayidx281 = (($scanset) + ($add280)|0);
           HEAP8[$arrayidx281>>0] = $conv278$pre$phiZ2D;
           $incdec$ptr283 = (($p$8) + 1|0);
           $p$7 = $incdec$ptr283;
          }
         }
        } while(0);
        $add289 = (($width$1) + 1)|0;
        $add289$ = $cmp194 ? $add289 : 31;
        $cmp293 = ($$size$0|0)==(1);
        $tobool296 = ($alloc$0|0)!=(0);
        L102: do {
         if ($cmp293) {
          if ($tobool296) {
           $mul298 = $add289$ << 2;
           $call299 = (_malloc($mul298)|0);
           $tobool300 = ($call299|0)==(0|0);
           if ($tobool300) {
            $alloc$1 = $alloc$0;$s$6 = 0;$wcs$7 = $call299;
            label = 162;
            break L4;
           } else {
            $wcs$2 = $call299;
           }
          } else {
           $wcs$2 = $dest$0;
          }
          HEAP32[$st>>2] = 0;
          HEAP32[$$compoundliteral$sroa$1$4$idx3>>2] = 0;
          $i$0$ph = 0;$k$0$ph = $add289$;$wcs$3$ph = $wcs$2;
          L137: while(1) {
           $tobool328 = ($wcs$3$ph|0)==(0|0);
           if ($tobool328) {
            while(1) {
             $56 = HEAP32[$rpos138>>2]|0;
             $59 = HEAP32[$shend139>>2]|0;
             $cmp308$us = ($56>>>0)<($59>>>0);
             if ($cmp308$us) {
              $incdec$ptr312$us = (($56) + 1|0);
              HEAP32[$rpos138>>2] = $incdec$ptr312$us;
              $57 = HEAP8[$56>>0]|0;
              $conv313$us = $57&255;
              $cond317$us = $conv313$us;
             } else {
              $call315$us = (___shgetc($f)|0);
              $cond317$us = $call315$us;
             }
             $add318$us = (($cond317$us) + 1)|0;
             $arrayidx319$us = (($scanset) + ($add318$us)|0);
             $58 = HEAP8[$arrayidx319$us>>0]|0;
             $tobool320$us = ($58<<24>>24)==(0);
             if ($tobool320$us) {
              $i$0$ph233$lcssa = $i$0$ph;$wcs$3$ph361 = 0;
              break L137;
             }
             $conv323$us = $cond317$us&255;
             HEAP8[$$compoundliteral322>>0] = $conv323$us;
             $call324$us = (_mbrtowc($wc,$$compoundliteral322,1,$st)|0);
             if ((($call324$us|0) == -2)) {
              continue;
             } else if ((($call324$us|0) == -1)) {
              $alloc$1 = $alloc$0;$s$6 = 0;$wcs$7 = 0;
              label = 162;
              break L4;
             }
             $cmp335$us = ($i$0$ph|0)==($k$0$ph|0);
             $or$cond$us = $tobool296 & $cmp335$us;
             if ($or$cond$us) {
              $i$1$lcssa = $i$0$ph;
              break;
             }
            }
           } else {
            if ($tobool296) {
             $i$0$ph233$us239 = $i$0$ph;
            } else {
             $i$0$ph233 = $i$0$ph;
             label = 98;
             break;
            }
            while(1) {
             while(1) {
              $60 = HEAP32[$rpos138>>2]|0;
              $64 = HEAP32[$shend139>>2]|0;
              $cmp308$us262 = ($60>>>0)<($64>>>0);
              if ($cmp308$us262) {
               $incdec$ptr312$us243 = (($60) + 1|0);
               HEAP32[$rpos138>>2] = $incdec$ptr312$us243;
               $61 = HEAP8[$60>>0]|0;
               $conv313$us244 = $61&255;
               $cond317$us246 = $conv313$us244;
              } else {
               $call315$us241 = (___shgetc($f)|0);
               $cond317$us246 = $call315$us241;
              }
              $add318$us247 = (($cond317$us246) + 1)|0;
              $arrayidx319$us248 = (($scanset) + ($add318$us247)|0);
              $62 = HEAP8[$arrayidx319$us248>>0]|0;
              $tobool320$us249 = ($62<<24>>24)==(0);
              if ($tobool320$us249) {
               $i$0$ph233$lcssa = $i$0$ph233$us239;$wcs$3$ph361 = $wcs$3$ph;
               break L137;
              }
              $conv323$us251 = $cond317$us246&255;
              HEAP8[$$compoundliteral322>>0] = $conv323$us251;
              $call324$us252 = (_mbrtowc($wc,$$compoundliteral322,1,$st)|0);
              if ((($call324$us252|0) == -1)) {
               $alloc$1 = $alloc$0;$s$6 = 0;$wcs$7 = $wcs$3$ph;
               label = 162;
               break L4;
              } else if (!((($call324$us252|0) == -2))) {
               break;
              }
             }
             $63 = HEAP32[$wc>>2]|0;
             $inc330$us255 = (($i$0$ph233$us239) + 1)|0;
             $arrayidx331$us256 = (($wcs$3$ph) + ($i$0$ph233$us239<<2)|0);
             HEAP32[$arrayidx331$us256>>2] = $63;
             $cmp335$us259 = ($inc330$us255|0)==($k$0$ph|0);
             if ($cmp335$us259) {
              $i$1$lcssa = $k$0$ph;
              break;
             } else {
              $i$0$ph233$us239 = $inc330$us255;
             }
            }
           }
           $factor = $k$0$ph << 1;
           $add339343 = $factor | 1;
           $mul340 = $add339343 << 2;
           $call341 = (_realloc($wcs$3$ph,$mul340)|0);
           $tobool342 = ($call341|0)==(0|0);
           if ($tobool342) {
            $alloc$1 = $alloc$0;$s$6 = 0;$wcs$7 = $wcs$3$ph;
            label = 162;
            break L4;
           }
           $i$0$ph = $i$1$lcssa;$k$0$ph = $add339343;$wcs$3$ph = $call341;
          }
          L161: do {
           if ((label|0) == 98) {
            while(1) {
             label = 0;
             while(1) {
              $65 = HEAP32[$rpos138>>2]|0;
              $66 = HEAP32[$shend139>>2]|0;
              $cmp308 = ($65>>>0)<($66>>>0);
              if ($cmp308) {
               $incdec$ptr312 = (($65) + 1|0);
               HEAP32[$rpos138>>2] = $incdec$ptr312;
               $67 = HEAP8[$65>>0]|0;
               $conv313 = $67&255;
               $cond317 = $conv313;
              } else {
               $call315 = (___shgetc($f)|0);
               $cond317 = $call315;
              }
              $add318 = (($cond317) + 1)|0;
              $arrayidx319 = (($scanset) + ($add318)|0);
              $68 = HEAP8[$arrayidx319>>0]|0;
              $tobool320 = ($68<<24>>24)==(0);
              if ($tobool320) {
               $i$0$ph233$lcssa = $i$0$ph233;$wcs$3$ph361 = $wcs$3$ph;
               break L161;
              }
              $conv323 = $cond317&255;
              HEAP8[$$compoundliteral322>>0] = $conv323;
              $call324 = (_mbrtowc($wc,$$compoundliteral322,1,$st)|0);
              if ((($call324|0) == -1)) {
               $alloc$1 = 0;$s$6 = 0;$wcs$7 = $wcs$3$ph;
               label = 162;
               break L4;
              } else if (!((($call324|0) == -2))) {
               break;
              }
             }
             $69 = HEAP32[$wc>>2]|0;
             $inc330 = (($i$0$ph233) + 1)|0;
             $arrayidx331 = (($wcs$3$ph) + ($i$0$ph233<<2)|0);
             HEAP32[$arrayidx331>>2] = $69;
             $i$0$ph233 = $inc330;
             label = 98;
            }
           }
          } while(0);
          $call347 = (_mbsinit($st)|0);
          $tobool348 = ($call347|0)==(0);
          if ($tobool348) {
           $alloc$1 = $alloc$0;$s$6 = 0;$wcs$7 = $wcs$3$ph361;
           label = 162;
           break L4;
          } else {
           $i$4 = $i$0$ph233$lcssa;$s$3 = 0;$wcs$4 = $wcs$3$ph361;
          }
         } else {
          if ($tobool296) {
           $call354 = (_malloc($add289$)|0);
           $tobool355 = ($call354|0)==(0|0);
           if ($tobool355) {
            $alloc$1 = $alloc$0;$s$6 = 0;$wcs$7 = 0;
            label = 162;
            break L4;
           } else {
            $i$2$ph = 0;$k$1$ph = $add289$;$s$2$ph = $call354;
           }
           while(1) {
            $i$2 = $i$2$ph;
            while(1) {
             $70 = HEAP32[$rpos138>>2]|0;
             $71 = HEAP32[$shend139>>2]|0;
             $cmp361 = ($70>>>0)<($71>>>0);
             if ($cmp361) {
              $incdec$ptr365 = (($70) + 1|0);
              HEAP32[$rpos138>>2] = $incdec$ptr365;
              $72 = HEAP8[$70>>0]|0;
              $conv366 = $72&255;
              $cond370 = $conv366;
             } else {
              $call368 = (___shgetc($f)|0);
              $cond370 = $call368;
             }
             $add371 = (($cond370) + 1)|0;
             $arrayidx372 = (($scanset) + ($add371)|0);
             $73 = HEAP8[$arrayidx372>>0]|0;
             $tobool373 = ($73<<24>>24)==(0);
             if ($tobool373) {
              $i$4 = $i$2;$s$3 = $s$2$ph;$wcs$4 = 0;
              break L102;
             }
             $conv375 = $cond370&255;
             $inc376 = (($i$2) + 1)|0;
             $arrayidx377 = (($s$2$ph) + ($i$2)|0);
             HEAP8[$arrayidx377>>0] = $conv375;
             $cmp378 = ($inc376|0)==($k$1$ph|0);
             if ($cmp378) {
              break;
             } else {
              $i$2 = $inc376;
             }
            }
            $factor213 = $k$1$ph << 1;
            $add382342 = $factor213 | 1;
            $call385 = (_realloc($s$2$ph,$add382342)|0);
            $tobool386 = ($call385|0)==(0|0);
            if ($tobool386) {
             $alloc$1 = $alloc$0;$s$6 = $s$2$ph;$wcs$7 = 0;
             label = 162;
             break L4;
            } else {
             $i$2$ph$phi = $k$1$ph;$k$1$ph = $add382342;$s$2$ph = $call385;$i$2$ph = $i$2$ph$phi;
            }
           }
          }
          $tobool392 = ($dest$0|0)==(0|0);
          if ($tobool392) {
           $79 = $42;
           while(1) {
            $78 = HEAP32[$rpos138>>2]|0;
            $cmp419 = ($78>>>0)<($79>>>0);
            if ($cmp419) {
             $incdec$ptr423 = (($78) + 1|0);
             HEAP32[$rpos138>>2] = $incdec$ptr423;
             $80 = HEAP8[$78>>0]|0;
             $conv424 = $80&255;
             $cond428 = $conv424;
            } else {
             $call426 = (___shgetc($f)|0);
             $cond428 = $call426;
            }
            $add429 = (($cond428) + 1)|0;
            $arrayidx430 = (($scanset) + ($add429)|0);
            $81 = HEAP8[$arrayidx430>>0]|0;
            $tobool431 = ($81<<24>>24)==(0);
            if ($tobool431) {
             $i$4 = 0;$s$3 = 0;$wcs$4 = 0;
             break L102;
            }
            $$pre425 = HEAP32[$shend139>>2]|0;
            $79 = $$pre425;
           }
          } else {
           $75 = $42;$i$3 = 0;
           while(1) {
            $74 = HEAP32[$rpos138>>2]|0;
            $cmp397 = ($74>>>0)<($75>>>0);
            if ($cmp397) {
             $incdec$ptr401 = (($74) + 1|0);
             HEAP32[$rpos138>>2] = $incdec$ptr401;
             $76 = HEAP8[$74>>0]|0;
             $conv402 = $76&255;
             $cond406 = $conv402;
            } else {
             $call404 = (___shgetc($f)|0);
             $cond406 = $call404;
            }
            $add407 = (($cond406) + 1)|0;
            $arrayidx408 = (($scanset) + ($add407)|0);
            $77 = HEAP8[$arrayidx408>>0]|0;
            $tobool409 = ($77<<24>>24)==(0);
            if ($tobool409) {
             $i$4 = $i$3;$s$3 = $dest$0;$wcs$4 = 0;
             break L102;
            }
            $conv411 = $cond406&255;
            $inc412 = (($i$3) + 1)|0;
            $arrayidx413 = (($dest$0) + ($i$3)|0);
            HEAP8[$arrayidx413>>0] = $conv411;
            $$pre421 = HEAP32[$shend139>>2]|0;
            $75 = $$pre421;$i$3 = $inc412;
           }
          }
         }
        } while(0);
        $82 = HEAP32[$shend139>>2]|0;
        $tobool438 = ($82|0)==(0|0);
        $$pre424 = HEAP32[$rpos138>>2]|0;
        if ($tobool438) {
         $85 = $$pre424;
        } else {
         $incdec$ptr441 = (($$pre424) + -1|0);
         HEAP32[$rpos138>>2] = $incdec$ptr441;
         $85 = $incdec$ptr441;
        }
        $83 = HEAP32[$shcnt161>>2]|0;
        $84 = HEAP32[$rend163>>2]|0;
        $sub$ptr$lhs$cast447 = $85;
        $sub$ptr$rhs$cast448 = $84;
        $sub$ptr$sub449 = (($sub$ptr$lhs$cast447) - ($sub$ptr$rhs$cast448))|0;
        $add450 = (($sub$ptr$sub449) + ($83))|0;
        $tobool451 = ($add450|0)==(0);
        if ($tobool451) {
         $alloc$2 = $alloc$0;$matches$2 = $matches$0334;$s$7 = $s$3;$wcs$8 = $wcs$4;
         break L4;
        }
        $cmp194$not = $cmp194 ^ 1;
        $cmp464 = ($add450|0)==($width$1|0);
        $or$cond196 = $cmp464 | $cmp194$not;
        if (!($or$cond196)) {
         $alloc$2 = $alloc$0;$matches$2 = $matches$0334;$s$7 = $s$3;$wcs$8 = $wcs$4;
         break L4;
        }
        do {
         if ($tobool296) {
          if ($cmp293) {
           HEAP32[$dest$0>>2] = $wcs$4;
           break;
          } else {
           HEAP32[$dest$0>>2] = $s$3;
           break;
          }
         }
        } while(0);
        if ($cmp194) {
         $p$10 = $p$9;$s$4 = $s$3;$wcs$5 = $wcs$4;
        } else {
         $tobool479 = ($wcs$4|0)==(0|0);
         if (!($tobool479)) {
          $arrayidx481 = (($wcs$4) + ($i$4<<2)|0);
          HEAP32[$arrayidx481>>2] = 0;
         }
         $tobool483 = ($s$3|0)==(0|0);
         if ($tobool483) {
          $p$10 = $p$9;$s$4 = 0;$wcs$5 = $wcs$4;
         } else {
          $arrayidx485 = (($s$3) + ($i$4)|0);
          HEAP8[$arrayidx485>>0] = 0;
          $p$10 = $p$9;$s$4 = $s$3;$wcs$5 = $wcs$4;
         }
        }
        break;
       }
       case 120: case 88: case 112:  {
        $base$0 = 16;
        label = 144;
        break;
       }
       case 71: case 103: case 70: case 102: case 69: case 101: case 65: case 97:  {
        $call512 = (+___floatscan($f,$$size$0,0));
        $98 = HEAP32[$shcnt161>>2]|0;
        $99 = HEAP32[$rpos138>>2]|0;
        $100 = HEAP32[$rend163>>2]|0;
        $sub$ptr$lhs$cast516 = $99;
        $sub$ptr$rhs$cast517 = $100;
        $sub$ptr$sub518194 = (($sub$ptr$rhs$cast517) - ($sub$ptr$lhs$cast516))|0;
        $tobool520 = ($98|0)==($sub$ptr$sub518194|0);
        if ($tobool520) {
         $alloc$2 = $alloc$0;$matches$2 = $matches$0334;$s$7 = $s$1;$wcs$8 = $wcs$1;
         break L4;
        }
        $tobool523 = ($dest$0|0)==(0|0);
        if ($tobool523) {
         $p$10 = $p$5;$s$4 = $s$1;$wcs$5 = $wcs$1;
        } else {
         if ((($$size$0|0) == 0)) {
          $conv526 = $call512;
          HEAPF32[$dest$0>>2] = $conv526;
          $p$10 = $p$5;$s$4 = $s$1;$wcs$5 = $wcs$1;
          break L78;
         } else if ((($$size$0|0) == 1)) {
          HEAPF64[$dest$0>>3] = $call512;
          $p$10 = $p$5;$s$4 = $s$1;$wcs$5 = $wcs$1;
          break L78;
         } else if ((($$size$0|0) == 2)) {
          HEAPF64[$dest$0>>3] = $call512;
          $p$10 = $p$5;$s$4 = $s$1;$wcs$5 = $wcs$1;
          break L78;
         } else {
          $p$10 = $p$5;$s$4 = $s$1;$wcs$5 = $wcs$1;
          break L78;
         }
        }
        break;
       }
       default: {
        $p$10 = $p$5;$s$4 = $s$1;$wcs$5 = $wcs$1;
       }
       }
      } while(0);
      L197: do {
       if ((label|0) == 144) {
        label = 0;
        $86 = (___intscan($f,$base$0,0,-1,-1)|0);
        $87 = tempRet0;
        $88 = HEAP32[$shcnt161>>2]|0;
        $89 = HEAP32[$rpos138>>2]|0;
        $90 = HEAP32[$rend163>>2]|0;
        $sub$ptr$lhs$cast496 = $89;
        $sub$ptr$rhs$cast497 = $90;
        $sub$ptr$sub498195 = (($sub$ptr$rhs$cast497) - ($sub$ptr$lhs$cast496))|0;
        $tobool500 = ($88|0)==($sub$ptr$sub498195|0);
        if ($tobool500) {
         $alloc$2 = $alloc$0;$matches$2 = $matches$0334;$s$7 = $s$1;$wcs$8 = $wcs$1;
         break L4;
        }
        $cmp503 = ($or$conv124|0)!=(112);
        $tobool506 = ($dest$0|0)==(0|0);
        $or$cond197 = $cmp503 | $tobool506;
        if (!($or$cond197)) {
         $91 = $86;
         HEAP32[$dest$0>>2] = $91;
         $p$10 = $p$5;$s$4 = $s$1;$wcs$5 = $wcs$1;
         break;
        }
        if ($tobool506) {
         $p$10 = $p$5;$s$4 = $s$1;$wcs$5 = $wcs$1;
        } else {
         switch ($$size$0|0) {
         case -2:  {
          $92 = $86&255;
          HEAP8[$dest$0>>0] = $92;
          $p$10 = $p$5;$s$4 = $s$1;$wcs$5 = $wcs$1;
          break L197;
          break;
         }
         case -1:  {
          $93 = $86&65535;
          HEAP16[$dest$0>>1] = $93;
          $p$10 = $p$5;$s$4 = $s$1;$wcs$5 = $wcs$1;
          break L197;
          break;
         }
         case 0:  {
          HEAP32[$dest$0>>2] = $86;
          $p$10 = $p$5;$s$4 = $s$1;$wcs$5 = $wcs$1;
          break L197;
          break;
         }
         case 1:  {
          HEAP32[$dest$0>>2] = $86;
          $p$10 = $p$5;$s$4 = $s$1;$wcs$5 = $wcs$1;
          break L197;
          break;
         }
         case 3:  {
          $94 = $dest$0;
          $95 = $94;
          HEAP32[$95>>2] = $86;
          $96 = (($94) + 4)|0;
          $97 = $96;
          HEAP32[$97>>2] = $87;
          $p$10 = $p$5;$s$4 = $s$1;$wcs$5 = $wcs$1;
          break L197;
          break;
         }
         default: {
          $p$10 = $p$5;$s$4 = $s$1;$wcs$5 = $wcs$1;
          break L197;
         }
         }
        }
       }
      } while(0);
      $101 = HEAP32[$shcnt161>>2]|0;
      $102 = HEAP32[$rpos138>>2]|0;
      $103 = HEAP32[$rend163>>2]|0;
      $sub$ptr$lhs$cast535 = $102;
      $sub$ptr$rhs$cast536 = $103;
      $sub$ptr$sub537 = (($101) + ($pos$1))|0;
      $add538 = (($sub$ptr$sub537) + ($sub$ptr$lhs$cast535))|0;
      $add539 = (($add538) - ($sub$ptr$rhs$cast536))|0;
      $not$tobool540 = ($dest$0|0)!=(0|0);
      $inc542 = $not$tobool540&1;
      $matches$0$inc542 = (($inc542) + ($matches$0334))|0;
      $matches$1 = $matches$0$inc542;$p$11 = $p$10;$pos$2 = $add539;$s$5 = $s$4;$wcs$6 = $wcs$5;
      break L6;
     }
    } while(0);
    $conv34 = $cmp25&1;
    $add$ptr = (($p$0340) + ($conv34)|0);
    ___shlim($f,0);
    $12 = HEAP32[$rpos138>>2]|0;
    $13 = HEAP32[$shend139>>2]|0;
    $cmp37 = ($12>>>0)<($13>>>0);
    if ($cmp37) {
     $incdec$ptr41 = (($12) + 1|0);
     HEAP32[$rpos138>>2] = $incdec$ptr41;
     $14 = HEAP8[$12>>0]|0;
     $conv42 = $14&255;
     $cond46 = $conv42;
    } else {
     $call44 = (___shgetc($f)|0);
     $cond46 = $call44;
    }
    $15 = HEAP8[$add$ptr>>0]|0;
    $conv47 = $15&255;
    $cmp48 = ($cond46|0)==($conv47|0);
    if (!($cmp48)) {
     label = 19;
     break L4;
    }
    $inc = (($pos$0339) + 1)|0;
    $matches$1 = $matches$0334;$p$11 = $add$ptr;$pos$2 = $inc;$s$5 = $s$0332;$wcs$6 = $wcs$0333;
   } else {
    $p$1 = $p$0340;
    while(1) {
     $arrayidx = (($p$1) + 1|0);
     $2 = HEAP8[$arrayidx>>0]|0;
     $conv2 = $2&255;
     $call3 = (_isspace($conv2)|0);
     $tobool4 = ($call3|0)==(0);
     if ($tobool4) {
      break;
     } else {
      $p$1 = $arrayidx;
     }
    }
    ___shlim($f,0);
    while(1) {
     $3 = HEAP32[$rpos138>>2]|0;
     $4 = HEAP32[$shend139>>2]|0;
     $cmp = ($3>>>0)<($4>>>0);
     if ($cmp) {
      $incdec$ptr8 = (($3) + 1|0);
      HEAP32[$rpos138>>2] = $incdec$ptr8;
      $5 = HEAP8[$3>>0]|0;
      $conv9 = $5&255;
      $cond = $conv9;
     } else {
      $call10 = (___shgetc($f)|0);
      $cond = $call10;
     }
     $call11 = (_isspace($cond)|0);
     $tobool12 = ($call11|0)==(0);
     if ($tobool12) {
      break;
     }
    }
    $6 = HEAP32[$shend139>>2]|0;
    $tobool16 = ($6|0)==(0|0);
    $$pre426 = HEAP32[$rpos138>>2]|0;
    if ($tobool16) {
     $9 = $$pre426;
    } else {
     $incdec$ptr19 = (($$pre426) + -1|0);
     HEAP32[$rpos138>>2] = $incdec$ptr19;
     $9 = $incdec$ptr19;
    }
    $7 = HEAP32[$shcnt161>>2]|0;
    $8 = HEAP32[$rend163>>2]|0;
    $sub$ptr$lhs$cast = $9;
    $sub$ptr$rhs$cast = $8;
    $sub$ptr$sub = (($7) + ($pos$0339))|0;
    $add = (($sub$ptr$sub) + ($sub$ptr$lhs$cast))|0;
    $add23 = (($add) - ($sub$ptr$rhs$cast))|0;
    $matches$1 = $matches$0334;$p$11 = $p$1;$pos$2 = $add23;$s$5 = $s$0332;$wcs$6 = $wcs$0333;
   }
  } while(0);
  $incdec$ptr545 = (($p$11) + 1|0);
  $104 = HEAP8[$incdec$ptr545>>0]|0;
  $tobool = ($104<<24>>24)==(0);
  if ($tobool) {
   $matches$3 = $matches$1;
   label = 165;
   break;
  } else {
   $1 = $104;$matches$0334 = $matches$1;$p$0340 = $incdec$ptr545;$pos$0339 = $pos$2;$s$0332 = $s$5;$wcs$0333 = $wcs$6;
  }
 }
 if ((label|0) == 165) {
  STACKTOP = sp;return ($matches$3|0);
 }
 if ((label|0) == 19) {
  $16 = HEAP32[$shend139>>2]|0;
  $tobool52 = ($16|0)==(0|0);
  if (!($tobool52)) {
   $17 = HEAP32[$rpos138>>2]|0;
   $incdec$ptr55 = (($17) + -1|0);
   HEAP32[$rpos138>>2] = $incdec$ptr55;
  }
  $cmp58 = ($cond46|0)<(0);
  if ($cmp58) {
   $alloc$1 = 0;$s$6 = $s$0332;$wcs$7 = $wcs$0333;
   label = 162;
  } else {
   $matches$3 = $matches$0334;
   STACKTOP = sp;return ($matches$3|0);
  }
 }
 if ((label|0) == 162) {
  $tobool548 = ($matches$0334|0)==(0);
  $dec = $tobool548 << 31 >> 31;
  $dec$matches$0 = (($dec) + ($matches$0334))|0;
  $alloc$2 = $alloc$1;$matches$2 = $dec$matches$0;$s$7 = $s$6;$wcs$8 = $wcs$7;
 }
 $tobool551 = ($alloc$2|0)==(0);
 if ($tobool551) {
  $matches$3 = $matches$2;
  STACKTOP = sp;return ($matches$3|0);
 }
 _free($s$7);
 _free($wcs$8);
 $matches$3 = $matches$2;
 STACKTOP = sp;return ($matches$3|0);
}
function _vsscanf($s,$fmt,$ap) {
 $s = $s|0;
 $fmt = $fmt|0;
 $ap = $ap|0;
 var $buf = 0, $call = 0, $cookie = 0, $f = 0, $lock = 0, $read = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $f = sp;
 dest=$f+0|0; stop=dest+112|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 $read = (($f) + 32|0);
 HEAP32[$read>>2] = 491;
 $buf = (($f) + 44|0);
 HEAP32[$buf>>2] = $s;
 $lock = (($f) + 76|0);
 HEAP32[$lock>>2] = -1;
 $cookie = (($f) + 84|0);
 HEAP32[$cookie>>2] = $s;
 $call = (_MUSL_vfscanf($f,$fmt,$ap)|0);
 STACKTOP = sp;return ($call|0);
}
function _do_read($f,$buf,$len) {
 $f = $f|0;
 $buf = $buf|0;
 $len = $len|0;
 var $call = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $call = (___string_read($f,$buf,$len)|0);
 STACKTOP = sp;return ($call|0);
}
function _wcslen($s) {
 $s = $s|0;
 var $0 = 0, $incdec$ptr = 0, $s$addr$0 = 0, $sub$ptr$div = 0, $sub$ptr$lhs$cast = 0, $sub$ptr$rhs$cast = 0, $sub$ptr$sub = 0, $tobool = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $s$addr$0 = $s;
 while(1) {
  $0 = HEAP32[$s$addr$0>>2]|0;
  $tobool = ($0|0)==(0);
  $incdec$ptr = (($s$addr$0) + 4|0);
  if ($tobool) {
   break;
  } else {
   $s$addr$0 = $incdec$ptr;
  }
 }
 $sub$ptr$lhs$cast = $s$addr$0;
 $sub$ptr$rhs$cast = $s;
 $sub$ptr$sub = (($sub$ptr$lhs$cast) - ($sub$ptr$rhs$cast))|0;
 $sub$ptr$div = $sub$ptr$sub >> 2;
 STACKTOP = sp;return ($sub$ptr$div|0);
}
function _wmemcpy($d,$s,$n) {
 $d = $d|0;
 $s = $s|0;
 $n = $n|0;
 var $0 = 0, $d$addr$05 = 0, $dec = 0, $incdec$ptr = 0, $incdec$ptr1 = 0, $n$addr$04 = 0, $s$addr$03 = 0, $tobool = 0, $tobool2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $tobool2 = ($n|0)==(0);
 if ($tobool2) {
  STACKTOP = sp;return ($d|0);
 } else {
  $d$addr$05 = $d;$n$addr$04 = $n;$s$addr$03 = $s;
 }
 while(1) {
  $dec = (($n$addr$04) + -1)|0;
  $incdec$ptr = (($s$addr$03) + 4|0);
  $0 = HEAP32[$s$addr$03>>2]|0;
  $incdec$ptr1 = (($d$addr$05) + 4|0);
  HEAP32[$d$addr$05>>2] = $0;
  $tobool = ($dec|0)==(0);
  if ($tobool) {
   break;
  } else {
   $d$addr$05 = $incdec$ptr1;$n$addr$04 = $dec;$s$addr$03 = $incdec$ptr;
  }
 }
 STACKTOP = sp;return ($d|0);
}
function _wmemmove($d,$s,$n) {
 $d = $d|0;
 $s = $s|0;
 $n = $n|0;
 var $0 = 0, $1 = 0, $arrayidx = 0, $arrayidx1 = 0, $cmp = 0, $d$addr$017 = 0, $dec12 = 0, $dec12$in = 0, $dec3 = 0, $incdec$ptr = 0, $incdec$ptr6 = 0, $n$addr$116 = 0, $s$addr$015 = 0, $sub$ptr$div = 0, $sub$ptr$lhs$cast = 0, $sub$ptr$rhs$cast = 0, $sub$ptr$sub = 0, $tobool = 0, $tobool11 = 0, $tobool4 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $sub$ptr$lhs$cast = $d;
 $sub$ptr$rhs$cast = $s;
 $sub$ptr$sub = (($sub$ptr$lhs$cast) - ($sub$ptr$rhs$cast))|0;
 $sub$ptr$div = $sub$ptr$sub >> 2;
 $cmp = ($sub$ptr$div>>>0)<($n>>>0);
 $tobool11 = ($n|0)==(0);
 if ($cmp) {
  if ($tobool11) {
   STACKTOP = sp;return ($d|0);
  } else {
   $dec12$in = $n;
  }
  while(1) {
   $dec12 = (($dec12$in) + -1)|0;
   $arrayidx = (($s) + ($dec12<<2)|0);
   $0 = HEAP32[$arrayidx>>2]|0;
   $arrayidx1 = (($d) + ($dec12<<2)|0);
   HEAP32[$arrayidx1>>2] = $0;
   $tobool = ($dec12|0)==(0);
   if ($tobool) {
    break;
   } else {
    $dec12$in = $dec12;
   }
  }
  STACKTOP = sp;return ($d|0);
 } else {
  if ($tobool11) {
   STACKTOP = sp;return ($d|0);
  } else {
   $d$addr$017 = $d;$n$addr$116 = $n;$s$addr$015 = $s;
  }
  while(1) {
   $dec3 = (($n$addr$116) + -1)|0;
   $incdec$ptr = (($s$addr$015) + 4|0);
   $1 = HEAP32[$s$addr$015>>2]|0;
   $incdec$ptr6 = (($d$addr$017) + 4|0);
   HEAP32[$d$addr$017>>2] = $1;
   $tobool4 = ($dec3|0)==(0);
   if ($tobool4) {
    break;
   } else {
    $d$addr$017 = $incdec$ptr6;$n$addr$116 = $dec3;$s$addr$015 = $incdec$ptr;
   }
  }
  STACKTOP = sp;return ($d|0);
 }
 return 0|0;
}
function _wmemset($d,$c,$n) {
 $d = $d|0;
 $c = $c|0;
 $n = $n|0;
 var $d$addr$04 = 0, $dec = 0, $incdec$ptr = 0, $n$addr$03 = 0, $tobool = 0, $tobool2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $tobool2 = ($n|0)==(0);
 if ($tobool2) {
  STACKTOP = sp;return ($d|0);
 } else {
  $d$addr$04 = $d;$n$addr$03 = $n;
 }
 while(1) {
  $dec = (($n$addr$03) + -1)|0;
  $incdec$ptr = (($d$addr$04) + 4|0);
  HEAP32[$d$addr$04>>2] = $c;
  $tobool = ($dec|0)==(0);
  if ($tobool) {
   break;
  } else {
   $d$addr$04 = $incdec$ptr;$n$addr$03 = $dec;
  }
 }
 STACKTOP = sp;return ($d|0);
}
function _abort_message($format,$varargs) {
 $format = $format|0;
 $varargs = $varargs|0;
 var $0 = 0, $list = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $list = sp;
 HEAP32[$list>>2] = $varargs;
 $0 = HEAP32[_stderr>>2]|0;
 (_vfprintf(($0|0),($format|0),($list|0))|0);
 (_fputc(10,($0|0))|0);
 _abort();
 // unreachable;
}
function __ZL25default_terminate_handlerv() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__type_name$i = 0, $add$ptr = 0, $call = 0, $call10 = 0, $call14 = 0, $cond = 0, $exception_class = 0, $primaryException = 0, $thrown_object = 0, $tobool = 0, $tobool1 = 0, $vararg_buffer = 0, $vararg_buffer10 = 0, $vararg_buffer3 = 0, $vararg_buffer7 = 0, $vararg_ptr1 = 0;
 var $vararg_ptr2 = 0, $vararg_ptr6 = 0, $vfn = 0, $vfn13 = 0, $vtable12 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer10 = sp + 32|0;
 $vararg_buffer7 = sp + 24|0;
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer = sp;
 $thrown_object = sp + 36|0;
 $call = (___cxa_get_globals_fast()|0);
 $tobool = ($call|0)==(0|0);
 if ($tobool) {
  _abort_message(12664,$vararg_buffer10);
  // unreachable;
 }
 $0 = HEAP32[$call>>2]|0;
 $tobool1 = ($0|0)==(0|0);
 if ($tobool1) {
  _abort_message(12664,$vararg_buffer10);
  // unreachable;
 }
 $add$ptr = (($0) + 80|0);
 $exception_class = (($0) + 48|0);
 $1 = $exception_class;
 $2 = $1;
 $3 = HEAP32[$2>>2]|0;
 $4 = (($1) + 4)|0;
 $5 = $4;
 $6 = HEAP32[$5>>2]|0;
 $7 = $3 & -256;
 $8 = ($7|0)==(1126902528);
 $9 = ($6|0)==(1129074247);
 $10 = $8 & $9;
 if (!($10)) {
  $23 = HEAP32[12504>>2]|0;
  HEAP32[$vararg_buffer7>>2] = $23;
  _abort_message(12624,$vararg_buffer7);
  // unreachable;
 }
 $11 = ($3|0)==(1126902529);
 $12 = ($6|0)==(1129074247);
 $13 = $11 & $12;
 if ($13) {
  $primaryException = (($0) + 44|0);
  $14 = HEAP32[$primaryException>>2]|0;
  $cond = $14;
 } else {
  $cond = $add$ptr;
 }
 HEAP32[$thrown_object>>2] = $cond;
 $15 = HEAP32[$0>>2]|0;
 $__type_name$i = (($15) + 4|0);
 $16 = HEAP32[$__type_name$i>>2]|0;
 $17 = HEAP32[13056>>2]|0;
 $vfn = (($17) + 16|0);
 $18 = HEAP32[$vfn>>2]|0;
 $call10 = (FUNCTION_TABLE_iiii[$18 & 511](13056,$15,$thrown_object)|0);
 if ($call10) {
  $19 = HEAP32[$thrown_object>>2]|0;
  $20 = HEAP32[12504>>2]|0;
  $vtable12 = HEAP32[$19>>2]|0;
  $vfn13 = (($vtable12) + 8|0);
  $21 = HEAP32[$vfn13>>2]|0;
  $call14 = (FUNCTION_TABLE_ii[$21 & 511]($19)|0);
  HEAP32[$vararg_buffer>>2] = $20;
  $vararg_ptr1 = (($vararg_buffer) + 4|0);
  HEAP32[$vararg_ptr1>>2] = $16;
  $vararg_ptr2 = (($vararg_buffer) + 8|0);
  HEAP32[$vararg_ptr2>>2] = $call14;
  _abort_message(12528,$vararg_buffer);
  // unreachable;
 } else {
  $22 = HEAP32[12504>>2]|0;
  HEAP32[$vararg_buffer3>>2] = $22;
  $vararg_ptr6 = (($vararg_buffer3) + 4|0);
  HEAP32[$vararg_ptr6>>2] = $16;
  _abort_message(12576,$vararg_buffer3);
  // unreachable;
 }
}
function ___cxa_get_globals_fast() {
 var $0 = 0, $call = 0, $call1 = 0, $cmp = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $call = (_pthread_once((12688|0),(492|0))|0);
 $cmp = ($call|0)==(0);
 if ($cmp) {
  $0 = HEAP32[12680>>2]|0;
  $call1 = (_pthread_getspecific(($0|0))|0);
  STACKTOP = sp;return ($call1|0);
 } else {
  _abort_message(12696,$vararg_buffer);
  // unreachable;
 }
 return 0|0;
}
function __ZN10__cxxabiv112_GLOBAL__N_110construct_Ev() {
 var $call = 0, $cmp = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $call = (_pthread_key_create((12680|0),(493|0))|0);
 $cmp = ($call|0)==(0);
 if ($cmp) {
  STACKTOP = sp;return;
 } else {
  _abort_message(12752,$vararg_buffer);
  // unreachable;
 }
}
function __ZN10__cxxabiv112_GLOBAL__N_19destruct_EPv($p) {
 $p = $p|0;
 var $0 = 0, $call = 0, $cmp = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 _free($p);
 $0 = HEAP32[12680>>2]|0;
 $call = (_pthread_setspecific(($0|0),(0|0))|0);
 $cmp = ($call|0)==(0);
 if ($cmp) {
  STACKTOP = sp;return;
 } else {
  _abort_message(12808,$vararg_buffer);
  // unreachable;
 }
}
function __Znwj($size) {
 $size = $size|0;
 var $$size = 0, $call = 0, $call$lcssa = 0, $call2 = 0, $call4 = 0, $cmp = 0, $cmp1 = 0, $cmp15 = 0, $exception = 0, $tobool = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $cmp = ($size|0)==(0);
 $$size = $cmp ? 1 : $size;
 $call4 = (_malloc($$size)|0);
 $cmp15 = ($call4|0)==(0|0);
 if (!($cmp15)) {
  $call$lcssa = $call4;
  STACKTOP = sp;return ($call$lcssa|0);
 }
 while(1) {
  $call2 = (__ZSt15get_new_handlerv()|0);
  $tobool = ($call2|0)==(0|0);
  if ($tobool) {
   label = 4;
   break;
  }
  FUNCTION_TABLE_v[$call2 & 511]();
  $call = (_malloc($$size)|0);
  $cmp1 = ($call|0)==(0|0);
  if (!($cmp1)) {
   $call$lcssa = $call;
   label = 5;
   break;
  }
 }
 if ((label|0) == 4) {
  $exception = (___cxa_allocate_exception(4)|0);
  HEAP32[$exception>>2] = ((12864 + 8|0));
  ___cxa_throw(($exception|0),(12920|0),(325|0));
  // unreachable;
 }
 else if ((label|0) == 5) {
  STACKTOP = sp;return ($call$lcssa|0);
 }
 return 0|0;
}
function __Znaj($size) {
 $size = $size|0;
 var $call = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $call = (__Znwj($size)|0);
 STACKTOP = sp;return ($call|0);
}
function __ZdlPv($ptr) {
 $ptr = $ptr|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 _free($ptr);
 STACKTOP = sp;return;
}
function __ZdaPv($ptr) {
 $ptr = $ptr|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($ptr);
 STACKTOP = sp;return;
}
function __ZNSt9bad_allocC2Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = ((12864 + 8|0));
 STACKTOP = sp;return;
}
function __ZNSt9bad_allocD0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 STACKTOP = sp;return;
}
function __ZNSt9bad_allocD2Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return;
}
function __ZNKSt9bad_alloc4whatEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return (12888|0);
}
function __ZSt11__terminatePFvvE($func) {
 $func = $func|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 __THREW__ = 0;
 invoke_v($func|0);
 $0 = __THREW__; __THREW__ = 0;
 $1 = $0&1;
 if (!($1)) {
  __THREW__ = 0;
  invoke_vii(494,(12936|0),($vararg_buffer|0));
  $2 = __THREW__; __THREW__ = 0;
  $3 = $2&1;
  if (!($3)) {
   // unreachable;
  }
 }
 $4 = ___cxa_find_matching_catch(0|0)|0;
 $5 = tempRet0;
 (___cxa_begin_catch(($4|0))|0);
 __THREW__ = 0;
 invoke_vii(494,(12976|0),($vararg_buffer1|0));
 $6 = __THREW__; __THREW__ = 0;
 $7 = $6&1;
 if (!($7)) {
  // unreachable;
 }
 $8 = ___cxa_find_matching_catch(0|0)|0;
 $9 = tempRet0;
 __THREW__ = 0;
 invoke_v(363);
 $10 = __THREW__; __THREW__ = 0;
 $11 = $10&1;
 if ($11) {
  $12 = ___cxa_find_matching_catch(0|0)|0;
  $13 = tempRet0;
  ___clang_call_terminate($12);
  // unreachable;
 } else {
  __ZSt9terminatev();
  // unreachable;
 }
}
function __ZSt9terminatev() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $call = 0, $exception_class = 0;
 var $terminateHandler = 0, $tobool = 0, $tobool1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __THREW__ = 0;
 $call = (invoke_i(495)|0);
 $0 = __THREW__; __THREW__ = 0;
 $1 = $0&1;
 if ($1) {
  $16 = ___cxa_find_matching_catch(0|0)|0;
  $17 = tempRet0;
  ___clang_call_terminate($16);
  // unreachable;
 }
 $tobool = ($call|0)==(0|0);
 if (!($tobool)) {
  $2 = HEAP32[$call>>2]|0;
  $tobool1 = ($2|0)==(0|0);
  if (!($tobool1)) {
   $exception_class = (($2) + 48|0);
   $3 = $exception_class;
   $4 = $3;
   $5 = HEAP32[$4>>2]|0;
   $6 = (($3) + 4)|0;
   $7 = $6;
   $8 = HEAP32[$7>>2]|0;
   $9 = $5 & -256;
   $10 = ($9|0)==(1126902528);
   $11 = ($8|0)==(1129074247);
   $12 = $10 & $11;
   if ($12) {
    $terminateHandler = (($2) + 12|0);
    $13 = HEAP32[$terminateHandler>>2]|0;
    __ZSt11__terminatePFvvE($13);
    // unreachable;
   }
  }
 }
 $14 = HEAP32[3124]|0;HEAP32[3124] = (($14+0)|0);
 $15 = $14;
 __ZSt11__terminatePFvvE($15);
 // unreachable;
}
function __ZSt15get_new_handlerv() {
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[13032>>2]|0;HEAP32[13032>>2] = (($0+0)|0);
 $1 = $0;
 STACKTOP = sp;return ($1|0);
}
function __ZNSt9exceptionD2Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return;
}
function __ZNSt11logic_errorD0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt11logic_errorD2Ev($this);
 __ZdlPv($this);
 STACKTOP = sp;return;
}
function __ZNSt11logic_errorD2Ev($this) {
 $this = $this|0;
 var $__imp_ = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = ((13064 + 8|0));
 $__imp_ = (($this) + 4|0);
 __ZN12_GLOBAL__N_114__libcpp_nmstrD2Ev($__imp_);
 STACKTOP = sp;return;
}
function __ZNKSt11logic_error4whatEv($this) {
 $this = $this|0;
 var $0 = 0, $__imp_ = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $__imp_ = (($this) + 4|0);
 $0 = HEAP32[$__imp_>>2]|0;
 STACKTOP = sp;return ($0|0);
}
function __ZNSt13runtime_errorD0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt13runtime_errorD2Ev($this);
 __ZdlPv($this);
 STACKTOP = sp;return;
}
function __ZNSt13runtime_errorD2Ev($this) {
 $this = $this|0;
 var $__imp_ = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = ((13088 + 8|0));
 $__imp_ = (($this) + 4|0);
 __ZN12_GLOBAL__N_114__libcpp_nmstrD2Ev($__imp_);
 STACKTOP = sp;return;
}
function __ZNKSt13runtime_error4whatEv($this) {
 $this = $this|0;
 var $0 = 0, $__imp_ = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $__imp_ = (($this) + 4|0);
 $0 = HEAP32[$__imp_>>2]|0;
 STACKTOP = sp;return ($0|0);
}
function __ZNSt12length_errorD0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt11logic_errorD2Ev($this);
 __ZdlPv($this);
 STACKTOP = sp;return;
}
function __ZN12_GLOBAL__N_114__libcpp_nmstrD2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $add$ptr = 0, $cmp = 0, $count$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$this>>2]|0;
 $count$i = (($0) + -4|0);
 $1 = HEAP32[$count$i>>2]|0;HEAP32[$count$i>>2] = (($1+-1)|0);
 $2 = (($1) + -1)|0;
 $cmp = ($2|0)<(0);
 if (!($cmp)) {
  STACKTOP = sp;return;
 }
 $3 = HEAP32[$this>>2]|0;
 $add$ptr = (($3) + -12|0);
 __ZdlPv($add$ptr);
 STACKTOP = sp;return;
}
function __ZNSt9type_infoD2Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return;
}
function __ZNSt8bad_castC2Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = ((13248 + 8|0));
 STACKTOP = sp;return;
}
function __ZNSt8bad_castD0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 STACKTOP = sp;return;
}
function __ZNSt8bad_castD2Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return;
}
function __ZNKSt8bad_cast4whatEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return (13272|0);
}
function __ZN10__cxxabiv116__shim_type_infoD2Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return;
}
function __ZNK10__cxxabiv116__shim_type_info5noop1Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return;
}
function __ZNK10__cxxabiv116__shim_type_info5noop2Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return;
}
function __ZN10__cxxabiv117__class_type_infoD0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 STACKTOP = sp;return;
}
function __ZN10__cxxabiv120__si_class_type_infoD0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 STACKTOP = sp;return;
}
function __ZN10__cxxabiv121__vmi_class_type_infoD0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 STACKTOP = sp;return;
}
function __ZNK10__cxxabiv117__class_type_info9can_catchEPKNS_16__shim_type_infoERPv($this,$thrown_type,$adjustedPtr) {
 $this = $this|0;
 $thrown_type = $thrown_type|0;
 $adjustedPtr = $adjustedPtr|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $cmp = 0, $cmp$i = 0, $cmp4 = 0, $dst_ptr_leading_to_static_ptr = 0, $info = 0, $number_of_dst_type = 0, $path_dst_ptr_to_static_ptr = 0, $retval$1 = 0, $src2dst_offset = 0, $static_type = 0, $vfn = 0, $vtable = 0, dest = 0, label = 0;
 var sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $info = sp;
 $cmp$i = ($this|0)==($thrown_type|0);
 if ($cmp$i) {
  $retval$1 = 1;
  STACKTOP = sp;return ($retval$1|0);
 }
 $0 = ($thrown_type|0)==(0|0);
 if ($0) {
  $retval$1 = 0;
  STACKTOP = sp;return ($retval$1|0);
 }
 $1 = (___dynamic_cast($thrown_type,13384,13440,0)|0);
 $cmp = ($1|0)==(0|0);
 if ($cmp) {
  $retval$1 = 0;
  STACKTOP = sp;return ($retval$1|0);
 }
 dest=$info+0|0; stop=dest+56|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 HEAP32[$info>>2] = $1;
 $static_type = (($info) + 8|0);
 HEAP32[$static_type>>2] = $this;
 $src2dst_offset = (($info) + 12|0);
 HEAP32[$src2dst_offset>>2] = -1;
 $number_of_dst_type = (($info) + 48|0);
 HEAP32[$number_of_dst_type>>2] = 1;
 $vtable = HEAP32[$1>>2]|0;
 $vfn = (($vtable) + 28|0);
 $2 = HEAP32[$vfn>>2]|0;
 $3 = HEAP32[$adjustedPtr>>2]|0;
 FUNCTION_TABLE_viiii[$2 & 511]($1,$info,$3,1);
 $path_dst_ptr_to_static_ptr = (($info) + 24|0);
 $4 = HEAP32[$path_dst_ptr_to_static_ptr>>2]|0;
 $cmp4 = ($4|0)==(1);
 if (!($cmp4)) {
  $retval$1 = 0;
  STACKTOP = sp;return ($retval$1|0);
 }
 $dst_ptr_leading_to_static_ptr = (($info) + 16|0);
 $5 = HEAP32[$dst_ptr_leading_to_static_ptr>>2]|0;
 HEAP32[$adjustedPtr>>2] = $5;
 $retval$1 = 1;
 STACKTOP = sp;return ($retval$1|0);
}
function __ZNK10__cxxabiv117__class_type_info24process_found_base_classEPNS_19__dynamic_cast_infoEPvi($this,$info,$adjustedPtr,$path_below) {
 $this = $this|0;
 $info = $info|0;
 $adjustedPtr = $adjustedPtr|0;
 $path_below = $path_below|0;
 var $0 = 0, $1 = 0, $2 = 0, $add = 0, $cmp = 0, $cmp4 = 0, $cmp7 = 0, $dst_ptr_leading_to_static_ptr = 0, $number_to_static_ptr = 0, $number_to_static_ptr11 = 0, $path_dst_ptr_to_static_ptr = 0, $path_dst_ptr_to_static_ptr12 = 0, $path_dst_ptr_to_static_ptr6 = 0, $search_done = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $dst_ptr_leading_to_static_ptr = (($info) + 16|0);
 $0 = HEAP32[$dst_ptr_leading_to_static_ptr>>2]|0;
 $cmp = ($0|0)==(0|0);
 if ($cmp) {
  HEAP32[$dst_ptr_leading_to_static_ptr>>2] = $adjustedPtr;
  $path_dst_ptr_to_static_ptr = (($info) + 24|0);
  HEAP32[$path_dst_ptr_to_static_ptr>>2] = $path_below;
  $number_to_static_ptr = (($info) + 36|0);
  HEAP32[$number_to_static_ptr>>2] = 1;
  STACKTOP = sp;return;
 }
 $cmp4 = ($0|0)==($adjustedPtr|0);
 if (!($cmp4)) {
  $number_to_static_ptr11 = (($info) + 36|0);
  $2 = HEAP32[$number_to_static_ptr11>>2]|0;
  $add = (($2) + 1)|0;
  HEAP32[$number_to_static_ptr11>>2] = $add;
  $path_dst_ptr_to_static_ptr12 = (($info) + 24|0);
  HEAP32[$path_dst_ptr_to_static_ptr12>>2] = 2;
  $search_done = (($info) + 54|0);
  HEAP8[$search_done>>0] = 1;
  STACKTOP = sp;return;
 }
 $path_dst_ptr_to_static_ptr6 = (($info) + 24|0);
 $1 = HEAP32[$path_dst_ptr_to_static_ptr6>>2]|0;
 $cmp7 = ($1|0)==(2);
 if (!($cmp7)) {
  STACKTOP = sp;return;
 }
 HEAP32[$path_dst_ptr_to_static_ptr6>>2] = $path_below;
 STACKTOP = sp;return;
}
function __ZNK10__cxxabiv117__class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($this,$info,$adjustedPtr,$path_below) {
 $this = $this|0;
 $info = $info|0;
 $adjustedPtr = $adjustedPtr|0;
 $path_below = $path_below|0;
 var $0 = 0, $cmp$i = 0, $static_type = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $static_type = (($info) + 8|0);
 $0 = HEAP32[$static_type>>2]|0;
 $cmp$i = ($0|0)==($this|0);
 if (!($cmp$i)) {
  STACKTOP = sp;return;
 }
 __ZNK10__cxxabiv117__class_type_info24process_found_base_classEPNS_19__dynamic_cast_infoEPvi(0,$info,$adjustedPtr,$path_below);
 STACKTOP = sp;return;
}
function __ZNK10__cxxabiv120__si_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($this,$info,$adjustedPtr,$path_below) {
 $this = $this|0;
 $info = $info|0;
 $adjustedPtr = $adjustedPtr|0;
 $path_below = $path_below|0;
 var $0 = 0, $1 = 0, $2 = 0, $__base_type = 0, $cmp$i = 0, $static_type = 0, $vfn = 0, $vtable = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $static_type = (($info) + 8|0);
 $0 = HEAP32[$static_type>>2]|0;
 $cmp$i = ($this|0)==($0|0);
 if ($cmp$i) {
  __ZNK10__cxxabiv117__class_type_info24process_found_base_classEPNS_19__dynamic_cast_infoEPvi(0,$info,$adjustedPtr,$path_below);
  STACKTOP = sp;return;
 } else {
  $__base_type = (($this) + 8|0);
  $1 = HEAP32[$__base_type>>2]|0;
  $vtable = HEAP32[$1>>2]|0;
  $vfn = (($vtable) + 28|0);
  $2 = HEAP32[$vfn>>2]|0;
  FUNCTION_TABLE_viiii[$2 & 511]($1,$info,$adjustedPtr,$path_below);
  STACKTOP = sp;return;
 }
}
function __ZNK10__cxxabiv122__base_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($this,$info,$adjustedPtr,$path_below) {
 $this = $this|0;
 $info = $info|0;
 $adjustedPtr = $adjustedPtr|0;
 $path_below = $path_below|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $__offset_flags = 0, $add$ptr = 0, $add$ptr4 = 0, $and = 0, $and6 = 0, $cond = 0, $offset_to_base$0 = 0, $shr = 0, $tobool = 0, $tobool7 = 0, $vfn = 0, $vtable3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $__offset_flags = (($this) + 4|0);
 $0 = HEAP32[$__offset_flags>>2]|0;
 $shr = $0 >> 8;
 $and = $0 & 1;
 $tobool = ($and|0)==(0);
 if ($tobool) {
  $offset_to_base$0 = $shr;
 } else {
  $1 = HEAP32[$adjustedPtr>>2]|0;
  $add$ptr = (($1) + ($shr)|0);
  $2 = HEAP32[$add$ptr>>2]|0;
  $offset_to_base$0 = $2;
 }
 $3 = HEAP32[$this>>2]|0;
 $vtable3 = HEAP32[$3>>2]|0;
 $vfn = (($vtable3) + 28|0);
 $4 = HEAP32[$vfn>>2]|0;
 $add$ptr4 = (($adjustedPtr) + ($offset_to_base$0)|0);
 $and6 = $0 & 2;
 $tobool7 = ($and6|0)!=(0);
 $cond = $tobool7 ? $path_below : 2;
 FUNCTION_TABLE_viiii[$4 & 511]($3,$info,$add$ptr4,$cond);
 STACKTOP = sp;return;
}
function __ZNK10__cxxabiv121__vmi_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($this,$info,$adjustedPtr,$path_below) {
 $this = $this|0;
 $info = $info|0;
 $adjustedPtr = $adjustedPtr|0;
 $path_below = $path_below|0;
 var $0 = 0, $1 = 0, $2 = 0, $__base_count = 0, $add$ptr = 0, $arraydecay = 0, $cmp = 0, $cmp$i = 0, $cmp7 = 0, $incdec$ptr = 0, $incdec$ptr6 = 0, $p$0 = 0, $search_done = 0, $static_type = 0, $tobool = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $static_type = (($info) + 8|0);
 $0 = HEAP32[$static_type>>2]|0;
 $cmp$i = ($this|0)==($0|0);
 if ($cmp$i) {
  __ZNK10__cxxabiv117__class_type_info24process_found_base_classEPNS_19__dynamic_cast_infoEPvi(0,$info,$adjustedPtr,$path_below);
  STACKTOP = sp;return;
 }
 $arraydecay = (($this) + 16|0);
 $__base_count = (($this) + 12|0);
 $1 = HEAP32[$__base_count>>2]|0;
 $add$ptr = ((($this) + ($1<<3)|0) + 16|0);
 __ZNK10__cxxabiv122__base_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($arraydecay,$info,$adjustedPtr,$path_below);
 $cmp = ($1|0)>(1);
 if (!($cmp)) {
  STACKTOP = sp;return;
 }
 $incdec$ptr = (($this) + 24|0);
 $search_done = (($info) + 54|0);
 $p$0 = $incdec$ptr;
 while(1) {
  __ZNK10__cxxabiv122__base_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($p$0,$info,$adjustedPtr,$path_below);
  $2 = HEAP8[$search_done>>0]|0;
  $tobool = ($2<<24>>24)==(0);
  if (!($tobool)) {
   label = 7;
   break;
  }
  $incdec$ptr6 = (($p$0) + 8|0);
  $cmp7 = ($incdec$ptr6>>>0)<($add$ptr>>>0);
  if ($cmp7) {
   $p$0 = $incdec$ptr6;
  } else {
   label = 7;
   break;
  }
 }
 if ((label|0) == 7) {
  STACKTOP = sp;return;
 }
}
function ___dynamic_cast($static_ptr,$static_type,$dst_type,$src2dst_offset) {
 $static_ptr = $static_ptr|0;
 $static_type = $static_type|0;
 $dst_type = $dst_type|0;
 $src2dst_offset = $src2dst_offset|0;
 var $$ = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $add$ptr = 0, $add$ptr$ = 0;
 var $arrayidx = 0, $arrayidx1 = 0, $cmp = 0, $cmp$i = 0, $cmp14 = 0, $cmp16 = 0, $cmp19 = 0, $cmp25 = 0, $cmp27 = 0, $cmp30 = 0, $cmp33 = 0, $dst_ptr$0 = 0, $dst_ptr_leading_to_static_ptr = 0, $dst_ptr_not_leading_to_static_ptr = 0, $info = 0, $number_of_dst_type = 0, $number_to_dst_ptr = 0, $number_to_static_ptr = 0, $path_dst_ptr_to_static_ptr = 0, $path_dynamic_ptr_to_dst_ptr = 0;
 var $path_dynamic_ptr_to_static_ptr = 0, $src2dst_offset5 = 0, $static_ptr3 = 0, $static_type4 = 0, $vfn = 0, $vfn11 = 0, $vtable10 = 0, $vtable7 = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $info = sp;
 $0 = HEAP32[$static_ptr>>2]|0;
 $arrayidx = (($0) + -8|0);
 $1 = HEAP32[$arrayidx>>2]|0;
 $2 = $1;
 $add$ptr = (($static_ptr) + ($2)|0);
 $arrayidx1 = (($0) + -4|0);
 $3 = HEAP32[$arrayidx1>>2]|0;
 HEAP32[$info>>2] = $dst_type;
 $static_ptr3 = (($info) + 4|0);
 HEAP32[$static_ptr3>>2] = $static_ptr;
 $static_type4 = (($info) + 8|0);
 HEAP32[$static_type4>>2] = $static_type;
 $src2dst_offset5 = (($info) + 12|0);
 HEAP32[$src2dst_offset5>>2] = $src2dst_offset;
 $dst_ptr_leading_to_static_ptr = (($info) + 16|0);
 $dst_ptr_not_leading_to_static_ptr = (($info) + 20|0);
 $path_dst_ptr_to_static_ptr = (($info) + 24|0);
 $path_dynamic_ptr_to_static_ptr = (($info) + 28|0);
 $path_dynamic_ptr_to_dst_ptr = (($info) + 32|0);
 $number_to_dst_ptr = (($info) + 40|0);
 $cmp$i = ($3|0)==($dst_type|0);
 dest=$dst_ptr_leading_to_static_ptr+0|0; stop=dest+36|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));HEAP16[$dst_ptr_leading_to_static_ptr+36>>1]=0|0;HEAP8[$dst_ptr_leading_to_static_ptr+38>>0]=0|0;
 if ($cmp$i) {
  $number_of_dst_type = (($info) + 48|0);
  HEAP32[$number_of_dst_type>>2] = 1;
  $vtable7 = HEAP32[$3>>2]|0;
  $vfn = (($vtable7) + 20|0);
  $4 = HEAP32[$vfn>>2]|0;
  FUNCTION_TABLE_viiiiii[$4 & 511]($3,$info,$add$ptr,$add$ptr,1,0);
  $5 = HEAP32[$path_dst_ptr_to_static_ptr>>2]|0;
  $cmp = ($5|0)==(1);
  $add$ptr$ = $cmp ? $add$ptr : 0;
  $dst_ptr$0 = $add$ptr$;
  STACKTOP = sp;return ($dst_ptr$0|0);
 }
 $number_to_static_ptr = (($info) + 36|0);
 $vtable10 = HEAP32[$3>>2]|0;
 $vfn11 = (($vtable10) + 24|0);
 $6 = HEAP32[$vfn11>>2]|0;
 FUNCTION_TABLE_viiiii[$6 & 511]($3,$info,$add$ptr,1,0);
 $7 = HEAP32[$number_to_static_ptr>>2]|0;
 if ((($7|0) == 1)) {
  $12 = HEAP32[$path_dst_ptr_to_static_ptr>>2]|0;
  $cmp25 = ($12|0)==(1);
  if (!($cmp25)) {
   $13 = HEAP32[$number_to_dst_ptr>>2]|0;
   $cmp27 = ($13|0)==(0);
   if (!($cmp27)) {
    $dst_ptr$0 = 0;
    STACKTOP = sp;return ($dst_ptr$0|0);
   }
   $14 = HEAP32[$path_dynamic_ptr_to_static_ptr>>2]|0;
   $cmp30 = ($14|0)==(1);
   if (!($cmp30)) {
    $dst_ptr$0 = 0;
    STACKTOP = sp;return ($dst_ptr$0|0);
   }
   $15 = HEAP32[$path_dynamic_ptr_to_dst_ptr>>2]|0;
   $cmp33 = ($15|0)==(1);
   if (!($cmp33)) {
    $dst_ptr$0 = 0;
    STACKTOP = sp;return ($dst_ptr$0|0);
   }
  }
  $16 = HEAP32[$dst_ptr_leading_to_static_ptr>>2]|0;
  $dst_ptr$0 = $16;
  STACKTOP = sp;return ($dst_ptr$0|0);
 } else if ((($7|0) == 0)) {
  $8 = HEAP32[$number_to_dst_ptr>>2]|0;
  $cmp14 = ($8|0)==(1);
  if (!($cmp14)) {
   $dst_ptr$0 = 0;
   STACKTOP = sp;return ($dst_ptr$0|0);
  }
  $9 = HEAP32[$path_dynamic_ptr_to_static_ptr>>2]|0;
  $cmp16 = ($9|0)==(1);
  if (!($cmp16)) {
   $dst_ptr$0 = 0;
   STACKTOP = sp;return ($dst_ptr$0|0);
  }
  $10 = HEAP32[$path_dynamic_ptr_to_dst_ptr>>2]|0;
  $cmp19 = ($10|0)==(1);
  $11 = HEAP32[$dst_ptr_not_leading_to_static_ptr>>2]|0;
  $$ = $cmp19 ? $11 : 0;
  $dst_ptr$0 = $$;
  STACKTOP = sp;return ($dst_ptr$0|0);
 } else {
  $dst_ptr$0 = 0;
  STACKTOP = sp;return ($dst_ptr$0|0);
 }
 return 0|0;
}
function __ZNK10__cxxabiv117__class_type_info29process_static_type_above_dstEPNS_19__dynamic_cast_infoEPKvS4_i($this,$info,$dst_ptr,$current_ptr,$path_below) {
 $this = $this|0;
 $info = $info|0;
 $dst_ptr = $dst_ptr|0;
 $current_ptr = $current_ptr|0;
 $path_below = $path_below|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $add = 0, $cmp = 0, $cmp10 = 0, $cmp13 = 0, $cmp18 = 0, $cmp2 = 0, $cmp21 = 0, $cmp5 = 0, $cmp7 = 0, $dst_ptr_leading_to_static_ptr = 0, $found_any_static_type = 0, $found_our_static_ptr = 0, $number_of_dst_type = 0;
 var $number_of_dst_type17 = 0, $number_to_static_ptr = 0, $number_to_static_ptr26 = 0, $or$cond = 0, $or$cond19 = 0, $path_dst_ptr_to_static_ptr = 0, $path_dst_ptr_to_static_ptr12 = 0, $search_done = 0, $search_done23 = 0, $search_done27 = 0, $static_ptr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $found_any_static_type = (($info) + 53|0);
 HEAP8[$found_any_static_type>>0] = 1;
 $static_ptr = (($info) + 4|0);
 $0 = HEAP32[$static_ptr>>2]|0;
 $cmp = ($0|0)==($current_ptr|0);
 if (!($cmp)) {
  STACKTOP = sp;return;
 }
 $found_our_static_ptr = (($info) + 52|0);
 HEAP8[$found_our_static_ptr>>0] = 1;
 $dst_ptr_leading_to_static_ptr = (($info) + 16|0);
 $1 = HEAP32[$dst_ptr_leading_to_static_ptr>>2]|0;
 $cmp2 = ($1|0)==(0|0);
 if ($cmp2) {
  HEAP32[$dst_ptr_leading_to_static_ptr>>2] = $dst_ptr;
  $path_dst_ptr_to_static_ptr = (($info) + 24|0);
  HEAP32[$path_dst_ptr_to_static_ptr>>2] = $path_below;
  $number_to_static_ptr = (($info) + 36|0);
  HEAP32[$number_to_static_ptr>>2] = 1;
  $number_of_dst_type = (($info) + 48|0);
  $2 = HEAP32[$number_of_dst_type>>2]|0;
  $cmp5 = ($2|0)==(1);
  $cmp7 = ($path_below|0)==(1);
  $or$cond = $cmp5 & $cmp7;
  if (!($or$cond)) {
   STACKTOP = sp;return;
  }
  $search_done = (($info) + 54|0);
  HEAP8[$search_done>>0] = 1;
  STACKTOP = sp;return;
 }
 $cmp10 = ($1|0)==($dst_ptr|0);
 if (!($cmp10)) {
  $number_to_static_ptr26 = (($info) + 36|0);
  $6 = HEAP32[$number_to_static_ptr26>>2]|0;
  $add = (($6) + 1)|0;
  HEAP32[$number_to_static_ptr26>>2] = $add;
  $search_done27 = (($info) + 54|0);
  HEAP8[$search_done27>>0] = 1;
  STACKTOP = sp;return;
 }
 $path_dst_ptr_to_static_ptr12 = (($info) + 24|0);
 $3 = HEAP32[$path_dst_ptr_to_static_ptr12>>2]|0;
 $cmp13 = ($3|0)==(2);
 if ($cmp13) {
  HEAP32[$path_dst_ptr_to_static_ptr12>>2] = $path_below;
  $5 = $path_below;
 } else {
  $5 = $3;
 }
 $number_of_dst_type17 = (($info) + 48|0);
 $4 = HEAP32[$number_of_dst_type17>>2]|0;
 $cmp18 = ($4|0)==(1);
 $cmp21 = ($5|0)==(1);
 $or$cond19 = $cmp18 & $cmp21;
 if (!($or$cond19)) {
  STACKTOP = sp;return;
 }
 $search_done23 = (($info) + 54|0);
 HEAP8[$search_done23>>0] = 1;
 STACKTOP = sp;return;
}
function __ZNK10__cxxabiv121__vmi_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($this,$info,$current_ptr,$path_below,$use_strcmp) {
 $this = $this|0;
 $info = $info|0;
 $current_ptr = $current_ptr|0;
 $path_below = $path_below|0;
 $use_strcmp = $use_strcmp|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $3 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__base_count = 0, $__base_count63 = 0, $__flags34 = 0, $__flags72 = 0, $add = 0, $add$ptr = 0, $add$ptr64 = 0, $and = 0, $and35 = 0, $and73 = 0, $and88 = 0, $arraydecay = 0, $arraydecay62 = 0, $cmp = 0;
 var $cmp$i = 0, $cmp$i73 = 0, $cmp$i74 = 0, $cmp100 = 0, $cmp106 = 0, $cmp11 = 0, $cmp115 = 0, $cmp121 = 0, $cmp16 = 0, $cmp1677 = 0, $cmp2$i = 0, $cmp27 = 0, $cmp44 = 0, $cmp46 = 0, $cmp5 = 0, $cmp7 = 0, $cmp70 = 0, $cmp77 = 0, $cmp85 = 0, $cmp97 = 0;
 var $does_dst_type_point_to_our_static_type$0$off0$lcssa = 0, $does_dst_type_point_to_our_static_type$0$off078 = 0, $does_dst_type_point_to_our_static_type$1$off0 = 0, $dst_ptr_leading_to_static_ptr = 0, $dst_ptr_not_leading_to_static_ptr = 0, $found_any_static_type = 0, $found_our_static_ptr = 0, $incdec$ptr = 0, $incdec$ptr105 = 0, $incdec$ptr120 = 0, $incdec$ptr69 = 0, $incdec$ptr84 = 0, $is_dst_type_derived_from_static_type = 0, $is_dst_type_derived_from_static_type13$0$off080 = 0, $is_dst_type_derived_from_static_type13$1$off0 = 0, $is_dst_type_derived_from_static_type13$2$off0 = 0, $is_dst_type_derived_from_static_type13$2$off086 = 0, $is_dst_type_derived_from_static_type13$2$off087 = 0, $number_to_dst_ptr = 0, $number_to_static_ptr = 0;
 var $number_to_static_ptr76 = 0, $p$079 = 0, $p65$0 = 0, $p65$1 = 0, $p65$2 = 0, $path_dst_ptr_to_static_ptr = 0, $path_dst_ptr_to_static_ptr45 = 0, $path_dst_ptr_to_static_ptr99 = 0, $path_dynamic_ptr_to_dst_ptr = 0, $path_dynamic_ptr_to_dst_ptr10 = 0, $path_dynamic_ptr_to_static_ptr$i = 0, $search_done = 0, $search_done110 = 0, $search_done48 = 0, $search_done79 = 0, $search_done92 = 0, $static_ptr$i = 0, $static_type = 0, $tobool111 = 0, $tobool18 = 0;
 var $tobool22 = 0, $tobool25 = 0, $tobool30 = 0, $tobool36 = 0, $tobool74 = 0, $tobool80 = 0, $tobool89 = 0, $tobool93 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $static_type = (($info) + 8|0);
 $0 = HEAP32[$static_type>>2]|0;
 $cmp$i = ($this|0)==($0|0);
 if ($cmp$i) {
  $static_ptr$i = (($info) + 4|0);
  $1 = HEAP32[$static_ptr$i>>2]|0;
  $cmp$i73 = ($1|0)==($current_ptr|0);
  if (!($cmp$i73)) {
   STACKTOP = sp;return;
  }
  $path_dynamic_ptr_to_static_ptr$i = (($info) + 28|0);
  $2 = HEAP32[$path_dynamic_ptr_to_static_ptr$i>>2]|0;
  $cmp2$i = ($2|0)==(1);
  if ($cmp2$i) {
   STACKTOP = sp;return;
  }
  HEAP32[$path_dynamic_ptr_to_static_ptr$i>>2] = $path_below;
  STACKTOP = sp;return;
 }
 $3 = HEAP32[$info>>2]|0;
 $cmp$i74 = ($this|0)==($3|0);
 if (!($cmp$i74)) {
  $arraydecay62 = (($this) + 16|0);
  $__base_count63 = (($this) + 12|0);
  $17 = HEAP32[$__base_count63>>2]|0;
  $add$ptr64 = ((($this) + ($17<<3)|0) + 16|0);
  __ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($arraydecay62,$info,$current_ptr,$path_below,$use_strcmp);
  $incdec$ptr69 = (($this) + 24|0);
  $cmp70 = ($17|0)>(1);
  if (!($cmp70)) {
   STACKTOP = sp;return;
  }
  $__flags72 = (($this) + 8|0);
  $18 = HEAP32[$__flags72>>2]|0;
  $and73 = $18 & 2;
  $tobool74 = ($and73|0)==(0);
  if ($tobool74) {
   $number_to_static_ptr76 = (($info) + 36|0);
   $19 = HEAP32[$number_to_static_ptr76>>2]|0;
   $cmp77 = ($19|0)==(1);
   if (!($cmp77)) {
    $and88 = $18 & 1;
    $tobool89 = ($and88|0)==(0);
    if ($tobool89) {
     $search_done110 = (($info) + 54|0);
     $p65$2 = $incdec$ptr69;
     while(1) {
      $24 = HEAP8[$search_done110>>0]|0;
      $tobool111 = ($24<<24>>24)==(0);
      if (!($tobool111)) {
       label = 43;
       break;
      }
      $25 = HEAP32[$number_to_static_ptr76>>2]|0;
      $cmp115 = ($25|0)==(1);
      if ($cmp115) {
       label = 43;
       break;
      }
      __ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($p65$2,$info,$current_ptr,$path_below,$use_strcmp);
      $incdec$ptr120 = (($p65$2) + 8|0);
      $cmp121 = ($incdec$ptr120>>>0)<($add$ptr64>>>0);
      if ($cmp121) {
       $p65$2 = $incdec$ptr120;
      } else {
       label = 43;
       break;
      }
     }
     if ((label|0) == 43) {
      STACKTOP = sp;return;
     }
    }
    $path_dst_ptr_to_static_ptr99 = (($info) + 24|0);
    $search_done92 = (($info) + 54|0);
    $p65$1 = $incdec$ptr69;
    while(1) {
     $21 = HEAP8[$search_done92>>0]|0;
     $tobool93 = ($21<<24>>24)==(0);
     if (!($tobool93)) {
      label = 43;
      break;
     }
     $22 = HEAP32[$number_to_static_ptr76>>2]|0;
     $cmp97 = ($22|0)==(1);
     if ($cmp97) {
      $23 = HEAP32[$path_dst_ptr_to_static_ptr99>>2]|0;
      $cmp100 = ($23|0)==(1);
      if ($cmp100) {
       label = 43;
       break;
      }
     }
     __ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($p65$1,$info,$current_ptr,$path_below,$use_strcmp);
     $incdec$ptr105 = (($p65$1) + 8|0);
     $cmp106 = ($incdec$ptr105>>>0)<($add$ptr64>>>0);
     if ($cmp106) {
      $p65$1 = $incdec$ptr105;
     } else {
      label = 43;
      break;
     }
    }
    if ((label|0) == 43) {
     STACKTOP = sp;return;
    }
   }
  }
  $search_done79 = (($info) + 54|0);
  $p65$0 = $incdec$ptr69;
  while(1) {
   $20 = HEAP8[$search_done79>>0]|0;
   $tobool80 = ($20<<24>>24)==(0);
   if (!($tobool80)) {
    label = 43;
    break;
   }
   __ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($p65$0,$info,$current_ptr,$path_below,$use_strcmp);
   $incdec$ptr84 = (($p65$0) + 8|0);
   $cmp85 = ($incdec$ptr84>>>0)<($add$ptr64>>>0);
   if ($cmp85) {
    $p65$0 = $incdec$ptr84;
   } else {
    label = 43;
    break;
   }
  }
  if ((label|0) == 43) {
   STACKTOP = sp;return;
  }
 }
 $dst_ptr_leading_to_static_ptr = (($info) + 16|0);
 $4 = HEAP32[$dst_ptr_leading_to_static_ptr>>2]|0;
 $cmp = ($4|0)==($current_ptr|0);
 if (!($cmp)) {
  $dst_ptr_not_leading_to_static_ptr = (($info) + 20|0);
  $5 = HEAP32[$dst_ptr_not_leading_to_static_ptr>>2]|0;
  $cmp5 = ($5|0)==($current_ptr|0);
  if (!($cmp5)) {
   $path_dynamic_ptr_to_dst_ptr10 = (($info) + 32|0);
   HEAP32[$path_dynamic_ptr_to_dst_ptr10>>2] = $path_below;
   $is_dst_type_derived_from_static_type = (($info) + 44|0);
   $6 = HEAP32[$is_dst_type_derived_from_static_type>>2]|0;
   $cmp11 = ($6|0)==(4);
   if ($cmp11) {
    STACKTOP = sp;return;
   }
   $__base_count = (($this) + 12|0);
   $7 = HEAP32[$__base_count>>2]|0;
   $add$ptr = ((($this) + ($7<<3)|0) + 16|0);
   $cmp1677 = ($7|0)>(0);
   L54: do {
    if ($cmp1677) {
     $arraydecay = (($this) + 16|0);
     $found_our_static_ptr = (($info) + 52|0);
     $found_any_static_type = (($info) + 53|0);
     $search_done = (($info) + 54|0);
     $__flags34 = (($this) + 8|0);
     $path_dst_ptr_to_static_ptr = (($info) + 24|0);
     $does_dst_type_point_to_our_static_type$0$off078 = 0;$is_dst_type_derived_from_static_type13$0$off080 = 0;$p$079 = $arraydecay;
     L56: while(1) {
      HEAP8[$found_our_static_ptr>>0] = 0;
      HEAP8[$found_any_static_type>>0] = 0;
      __ZNK10__cxxabiv122__base_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($p$079,$info,$current_ptr,$current_ptr,1,$use_strcmp);
      $8 = HEAP8[$search_done>>0]|0;
      $tobool18 = ($8<<24>>24)==(0);
      if (!($tobool18)) {
       $does_dst_type_point_to_our_static_type$0$off0$lcssa = $does_dst_type_point_to_our_static_type$0$off078;$is_dst_type_derived_from_static_type13$2$off0 = $is_dst_type_derived_from_static_type13$0$off080;
       break;
      }
      $9 = HEAP8[$found_any_static_type>>0]|0;
      $tobool22 = ($9<<24>>24)==(0);
      do {
       if ($tobool22) {
        $does_dst_type_point_to_our_static_type$1$off0 = $does_dst_type_point_to_our_static_type$0$off078;$is_dst_type_derived_from_static_type13$1$off0 = $is_dst_type_derived_from_static_type13$0$off080;
       } else {
        $10 = HEAP8[$found_our_static_ptr>>0]|0;
        $tobool25 = ($10<<24>>24)==(0);
        if ($tobool25) {
         $13 = HEAP32[$__flags34>>2]|0;
         $and35 = $13 & 1;
         $tobool36 = ($and35|0)==(0);
         if ($tobool36) {
          $does_dst_type_point_to_our_static_type$0$off0$lcssa = $does_dst_type_point_to_our_static_type$0$off078;$is_dst_type_derived_from_static_type13$2$off0 = 1;
          break L56;
         } else {
          $does_dst_type_point_to_our_static_type$1$off0 = $does_dst_type_point_to_our_static_type$0$off078;$is_dst_type_derived_from_static_type13$1$off0 = 1;
          break;
         }
        }
        $11 = HEAP32[$path_dst_ptr_to_static_ptr>>2]|0;
        $cmp27 = ($11|0)==(1);
        if ($cmp27) {
         label = 25;
         break L54;
        }
        $12 = HEAP32[$__flags34>>2]|0;
        $and = $12 & 2;
        $tobool30 = ($and|0)==(0);
        if ($tobool30) {
         label = 25;
         break L54;
        } else {
         $does_dst_type_point_to_our_static_type$1$off0 = 1;$is_dst_type_derived_from_static_type13$1$off0 = 1;
        }
       }
      } while(0);
      $incdec$ptr = (($p$079) + 8|0);
      $cmp16 = ($incdec$ptr>>>0)<($add$ptr>>>0);
      if ($cmp16) {
       $does_dst_type_point_to_our_static_type$0$off078 = $does_dst_type_point_to_our_static_type$1$off0;$is_dst_type_derived_from_static_type13$0$off080 = $is_dst_type_derived_from_static_type13$1$off0;$p$079 = $incdec$ptr;
      } else {
       $does_dst_type_point_to_our_static_type$0$off0$lcssa = $does_dst_type_point_to_our_static_type$1$off0;$is_dst_type_derived_from_static_type13$2$off0 = $is_dst_type_derived_from_static_type13$1$off0;
       break;
      }
     }
     if ($does_dst_type_point_to_our_static_type$0$off0$lcssa) {
      $is_dst_type_derived_from_static_type13$2$off087 = $is_dst_type_derived_from_static_type13$2$off0;
      label = 24;
     } else {
      $is_dst_type_derived_from_static_type13$2$off086 = $is_dst_type_derived_from_static_type13$2$off0;
      label = 21;
     }
    } else {
     $is_dst_type_derived_from_static_type13$2$off086 = 0;
     label = 21;
    }
   } while(0);
   if ((label|0) == 21) {
    HEAP32[$dst_ptr_not_leading_to_static_ptr>>2] = $current_ptr;
    $number_to_dst_ptr = (($info) + 40|0);
    $14 = HEAP32[$number_to_dst_ptr>>2]|0;
    $add = (($14) + 1)|0;
    HEAP32[$number_to_dst_ptr>>2] = $add;
    $number_to_static_ptr = (($info) + 36|0);
    $15 = HEAP32[$number_to_static_ptr>>2]|0;
    $cmp44 = ($15|0)==(1);
    if ($cmp44) {
     $path_dst_ptr_to_static_ptr45 = (($info) + 24|0);
     $16 = HEAP32[$path_dst_ptr_to_static_ptr45>>2]|0;
     $cmp46 = ($16|0)==(2);
     if ($cmp46) {
      $search_done48 = (($info) + 54|0);
      HEAP8[$search_done48>>0] = 1;
      if ($is_dst_type_derived_from_static_type13$2$off086) {
       label = 25;
      } else {
       label = 26;
      }
     } else {
      $is_dst_type_derived_from_static_type13$2$off087 = $is_dst_type_derived_from_static_type13$2$off086;
      label = 24;
     }
    } else {
     $is_dst_type_derived_from_static_type13$2$off087 = $is_dst_type_derived_from_static_type13$2$off086;
     label = 24;
    }
   }
   if ((label|0) == 24) {
    if ($is_dst_type_derived_from_static_type13$2$off087) {
     label = 25;
    } else {
     label = 26;
    }
   }
   if ((label|0) == 25) {
    HEAP32[$is_dst_type_derived_from_static_type>>2] = 3;
    STACKTOP = sp;return;
   }
   else if ((label|0) == 26) {
    HEAP32[$is_dst_type_derived_from_static_type>>2] = 4;
    STACKTOP = sp;return;
   }
  }
 }
 $cmp7 = ($path_below|0)==(1);
 if (!($cmp7)) {
  STACKTOP = sp;return;
 }
 $path_dynamic_ptr_to_dst_ptr = (($info) + 32|0);
 HEAP32[$path_dynamic_ptr_to_dst_ptr>>2] = 1;
 STACKTOP = sp;return;
}
function __ZNK10__cxxabiv122__base_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($this,$info,$dst_ptr,$current_ptr,$path_below,$use_strcmp) {
 $this = $this|0;
 $info = $info|0;
 $dst_ptr = $dst_ptr|0;
 $current_ptr = $current_ptr|0;
 $path_below = $path_below|0;
 $use_strcmp = $use_strcmp|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $__offset_flags = 0, $add$ptr = 0, $add$ptr4 = 0, $and = 0, $and6 = 0, $cond = 0, $offset_to_base$0 = 0, $shr = 0, $tobool = 0, $tobool7 = 0, $vfn = 0, $vtable3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $__offset_flags = (($this) + 4|0);
 $0 = HEAP32[$__offset_flags>>2]|0;
 $shr = $0 >> 8;
 $and = $0 & 1;
 $tobool = ($and|0)==(0);
 if ($tobool) {
  $offset_to_base$0 = $shr;
 } else {
  $1 = HEAP32[$current_ptr>>2]|0;
  $add$ptr = (($1) + ($shr)|0);
  $2 = HEAP32[$add$ptr>>2]|0;
  $offset_to_base$0 = $2;
 }
 $3 = HEAP32[$this>>2]|0;
 $vtable3 = HEAP32[$3>>2]|0;
 $vfn = (($vtable3) + 20|0);
 $4 = HEAP32[$vfn>>2]|0;
 $add$ptr4 = (($current_ptr) + ($offset_to_base$0)|0);
 $and6 = $0 & 2;
 $tobool7 = ($and6|0)!=(0);
 $cond = $tobool7 ? $path_below : 2;
 FUNCTION_TABLE_viiiiii[$4 & 511]($3,$info,$dst_ptr,$add$ptr4,$cond,$use_strcmp);
 STACKTOP = sp;return;
}
function __ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($this,$info,$current_ptr,$path_below,$use_strcmp) {
 $this = $this|0;
 $info = $info|0;
 $current_ptr = $current_ptr|0;
 $path_below = $path_below|0;
 $use_strcmp = $use_strcmp|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $__offset_flags = 0, $add$ptr = 0, $add$ptr4 = 0, $and = 0, $and6 = 0, $cond = 0, $offset_to_base$0 = 0, $shr = 0, $tobool = 0, $tobool7 = 0, $vfn = 0, $vtable3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $__offset_flags = (($this) + 4|0);
 $0 = HEAP32[$__offset_flags>>2]|0;
 $shr = $0 >> 8;
 $and = $0 & 1;
 $tobool = ($and|0)==(0);
 if ($tobool) {
  $offset_to_base$0 = $shr;
 } else {
  $1 = HEAP32[$current_ptr>>2]|0;
  $add$ptr = (($1) + ($shr)|0);
  $2 = HEAP32[$add$ptr>>2]|0;
  $offset_to_base$0 = $2;
 }
 $3 = HEAP32[$this>>2]|0;
 $vtable3 = HEAP32[$3>>2]|0;
 $vfn = (($vtable3) + 24|0);
 $4 = HEAP32[$vfn>>2]|0;
 $add$ptr4 = (($current_ptr) + ($offset_to_base$0)|0);
 $and6 = $0 & 2;
 $tobool7 = ($and6|0)!=(0);
 $cond = $tobool7 ? $path_below : 2;
 FUNCTION_TABLE_viiiii[$4 & 511]($3,$info,$add$ptr4,$cond,$use_strcmp);
 STACKTOP = sp;return;
}
function __ZNK10__cxxabiv120__si_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($this,$info,$current_ptr,$path_below,$use_strcmp) {
 $this = $this|0;
 $info = $info|0;
 $current_ptr = $current_ptr|0;
 $path_below = $path_below|0;
 $use_strcmp = $use_strcmp|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__base_type = 0, $__base_type40 = 0, $add = 0, $cmp = 0;
 var $cmp$i = 0, $cmp$i32 = 0, $cmp$i33 = 0, $cmp11 = 0, $cmp2$i = 0, $cmp26 = 0, $cmp27 = 0, $cmp5 = 0, $cmp7 = 0, $dst_ptr_leading_to_static_ptr = 0, $dst_ptr_not_leading_to_static_ptr = 0, $found_any_static_type = 0, $found_our_static_ptr = 0, $is_dst_type_derived_from_static_type = 0, $is_dst_type_derived_from_static_type13$0$off034 = 0, $not$tobool19 = 0, $number_to_dst_ptr = 0, $number_to_static_ptr = 0, $path_dst_ptr_to_static_ptr = 0, $path_dynamic_ptr_to_dst_ptr = 0;
 var $path_dynamic_ptr_to_dst_ptr10 = 0, $path_dynamic_ptr_to_static_ptr$i = 0, $search_done = 0, $static_ptr$i = 0, $static_type = 0, $tobool16 = 0, $vfn = 0, $vfn42 = 0, $vtable = 0, $vtable41 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $static_type = (($info) + 8|0);
 $0 = HEAP32[$static_type>>2]|0;
 $cmp$i = ($this|0)==($0|0);
 if ($cmp$i) {
  $static_ptr$i = (($info) + 4|0);
  $1 = HEAP32[$static_ptr$i>>2]|0;
  $cmp$i32 = ($1|0)==($current_ptr|0);
  if (!($cmp$i32)) {
   STACKTOP = sp;return;
  }
  $path_dynamic_ptr_to_static_ptr$i = (($info) + 28|0);
  $2 = HEAP32[$path_dynamic_ptr_to_static_ptr$i>>2]|0;
  $cmp2$i = ($2|0)==(1);
  if ($cmp2$i) {
   STACKTOP = sp;return;
  }
  HEAP32[$path_dynamic_ptr_to_static_ptr$i>>2] = $path_below;
  STACKTOP = sp;return;
 }
 $3 = HEAP32[$info>>2]|0;
 $cmp$i33 = ($this|0)==($3|0);
 if (!($cmp$i33)) {
  $__base_type40 = (($this) + 8|0);
  $14 = HEAP32[$__base_type40>>2]|0;
  $vtable41 = HEAP32[$14>>2]|0;
  $vfn42 = (($vtable41) + 24|0);
  $15 = HEAP32[$vfn42>>2]|0;
  FUNCTION_TABLE_viiiii[$15 & 511]($14,$info,$current_ptr,$path_below,$use_strcmp);
  STACKTOP = sp;return;
 }
 $dst_ptr_leading_to_static_ptr = (($info) + 16|0);
 $4 = HEAP32[$dst_ptr_leading_to_static_ptr>>2]|0;
 $cmp = ($4|0)==($current_ptr|0);
 if (!($cmp)) {
  $dst_ptr_not_leading_to_static_ptr = (($info) + 20|0);
  $5 = HEAP32[$dst_ptr_not_leading_to_static_ptr>>2]|0;
  $cmp5 = ($5|0)==($current_ptr|0);
  if (!($cmp5)) {
   $path_dynamic_ptr_to_dst_ptr10 = (($info) + 32|0);
   HEAP32[$path_dynamic_ptr_to_dst_ptr10>>2] = $path_below;
   $is_dst_type_derived_from_static_type = (($info) + 44|0);
   $6 = HEAP32[$is_dst_type_derived_from_static_type>>2]|0;
   $cmp11 = ($6|0)==(4);
   if ($cmp11) {
    STACKTOP = sp;return;
   }
   $found_our_static_ptr = (($info) + 52|0);
   HEAP8[$found_our_static_ptr>>0] = 0;
   $found_any_static_type = (($info) + 53|0);
   HEAP8[$found_any_static_type>>0] = 0;
   $__base_type = (($this) + 8|0);
   $7 = HEAP32[$__base_type>>2]|0;
   $vtable = HEAP32[$7>>2]|0;
   $vfn = (($vtable) + 20|0);
   $8 = HEAP32[$vfn>>2]|0;
   FUNCTION_TABLE_viiiiii[$8 & 511]($7,$info,$current_ptr,$current_ptr,1,$use_strcmp);
   $9 = HEAP8[$found_any_static_type>>0]|0;
   $tobool16 = ($9<<24>>24)==(0);
   if ($tobool16) {
    $is_dst_type_derived_from_static_type13$0$off034 = 0;
    label = 13;
   } else {
    $10 = HEAP8[$found_our_static_ptr>>0]|0;
    $not$tobool19 = ($10<<24>>24)==(0);
    if ($not$tobool19) {
     $is_dst_type_derived_from_static_type13$0$off034 = 1;
     label = 13;
    }
   }
   do {
    if ((label|0) == 13) {
     HEAP32[$dst_ptr_not_leading_to_static_ptr>>2] = $current_ptr;
     $number_to_dst_ptr = (($info) + 40|0);
     $11 = HEAP32[$number_to_dst_ptr>>2]|0;
     $add = (($11) + 1)|0;
     HEAP32[$number_to_dst_ptr>>2] = $add;
     $number_to_static_ptr = (($info) + 36|0);
     $12 = HEAP32[$number_to_static_ptr>>2]|0;
     $cmp26 = ($12|0)==(1);
     if ($cmp26) {
      $path_dst_ptr_to_static_ptr = (($info) + 24|0);
      $13 = HEAP32[$path_dst_ptr_to_static_ptr>>2]|0;
      $cmp27 = ($13|0)==(2);
      if ($cmp27) {
       $search_done = (($info) + 54|0);
       HEAP8[$search_done>>0] = 1;
       if ($is_dst_type_derived_from_static_type13$0$off034) {
        break;
       }
      } else {
       label = 16;
      }
     } else {
      label = 16;
     }
     if ((label|0) == 16) {
      if ($is_dst_type_derived_from_static_type13$0$off034) {
       break;
      }
     }
     HEAP32[$is_dst_type_derived_from_static_type>>2] = 4;
     STACKTOP = sp;return;
    }
   } while(0);
   HEAP32[$is_dst_type_derived_from_static_type>>2] = 3;
   STACKTOP = sp;return;
  }
 }
 $cmp7 = ($path_below|0)==(1);
 if (!($cmp7)) {
  STACKTOP = sp;return;
 }
 $path_dynamic_ptr_to_dst_ptr = (($info) + 32|0);
 HEAP32[$path_dynamic_ptr_to_dst_ptr>>2] = 1;
 STACKTOP = sp;return;
}
function __ZNK10__cxxabiv117__class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($this,$info,$current_ptr,$path_below,$use_strcmp) {
 $this = $this|0;
 $info = $info|0;
 $current_ptr = $current_ptr|0;
 $path_below = $path_below|0;
 $use_strcmp = $use_strcmp|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $add = 0, $cmp = 0, $cmp$i = 0, $cmp$i19 = 0, $cmp$i20 = 0, $cmp12 = 0, $cmp13 = 0, $cmp2$i = 0, $cmp5 = 0, $cmp7 = 0, $dst_ptr_leading_to_static_ptr = 0;
 var $dst_ptr_not_leading_to_static_ptr = 0, $is_dst_type_derived_from_static_type = 0, $number_to_dst_ptr = 0, $number_to_static_ptr = 0, $path_dst_ptr_to_static_ptr = 0, $path_dynamic_ptr_to_dst_ptr = 0, $path_dynamic_ptr_to_dst_ptr10 = 0, $path_dynamic_ptr_to_static_ptr$i = 0, $search_done = 0, $static_ptr$i = 0, $static_type = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $static_type = (($info) + 8|0);
 $0 = HEAP32[$static_type>>2]|0;
 $cmp$i = ($0|0)==($this|0);
 if ($cmp$i) {
  $static_ptr$i = (($info) + 4|0);
  $1 = HEAP32[$static_ptr$i>>2]|0;
  $cmp$i20 = ($1|0)==($current_ptr|0);
  if (!($cmp$i20)) {
   STACKTOP = sp;return;
  }
  $path_dynamic_ptr_to_static_ptr$i = (($info) + 28|0);
  $2 = HEAP32[$path_dynamic_ptr_to_static_ptr$i>>2]|0;
  $cmp2$i = ($2|0)==(1);
  if ($cmp2$i) {
   STACKTOP = sp;return;
  }
  HEAP32[$path_dynamic_ptr_to_static_ptr$i>>2] = $path_below;
  STACKTOP = sp;return;
 }
 $3 = HEAP32[$info>>2]|0;
 $cmp$i19 = ($3|0)==($this|0);
 if (!($cmp$i19)) {
  STACKTOP = sp;return;
 }
 $dst_ptr_leading_to_static_ptr = (($info) + 16|0);
 $4 = HEAP32[$dst_ptr_leading_to_static_ptr>>2]|0;
 $cmp = ($4|0)==($current_ptr|0);
 if (!($cmp)) {
  $dst_ptr_not_leading_to_static_ptr = (($info) + 20|0);
  $5 = HEAP32[$dst_ptr_not_leading_to_static_ptr>>2]|0;
  $cmp5 = ($5|0)==($current_ptr|0);
  if (!($cmp5)) {
   $path_dynamic_ptr_to_dst_ptr10 = (($info) + 32|0);
   HEAP32[$path_dynamic_ptr_to_dst_ptr10>>2] = $path_below;
   HEAP32[$dst_ptr_not_leading_to_static_ptr>>2] = $current_ptr;
   $number_to_dst_ptr = (($info) + 40|0);
   $6 = HEAP32[$number_to_dst_ptr>>2]|0;
   $add = (($6) + 1)|0;
   HEAP32[$number_to_dst_ptr>>2] = $add;
   $number_to_static_ptr = (($info) + 36|0);
   $7 = HEAP32[$number_to_static_ptr>>2]|0;
   $cmp12 = ($7|0)==(1);
   if ($cmp12) {
    $path_dst_ptr_to_static_ptr = (($info) + 24|0);
    $8 = HEAP32[$path_dst_ptr_to_static_ptr>>2]|0;
    $cmp13 = ($8|0)==(2);
    if ($cmp13) {
     $search_done = (($info) + 54|0);
     HEAP8[$search_done>>0] = 1;
    }
   }
   $is_dst_type_derived_from_static_type = (($info) + 44|0);
   HEAP32[$is_dst_type_derived_from_static_type>>2] = 4;
   STACKTOP = sp;return;
  }
 }
 $cmp7 = ($path_below|0)==(1);
 if (!($cmp7)) {
  STACKTOP = sp;return;
 }
 $path_dynamic_ptr_to_dst_ptr = (($info) + 32|0);
 HEAP32[$path_dynamic_ptr_to_dst_ptr>>2] = 1;
 STACKTOP = sp;return;
}
function __ZNK10__cxxabiv121__vmi_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($this,$info,$dst_ptr,$current_ptr,$path_below,$use_strcmp) {
 $this = $this|0;
 $info = $info|0;
 $dst_ptr = $dst_ptr|0;
 $current_ptr = $current_ptr|0;
 $path_below = $path_below|0;
 $use_strcmp = $use_strcmp|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__base_count = 0, $__flags = 0, $add$ptr = 0, $and = 0, $and30 = 0, $arraydecay = 0, $cmp = 0, $cmp$i = 0, $cmp19 = 0, $cmp40 = 0;
 var $found_any_static_type5 = 0, $found_our_static_ptr2 = 0, $incdec$ptr = 0, $incdec$ptr39 = 0, $p$0 = 0, $path_dst_ptr_to_static_ptr = 0, $search_done = 0, $static_type = 0, $tobool14 = 0, $tobool17 = 0, $tobool22 = 0, $tobool27 = 0, $tobool31 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $static_type = (($info) + 8|0);
 $0 = HEAP32[$static_type>>2]|0;
 $cmp$i = ($this|0)==($0|0);
 if ($cmp$i) {
  __ZNK10__cxxabiv117__class_type_info29process_static_type_above_dstEPNS_19__dynamic_cast_infoEPKvS4_i(0,$info,$dst_ptr,$current_ptr,$path_below);
  STACKTOP = sp;return;
 }
 $found_our_static_ptr2 = (($info) + 52|0);
 $1 = HEAP8[$found_our_static_ptr2>>0]|0;
 $found_any_static_type5 = (($info) + 53|0);
 $2 = HEAP8[$found_any_static_type5>>0]|0;
 $arraydecay = (($this) + 16|0);
 $__base_count = (($this) + 12|0);
 $3 = HEAP32[$__base_count>>2]|0;
 $add$ptr = ((($this) + ($3<<3)|0) + 16|0);
 HEAP8[$found_our_static_ptr2>>0] = 0;
 HEAP8[$found_any_static_type5>>0] = 0;
 __ZNK10__cxxabiv122__base_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($arraydecay,$info,$dst_ptr,$current_ptr,$path_below,$use_strcmp);
 $cmp = ($3|0)>(1);
 L5: do {
  if ($cmp) {
   $incdec$ptr = (($this) + 24|0);
   $path_dst_ptr_to_static_ptr = (($info) + 24|0);
   $__flags = (($this) + 8|0);
   $search_done = (($info) + 54|0);
   $p$0 = $incdec$ptr;
   while(1) {
    $4 = HEAP8[$search_done>>0]|0;
    $tobool14 = ($4<<24>>24)==(0);
    if (!($tobool14)) {
     break L5;
    }
    $5 = HEAP8[$found_our_static_ptr2>>0]|0;
    $tobool17 = ($5<<24>>24)==(0);
    if ($tobool17) {
     $8 = HEAP8[$found_any_static_type5>>0]|0;
     $tobool27 = ($8<<24>>24)==(0);
     if (!($tobool27)) {
      $9 = HEAP32[$__flags>>2]|0;
      $and30 = $9 & 1;
      $tobool31 = ($and30|0)==(0);
      if ($tobool31) {
       break L5;
      }
     }
    } else {
     $6 = HEAP32[$path_dst_ptr_to_static_ptr>>2]|0;
     $cmp19 = ($6|0)==(1);
     if ($cmp19) {
      break L5;
     }
     $7 = HEAP32[$__flags>>2]|0;
     $and = $7 & 2;
     $tobool22 = ($and|0)==(0);
     if ($tobool22) {
      break L5;
     }
    }
    HEAP8[$found_our_static_ptr2>>0] = 0;
    HEAP8[$found_any_static_type5>>0] = 0;
    __ZNK10__cxxabiv122__base_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($p$0,$info,$dst_ptr,$current_ptr,$path_below,$use_strcmp);
    $incdec$ptr39 = (($p$0) + 8|0);
    $cmp40 = ($incdec$ptr39>>>0)<($add$ptr>>>0);
    if ($cmp40) {
     $p$0 = $incdec$ptr39;
    } else {
     break;
    }
   }
  }
 } while(0);
 HEAP8[$found_our_static_ptr2>>0] = $1;
 HEAP8[$found_any_static_type5>>0] = $2;
 STACKTOP = sp;return;
}
function __ZNK10__cxxabiv120__si_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($this,$info,$dst_ptr,$current_ptr,$path_below,$use_strcmp) {
 $this = $this|0;
 $info = $info|0;
 $dst_ptr = $dst_ptr|0;
 $current_ptr = $current_ptr|0;
 $path_below = $path_below|0;
 $use_strcmp = $use_strcmp|0;
 var $0 = 0, $1 = 0, $2 = 0, $__base_type = 0, $cmp$i = 0, $static_type = 0, $vfn = 0, $vtable = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $static_type = (($info) + 8|0);
 $0 = HEAP32[$static_type>>2]|0;
 $cmp$i = ($this|0)==($0|0);
 if ($cmp$i) {
  __ZNK10__cxxabiv117__class_type_info29process_static_type_above_dstEPNS_19__dynamic_cast_infoEPKvS4_i(0,$info,$dst_ptr,$current_ptr,$path_below);
  STACKTOP = sp;return;
 } else {
  $__base_type = (($this) + 8|0);
  $1 = HEAP32[$__base_type>>2]|0;
  $vtable = HEAP32[$1>>2]|0;
  $vfn = (($vtable) + 20|0);
  $2 = HEAP32[$vfn>>2]|0;
  FUNCTION_TABLE_viiiiii[$2 & 511]($1,$info,$dst_ptr,$current_ptr,$path_below,$use_strcmp);
  STACKTOP = sp;return;
 }
}
function __ZNK10__cxxabiv117__class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($this,$info,$dst_ptr,$current_ptr,$path_below,$use_strcmp) {
 $this = $this|0;
 $info = $info|0;
 $dst_ptr = $dst_ptr|0;
 $current_ptr = $current_ptr|0;
 $path_below = $path_below|0;
 $use_strcmp = $use_strcmp|0;
 var $0 = 0, $cmp$i = 0, $static_type = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $static_type = (($info) + 8|0);
 $0 = HEAP32[$static_type>>2]|0;
 $cmp$i = ($0|0)==($this|0);
 if (!($cmp$i)) {
  STACKTOP = sp;return;
 }
 __ZNK10__cxxabiv117__class_type_info29process_static_type_above_dstEPNS_19__dynamic_cast_infoEPKvS4_i(0,$info,$dst_ptr,$current_ptr,$path_below);
 STACKTOP = sp;return;
}
function ___cxa_can_catch($catchType,$excpType,$thrown) {
 $catchType = $catchType|0;
 $excpType = $excpType|0;
 $thrown = $thrown|0;
 var $0 = 0, $1 = 0, $2 = 0, $call = 0, $conv = 0, $temp = 0, $vfn = 0, $vtable = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $temp = sp;
 $0 = HEAP32[$thrown>>2]|0;
 HEAP32[$temp>>2] = $0;
 $vtable = HEAP32[$catchType>>2]|0;
 $vfn = (($vtable) + 16|0);
 $1 = HEAP32[$vfn>>2]|0;
 $call = (FUNCTION_TABLE_iiii[$1 & 511]($catchType,$excpType,$temp)|0);
 $conv = $call&1;
 if (!($call)) {
  STACKTOP = sp;return ($conv|0);
 }
 $2 = HEAP32[$temp>>2]|0;
 HEAP32[$thrown>>2] = $2;
 STACKTOP = sp;return ($conv|0);
}
function ___cxa_is_pointer_type($type) {
 $type = $type|0;
 var $0 = 0, $1 = 0, $2 = 0, $conv = 0, $phitmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($type|0)==(0|0);
 if ($0) {
  $2 = 0;
 } else {
  $1 = (___dynamic_cast($type,13384,13552,0)|0);
  $phitmp = ($1|0)!=(0|0);
  $2 = $phitmp;
 }
 $conv = $2&1;
 STACKTOP = sp;return ($conv|0);
}
function __ZSt17__throw_bad_allocv() {
 var $exception = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $exception = (___cxa_allocate_exception(4)|0);
 __ZNSt9bad_allocC2Ev($exception);
 ___cxa_throw(($exception|0),(12920|0),(325|0));
 // unreachable;
}
function _malloc($bytes) {
 $bytes = $bytes|0;
 var $$pre = 0, $$pre$i = 0, $$pre$i$i = 0, $$pre$i144 = 0, $$pre$i66$i = 0, $$pre$phi$i$iZ2D = 0, $$pre$phi$i145Z2D = 0, $$pre$phi$i67$iZ2D = 0, $$pre$phi$iZ2D = 0, $$pre$phiZ2D = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0;
 var $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0;
 var $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0;
 var $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0;
 var $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0;
 var $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0;
 var $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0;
 var $215 = 0, $216 = 0, $217 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0;
 var $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0;
 var $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0;
 var $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0;
 var $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $F$0$i$i = 0, $F104$0 = 0, $F197$0$i = 0, $F224$0$i$i = 0, $F289$0$i = 0, $I252$0$i$i = 0, $I315$0$i = 0, $I57$0$c$i$i = 0, $I57$0$i$i = 0, $K105$017$i$i = 0, $K305$043$i$i = 0, $K372$024$i = 0;
 var $R$0$i = 0, $R$0$i$i = 0, $R$0$i135 = 0, $R$1$i = 0, $R$1$i$i = 0, $R$1$i137 = 0, $RP$0$i = 0, $RP$0$i$i = 0, $RP$0$i134 = 0, $T$0$lcssa$i = 0, $T$0$lcssa$i$i = 0, $T$0$lcssa$i69$i = 0, $T$016$i$i = 0, $T$023$i = 0, $T$042$i$i = 0, $add$i = 0, $add$i$i = 0, $add$i113 = 0, $add$i147 = 0, $add$ptr$i = 0;
 var $add$ptr$i$i = 0, $add$ptr$i$i$i = 0, $add$ptr$i10$i$i = 0, $add$ptr$i11$i = 0, $add$ptr$i126 = 0, $add$ptr$i160 = 0, $add$ptr$i22$i = 0, $add$ptr$i37$i = 0, $add$ptr$sum$i$i = 0, $add$ptr$sum$i141172 = 0, $add$ptr$sum$i173 = 0, $add$ptr$sum1$i = 0, $add$ptr$sum1$i142 = 0, $add$ptr$sum10$i = 0, $add$ptr$sum104 = 0, $add$ptr$sum11$i = 0, $add$ptr$sum12$i = 0, $add$ptr$sum13$i = 0, $add$ptr$sum14$i = 0, $add$ptr$sum2$i = 0;
 var $add$ptr$sum3$i = 0, $add$ptr$sum4$i = 0, $add$ptr$sum5$i = 0, $add$ptr$sum6$i = 0, $add$ptr$sum7$i = 0, $add$ptr$sum8$i = 0, $add$ptr$sum9$i = 0, $add$ptr14$i$i = 0, $add$ptr16$i$i = 0, $add$ptr16$sum$i$i = 0, $add$ptr16$sum23$i$i = 0, $add$ptr16$sum25$i$i = 0, $add$ptr16$sum2627$i$i = 0, $add$ptr16$sum2829$i$i = 0, $add$ptr16$sum3031$i$i = 0, $add$ptr16$sum32$i$i = 0, $add$ptr16$sum4$i$i = 0, $add$ptr16$sum56$i$i = 0, $add$ptr16$sum7$i$i = 0, $add$ptr165 = 0;
 var $add$ptr165$sum = 0, $add$ptr168 = 0, $add$ptr17$i$i = 0, $add$ptr17$sum$i$i = 0, $add$ptr17$sum10$i$i = 0, $add$ptr17$sum11$i$i = 0, $add$ptr17$sum12$i$i = 0, $add$ptr17$sum13$i$i = 0, $add$ptr17$sum16$i$i = 0, $add$ptr17$sum17$i$i = 0, $add$ptr17$sum18$i$i = 0, $add$ptr17$sum19$i$i = 0, $add$ptr17$sum20$i$i = 0, $add$ptr17$sum21$i$i = 0, $add$ptr17$sum22$i$i = 0, $add$ptr17$sum23$i$i = 0, $add$ptr17$sum33$i$i = 0, $add$ptr17$sum34$i$i = 0, $add$ptr17$sum35$i$i = 0, $add$ptr17$sum8$i$i = 0;
 var $add$ptr17$sum9$i$i = 0, $add$ptr177$sum = 0, $add$ptr181 = 0, $add$ptr181$sum$i = 0, $add$ptr186$i = 0, $add$ptr190 = 0, $add$ptr190$i = 0, $add$ptr190$sum = 0, $add$ptr196 = 0, $add$ptr2$sum$i$i = 0, $add$ptr2$sum1$i$i = 0, $add$ptr205$i$i = 0, $add$ptr212$i$i = 0, $add$ptr224$i = 0, $add$ptr224$sum$i = 0, $add$ptr224$sum131$i = 0, $add$ptr224$sum132$i = 0, $add$ptr224$sum133$i = 0, $add$ptr224$sum134$i = 0, $add$ptr224$sum135$i = 0;
 var $add$ptr224$sum136$i = 0, $add$ptr224$sum137$i = 0, $add$ptr224$sum138$i = 0, $add$ptr224$sum139$i = 0, $add$ptr224$sum140$i = 0, $add$ptr224$sum141$i = 0, $add$ptr224$sum142$i = 0, $add$ptr224$sum143$i = 0, $add$ptr225$i = 0, $add$ptr2418$i$i = 0, $add$ptr2420$i$i = 0, $add$ptr255$i = 0, $add$ptr255$sum$i = 0, $add$ptr262$i = 0, $add$ptr272$sum$i = 0, $add$ptr281$i = 0, $add$ptr3$i$i = 0, $add$ptr30$i$i = 0, $add$ptr30$i52$i = 0, $add$ptr30$sum$i$i = 0;
 var $add$ptr368$i$i = 0, $add$ptr4$i$i = 0, $add$ptr4$i$i$i = 0, $add$ptr4$i28$i = 0, $add$ptr4$i43$i = 0, $add$ptr4$sum$i$i = 0, $add$ptr4$sum$i$i$i = 0, $add$ptr4$sum$i31$i = 0, $add$ptr4$sum$i49$i = 0, $add$ptr4$sum1$i$i = 0, $add$ptr4$sum1415$i$i = 0, $add$ptr436$i = 0, $add$ptr5$i$i = 0, $add$ptr6$sum$i$i = 0, $add$ptr6$sum$i$i$i = 0, $add$ptr6$sum$i33$i = 0, $add$ptr7$i$i = 0, $add$ptr82$i$i = 0, $add$ptr95 = 0, $add$ptr95$sum102 = 0;
 var $add$ptr98 = 0, $add10$i = 0, $add107$i = 0, $add13$i = 0, $add137$i = 0, $add14$i = 0, $add143 = 0, $add147$i = 0, $add17$i = 0, $add17$i150 = 0, $add177$i = 0, $add18$i = 0, $add19$i = 0, $add2 = 0, $add20$i = 0, $add206$i$i = 0, $add209$i = 0, $add212$i = 0, $add22$i = 0, $add243$i = 0;
 var $add26$i$i = 0, $add267$i = 0, $add269$i$i = 0, $add274$i$i = 0, $add278$i$i = 0, $add280$i$i = 0, $add283$i$i = 0, $add336$i = 0, $add341$i = 0, $add345$i = 0, $add347$i = 0, $add350$i = 0, $add43$i = 0, $add48$i = 0, $add50 = 0, $add51$i = 0, $add54 = 0, $add58 = 0, $add62 = 0, $add64 = 0;
 var $add74$i = 0, $add74$i$i = 0, $add77$i = 0, $add79$i$i = 0, $add8 = 0, $add81$i = 0, $add83$i$i = 0, $add85$i = 0, $add85$i$i = 0, $add88$i$i = 0, $add89$i = 0, $add9$i = 0, $add91$i = 0, $add98$i = 0, $and = 0, $and$i = 0, $and$i$i = 0, $and$i$i$i = 0, $and$i110 = 0, $and$i12$i = 0;
 var $and$i14$i = 0, $and$i23$i = 0, $and$i38$i = 0, $and101$i = 0, $and103$i = 0, $and106 = 0, $and11$i = 0, $and119$i$i = 0, $and11914$i$i = 0, $and12$i = 0, $and13$i = 0, $and13$i$i = 0, $and133$i$i = 0, $and14 = 0, $and144 = 0, $and17$i = 0, $and191$i = 0, $and193$i = 0, $and199$i = 0, $and209$i$i = 0;
 var $and21$i = 0, $and21$i116 = 0, $and227$i$i = 0, $and233$i = 0, $and26$i = 0, $and264$i$i = 0, $and268$i$i = 0, $and273$i$i = 0, $and282$i$i = 0, $and291$i = 0, $and295$i$i = 0, $and3$i = 0, $and3$i$i = 0, $and3$i$i$i = 0, $and3$i25$i = 0, $and3$i40$i = 0, $and30$i = 0, $and318$i$i = 0, $and31840$i$i = 0, $and32$i = 0;
 var $and32$i$i = 0, $and33$i$i = 0, $and330$i = 0, $and335$i = 0, $and340$i = 0, $and349$i = 0, $and362$i = 0, $and37$i$i = 0, $and386$i = 0, $and38621$i = 0, $and39$i = 0, $and4 = 0, $and40$i$i = 0, $and41 = 0, $and43 = 0, $and46 = 0, $and46$i = 0, $and49 = 0, $and49$i$i = 0, $and53 = 0;
 var $and57 = 0, $and6$i = 0, $and6$i$i = 0, $and6$i44$i = 0, $and61 = 0, $and63$i = 0, $and67$i = 0, $and69$i$i = 0, $and7 = 0, $and7$i$i = 0, $and72$i = 0, $and73$i$i = 0, $and74 = 0, $and76$i = 0, $and77$$i = 0, $and77$i = 0, $and78$i$i = 0, $and8$i = 0, $and80$i = 0, $and84$i = 0;
 var $and87$i$i = 0, $and88$i = 0, $and9$i = 0, $and96$i$i = 0, $and99$i = 0, $arrayidx = 0, $arrayidx$i = 0, $arrayidx$i$i = 0, $arrayidx$i117 = 0, $arrayidx$i21$i = 0, $arrayidx$i57$i = 0, $arrayidx$sum = 0, $arrayidx$sum$i$i = 0, $arrayidx$sum$pre$i$i = 0, $arrayidx$sum1$i$i = 0, $arrayidx$sum9$i$i = 0, $arrayidx103 = 0, $arrayidx103$i$i = 0, $arrayidx103$sum$pre = 0, $arrayidx103$sum103 = 0;
 var $arrayidx105$i = 0, $arrayidx107$i$i = 0, $arrayidx112$i = 0, $arrayidx113$i = 0, $arrayidx121$i = 0, $arrayidx123$i$i = 0, $arrayidx126$i$i = 0, $arrayidx137$i = 0, $arrayidx143$i$i = 0, $arrayidx148$i = 0, $arrayidx150$i = 0, $arrayidx151$i$i = 0, $arrayidx154$i = 0, $arrayidx154$i131 = 0, $arrayidx160$i = 0, $arrayidx164$i = 0, $arrayidx165$i = 0, $arrayidx178$i$i = 0, $arrayidx183$i = 0, $arrayidx184$i$i = 0;
 var $arrayidx195$i$i = 0, $arrayidx196$i = 0, $arrayidx196$sum$pre$i = 0, $arrayidx196$sum2$i = 0, $arrayidx203$i = 0, $arrayidx211$i = 0, $arrayidx223$i$i = 0, $arrayidx223$sum$pre$i$i = 0, $arrayidx223$sum24$i$i = 0, $arrayidx227$i = 0, $arrayidx23$i = 0, $arrayidx238$i = 0, $arrayidx244$i = 0, $arrayidx255$i = 0, $arrayidx27$i = 0, $arrayidx287$i$i = 0, $arrayidx288$i = 0, $arrayidx288$sum$pre$i = 0, $arrayidx288$sum15$i = 0, $arrayidx290$i$i = 0;
 var $arrayidx325$i$i = 0, $arrayidx354$i = 0, $arrayidx357$i = 0, $arrayidx393$i = 0, $arrayidx40$i = 0, $arrayidx44$i = 0, $arrayidx61$i = 0, $arrayidx65$i = 0, $arrayidx66 = 0, $arrayidx66$sum = 0, $arrayidx71$i = 0, $arrayidx75$i = 0, $arrayidx91$i$i = 0, $arrayidx92$i$i = 0, $arrayidx93$i = 0, $arrayidx94$i = 0, $arrayidx96$i$i = 0, $bk = 0, $bk$i = 0, $bk$i$i = 0;
 var $bk$i128 = 0, $bk$i55$i = 0, $bk102$i$i = 0, $bk122 = 0, $bk124 = 0, $bk135$i = 0, $bk139$i$i = 0, $bk155$i$i = 0, $bk158$i$i = 0, $bk218$i = 0, $bk220$i = 0, $bk246$i$i = 0, $bk248$i$i = 0, $bk302$i$i = 0, $bk310$i = 0, $bk312$i = 0, $bk338$i$i = 0, $bk357$i$i = 0, $bk360$i$i = 0, $bk369$i = 0;
 var $bk406$i = 0, $bk425$i = 0, $bk428$i = 0, $bk43$i$i = 0, $bk47$i = 0, $bk55$i$i = 0, $bk67$i$i = 0, $bk74$i$i = 0, $bk78 = 0, $bk82$i$i = 0, $br$0$i = 0, $call$i$i = 0, $call104$i = 0, $call128$i = 0, $call129$i = 0, $call265$i = 0, $call34$$i = 0, $call34$i = 0, $call6$i$i = 0, $call65$i = 0;
 var $call80$$i = 0, $call80$i = 0, $child$i$i = 0, $child166$i$i = 0, $child289$i$i = 0, $child289$sum$i$i = 0, $child356$i = 0, $child356$sum$i = 0, $cmp = 0, $cmp$i = 0, $cmp$i$i$i = 0, $cmp$i107 = 0, $cmp$i11$i$i = 0, $cmp$i13$i = 0, $cmp$i146 = 0, $cmp$i15$i = 0, $cmp$i24$i = 0, $cmp$i39$i = 0, $cmp$i9$i = 0, $cmp1 = 0;
 var $cmp1$i = 0, $cmp1$i$i = 0, $cmp10 = 0, $cmp100$i$i = 0, $cmp101$i = 0, $cmp102$i = 0, $cmp104$i$i = 0, $cmp105$i = 0, $cmp106$i = 0, $cmp106$i$i = 0, $cmp107$i = 0, $cmp108$i$i = 0, $cmp112$i$i = 0, $cmp113 = 0, $cmp114$i = 0, $cmp115$i = 0, $cmp115$i162 = 0, $cmp118$i = 0, $cmp12$i = 0, $cmp120$i = 0;
 var $cmp120$i$i = 0, $cmp120$i63$i = 0, $cmp12015$i$i = 0, $cmp122$i = 0, $cmp124$i = 0, $cmp124$i$i = 0, $cmp126$i = 0, $cmp127$i = 0, $cmp128 = 0, $cmp128$i$i = 0, $cmp130$i = 0, $cmp132$i = 0, $cmp133$i$i = 0, $cmp134$i = 0, $cmp136$i = 0, $cmp137$i$i = 0, $cmp138 = 0, $cmp138$i = 0, $cmp138$i164 = 0, $cmp139$i = 0;
 var $cmp142$i = 0, $cmp144$i$i = 0, $cmp145 = 0, $cmp147$i$i = 0, $cmp148$i = 0, $cmp15 = 0, $cmp15$i = 0, $cmp150$i$i = 0, $cmp151$i = 0, $cmp154$i = 0, $cmp155 = 0, $cmp155$i = 0, $cmp155$i132 = 0, $cmp156$i = 0, $cmp156$i$i = 0, $cmp159$i = 0, $cmp159$i166 = 0, $cmp16 = 0, $cmp160$i$i = 0, $cmp161 = 0;
 var $cmp161$i = 0, $cmp165$i = 0, $cmp168$i$i = 0, $cmp170$i = 0, $cmp172$i$i = 0, $cmp174$i = 0, $cmp179$i = 0, $cmp183 = 0, $cmp183$i = 0, $cmp184$i = 0, $cmp185$i$i = 0, $cmp187$i = 0, $cmp189$i$i = 0, $cmp19$i = 0, $cmp191$i = 0, $cmp197$i = 0, $cmp2$i$i = 0, $cmp2$i$i$i = 0, $cmp20$i$i = 0, $cmp200$i = 0;
 var $cmp204$i = 0, $cmp206$i = 0, $cmp208$i = 0, $cmp21$i = 0, $cmp215$i = 0, $cmp215$i$i = 0, $cmp216$i = 0, $cmp220$i = 0, $cmp221$i = 0, $cmp225$i = 0, $cmp228$i = 0, $cmp232$i = 0, $cmp236$i$i = 0, $cmp24$i = 0, $cmp24$i$i = 0, $cmp245$i = 0, $cmp249$i = 0, $cmp250$i = 0, $cmp254$i$i = 0, $cmp258$i$i = 0;
 var $cmp26$i = 0, $cmp264$i = 0, $cmp27$i$i = 0, $cmp2719$i$i = 0, $cmp28$i = 0, $cmp28$i$i = 0, $cmp283$i = 0, $cmp29 = 0, $cmp29$i = 0, $cmp3$i$i = 0, $cmp300$i = 0, $cmp306$i$i = 0, $cmp31 = 0, $cmp318$i = 0, $cmp319$i$i = 0, $cmp31941$i$i = 0, $cmp32$i = 0, $cmp32$i152 = 0, $cmp322$i = 0, $cmp327$i$i = 0;
 var $cmp33$i = 0, $cmp332$i$i = 0, $cmp34$i = 0, $cmp34$i$i = 0, $cmp346$i$i = 0, $cmp35$i = 0, $cmp35$i154 = 0, $cmp350$i$i = 0, $cmp36$i = 0, $cmp36$i$i = 0, $cmp373$i = 0, $cmp38$i$i = 0, $cmp387$i = 0, $cmp38722$i = 0, $cmp395$i = 0, $cmp40$i = 0, $cmp40$i155 = 0, $cmp400$i = 0, $cmp41$i$i = 0, $cmp414$i = 0;
 var $cmp418$i = 0, $cmp42$i$i = 0, $cmp44$i$i = 0, $cmp45$i = 0, $cmp45$i123 = 0, $cmp46$i = 0, $cmp46$i$i = 0, $cmp46$i59$i = 0, $cmp48$i = 0, $cmp49$i = 0, $cmp5 = 0, $cmp51$i = 0, $cmp52$i = 0, $cmp54$i = 0, $cmp54$i$i = 0, $cmp54$i156 = 0, $cmp56$i = 0, $cmp57$i = 0, $cmp57$i$i = 0, $cmp59$i$i = 0;
 var $cmp60$i = 0, $cmp60$i$i = 0, $cmp62$i = 0, $cmp63$i = 0, $cmp63$i$i = 0, $cmp64$i = 0, $cmp66$i = 0, $cmp66$i158 = 0, $cmp7$i$i = 0, $cmp70 = 0, $cmp72$i = 0, $cmp75$i$i = 0, $cmp76 = 0, $cmp76$i = 0, $cmp78$i = 0, $cmp79 = 0, $cmp81$i = 0, $cmp81$i$i = 0, $cmp82$i = 0, $cmp83$i$i = 0;
 var $cmp86$i = 0, $cmp86$i$i = 0, $cmp88$i = 0, $cmp9$i$i = 0, $cmp90$i = 0, $cmp90$i161 = 0, $cmp93$i = 0, $cmp95$i = 0, $cmp96$i = 0, $cmp9626$i = 0, $cmp97$i$i = 0, $cmp99 = 0, $cond = 0, $cond$i = 0, $cond$i$i = 0, $cond$i$i$i = 0, $cond$i17$i = 0, $cond$i27$i = 0, $cond$i42$i = 0, $cond$v$0$i = 0;
 var $cond115$i$i = 0, $cond13$i$i = 0, $cond15$i$i = 0, $cond18$i = 0, $cond315$i$i = 0, $cond37$i$i = 0, $cond382$i = 0, $cond4$i = 0, $cond6$i = 0, $exitcond$i$i = 0, $fd$i = 0, $fd$i$i = 0, $fd$i129 = 0, $fd103$i$i = 0, $fd123 = 0, $fd138$i = 0, $fd140$i$i = 0, $fd145$i$i = 0, $fd157$i$i = 0, $fd219$i = 0;
 var $fd247$i$i = 0, $fd303$i$i = 0, $fd311$i = 0, $fd339$i$i = 0, $fd344$i$i = 0, $fd359$i$i = 0, $fd370$i = 0, $fd407$i = 0, $fd412$i = 0, $fd427$i = 0, $fd50$i = 0, $fd54$i$i = 0, $fd59$i$i = 0, $fd68$pre$i$i = 0, $fd68$pre$phi$i$iZ2D = 0, $fd69 = 0, $fd78$i$i = 0, $fd85$i$i = 0, $fd9 = 0, $head = 0;
 var $head$i = 0, $head$i$i = 0, $head$i$i$i = 0, $head$i122 = 0, $head$i18$i = 0, $head$i32$i = 0, $head$i50$i = 0, $head118$i$i = 0, $head11813$i$i = 0, $head167 = 0, $head172 = 0, $head176 = 0, $head178 = 0, $head179$i = 0, $head182$i = 0, $head187$i = 0, $head189$i = 0, $head192 = 0, $head195 = 0, $head208$i$i = 0;
 var $head211$i$i = 0, $head23$i$i = 0, $head25 = 0, $head258$i = 0, $head261$i = 0, $head270$i = 0, $head273$i = 0, $head278$i = 0, $head280$i = 0, $head29$i = 0, $head29$i$i = 0, $head31$i$i = 0, $head317$i$i = 0, $head31739$i$i = 0, $head32$i$i = 0, $head34$i$i = 0, $head385$i = 0, $head38520$i = 0, $head7$i$i = 0, $head7$i$i$i = 0;
 var $head7$i34$i = 0, $head94 = 0, $head97 = 0, $head98$i = 0, $i$02$i$i = 0, $idx$0$i = 0, $inc$i$i = 0, $index$i = 0, $index$i$i = 0, $index$i138 = 0, $index$i64$i = 0, $index288$i$i = 0, $index355$i = 0, $mem$0 = 0, $nb$0 = 0, $neg = 0, $neg$i = 0, $neg$i$i = 0, $neg$i139 = 0, $neg$i149 = 0;
 var $neg100$i = 0, $neg13 = 0, $neg132$i$i = 0, $neg45$i = 0, $neg73 = 0, $next$i = 0, $next$i$i = 0, $next$i$i$i = 0, $next228$i = 0, $notlhs$i = 0, $notrhs$i = 0, $oldfirst$0$i$i = 0, $or$cond$i = 0, $or$cond$i157 = 0, $or$cond1$i = 0, $or$cond16$i = 0, $or$cond2$i = 0, $or$cond3$i = 0, $or$cond4$i = 0, $or$cond6$not$i = 0;
 var $or$cond7$i = 0, $or$cond8$i = 0, $or$cond93$i = 0, $or$i = 0, $or$i$i = 0, $or$i$i$i = 0, $or$i163 = 0, $or$i30$i = 0, $or101$i$i = 0, $or110 = 0, $or166 = 0, $or171 = 0, $or175 = 0, $or178$i = 0, $or179 = 0, $or183$i = 0, $or186$i = 0, $or188$i = 0, $or19$i$i = 0, $or191 = 0;
 var $or194 = 0, $or204$i = 0, $or210$i$i = 0, $or22$i$i = 0, $or23 = 0, $or232$i$i = 0, $or257$i = 0, $or26 = 0, $or260$i = 0, $or269$i = 0, $or274$i = 0, $or277$i = 0, $or279$i = 0, $or28$i$i = 0, $or296$i = 0, $or300$i$i = 0, $or33$i$i = 0, $or367$i = 0, $or40 = 0, $or44$i$i = 0;
 var $or93 = 0, $or96 = 0, $parent$i = 0, $parent$i$i = 0, $parent$i127 = 0, $parent$i61$i = 0, $parent135$i = 0, $parent138$i$i = 0, $parent149$i = 0, $parent159$i$i = 0, $parent165$i$i = 0, $parent166$i = 0, $parent179$i$i = 0, $parent196$i$i = 0, $parent225$i = 0, $parent239$i = 0, $parent256$i = 0, $parent301$i$i = 0, $parent337$i$i = 0, $parent361$i$i = 0;
 var $parent368$i = 0, $parent405$i = 0, $parent429$i = 0, $qsize$0$i$i = 0, $rsize$0$i = 0, $rsize$0$i120 = 0, $rsize$1$i = 0, $rsize$2$i = 0, $rsize$3$lcssa$i = 0, $rsize$328$i = 0, $rst$0$i = 0, $rst$1$i = 0, $sflags190$i = 0, $sflags232$i = 0, $shl = 0, $shl$i = 0, $shl$i$i = 0, $shl$i111 = 0, $shl$i20$i = 0, $shl$i56$i = 0;
 var $shl102 = 0, $shl105 = 0, $shl116$i$i = 0, $shl12 = 0, $shl127$i$i = 0, $shl131$i$i = 0, $shl15$i = 0, $shl18$i = 0, $shl191$i = 0, $shl195$i = 0, $shl198$i = 0, $shl22 = 0, $shl221$i$i = 0, $shl226$i$i = 0, $shl265$i$i = 0, $shl270$i$i = 0, $shl276$i$i = 0, $shl279$i$i = 0, $shl287$i = 0, $shl290$i = 0;
 var $shl294$i$i = 0, $shl31$i = 0, $shl316$i$i = 0, $shl326$i$i = 0, $shl332$i = 0, $shl337$i = 0, $shl343$i = 0, $shl346$i = 0, $shl35 = 0, $shl361$i = 0, $shl37 = 0, $shl383$i = 0, $shl39$i$i = 0, $shl394$i = 0, $shl48$i$i = 0, $shl52$i = 0, $shl59$i = 0, $shl65 = 0, $shl70$i$i = 0, $shl72 = 0;
 var $shl75$i$i = 0, $shl81$i$i = 0, $shl84$i$i = 0, $shl9$i = 0, $shl90 = 0, $shl95$i$i = 0, $shr = 0, $shr$i = 0, $shr$i$i = 0, $shr$i106 = 0, $shr$i54$i = 0, $shr101 = 0, $shr11$i = 0, $shr11$i114 = 0, $shr110$i$i = 0, $shr12$i = 0, $shr123$i$i = 0, $shr15$i = 0, $shr16$i = 0, $shr16$i115 = 0;
 var $shr19$i = 0, $shr194$i = 0, $shr20$i = 0, $shr214$i$i = 0, $shr253$i$i = 0, $shr263$i$i = 0, $shr267$i$i = 0, $shr27$i = 0, $shr272$i$i = 0, $shr277$i$i = 0, $shr281$i$i = 0, $shr282$i = 0, $shr3 = 0, $shr310$i$i = 0, $shr317$i = 0, $shr322$i$i = 0, $shr329$i = 0, $shr334$i = 0, $shr339$i = 0, $shr344$i = 0;
 var $shr348$i = 0, $shr377$i = 0, $shr390$i = 0, $shr4$i = 0, $shr41$i = 0, $shr45 = 0, $shr47 = 0, $shr48 = 0, $shr5$i = 0, $shr5$i109 = 0, $shr51 = 0, $shr52 = 0, $shr55 = 0, $shr56 = 0, $shr58$i$i = 0, $shr59 = 0, $shr60 = 0, $shr63 = 0, $shr68$i$i = 0, $shr7$i = 0;
 var $shr7$i112 = 0, $shr71$i = 0, $shr72$i$i = 0, $shr74$i = 0, $shr75$i = 0, $shr77$i$i = 0, $shr78$i = 0, $shr79$i = 0, $shr8$i = 0, $shr82$i = 0, $shr82$i$i = 0, $shr83$i = 0, $shr86$i = 0, $shr86$i$i = 0, $shr87$i = 0, $shr90$i = 0, $size$i$i = 0, $size$i$i$i = 0, $size185$i = 0, $size242$i = 0;
 var $sizebits$0$i = 0, $sp$0$i$i = 0, $sp$0$i$i$i = 0, $sp$0109$i = 0, $sp$1105$i = 0, $ssize$0$$i = 0, $ssize$0$i = 0, $ssize$1$i = 0, $ssize$2$i = 0, $sub = 0, $sub$i = 0, $sub$i$i = 0, $sub$i105 = 0, $sub$i148 = 0, $sub$ptr$lhs$cast$i = 0, $sub$ptr$lhs$cast$i$i = 0, $sub$ptr$lhs$cast$i46$i = 0, $sub$ptr$rhs$cast$i = 0, $sub$ptr$rhs$cast$i$i = 0, $sub$ptr$rhs$cast$i47$i = 0;
 var $sub$ptr$sub$i = 0, $sub$ptr$sub$i$i = 0, $sub$ptr$sub$i48$i = 0, $sub$ptr$sub$tsize$1$i = 0, $sub10$i = 0, $sub100$i = 0, $sub100$rsize$3$i = 0, $sub109$i = 0, $sub113$i$i = 0, $sub117$i = 0, $sub14$i = 0, $sub159 = 0, $sub16$i$i = 0, $sub169$i = 0, $sub18$i$i = 0, $sub187 = 0, $sub2$i = 0, $sub22$i = 0, $sub253$i = 0, $sub262$i$i = 0;
 var $sub266$i$i = 0, $sub271$i$i = 0, $sub275$i$i = 0, $sub30$i = 0, $sub31$i = 0, $sub31$rsize$0$i = 0, $sub313$i$i = 0, $sub328$i = 0, $sub33$i = 0, $sub333$i = 0, $sub338$i = 0, $sub342$i = 0, $sub38$i = 0, $sub380$i = 0, $sub4$i = 0, $sub42 = 0, $sub44 = 0, $sub47$i = 0, $sub5$i$i = 0, $sub5$i$i$i = 0;
 var $sub5$i29$i = 0, $sub6$i = 0, $sub62$i = 0, $sub66$i = 0, $sub67$i$i = 0, $sub69$i = 0, $sub71$i$i = 0, $sub76$i$i = 0, $sub80$i$i = 0, $sub91 = 0, $sub96$i = 0, $t$0$i = 0, $t$0$i119 = 0, $t$1$i = 0, $t$2$ph$i = 0, $t$2$v$3$i = 0, $t$227$i = 0, $tbase$0$i = 0, $tbase$291$i = 0, $tobool$i$i = 0;
 var $tobool107 = 0, $tobool192$i = 0, $tobool200$i = 0, $tobool228$i$i = 0, $tobool234$i = 0, $tobool27$i = 0, $tobool292$i = 0, $tobool296$i$i = 0, $tobool363$i = 0, $tobool97$i$i = 0, $tsize$0$i = 0, $tsize$0748284$i = 0, $tsize$1$i = 0, $tsize$290$i = 0, $v$0$i = 0, $v$0$i121 = 0, $v$1$i = 0, $v$2$i = 0, $v$3$lcssa$i = 0, $v$329$i = 0;
 var $xor$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $cmp = ($bytes>>>0)<(245);
 do {
  if ($cmp) {
   $cmp1 = ($bytes>>>0)<(11);
   if ($cmp1) {
    $cond = 16;
   } else {
    $add2 = (($bytes) + 11)|0;
    $and = $add2 & -8;
    $cond = $and;
   }
   $shr = $cond >>> 3;
   $0 = HEAP32[13800>>2]|0;
   $shr3 = $0 >>> $shr;
   $and4 = $shr3 & 3;
   $cmp5 = ($and4|0)==(0);
   if (!($cmp5)) {
    $neg = $shr3 & 1;
    $and7 = $neg ^ 1;
    $add8 = (($and7) + ($shr))|0;
    $shl = $add8 << 1;
    $arrayidx = ((13800 + ($shl<<2)|0) + 40|0);
    $arrayidx$sum = (($shl) + 2)|0;
    $1 = ((13800 + ($arrayidx$sum<<2)|0) + 40|0);
    $2 = HEAP32[$1>>2]|0;
    $fd9 = (($2) + 8|0);
    $3 = HEAP32[$fd9>>2]|0;
    $cmp10 = ($arrayidx|0)==($3|0);
    do {
     if ($cmp10) {
      $shl12 = 1 << $add8;
      $neg13 = $shl12 ^ -1;
      $and14 = $0 & $neg13;
      HEAP32[13800>>2] = $and14;
     } else {
      $4 = HEAP32[((13800 + 16|0))>>2]|0;
      $cmp15 = ($3>>>0)<($4>>>0);
      if ($cmp15) {
       _abort();
       // unreachable;
      }
      $bk = (($3) + 12|0);
      $5 = HEAP32[$bk>>2]|0;
      $cmp16 = ($5|0)==($2|0);
      if ($cmp16) {
       HEAP32[$bk>>2] = $arrayidx;
       HEAP32[$1>>2] = $3;
       break;
      } else {
       _abort();
       // unreachable;
      }
     }
    } while(0);
    $shl22 = $add8 << 3;
    $or23 = $shl22 | 3;
    $head = (($2) + 4|0);
    HEAP32[$head>>2] = $or23;
    $add$ptr$sum104 = $shl22 | 4;
    $head25 = (($2) + ($add$ptr$sum104)|0);
    $6 = HEAP32[$head25>>2]|0;
    $or26 = $6 | 1;
    HEAP32[$head25>>2] = $or26;
    $mem$0 = $fd9;
    STACKTOP = sp;return ($mem$0|0);
   }
   $7 = HEAP32[((13800 + 8|0))>>2]|0;
   $cmp29 = ($cond>>>0)>($7>>>0);
   if ($cmp29) {
    $cmp31 = ($shr3|0)==(0);
    if (!($cmp31)) {
     $shl35 = $shr3 << $shr;
     $shl37 = 2 << $shr;
     $sub = (0 - ($shl37))|0;
     $or40 = $shl37 | $sub;
     $and41 = $shl35 & $or40;
     $sub42 = (0 - ($and41))|0;
     $and43 = $and41 & $sub42;
     $sub44 = (($and43) + -1)|0;
     $shr45 = $sub44 >>> 12;
     $and46 = $shr45 & 16;
     $shr47 = $sub44 >>> $and46;
     $shr48 = $shr47 >>> 5;
     $and49 = $shr48 & 8;
     $add50 = $and49 | $and46;
     $shr51 = $shr47 >>> $and49;
     $shr52 = $shr51 >>> 2;
     $and53 = $shr52 & 4;
     $add54 = $add50 | $and53;
     $shr55 = $shr51 >>> $and53;
     $shr56 = $shr55 >>> 1;
     $and57 = $shr56 & 2;
     $add58 = $add54 | $and57;
     $shr59 = $shr55 >>> $and57;
     $shr60 = $shr59 >>> 1;
     $and61 = $shr60 & 1;
     $add62 = $add58 | $and61;
     $shr63 = $shr59 >>> $and61;
     $add64 = (($add62) + ($shr63))|0;
     $shl65 = $add64 << 1;
     $arrayidx66 = ((13800 + ($shl65<<2)|0) + 40|0);
     $arrayidx66$sum = (($shl65) + 2)|0;
     $8 = ((13800 + ($arrayidx66$sum<<2)|0) + 40|0);
     $9 = HEAP32[$8>>2]|0;
     $fd69 = (($9) + 8|0);
     $10 = HEAP32[$fd69>>2]|0;
     $cmp70 = ($arrayidx66|0)==($10|0);
     do {
      if ($cmp70) {
       $shl72 = 1 << $add64;
       $neg73 = $shl72 ^ -1;
       $and74 = $0 & $neg73;
       HEAP32[13800>>2] = $and74;
      } else {
       $11 = HEAP32[((13800 + 16|0))>>2]|0;
       $cmp76 = ($10>>>0)<($11>>>0);
       if ($cmp76) {
        _abort();
        // unreachable;
       }
       $bk78 = (($10) + 12|0);
       $12 = HEAP32[$bk78>>2]|0;
       $cmp79 = ($12|0)==($9|0);
       if ($cmp79) {
        HEAP32[$bk78>>2] = $arrayidx66;
        HEAP32[$8>>2] = $10;
        break;
       } else {
        _abort();
        // unreachable;
       }
      }
     } while(0);
     $shl90 = $add64 << 3;
     $sub91 = (($shl90) - ($cond))|0;
     $or93 = $cond | 3;
     $head94 = (($9) + 4|0);
     HEAP32[$head94>>2] = $or93;
     $add$ptr95 = (($9) + ($cond)|0);
     $or96 = $sub91 | 1;
     $add$ptr95$sum102 = $cond | 4;
     $head97 = (($9) + ($add$ptr95$sum102)|0);
     HEAP32[$head97>>2] = $or96;
     $add$ptr98 = (($9) + ($shl90)|0);
     HEAP32[$add$ptr98>>2] = $sub91;
     $13 = HEAP32[((13800 + 8|0))>>2]|0;
     $cmp99 = ($13|0)==(0);
     if (!($cmp99)) {
      $14 = HEAP32[((13800 + 20|0))>>2]|0;
      $shr101 = $13 >>> 3;
      $shl102 = $shr101 << 1;
      $arrayidx103 = ((13800 + ($shl102<<2)|0) + 40|0);
      $15 = HEAP32[13800>>2]|0;
      $shl105 = 1 << $shr101;
      $and106 = $15 & $shl105;
      $tobool107 = ($and106|0)==(0);
      if ($tobool107) {
       $or110 = $15 | $shl105;
       HEAP32[13800>>2] = $or110;
       $arrayidx103$sum$pre = (($shl102) + 2)|0;
       $$pre = ((13800 + ($arrayidx103$sum$pre<<2)|0) + 40|0);
       $$pre$phiZ2D = $$pre;$F104$0 = $arrayidx103;
      } else {
       $arrayidx103$sum103 = (($shl102) + 2)|0;
       $16 = ((13800 + ($arrayidx103$sum103<<2)|0) + 40|0);
       $17 = HEAP32[$16>>2]|0;
       $18 = HEAP32[((13800 + 16|0))>>2]|0;
       $cmp113 = ($17>>>0)<($18>>>0);
       if ($cmp113) {
        _abort();
        // unreachable;
       } else {
        $$pre$phiZ2D = $16;$F104$0 = $17;
       }
      }
      HEAP32[$$pre$phiZ2D>>2] = $14;
      $bk122 = (($F104$0) + 12|0);
      HEAP32[$bk122>>2] = $14;
      $fd123 = (($14) + 8|0);
      HEAP32[$fd123>>2] = $F104$0;
      $bk124 = (($14) + 12|0);
      HEAP32[$bk124>>2] = $arrayidx103;
     }
     HEAP32[((13800 + 8|0))>>2] = $sub91;
     HEAP32[((13800 + 20|0))>>2] = $add$ptr95;
     $mem$0 = $fd69;
     STACKTOP = sp;return ($mem$0|0);
    }
    $19 = HEAP32[((13800 + 4|0))>>2]|0;
    $cmp128 = ($19|0)==(0);
    if ($cmp128) {
     $nb$0 = $cond;
    } else {
     $sub$i = (0 - ($19))|0;
     $and$i = $19 & $sub$i;
     $sub2$i = (($and$i) + -1)|0;
     $shr$i = $sub2$i >>> 12;
     $and3$i = $shr$i & 16;
     $shr4$i = $sub2$i >>> $and3$i;
     $shr5$i = $shr4$i >>> 5;
     $and6$i = $shr5$i & 8;
     $add$i = $and6$i | $and3$i;
     $shr7$i = $shr4$i >>> $and6$i;
     $shr8$i = $shr7$i >>> 2;
     $and9$i = $shr8$i & 4;
     $add10$i = $add$i | $and9$i;
     $shr11$i = $shr7$i >>> $and9$i;
     $shr12$i = $shr11$i >>> 1;
     $and13$i = $shr12$i & 2;
     $add14$i = $add10$i | $and13$i;
     $shr15$i = $shr11$i >>> $and13$i;
     $shr16$i = $shr15$i >>> 1;
     $and17$i = $shr16$i & 1;
     $add18$i = $add14$i | $and17$i;
     $shr19$i = $shr15$i >>> $and17$i;
     $add20$i = (($add18$i) + ($shr19$i))|0;
     $arrayidx$i = ((13800 + ($add20$i<<2)|0) + 304|0);
     $20 = HEAP32[$arrayidx$i>>2]|0;
     $head$i = (($20) + 4|0);
     $21 = HEAP32[$head$i>>2]|0;
     $and21$i = $21 & -8;
     $sub22$i = (($and21$i) - ($cond))|0;
     $rsize$0$i = $sub22$i;$t$0$i = $20;$v$0$i = $20;
     while(1) {
      $arrayidx23$i = (($t$0$i) + 16|0);
      $22 = HEAP32[$arrayidx23$i>>2]|0;
      $cmp$i = ($22|0)==(0|0);
      if ($cmp$i) {
       $arrayidx27$i = (($t$0$i) + 20|0);
       $23 = HEAP32[$arrayidx27$i>>2]|0;
       $cmp28$i = ($23|0)==(0|0);
       if ($cmp28$i) {
        break;
       } else {
        $cond6$i = $23;
       }
      } else {
       $cond6$i = $22;
      }
      $head29$i = (($cond6$i) + 4|0);
      $24 = HEAP32[$head29$i>>2]|0;
      $and30$i = $24 & -8;
      $sub31$i = (($and30$i) - ($cond))|0;
      $cmp32$i = ($sub31$i>>>0)<($rsize$0$i>>>0);
      $sub31$rsize$0$i = $cmp32$i ? $sub31$i : $rsize$0$i;
      $cond$v$0$i = $cmp32$i ? $cond6$i : $v$0$i;
      $rsize$0$i = $sub31$rsize$0$i;$t$0$i = $cond6$i;$v$0$i = $cond$v$0$i;
     }
     $25 = HEAP32[((13800 + 16|0))>>2]|0;
     $cmp33$i = ($v$0$i>>>0)<($25>>>0);
     if ($cmp33$i) {
      _abort();
      // unreachable;
     }
     $add$ptr$i = (($v$0$i) + ($cond)|0);
     $cmp35$i = ($v$0$i>>>0)<($add$ptr$i>>>0);
     if (!($cmp35$i)) {
      _abort();
      // unreachable;
     }
     $parent$i = (($v$0$i) + 24|0);
     $26 = HEAP32[$parent$i>>2]|0;
     $bk$i = (($v$0$i) + 12|0);
     $27 = HEAP32[$bk$i>>2]|0;
     $cmp40$i = ($27|0)==($v$0$i|0);
     do {
      if ($cmp40$i) {
       $arrayidx61$i = (($v$0$i) + 20|0);
       $31 = HEAP32[$arrayidx61$i>>2]|0;
       $cmp62$i = ($31|0)==(0|0);
       if ($cmp62$i) {
        $arrayidx65$i = (($v$0$i) + 16|0);
        $32 = HEAP32[$arrayidx65$i>>2]|0;
        $cmp66$i = ($32|0)==(0|0);
        if ($cmp66$i) {
         $R$1$i = 0;
         break;
        } else {
         $R$0$i = $32;$RP$0$i = $arrayidx65$i;
        }
       } else {
        $R$0$i = $31;$RP$0$i = $arrayidx61$i;
       }
       while(1) {
        $arrayidx71$i = (($R$0$i) + 20|0);
        $33 = HEAP32[$arrayidx71$i>>2]|0;
        $cmp72$i = ($33|0)==(0|0);
        if (!($cmp72$i)) {
         $R$0$i = $33;$RP$0$i = $arrayidx71$i;
         continue;
        }
        $arrayidx75$i = (($R$0$i) + 16|0);
        $34 = HEAP32[$arrayidx75$i>>2]|0;
        $cmp76$i = ($34|0)==(0|0);
        if ($cmp76$i) {
         break;
        } else {
         $R$0$i = $34;$RP$0$i = $arrayidx75$i;
        }
       }
       $cmp81$i = ($RP$0$i>>>0)<($25>>>0);
       if ($cmp81$i) {
        _abort();
        // unreachable;
       } else {
        HEAP32[$RP$0$i>>2] = 0;
        $R$1$i = $R$0$i;
        break;
       }
      } else {
       $fd$i = (($v$0$i) + 8|0);
       $28 = HEAP32[$fd$i>>2]|0;
       $cmp45$i = ($28>>>0)<($25>>>0);
       if ($cmp45$i) {
        _abort();
        // unreachable;
       }
       $bk47$i = (($28) + 12|0);
       $29 = HEAP32[$bk47$i>>2]|0;
       $cmp48$i = ($29|0)==($v$0$i|0);
       if (!($cmp48$i)) {
        _abort();
        // unreachable;
       }
       $fd50$i = (($27) + 8|0);
       $30 = HEAP32[$fd50$i>>2]|0;
       $cmp51$i = ($30|0)==($v$0$i|0);
       if ($cmp51$i) {
        HEAP32[$bk47$i>>2] = $27;
        HEAP32[$fd50$i>>2] = $28;
        $R$1$i = $27;
        break;
       } else {
        _abort();
        // unreachable;
       }
      }
     } while(0);
     $cmp90$i = ($26|0)==(0|0);
     do {
      if (!($cmp90$i)) {
       $index$i = (($v$0$i) + 28|0);
       $35 = HEAP32[$index$i>>2]|0;
       $arrayidx94$i = ((13800 + ($35<<2)|0) + 304|0);
       $36 = HEAP32[$arrayidx94$i>>2]|0;
       $cmp95$i = ($v$0$i|0)==($36|0);
       if ($cmp95$i) {
        HEAP32[$arrayidx94$i>>2] = $R$1$i;
        $cond4$i = ($R$1$i|0)==(0|0);
        if ($cond4$i) {
         $shl$i = 1 << $35;
         $neg$i = $shl$i ^ -1;
         $37 = HEAP32[((13800 + 4|0))>>2]|0;
         $and103$i = $37 & $neg$i;
         HEAP32[((13800 + 4|0))>>2] = $and103$i;
         break;
        }
       } else {
        $38 = HEAP32[((13800 + 16|0))>>2]|0;
        $cmp107$i = ($26>>>0)<($38>>>0);
        if ($cmp107$i) {
         _abort();
         // unreachable;
        }
        $arrayidx113$i = (($26) + 16|0);
        $39 = HEAP32[$arrayidx113$i>>2]|0;
        $cmp114$i = ($39|0)==($v$0$i|0);
        if ($cmp114$i) {
         HEAP32[$arrayidx113$i>>2] = $R$1$i;
        } else {
         $arrayidx121$i = (($26) + 20|0);
         HEAP32[$arrayidx121$i>>2] = $R$1$i;
        }
        $cmp126$i = ($R$1$i|0)==(0|0);
        if ($cmp126$i) {
         break;
        }
       }
       $40 = HEAP32[((13800 + 16|0))>>2]|0;
       $cmp130$i = ($R$1$i>>>0)<($40>>>0);
       if ($cmp130$i) {
        _abort();
        // unreachable;
       }
       $parent135$i = (($R$1$i) + 24|0);
       HEAP32[$parent135$i>>2] = $26;
       $arrayidx137$i = (($v$0$i) + 16|0);
       $41 = HEAP32[$arrayidx137$i>>2]|0;
       $cmp138$i = ($41|0)==(0|0);
       do {
        if (!($cmp138$i)) {
         $42 = HEAP32[((13800 + 16|0))>>2]|0;
         $cmp142$i = ($41>>>0)<($42>>>0);
         if ($cmp142$i) {
          _abort();
          // unreachable;
         } else {
          $arrayidx148$i = (($R$1$i) + 16|0);
          HEAP32[$arrayidx148$i>>2] = $41;
          $parent149$i = (($41) + 24|0);
          HEAP32[$parent149$i>>2] = $R$1$i;
          break;
         }
        }
       } while(0);
       $arrayidx154$i = (($v$0$i) + 20|0);
       $43 = HEAP32[$arrayidx154$i>>2]|0;
       $cmp155$i = ($43|0)==(0|0);
       if (!($cmp155$i)) {
        $44 = HEAP32[((13800 + 16|0))>>2]|0;
        $cmp159$i = ($43>>>0)<($44>>>0);
        if ($cmp159$i) {
         _abort();
         // unreachable;
        } else {
         $arrayidx165$i = (($R$1$i) + 20|0);
         HEAP32[$arrayidx165$i>>2] = $43;
         $parent166$i = (($43) + 24|0);
         HEAP32[$parent166$i>>2] = $R$1$i;
         break;
        }
       }
      }
     } while(0);
     $cmp174$i = ($rsize$0$i>>>0)<(16);
     if ($cmp174$i) {
      $add177$i = (($rsize$0$i) + ($cond))|0;
      $or178$i = $add177$i | 3;
      $head179$i = (($v$0$i) + 4|0);
      HEAP32[$head179$i>>2] = $or178$i;
      $add$ptr181$sum$i = (($add177$i) + 4)|0;
      $head182$i = (($v$0$i) + ($add$ptr181$sum$i)|0);
      $45 = HEAP32[$head182$i>>2]|0;
      $or183$i = $45 | 1;
      HEAP32[$head182$i>>2] = $or183$i;
     } else {
      $or186$i = $cond | 3;
      $head187$i = (($v$0$i) + 4|0);
      HEAP32[$head187$i>>2] = $or186$i;
      $or188$i = $rsize$0$i | 1;
      $add$ptr$sum$i173 = $cond | 4;
      $head189$i = (($v$0$i) + ($add$ptr$sum$i173)|0);
      HEAP32[$head189$i>>2] = $or188$i;
      $add$ptr$sum1$i = (($rsize$0$i) + ($cond))|0;
      $add$ptr190$i = (($v$0$i) + ($add$ptr$sum1$i)|0);
      HEAP32[$add$ptr190$i>>2] = $rsize$0$i;
      $46 = HEAP32[((13800 + 8|0))>>2]|0;
      $cmp191$i = ($46|0)==(0);
      if (!($cmp191$i)) {
       $47 = HEAP32[((13800 + 20|0))>>2]|0;
       $shr194$i = $46 >>> 3;
       $shl195$i = $shr194$i << 1;
       $arrayidx196$i = ((13800 + ($shl195$i<<2)|0) + 40|0);
       $48 = HEAP32[13800>>2]|0;
       $shl198$i = 1 << $shr194$i;
       $and199$i = $48 & $shl198$i;
       $tobool200$i = ($and199$i|0)==(0);
       if ($tobool200$i) {
        $or204$i = $48 | $shl198$i;
        HEAP32[13800>>2] = $or204$i;
        $arrayidx196$sum$pre$i = (($shl195$i) + 2)|0;
        $$pre$i = ((13800 + ($arrayidx196$sum$pre$i<<2)|0) + 40|0);
        $$pre$phi$iZ2D = $$pre$i;$F197$0$i = $arrayidx196$i;
       } else {
        $arrayidx196$sum2$i = (($shl195$i) + 2)|0;
        $49 = ((13800 + ($arrayidx196$sum2$i<<2)|0) + 40|0);
        $50 = HEAP32[$49>>2]|0;
        $51 = HEAP32[((13800 + 16|0))>>2]|0;
        $cmp208$i = ($50>>>0)<($51>>>0);
        if ($cmp208$i) {
         _abort();
         // unreachable;
        } else {
         $$pre$phi$iZ2D = $49;$F197$0$i = $50;
        }
       }
       HEAP32[$$pre$phi$iZ2D>>2] = $47;
       $bk218$i = (($F197$0$i) + 12|0);
       HEAP32[$bk218$i>>2] = $47;
       $fd219$i = (($47) + 8|0);
       HEAP32[$fd219$i>>2] = $F197$0$i;
       $bk220$i = (($47) + 12|0);
       HEAP32[$bk220$i>>2] = $arrayidx196$i;
      }
      HEAP32[((13800 + 8|0))>>2] = $rsize$0$i;
      HEAP32[((13800 + 20|0))>>2] = $add$ptr$i;
     }
     $add$ptr225$i = (($v$0$i) + 8|0);
     $mem$0 = $add$ptr225$i;
     STACKTOP = sp;return ($mem$0|0);
    }
   } else {
    $nb$0 = $cond;
   }
  } else {
   $cmp138 = ($bytes>>>0)>(4294967231);
   if ($cmp138) {
    $nb$0 = -1;
   } else {
    $add143 = (($bytes) + 11)|0;
    $and144 = $add143 & -8;
    $52 = HEAP32[((13800 + 4|0))>>2]|0;
    $cmp145 = ($52|0)==(0);
    if ($cmp145) {
     $nb$0 = $and144;
    } else {
     $sub$i105 = (0 - ($and144))|0;
     $shr$i106 = $add143 >>> 8;
     $cmp$i107 = ($shr$i106|0)==(0);
     if ($cmp$i107) {
      $idx$0$i = 0;
     } else {
      $cmp1$i = ($and144>>>0)>(16777215);
      if ($cmp1$i) {
       $idx$0$i = 31;
      } else {
       $sub4$i = (($shr$i106) + 1048320)|0;
       $shr5$i109 = $sub4$i >>> 16;
       $and$i110 = $shr5$i109 & 8;
       $shl$i111 = $shr$i106 << $and$i110;
       $sub6$i = (($shl$i111) + 520192)|0;
       $shr7$i112 = $sub6$i >>> 16;
       $and8$i = $shr7$i112 & 4;
       $add$i113 = $and8$i | $and$i110;
       $shl9$i = $shl$i111 << $and8$i;
       $sub10$i = (($shl9$i) + 245760)|0;
       $shr11$i114 = $sub10$i >>> 16;
       $and12$i = $shr11$i114 & 2;
       $add13$i = $add$i113 | $and12$i;
       $sub14$i = (14 - ($add13$i))|0;
       $shl15$i = $shl9$i << $and12$i;
       $shr16$i115 = $shl15$i >>> 15;
       $add17$i = (($sub14$i) + ($shr16$i115))|0;
       $shl18$i = $add17$i << 1;
       $add19$i = (($add17$i) + 7)|0;
       $shr20$i = $and144 >>> $add19$i;
       $and21$i116 = $shr20$i & 1;
       $add22$i = $and21$i116 | $shl18$i;
       $idx$0$i = $add22$i;
      }
     }
     $arrayidx$i117 = ((13800 + ($idx$0$i<<2)|0) + 304|0);
     $53 = HEAP32[$arrayidx$i117>>2]|0;
     $cmp24$i = ($53|0)==(0|0);
     L9: do {
      if ($cmp24$i) {
       $rsize$2$i = $sub$i105;$t$1$i = 0;$v$2$i = 0;
      } else {
       $cmp26$i = ($idx$0$i|0)==(31);
       if ($cmp26$i) {
        $cond$i = 0;
       } else {
        $shr27$i = $idx$0$i >>> 1;
        $sub30$i = (25 - ($shr27$i))|0;
        $cond$i = $sub30$i;
       }
       $shl31$i = $and144 << $cond$i;
       $rsize$0$i120 = $sub$i105;$rst$0$i = 0;$sizebits$0$i = $shl31$i;$t$0$i119 = $53;$v$0$i121 = 0;
       while(1) {
        $head$i122 = (($t$0$i119) + 4|0);
        $54 = HEAP32[$head$i122>>2]|0;
        $and32$i = $54 & -8;
        $sub33$i = (($and32$i) - ($and144))|0;
        $cmp34$i = ($sub33$i>>>0)<($rsize$0$i120>>>0);
        if ($cmp34$i) {
         $cmp36$i = ($and32$i|0)==($and144|0);
         if ($cmp36$i) {
          $rsize$2$i = $sub33$i;$t$1$i = $t$0$i119;$v$2$i = $t$0$i119;
          break L9;
         } else {
          $rsize$1$i = $sub33$i;$v$1$i = $t$0$i119;
         }
        } else {
         $rsize$1$i = $rsize$0$i120;$v$1$i = $v$0$i121;
        }
        $arrayidx40$i = (($t$0$i119) + 20|0);
        $55 = HEAP32[$arrayidx40$i>>2]|0;
        $shr41$i = $sizebits$0$i >>> 31;
        $arrayidx44$i = ((($t$0$i119) + ($shr41$i<<2)|0) + 16|0);
        $56 = HEAP32[$arrayidx44$i>>2]|0;
        $cmp45$i123 = ($55|0)==(0|0);
        $cmp46$i = ($55|0)==($56|0);
        $or$cond$i = $cmp45$i123 | $cmp46$i;
        $rst$1$i = $or$cond$i ? $rst$0$i : $55;
        $cmp49$i = ($56|0)==(0|0);
        $shl52$i = $sizebits$0$i << 1;
        if ($cmp49$i) {
         $rsize$2$i = $rsize$1$i;$t$1$i = $rst$1$i;$v$2$i = $v$1$i;
         break;
        } else {
         $rsize$0$i120 = $rsize$1$i;$rst$0$i = $rst$1$i;$sizebits$0$i = $shl52$i;$t$0$i119 = $56;$v$0$i121 = $v$1$i;
        }
       }
      }
     } while(0);
     $cmp54$i = ($t$1$i|0)==(0|0);
     $cmp56$i = ($v$2$i|0)==(0|0);
     $or$cond16$i = $cmp54$i & $cmp56$i;
     if ($or$cond16$i) {
      $shl59$i = 2 << $idx$0$i;
      $sub62$i = (0 - ($shl59$i))|0;
      $or$i = $shl59$i | $sub62$i;
      $and63$i = $52 & $or$i;
      $cmp64$i = ($and63$i|0)==(0);
      if ($cmp64$i) {
       $nb$0 = $and144;
       break;
      }
      $sub66$i = (0 - ($and63$i))|0;
      $and67$i = $and63$i & $sub66$i;
      $sub69$i = (($and67$i) + -1)|0;
      $shr71$i = $sub69$i >>> 12;
      $and72$i = $shr71$i & 16;
      $shr74$i = $sub69$i >>> $and72$i;
      $shr75$i = $shr74$i >>> 5;
      $and76$i = $shr75$i & 8;
      $add77$i = $and76$i | $and72$i;
      $shr78$i = $shr74$i >>> $and76$i;
      $shr79$i = $shr78$i >>> 2;
      $and80$i = $shr79$i & 4;
      $add81$i = $add77$i | $and80$i;
      $shr82$i = $shr78$i >>> $and80$i;
      $shr83$i = $shr82$i >>> 1;
      $and84$i = $shr83$i & 2;
      $add85$i = $add81$i | $and84$i;
      $shr86$i = $shr82$i >>> $and84$i;
      $shr87$i = $shr86$i >>> 1;
      $and88$i = $shr87$i & 1;
      $add89$i = $add85$i | $and88$i;
      $shr90$i = $shr86$i >>> $and88$i;
      $add91$i = (($add89$i) + ($shr90$i))|0;
      $arrayidx93$i = ((13800 + ($add91$i<<2)|0) + 304|0);
      $57 = HEAP32[$arrayidx93$i>>2]|0;
      $t$2$ph$i = $57;
     } else {
      $t$2$ph$i = $t$1$i;
     }
     $cmp9626$i = ($t$2$ph$i|0)==(0|0);
     if ($cmp9626$i) {
      $rsize$3$lcssa$i = $rsize$2$i;$v$3$lcssa$i = $v$2$i;
     } else {
      $rsize$328$i = $rsize$2$i;$t$227$i = $t$2$ph$i;$v$329$i = $v$2$i;
      while(1) {
       $head98$i = (($t$227$i) + 4|0);
       $58 = HEAP32[$head98$i>>2]|0;
       $and99$i = $58 & -8;
       $sub100$i = (($and99$i) - ($and144))|0;
       $cmp101$i = ($sub100$i>>>0)<($rsize$328$i>>>0);
       $sub100$rsize$3$i = $cmp101$i ? $sub100$i : $rsize$328$i;
       $t$2$v$3$i = $cmp101$i ? $t$227$i : $v$329$i;
       $arrayidx105$i = (($t$227$i) + 16|0);
       $59 = HEAP32[$arrayidx105$i>>2]|0;
       $cmp106$i = ($59|0)==(0|0);
       if (!($cmp106$i)) {
        $rsize$328$i = $sub100$rsize$3$i;$t$227$i = $59;$v$329$i = $t$2$v$3$i;
        continue;
       }
       $arrayidx112$i = (($t$227$i) + 20|0);
       $60 = HEAP32[$arrayidx112$i>>2]|0;
       $cmp96$i = ($60|0)==(0|0);
       if ($cmp96$i) {
        $rsize$3$lcssa$i = $sub100$rsize$3$i;$v$3$lcssa$i = $t$2$v$3$i;
        break;
       } else {
        $rsize$328$i = $sub100$rsize$3$i;$t$227$i = $60;$v$329$i = $t$2$v$3$i;
       }
      }
     }
     $cmp115$i = ($v$3$lcssa$i|0)==(0|0);
     if ($cmp115$i) {
      $nb$0 = $and144;
     } else {
      $61 = HEAP32[((13800 + 8|0))>>2]|0;
      $sub117$i = (($61) - ($and144))|0;
      $cmp118$i = ($rsize$3$lcssa$i>>>0)<($sub117$i>>>0);
      if ($cmp118$i) {
       $62 = HEAP32[((13800 + 16|0))>>2]|0;
       $cmp120$i = ($v$3$lcssa$i>>>0)<($62>>>0);
       if ($cmp120$i) {
        _abort();
        // unreachable;
       }
       $add$ptr$i126 = (($v$3$lcssa$i) + ($and144)|0);
       $cmp122$i = ($v$3$lcssa$i>>>0)<($add$ptr$i126>>>0);
       if (!($cmp122$i)) {
        _abort();
        // unreachable;
       }
       $parent$i127 = (($v$3$lcssa$i) + 24|0);
       $63 = HEAP32[$parent$i127>>2]|0;
       $bk$i128 = (($v$3$lcssa$i) + 12|0);
       $64 = HEAP32[$bk$i128>>2]|0;
       $cmp127$i = ($64|0)==($v$3$lcssa$i|0);
       do {
        if ($cmp127$i) {
         $arrayidx150$i = (($v$3$lcssa$i) + 20|0);
         $68 = HEAP32[$arrayidx150$i>>2]|0;
         $cmp151$i = ($68|0)==(0|0);
         if ($cmp151$i) {
          $arrayidx154$i131 = (($v$3$lcssa$i) + 16|0);
          $69 = HEAP32[$arrayidx154$i131>>2]|0;
          $cmp155$i132 = ($69|0)==(0|0);
          if ($cmp155$i132) {
           $R$1$i137 = 0;
           break;
          } else {
           $R$0$i135 = $69;$RP$0$i134 = $arrayidx154$i131;
          }
         } else {
          $R$0$i135 = $68;$RP$0$i134 = $arrayidx150$i;
         }
         while(1) {
          $arrayidx160$i = (($R$0$i135) + 20|0);
          $70 = HEAP32[$arrayidx160$i>>2]|0;
          $cmp161$i = ($70|0)==(0|0);
          if (!($cmp161$i)) {
           $R$0$i135 = $70;$RP$0$i134 = $arrayidx160$i;
           continue;
          }
          $arrayidx164$i = (($R$0$i135) + 16|0);
          $71 = HEAP32[$arrayidx164$i>>2]|0;
          $cmp165$i = ($71|0)==(0|0);
          if ($cmp165$i) {
           break;
          } else {
           $R$0$i135 = $71;$RP$0$i134 = $arrayidx164$i;
          }
         }
         $cmp170$i = ($RP$0$i134>>>0)<($62>>>0);
         if ($cmp170$i) {
          _abort();
          // unreachable;
         } else {
          HEAP32[$RP$0$i134>>2] = 0;
          $R$1$i137 = $R$0$i135;
          break;
         }
        } else {
         $fd$i129 = (($v$3$lcssa$i) + 8|0);
         $65 = HEAP32[$fd$i129>>2]|0;
         $cmp132$i = ($65>>>0)<($62>>>0);
         if ($cmp132$i) {
          _abort();
          // unreachable;
         }
         $bk135$i = (($65) + 12|0);
         $66 = HEAP32[$bk135$i>>2]|0;
         $cmp136$i = ($66|0)==($v$3$lcssa$i|0);
         if (!($cmp136$i)) {
          _abort();
          // unreachable;
         }
         $fd138$i = (($64) + 8|0);
         $67 = HEAP32[$fd138$i>>2]|0;
         $cmp139$i = ($67|0)==($v$3$lcssa$i|0);
         if ($cmp139$i) {
          HEAP32[$bk135$i>>2] = $64;
          HEAP32[$fd138$i>>2] = $65;
          $R$1$i137 = $64;
          break;
         } else {
          _abort();
          // unreachable;
         }
        }
       } while(0);
       $cmp179$i = ($63|0)==(0|0);
       do {
        if (!($cmp179$i)) {
         $index$i138 = (($v$3$lcssa$i) + 28|0);
         $72 = HEAP32[$index$i138>>2]|0;
         $arrayidx183$i = ((13800 + ($72<<2)|0) + 304|0);
         $73 = HEAP32[$arrayidx183$i>>2]|0;
         $cmp184$i = ($v$3$lcssa$i|0)==($73|0);
         if ($cmp184$i) {
          HEAP32[$arrayidx183$i>>2] = $R$1$i137;
          $cond18$i = ($R$1$i137|0)==(0|0);
          if ($cond18$i) {
           $shl191$i = 1 << $72;
           $neg$i139 = $shl191$i ^ -1;
           $74 = HEAP32[((13800 + 4|0))>>2]|0;
           $and193$i = $74 & $neg$i139;
           HEAP32[((13800 + 4|0))>>2] = $and193$i;
           break;
          }
         } else {
          $75 = HEAP32[((13800 + 16|0))>>2]|0;
          $cmp197$i = ($63>>>0)<($75>>>0);
          if ($cmp197$i) {
           _abort();
           // unreachable;
          }
          $arrayidx203$i = (($63) + 16|0);
          $76 = HEAP32[$arrayidx203$i>>2]|0;
          $cmp204$i = ($76|0)==($v$3$lcssa$i|0);
          if ($cmp204$i) {
           HEAP32[$arrayidx203$i>>2] = $R$1$i137;
          } else {
           $arrayidx211$i = (($63) + 20|0);
           HEAP32[$arrayidx211$i>>2] = $R$1$i137;
          }
          $cmp216$i = ($R$1$i137|0)==(0|0);
          if ($cmp216$i) {
           break;
          }
         }
         $77 = HEAP32[((13800 + 16|0))>>2]|0;
         $cmp220$i = ($R$1$i137>>>0)<($77>>>0);
         if ($cmp220$i) {
          _abort();
          // unreachable;
         }
         $parent225$i = (($R$1$i137) + 24|0);
         HEAP32[$parent225$i>>2] = $63;
         $arrayidx227$i = (($v$3$lcssa$i) + 16|0);
         $78 = HEAP32[$arrayidx227$i>>2]|0;
         $cmp228$i = ($78|0)==(0|0);
         do {
          if (!($cmp228$i)) {
           $79 = HEAP32[((13800 + 16|0))>>2]|0;
           $cmp232$i = ($78>>>0)<($79>>>0);
           if ($cmp232$i) {
            _abort();
            // unreachable;
           } else {
            $arrayidx238$i = (($R$1$i137) + 16|0);
            HEAP32[$arrayidx238$i>>2] = $78;
            $parent239$i = (($78) + 24|0);
            HEAP32[$parent239$i>>2] = $R$1$i137;
            break;
           }
          }
         } while(0);
         $arrayidx244$i = (($v$3$lcssa$i) + 20|0);
         $80 = HEAP32[$arrayidx244$i>>2]|0;
         $cmp245$i = ($80|0)==(0|0);
         if (!($cmp245$i)) {
          $81 = HEAP32[((13800 + 16|0))>>2]|0;
          $cmp249$i = ($80>>>0)<($81>>>0);
          if ($cmp249$i) {
           _abort();
           // unreachable;
          } else {
           $arrayidx255$i = (($R$1$i137) + 20|0);
           HEAP32[$arrayidx255$i>>2] = $80;
           $parent256$i = (($80) + 24|0);
           HEAP32[$parent256$i>>2] = $R$1$i137;
           break;
          }
         }
        }
       } while(0);
       $cmp264$i = ($rsize$3$lcssa$i>>>0)<(16);
       L87: do {
        if ($cmp264$i) {
         $add267$i = (($rsize$3$lcssa$i) + ($and144))|0;
         $or269$i = $add267$i | 3;
         $head270$i = (($v$3$lcssa$i) + 4|0);
         HEAP32[$head270$i>>2] = $or269$i;
         $add$ptr272$sum$i = (($add267$i) + 4)|0;
         $head273$i = (($v$3$lcssa$i) + ($add$ptr272$sum$i)|0);
         $82 = HEAP32[$head273$i>>2]|0;
         $or274$i = $82 | 1;
         HEAP32[$head273$i>>2] = $or274$i;
        } else {
         $or277$i = $and144 | 3;
         $head278$i = (($v$3$lcssa$i) + 4|0);
         HEAP32[$head278$i>>2] = $or277$i;
         $or279$i = $rsize$3$lcssa$i | 1;
         $add$ptr$sum$i141172 = $and144 | 4;
         $head280$i = (($v$3$lcssa$i) + ($add$ptr$sum$i141172)|0);
         HEAP32[$head280$i>>2] = $or279$i;
         $add$ptr$sum1$i142 = (($rsize$3$lcssa$i) + ($and144))|0;
         $add$ptr281$i = (($v$3$lcssa$i) + ($add$ptr$sum1$i142)|0);
         HEAP32[$add$ptr281$i>>2] = $rsize$3$lcssa$i;
         $shr282$i = $rsize$3$lcssa$i >>> 3;
         $cmp283$i = ($rsize$3$lcssa$i>>>0)<(256);
         if ($cmp283$i) {
          $shl287$i = $shr282$i << 1;
          $arrayidx288$i = ((13800 + ($shl287$i<<2)|0) + 40|0);
          $83 = HEAP32[13800>>2]|0;
          $shl290$i = 1 << $shr282$i;
          $and291$i = $83 & $shl290$i;
          $tobool292$i = ($and291$i|0)==(0);
          do {
           if ($tobool292$i) {
            $or296$i = $83 | $shl290$i;
            HEAP32[13800>>2] = $or296$i;
            $arrayidx288$sum$pre$i = (($shl287$i) + 2)|0;
            $$pre$i144 = ((13800 + ($arrayidx288$sum$pre$i<<2)|0) + 40|0);
            $$pre$phi$i145Z2D = $$pre$i144;$F289$0$i = $arrayidx288$i;
           } else {
            $arrayidx288$sum15$i = (($shl287$i) + 2)|0;
            $84 = ((13800 + ($arrayidx288$sum15$i<<2)|0) + 40|0);
            $85 = HEAP32[$84>>2]|0;
            $86 = HEAP32[((13800 + 16|0))>>2]|0;
            $cmp300$i = ($85>>>0)<($86>>>0);
            if (!($cmp300$i)) {
             $$pre$phi$i145Z2D = $84;$F289$0$i = $85;
             break;
            }
            _abort();
            // unreachable;
           }
          } while(0);
          HEAP32[$$pre$phi$i145Z2D>>2] = $add$ptr$i126;
          $bk310$i = (($F289$0$i) + 12|0);
          HEAP32[$bk310$i>>2] = $add$ptr$i126;
          $add$ptr$sum13$i = (($and144) + 8)|0;
          $fd311$i = (($v$3$lcssa$i) + ($add$ptr$sum13$i)|0);
          HEAP32[$fd311$i>>2] = $F289$0$i;
          $add$ptr$sum14$i = (($and144) + 12)|0;
          $bk312$i = (($v$3$lcssa$i) + ($add$ptr$sum14$i)|0);
          HEAP32[$bk312$i>>2] = $arrayidx288$i;
          break;
         }
         $shr317$i = $rsize$3$lcssa$i >>> 8;
         $cmp318$i = ($shr317$i|0)==(0);
         if ($cmp318$i) {
          $I315$0$i = 0;
         } else {
          $cmp322$i = ($rsize$3$lcssa$i>>>0)>(16777215);
          if ($cmp322$i) {
           $I315$0$i = 31;
          } else {
           $sub328$i = (($shr317$i) + 1048320)|0;
           $shr329$i = $sub328$i >>> 16;
           $and330$i = $shr329$i & 8;
           $shl332$i = $shr317$i << $and330$i;
           $sub333$i = (($shl332$i) + 520192)|0;
           $shr334$i = $sub333$i >>> 16;
           $and335$i = $shr334$i & 4;
           $add336$i = $and335$i | $and330$i;
           $shl337$i = $shl332$i << $and335$i;
           $sub338$i = (($shl337$i) + 245760)|0;
           $shr339$i = $sub338$i >>> 16;
           $and340$i = $shr339$i & 2;
           $add341$i = $add336$i | $and340$i;
           $sub342$i = (14 - ($add341$i))|0;
           $shl343$i = $shl337$i << $and340$i;
           $shr344$i = $shl343$i >>> 15;
           $add345$i = (($sub342$i) + ($shr344$i))|0;
           $shl346$i = $add345$i << 1;
           $add347$i = (($add345$i) + 7)|0;
           $shr348$i = $rsize$3$lcssa$i >>> $add347$i;
           $and349$i = $shr348$i & 1;
           $add350$i = $and349$i | $shl346$i;
           $I315$0$i = $add350$i;
          }
         }
         $arrayidx354$i = ((13800 + ($I315$0$i<<2)|0) + 304|0);
         $add$ptr$sum2$i = (($and144) + 28)|0;
         $index355$i = (($v$3$lcssa$i) + ($add$ptr$sum2$i)|0);
         HEAP32[$index355$i>>2] = $I315$0$i;
         $add$ptr$sum3$i = (($and144) + 16)|0;
         $child356$i = (($v$3$lcssa$i) + ($add$ptr$sum3$i)|0);
         $child356$sum$i = (($and144) + 20)|0;
         $arrayidx357$i = (($v$3$lcssa$i) + ($child356$sum$i)|0);
         HEAP32[$arrayidx357$i>>2] = 0;
         HEAP32[$child356$i>>2] = 0;
         $87 = HEAP32[((13800 + 4|0))>>2]|0;
         $shl361$i = 1 << $I315$0$i;
         $and362$i = $87 & $shl361$i;
         $tobool363$i = ($and362$i|0)==(0);
         if ($tobool363$i) {
          $or367$i = $87 | $shl361$i;
          HEAP32[((13800 + 4|0))>>2] = $or367$i;
          HEAP32[$arrayidx354$i>>2] = $add$ptr$i126;
          $add$ptr$sum4$i = (($and144) + 24)|0;
          $parent368$i = (($v$3$lcssa$i) + ($add$ptr$sum4$i)|0);
          HEAP32[$parent368$i>>2] = $arrayidx354$i;
          $add$ptr$sum5$i = (($and144) + 12)|0;
          $bk369$i = (($v$3$lcssa$i) + ($add$ptr$sum5$i)|0);
          HEAP32[$bk369$i>>2] = $add$ptr$i126;
          $add$ptr$sum6$i = (($and144) + 8)|0;
          $fd370$i = (($v$3$lcssa$i) + ($add$ptr$sum6$i)|0);
          HEAP32[$fd370$i>>2] = $add$ptr$i126;
          break;
         }
         $88 = HEAP32[$arrayidx354$i>>2]|0;
         $cmp373$i = ($I315$0$i|0)==(31);
         if ($cmp373$i) {
          $cond382$i = 0;
         } else {
          $shr377$i = $I315$0$i >>> 1;
          $sub380$i = (25 - ($shr377$i))|0;
          $cond382$i = $sub380$i;
         }
         $head38520$i = (($88) + 4|0);
         $89 = HEAP32[$head38520$i>>2]|0;
         $and38621$i = $89 & -8;
         $cmp38722$i = ($and38621$i|0)==($rsize$3$lcssa$i|0);
         L108: do {
          if ($cmp38722$i) {
           $T$0$lcssa$i = $88;
          } else {
           $shl383$i = $rsize$3$lcssa$i << $cond382$i;
           $K372$024$i = $shl383$i;$T$023$i = $88;
           while(1) {
            $shr390$i = $K372$024$i >>> 31;
            $arrayidx393$i = ((($T$023$i) + ($shr390$i<<2)|0) + 16|0);
            $90 = HEAP32[$arrayidx393$i>>2]|0;
            $cmp395$i = ($90|0)==(0|0);
            if ($cmp395$i) {
             break;
            }
            $shl394$i = $K372$024$i << 1;
            $head385$i = (($90) + 4|0);
            $91 = HEAP32[$head385$i>>2]|0;
            $and386$i = $91 & -8;
            $cmp387$i = ($and386$i|0)==($rsize$3$lcssa$i|0);
            if ($cmp387$i) {
             $T$0$lcssa$i = $90;
             break L108;
            } else {
             $K372$024$i = $shl394$i;$T$023$i = $90;
            }
           }
           $92 = HEAP32[((13800 + 16|0))>>2]|0;
           $cmp400$i = ($arrayidx393$i>>>0)<($92>>>0);
           if ($cmp400$i) {
            _abort();
            // unreachable;
           } else {
            HEAP32[$arrayidx393$i>>2] = $add$ptr$i126;
            $add$ptr$sum10$i = (($and144) + 24)|0;
            $parent405$i = (($v$3$lcssa$i) + ($add$ptr$sum10$i)|0);
            HEAP32[$parent405$i>>2] = $T$023$i;
            $add$ptr$sum11$i = (($and144) + 12)|0;
            $bk406$i = (($v$3$lcssa$i) + ($add$ptr$sum11$i)|0);
            HEAP32[$bk406$i>>2] = $add$ptr$i126;
            $add$ptr$sum12$i = (($and144) + 8)|0;
            $fd407$i = (($v$3$lcssa$i) + ($add$ptr$sum12$i)|0);
            HEAP32[$fd407$i>>2] = $add$ptr$i126;
            break L87;
           }
          }
         } while(0);
         $fd412$i = (($T$0$lcssa$i) + 8|0);
         $93 = HEAP32[$fd412$i>>2]|0;
         $94 = HEAP32[((13800 + 16|0))>>2]|0;
         $cmp414$i = ($T$0$lcssa$i>>>0)<($94>>>0);
         if ($cmp414$i) {
          _abort();
          // unreachable;
         }
         $cmp418$i = ($93>>>0)<($94>>>0);
         if ($cmp418$i) {
          _abort();
          // unreachable;
         } else {
          $bk425$i = (($93) + 12|0);
          HEAP32[$bk425$i>>2] = $add$ptr$i126;
          HEAP32[$fd412$i>>2] = $add$ptr$i126;
          $add$ptr$sum7$i = (($and144) + 8)|0;
          $fd427$i = (($v$3$lcssa$i) + ($add$ptr$sum7$i)|0);
          HEAP32[$fd427$i>>2] = $93;
          $add$ptr$sum8$i = (($and144) + 12)|0;
          $bk428$i = (($v$3$lcssa$i) + ($add$ptr$sum8$i)|0);
          HEAP32[$bk428$i>>2] = $T$0$lcssa$i;
          $add$ptr$sum9$i = (($and144) + 24)|0;
          $parent429$i = (($v$3$lcssa$i) + ($add$ptr$sum9$i)|0);
          HEAP32[$parent429$i>>2] = 0;
          break;
         }
        }
       } while(0);
       $add$ptr436$i = (($v$3$lcssa$i) + 8|0);
       $mem$0 = $add$ptr436$i;
       STACKTOP = sp;return ($mem$0|0);
      } else {
       $nb$0 = $and144;
      }
     }
    }
   }
  }
 } while(0);
 $95 = HEAP32[((13800 + 8|0))>>2]|0;
 $cmp155 = ($nb$0>>>0)>($95>>>0);
 if (!($cmp155)) {
  $sub159 = (($95) - ($nb$0))|0;
  $96 = HEAP32[((13800 + 20|0))>>2]|0;
  $cmp161 = ($sub159>>>0)>(15);
  if ($cmp161) {
   $add$ptr165 = (($96) + ($nb$0)|0);
   HEAP32[((13800 + 20|0))>>2] = $add$ptr165;
   HEAP32[((13800 + 8|0))>>2] = $sub159;
   $or166 = $sub159 | 1;
   $add$ptr165$sum = (($nb$0) + 4)|0;
   $head167 = (($96) + ($add$ptr165$sum)|0);
   HEAP32[$head167>>2] = $or166;
   $add$ptr168 = (($96) + ($95)|0);
   HEAP32[$add$ptr168>>2] = $sub159;
   $or171 = $nb$0 | 3;
   $head172 = (($96) + 4|0);
   HEAP32[$head172>>2] = $or171;
  } else {
   HEAP32[((13800 + 8|0))>>2] = 0;
   HEAP32[((13800 + 20|0))>>2] = 0;
   $or175 = $95 | 3;
   $head176 = (($96) + 4|0);
   HEAP32[$head176>>2] = $or175;
   $add$ptr177$sum = (($95) + 4)|0;
   $head178 = (($96) + ($add$ptr177$sum)|0);
   $97 = HEAP32[$head178>>2]|0;
   $or179 = $97 | 1;
   HEAP32[$head178>>2] = $or179;
  }
  $add$ptr181 = (($96) + 8|0);
  $mem$0 = $add$ptr181;
  STACKTOP = sp;return ($mem$0|0);
 }
 $98 = HEAP32[((13800 + 12|0))>>2]|0;
 $cmp183 = ($nb$0>>>0)<($98>>>0);
 if ($cmp183) {
  $sub187 = (($98) - ($nb$0))|0;
  HEAP32[((13800 + 12|0))>>2] = $sub187;
  $99 = HEAP32[((13800 + 24|0))>>2]|0;
  $add$ptr190 = (($99) + ($nb$0)|0);
  HEAP32[((13800 + 24|0))>>2] = $add$ptr190;
  $or191 = $sub187 | 1;
  $add$ptr190$sum = (($nb$0) + 4)|0;
  $head192 = (($99) + ($add$ptr190$sum)|0);
  HEAP32[$head192>>2] = $or191;
  $or194 = $nb$0 | 3;
  $head195 = (($99) + 4|0);
  HEAP32[$head195>>2] = $or194;
  $add$ptr196 = (($99) + 8|0);
  $mem$0 = $add$ptr196;
  STACKTOP = sp;return ($mem$0|0);
 }
 $100 = HEAP32[14272>>2]|0;
 $cmp$i146 = ($100|0)==(0);
 do {
  if ($cmp$i146) {
   $call$i$i = (_sysconf(30)|0);
   $sub$i$i = (($call$i$i) + -1)|0;
   $and$i$i = $sub$i$i & $call$i$i;
   $cmp1$i$i = ($and$i$i|0)==(0);
   if ($cmp1$i$i) {
    HEAP32[((14272 + 8|0))>>2] = $call$i$i;
    HEAP32[((14272 + 4|0))>>2] = $call$i$i;
    HEAP32[((14272 + 12|0))>>2] = -1;
    HEAP32[((14272 + 16|0))>>2] = -1;
    HEAP32[((14272 + 20|0))>>2] = 0;
    HEAP32[((13800 + 444|0))>>2] = 0;
    $call6$i$i = (_time((0|0))|0);
    $xor$i$i = $call6$i$i & -16;
    $and7$i$i = $xor$i$i ^ 1431655768;
    HEAP32[14272>>2] = $and7$i$i;
    break;
   } else {
    _abort();
    // unreachable;
   }
  }
 } while(0);
 $add$i147 = (($nb$0) + 48)|0;
 $101 = HEAP32[((14272 + 8|0))>>2]|0;
 $sub$i148 = (($nb$0) + 47)|0;
 $add9$i = (($101) + ($sub$i148))|0;
 $neg$i149 = (0 - ($101))|0;
 $and11$i = $add9$i & $neg$i149;
 $cmp12$i = ($and11$i>>>0)>($nb$0>>>0);
 if (!($cmp12$i)) {
  $mem$0 = 0;
  STACKTOP = sp;return ($mem$0|0);
 }
 $102 = HEAP32[((13800 + 440|0))>>2]|0;
 $cmp15$i = ($102|0)==(0);
 if (!($cmp15$i)) {
  $103 = HEAP32[((13800 + 432|0))>>2]|0;
  $add17$i150 = (($103) + ($and11$i))|0;
  $cmp19$i = ($add17$i150>>>0)<=($103>>>0);
  $cmp21$i = ($add17$i150>>>0)>($102>>>0);
  $or$cond1$i = $cmp19$i | $cmp21$i;
  if ($or$cond1$i) {
   $mem$0 = 0;
   STACKTOP = sp;return ($mem$0|0);
  }
 }
 $104 = HEAP32[((13800 + 444|0))>>2]|0;
 $and26$i = $104 & 4;
 $tobool27$i = ($and26$i|0)==(0);
 L269: do {
  if ($tobool27$i) {
   $105 = HEAP32[((13800 + 24|0))>>2]|0;
   $cmp29$i = ($105|0)==(0|0);
   L271: do {
    if ($cmp29$i) {
     label = 182;
    } else {
     $sp$0$i$i = ((13800 + 448|0));
     while(1) {
      $106 = HEAP32[$sp$0$i$i>>2]|0;
      $cmp$i9$i = ($106>>>0)>($105>>>0);
      if (!($cmp$i9$i)) {
       $size$i$i = (($sp$0$i$i) + 4|0);
       $107 = HEAP32[$size$i$i>>2]|0;
       $add$ptr$i$i = (($106) + ($107)|0);
       $cmp2$i$i = ($add$ptr$i$i>>>0)>($105>>>0);
       if ($cmp2$i$i) {
        break;
       }
      }
      $next$i$i = (($sp$0$i$i) + 8|0);
      $108 = HEAP32[$next$i$i>>2]|0;
      $cmp3$i$i = ($108|0)==(0|0);
      if ($cmp3$i$i) {
       label = 182;
       break L271;
      } else {
       $sp$0$i$i = $108;
      }
     }
     $cmp32$i152 = ($sp$0$i$i|0)==(0|0);
     if ($cmp32$i152) {
      label = 182;
     } else {
      $113 = HEAP32[((13800 + 12|0))>>2]|0;
      $add74$i = (($add9$i) - ($113))|0;
      $and77$i = $add74$i & $neg$i149;
      $cmp78$i = ($and77$i>>>0)<(2147483647);
      if ($cmp78$i) {
       $call80$i = (_sbrk(($and77$i|0))|0);
       $114 = HEAP32[$sp$0$i$i>>2]|0;
       $115 = HEAP32[$size$i$i>>2]|0;
       $add$ptr$i160 = (($114) + ($115)|0);
       $cmp82$i = ($call80$i|0)==($add$ptr$i160|0);
       $and77$$i = $cmp82$i ? $and77$i : 0;
       $call80$$i = $cmp82$i ? $call80$i : (-1);
       $br$0$i = $call80$i;$ssize$1$i = $and77$i;$tbase$0$i = $call80$$i;$tsize$0$i = $and77$$i;
       label = 191;
      } else {
       $tsize$0748284$i = 0;
      }
     }
    }
   } while(0);
   do {
    if ((label|0) == 182) {
     $call34$i = (_sbrk(0)|0);
     $cmp35$i154 = ($call34$i|0)==((-1)|0);
     if ($cmp35$i154) {
      $tsize$0748284$i = 0;
     } else {
      $109 = $call34$i;
      $110 = HEAP32[((14272 + 4|0))>>2]|0;
      $sub38$i = (($110) + -1)|0;
      $and39$i = $sub38$i & $109;
      $cmp40$i155 = ($and39$i|0)==(0);
      if ($cmp40$i155) {
       $ssize$0$i = $and11$i;
      } else {
       $add43$i = (($sub38$i) + ($109))|0;
       $neg45$i = (0 - ($110))|0;
       $and46$i = $add43$i & $neg45$i;
       $sub47$i = (($and11$i) - ($109))|0;
       $add48$i = (($sub47$i) + ($and46$i))|0;
       $ssize$0$i = $add48$i;
      }
      $111 = HEAP32[((13800 + 432|0))>>2]|0;
      $add51$i = (($111) + ($ssize$0$i))|0;
      $cmp52$i = ($ssize$0$i>>>0)>($nb$0>>>0);
      $cmp54$i156 = ($ssize$0$i>>>0)<(2147483647);
      $or$cond$i157 = $cmp52$i & $cmp54$i156;
      if ($or$cond$i157) {
       $112 = HEAP32[((13800 + 440|0))>>2]|0;
       $cmp57$i = ($112|0)==(0);
       if (!($cmp57$i)) {
        $cmp60$i = ($add51$i>>>0)<=($111>>>0);
        $cmp63$i = ($add51$i>>>0)>($112>>>0);
        $or$cond2$i = $cmp60$i | $cmp63$i;
        if ($or$cond2$i) {
         $tsize$0748284$i = 0;
         break;
        }
       }
       $call65$i = (_sbrk(($ssize$0$i|0))|0);
       $cmp66$i158 = ($call65$i|0)==($call34$i|0);
       $ssize$0$$i = $cmp66$i158 ? $ssize$0$i : 0;
       $call34$$i = $cmp66$i158 ? $call34$i : (-1);
       $br$0$i = $call65$i;$ssize$1$i = $ssize$0$i;$tbase$0$i = $call34$$i;$tsize$0$i = $ssize$0$$i;
       label = 191;
      } else {
       $tsize$0748284$i = 0;
      }
     }
    }
   } while(0);
   L291: do {
    if ((label|0) == 191) {
     $sub109$i = (0 - ($ssize$1$i))|0;
     $cmp86$i = ($tbase$0$i|0)==((-1)|0);
     if (!($cmp86$i)) {
      $tbase$291$i = $tbase$0$i;$tsize$290$i = $tsize$0$i;
      label = 202;
      break L269;
     }
     $cmp88$i = ($br$0$i|0)!=((-1)|0);
     $cmp90$i161 = ($ssize$1$i>>>0)<(2147483647);
     $or$cond3$i = $cmp88$i & $cmp90$i161;
     $cmp93$i = ($ssize$1$i>>>0)<($add$i147>>>0);
     $or$cond4$i = $or$cond3$i & $cmp93$i;
     do {
      if ($or$cond4$i) {
       $116 = HEAP32[((14272 + 8|0))>>2]|0;
       $sub96$i = (($sub$i148) - ($ssize$1$i))|0;
       $add98$i = (($sub96$i) + ($116))|0;
       $neg100$i = (0 - ($116))|0;
       $and101$i = $add98$i & $neg100$i;
       $cmp102$i = ($and101$i>>>0)<(2147483647);
       if ($cmp102$i) {
        $call104$i = (_sbrk(($and101$i|0))|0);
        $cmp105$i = ($call104$i|0)==((-1)|0);
        if ($cmp105$i) {
         (_sbrk(($sub109$i|0))|0);
         $tsize$0748284$i = $tsize$0$i;
         break L291;
        } else {
         $add107$i = (($and101$i) + ($ssize$1$i))|0;
         $ssize$2$i = $add107$i;
         break;
        }
       } else {
        $ssize$2$i = $ssize$1$i;
       }
      } else {
       $ssize$2$i = $ssize$1$i;
      }
     } while(0);
     $cmp115$i162 = ($br$0$i|0)==((-1)|0);
     if ($cmp115$i162) {
      $tsize$0748284$i = $tsize$0$i;
     } else {
      $tbase$291$i = $br$0$i;$tsize$290$i = $ssize$2$i;
      label = 202;
      break L269;
     }
    }
   } while(0);
   $117 = HEAP32[((13800 + 444|0))>>2]|0;
   $or$i163 = $117 | 4;
   HEAP32[((13800 + 444|0))>>2] = $or$i163;
   $tsize$1$i = $tsize$0748284$i;
   label = 199;
  } else {
   $tsize$1$i = 0;
   label = 199;
  }
 } while(0);
 if ((label|0) == 199) {
  $cmp124$i = ($and11$i>>>0)<(2147483647);
  if ($cmp124$i) {
   $call128$i = (_sbrk(($and11$i|0))|0);
   $call129$i = (_sbrk(0)|0);
   $notlhs$i = ($call128$i|0)!=((-1)|0);
   $notrhs$i = ($call129$i|0)!=((-1)|0);
   $or$cond6$not$i = $notrhs$i & $notlhs$i;
   $cmp134$i = ($call128$i>>>0)<($call129$i>>>0);
   $or$cond7$i = $or$cond6$not$i & $cmp134$i;
   if ($or$cond7$i) {
    $sub$ptr$lhs$cast$i = $call129$i;
    $sub$ptr$rhs$cast$i = $call128$i;
    $sub$ptr$sub$i = (($sub$ptr$lhs$cast$i) - ($sub$ptr$rhs$cast$i))|0;
    $add137$i = (($nb$0) + 40)|0;
    $cmp138$i164 = ($sub$ptr$sub$i>>>0)>($add137$i>>>0);
    $sub$ptr$sub$tsize$1$i = $cmp138$i164 ? $sub$ptr$sub$i : $tsize$1$i;
    if ($cmp138$i164) {
     $tbase$291$i = $call128$i;$tsize$290$i = $sub$ptr$sub$tsize$1$i;
     label = 202;
    }
   }
  }
 }
 if ((label|0) == 202) {
  $118 = HEAP32[((13800 + 432|0))>>2]|0;
  $add147$i = (($118) + ($tsize$290$i))|0;
  HEAP32[((13800 + 432|0))>>2] = $add147$i;
  $119 = HEAP32[((13800 + 436|0))>>2]|0;
  $cmp148$i = ($add147$i>>>0)>($119>>>0);
  if ($cmp148$i) {
   HEAP32[((13800 + 436|0))>>2] = $add147$i;
  }
  $120 = HEAP32[((13800 + 24|0))>>2]|0;
  $cmp154$i = ($120|0)==(0|0);
  L311: do {
   if ($cmp154$i) {
    $121 = HEAP32[((13800 + 16|0))>>2]|0;
    $cmp156$i = ($121|0)==(0|0);
    $cmp159$i166 = ($tbase$291$i>>>0)<($121>>>0);
    $or$cond8$i = $cmp156$i | $cmp159$i166;
    if ($or$cond8$i) {
     HEAP32[((13800 + 16|0))>>2] = $tbase$291$i;
    }
    HEAP32[((13800 + 448|0))>>2] = $tbase$291$i;
    HEAP32[((13800 + 452|0))>>2] = $tsize$290$i;
    HEAP32[((13800 + 460|0))>>2] = 0;
    $122 = HEAP32[14272>>2]|0;
    HEAP32[((13800 + 36|0))>>2] = $122;
    HEAP32[((13800 + 32|0))>>2] = -1;
    $i$02$i$i = 0;
    while(1) {
     $shl$i$i = $i$02$i$i << 1;
     $arrayidx$i$i = ((13800 + ($shl$i$i<<2)|0) + 40|0);
     $arrayidx$sum$i$i = (($shl$i$i) + 3)|0;
     $123 = ((13800 + ($arrayidx$sum$i$i<<2)|0) + 40|0);
     HEAP32[$123>>2] = $arrayidx$i$i;
     $arrayidx$sum1$i$i = (($shl$i$i) + 2)|0;
     $124 = ((13800 + ($arrayidx$sum1$i$i<<2)|0) + 40|0);
     HEAP32[$124>>2] = $arrayidx$i$i;
     $inc$i$i = (($i$02$i$i) + 1)|0;
     $exitcond$i$i = ($inc$i$i|0)==(32);
     if ($exitcond$i$i) {
      break;
     } else {
      $i$02$i$i = $inc$i$i;
     }
    }
    $sub169$i = (($tsize$290$i) + -40)|0;
    $add$ptr$i11$i = (($tbase$291$i) + 8|0);
    $125 = $add$ptr$i11$i;
    $and$i12$i = $125 & 7;
    $cmp$i13$i = ($and$i12$i|0)==(0);
    if ($cmp$i13$i) {
     $cond$i$i = 0;
    } else {
     $126 = (0 - ($125))|0;
     $and3$i$i = $126 & 7;
     $cond$i$i = $and3$i$i;
    }
    $add$ptr4$i$i = (($tbase$291$i) + ($cond$i$i)|0);
    $sub5$i$i = (($sub169$i) - ($cond$i$i))|0;
    HEAP32[((13800 + 24|0))>>2] = $add$ptr4$i$i;
    HEAP32[((13800 + 12|0))>>2] = $sub5$i$i;
    $or$i$i = $sub5$i$i | 1;
    $add$ptr4$sum$i$i = (($cond$i$i) + 4)|0;
    $head$i$i = (($tbase$291$i) + ($add$ptr4$sum$i$i)|0);
    HEAP32[$head$i$i>>2] = $or$i$i;
    $add$ptr6$sum$i$i = (($tsize$290$i) + -36)|0;
    $head7$i$i = (($tbase$291$i) + ($add$ptr6$sum$i$i)|0);
    HEAP32[$head7$i$i>>2] = 40;
    $127 = HEAP32[((14272 + 16|0))>>2]|0;
    HEAP32[((13800 + 28|0))>>2] = $127;
   } else {
    $sp$0109$i = ((13800 + 448|0));
    while(1) {
     $128 = HEAP32[$sp$0109$i>>2]|0;
     $size185$i = (($sp$0109$i) + 4|0);
     $129 = HEAP32[$size185$i>>2]|0;
     $add$ptr186$i = (($128) + ($129)|0);
     $cmp187$i = ($tbase$291$i|0)==($add$ptr186$i|0);
     if ($cmp187$i) {
      label = 214;
      break;
     }
     $next$i = (($sp$0109$i) + 8|0);
     $130 = HEAP32[$next$i>>2]|0;
     $cmp183$i = ($130|0)==(0|0);
     if ($cmp183$i) {
      break;
     } else {
      $sp$0109$i = $130;
     }
    }
    if ((label|0) == 214) {
     $sflags190$i = (($sp$0109$i) + 12|0);
     $131 = HEAP32[$sflags190$i>>2]|0;
     $and191$i = $131 & 8;
     $tobool192$i = ($and191$i|0)==(0);
     if ($tobool192$i) {
      $cmp200$i = ($120>>>0)>=($128>>>0);
      $cmp206$i = ($120>>>0)<($tbase$291$i>>>0);
      $or$cond93$i = $cmp200$i & $cmp206$i;
      if ($or$cond93$i) {
       $add209$i = (($129) + ($tsize$290$i))|0;
       HEAP32[$size185$i>>2] = $add209$i;
       $132 = HEAP32[((13800 + 12|0))>>2]|0;
       $add212$i = (($132) + ($tsize$290$i))|0;
       $add$ptr$i22$i = (($120) + 8|0);
       $133 = $add$ptr$i22$i;
       $and$i23$i = $133 & 7;
       $cmp$i24$i = ($and$i23$i|0)==(0);
       if ($cmp$i24$i) {
        $cond$i27$i = 0;
       } else {
        $134 = (0 - ($133))|0;
        $and3$i25$i = $134 & 7;
        $cond$i27$i = $and3$i25$i;
       }
       $add$ptr4$i28$i = (($120) + ($cond$i27$i)|0);
       $sub5$i29$i = (($add212$i) - ($cond$i27$i))|0;
       HEAP32[((13800 + 24|0))>>2] = $add$ptr4$i28$i;
       HEAP32[((13800 + 12|0))>>2] = $sub5$i29$i;
       $or$i30$i = $sub5$i29$i | 1;
       $add$ptr4$sum$i31$i = (($cond$i27$i) + 4)|0;
       $head$i32$i = (($120) + ($add$ptr4$sum$i31$i)|0);
       HEAP32[$head$i32$i>>2] = $or$i30$i;
       $add$ptr6$sum$i33$i = (($add212$i) + 4)|0;
       $head7$i34$i = (($120) + ($add$ptr6$sum$i33$i)|0);
       HEAP32[$head7$i34$i>>2] = 40;
       $135 = HEAP32[((14272 + 16|0))>>2]|0;
       HEAP32[((13800 + 28|0))>>2] = $135;
       break;
      }
     }
    }
    $136 = HEAP32[((13800 + 16|0))>>2]|0;
    $cmp215$i = ($tbase$291$i>>>0)<($136>>>0);
    if ($cmp215$i) {
     HEAP32[((13800 + 16|0))>>2] = $tbase$291$i;
    }
    $add$ptr224$i = (($tbase$291$i) + ($tsize$290$i)|0);
    $sp$1105$i = ((13800 + 448|0));
    while(1) {
     $137 = HEAP32[$sp$1105$i>>2]|0;
     $cmp225$i = ($137|0)==($add$ptr224$i|0);
     if ($cmp225$i) {
      label = 224;
      break;
     }
     $next228$i = (($sp$1105$i) + 8|0);
     $138 = HEAP32[$next228$i>>2]|0;
     $cmp221$i = ($138|0)==(0|0);
     if ($cmp221$i) {
      break;
     } else {
      $sp$1105$i = $138;
     }
    }
    if ((label|0) == 224) {
     $sflags232$i = (($sp$1105$i) + 12|0);
     $139 = HEAP32[$sflags232$i>>2]|0;
     $and233$i = $139 & 8;
     $tobool234$i = ($and233$i|0)==(0);
     if ($tobool234$i) {
      HEAP32[$sp$1105$i>>2] = $tbase$291$i;
      $size242$i = (($sp$1105$i) + 4|0);
      $140 = HEAP32[$size242$i>>2]|0;
      $add243$i = (($140) + ($tsize$290$i))|0;
      HEAP32[$size242$i>>2] = $add243$i;
      $add$ptr$i37$i = (($tbase$291$i) + 8|0);
      $141 = $add$ptr$i37$i;
      $and$i38$i = $141 & 7;
      $cmp$i39$i = ($and$i38$i|0)==(0);
      if ($cmp$i39$i) {
       $cond$i42$i = 0;
      } else {
       $142 = (0 - ($141))|0;
       $and3$i40$i = $142 & 7;
       $cond$i42$i = $and3$i40$i;
      }
      $add$ptr4$i43$i = (($tbase$291$i) + ($cond$i42$i)|0);
      $add$ptr224$sum$i = (($tsize$290$i) + 8)|0;
      $add$ptr5$i$i = (($tbase$291$i) + ($add$ptr224$sum$i)|0);
      $143 = $add$ptr5$i$i;
      $and6$i44$i = $143 & 7;
      $cmp7$i$i = ($and6$i44$i|0)==(0);
      if ($cmp7$i$i) {
       $cond15$i$i = 0;
      } else {
       $144 = (0 - ($143))|0;
       $and13$i$i = $144 & 7;
       $cond15$i$i = $and13$i$i;
      }
      $add$ptr224$sum131$i = (($cond15$i$i) + ($tsize$290$i))|0;
      $add$ptr16$i$i = (($tbase$291$i) + ($add$ptr224$sum131$i)|0);
      $sub$ptr$lhs$cast$i46$i = $add$ptr16$i$i;
      $sub$ptr$rhs$cast$i47$i = $add$ptr4$i43$i;
      $sub$ptr$sub$i48$i = (($sub$ptr$lhs$cast$i46$i) - ($sub$ptr$rhs$cast$i47$i))|0;
      $add$ptr4$sum$i49$i = (($cond$i42$i) + ($nb$0))|0;
      $add$ptr17$i$i = (($tbase$291$i) + ($add$ptr4$sum$i49$i)|0);
      $sub18$i$i = (($sub$ptr$sub$i48$i) - ($nb$0))|0;
      $or19$i$i = $nb$0 | 3;
      $add$ptr4$sum1$i$i = (($cond$i42$i) + 4)|0;
      $head$i50$i = (($tbase$291$i) + ($add$ptr4$sum1$i$i)|0);
      HEAP32[$head$i50$i>>2] = $or19$i$i;
      $145 = HEAP32[((13800 + 24|0))>>2]|0;
      $cmp20$i$i = ($add$ptr16$i$i|0)==($145|0);
      L338: do {
       if ($cmp20$i$i) {
        $146 = HEAP32[((13800 + 12|0))>>2]|0;
        $add$i$i = (($146) + ($sub18$i$i))|0;
        HEAP32[((13800 + 12|0))>>2] = $add$i$i;
        HEAP32[((13800 + 24|0))>>2] = $add$ptr17$i$i;
        $or22$i$i = $add$i$i | 1;
        $add$ptr17$sum35$i$i = (($add$ptr4$sum$i49$i) + 4)|0;
        $head23$i$i = (($tbase$291$i) + ($add$ptr17$sum35$i$i)|0);
        HEAP32[$head23$i$i>>2] = $or22$i$i;
       } else {
        $147 = HEAP32[((13800 + 20|0))>>2]|0;
        $cmp24$i$i = ($add$ptr16$i$i|0)==($147|0);
        if ($cmp24$i$i) {
         $148 = HEAP32[((13800 + 8|0))>>2]|0;
         $add26$i$i = (($148) + ($sub18$i$i))|0;
         HEAP32[((13800 + 8|0))>>2] = $add26$i$i;
         HEAP32[((13800 + 20|0))>>2] = $add$ptr17$i$i;
         $or28$i$i = $add26$i$i | 1;
         $add$ptr17$sum33$i$i = (($add$ptr4$sum$i49$i) + 4)|0;
         $head29$i$i = (($tbase$291$i) + ($add$ptr17$sum33$i$i)|0);
         HEAP32[$head29$i$i>>2] = $or28$i$i;
         $add$ptr17$sum34$i$i = (($add26$i$i) + ($add$ptr4$sum$i49$i))|0;
         $add$ptr30$i52$i = (($tbase$291$i) + ($add$ptr17$sum34$i$i)|0);
         HEAP32[$add$ptr30$i52$i>>2] = $add26$i$i;
         break;
        }
        $add$ptr16$sum$i$i = (($tsize$290$i) + 4)|0;
        $add$ptr224$sum132$i = (($add$ptr16$sum$i$i) + ($cond15$i$i))|0;
        $head32$i$i = (($tbase$291$i) + ($add$ptr224$sum132$i)|0);
        $149 = HEAP32[$head32$i$i>>2]|0;
        $and33$i$i = $149 & 3;
        $cmp34$i$i = ($and33$i$i|0)==(1);
        if ($cmp34$i$i) {
         $and37$i$i = $149 & -8;
         $shr$i54$i = $149 >>> 3;
         $cmp38$i$i = ($149>>>0)<(256);
         L346: do {
          if ($cmp38$i$i) {
           $add$ptr16$sum3031$i$i = $cond15$i$i | 8;
           $add$ptr224$sum142$i = (($add$ptr16$sum3031$i$i) + ($tsize$290$i))|0;
           $fd$i$i = (($tbase$291$i) + ($add$ptr224$sum142$i)|0);
           $150 = HEAP32[$fd$i$i>>2]|0;
           $add$ptr16$sum32$i$i = (($tsize$290$i) + 12)|0;
           $add$ptr224$sum143$i = (($add$ptr16$sum32$i$i) + ($cond15$i$i))|0;
           $bk$i55$i = (($tbase$291$i) + ($add$ptr224$sum143$i)|0);
           $151 = HEAP32[$bk$i55$i>>2]|0;
           $shl$i56$i = $shr$i54$i << 1;
           $arrayidx$i57$i = ((13800 + ($shl$i56$i<<2)|0) + 40|0);
           $cmp41$i$i = ($150|0)==($arrayidx$i57$i|0);
           do {
            if (!($cmp41$i$i)) {
             $152 = HEAP32[((13800 + 16|0))>>2]|0;
             $cmp42$i$i = ($150>>>0)<($152>>>0);
             if ($cmp42$i$i) {
              _abort();
              // unreachable;
             }
             $bk43$i$i = (($150) + 12|0);
             $153 = HEAP32[$bk43$i$i>>2]|0;
             $cmp44$i$i = ($153|0)==($add$ptr16$i$i|0);
             if ($cmp44$i$i) {
              break;
             }
             _abort();
             // unreachable;
            }
           } while(0);
           $cmp46$i59$i = ($151|0)==($150|0);
           if ($cmp46$i59$i) {
            $shl48$i$i = 1 << $shr$i54$i;
            $neg$i$i = $shl48$i$i ^ -1;
            $154 = HEAP32[13800>>2]|0;
            $and49$i$i = $154 & $neg$i$i;
            HEAP32[13800>>2] = $and49$i$i;
            break;
           }
           $cmp54$i$i = ($151|0)==($arrayidx$i57$i|0);
           do {
            if ($cmp54$i$i) {
             $fd68$pre$i$i = (($151) + 8|0);
             $fd68$pre$phi$i$iZ2D = $fd68$pre$i$i;
            } else {
             $155 = HEAP32[((13800 + 16|0))>>2]|0;
             $cmp57$i$i = ($151>>>0)<($155>>>0);
             if ($cmp57$i$i) {
              _abort();
              // unreachable;
             }
             $fd59$i$i = (($151) + 8|0);
             $156 = HEAP32[$fd59$i$i>>2]|0;
             $cmp60$i$i = ($156|0)==($add$ptr16$i$i|0);
             if ($cmp60$i$i) {
              $fd68$pre$phi$i$iZ2D = $fd59$i$i;
              break;
             }
             _abort();
             // unreachable;
            }
           } while(0);
           $bk67$i$i = (($150) + 12|0);
           HEAP32[$bk67$i$i>>2] = $151;
           HEAP32[$fd68$pre$phi$i$iZ2D>>2] = $150;
          } else {
           $add$ptr16$sum23$i$i = $cond15$i$i | 24;
           $add$ptr224$sum133$i = (($add$ptr16$sum23$i$i) + ($tsize$290$i))|0;
           $parent$i61$i = (($tbase$291$i) + ($add$ptr224$sum133$i)|0);
           $157 = HEAP32[$parent$i61$i>>2]|0;
           $add$ptr16$sum4$i$i = (($tsize$290$i) + 12)|0;
           $add$ptr224$sum134$i = (($add$ptr16$sum4$i$i) + ($cond15$i$i))|0;
           $bk74$i$i = (($tbase$291$i) + ($add$ptr224$sum134$i)|0);
           $158 = HEAP32[$bk74$i$i>>2]|0;
           $cmp75$i$i = ($158|0)==($add$ptr16$i$i|0);
           do {
            if ($cmp75$i$i) {
             $add$ptr16$sum56$i$i = $cond15$i$i | 16;
             $add$ptr224$sum140$i = (($add$ptr16$sum$i$i) + ($add$ptr16$sum56$i$i))|0;
             $arrayidx96$i$i = (($tbase$291$i) + ($add$ptr224$sum140$i)|0);
             $163 = HEAP32[$arrayidx96$i$i>>2]|0;
             $cmp97$i$i = ($163|0)==(0|0);
             if ($cmp97$i$i) {
              $add$ptr224$sum141$i = (($add$ptr16$sum56$i$i) + ($tsize$290$i))|0;
              $child$i$i = (($tbase$291$i) + ($add$ptr224$sum141$i)|0);
              $164 = HEAP32[$child$i$i>>2]|0;
              $cmp100$i$i = ($164|0)==(0|0);
              if ($cmp100$i$i) {
               $R$1$i$i = 0;
               break;
              } else {
               $R$0$i$i = $164;$RP$0$i$i = $child$i$i;
              }
             } else {
              $R$0$i$i = $163;$RP$0$i$i = $arrayidx96$i$i;
             }
             while(1) {
              $arrayidx103$i$i = (($R$0$i$i) + 20|0);
              $165 = HEAP32[$arrayidx103$i$i>>2]|0;
              $cmp104$i$i = ($165|0)==(0|0);
              if (!($cmp104$i$i)) {
               $R$0$i$i = $165;$RP$0$i$i = $arrayidx103$i$i;
               continue;
              }
              $arrayidx107$i$i = (($R$0$i$i) + 16|0);
              $166 = HEAP32[$arrayidx107$i$i>>2]|0;
              $cmp108$i$i = ($166|0)==(0|0);
              if ($cmp108$i$i) {
               break;
              } else {
               $R$0$i$i = $166;$RP$0$i$i = $arrayidx107$i$i;
              }
             }
             $167 = HEAP32[((13800 + 16|0))>>2]|0;
             $cmp112$i$i = ($RP$0$i$i>>>0)<($167>>>0);
             if ($cmp112$i$i) {
              _abort();
              // unreachable;
             } else {
              HEAP32[$RP$0$i$i>>2] = 0;
              $R$1$i$i = $R$0$i$i;
              break;
             }
            } else {
             $add$ptr16$sum2829$i$i = $cond15$i$i | 8;
             $add$ptr224$sum135$i = (($add$ptr16$sum2829$i$i) + ($tsize$290$i))|0;
             $fd78$i$i = (($tbase$291$i) + ($add$ptr224$sum135$i)|0);
             $159 = HEAP32[$fd78$i$i>>2]|0;
             $160 = HEAP32[((13800 + 16|0))>>2]|0;
             $cmp81$i$i = ($159>>>0)<($160>>>0);
             if ($cmp81$i$i) {
              _abort();
              // unreachable;
             }
             $bk82$i$i = (($159) + 12|0);
             $161 = HEAP32[$bk82$i$i>>2]|0;
             $cmp83$i$i = ($161|0)==($add$ptr16$i$i|0);
             if (!($cmp83$i$i)) {
              _abort();
              // unreachable;
             }
             $fd85$i$i = (($158) + 8|0);
             $162 = HEAP32[$fd85$i$i>>2]|0;
             $cmp86$i$i = ($162|0)==($add$ptr16$i$i|0);
             if ($cmp86$i$i) {
              HEAP32[$bk82$i$i>>2] = $158;
              HEAP32[$fd85$i$i>>2] = $159;
              $R$1$i$i = $158;
              break;
             } else {
              _abort();
              // unreachable;
             }
            }
           } while(0);
           $cmp120$i63$i = ($157|0)==(0|0);
           if ($cmp120$i63$i) {
            break;
           }
           $add$ptr16$sum25$i$i = (($tsize$290$i) + 28)|0;
           $add$ptr224$sum136$i = (($add$ptr16$sum25$i$i) + ($cond15$i$i))|0;
           $index$i64$i = (($tbase$291$i) + ($add$ptr224$sum136$i)|0);
           $168 = HEAP32[$index$i64$i>>2]|0;
           $arrayidx123$i$i = ((13800 + ($168<<2)|0) + 304|0);
           $169 = HEAP32[$arrayidx123$i$i>>2]|0;
           $cmp124$i$i = ($add$ptr16$i$i|0)==($169|0);
           do {
            if ($cmp124$i$i) {
             HEAP32[$arrayidx123$i$i>>2] = $R$1$i$i;
             $cond37$i$i = ($R$1$i$i|0)==(0|0);
             if (!($cond37$i$i)) {
              break;
             }
             $shl131$i$i = 1 << $168;
             $neg132$i$i = $shl131$i$i ^ -1;
             $170 = HEAP32[((13800 + 4|0))>>2]|0;
             $and133$i$i = $170 & $neg132$i$i;
             HEAP32[((13800 + 4|0))>>2] = $and133$i$i;
             break L346;
            } else {
             $171 = HEAP32[((13800 + 16|0))>>2]|0;
             $cmp137$i$i = ($157>>>0)<($171>>>0);
             if ($cmp137$i$i) {
              _abort();
              // unreachable;
             }
             $arrayidx143$i$i = (($157) + 16|0);
             $172 = HEAP32[$arrayidx143$i$i>>2]|0;
             $cmp144$i$i = ($172|0)==($add$ptr16$i$i|0);
             if ($cmp144$i$i) {
              HEAP32[$arrayidx143$i$i>>2] = $R$1$i$i;
             } else {
              $arrayidx151$i$i = (($157) + 20|0);
              HEAP32[$arrayidx151$i$i>>2] = $R$1$i$i;
             }
             $cmp156$i$i = ($R$1$i$i|0)==(0|0);
             if ($cmp156$i$i) {
              break L346;
             }
            }
           } while(0);
           $173 = HEAP32[((13800 + 16|0))>>2]|0;
           $cmp160$i$i = ($R$1$i$i>>>0)<($173>>>0);
           if ($cmp160$i$i) {
            _abort();
            // unreachable;
           }
           $parent165$i$i = (($R$1$i$i) + 24|0);
           HEAP32[$parent165$i$i>>2] = $157;
           $add$ptr16$sum2627$i$i = $cond15$i$i | 16;
           $add$ptr224$sum137$i = (($add$ptr16$sum2627$i$i) + ($tsize$290$i))|0;
           $child166$i$i = (($tbase$291$i) + ($add$ptr224$sum137$i)|0);
           $174 = HEAP32[$child166$i$i>>2]|0;
           $cmp168$i$i = ($174|0)==(0|0);
           do {
            if (!($cmp168$i$i)) {
             $175 = HEAP32[((13800 + 16|0))>>2]|0;
             $cmp172$i$i = ($174>>>0)<($175>>>0);
             if ($cmp172$i$i) {
              _abort();
              // unreachable;
             } else {
              $arrayidx178$i$i = (($R$1$i$i) + 16|0);
              HEAP32[$arrayidx178$i$i>>2] = $174;
              $parent179$i$i = (($174) + 24|0);
              HEAP32[$parent179$i$i>>2] = $R$1$i$i;
              break;
             }
            }
           } while(0);
           $add$ptr224$sum138$i = (($add$ptr16$sum$i$i) + ($add$ptr16$sum2627$i$i))|0;
           $arrayidx184$i$i = (($tbase$291$i) + ($add$ptr224$sum138$i)|0);
           $176 = HEAP32[$arrayidx184$i$i>>2]|0;
           $cmp185$i$i = ($176|0)==(0|0);
           if ($cmp185$i$i) {
            break;
           }
           $177 = HEAP32[((13800 + 16|0))>>2]|0;
           $cmp189$i$i = ($176>>>0)<($177>>>0);
           if ($cmp189$i$i) {
            _abort();
            // unreachable;
           } else {
            $arrayidx195$i$i = (($R$1$i$i) + 20|0);
            HEAP32[$arrayidx195$i$i>>2] = $176;
            $parent196$i$i = (($176) + 24|0);
            HEAP32[$parent196$i$i>>2] = $R$1$i$i;
            break;
           }
          }
         } while(0);
         $add$ptr16$sum7$i$i = $and37$i$i | $cond15$i$i;
         $add$ptr224$sum139$i = (($add$ptr16$sum7$i$i) + ($tsize$290$i))|0;
         $add$ptr205$i$i = (($tbase$291$i) + ($add$ptr224$sum139$i)|0);
         $add206$i$i = (($and37$i$i) + ($sub18$i$i))|0;
         $oldfirst$0$i$i = $add$ptr205$i$i;$qsize$0$i$i = $add206$i$i;
        } else {
         $oldfirst$0$i$i = $add$ptr16$i$i;$qsize$0$i$i = $sub18$i$i;
        }
        $head208$i$i = (($oldfirst$0$i$i) + 4|0);
        $178 = HEAP32[$head208$i$i>>2]|0;
        $and209$i$i = $178 & -2;
        HEAP32[$head208$i$i>>2] = $and209$i$i;
        $or210$i$i = $qsize$0$i$i | 1;
        $add$ptr17$sum$i$i = (($add$ptr4$sum$i49$i) + 4)|0;
        $head211$i$i = (($tbase$291$i) + ($add$ptr17$sum$i$i)|0);
        HEAP32[$head211$i$i>>2] = $or210$i$i;
        $add$ptr17$sum8$i$i = (($qsize$0$i$i) + ($add$ptr4$sum$i49$i))|0;
        $add$ptr212$i$i = (($tbase$291$i) + ($add$ptr17$sum8$i$i)|0);
        HEAP32[$add$ptr212$i$i>>2] = $qsize$0$i$i;
        $shr214$i$i = $qsize$0$i$i >>> 3;
        $cmp215$i$i = ($qsize$0$i$i>>>0)<(256);
        if ($cmp215$i$i) {
         $shl221$i$i = $shr214$i$i << 1;
         $arrayidx223$i$i = ((13800 + ($shl221$i$i<<2)|0) + 40|0);
         $179 = HEAP32[13800>>2]|0;
         $shl226$i$i = 1 << $shr214$i$i;
         $and227$i$i = $179 & $shl226$i$i;
         $tobool228$i$i = ($and227$i$i|0)==(0);
         do {
          if ($tobool228$i$i) {
           $or232$i$i = $179 | $shl226$i$i;
           HEAP32[13800>>2] = $or232$i$i;
           $arrayidx223$sum$pre$i$i = (($shl221$i$i) + 2)|0;
           $$pre$i66$i = ((13800 + ($arrayidx223$sum$pre$i$i<<2)|0) + 40|0);
           $$pre$phi$i67$iZ2D = $$pre$i66$i;$F224$0$i$i = $arrayidx223$i$i;
          } else {
           $arrayidx223$sum24$i$i = (($shl221$i$i) + 2)|0;
           $180 = ((13800 + ($arrayidx223$sum24$i$i<<2)|0) + 40|0);
           $181 = HEAP32[$180>>2]|0;
           $182 = HEAP32[((13800 + 16|0))>>2]|0;
           $cmp236$i$i = ($181>>>0)<($182>>>0);
           if (!($cmp236$i$i)) {
            $$pre$phi$i67$iZ2D = $180;$F224$0$i$i = $181;
            break;
           }
           _abort();
           // unreachable;
          }
         } while(0);
         HEAP32[$$pre$phi$i67$iZ2D>>2] = $add$ptr17$i$i;
         $bk246$i$i = (($F224$0$i$i) + 12|0);
         HEAP32[$bk246$i$i>>2] = $add$ptr17$i$i;
         $add$ptr17$sum22$i$i = (($add$ptr4$sum$i49$i) + 8)|0;
         $fd247$i$i = (($tbase$291$i) + ($add$ptr17$sum22$i$i)|0);
         HEAP32[$fd247$i$i>>2] = $F224$0$i$i;
         $add$ptr17$sum23$i$i = (($add$ptr4$sum$i49$i) + 12)|0;
         $bk248$i$i = (($tbase$291$i) + ($add$ptr17$sum23$i$i)|0);
         HEAP32[$bk248$i$i>>2] = $arrayidx223$i$i;
         break;
        }
        $shr253$i$i = $qsize$0$i$i >>> 8;
        $cmp254$i$i = ($shr253$i$i|0)==(0);
        do {
         if ($cmp254$i$i) {
          $I252$0$i$i = 0;
         } else {
          $cmp258$i$i = ($qsize$0$i$i>>>0)>(16777215);
          if ($cmp258$i$i) {
           $I252$0$i$i = 31;
           break;
          }
          $sub262$i$i = (($shr253$i$i) + 1048320)|0;
          $shr263$i$i = $sub262$i$i >>> 16;
          $and264$i$i = $shr263$i$i & 8;
          $shl265$i$i = $shr253$i$i << $and264$i$i;
          $sub266$i$i = (($shl265$i$i) + 520192)|0;
          $shr267$i$i = $sub266$i$i >>> 16;
          $and268$i$i = $shr267$i$i & 4;
          $add269$i$i = $and268$i$i | $and264$i$i;
          $shl270$i$i = $shl265$i$i << $and268$i$i;
          $sub271$i$i = (($shl270$i$i) + 245760)|0;
          $shr272$i$i = $sub271$i$i >>> 16;
          $and273$i$i = $shr272$i$i & 2;
          $add274$i$i = $add269$i$i | $and273$i$i;
          $sub275$i$i = (14 - ($add274$i$i))|0;
          $shl276$i$i = $shl270$i$i << $and273$i$i;
          $shr277$i$i = $shl276$i$i >>> 15;
          $add278$i$i = (($sub275$i$i) + ($shr277$i$i))|0;
          $shl279$i$i = $add278$i$i << 1;
          $add280$i$i = (($add278$i$i) + 7)|0;
          $shr281$i$i = $qsize$0$i$i >>> $add280$i$i;
          $and282$i$i = $shr281$i$i & 1;
          $add283$i$i = $and282$i$i | $shl279$i$i;
          $I252$0$i$i = $add283$i$i;
         }
        } while(0);
        $arrayidx287$i$i = ((13800 + ($I252$0$i$i<<2)|0) + 304|0);
        $add$ptr17$sum9$i$i = (($add$ptr4$sum$i49$i) + 28)|0;
        $index288$i$i = (($tbase$291$i) + ($add$ptr17$sum9$i$i)|0);
        HEAP32[$index288$i$i>>2] = $I252$0$i$i;
        $add$ptr17$sum10$i$i = (($add$ptr4$sum$i49$i) + 16)|0;
        $child289$i$i = (($tbase$291$i) + ($add$ptr17$sum10$i$i)|0);
        $child289$sum$i$i = (($add$ptr4$sum$i49$i) + 20)|0;
        $arrayidx290$i$i = (($tbase$291$i) + ($child289$sum$i$i)|0);
        HEAP32[$arrayidx290$i$i>>2] = 0;
        HEAP32[$child289$i$i>>2] = 0;
        $183 = HEAP32[((13800 + 4|0))>>2]|0;
        $shl294$i$i = 1 << $I252$0$i$i;
        $and295$i$i = $183 & $shl294$i$i;
        $tobool296$i$i = ($and295$i$i|0)==(0);
        if ($tobool296$i$i) {
         $or300$i$i = $183 | $shl294$i$i;
         HEAP32[((13800 + 4|0))>>2] = $or300$i$i;
         HEAP32[$arrayidx287$i$i>>2] = $add$ptr17$i$i;
         $add$ptr17$sum11$i$i = (($add$ptr4$sum$i49$i) + 24)|0;
         $parent301$i$i = (($tbase$291$i) + ($add$ptr17$sum11$i$i)|0);
         HEAP32[$parent301$i$i>>2] = $arrayidx287$i$i;
         $add$ptr17$sum12$i$i = (($add$ptr4$sum$i49$i) + 12)|0;
         $bk302$i$i = (($tbase$291$i) + ($add$ptr17$sum12$i$i)|0);
         HEAP32[$bk302$i$i>>2] = $add$ptr17$i$i;
         $add$ptr17$sum13$i$i = (($add$ptr4$sum$i49$i) + 8)|0;
         $fd303$i$i = (($tbase$291$i) + ($add$ptr17$sum13$i$i)|0);
         HEAP32[$fd303$i$i>>2] = $add$ptr17$i$i;
         break;
        }
        $184 = HEAP32[$arrayidx287$i$i>>2]|0;
        $cmp306$i$i = ($I252$0$i$i|0)==(31);
        if ($cmp306$i$i) {
         $cond315$i$i = 0;
        } else {
         $shr310$i$i = $I252$0$i$i >>> 1;
         $sub313$i$i = (25 - ($shr310$i$i))|0;
         $cond315$i$i = $sub313$i$i;
        }
        $head31739$i$i = (($184) + 4|0);
        $185 = HEAP32[$head31739$i$i>>2]|0;
        $and31840$i$i = $185 & -8;
        $cmp31941$i$i = ($and31840$i$i|0)==($qsize$0$i$i|0);
        L435: do {
         if ($cmp31941$i$i) {
          $T$0$lcssa$i69$i = $184;
         } else {
          $shl316$i$i = $qsize$0$i$i << $cond315$i$i;
          $K305$043$i$i = $shl316$i$i;$T$042$i$i = $184;
          while(1) {
           $shr322$i$i = $K305$043$i$i >>> 31;
           $arrayidx325$i$i = ((($T$042$i$i) + ($shr322$i$i<<2)|0) + 16|0);
           $186 = HEAP32[$arrayidx325$i$i>>2]|0;
           $cmp327$i$i = ($186|0)==(0|0);
           if ($cmp327$i$i) {
            break;
           }
           $shl326$i$i = $K305$043$i$i << 1;
           $head317$i$i = (($186) + 4|0);
           $187 = HEAP32[$head317$i$i>>2]|0;
           $and318$i$i = $187 & -8;
           $cmp319$i$i = ($and318$i$i|0)==($qsize$0$i$i|0);
           if ($cmp319$i$i) {
            $T$0$lcssa$i69$i = $186;
            break L435;
           } else {
            $K305$043$i$i = $shl326$i$i;$T$042$i$i = $186;
           }
          }
          $188 = HEAP32[((13800 + 16|0))>>2]|0;
          $cmp332$i$i = ($arrayidx325$i$i>>>0)<($188>>>0);
          if ($cmp332$i$i) {
           _abort();
           // unreachable;
          } else {
           HEAP32[$arrayidx325$i$i>>2] = $add$ptr17$i$i;
           $add$ptr17$sum19$i$i = (($add$ptr4$sum$i49$i) + 24)|0;
           $parent337$i$i = (($tbase$291$i) + ($add$ptr17$sum19$i$i)|0);
           HEAP32[$parent337$i$i>>2] = $T$042$i$i;
           $add$ptr17$sum20$i$i = (($add$ptr4$sum$i49$i) + 12)|0;
           $bk338$i$i = (($tbase$291$i) + ($add$ptr17$sum20$i$i)|0);
           HEAP32[$bk338$i$i>>2] = $add$ptr17$i$i;
           $add$ptr17$sum21$i$i = (($add$ptr4$sum$i49$i) + 8)|0;
           $fd339$i$i = (($tbase$291$i) + ($add$ptr17$sum21$i$i)|0);
           HEAP32[$fd339$i$i>>2] = $add$ptr17$i$i;
           break L338;
          }
         }
        } while(0);
        $fd344$i$i = (($T$0$lcssa$i69$i) + 8|0);
        $189 = HEAP32[$fd344$i$i>>2]|0;
        $190 = HEAP32[((13800 + 16|0))>>2]|0;
        $cmp346$i$i = ($T$0$lcssa$i69$i>>>0)<($190>>>0);
        if ($cmp346$i$i) {
         _abort();
         // unreachable;
        }
        $cmp350$i$i = ($189>>>0)<($190>>>0);
        if ($cmp350$i$i) {
         _abort();
         // unreachable;
        } else {
         $bk357$i$i = (($189) + 12|0);
         HEAP32[$bk357$i$i>>2] = $add$ptr17$i$i;
         HEAP32[$fd344$i$i>>2] = $add$ptr17$i$i;
         $add$ptr17$sum16$i$i = (($add$ptr4$sum$i49$i) + 8)|0;
         $fd359$i$i = (($tbase$291$i) + ($add$ptr17$sum16$i$i)|0);
         HEAP32[$fd359$i$i>>2] = $189;
         $add$ptr17$sum17$i$i = (($add$ptr4$sum$i49$i) + 12)|0;
         $bk360$i$i = (($tbase$291$i) + ($add$ptr17$sum17$i$i)|0);
         HEAP32[$bk360$i$i>>2] = $T$0$lcssa$i69$i;
         $add$ptr17$sum18$i$i = (($add$ptr4$sum$i49$i) + 24)|0;
         $parent361$i$i = (($tbase$291$i) + ($add$ptr17$sum18$i$i)|0);
         HEAP32[$parent361$i$i>>2] = 0;
         break;
        }
       }
      } while(0);
      $add$ptr4$sum1415$i$i = $cond$i42$i | 8;
      $add$ptr368$i$i = (($tbase$291$i) + ($add$ptr4$sum1415$i$i)|0);
      $mem$0 = $add$ptr368$i$i;
      STACKTOP = sp;return ($mem$0|0);
     }
    }
    $sp$0$i$i$i = ((13800 + 448|0));
    while(1) {
     $191 = HEAP32[$sp$0$i$i$i>>2]|0;
     $cmp$i$i$i = ($191>>>0)>($120>>>0);
     if (!($cmp$i$i$i)) {
      $size$i$i$i = (($sp$0$i$i$i) + 4|0);
      $192 = HEAP32[$size$i$i$i>>2]|0;
      $add$ptr$i$i$i = (($191) + ($192)|0);
      $cmp2$i$i$i = ($add$ptr$i$i$i>>>0)>($120>>>0);
      if ($cmp2$i$i$i) {
       break;
      }
     }
     $next$i$i$i = (($sp$0$i$i$i) + 8|0);
     $193 = HEAP32[$next$i$i$i>>2]|0;
     $sp$0$i$i$i = $193;
    }
    $add$ptr$sum$i$i = (($192) + -47)|0;
    $add$ptr2$sum$i$i = (($192) + -39)|0;
    $add$ptr3$i$i = (($191) + ($add$ptr2$sum$i$i)|0);
    $194 = $add$ptr3$i$i;
    $and$i14$i = $194 & 7;
    $cmp$i15$i = ($and$i14$i|0)==(0);
    if ($cmp$i15$i) {
     $cond$i17$i = 0;
    } else {
     $195 = (0 - ($194))|0;
     $and6$i$i = $195 & 7;
     $cond$i17$i = $and6$i$i;
    }
    $add$ptr2$sum1$i$i = (($add$ptr$sum$i$i) + ($cond$i17$i))|0;
    $add$ptr7$i$i = (($191) + ($add$ptr2$sum1$i$i)|0);
    $add$ptr82$i$i = (($120) + 16|0);
    $cmp9$i$i = ($add$ptr7$i$i>>>0)<($add$ptr82$i$i>>>0);
    $cond13$i$i = $cmp9$i$i ? $120 : $add$ptr7$i$i;
    $add$ptr14$i$i = (($cond13$i$i) + 8|0);
    $sub16$i$i = (($tsize$290$i) + -40)|0;
    $add$ptr$i10$i$i = (($tbase$291$i) + 8|0);
    $196 = $add$ptr$i10$i$i;
    $and$i$i$i = $196 & 7;
    $cmp$i11$i$i = ($and$i$i$i|0)==(0);
    if ($cmp$i11$i$i) {
     $cond$i$i$i = 0;
    } else {
     $197 = (0 - ($196))|0;
     $and3$i$i$i = $197 & 7;
     $cond$i$i$i = $and3$i$i$i;
    }
    $add$ptr4$i$i$i = (($tbase$291$i) + ($cond$i$i$i)|0);
    $sub5$i$i$i = (($sub16$i$i) - ($cond$i$i$i))|0;
    HEAP32[((13800 + 24|0))>>2] = $add$ptr4$i$i$i;
    HEAP32[((13800 + 12|0))>>2] = $sub5$i$i$i;
    $or$i$i$i = $sub5$i$i$i | 1;
    $add$ptr4$sum$i$i$i = (($cond$i$i$i) + 4)|0;
    $head$i$i$i = (($tbase$291$i) + ($add$ptr4$sum$i$i$i)|0);
    HEAP32[$head$i$i$i>>2] = $or$i$i$i;
    $add$ptr6$sum$i$i$i = (($tsize$290$i) + -36)|0;
    $head7$i$i$i = (($tbase$291$i) + ($add$ptr6$sum$i$i$i)|0);
    HEAP32[$head7$i$i$i>>2] = 40;
    $198 = HEAP32[((14272 + 16|0))>>2]|0;
    HEAP32[((13800 + 28|0))>>2] = $198;
    $head$i18$i = (($cond13$i$i) + 4|0);
    HEAP32[$head$i18$i>>2] = 27;
    ;HEAP32[$add$ptr14$i$i+0>>2]=HEAP32[((13800 + 448|0))+0>>2]|0;HEAP32[$add$ptr14$i$i+4>>2]=HEAP32[((13800 + 448|0))+4>>2]|0;HEAP32[$add$ptr14$i$i+8>>2]=HEAP32[((13800 + 448|0))+8>>2]|0;HEAP32[$add$ptr14$i$i+12>>2]=HEAP32[((13800 + 448|0))+12>>2]|0;
    HEAP32[((13800 + 448|0))>>2] = $tbase$291$i;
    HEAP32[((13800 + 452|0))>>2] = $tsize$290$i;
    HEAP32[((13800 + 460|0))>>2] = 0;
    HEAP32[((13800 + 456|0))>>2] = $add$ptr14$i$i;
    $add$ptr2418$i$i = (($cond13$i$i) + 28|0);
    HEAP32[$add$ptr2418$i$i>>2] = 7;
    $199 = (($cond13$i$i) + 32|0);
    $cmp2719$i$i = ($199>>>0)<($add$ptr$i$i$i>>>0);
    if ($cmp2719$i$i) {
     $add$ptr2420$i$i = $add$ptr2418$i$i;
     while(1) {
      $200 = (($add$ptr2420$i$i) + 4|0);
      HEAP32[$200>>2] = 7;
      $201 = (($add$ptr2420$i$i) + 8|0);
      $cmp27$i$i = ($201>>>0)<($add$ptr$i$i$i>>>0);
      if ($cmp27$i$i) {
       $add$ptr2420$i$i = $200;
      } else {
       break;
      }
     }
    }
    $cmp28$i$i = ($cond13$i$i|0)==($120|0);
    if (!($cmp28$i$i)) {
     $sub$ptr$lhs$cast$i$i = $cond13$i$i;
     $sub$ptr$rhs$cast$i$i = $120;
     $sub$ptr$sub$i$i = (($sub$ptr$lhs$cast$i$i) - ($sub$ptr$rhs$cast$i$i))|0;
     $add$ptr30$i$i = (($120) + ($sub$ptr$sub$i$i)|0);
     $add$ptr30$sum$i$i = (($sub$ptr$sub$i$i) + 4)|0;
     $head31$i$i = (($120) + ($add$ptr30$sum$i$i)|0);
     $202 = HEAP32[$head31$i$i>>2]|0;
     $and32$i$i = $202 & -2;
     HEAP32[$head31$i$i>>2] = $and32$i$i;
     $or33$i$i = $sub$ptr$sub$i$i | 1;
     $head34$i$i = (($120) + 4|0);
     HEAP32[$head34$i$i>>2] = $or33$i$i;
     HEAP32[$add$ptr30$i$i>>2] = $sub$ptr$sub$i$i;
     $shr$i$i = $sub$ptr$sub$i$i >>> 3;
     $cmp36$i$i = ($sub$ptr$sub$i$i>>>0)<(256);
     if ($cmp36$i$i) {
      $shl$i20$i = $shr$i$i << 1;
      $arrayidx$i21$i = ((13800 + ($shl$i20$i<<2)|0) + 40|0);
      $203 = HEAP32[13800>>2]|0;
      $shl39$i$i = 1 << $shr$i$i;
      $and40$i$i = $203 & $shl39$i$i;
      $tobool$i$i = ($and40$i$i|0)==(0);
      do {
       if ($tobool$i$i) {
        $or44$i$i = $203 | $shl39$i$i;
        HEAP32[13800>>2] = $or44$i$i;
        $arrayidx$sum$pre$i$i = (($shl$i20$i) + 2)|0;
        $$pre$i$i = ((13800 + ($arrayidx$sum$pre$i$i<<2)|0) + 40|0);
        $$pre$phi$i$iZ2D = $$pre$i$i;$F$0$i$i = $arrayidx$i21$i;
       } else {
        $arrayidx$sum9$i$i = (($shl$i20$i) + 2)|0;
        $204 = ((13800 + ($arrayidx$sum9$i$i<<2)|0) + 40|0);
        $205 = HEAP32[$204>>2]|0;
        $206 = HEAP32[((13800 + 16|0))>>2]|0;
        $cmp46$i$i = ($205>>>0)<($206>>>0);
        if (!($cmp46$i$i)) {
         $$pre$phi$i$iZ2D = $204;$F$0$i$i = $205;
         break;
        }
        _abort();
        // unreachable;
       }
      } while(0);
      HEAP32[$$pre$phi$i$iZ2D>>2] = $120;
      $bk$i$i = (($F$0$i$i) + 12|0);
      HEAP32[$bk$i$i>>2] = $120;
      $fd54$i$i = (($120) + 8|0);
      HEAP32[$fd54$i$i>>2] = $F$0$i$i;
      $bk55$i$i = (($120) + 12|0);
      HEAP32[$bk55$i$i>>2] = $arrayidx$i21$i;
      break;
     }
     $shr58$i$i = $sub$ptr$sub$i$i >>> 8;
     $cmp59$i$i = ($shr58$i$i|0)==(0);
     if ($cmp59$i$i) {
      $I57$0$i$i = 0;
     } else {
      $cmp63$i$i = ($sub$ptr$sub$i$i>>>0)>(16777215);
      if ($cmp63$i$i) {
       $I57$0$i$i = 31;
      } else {
       $sub67$i$i = (($shr58$i$i) + 1048320)|0;
       $shr68$i$i = $sub67$i$i >>> 16;
       $and69$i$i = $shr68$i$i & 8;
       $shl70$i$i = $shr58$i$i << $and69$i$i;
       $sub71$i$i = (($shl70$i$i) + 520192)|0;
       $shr72$i$i = $sub71$i$i >>> 16;
       $and73$i$i = $shr72$i$i & 4;
       $add74$i$i = $and73$i$i | $and69$i$i;
       $shl75$i$i = $shl70$i$i << $and73$i$i;
       $sub76$i$i = (($shl75$i$i) + 245760)|0;
       $shr77$i$i = $sub76$i$i >>> 16;
       $and78$i$i = $shr77$i$i & 2;
       $add79$i$i = $add74$i$i | $and78$i$i;
       $sub80$i$i = (14 - ($add79$i$i))|0;
       $shl81$i$i = $shl75$i$i << $and78$i$i;
       $shr82$i$i = $shl81$i$i >>> 15;
       $add83$i$i = (($sub80$i$i) + ($shr82$i$i))|0;
       $shl84$i$i = $add83$i$i << 1;
       $add85$i$i = (($add83$i$i) + 7)|0;
       $shr86$i$i = $sub$ptr$sub$i$i >>> $add85$i$i;
       $and87$i$i = $shr86$i$i & 1;
       $add88$i$i = $and87$i$i | $shl84$i$i;
       $I57$0$i$i = $add88$i$i;
      }
     }
     $arrayidx91$i$i = ((13800 + ($I57$0$i$i<<2)|0) + 304|0);
     $index$i$i = (($120) + 28|0);
     $I57$0$c$i$i = $I57$0$i$i;
     HEAP32[$index$i$i>>2] = $I57$0$c$i$i;
     $arrayidx92$i$i = (($120) + 20|0);
     HEAP32[$arrayidx92$i$i>>2] = 0;
     $207 = (($120) + 16|0);
     HEAP32[$207>>2] = 0;
     $208 = HEAP32[((13800 + 4|0))>>2]|0;
     $shl95$i$i = 1 << $I57$0$i$i;
     $and96$i$i = $208 & $shl95$i$i;
     $tobool97$i$i = ($and96$i$i|0)==(0);
     if ($tobool97$i$i) {
      $or101$i$i = $208 | $shl95$i$i;
      HEAP32[((13800 + 4|0))>>2] = $or101$i$i;
      HEAP32[$arrayidx91$i$i>>2] = $120;
      $parent$i$i = (($120) + 24|0);
      HEAP32[$parent$i$i>>2] = $arrayidx91$i$i;
      $bk102$i$i = (($120) + 12|0);
      HEAP32[$bk102$i$i>>2] = $120;
      $fd103$i$i = (($120) + 8|0);
      HEAP32[$fd103$i$i>>2] = $120;
      break;
     }
     $209 = HEAP32[$arrayidx91$i$i>>2]|0;
     $cmp106$i$i = ($I57$0$i$i|0)==(31);
     if ($cmp106$i$i) {
      $cond115$i$i = 0;
     } else {
      $shr110$i$i = $I57$0$i$i >>> 1;
      $sub113$i$i = (25 - ($shr110$i$i))|0;
      $cond115$i$i = $sub113$i$i;
     }
     $head11813$i$i = (($209) + 4|0);
     $210 = HEAP32[$head11813$i$i>>2]|0;
     $and11914$i$i = $210 & -8;
     $cmp12015$i$i = ($and11914$i$i|0)==($sub$ptr$sub$i$i|0);
     L489: do {
      if ($cmp12015$i$i) {
       $T$0$lcssa$i$i = $209;
      } else {
       $shl116$i$i = $sub$ptr$sub$i$i << $cond115$i$i;
       $K105$017$i$i = $shl116$i$i;$T$016$i$i = $209;
       while(1) {
        $shr123$i$i = $K105$017$i$i >>> 31;
        $arrayidx126$i$i = ((($T$016$i$i) + ($shr123$i$i<<2)|0) + 16|0);
        $211 = HEAP32[$arrayidx126$i$i>>2]|0;
        $cmp128$i$i = ($211|0)==(0|0);
        if ($cmp128$i$i) {
         break;
        }
        $shl127$i$i = $K105$017$i$i << 1;
        $head118$i$i = (($211) + 4|0);
        $212 = HEAP32[$head118$i$i>>2]|0;
        $and119$i$i = $212 & -8;
        $cmp120$i$i = ($and119$i$i|0)==($sub$ptr$sub$i$i|0);
        if ($cmp120$i$i) {
         $T$0$lcssa$i$i = $211;
         break L489;
        } else {
         $K105$017$i$i = $shl127$i$i;$T$016$i$i = $211;
        }
       }
       $213 = HEAP32[((13800 + 16|0))>>2]|0;
       $cmp133$i$i = ($arrayidx126$i$i>>>0)<($213>>>0);
       if ($cmp133$i$i) {
        _abort();
        // unreachable;
       } else {
        HEAP32[$arrayidx126$i$i>>2] = $120;
        $parent138$i$i = (($120) + 24|0);
        HEAP32[$parent138$i$i>>2] = $T$016$i$i;
        $bk139$i$i = (($120) + 12|0);
        HEAP32[$bk139$i$i>>2] = $120;
        $fd140$i$i = (($120) + 8|0);
        HEAP32[$fd140$i$i>>2] = $120;
        break L311;
       }
      }
     } while(0);
     $fd145$i$i = (($T$0$lcssa$i$i) + 8|0);
     $214 = HEAP32[$fd145$i$i>>2]|0;
     $215 = HEAP32[((13800 + 16|0))>>2]|0;
     $cmp147$i$i = ($T$0$lcssa$i$i>>>0)<($215>>>0);
     if ($cmp147$i$i) {
      _abort();
      // unreachable;
     }
     $cmp150$i$i = ($214>>>0)<($215>>>0);
     if ($cmp150$i$i) {
      _abort();
      // unreachable;
     } else {
      $bk155$i$i = (($214) + 12|0);
      HEAP32[$bk155$i$i>>2] = $120;
      HEAP32[$fd145$i$i>>2] = $120;
      $fd157$i$i = (($120) + 8|0);
      HEAP32[$fd157$i$i>>2] = $214;
      $bk158$i$i = (($120) + 12|0);
      HEAP32[$bk158$i$i>>2] = $T$0$lcssa$i$i;
      $parent159$i$i = (($120) + 24|0);
      HEAP32[$parent159$i$i>>2] = 0;
      break;
     }
    }
   }
  } while(0);
  $216 = HEAP32[((13800 + 12|0))>>2]|0;
  $cmp250$i = ($216>>>0)>($nb$0>>>0);
  if ($cmp250$i) {
   $sub253$i = (($216) - ($nb$0))|0;
   HEAP32[((13800 + 12|0))>>2] = $sub253$i;
   $217 = HEAP32[((13800 + 24|0))>>2]|0;
   $add$ptr255$i = (($217) + ($nb$0)|0);
   HEAP32[((13800 + 24|0))>>2] = $add$ptr255$i;
   $or257$i = $sub253$i | 1;
   $add$ptr255$sum$i = (($nb$0) + 4)|0;
   $head258$i = (($217) + ($add$ptr255$sum$i)|0);
   HEAP32[$head258$i>>2] = $or257$i;
   $or260$i = $nb$0 | 3;
   $head261$i = (($217) + 4|0);
   HEAP32[$head261$i>>2] = $or260$i;
   $add$ptr262$i = (($217) + 8|0);
   $mem$0 = $add$ptr262$i;
   STACKTOP = sp;return ($mem$0|0);
  }
 }
 $call265$i = (___errno_location()|0);
 HEAP32[$call265$i>>2] = 12;
 $mem$0 = 0;
 STACKTOP = sp;return ($mem$0|0);
}
function _free($mem) {
 $mem = $mem|0;
 var $$pre = 0, $$pre$phiZ2D = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $8 = 0;
 var $9 = 0, $F502$0 = 0, $I526$0 = 0, $I526$0$c = 0, $K575$0270 = 0, $R$0 = 0, $R$1 = 0, $R327$0 = 0, $R327$1 = 0, $RP$0 = 0, $RP355$0 = 0, $T$0$lcssa = 0, $T$0269 = 0, $add$ptr = 0, $add$ptr$sum = 0, $add$ptr$sum230 = 0, $add$ptr16 = 0, $add$ptr16$sum = 0, $add$ptr16$sum251 = 0, $add$ptr16$sum252 = 0;
 var $add$ptr16$sum253 = 0, $add$ptr16$sum254 = 0, $add$ptr16$sum255 = 0, $add$ptr16$sum256 = 0, $add$ptr16$sum257 = 0, $add$ptr16$sum258 = 0, $add$ptr257 = 0, $add$ptr477 = 0, $add$ptr490 = 0, $add$ptr6 = 0, $add$ptr6$sum = 0, $add$ptr6$sum232 = 0, $add$ptr6$sum233234 = 0, $add$ptr6$sum235 = 0, $add$ptr6$sum243 = 0, $add$ptr6$sum244 = 0, $add$ptr6$sum247248 = 0, $add$ptr6$sum249 = 0, $add17 = 0, $add243 = 0;
 var $add254 = 0, $add262 = 0, $add542 = 0, $add547 = 0, $add551 = 0, $add553 = 0, $add556 = 0, $and = 0, $and140 = 0, $and210 = 0, $and215 = 0, $and229 = 0, $and237 = 0, $and261 = 0, $and296 = 0, $and405 = 0, $and46 = 0, $and487 = 0, $and5 = 0, $and504 = 0;
 var $and537 = 0, $and541 = 0, $and546 = 0, $and555 = 0, $and566 = 0, $and584 = 0, $and584267 = 0, $and8 = 0, $arrayidx = 0, $arrayidx108 = 0, $arrayidx113 = 0, $arrayidx130 = 0, $arrayidx149 = 0, $arrayidx157 = 0, $arrayidx182 = 0, $arrayidx188 = 0, $arrayidx198 = 0, $arrayidx274 = 0, $arrayidx357 = 0, $arrayidx369 = 0;
 var $arrayidx374 = 0, $arrayidx395 = 0, $arrayidx414 = 0, $arrayidx422 = 0, $arrayidx449 = 0, $arrayidx455 = 0, $arrayidx465 = 0, $arrayidx501 = 0, $arrayidx501$sum$pre = 0, $arrayidx501$sum242 = 0, $arrayidx559 = 0, $arrayidx562 = 0, $arrayidx591 = 0, $arrayidx99 = 0, $bk = 0, $bk270 = 0, $bk281 = 0, $bk316 = 0, $bk328 = 0, $bk338 = 0;
 var $bk34 = 0, $bk521 = 0, $bk523 = 0, $bk572 = 0, $bk603 = 0, $bk620 = 0, $bk623 = 0, $bk66 = 0, $bk73 = 0, $bk82 = 0, $child = 0, $child$sum = 0, $child171 = 0, $child171$sum = 0, $child356 = 0, $child356$sum = 0, $child438 = 0, $child438$sum = 0, $cmp = 0, $cmp$i = 0;
 var $cmp1 = 0, $cmp100 = 0, $cmp104 = 0, $cmp109 = 0, $cmp114 = 0, $cmp118 = 0, $cmp127 = 0, $cmp13 = 0, $cmp131 = 0, $cmp143 = 0, $cmp150 = 0, $cmp162 = 0, $cmp165 = 0, $cmp173 = 0, $cmp176 = 0, $cmp18 = 0, $cmp189 = 0, $cmp192 = 0, $cmp2 = 0, $cmp211 = 0;
 var $cmp22 = 0, $cmp225 = 0, $cmp240 = 0, $cmp246 = 0, $cmp25 = 0, $cmp251 = 0, $cmp264 = 0, $cmp275 = 0, $cmp278 = 0, $cmp282 = 0, $cmp29 = 0, $cmp291 = 0, $cmp300 = 0, $cmp303 = 0, $cmp307 = 0, $cmp31 = 0, $cmp329 = 0, $cmp335 = 0, $cmp339 = 0, $cmp343 = 0;
 var $cmp35 = 0, $cmp358 = 0, $cmp363 = 0, $cmp370 = 0, $cmp375 = 0, $cmp381 = 0, $cmp390 = 0, $cmp396 = 0, $cmp408 = 0, $cmp415 = 0, $cmp42 = 0, $cmp427 = 0, $cmp430 = 0, $cmp440 = 0, $cmp443 = 0, $cmp456 = 0, $cmp459 = 0, $cmp479 = 0, $cmp494 = 0, $cmp50 = 0;
 var $cmp511 = 0, $cmp528 = 0, $cmp53 = 0, $cmp532 = 0, $cmp57 = 0, $cmp576 = 0, $cmp585 = 0, $cmp585268 = 0, $cmp593 = 0, $cmp597 = 0, $cmp610 = 0, $cmp613 = 0, $cmp628 = 0, $cmp74 = 0, $cmp80 = 0, $cmp83 = 0, $cmp87 = 0, $cond = 0, $cond263 = 0, $cond264 = 0;
 var $dec = 0, $fd = 0, $fd268 = 0, $fd306 = 0, $fd317$pre = 0, $fd317$pre$phiZ2D = 0, $fd333 = 0, $fd342 = 0, $fd522 = 0, $fd56 = 0, $fd573 = 0, $fd604 = 0, $fd609 = 0, $fd622 = 0, $fd67$pre = 0, $fd67$pre$phiZ2D = 0, $fd78 = 0, $fd86 = 0, $head = 0, $head209 = 0;
 var $head216 = 0, $head228 = 0, $head245 = 0, $head256 = 0, $head476 = 0, $head489 = 0, $head583 = 0, $head583266 = 0, $index = 0, $index394 = 0, $index560 = 0, $neg = 0, $neg139 = 0, $neg295 = 0, $neg404 = 0, $next4$i = 0, $or = 0, $or244 = 0, $or255 = 0, $or475 = 0;
 var $or488 = 0, $or508 = 0, $or570 = 0, $p$0 = 0, $parent = 0, $parent170 = 0, $parent183 = 0, $parent199 = 0, $parent326 = 0, $parent437 = 0, $parent450 = 0, $parent466 = 0, $parent571 = 0, $parent602 = 0, $parent624 = 0, $psize$0 = 0, $psize$1 = 0, $shl = 0, $shl138 = 0, $shl273 = 0;
 var $shl294 = 0, $shl403 = 0, $shl45 = 0, $shl500 = 0, $shl503 = 0, $shl538 = 0, $shl543 = 0, $shl549 = 0, $shl552 = 0, $shl565 = 0, $shl582 = 0, $shl592 = 0, $shr = 0, $shr263 = 0, $shr493 = 0, $shr527 = 0, $shr536 = 0, $shr540 = 0, $shr545 = 0, $shr550 = 0;
 var $shr554 = 0, $shr578 = 0, $shr588 = 0, $sp$0$i = 0, $sp$0$in$i = 0, $sub = 0, $sub539 = 0, $sub544 = 0, $sub548 = 0, $sub581 = 0, $tobool230 = 0, $tobool238 = 0, $tobool505 = 0, $tobool567 = 0, $tobool9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $cmp = ($mem|0)==(0|0);
 if ($cmp) {
  STACKTOP = sp;return;
 }
 $add$ptr = (($mem) + -8|0);
 $0 = HEAP32[((13800 + 16|0))>>2]|0;
 $cmp1 = ($add$ptr>>>0)<($0>>>0);
 if ($cmp1) {
  _abort();
  // unreachable;
 }
 $head = (($mem) + -4|0);
 $1 = HEAP32[$head>>2]|0;
 $and = $1 & 3;
 $cmp2 = ($and|0)==(1);
 if ($cmp2) {
  _abort();
  // unreachable;
 }
 $and5 = $1 & -8;
 $add$ptr$sum = (($and5) + -8)|0;
 $add$ptr6 = (($mem) + ($add$ptr$sum)|0);
 $and8 = $1 & 1;
 $tobool9 = ($and8|0)==(0);
 do {
  if ($tobool9) {
   $2 = HEAP32[$add$ptr>>2]|0;
   $cmp13 = ($and|0)==(0);
   if ($cmp13) {
    STACKTOP = sp;return;
   }
   $add$ptr$sum230 = (-8 - ($2))|0;
   $add$ptr16 = (($mem) + ($add$ptr$sum230)|0);
   $add17 = (($2) + ($and5))|0;
   $cmp18 = ($add$ptr16>>>0)<($0>>>0);
   if ($cmp18) {
    _abort();
    // unreachable;
   }
   $3 = HEAP32[((13800 + 20|0))>>2]|0;
   $cmp22 = ($add$ptr16|0)==($3|0);
   if ($cmp22) {
    $add$ptr6$sum = (($and5) + -4)|0;
    $head209 = (($mem) + ($add$ptr6$sum)|0);
    $28 = HEAP32[$head209>>2]|0;
    $and210 = $28 & 3;
    $cmp211 = ($and210|0)==(3);
    if (!($cmp211)) {
     $p$0 = $add$ptr16;$psize$0 = $add17;
     break;
    }
    HEAP32[((13800 + 8|0))>>2] = $add17;
    $29 = HEAP32[$head209>>2]|0;
    $and215 = $29 & -2;
    HEAP32[$head209>>2] = $and215;
    $or = $add17 | 1;
    $add$ptr16$sum = (($add$ptr$sum230) + 4)|0;
    $head216 = (($mem) + ($add$ptr16$sum)|0);
    HEAP32[$head216>>2] = $or;
    HEAP32[$add$ptr6>>2] = $add17;
    STACKTOP = sp;return;
   }
   $shr = $2 >>> 3;
   $cmp25 = ($2>>>0)<(256);
   if ($cmp25) {
    $add$ptr16$sum257 = (($add$ptr$sum230) + 8)|0;
    $fd = (($mem) + ($add$ptr16$sum257)|0);
    $4 = HEAP32[$fd>>2]|0;
    $add$ptr16$sum258 = (($add$ptr$sum230) + 12)|0;
    $bk = (($mem) + ($add$ptr16$sum258)|0);
    $5 = HEAP32[$bk>>2]|0;
    $shl = $shr << 1;
    $arrayidx = ((13800 + ($shl<<2)|0) + 40|0);
    $cmp29 = ($4|0)==($arrayidx|0);
    if (!($cmp29)) {
     $cmp31 = ($4>>>0)<($0>>>0);
     if ($cmp31) {
      _abort();
      // unreachable;
     }
     $bk34 = (($4) + 12|0);
     $6 = HEAP32[$bk34>>2]|0;
     $cmp35 = ($6|0)==($add$ptr16|0);
     if (!($cmp35)) {
      _abort();
      // unreachable;
     }
    }
    $cmp42 = ($5|0)==($4|0);
    if ($cmp42) {
     $shl45 = 1 << $shr;
     $neg = $shl45 ^ -1;
     $7 = HEAP32[13800>>2]|0;
     $and46 = $7 & $neg;
     HEAP32[13800>>2] = $and46;
     $p$0 = $add$ptr16;$psize$0 = $add17;
     break;
    }
    $cmp50 = ($5|0)==($arrayidx|0);
    if ($cmp50) {
     $fd67$pre = (($5) + 8|0);
     $fd67$pre$phiZ2D = $fd67$pre;
    } else {
     $cmp53 = ($5>>>0)<($0>>>0);
     if ($cmp53) {
      _abort();
      // unreachable;
     }
     $fd56 = (($5) + 8|0);
     $8 = HEAP32[$fd56>>2]|0;
     $cmp57 = ($8|0)==($add$ptr16|0);
     if ($cmp57) {
      $fd67$pre$phiZ2D = $fd56;
     } else {
      _abort();
      // unreachable;
     }
    }
    $bk66 = (($4) + 12|0);
    HEAP32[$bk66>>2] = $5;
    HEAP32[$fd67$pre$phiZ2D>>2] = $4;
    $p$0 = $add$ptr16;$psize$0 = $add17;
    break;
   }
   $add$ptr16$sum251 = (($add$ptr$sum230) + 24)|0;
   $parent = (($mem) + ($add$ptr16$sum251)|0);
   $9 = HEAP32[$parent>>2]|0;
   $add$ptr16$sum252 = (($add$ptr$sum230) + 12)|0;
   $bk73 = (($mem) + ($add$ptr16$sum252)|0);
   $10 = HEAP32[$bk73>>2]|0;
   $cmp74 = ($10|0)==($add$ptr16|0);
   do {
    if ($cmp74) {
     $child$sum = (($add$ptr$sum230) + 20)|0;
     $arrayidx99 = (($mem) + ($child$sum)|0);
     $14 = HEAP32[$arrayidx99>>2]|0;
     $cmp100 = ($14|0)==(0|0);
     if ($cmp100) {
      $add$ptr16$sum253 = (($add$ptr$sum230) + 16)|0;
      $child = (($mem) + ($add$ptr16$sum253)|0);
      $15 = HEAP32[$child>>2]|0;
      $cmp104 = ($15|0)==(0|0);
      if ($cmp104) {
       $R$1 = 0;
       break;
      } else {
       $R$0 = $15;$RP$0 = $child;
      }
     } else {
      $R$0 = $14;$RP$0 = $arrayidx99;
     }
     while(1) {
      $arrayidx108 = (($R$0) + 20|0);
      $16 = HEAP32[$arrayidx108>>2]|0;
      $cmp109 = ($16|0)==(0|0);
      if (!($cmp109)) {
       $R$0 = $16;$RP$0 = $arrayidx108;
       continue;
      }
      $arrayidx113 = (($R$0) + 16|0);
      $17 = HEAP32[$arrayidx113>>2]|0;
      $cmp114 = ($17|0)==(0|0);
      if ($cmp114) {
       break;
      } else {
       $R$0 = $17;$RP$0 = $arrayidx113;
      }
     }
     $cmp118 = ($RP$0>>>0)<($0>>>0);
     if ($cmp118) {
      _abort();
      // unreachable;
     } else {
      HEAP32[$RP$0>>2] = 0;
      $R$1 = $R$0;
      break;
     }
    } else {
     $add$ptr16$sum256 = (($add$ptr$sum230) + 8)|0;
     $fd78 = (($mem) + ($add$ptr16$sum256)|0);
     $11 = HEAP32[$fd78>>2]|0;
     $cmp80 = ($11>>>0)<($0>>>0);
     if ($cmp80) {
      _abort();
      // unreachable;
     }
     $bk82 = (($11) + 12|0);
     $12 = HEAP32[$bk82>>2]|0;
     $cmp83 = ($12|0)==($add$ptr16|0);
     if (!($cmp83)) {
      _abort();
      // unreachable;
     }
     $fd86 = (($10) + 8|0);
     $13 = HEAP32[$fd86>>2]|0;
     $cmp87 = ($13|0)==($add$ptr16|0);
     if ($cmp87) {
      HEAP32[$bk82>>2] = $10;
      HEAP32[$fd86>>2] = $11;
      $R$1 = $10;
      break;
     } else {
      _abort();
      // unreachable;
     }
    }
   } while(0);
   $cmp127 = ($9|0)==(0|0);
   if ($cmp127) {
    $p$0 = $add$ptr16;$psize$0 = $add17;
   } else {
    $add$ptr16$sum254 = (($add$ptr$sum230) + 28)|0;
    $index = (($mem) + ($add$ptr16$sum254)|0);
    $18 = HEAP32[$index>>2]|0;
    $arrayidx130 = ((13800 + ($18<<2)|0) + 304|0);
    $19 = HEAP32[$arrayidx130>>2]|0;
    $cmp131 = ($add$ptr16|0)==($19|0);
    if ($cmp131) {
     HEAP32[$arrayidx130>>2] = $R$1;
     $cond263 = ($R$1|0)==(0|0);
     if ($cond263) {
      $shl138 = 1 << $18;
      $neg139 = $shl138 ^ -1;
      $20 = HEAP32[((13800 + 4|0))>>2]|0;
      $and140 = $20 & $neg139;
      HEAP32[((13800 + 4|0))>>2] = $and140;
      $p$0 = $add$ptr16;$psize$0 = $add17;
      break;
     }
    } else {
     $21 = HEAP32[((13800 + 16|0))>>2]|0;
     $cmp143 = ($9>>>0)<($21>>>0);
     if ($cmp143) {
      _abort();
      // unreachable;
     }
     $arrayidx149 = (($9) + 16|0);
     $22 = HEAP32[$arrayidx149>>2]|0;
     $cmp150 = ($22|0)==($add$ptr16|0);
     if ($cmp150) {
      HEAP32[$arrayidx149>>2] = $R$1;
     } else {
      $arrayidx157 = (($9) + 20|0);
      HEAP32[$arrayidx157>>2] = $R$1;
     }
     $cmp162 = ($R$1|0)==(0|0);
     if ($cmp162) {
      $p$0 = $add$ptr16;$psize$0 = $add17;
      break;
     }
    }
    $23 = HEAP32[((13800 + 16|0))>>2]|0;
    $cmp165 = ($R$1>>>0)<($23>>>0);
    if ($cmp165) {
     _abort();
     // unreachable;
    }
    $parent170 = (($R$1) + 24|0);
    HEAP32[$parent170>>2] = $9;
    $add$ptr16$sum255 = (($add$ptr$sum230) + 16)|0;
    $child171 = (($mem) + ($add$ptr16$sum255)|0);
    $24 = HEAP32[$child171>>2]|0;
    $cmp173 = ($24|0)==(0|0);
    do {
     if (!($cmp173)) {
      $25 = HEAP32[((13800 + 16|0))>>2]|0;
      $cmp176 = ($24>>>0)<($25>>>0);
      if ($cmp176) {
       _abort();
       // unreachable;
      } else {
       $arrayidx182 = (($R$1) + 16|0);
       HEAP32[$arrayidx182>>2] = $24;
       $parent183 = (($24) + 24|0);
       HEAP32[$parent183>>2] = $R$1;
       break;
      }
     }
    } while(0);
    $child171$sum = (($add$ptr$sum230) + 20)|0;
    $arrayidx188 = (($mem) + ($child171$sum)|0);
    $26 = HEAP32[$arrayidx188>>2]|0;
    $cmp189 = ($26|0)==(0|0);
    if ($cmp189) {
     $p$0 = $add$ptr16;$psize$0 = $add17;
    } else {
     $27 = HEAP32[((13800 + 16|0))>>2]|0;
     $cmp192 = ($26>>>0)<($27>>>0);
     if ($cmp192) {
      _abort();
      // unreachable;
     } else {
      $arrayidx198 = (($R$1) + 20|0);
      HEAP32[$arrayidx198>>2] = $26;
      $parent199 = (($26) + 24|0);
      HEAP32[$parent199>>2] = $R$1;
      $p$0 = $add$ptr16;$psize$0 = $add17;
      break;
     }
    }
   }
  } else {
   $p$0 = $add$ptr;$psize$0 = $and5;
  }
 } while(0);
 $cmp225 = ($p$0>>>0)<($add$ptr6>>>0);
 if (!($cmp225)) {
  _abort();
  // unreachable;
 }
 $add$ptr6$sum249 = (($and5) + -4)|0;
 $head228 = (($mem) + ($add$ptr6$sum249)|0);
 $30 = HEAP32[$head228>>2]|0;
 $and229 = $30 & 1;
 $tobool230 = ($and229|0)==(0);
 if ($tobool230) {
  _abort();
  // unreachable;
 }
 $and237 = $30 & 2;
 $tobool238 = ($and237|0)==(0);
 if ($tobool238) {
  $31 = HEAP32[((13800 + 24|0))>>2]|0;
  $cmp240 = ($add$ptr6|0)==($31|0);
  if ($cmp240) {
   $32 = HEAP32[((13800 + 12|0))>>2]|0;
   $add243 = (($32) + ($psize$0))|0;
   HEAP32[((13800 + 12|0))>>2] = $add243;
   HEAP32[((13800 + 24|0))>>2] = $p$0;
   $or244 = $add243 | 1;
   $head245 = (($p$0) + 4|0);
   HEAP32[$head245>>2] = $or244;
   $33 = HEAP32[((13800 + 20|0))>>2]|0;
   $cmp246 = ($p$0|0)==($33|0);
   if (!($cmp246)) {
    STACKTOP = sp;return;
   }
   HEAP32[((13800 + 20|0))>>2] = 0;
   HEAP32[((13800 + 8|0))>>2] = 0;
   STACKTOP = sp;return;
  }
  $34 = HEAP32[((13800 + 20|0))>>2]|0;
  $cmp251 = ($add$ptr6|0)==($34|0);
  if ($cmp251) {
   $35 = HEAP32[((13800 + 8|0))>>2]|0;
   $add254 = (($35) + ($psize$0))|0;
   HEAP32[((13800 + 8|0))>>2] = $add254;
   HEAP32[((13800 + 20|0))>>2] = $p$0;
   $or255 = $add254 | 1;
   $head256 = (($p$0) + 4|0);
   HEAP32[$head256>>2] = $or255;
   $add$ptr257 = (($p$0) + ($add254)|0);
   HEAP32[$add$ptr257>>2] = $add254;
   STACKTOP = sp;return;
  }
  $and261 = $30 & -8;
  $add262 = (($and261) + ($psize$0))|0;
  $shr263 = $30 >>> 3;
  $cmp264 = ($30>>>0)<(256);
  do {
   if ($cmp264) {
    $fd268 = (($mem) + ($and5)|0);
    $36 = HEAP32[$fd268>>2]|0;
    $add$ptr6$sum247248 = $and5 | 4;
    $bk270 = (($mem) + ($add$ptr6$sum247248)|0);
    $37 = HEAP32[$bk270>>2]|0;
    $shl273 = $shr263 << 1;
    $arrayidx274 = ((13800 + ($shl273<<2)|0) + 40|0);
    $cmp275 = ($36|0)==($arrayidx274|0);
    if (!($cmp275)) {
     $38 = HEAP32[((13800 + 16|0))>>2]|0;
     $cmp278 = ($36>>>0)<($38>>>0);
     if ($cmp278) {
      _abort();
      // unreachable;
     }
     $bk281 = (($36) + 12|0);
     $39 = HEAP32[$bk281>>2]|0;
     $cmp282 = ($39|0)==($add$ptr6|0);
     if (!($cmp282)) {
      _abort();
      // unreachable;
     }
    }
    $cmp291 = ($37|0)==($36|0);
    if ($cmp291) {
     $shl294 = 1 << $shr263;
     $neg295 = $shl294 ^ -1;
     $40 = HEAP32[13800>>2]|0;
     $and296 = $40 & $neg295;
     HEAP32[13800>>2] = $and296;
     break;
    }
    $cmp300 = ($37|0)==($arrayidx274|0);
    if ($cmp300) {
     $fd317$pre = (($37) + 8|0);
     $fd317$pre$phiZ2D = $fd317$pre;
    } else {
     $41 = HEAP32[((13800 + 16|0))>>2]|0;
     $cmp303 = ($37>>>0)<($41>>>0);
     if ($cmp303) {
      _abort();
      // unreachable;
     }
     $fd306 = (($37) + 8|0);
     $42 = HEAP32[$fd306>>2]|0;
     $cmp307 = ($42|0)==($add$ptr6|0);
     if ($cmp307) {
      $fd317$pre$phiZ2D = $fd306;
     } else {
      _abort();
      // unreachable;
     }
    }
    $bk316 = (($36) + 12|0);
    HEAP32[$bk316>>2] = $37;
    HEAP32[$fd317$pre$phiZ2D>>2] = $36;
   } else {
    $add$ptr6$sum232 = (($and5) + 16)|0;
    $parent326 = (($mem) + ($add$ptr6$sum232)|0);
    $43 = HEAP32[$parent326>>2]|0;
    $add$ptr6$sum233234 = $and5 | 4;
    $bk328 = (($mem) + ($add$ptr6$sum233234)|0);
    $44 = HEAP32[$bk328>>2]|0;
    $cmp329 = ($44|0)==($add$ptr6|0);
    do {
     if ($cmp329) {
      $child356$sum = (($and5) + 12)|0;
      $arrayidx357 = (($mem) + ($child356$sum)|0);
      $49 = HEAP32[$arrayidx357>>2]|0;
      $cmp358 = ($49|0)==(0|0);
      if ($cmp358) {
       $add$ptr6$sum235 = (($and5) + 8)|0;
       $child356 = (($mem) + ($add$ptr6$sum235)|0);
       $50 = HEAP32[$child356>>2]|0;
       $cmp363 = ($50|0)==(0|0);
       if ($cmp363) {
        $R327$1 = 0;
        break;
       } else {
        $R327$0 = $50;$RP355$0 = $child356;
       }
      } else {
       $R327$0 = $49;$RP355$0 = $arrayidx357;
      }
      while(1) {
       $arrayidx369 = (($R327$0) + 20|0);
       $51 = HEAP32[$arrayidx369>>2]|0;
       $cmp370 = ($51|0)==(0|0);
       if (!($cmp370)) {
        $R327$0 = $51;$RP355$0 = $arrayidx369;
        continue;
       }
       $arrayidx374 = (($R327$0) + 16|0);
       $52 = HEAP32[$arrayidx374>>2]|0;
       $cmp375 = ($52|0)==(0|0);
       if ($cmp375) {
        break;
       } else {
        $R327$0 = $52;$RP355$0 = $arrayidx374;
       }
      }
      $53 = HEAP32[((13800 + 16|0))>>2]|0;
      $cmp381 = ($RP355$0>>>0)<($53>>>0);
      if ($cmp381) {
       _abort();
       // unreachable;
      } else {
       HEAP32[$RP355$0>>2] = 0;
       $R327$1 = $R327$0;
       break;
      }
     } else {
      $fd333 = (($mem) + ($and5)|0);
      $45 = HEAP32[$fd333>>2]|0;
      $46 = HEAP32[((13800 + 16|0))>>2]|0;
      $cmp335 = ($45>>>0)<($46>>>0);
      if ($cmp335) {
       _abort();
       // unreachable;
      }
      $bk338 = (($45) + 12|0);
      $47 = HEAP32[$bk338>>2]|0;
      $cmp339 = ($47|0)==($add$ptr6|0);
      if (!($cmp339)) {
       _abort();
       // unreachable;
      }
      $fd342 = (($44) + 8|0);
      $48 = HEAP32[$fd342>>2]|0;
      $cmp343 = ($48|0)==($add$ptr6|0);
      if ($cmp343) {
       HEAP32[$bk338>>2] = $44;
       HEAP32[$fd342>>2] = $45;
       $R327$1 = $44;
       break;
      } else {
       _abort();
       // unreachable;
      }
     }
    } while(0);
    $cmp390 = ($43|0)==(0|0);
    if (!($cmp390)) {
     $add$ptr6$sum243 = (($and5) + 20)|0;
     $index394 = (($mem) + ($add$ptr6$sum243)|0);
     $54 = HEAP32[$index394>>2]|0;
     $arrayidx395 = ((13800 + ($54<<2)|0) + 304|0);
     $55 = HEAP32[$arrayidx395>>2]|0;
     $cmp396 = ($add$ptr6|0)==($55|0);
     if ($cmp396) {
      HEAP32[$arrayidx395>>2] = $R327$1;
      $cond264 = ($R327$1|0)==(0|0);
      if ($cond264) {
       $shl403 = 1 << $54;
       $neg404 = $shl403 ^ -1;
       $56 = HEAP32[((13800 + 4|0))>>2]|0;
       $and405 = $56 & $neg404;
       HEAP32[((13800 + 4|0))>>2] = $and405;
       break;
      }
     } else {
      $57 = HEAP32[((13800 + 16|0))>>2]|0;
      $cmp408 = ($43>>>0)<($57>>>0);
      if ($cmp408) {
       _abort();
       // unreachable;
      }
      $arrayidx414 = (($43) + 16|0);
      $58 = HEAP32[$arrayidx414>>2]|0;
      $cmp415 = ($58|0)==($add$ptr6|0);
      if ($cmp415) {
       HEAP32[$arrayidx414>>2] = $R327$1;
      } else {
       $arrayidx422 = (($43) + 20|0);
       HEAP32[$arrayidx422>>2] = $R327$1;
      }
      $cmp427 = ($R327$1|0)==(0|0);
      if ($cmp427) {
       break;
      }
     }
     $59 = HEAP32[((13800 + 16|0))>>2]|0;
     $cmp430 = ($R327$1>>>0)<($59>>>0);
     if ($cmp430) {
      _abort();
      // unreachable;
     }
     $parent437 = (($R327$1) + 24|0);
     HEAP32[$parent437>>2] = $43;
     $add$ptr6$sum244 = (($and5) + 8)|0;
     $child438 = (($mem) + ($add$ptr6$sum244)|0);
     $60 = HEAP32[$child438>>2]|0;
     $cmp440 = ($60|0)==(0|0);
     do {
      if (!($cmp440)) {
       $61 = HEAP32[((13800 + 16|0))>>2]|0;
       $cmp443 = ($60>>>0)<($61>>>0);
       if ($cmp443) {
        _abort();
        // unreachable;
       } else {
        $arrayidx449 = (($R327$1) + 16|0);
        HEAP32[$arrayidx449>>2] = $60;
        $parent450 = (($60) + 24|0);
        HEAP32[$parent450>>2] = $R327$1;
        break;
       }
      }
     } while(0);
     $child438$sum = (($and5) + 12)|0;
     $arrayidx455 = (($mem) + ($child438$sum)|0);
     $62 = HEAP32[$arrayidx455>>2]|0;
     $cmp456 = ($62|0)==(0|0);
     if (!($cmp456)) {
      $63 = HEAP32[((13800 + 16|0))>>2]|0;
      $cmp459 = ($62>>>0)<($63>>>0);
      if ($cmp459) {
       _abort();
       // unreachable;
      } else {
       $arrayidx465 = (($R327$1) + 20|0);
       HEAP32[$arrayidx465>>2] = $62;
       $parent466 = (($62) + 24|0);
       HEAP32[$parent466>>2] = $R327$1;
       break;
      }
     }
    }
   }
  } while(0);
  $or475 = $add262 | 1;
  $head476 = (($p$0) + 4|0);
  HEAP32[$head476>>2] = $or475;
  $add$ptr477 = (($p$0) + ($add262)|0);
  HEAP32[$add$ptr477>>2] = $add262;
  $64 = HEAP32[((13800 + 20|0))>>2]|0;
  $cmp479 = ($p$0|0)==($64|0);
  if ($cmp479) {
   HEAP32[((13800 + 8|0))>>2] = $add262;
   STACKTOP = sp;return;
  } else {
   $psize$1 = $add262;
  }
 } else {
  $and487 = $30 & -2;
  HEAP32[$head228>>2] = $and487;
  $or488 = $psize$0 | 1;
  $head489 = (($p$0) + 4|0);
  HEAP32[$head489>>2] = $or488;
  $add$ptr490 = (($p$0) + ($psize$0)|0);
  HEAP32[$add$ptr490>>2] = $psize$0;
  $psize$1 = $psize$0;
 }
 $shr493 = $psize$1 >>> 3;
 $cmp494 = ($psize$1>>>0)<(256);
 if ($cmp494) {
  $shl500 = $shr493 << 1;
  $arrayidx501 = ((13800 + ($shl500<<2)|0) + 40|0);
  $65 = HEAP32[13800>>2]|0;
  $shl503 = 1 << $shr493;
  $and504 = $65 & $shl503;
  $tobool505 = ($and504|0)==(0);
  if ($tobool505) {
   $or508 = $65 | $shl503;
   HEAP32[13800>>2] = $or508;
   $arrayidx501$sum$pre = (($shl500) + 2)|0;
   $$pre = ((13800 + ($arrayidx501$sum$pre<<2)|0) + 40|0);
   $$pre$phiZ2D = $$pre;$F502$0 = $arrayidx501;
  } else {
   $arrayidx501$sum242 = (($shl500) + 2)|0;
   $66 = ((13800 + ($arrayidx501$sum242<<2)|0) + 40|0);
   $67 = HEAP32[$66>>2]|0;
   $68 = HEAP32[((13800 + 16|0))>>2]|0;
   $cmp511 = ($67>>>0)<($68>>>0);
   if ($cmp511) {
    _abort();
    // unreachable;
   } else {
    $$pre$phiZ2D = $66;$F502$0 = $67;
   }
  }
  HEAP32[$$pre$phiZ2D>>2] = $p$0;
  $bk521 = (($F502$0) + 12|0);
  HEAP32[$bk521>>2] = $p$0;
  $fd522 = (($p$0) + 8|0);
  HEAP32[$fd522>>2] = $F502$0;
  $bk523 = (($p$0) + 12|0);
  HEAP32[$bk523>>2] = $arrayidx501;
  STACKTOP = sp;return;
 }
 $shr527 = $psize$1 >>> 8;
 $cmp528 = ($shr527|0)==(0);
 if ($cmp528) {
  $I526$0 = 0;
 } else {
  $cmp532 = ($psize$1>>>0)>(16777215);
  if ($cmp532) {
   $I526$0 = 31;
  } else {
   $sub = (($shr527) + 1048320)|0;
   $shr536 = $sub >>> 16;
   $and537 = $shr536 & 8;
   $shl538 = $shr527 << $and537;
   $sub539 = (($shl538) + 520192)|0;
   $shr540 = $sub539 >>> 16;
   $and541 = $shr540 & 4;
   $add542 = $and541 | $and537;
   $shl543 = $shl538 << $and541;
   $sub544 = (($shl543) + 245760)|0;
   $shr545 = $sub544 >>> 16;
   $and546 = $shr545 & 2;
   $add547 = $add542 | $and546;
   $sub548 = (14 - ($add547))|0;
   $shl549 = $shl543 << $and546;
   $shr550 = $shl549 >>> 15;
   $add551 = (($sub548) + ($shr550))|0;
   $shl552 = $add551 << 1;
   $add553 = (($add551) + 7)|0;
   $shr554 = $psize$1 >>> $add553;
   $and555 = $shr554 & 1;
   $add556 = $and555 | $shl552;
   $I526$0 = $add556;
  }
 }
 $arrayidx559 = ((13800 + ($I526$0<<2)|0) + 304|0);
 $index560 = (($p$0) + 28|0);
 $I526$0$c = $I526$0;
 HEAP32[$index560>>2] = $I526$0$c;
 $arrayidx562 = (($p$0) + 20|0);
 HEAP32[$arrayidx562>>2] = 0;
 $69 = (($p$0) + 16|0);
 HEAP32[$69>>2] = 0;
 $70 = HEAP32[((13800 + 4|0))>>2]|0;
 $shl565 = 1 << $I526$0;
 $and566 = $70 & $shl565;
 $tobool567 = ($and566|0)==(0);
 L199: do {
  if ($tobool567) {
   $or570 = $70 | $shl565;
   HEAP32[((13800 + 4|0))>>2] = $or570;
   HEAP32[$arrayidx559>>2] = $p$0;
   $parent571 = (($p$0) + 24|0);
   HEAP32[$parent571>>2] = $arrayidx559;
   $bk572 = (($p$0) + 12|0);
   HEAP32[$bk572>>2] = $p$0;
   $fd573 = (($p$0) + 8|0);
   HEAP32[$fd573>>2] = $p$0;
  } else {
   $71 = HEAP32[$arrayidx559>>2]|0;
   $cmp576 = ($I526$0|0)==(31);
   if ($cmp576) {
    $cond = 0;
   } else {
    $shr578 = $I526$0 >>> 1;
    $sub581 = (25 - ($shr578))|0;
    $cond = $sub581;
   }
   $head583266 = (($71) + 4|0);
   $72 = HEAP32[$head583266>>2]|0;
   $and584267 = $72 & -8;
   $cmp585268 = ($and584267|0)==($psize$1|0);
   L205: do {
    if ($cmp585268) {
     $T$0$lcssa = $71;
    } else {
     $shl582 = $psize$1 << $cond;
     $K575$0270 = $shl582;$T$0269 = $71;
     while(1) {
      $shr588 = $K575$0270 >>> 31;
      $arrayidx591 = ((($T$0269) + ($shr588<<2)|0) + 16|0);
      $73 = HEAP32[$arrayidx591>>2]|0;
      $cmp593 = ($73|0)==(0|0);
      if ($cmp593) {
       break;
      }
      $shl592 = $K575$0270 << 1;
      $head583 = (($73) + 4|0);
      $74 = HEAP32[$head583>>2]|0;
      $and584 = $74 & -8;
      $cmp585 = ($and584|0)==($psize$1|0);
      if ($cmp585) {
       $T$0$lcssa = $73;
       break L205;
      } else {
       $K575$0270 = $shl592;$T$0269 = $73;
      }
     }
     $75 = HEAP32[((13800 + 16|0))>>2]|0;
     $cmp597 = ($arrayidx591>>>0)<($75>>>0);
     if ($cmp597) {
      _abort();
      // unreachable;
     } else {
      HEAP32[$arrayidx591>>2] = $p$0;
      $parent602 = (($p$0) + 24|0);
      HEAP32[$parent602>>2] = $T$0269;
      $bk603 = (($p$0) + 12|0);
      HEAP32[$bk603>>2] = $p$0;
      $fd604 = (($p$0) + 8|0);
      HEAP32[$fd604>>2] = $p$0;
      break L199;
     }
    }
   } while(0);
   $fd609 = (($T$0$lcssa) + 8|0);
   $76 = HEAP32[$fd609>>2]|0;
   $77 = HEAP32[((13800 + 16|0))>>2]|0;
   $cmp610 = ($T$0$lcssa>>>0)<($77>>>0);
   if ($cmp610) {
    _abort();
    // unreachable;
   }
   $cmp613 = ($76>>>0)<($77>>>0);
   if ($cmp613) {
    _abort();
    // unreachable;
   } else {
    $bk620 = (($76) + 12|0);
    HEAP32[$bk620>>2] = $p$0;
    HEAP32[$fd609>>2] = $p$0;
    $fd622 = (($p$0) + 8|0);
    HEAP32[$fd622>>2] = $76;
    $bk623 = (($p$0) + 12|0);
    HEAP32[$bk623>>2] = $T$0$lcssa;
    $parent624 = (($p$0) + 24|0);
    HEAP32[$parent624>>2] = 0;
    break;
   }
  }
 } while(0);
 $78 = HEAP32[((13800 + 32|0))>>2]|0;
 $dec = (($78) + -1)|0;
 HEAP32[((13800 + 32|0))>>2] = $dec;
 $cmp628 = ($dec|0)==(0);
 if ($cmp628) {
  $sp$0$in$i = ((13800 + 456|0));
 } else {
  STACKTOP = sp;return;
 }
 while(1) {
  $sp$0$i = HEAP32[$sp$0$in$i>>2]|0;
  $cmp$i = ($sp$0$i|0)==(0|0);
  $next4$i = (($sp$0$i) + 8|0);
  if ($cmp$i) {
   break;
  } else {
   $sp$0$in$i = $next4$i;
  }
 }
 HEAP32[((13800 + 32|0))>>2] = -1;
 STACKTOP = sp;return;
}
function _realloc($oldmem,$bytes) {
 $oldmem = $oldmem|0;
 $bytes = $bytes|0;
 var $0 = 0, $add$ptr = 0, $add$ptr10 = 0, $add6 = 0, $and = 0, $and15 = 0, $and17 = 0, $call = 0, $call12 = 0, $call3 = 0, $call7 = 0, $cmp = 0, $cmp1 = 0, $cmp13 = 0, $cmp18 = 0, $cmp20 = 0, $cmp5 = 0, $cmp8 = 0, $cond = 0, $cond19 = 0;
 var $cond24 = 0, $head = 0, $mem$0 = 0, $sub = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $cmp = ($oldmem|0)==(0|0);
 if ($cmp) {
  $call = (_malloc($bytes)|0);
  $mem$0 = $call;
  STACKTOP = sp;return ($mem$0|0);
 }
 $cmp1 = ($bytes>>>0)>(4294967231);
 if ($cmp1) {
  $call3 = (___errno_location()|0);
  HEAP32[$call3>>2] = 12;
  $mem$0 = 0;
  STACKTOP = sp;return ($mem$0|0);
 }
 $cmp5 = ($bytes>>>0)<(11);
 if ($cmp5) {
  $cond = 16;
 } else {
  $add6 = (($bytes) + 11)|0;
  $and = $add6 & -8;
  $cond = $and;
 }
 $add$ptr = (($oldmem) + -8|0);
 $call7 = (_try_realloc_chunk($add$ptr,$cond)|0);
 $cmp8 = ($call7|0)==(0|0);
 if (!($cmp8)) {
  $add$ptr10 = (($call7) + 8|0);
  $mem$0 = $add$ptr10;
  STACKTOP = sp;return ($mem$0|0);
 }
 $call12 = (_malloc($bytes)|0);
 $cmp13 = ($call12|0)==(0|0);
 if ($cmp13) {
  $mem$0 = 0;
  STACKTOP = sp;return ($mem$0|0);
 }
 $head = (($oldmem) + -4|0);
 $0 = HEAP32[$head>>2]|0;
 $and15 = $0 & -8;
 $and17 = $0 & 3;
 $cmp18 = ($and17|0)==(0);
 $cond19 = $cmp18 ? 8 : 4;
 $sub = (($and15) - ($cond19))|0;
 $cmp20 = ($sub>>>0)<($bytes>>>0);
 $cond24 = $cmp20 ? $sub : $bytes;
 _memcpy(($call12|0),($oldmem|0),($cond24|0))|0;
 _free($oldmem);
 $mem$0 = $call12;
 STACKTOP = sp;return ($mem$0|0);
}
function _try_realloc_chunk($p,$nb) {
 $p = $p|0;
 $nb = $nb|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $R$0 = 0;
 var $R$1 = 0, $RP$0 = 0, $add = 0, $add$i = 0, $add$ptr = 0, $add$ptr$sum = 0, $add$ptr$sum10 = 0, $add$ptr$sum11 = 0, $add$ptr$sum1516 = 0, $add$ptr$sum2 = 0, $add$ptr$sum3 = 0, $add$ptr$sum7 = 0, $add$ptr$sum8 = 0, $add$ptr$sum9 = 0, $add$ptr17 = 0, $add$ptr17$sum = 0, $add$ptr298$sum6 = 0, $add$ptr303 = 0, $add$ptr303$sum = 0, $add$ptr317$sum5 = 0;
 var $add$ptr41 = 0, $add$ptr41$sum = 0, $add$ptr66 = 0, $add$ptr66$sum = 0, $add$ptr67 = 0, $add$ptr67$sum = 0, $add$ptr91$sum = 0, $add105 = 0, $add58 = 0, $and = 0, $and100 = 0, $and104 = 0, $and128 = 0, $and19 = 0, $and2 = 0, $and216 = 0, $and294 = 0, $and305 = 0, $and43 = 0, $and69 = 0;
 var $and7 = 0, $and80 = 0, $and87 = 0, $arrayidx = 0, $arrayidx179 = 0, $arrayidx186 = 0, $arrayidx190 = 0, $arrayidx206 = 0, $arrayidx226 = 0, $arrayidx234 = 0, $arrayidx261 = 0, $arrayidx267 = 0, $arrayidx278 = 0, $bk = 0, $bk118 = 0, $bk147 = 0, $bk155 = 0, $bk164 = 0, $child = 0, $child$sum = 0;
 var $child249 = 0, $child249$sum = 0, $cmp = 0, $cmp$i = 0, $cmp1$i = 0, $cmp106 = 0, $cmp11 = 0, $cmp111 = 0, $cmp114 = 0, $cmp116 = 0, $cmp119 = 0, $cmp125 = 0, $cmp13 = 0, $cmp133 = 0, $cmp136 = 0, $cmp139 = 0, $cmp15 = 0, $cmp156 = 0, $cmp162 = 0, $cmp165 = 0;
 var $cmp168 = 0, $cmp180 = 0, $cmp183 = 0, $cmp187 = 0, $cmp191 = 0, $cmp195 = 0, $cmp2$i = 0, $cmp203 = 0, $cmp207 = 0, $cmp220 = 0, $cmp227 = 0, $cmp239 = 0, $cmp243 = 0, $cmp251 = 0, $cmp255 = 0, $cmp268 = 0, $cmp272 = 0, $cmp288 = 0, $cmp3 = 0, $cmp34 = 0;
 var $cmp36 = 0, $cmp5 = 0, $cmp56 = 0, $cmp59 = 0, $cmp63 = 0, $cond = 0, $fd = 0, $fd138 = 0, $fd148$pre = 0, $fd148$pre$phiZ2D = 0, $fd159 = 0, $fd167 = 0, $head = 0, $head23 = 0, $head299 = 0, $head310 = 0, $head318 = 0, $head48 = 0, $head6 = 0, $head74 = 0;
 var $head79 = 0, $head92 = 0, $index = 0, $neg = 0, $neg215 = 0, $newp$0 = 0, $or = 0, $or$cond = 0, $or20 = 0, $or28 = 0, $or295 = 0, $or296 = 0, $or300 = 0, $or306 = 0, $or307 = 0, $or315 = 0, $or319 = 0, $or32 = 0, $or44 = 0, $or45 = 0;
 var $or50 = 0, $or70 = 0, $or71 = 0, $or76 = 0, $or88 = 0, $or89 = 0, $or93 = 0, $parent = 0, $parent248 = 0, $parent262 = 0, $parent279 = 0, $shl = 0, $shl$i = 0, $shl127 = 0, $shl214 = 0, $shr = 0, $storemerge = 0, $storemerge12 = 0, $sub = 0, $sub$i = 0;
 var $sub110 = 0, $sub40 = 0, $sub62 = 0, $tobool = 0, $tobool101 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $head = (($p) + 4|0);
 $0 = HEAP32[$head>>2]|0;
 $and = $0 & -8;
 $add$ptr = (($p) + ($and)|0);
 $1 = HEAP32[((13800 + 16|0))>>2]|0;
 $cmp = ($p>>>0)<($1>>>0);
 if ($cmp) {
  _abort();
  // unreachable;
 }
 $and2 = $0 & 3;
 $cmp3 = ($and2|0)!=(1);
 $cmp5 = ($p>>>0)<($add$ptr>>>0);
 $or$cond = $cmp3 & $cmp5;
 if (!($or$cond)) {
  _abort();
  // unreachable;
 }
 $add$ptr$sum1516 = $and | 4;
 $head6 = (($p) + ($add$ptr$sum1516)|0);
 $2 = HEAP32[$head6>>2]|0;
 $and7 = $2 & 1;
 $tobool = ($and7|0)==(0);
 if ($tobool) {
  _abort();
  // unreachable;
 }
 $cmp11 = ($and2|0)==(0);
 if ($cmp11) {
  $cmp$i = ($nb>>>0)<(256);
  if ($cmp$i) {
   $newp$0 = 0;
   STACKTOP = sp;return ($newp$0|0);
  }
  $add$i = (($nb) + 4)|0;
  $cmp1$i = ($and>>>0)<($add$i>>>0);
  if (!($cmp1$i)) {
   $sub$i = (($and) - ($nb))|0;
   $3 = HEAP32[((14272 + 8|0))>>2]|0;
   $shl$i = $3 << 1;
   $cmp2$i = ($sub$i>>>0)>($shl$i>>>0);
   if (!($cmp2$i)) {
    $newp$0 = $p;
    STACKTOP = sp;return ($newp$0|0);
   }
  }
  $newp$0 = 0;
  STACKTOP = sp;return ($newp$0|0);
 }
 $cmp13 = ($and>>>0)<($nb>>>0);
 if (!($cmp13)) {
  $sub = (($and) - ($nb))|0;
  $cmp15 = ($sub>>>0)>(15);
  if (!($cmp15)) {
   $newp$0 = $p;
   STACKTOP = sp;return ($newp$0|0);
  }
  $add$ptr17 = (($p) + ($nb)|0);
  $and19 = $0 & 1;
  $or = $and19 | $nb;
  $or20 = $or | 2;
  HEAP32[$head>>2] = $or20;
  $add$ptr17$sum = (($nb) + 4)|0;
  $head23 = (($p) + ($add$ptr17$sum)|0);
  $or28 = $sub | 3;
  HEAP32[$head23>>2] = $or28;
  $4 = HEAP32[$head6>>2]|0;
  $or32 = $4 | 1;
  HEAP32[$head6>>2] = $or32;
  _dispose_chunk($add$ptr17,$sub);
  $newp$0 = $p;
  STACKTOP = sp;return ($newp$0|0);
 }
 $5 = HEAP32[((13800 + 24|0))>>2]|0;
 $cmp34 = ($add$ptr|0)==($5|0);
 if ($cmp34) {
  $6 = HEAP32[((13800 + 12|0))>>2]|0;
  $add = (($6) + ($and))|0;
  $cmp36 = ($add>>>0)>($nb>>>0);
  if (!($cmp36)) {
   $newp$0 = 0;
   STACKTOP = sp;return ($newp$0|0);
  }
  $sub40 = (($add) - ($nb))|0;
  $add$ptr41 = (($p) + ($nb)|0);
  $and43 = $0 & 1;
  $or44 = $and43 | $nb;
  $or45 = $or44 | 2;
  HEAP32[$head>>2] = $or45;
  $add$ptr41$sum = (($nb) + 4)|0;
  $head48 = (($p) + ($add$ptr41$sum)|0);
  $or50 = $sub40 | 1;
  HEAP32[$head48>>2] = $or50;
  HEAP32[((13800 + 24|0))>>2] = $add$ptr41;
  HEAP32[((13800 + 12|0))>>2] = $sub40;
  $newp$0 = $p;
  STACKTOP = sp;return ($newp$0|0);
 }
 $7 = HEAP32[((13800 + 20|0))>>2]|0;
 $cmp56 = ($add$ptr|0)==($7|0);
 if ($cmp56) {
  $8 = HEAP32[((13800 + 8|0))>>2]|0;
  $add58 = (($8) + ($and))|0;
  $cmp59 = ($add58>>>0)<($nb>>>0);
  if ($cmp59) {
   $newp$0 = 0;
   STACKTOP = sp;return ($newp$0|0);
  }
  $sub62 = (($add58) - ($nb))|0;
  $cmp63 = ($sub62>>>0)>(15);
  if ($cmp63) {
   $add$ptr66 = (($p) + ($nb)|0);
   $add$ptr67 = (($p) + ($add58)|0);
   $and69 = $0 & 1;
   $or70 = $and69 | $nb;
   $or71 = $or70 | 2;
   HEAP32[$head>>2] = $or71;
   $add$ptr66$sum = (($nb) + 4)|0;
   $head74 = (($p) + ($add$ptr66$sum)|0);
   $or76 = $sub62 | 1;
   HEAP32[$head74>>2] = $or76;
   HEAP32[$add$ptr67>>2] = $sub62;
   $add$ptr67$sum = (($add58) + 4)|0;
   $head79 = (($p) + ($add$ptr67$sum)|0);
   $9 = HEAP32[$head79>>2]|0;
   $and80 = $9 & -2;
   HEAP32[$head79>>2] = $and80;
   $storemerge = $add$ptr66;$storemerge12 = $sub62;
  } else {
   $and87 = $0 & 1;
   $or88 = $and87 | $add58;
   $or89 = $or88 | 2;
   HEAP32[$head>>2] = $or89;
   $add$ptr91$sum = (($add58) + 4)|0;
   $head92 = (($p) + ($add$ptr91$sum)|0);
   $10 = HEAP32[$head92>>2]|0;
   $or93 = $10 | 1;
   HEAP32[$head92>>2] = $or93;
   $storemerge = 0;$storemerge12 = 0;
  }
  HEAP32[((13800 + 8|0))>>2] = $storemerge12;
  HEAP32[((13800 + 20|0))>>2] = $storemerge;
  $newp$0 = $p;
  STACKTOP = sp;return ($newp$0|0);
 }
 $and100 = $2 & 2;
 $tobool101 = ($and100|0)==(0);
 if (!($tobool101)) {
  $newp$0 = 0;
  STACKTOP = sp;return ($newp$0|0);
 }
 $and104 = $2 & -8;
 $add105 = (($and104) + ($and))|0;
 $cmp106 = ($add105>>>0)<($nb>>>0);
 if ($cmp106) {
  $newp$0 = 0;
  STACKTOP = sp;return ($newp$0|0);
 }
 $sub110 = (($add105) - ($nb))|0;
 $shr = $2 >>> 3;
 $cmp111 = ($2>>>0)<(256);
 do {
  if ($cmp111) {
   $add$ptr$sum10 = (($and) + 8)|0;
   $fd = (($p) + ($add$ptr$sum10)|0);
   $11 = HEAP32[$fd>>2]|0;
   $add$ptr$sum11 = (($and) + 12)|0;
   $bk = (($p) + ($add$ptr$sum11)|0);
   $12 = HEAP32[$bk>>2]|0;
   $shl = $shr << 1;
   $arrayidx = ((13800 + ($shl<<2)|0) + 40|0);
   $cmp114 = ($11|0)==($arrayidx|0);
   if (!($cmp114)) {
    $cmp116 = ($11>>>0)<($1>>>0);
    if ($cmp116) {
     _abort();
     // unreachable;
    }
    $bk118 = (($11) + 12|0);
    $13 = HEAP32[$bk118>>2]|0;
    $cmp119 = ($13|0)==($add$ptr|0);
    if (!($cmp119)) {
     _abort();
     // unreachable;
    }
   }
   $cmp125 = ($12|0)==($11|0);
   if ($cmp125) {
    $shl127 = 1 << $shr;
    $neg = $shl127 ^ -1;
    $14 = HEAP32[13800>>2]|0;
    $and128 = $14 & $neg;
    HEAP32[13800>>2] = $and128;
    break;
   }
   $cmp133 = ($12|0)==($arrayidx|0);
   if ($cmp133) {
    $fd148$pre = (($12) + 8|0);
    $fd148$pre$phiZ2D = $fd148$pre;
   } else {
    $cmp136 = ($12>>>0)<($1>>>0);
    if ($cmp136) {
     _abort();
     // unreachable;
    }
    $fd138 = (($12) + 8|0);
    $15 = HEAP32[$fd138>>2]|0;
    $cmp139 = ($15|0)==($add$ptr|0);
    if ($cmp139) {
     $fd148$pre$phiZ2D = $fd138;
    } else {
     _abort();
     // unreachable;
    }
   }
   $bk147 = (($11) + 12|0);
   HEAP32[$bk147>>2] = $12;
   HEAP32[$fd148$pre$phiZ2D>>2] = $11;
  } else {
   $add$ptr$sum = (($and) + 24)|0;
   $parent = (($p) + ($add$ptr$sum)|0);
   $16 = HEAP32[$parent>>2]|0;
   $add$ptr$sum2 = (($and) + 12)|0;
   $bk155 = (($p) + ($add$ptr$sum2)|0);
   $17 = HEAP32[$bk155>>2]|0;
   $cmp156 = ($17|0)==($add$ptr|0);
   do {
    if ($cmp156) {
     $child$sum = (($and) + 20)|0;
     $arrayidx179 = (($p) + ($child$sum)|0);
     $21 = HEAP32[$arrayidx179>>2]|0;
     $cmp180 = ($21|0)==(0|0);
     if ($cmp180) {
      $add$ptr$sum3 = (($and) + 16)|0;
      $child = (($p) + ($add$ptr$sum3)|0);
      $22 = HEAP32[$child>>2]|0;
      $cmp183 = ($22|0)==(0|0);
      if ($cmp183) {
       $R$1 = 0;
       break;
      } else {
       $R$0 = $22;$RP$0 = $child;
      }
     } else {
      $R$0 = $21;$RP$0 = $arrayidx179;
     }
     while(1) {
      $arrayidx186 = (($R$0) + 20|0);
      $23 = HEAP32[$arrayidx186>>2]|0;
      $cmp187 = ($23|0)==(0|0);
      if (!($cmp187)) {
       $R$0 = $23;$RP$0 = $arrayidx186;
       continue;
      }
      $arrayidx190 = (($R$0) + 16|0);
      $24 = HEAP32[$arrayidx190>>2]|0;
      $cmp191 = ($24|0)==(0|0);
      if ($cmp191) {
       break;
      } else {
       $R$0 = $24;$RP$0 = $arrayidx190;
      }
     }
     $cmp195 = ($RP$0>>>0)<($1>>>0);
     if ($cmp195) {
      _abort();
      // unreachable;
     } else {
      HEAP32[$RP$0>>2] = 0;
      $R$1 = $R$0;
      break;
     }
    } else {
     $add$ptr$sum9 = (($and) + 8)|0;
     $fd159 = (($p) + ($add$ptr$sum9)|0);
     $18 = HEAP32[$fd159>>2]|0;
     $cmp162 = ($18>>>0)<($1>>>0);
     if ($cmp162) {
      _abort();
      // unreachable;
     }
     $bk164 = (($18) + 12|0);
     $19 = HEAP32[$bk164>>2]|0;
     $cmp165 = ($19|0)==($add$ptr|0);
     if (!($cmp165)) {
      _abort();
      // unreachable;
     }
     $fd167 = (($17) + 8|0);
     $20 = HEAP32[$fd167>>2]|0;
     $cmp168 = ($20|0)==($add$ptr|0);
     if ($cmp168) {
      HEAP32[$bk164>>2] = $17;
      HEAP32[$fd167>>2] = $18;
      $R$1 = $17;
      break;
     } else {
      _abort();
      // unreachable;
     }
    }
   } while(0);
   $cmp203 = ($16|0)==(0|0);
   if (!($cmp203)) {
    $add$ptr$sum7 = (($and) + 28)|0;
    $index = (($p) + ($add$ptr$sum7)|0);
    $25 = HEAP32[$index>>2]|0;
    $arrayidx206 = ((13800 + ($25<<2)|0) + 304|0);
    $26 = HEAP32[$arrayidx206>>2]|0;
    $cmp207 = ($add$ptr|0)==($26|0);
    if ($cmp207) {
     HEAP32[$arrayidx206>>2] = $R$1;
     $cond = ($R$1|0)==(0|0);
     if ($cond) {
      $shl214 = 1 << $25;
      $neg215 = $shl214 ^ -1;
      $27 = HEAP32[((13800 + 4|0))>>2]|0;
      $and216 = $27 & $neg215;
      HEAP32[((13800 + 4|0))>>2] = $and216;
      break;
     }
    } else {
     $28 = HEAP32[((13800 + 16|0))>>2]|0;
     $cmp220 = ($16>>>0)<($28>>>0);
     if ($cmp220) {
      _abort();
      // unreachable;
     }
     $arrayidx226 = (($16) + 16|0);
     $29 = HEAP32[$arrayidx226>>2]|0;
     $cmp227 = ($29|0)==($add$ptr|0);
     if ($cmp227) {
      HEAP32[$arrayidx226>>2] = $R$1;
     } else {
      $arrayidx234 = (($16) + 20|0);
      HEAP32[$arrayidx234>>2] = $R$1;
     }
     $cmp239 = ($R$1|0)==(0|0);
     if ($cmp239) {
      break;
     }
    }
    $30 = HEAP32[((13800 + 16|0))>>2]|0;
    $cmp243 = ($R$1>>>0)<($30>>>0);
    if ($cmp243) {
     _abort();
     // unreachable;
    }
    $parent248 = (($R$1) + 24|0);
    HEAP32[$parent248>>2] = $16;
    $add$ptr$sum8 = (($and) + 16)|0;
    $child249 = (($p) + ($add$ptr$sum8)|0);
    $31 = HEAP32[$child249>>2]|0;
    $cmp251 = ($31|0)==(0|0);
    do {
     if (!($cmp251)) {
      $32 = HEAP32[((13800 + 16|0))>>2]|0;
      $cmp255 = ($31>>>0)<($32>>>0);
      if ($cmp255) {
       _abort();
       // unreachable;
      } else {
       $arrayidx261 = (($R$1) + 16|0);
       HEAP32[$arrayidx261>>2] = $31;
       $parent262 = (($31) + 24|0);
       HEAP32[$parent262>>2] = $R$1;
       break;
      }
     }
    } while(0);
    $child249$sum = (($and) + 20)|0;
    $arrayidx267 = (($p) + ($child249$sum)|0);
    $33 = HEAP32[$arrayidx267>>2]|0;
    $cmp268 = ($33|0)==(0|0);
    if (!($cmp268)) {
     $34 = HEAP32[((13800 + 16|0))>>2]|0;
     $cmp272 = ($33>>>0)<($34>>>0);
     if ($cmp272) {
      _abort();
      // unreachable;
     } else {
      $arrayidx278 = (($R$1) + 20|0);
      HEAP32[$arrayidx278>>2] = $33;
      $parent279 = (($33) + 24|0);
      HEAP32[$parent279>>2] = $R$1;
      break;
     }
    }
   }
  }
 } while(0);
 $cmp288 = ($sub110>>>0)<(16);
 if ($cmp288) {
  $35 = HEAP32[$head>>2]|0;
  $and294 = $35 & 1;
  $or295 = $add105 | $and294;
  $or296 = $or295 | 2;
  HEAP32[$head>>2] = $or296;
  $add$ptr298$sum6 = $add105 | 4;
  $head299 = (($p) + ($add$ptr298$sum6)|0);
  $36 = HEAP32[$head299>>2]|0;
  $or300 = $36 | 1;
  HEAP32[$head299>>2] = $or300;
  $newp$0 = $p;
  STACKTOP = sp;return ($newp$0|0);
 } else {
  $add$ptr303 = (($p) + ($nb)|0);
  $37 = HEAP32[$head>>2]|0;
  $and305 = $37 & 1;
  $or306 = $and305 | $nb;
  $or307 = $or306 | 2;
  HEAP32[$head>>2] = $or307;
  $add$ptr303$sum = (($nb) + 4)|0;
  $head310 = (($p) + ($add$ptr303$sum)|0);
  $or315 = $sub110 | 3;
  HEAP32[$head310>>2] = $or315;
  $add$ptr317$sum5 = $add105 | 4;
  $head318 = (($p) + ($add$ptr317$sum5)|0);
  $38 = HEAP32[$head318>>2]|0;
  $or319 = $38 | 1;
  HEAP32[$head318>>2] = $or319;
  _dispose_chunk($add$ptr303,$sub110);
  $newp$0 = $p;
  STACKTOP = sp;return ($newp$0|0);
 }
 return 0|0;
}
function _dispose_chunk($p,$psize) {
 $p = $p|0;
 $psize = $psize|0;
 var $$pre = 0, $$pre$phiZ2D = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $8 = 0, $9 = 0, $F511$0 = 0, $I539$0 = 0, $I539$0$c = 0;
 var $K591$036 = 0, $R$0 = 0, $R$1 = 0, $R325$0 = 0, $R325$1 = 0, $RP$0 = 0, $RP354$0 = 0, $T$0$lcssa = 0, $T$035 = 0, $add$ptr = 0, $add$ptr$sum = 0, $add$ptr$sum1 = 0, $add$ptr$sum12 = 0, $add$ptr$sum13 = 0, $add$ptr$sum14 = 0, $add$ptr$sum15 = 0, $add$ptr$sum16 = 0, $add$ptr$sum2 = 0, $add$ptr$sum3 = 0, $add$ptr$sum4 = 0;
 var $add$ptr250 = 0, $add$ptr483 = 0, $add$ptr498 = 0, $add$ptr5 = 0, $add$ptr5$sum = 0, $add$ptr5$sum18 = 0, $add$ptr5$sum19 = 0, $add$ptr5$sum20 = 0, $add$ptr5$sum21 = 0, $add$ptr5$sum22 = 0, $add$ptr5$sum23 = 0, $add$ptr5$sum24 = 0, $add$ptr5$sum25 = 0, $add229 = 0, $add246 = 0, $add255 = 0, $add555 = 0, $add560 = 0, $add564 = 0, $add566 = 0;
 var $add569 = 0, $add6 = 0, $and = 0, $and128 = 0, $and2 = 0, $and202 = 0, $and207 = 0, $and223 = 0, $and254 = 0, $and292 = 0, $and32 = 0, $and407 = 0, $and495 = 0, $and514 = 0, $and550 = 0, $and554 = 0, $and559 = 0, $and568 = 0, $and581 = 0, $and600 = 0;
 var $and60033 = 0, $arrayidx = 0, $arrayidx100 = 0, $arrayidx118 = 0, $arrayidx138 = 0, $arrayidx146 = 0, $arrayidx173 = 0, $arrayidx179 = 0, $arrayidx190 = 0, $arrayidx268 = 0, $arrayidx356 = 0, $arrayidx368 = 0, $arrayidx373 = 0, $arrayidx396 = 0, $arrayidx417 = 0, $arrayidx425 = 0, $arrayidx454 = 0, $arrayidx460 = 0, $arrayidx471 = 0, $arrayidx510 = 0;
 var $arrayidx510$sum$pre = 0, $arrayidx510$sum11 = 0, $arrayidx573 = 0, $arrayidx576 = 0, $arrayidx607 = 0, $arrayidx86 = 0, $arrayidx95 = 0, $bk = 0, $bk22 = 0, $bk263 = 0, $bk276 = 0, $bk314 = 0, $bk326 = 0, $bk337 = 0, $bk52 = 0, $bk533 = 0, $bk535 = 0, $bk588 = 0, $bk60 = 0, $bk620 = 0;
 var $bk639 = 0, $bk642 = 0, $bk70 = 0, $child = 0, $child$sum = 0, $child161 = 0, $child161$sum = 0, $child355 = 0, $child355$sum = 0, $child442 = 0, $child442$sum = 0, $cmp = 0, $cmp10 = 0, $cmp101 = 0, $cmp106 = 0, $cmp115 = 0, $cmp119 = 0, $cmp13 = 0, $cmp132 = 0, $cmp139 = 0;
 var $cmp151 = 0, $cmp155 = 0, $cmp163 = 0, $cmp167 = 0, $cmp17 = 0, $cmp180 = 0, $cmp184 = 0, $cmp20 = 0, $cmp203 = 0, $cmp217 = 0, $cmp226 = 0, $cmp23 = 0, $cmp234 = 0, $cmp242 = 0, $cmp257 = 0, $cmp269 = 0, $cmp273 = 0, $cmp277 = 0, $cmp28 = 0, $cmp286 = 0;
 var $cmp297 = 0, $cmp301 = 0, $cmp305 = 0, $cmp327 = 0, $cmp334 = 0, $cmp338 = 0, $cmp342 = 0, $cmp357 = 0, $cmp36 = 0, $cmp362 = 0, $cmp369 = 0, $cmp374 = 0, $cmp381 = 0, $cmp390 = 0, $cmp397 = 0, $cmp40 = 0, $cmp411 = 0, $cmp418 = 0, $cmp430 = 0, $cmp434 = 0;
 var $cmp44 = 0, $cmp444 = 0, $cmp448 = 0, $cmp461 = 0, $cmp465 = 0, $cmp486 = 0, $cmp502 = 0, $cmp523 = 0, $cmp541 = 0, $cmp545 = 0, $cmp592 = 0, $cmp601 = 0, $cmp60134 = 0, $cmp609 = 0, $cmp61 = 0, $cmp614 = 0, $cmp628 = 0, $cmp632 = 0, $cmp68 = 0, $cmp7 = 0;
 var $cmp71 = 0, $cmp75 = 0, $cmp87 = 0, $cmp91 = 0, $cmp96 = 0, $cond = 0, $cond29 = 0, $cond30 = 0, $fd = 0, $fd261 = 0, $fd304 = 0, $fd315$pre = 0, $fd315$pre$phiZ2D = 0, $fd331 = 0, $fd341 = 0, $fd43 = 0, $fd53$pre = 0, $fd53$pre$phiZ2D = 0, $fd534 = 0, $fd589 = 0;
 var $fd621 = 0, $fd626 = 0, $fd641 = 0, $fd65 = 0, $fd74 = 0, $head = 0, $head201 = 0, $head208 = 0, $head222 = 0, $head232 = 0, $head249 = 0, $head482 = 0, $head497 = 0, $head599 = 0, $head59932 = 0, $idx$neg = 0, $index = 0, $index394 = 0, $index574 = 0, $neg = 0;
 var $neg127 = 0, $neg290 = 0, $neg405 = 0, $or = 0, $or231 = 0, $or248 = 0, $or481 = 0, $or496 = 0, $or519 = 0, $or586 = 0, $p$addr$0 = 0, $parent = 0, $parent160 = 0, $parent174 = 0, $parent191 = 0, $parent324 = 0, $parent441 = 0, $parent455 = 0, $parent472 = 0, $parent587 = 0;
 var $parent619 = 0, $parent643 = 0, $psize$addr$0 = 0, $psize$addr$1 = 0, $shl = 0, $shl126 = 0, $shl266 = 0, $shl289 = 0, $shl31 = 0, $shl404 = 0, $shl508 = 0, $shl513 = 0, $shl551 = 0, $shl556 = 0, $shl562 = 0, $shl565 = 0, $shl580 = 0, $shl598 = 0, $shl608 = 0, $shr = 0;
 var $shr256 = 0, $shr501 = 0, $shr540 = 0, $shr549 = 0, $shr553 = 0, $shr558 = 0, $shr563 = 0, $shr567 = 0, $shr594 = 0, $shr604 = 0, $sub = 0, $sub552 = 0, $sub557 = 0, $sub561 = 0, $sub597 = 0, $tobool = 0, $tobool224 = 0, $tobool515 = 0, $tobool582 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $add$ptr = (($p) + ($psize)|0);
 $head = (($p) + 4|0);
 $0 = HEAP32[$head>>2]|0;
 $and = $0 & 1;
 $tobool = ($and|0)==(0);
 do {
  if ($tobool) {
   $1 = HEAP32[$p>>2]|0;
   $and2 = $0 & 3;
   $cmp = ($and2|0)==(0);
   if ($cmp) {
    STACKTOP = sp;return;
   }
   $idx$neg = (0 - ($1))|0;
   $add$ptr5 = (($p) + ($idx$neg)|0);
   $add6 = (($1) + ($psize))|0;
   $2 = HEAP32[((13800 + 16|0))>>2]|0;
   $cmp7 = ($add$ptr5>>>0)<($2>>>0);
   if ($cmp7) {
    _abort();
    // unreachable;
   }
   $3 = HEAP32[((13800 + 20|0))>>2]|0;
   $cmp10 = ($add$ptr5|0)==($3|0);
   if ($cmp10) {
    $add$ptr$sum = (($psize) + 4)|0;
    $head201 = (($p) + ($add$ptr$sum)|0);
    $28 = HEAP32[$head201>>2]|0;
    $and202 = $28 & 3;
    $cmp203 = ($and202|0)==(3);
    if (!($cmp203)) {
     $p$addr$0 = $add$ptr5;$psize$addr$0 = $add6;
     break;
    }
    HEAP32[((13800 + 8|0))>>2] = $add6;
    $29 = HEAP32[$head201>>2]|0;
    $and207 = $29 & -2;
    HEAP32[$head201>>2] = $and207;
    $or = $add6 | 1;
    $add$ptr5$sum = (4 - ($1))|0;
    $head208 = (($p) + ($add$ptr5$sum)|0);
    HEAP32[$head208>>2] = $or;
    HEAP32[$add$ptr>>2] = $add6;
    STACKTOP = sp;return;
   }
   $shr = $1 >>> 3;
   $cmp13 = ($1>>>0)<(256);
   if ($cmp13) {
    $add$ptr5$sum24 = (8 - ($1))|0;
    $fd = (($p) + ($add$ptr5$sum24)|0);
    $4 = HEAP32[$fd>>2]|0;
    $add$ptr5$sum25 = (12 - ($1))|0;
    $bk = (($p) + ($add$ptr5$sum25)|0);
    $5 = HEAP32[$bk>>2]|0;
    $shl = $shr << 1;
    $arrayidx = ((13800 + ($shl<<2)|0) + 40|0);
    $cmp17 = ($4|0)==($arrayidx|0);
    if (!($cmp17)) {
     $cmp20 = ($4>>>0)<($2>>>0);
     if ($cmp20) {
      _abort();
      // unreachable;
     }
     $bk22 = (($4) + 12|0);
     $6 = HEAP32[$bk22>>2]|0;
     $cmp23 = ($6|0)==($add$ptr5|0);
     if (!($cmp23)) {
      _abort();
      // unreachable;
     }
    }
    $cmp28 = ($5|0)==($4|0);
    if ($cmp28) {
     $shl31 = 1 << $shr;
     $neg = $shl31 ^ -1;
     $7 = HEAP32[13800>>2]|0;
     $and32 = $7 & $neg;
     HEAP32[13800>>2] = $and32;
     $p$addr$0 = $add$ptr5;$psize$addr$0 = $add6;
     break;
    }
    $cmp36 = ($5|0)==($arrayidx|0);
    if ($cmp36) {
     $fd53$pre = (($5) + 8|0);
     $fd53$pre$phiZ2D = $fd53$pre;
    } else {
     $cmp40 = ($5>>>0)<($2>>>0);
     if ($cmp40) {
      _abort();
      // unreachable;
     }
     $fd43 = (($5) + 8|0);
     $8 = HEAP32[$fd43>>2]|0;
     $cmp44 = ($8|0)==($add$ptr5|0);
     if ($cmp44) {
      $fd53$pre$phiZ2D = $fd43;
     } else {
      _abort();
      // unreachable;
     }
    }
    $bk52 = (($4) + 12|0);
    HEAP32[$bk52>>2] = $5;
    HEAP32[$fd53$pre$phiZ2D>>2] = $4;
    $p$addr$0 = $add$ptr5;$psize$addr$0 = $add6;
    break;
   }
   $add$ptr5$sum18 = (24 - ($1))|0;
   $parent = (($p) + ($add$ptr5$sum18)|0);
   $9 = HEAP32[$parent>>2]|0;
   $add$ptr5$sum19 = (12 - ($1))|0;
   $bk60 = (($p) + ($add$ptr5$sum19)|0);
   $10 = HEAP32[$bk60>>2]|0;
   $cmp61 = ($10|0)==($add$ptr5|0);
   do {
    if ($cmp61) {
     $add$ptr5$sum20 = (16 - ($1))|0;
     $child$sum = (($add$ptr5$sum20) + 4)|0;
     $arrayidx86 = (($p) + ($child$sum)|0);
     $14 = HEAP32[$arrayidx86>>2]|0;
     $cmp87 = ($14|0)==(0|0);
     if ($cmp87) {
      $child = (($p) + ($add$ptr5$sum20)|0);
      $15 = HEAP32[$child>>2]|0;
      $cmp91 = ($15|0)==(0|0);
      if ($cmp91) {
       $R$1 = 0;
       break;
      } else {
       $R$0 = $15;$RP$0 = $child;
      }
     } else {
      $R$0 = $14;$RP$0 = $arrayidx86;
     }
     while(1) {
      $arrayidx95 = (($R$0) + 20|0);
      $16 = HEAP32[$arrayidx95>>2]|0;
      $cmp96 = ($16|0)==(0|0);
      if (!($cmp96)) {
       $R$0 = $16;$RP$0 = $arrayidx95;
       continue;
      }
      $arrayidx100 = (($R$0) + 16|0);
      $17 = HEAP32[$arrayidx100>>2]|0;
      $cmp101 = ($17|0)==(0|0);
      if ($cmp101) {
       break;
      } else {
       $R$0 = $17;$RP$0 = $arrayidx100;
      }
     }
     $cmp106 = ($RP$0>>>0)<($2>>>0);
     if ($cmp106) {
      _abort();
      // unreachable;
     } else {
      HEAP32[$RP$0>>2] = 0;
      $R$1 = $R$0;
      break;
     }
    } else {
     $add$ptr5$sum23 = (8 - ($1))|0;
     $fd65 = (($p) + ($add$ptr5$sum23)|0);
     $11 = HEAP32[$fd65>>2]|0;
     $cmp68 = ($11>>>0)<($2>>>0);
     if ($cmp68) {
      _abort();
      // unreachable;
     }
     $bk70 = (($11) + 12|0);
     $12 = HEAP32[$bk70>>2]|0;
     $cmp71 = ($12|0)==($add$ptr5|0);
     if (!($cmp71)) {
      _abort();
      // unreachable;
     }
     $fd74 = (($10) + 8|0);
     $13 = HEAP32[$fd74>>2]|0;
     $cmp75 = ($13|0)==($add$ptr5|0);
     if ($cmp75) {
      HEAP32[$bk70>>2] = $10;
      HEAP32[$fd74>>2] = $11;
      $R$1 = $10;
      break;
     } else {
      _abort();
      // unreachable;
     }
    }
   } while(0);
   $cmp115 = ($9|0)==(0|0);
   if ($cmp115) {
    $p$addr$0 = $add$ptr5;$psize$addr$0 = $add6;
   } else {
    $add$ptr5$sum21 = (28 - ($1))|0;
    $index = (($p) + ($add$ptr5$sum21)|0);
    $18 = HEAP32[$index>>2]|0;
    $arrayidx118 = ((13800 + ($18<<2)|0) + 304|0);
    $19 = HEAP32[$arrayidx118>>2]|0;
    $cmp119 = ($add$ptr5|0)==($19|0);
    if ($cmp119) {
     HEAP32[$arrayidx118>>2] = $R$1;
     $cond29 = ($R$1|0)==(0|0);
     if ($cond29) {
      $shl126 = 1 << $18;
      $neg127 = $shl126 ^ -1;
      $20 = HEAP32[((13800 + 4|0))>>2]|0;
      $and128 = $20 & $neg127;
      HEAP32[((13800 + 4|0))>>2] = $and128;
      $p$addr$0 = $add$ptr5;$psize$addr$0 = $add6;
      break;
     }
    } else {
     $21 = HEAP32[((13800 + 16|0))>>2]|0;
     $cmp132 = ($9>>>0)<($21>>>0);
     if ($cmp132) {
      _abort();
      // unreachable;
     }
     $arrayidx138 = (($9) + 16|0);
     $22 = HEAP32[$arrayidx138>>2]|0;
     $cmp139 = ($22|0)==($add$ptr5|0);
     if ($cmp139) {
      HEAP32[$arrayidx138>>2] = $R$1;
     } else {
      $arrayidx146 = (($9) + 20|0);
      HEAP32[$arrayidx146>>2] = $R$1;
     }
     $cmp151 = ($R$1|0)==(0|0);
     if ($cmp151) {
      $p$addr$0 = $add$ptr5;$psize$addr$0 = $add6;
      break;
     }
    }
    $23 = HEAP32[((13800 + 16|0))>>2]|0;
    $cmp155 = ($R$1>>>0)<($23>>>0);
    if ($cmp155) {
     _abort();
     // unreachable;
    }
    $parent160 = (($R$1) + 24|0);
    HEAP32[$parent160>>2] = $9;
    $add$ptr5$sum22 = (16 - ($1))|0;
    $child161 = (($p) + ($add$ptr5$sum22)|0);
    $24 = HEAP32[$child161>>2]|0;
    $cmp163 = ($24|0)==(0|0);
    do {
     if (!($cmp163)) {
      $25 = HEAP32[((13800 + 16|0))>>2]|0;
      $cmp167 = ($24>>>0)<($25>>>0);
      if ($cmp167) {
       _abort();
       // unreachable;
      } else {
       $arrayidx173 = (($R$1) + 16|0);
       HEAP32[$arrayidx173>>2] = $24;
       $parent174 = (($24) + 24|0);
       HEAP32[$parent174>>2] = $R$1;
       break;
      }
     }
    } while(0);
    $child161$sum = (($add$ptr5$sum22) + 4)|0;
    $arrayidx179 = (($p) + ($child161$sum)|0);
    $26 = HEAP32[$arrayidx179>>2]|0;
    $cmp180 = ($26|0)==(0|0);
    if ($cmp180) {
     $p$addr$0 = $add$ptr5;$psize$addr$0 = $add6;
    } else {
     $27 = HEAP32[((13800 + 16|0))>>2]|0;
     $cmp184 = ($26>>>0)<($27>>>0);
     if ($cmp184) {
      _abort();
      // unreachable;
     } else {
      $arrayidx190 = (($R$1) + 20|0);
      HEAP32[$arrayidx190>>2] = $26;
      $parent191 = (($26) + 24|0);
      HEAP32[$parent191>>2] = $R$1;
      $p$addr$0 = $add$ptr5;$psize$addr$0 = $add6;
      break;
     }
    }
   }
  } else {
   $p$addr$0 = $p;$psize$addr$0 = $psize;
  }
 } while(0);
 $30 = HEAP32[((13800 + 16|0))>>2]|0;
 $cmp217 = ($add$ptr>>>0)<($30>>>0);
 if ($cmp217) {
  _abort();
  // unreachable;
 }
 $add$ptr$sum1 = (($psize) + 4)|0;
 $head222 = (($p) + ($add$ptr$sum1)|0);
 $31 = HEAP32[$head222>>2]|0;
 $and223 = $31 & 2;
 $tobool224 = ($and223|0)==(0);
 if ($tobool224) {
  $32 = HEAP32[((13800 + 24|0))>>2]|0;
  $cmp226 = ($add$ptr|0)==($32|0);
  if ($cmp226) {
   $33 = HEAP32[((13800 + 12|0))>>2]|0;
   $add229 = (($33) + ($psize$addr$0))|0;
   HEAP32[((13800 + 12|0))>>2] = $add229;
   HEAP32[((13800 + 24|0))>>2] = $p$addr$0;
   $or231 = $add229 | 1;
   $head232 = (($p$addr$0) + 4|0);
   HEAP32[$head232>>2] = $or231;
   $34 = HEAP32[((13800 + 20|0))>>2]|0;
   $cmp234 = ($p$addr$0|0)==($34|0);
   if (!($cmp234)) {
    STACKTOP = sp;return;
   }
   HEAP32[((13800 + 20|0))>>2] = 0;
   HEAP32[((13800 + 8|0))>>2] = 0;
   STACKTOP = sp;return;
  }
  $35 = HEAP32[((13800 + 20|0))>>2]|0;
  $cmp242 = ($add$ptr|0)==($35|0);
  if ($cmp242) {
   $36 = HEAP32[((13800 + 8|0))>>2]|0;
   $add246 = (($36) + ($psize$addr$0))|0;
   HEAP32[((13800 + 8|0))>>2] = $add246;
   HEAP32[((13800 + 20|0))>>2] = $p$addr$0;
   $or248 = $add246 | 1;
   $head249 = (($p$addr$0) + 4|0);
   HEAP32[$head249>>2] = $or248;
   $add$ptr250 = (($p$addr$0) + ($add246)|0);
   HEAP32[$add$ptr250>>2] = $add246;
   STACKTOP = sp;return;
  }
  $and254 = $31 & -8;
  $add255 = (($and254) + ($psize$addr$0))|0;
  $shr256 = $31 >>> 3;
  $cmp257 = ($31>>>0)<(256);
  do {
   if ($cmp257) {
    $add$ptr$sum15 = (($psize) + 8)|0;
    $fd261 = (($p) + ($add$ptr$sum15)|0);
    $37 = HEAP32[$fd261>>2]|0;
    $add$ptr$sum16 = (($psize) + 12)|0;
    $bk263 = (($p) + ($add$ptr$sum16)|0);
    $38 = HEAP32[$bk263>>2]|0;
    $shl266 = $shr256 << 1;
    $arrayidx268 = ((13800 + ($shl266<<2)|0) + 40|0);
    $cmp269 = ($37|0)==($arrayidx268|0);
    if (!($cmp269)) {
     $cmp273 = ($37>>>0)<($30>>>0);
     if ($cmp273) {
      _abort();
      // unreachable;
     }
     $bk276 = (($37) + 12|0);
     $39 = HEAP32[$bk276>>2]|0;
     $cmp277 = ($39|0)==($add$ptr|0);
     if (!($cmp277)) {
      _abort();
      // unreachable;
     }
    }
    $cmp286 = ($38|0)==($37|0);
    if ($cmp286) {
     $shl289 = 1 << $shr256;
     $neg290 = $shl289 ^ -1;
     $40 = HEAP32[13800>>2]|0;
     $and292 = $40 & $neg290;
     HEAP32[13800>>2] = $and292;
     break;
    }
    $cmp297 = ($38|0)==($arrayidx268|0);
    if ($cmp297) {
     $fd315$pre = (($38) + 8|0);
     $fd315$pre$phiZ2D = $fd315$pre;
    } else {
     $cmp301 = ($38>>>0)<($30>>>0);
     if ($cmp301) {
      _abort();
      // unreachable;
     }
     $fd304 = (($38) + 8|0);
     $41 = HEAP32[$fd304>>2]|0;
     $cmp305 = ($41|0)==($add$ptr|0);
     if ($cmp305) {
      $fd315$pre$phiZ2D = $fd304;
     } else {
      _abort();
      // unreachable;
     }
    }
    $bk314 = (($37) + 12|0);
    HEAP32[$bk314>>2] = $38;
    HEAP32[$fd315$pre$phiZ2D>>2] = $37;
   } else {
    $add$ptr$sum2 = (($psize) + 24)|0;
    $parent324 = (($p) + ($add$ptr$sum2)|0);
    $42 = HEAP32[$parent324>>2]|0;
    $add$ptr$sum3 = (($psize) + 12)|0;
    $bk326 = (($p) + ($add$ptr$sum3)|0);
    $43 = HEAP32[$bk326>>2]|0;
    $cmp327 = ($43|0)==($add$ptr|0);
    do {
     if ($cmp327) {
      $child355$sum = (($psize) + 20)|0;
      $arrayidx356 = (($p) + ($child355$sum)|0);
      $47 = HEAP32[$arrayidx356>>2]|0;
      $cmp357 = ($47|0)==(0|0);
      if ($cmp357) {
       $add$ptr$sum4 = (($psize) + 16)|0;
       $child355 = (($p) + ($add$ptr$sum4)|0);
       $48 = HEAP32[$child355>>2]|0;
       $cmp362 = ($48|0)==(0|0);
       if ($cmp362) {
        $R325$1 = 0;
        break;
       } else {
        $R325$0 = $48;$RP354$0 = $child355;
       }
      } else {
       $R325$0 = $47;$RP354$0 = $arrayidx356;
      }
      while(1) {
       $arrayidx368 = (($R325$0) + 20|0);
       $49 = HEAP32[$arrayidx368>>2]|0;
       $cmp369 = ($49|0)==(0|0);
       if (!($cmp369)) {
        $R325$0 = $49;$RP354$0 = $arrayidx368;
        continue;
       }
       $arrayidx373 = (($R325$0) + 16|0);
       $50 = HEAP32[$arrayidx373>>2]|0;
       $cmp374 = ($50|0)==(0|0);
       if ($cmp374) {
        break;
       } else {
        $R325$0 = $50;$RP354$0 = $arrayidx373;
       }
      }
      $cmp381 = ($RP354$0>>>0)<($30>>>0);
      if ($cmp381) {
       _abort();
       // unreachable;
      } else {
       HEAP32[$RP354$0>>2] = 0;
       $R325$1 = $R325$0;
       break;
      }
     } else {
      $add$ptr$sum14 = (($psize) + 8)|0;
      $fd331 = (($p) + ($add$ptr$sum14)|0);
      $44 = HEAP32[$fd331>>2]|0;
      $cmp334 = ($44>>>0)<($30>>>0);
      if ($cmp334) {
       _abort();
       // unreachable;
      }
      $bk337 = (($44) + 12|0);
      $45 = HEAP32[$bk337>>2]|0;
      $cmp338 = ($45|0)==($add$ptr|0);
      if (!($cmp338)) {
       _abort();
       // unreachable;
      }
      $fd341 = (($43) + 8|0);
      $46 = HEAP32[$fd341>>2]|0;
      $cmp342 = ($46|0)==($add$ptr|0);
      if ($cmp342) {
       HEAP32[$bk337>>2] = $43;
       HEAP32[$fd341>>2] = $44;
       $R325$1 = $43;
       break;
      } else {
       _abort();
       // unreachable;
      }
     }
    } while(0);
    $cmp390 = ($42|0)==(0|0);
    if (!($cmp390)) {
     $add$ptr$sum12 = (($psize) + 28)|0;
     $index394 = (($p) + ($add$ptr$sum12)|0);
     $51 = HEAP32[$index394>>2]|0;
     $arrayidx396 = ((13800 + ($51<<2)|0) + 304|0);
     $52 = HEAP32[$arrayidx396>>2]|0;
     $cmp397 = ($add$ptr|0)==($52|0);
     if ($cmp397) {
      HEAP32[$arrayidx396>>2] = $R325$1;
      $cond30 = ($R325$1|0)==(0|0);
      if ($cond30) {
       $shl404 = 1 << $51;
       $neg405 = $shl404 ^ -1;
       $53 = HEAP32[((13800 + 4|0))>>2]|0;
       $and407 = $53 & $neg405;
       HEAP32[((13800 + 4|0))>>2] = $and407;
       break;
      }
     } else {
      $54 = HEAP32[((13800 + 16|0))>>2]|0;
      $cmp411 = ($42>>>0)<($54>>>0);
      if ($cmp411) {
       _abort();
       // unreachable;
      }
      $arrayidx417 = (($42) + 16|0);
      $55 = HEAP32[$arrayidx417>>2]|0;
      $cmp418 = ($55|0)==($add$ptr|0);
      if ($cmp418) {
       HEAP32[$arrayidx417>>2] = $R325$1;
      } else {
       $arrayidx425 = (($42) + 20|0);
       HEAP32[$arrayidx425>>2] = $R325$1;
      }
      $cmp430 = ($R325$1|0)==(0|0);
      if ($cmp430) {
       break;
      }
     }
     $56 = HEAP32[((13800 + 16|0))>>2]|0;
     $cmp434 = ($R325$1>>>0)<($56>>>0);
     if ($cmp434) {
      _abort();
      // unreachable;
     }
     $parent441 = (($R325$1) + 24|0);
     HEAP32[$parent441>>2] = $42;
     $add$ptr$sum13 = (($psize) + 16)|0;
     $child442 = (($p) + ($add$ptr$sum13)|0);
     $57 = HEAP32[$child442>>2]|0;
     $cmp444 = ($57|0)==(0|0);
     do {
      if (!($cmp444)) {
       $58 = HEAP32[((13800 + 16|0))>>2]|0;
       $cmp448 = ($57>>>0)<($58>>>0);
       if ($cmp448) {
        _abort();
        // unreachable;
       } else {
        $arrayidx454 = (($R325$1) + 16|0);
        HEAP32[$arrayidx454>>2] = $57;
        $parent455 = (($57) + 24|0);
        HEAP32[$parent455>>2] = $R325$1;
        break;
       }
      }
     } while(0);
     $child442$sum = (($psize) + 20)|0;
     $arrayidx460 = (($p) + ($child442$sum)|0);
     $59 = HEAP32[$arrayidx460>>2]|0;
     $cmp461 = ($59|0)==(0|0);
     if (!($cmp461)) {
      $60 = HEAP32[((13800 + 16|0))>>2]|0;
      $cmp465 = ($59>>>0)<($60>>>0);
      if ($cmp465) {
       _abort();
       // unreachable;
      } else {
       $arrayidx471 = (($R325$1) + 20|0);
       HEAP32[$arrayidx471>>2] = $59;
       $parent472 = (($59) + 24|0);
       HEAP32[$parent472>>2] = $R325$1;
       break;
      }
     }
    }
   }
  } while(0);
  $or481 = $add255 | 1;
  $head482 = (($p$addr$0) + 4|0);
  HEAP32[$head482>>2] = $or481;
  $add$ptr483 = (($p$addr$0) + ($add255)|0);
  HEAP32[$add$ptr483>>2] = $add255;
  $61 = HEAP32[((13800 + 20|0))>>2]|0;
  $cmp486 = ($p$addr$0|0)==($61|0);
  if ($cmp486) {
   HEAP32[((13800 + 8|0))>>2] = $add255;
   STACKTOP = sp;return;
  } else {
   $psize$addr$1 = $add255;
  }
 } else {
  $and495 = $31 & -2;
  HEAP32[$head222>>2] = $and495;
  $or496 = $psize$addr$0 | 1;
  $head497 = (($p$addr$0) + 4|0);
  HEAP32[$head497>>2] = $or496;
  $add$ptr498 = (($p$addr$0) + ($psize$addr$0)|0);
  HEAP32[$add$ptr498>>2] = $psize$addr$0;
  $psize$addr$1 = $psize$addr$0;
 }
 $shr501 = $psize$addr$1 >>> 3;
 $cmp502 = ($psize$addr$1>>>0)<(256);
 if ($cmp502) {
  $shl508 = $shr501 << 1;
  $arrayidx510 = ((13800 + ($shl508<<2)|0) + 40|0);
  $62 = HEAP32[13800>>2]|0;
  $shl513 = 1 << $shr501;
  $and514 = $62 & $shl513;
  $tobool515 = ($and514|0)==(0);
  if ($tobool515) {
   $or519 = $62 | $shl513;
   HEAP32[13800>>2] = $or519;
   $arrayidx510$sum$pre = (($shl508) + 2)|0;
   $$pre = ((13800 + ($arrayidx510$sum$pre<<2)|0) + 40|0);
   $$pre$phiZ2D = $$pre;$F511$0 = $arrayidx510;
  } else {
   $arrayidx510$sum11 = (($shl508) + 2)|0;
   $63 = ((13800 + ($arrayidx510$sum11<<2)|0) + 40|0);
   $64 = HEAP32[$63>>2]|0;
   $65 = HEAP32[((13800 + 16|0))>>2]|0;
   $cmp523 = ($64>>>0)<($65>>>0);
   if ($cmp523) {
    _abort();
    // unreachable;
   } else {
    $$pre$phiZ2D = $63;$F511$0 = $64;
   }
  }
  HEAP32[$$pre$phiZ2D>>2] = $p$addr$0;
  $bk533 = (($F511$0) + 12|0);
  HEAP32[$bk533>>2] = $p$addr$0;
  $fd534 = (($p$addr$0) + 8|0);
  HEAP32[$fd534>>2] = $F511$0;
  $bk535 = (($p$addr$0) + 12|0);
  HEAP32[$bk535>>2] = $arrayidx510;
  STACKTOP = sp;return;
 }
 $shr540 = $psize$addr$1 >>> 8;
 $cmp541 = ($shr540|0)==(0);
 if ($cmp541) {
  $I539$0 = 0;
 } else {
  $cmp545 = ($psize$addr$1>>>0)>(16777215);
  if ($cmp545) {
   $I539$0 = 31;
  } else {
   $sub = (($shr540) + 1048320)|0;
   $shr549 = $sub >>> 16;
   $and550 = $shr549 & 8;
   $shl551 = $shr540 << $and550;
   $sub552 = (($shl551) + 520192)|0;
   $shr553 = $sub552 >>> 16;
   $and554 = $shr553 & 4;
   $add555 = $and554 | $and550;
   $shl556 = $shl551 << $and554;
   $sub557 = (($shl556) + 245760)|0;
   $shr558 = $sub557 >>> 16;
   $and559 = $shr558 & 2;
   $add560 = $add555 | $and559;
   $sub561 = (14 - ($add560))|0;
   $shl562 = $shl556 << $and559;
   $shr563 = $shl562 >>> 15;
   $add564 = (($sub561) + ($shr563))|0;
   $shl565 = $add564 << 1;
   $add566 = (($add564) + 7)|0;
   $shr567 = $psize$addr$1 >>> $add566;
   $and568 = $shr567 & 1;
   $add569 = $and568 | $shl565;
   $I539$0 = $add569;
  }
 }
 $arrayidx573 = ((13800 + ($I539$0<<2)|0) + 304|0);
 $index574 = (($p$addr$0) + 28|0);
 $I539$0$c = $I539$0;
 HEAP32[$index574>>2] = $I539$0$c;
 $arrayidx576 = (($p$addr$0) + 20|0);
 HEAP32[$arrayidx576>>2] = 0;
 $66 = (($p$addr$0) + 16|0);
 HEAP32[$66>>2] = 0;
 $67 = HEAP32[((13800 + 4|0))>>2]|0;
 $shl580 = 1 << $I539$0;
 $and581 = $67 & $shl580;
 $tobool582 = ($and581|0)==(0);
 if ($tobool582) {
  $or586 = $67 | $shl580;
  HEAP32[((13800 + 4|0))>>2] = $or586;
  HEAP32[$arrayidx573>>2] = $p$addr$0;
  $parent587 = (($p$addr$0) + 24|0);
  HEAP32[$parent587>>2] = $arrayidx573;
  $bk588 = (($p$addr$0) + 12|0);
  HEAP32[$bk588>>2] = $p$addr$0;
  $fd589 = (($p$addr$0) + 8|0);
  HEAP32[$fd589>>2] = $p$addr$0;
  STACKTOP = sp;return;
 }
 $68 = HEAP32[$arrayidx573>>2]|0;
 $cmp592 = ($I539$0|0)==(31);
 if ($cmp592) {
  $cond = 0;
 } else {
  $shr594 = $I539$0 >>> 1;
  $sub597 = (25 - ($shr594))|0;
  $cond = $sub597;
 }
 $head59932 = (($68) + 4|0);
 $69 = HEAP32[$head59932>>2]|0;
 $and60033 = $69 & -8;
 $cmp60134 = ($and60033|0)==($psize$addr$1|0);
 L194: do {
  if ($cmp60134) {
   $T$0$lcssa = $68;
  } else {
   $shl598 = $psize$addr$1 << $cond;
   $K591$036 = $shl598;$T$035 = $68;
   while(1) {
    $shr604 = $K591$036 >>> 31;
    $arrayidx607 = ((($T$035) + ($shr604<<2)|0) + 16|0);
    $70 = HEAP32[$arrayidx607>>2]|0;
    $cmp609 = ($70|0)==(0|0);
    if ($cmp609) {
     break;
    }
    $shl608 = $K591$036 << 1;
    $head599 = (($70) + 4|0);
    $71 = HEAP32[$head599>>2]|0;
    $and600 = $71 & -8;
    $cmp601 = ($and600|0)==($psize$addr$1|0);
    if ($cmp601) {
     $T$0$lcssa = $70;
     break L194;
    } else {
     $K591$036 = $shl608;$T$035 = $70;
    }
   }
   $72 = HEAP32[((13800 + 16|0))>>2]|0;
   $cmp614 = ($arrayidx607>>>0)<($72>>>0);
   if ($cmp614) {
    _abort();
    // unreachable;
   }
   HEAP32[$arrayidx607>>2] = $p$addr$0;
   $parent619 = (($p$addr$0) + 24|0);
   HEAP32[$parent619>>2] = $T$035;
   $bk620 = (($p$addr$0) + 12|0);
   HEAP32[$bk620>>2] = $p$addr$0;
   $fd621 = (($p$addr$0) + 8|0);
   HEAP32[$fd621>>2] = $p$addr$0;
   STACKTOP = sp;return;
  }
 } while(0);
 $fd626 = (($T$0$lcssa) + 8|0);
 $73 = HEAP32[$fd626>>2]|0;
 $74 = HEAP32[((13800 + 16|0))>>2]|0;
 $cmp628 = ($T$0$lcssa>>>0)<($74>>>0);
 if ($cmp628) {
  _abort();
  // unreachable;
 }
 $cmp632 = ($73>>>0)<($74>>>0);
 if ($cmp632) {
  _abort();
  // unreachable;
 }
 $bk639 = (($73) + 12|0);
 HEAP32[$bk639>>2] = $p$addr$0;
 HEAP32[$fd626>>2] = $p$addr$0;
 $fd641 = (($p$addr$0) + 8|0);
 HEAP32[$fd641>>2] = $73;
 $bk642 = (($p$addr$0) + 12|0);
 HEAP32[$bk642>>2] = $T$0$lcssa;
 $parent643 = (($p$addr$0) + 24|0);
 HEAP32[$parent643>>2] = 0;
 STACKTOP = sp;return;
}
function _isspace($c) {
 $c = $c|0;
 var $0 = 0, $cmp = 0, $cmp1 = 0, $lor$ext = 0, $sub = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $cmp = ($c|0)==(32);
 if ($cmp) {
  $0 = 1;
 } else {
  $sub = (($c) + -9)|0;
  $cmp1 = ($sub>>>0)<(5);
  $0 = $cmp1;
 }
 $lor$ext = $0&1;
 STACKTOP = sp;return ($lor$ext|0);
}
function _isxdigit($c) {
 $c = $c|0;
 var $0 = 0, $cmp = 0, $isdigit = 0, $isdigittmp = 0, $lor$ext = 0, $or = 0, $sub = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $isdigittmp = (($c) + -48)|0;
 $isdigit = ($isdigittmp>>>0)<(10);
 if ($isdigit) {
  $0 = 1;
 } else {
  $or = $c | 32;
  $sub = (($or) + -97)|0;
  $cmp = ($sub>>>0)<(6);
  $0 = $cmp;
 }
 $lor$ext = $0&1;
 STACKTOP = sp;return ($lor$ext|0);
}
function ___intscan($f,$base,$pok,$0,$1) {
 $f = $f|0;
 $base = $base|0;
 $pok = $pok|0;
 $0 = $0|0;
 $1 = $1|0;
 var $$base = 0, $$base130 = 0, $$sum = 0, $$sum123 = 0, $$sum123150 = 0, $$sum124 = 0, $$sum125 = 0, $$sum126 = 0, $$sum127 = 0, $$sum127167 = 0, $$sum128 = 0, $$sum129 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0;
 var $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0;
 var $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0;
 var $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0;
 var $97 = 0, $98 = 0, $99 = 0, $add = 0, $add249 = 0, $and = 0, $and174 = 0, $arrayidx = 0, $arrayidx175 = 0, $arrayidx178 = 0, $arrayidx178151 = 0, $arrayidx206 = 0, $arrayidx237 = 0, $arrayidx237168 = 0, $arrayidx266 = 0, $arrayidx305 = 0, $arrayidx311 = 0, $arrayidx93 = 0, $base$addr$1 = 0, $base$addr$1134 = 0;
 var $base$addr$1135 = 0, $c$0 = 0, $c$1 = 0, $c$1136 = 0, $c$2$be = 0, $c$2$lcssa = 0, $c$3$be = 0, $c$3$lcssa = 0, $c$3177 = 0, $c$4$be = 0, $c$4$lcssa = 0, $c$5$be = 0, $c$6$be = 0, $c$6$lcssa = 0, $c$7$be = 0, $c$7163 = 0, $c$8 = 0, $c$9$be = 0, $call = 0, $call105 = 0;
 var $call126 = 0, $call160 = 0, $call200 = 0, $call21 = 0, $call231 = 0, $call260 = 0, $call299 = 0, $call3 = 0, $call326 = 0, $call330 = 0, $call347 = 0, $call353 = 0, $call4 = 0, $call42 = 0, $call57 = 0, $cmp = 0, $cmp1 = 0, $cmp108 = 0, $cmp112 = 0, $cmp112184 = 0;
 var $cmp114 = 0, $cmp114$ = 0, $cmp119 = 0, $cmp132 = 0, $cmp132176 = 0, $cmp14 = 0, $cmp153 = 0, $cmp165 = 0, $cmp180 = 0, $cmp180153 = 0, $cmp183 = 0, $cmp183$ = 0, $cmp193 = 0, $cmp208 = 0, $cmp208145 = 0, $cmp224 = 0, $cmp239 = 0, $cmp239170 = 0, $cmp242 = 0, $cmp242$ = 0;
 var $cmp25 = 0, $cmp253 = 0, $cmp268 = 0, $cmp268162 = 0, $cmp292 = 0, $cmp30 = 0, $cmp307 = 0, $cmp313 = 0, $cmp319 = 0, $cmp35 = 0, $cmp45 = 0, $cmp50 = 0, $cmp61 = 0, $cmp7 = 0, $cmp95 = 0, $cond = 0, $cond44 = 0, $cond59 = 0, $conv = 0, $conv124 = 0;
 var $conv158 = 0, $conv176 = 0, $conv179 = 0, $conv179152 = 0, $conv179155 = 0, $conv19 = 0, $conv198 = 0, $conv207 = 0, $conv207144 = 0, $conv229 = 0, $conv238 = 0, $conv238169 = 0, $conv238172 = 0, $conv258 = 0, $conv267 = 0, $conv267161 = 0, $conv297 = 0, $conv306 = 0, $conv312 = 0, $conv324 = 0;
 var $conv40 = 0, $conv55 = 0, $conv94 = 0, $incdec$ptr = 0, $incdec$ptr102 = 0, $incdec$ptr123 = 0, $incdec$ptr157 = 0, $incdec$ptr18 = 0, $incdec$ptr197 = 0, $incdec$ptr228 = 0, $incdec$ptr257 = 0, $incdec$ptr296 = 0, $incdec$ptr323 = 0, $incdec$ptr336 = 0, $incdec$ptr39 = 0, $incdec$ptr54 = 0, $incdec$ptr68 = 0, $incdec$ptr77 = 0, $mul173 = 0, $mul246 = 0;
 var $neg$0 = 0, $or = 0, $or$cond = 0, $or$cond131 = 0, $or$cond132 = 0, $or$cond141 = 0, $or$cond141147 = 0, $or189 = 0, $phitmp207 = 0, $rpos = 0, $shend = 0, $shl = 0, $shr = 0, $sub = 0, $sub111 = 0, $sub111183 = 0, $sub111186 = 0, $sub131 = 0, $sub131$lcssa = 0, $sub131175 = 0;
 var $sub131179 = 0, $sub170 = 0, $tobool = 0, $tobool171 = 0, $tobool333 = 0, $tobool345 = 0, $tobool65 = 0, $tobool71 = 0, $tobool99 = 0, $x$0185 = 0, $x$1154 = 0, $x$2171 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $cmp = ($base>>>0)>(36);
 if ($cmp) {
  $call = (___errno_location()|0);
  HEAP32[$call>>2] = 22;
  $143 = 0;$144 = 0;
  tempRet0 = $143;
  STACKTOP = sp;return ($144|0);
 }
 $rpos = (($f) + 4|0);
 $shend = (($f) + 100|0);
 while(1) {
  $2 = HEAP32[$rpos>>2]|0;
  $3 = HEAP32[$shend>>2]|0;
  $cmp1 = ($2>>>0)<($3>>>0);
  if ($cmp1) {
   $incdec$ptr = (($2) + 1|0);
   HEAP32[$rpos>>2] = $incdec$ptr;
   $4 = HEAP8[$2>>0]|0;
   $conv = $4&255;
   $cond = $conv;
  } else {
   $call3 = (___shgetc($f)|0);
   $cond = $call3;
  }
  $call4 = (_isspace($cond)|0);
  $tobool = ($call4|0)==(0);
  if ($tobool) {
   break;
  }
 }
 $cmp7 = ($cond|0)==(45);
 do {
  if ((($cond|0) == 43) | (($cond|0) == 45)) {
   $sub = $cmp7 << 31 >> 31;
   $5 = HEAP32[$rpos>>2]|0;
   $6 = HEAP32[$shend>>2]|0;
   $cmp14 = ($5>>>0)<($6>>>0);
   if ($cmp14) {
    $incdec$ptr18 = (($5) + 1|0);
    HEAP32[$rpos>>2] = $incdec$ptr18;
    $7 = HEAP8[$5>>0]|0;
    $conv19 = $7&255;
    $c$0 = $conv19;$neg$0 = $sub;
    break;
   } else {
    $call21 = (___shgetc($f)|0);
    $c$0 = $call21;$neg$0 = $sub;
    break;
   }
  } else {
   $c$0 = $cond;$neg$0 = 0;
  }
 } while(0);
 $cmp25 = ($base|0)==(0);
 $8 = $base & -17;
 $9 = ($8|0)==(0);
 $cmp30 = ($c$0|0)==(48);
 $or$cond = $9 & $cmp30;
 do {
  if ($or$cond) {
   $10 = HEAP32[$rpos>>2]|0;
   $11 = HEAP32[$shend>>2]|0;
   $cmp35 = ($10>>>0)<($11>>>0);
   if ($cmp35) {
    $incdec$ptr39 = (($10) + 1|0);
    HEAP32[$rpos>>2] = $incdec$ptr39;
    $12 = HEAP8[$10>>0]|0;
    $conv40 = $12&255;
    $cond44 = $conv40;
   } else {
    $call42 = (___shgetc($f)|0);
    $cond44 = $call42;
   }
   $or = $cond44 | 32;
   $cmp45 = ($or|0)==(120);
   if (!($cmp45)) {
    $$base = $cmp25 ? 8 : $base;
    $base$addr$1 = $$base;$c$1 = $cond44;
    label = 32;
    break;
   }
   $13 = HEAP32[$rpos>>2]|0;
   $14 = HEAP32[$shend>>2]|0;
   $cmp50 = ($13>>>0)<($14>>>0);
   if ($cmp50) {
    $incdec$ptr54 = (($13) + 1|0);
    HEAP32[$rpos>>2] = $incdec$ptr54;
    $15 = HEAP8[$13>>0]|0;
    $conv55 = $15&255;
    $cond59 = $conv55;
   } else {
    $call57 = (___shgetc($f)|0);
    $cond59 = $call57;
   }
   $$sum129 = (($cond59) + 1)|0;
   $arrayidx = (14296 + ($$sum129)|0);
   $16 = HEAP8[$arrayidx>>0]|0;
   $cmp61 = ($16&255)>(15);
   if ($cmp61) {
    $17 = HEAP32[$shend>>2]|0;
    $tobool65 = ($17|0)==(0|0);
    if (!($tobool65)) {
     $18 = HEAP32[$rpos>>2]|0;
     $incdec$ptr68 = (($18) + -1|0);
     HEAP32[$rpos>>2] = $incdec$ptr68;
    }
    $tobool71 = ($pok|0)==(0);
    if ($tobool71) {
     ___shlim($f,0);
     $143 = 0;$144 = 0;
     tempRet0 = $143;
     STACKTOP = sp;return ($144|0);
    }
    if ($tobool65) {
     $143 = 0;$144 = 0;
     tempRet0 = $143;
     STACKTOP = sp;return ($144|0);
    }
    $19 = HEAP32[$rpos>>2]|0;
    $incdec$ptr77 = (($19) + -1|0);
    HEAP32[$rpos>>2] = $incdec$ptr77;
    $143 = 0;$144 = 0;
    tempRet0 = $143;
    STACKTOP = sp;return ($144|0);
   } else {
    $base$addr$1135 = 16;$c$1136 = $cond59;
    label = 47;
   }
  } else {
   $$base130 = $cmp25 ? 10 : $base;
   $$sum = (($c$0) + 1)|0;
   $arrayidx93 = (14296 + ($$sum)|0);
   $20 = HEAP8[$arrayidx93>>0]|0;
   $conv94 = $20&255;
   $cmp95 = ($conv94>>>0)<($$base130>>>0);
   if ($cmp95) {
    $base$addr$1 = $$base130;$c$1 = $c$0;
    label = 32;
   } else {
    $21 = HEAP32[$shend>>2]|0;
    $tobool99 = ($21|0)==(0|0);
    if (!($tobool99)) {
     $22 = HEAP32[$rpos>>2]|0;
     $incdec$ptr102 = (($22) + -1|0);
     HEAP32[$rpos>>2] = $incdec$ptr102;
    }
    ___shlim($f,0);
    $call105 = (___errno_location()|0);
    HEAP32[$call105>>2] = 22;
    $143 = 0;$144 = 0;
    tempRet0 = $143;
    STACKTOP = sp;return ($144|0);
   }
  }
 } while(0);
 if ((label|0) == 32) {
  $cmp108 = ($base$addr$1|0)==(10);
  if ($cmp108) {
   $sub111183 = (($c$1) + -48)|0;
   $cmp112184 = ($sub111183>>>0)<(10);
   if ($cmp112184) {
    $sub111186 = $sub111183;$x$0185 = 0;
    while(1) {
     $add = (($x$0185) + ($sub111186))|0;
     $23 = HEAP32[$rpos>>2]|0;
     $24 = HEAP32[$shend>>2]|0;
     $cmp119 = ($23>>>0)<($24>>>0);
     if ($cmp119) {
      $incdec$ptr123 = (($23) + 1|0);
      HEAP32[$rpos>>2] = $incdec$ptr123;
      $25 = HEAP8[$23>>0]|0;
      $conv124 = $25&255;
      $c$2$be = $conv124;
     } else {
      $call126 = (___shgetc($f)|0);
      $c$2$be = $call126;
     }
     $sub111 = (($c$2$be) + -48)|0;
     $cmp112 = ($sub111>>>0)<(10);
     $cmp114 = ($add>>>0)<(429496729);
     $cmp114$ = $cmp112 & $cmp114;
     if (!($cmp114$)) {
      break;
     }
     $phitmp207 = ($add*10)|0;
     $sub111186 = $sub111;$x$0185 = $phitmp207;
    }
    $145 = $add;$146 = 0;$c$2$lcssa = $c$2$be;
   } else {
    $145 = 0;$146 = 0;$c$2$lcssa = $c$1;
   }
   $sub131175 = (($c$2$lcssa) + -48)|0;
   $cmp132176 = ($sub131175>>>0)<(10);
   if ($cmp132176) {
    $26 = $145;$27 = $146;$c$3177 = $c$2$lcssa;$sub131179 = $sub131175;
    while(1) {
     $28 = (___muldi3(($26|0),($27|0),10,0)|0);
     $29 = tempRet0;
     $30 = ($sub131179|0)<(0);
     $31 = $30 << 31 >> 31;
     $32 = $sub131179 ^ -1;
     $33 = $31 ^ -1;
     $34 = ($29>>>0)>($33>>>0);
     $35 = ($29|0)==($33|0);
     $36 = ($28>>>0)>($32>>>0);
     $37 = $35 & $36;
     $38 = $34 | $37;
     if ($38) {
      $147 = $26;$148 = $27;$c$3$lcssa = $c$3177;$sub131$lcssa = $sub131179;
      break;
     }
     $39 = (_i64Add(($28|0),($29|0),($sub131179|0),($31|0))|0);
     $40 = tempRet0;
     $41 = HEAP32[$rpos>>2]|0;
     $42 = HEAP32[$shend>>2]|0;
     $cmp153 = ($41>>>0)<($42>>>0);
     if ($cmp153) {
      $incdec$ptr157 = (($41) + 1|0);
      HEAP32[$rpos>>2] = $incdec$ptr157;
      $43 = HEAP8[$41>>0]|0;
      $conv158 = $43&255;
      $c$3$be = $conv158;
     } else {
      $call160 = (___shgetc($f)|0);
      $c$3$be = $call160;
     }
     $sub131 = (($c$3$be) + -48)|0;
     $cmp132 = ($sub131>>>0)<(10);
     $44 = ($40>>>0)<(429496729);
     $45 = ($40|0)==(429496729);
     $46 = ($39>>>0)<(2576980378);
     $47 = $45 & $46;
     $48 = $44 | $47;
     $or$cond131 = $cmp132 & $48;
     if ($or$cond131) {
      $26 = $39;$27 = $40;$c$3177 = $c$3$be;$sub131179 = $sub131;
     } else {
      $147 = $39;$148 = $40;$c$3$lcssa = $c$3$be;$sub131$lcssa = $sub131;
      break;
     }
    }
    $cmp165 = ($sub131$lcssa>>>0)>(9);
    if ($cmp165) {
     $120 = $148;$123 = $147;
    } else {
     $149 = $147;$150 = $148;$base$addr$1134 = 10;$c$8 = $c$3$lcssa;
     label = 73;
    }
   } else {
    $120 = $146;$123 = $145;
   }
  } else {
   $base$addr$1135 = $base$addr$1;$c$1136 = $c$1;
   label = 47;
  }
 }
 L70: do {
  if ((label|0) == 47) {
   $sub170 = (($base$addr$1135) + -1)|0;
   $and = $sub170 & $base$addr$1135;
   $tobool171 = ($and|0)==(0);
   if ($tobool171) {
    $mul173 = ($base$addr$1135*23)|0;
    $shr = $mul173 >>> 5;
    $and174 = $shr & 7;
    $arrayidx175 = (14560 + ($and174)|0);
    $50 = HEAP8[$arrayidx175>>0]|0;
    $conv176 = $50 << 24 >> 24;
    $$sum123150 = (($c$1136) + 1)|0;
    $arrayidx178151 = (14296 + ($$sum123150)|0);
    $51 = HEAP8[$arrayidx178151>>0]|0;
    $conv179152 = $51&255;
    $cmp180153 = ($conv179152>>>0)<($base$addr$1135>>>0);
    if ($cmp180153) {
     $conv179155 = $conv179152;$x$1154 = 0;
     while(1) {
      $shl = $x$1154 << $conv176;
      $or189 = $conv179155 | $shl;
      $52 = HEAP32[$rpos>>2]|0;
      $53 = HEAP32[$shend>>2]|0;
      $cmp193 = ($52>>>0)<($53>>>0);
      if ($cmp193) {
       $incdec$ptr197 = (($52) + 1|0);
       HEAP32[$rpos>>2] = $incdec$ptr197;
       $54 = HEAP8[$52>>0]|0;
       $conv198 = $54&255;
       $c$4$be = $conv198;
      } else {
       $call200 = (___shgetc($f)|0);
       $c$4$be = $call200;
      }
      $$sum123 = (($c$4$be) + 1)|0;
      $arrayidx178 = (14296 + ($$sum123)|0);
      $55 = HEAP8[$arrayidx178>>0]|0;
      $conv179 = $55&255;
      $cmp180 = ($conv179>>>0)<($base$addr$1135>>>0);
      $cmp183 = ($or189>>>0)<(134217728);
      $cmp183$ = $cmp180 & $cmp183;
      if ($cmp183$) {
       $conv179155 = $conv179;$x$1154 = $or189;
      } else {
       break;
      }
     }
     $58 = $55;$60 = 0;$63 = $or189;$c$4$lcssa = $c$4$be;
    } else {
     $58 = $51;$60 = 0;$63 = 0;$c$4$lcssa = $c$1136;
    }
    $56 = (_bitshift64Lshr(-1,-1,($conv176|0))|0);
    $57 = tempRet0;
    $conv207144 = $58&255;
    $cmp208145 = ($conv207144>>>0)>=($base$addr$1135>>>0);
    $59 = ($60>>>0)>($57>>>0);
    $61 = ($60|0)==($57|0);
    $62 = ($63>>>0)>($56>>>0);
    $64 = $61 & $62;
    $65 = $59 | $64;
    $or$cond141147 = $cmp208145 | $65;
    if ($or$cond141147) {
     $149 = $63;$150 = $60;$base$addr$1134 = $base$addr$1135;$c$8 = $c$4$lcssa;
     label = 73;
     break;
    } else {
     $66 = $63;$67 = $60;$71 = $58;
    }
    while(1) {
     $68 = (_bitshift64Shl(($66|0),($67|0),($conv176|0))|0);
     $69 = tempRet0;
     $70 = $71&255;
     $72 = $70 | $68;
     $73 = HEAP32[$rpos>>2]|0;
     $74 = HEAP32[$shend>>2]|0;
     $cmp224 = ($73>>>0)<($74>>>0);
     if ($cmp224) {
      $incdec$ptr228 = (($73) + 1|0);
      HEAP32[$rpos>>2] = $incdec$ptr228;
      $75 = HEAP8[$73>>0]|0;
      $conv229 = $75&255;
      $c$5$be = $conv229;
     } else {
      $call231 = (___shgetc($f)|0);
      $c$5$be = $call231;
     }
     $$sum124 = (($c$5$be) + 1)|0;
     $arrayidx206 = (14296 + ($$sum124)|0);
     $76 = HEAP8[$arrayidx206>>0]|0;
     $conv207 = $76&255;
     $cmp208 = ($conv207>>>0)>=($base$addr$1135>>>0);
     $77 = ($69>>>0)>($57>>>0);
     $78 = ($69|0)==($57|0);
     $79 = ($72>>>0)>($56>>>0);
     $80 = $78 & $79;
     $81 = $77 | $80;
     $or$cond141 = $cmp208 | $81;
     if ($or$cond141) {
      $149 = $72;$150 = $69;$base$addr$1134 = $base$addr$1135;$c$8 = $c$5$be;
      label = 73;
      break L70;
     } else {
      $66 = $72;$67 = $69;$71 = $76;
     }
    }
   }
   $$sum127167 = (($c$1136) + 1)|0;
   $arrayidx237168 = (14296 + ($$sum127167)|0);
   $49 = HEAP8[$arrayidx237168>>0]|0;
   $conv238169 = $49&255;
   $cmp239170 = ($conv238169>>>0)<($base$addr$1135>>>0);
   if ($cmp239170) {
    $conv238172 = $conv238169;$x$2171 = 0;
    while(1) {
     $mul246 = Math_imul($x$2171, $base$addr$1135)|0;
     $add249 = (($conv238172) + ($mul246))|0;
     $82 = HEAP32[$rpos>>2]|0;
     $83 = HEAP32[$shend>>2]|0;
     $cmp253 = ($82>>>0)<($83>>>0);
     if ($cmp253) {
      $incdec$ptr257 = (($82) + 1|0);
      HEAP32[$rpos>>2] = $incdec$ptr257;
      $84 = HEAP8[$82>>0]|0;
      $conv258 = $84&255;
      $c$6$be = $conv258;
     } else {
      $call260 = (___shgetc($f)|0);
      $c$6$be = $call260;
     }
     $$sum127 = (($c$6$be) + 1)|0;
     $arrayidx237 = (14296 + ($$sum127)|0);
     $85 = HEAP8[$arrayidx237>>0]|0;
     $conv238 = $85&255;
     $cmp239 = ($conv238>>>0)<($base$addr$1135>>>0);
     $cmp242 = ($add249>>>0)<(119304647);
     $cmp242$ = $cmp239 & $cmp242;
     if ($cmp242$) {
      $conv238172 = $conv238;$x$2171 = $add249;
     } else {
      break;
     }
    }
    $151 = $add249;$152 = 0;$86 = $85;$c$6$lcssa = $c$6$be;
   } else {
    $151 = 0;$152 = 0;$86 = $49;$c$6$lcssa = $c$1136;
   }
   $conv267161 = $86&255;
   $cmp268162 = ($conv267161>>>0)<($base$addr$1135>>>0);
   if ($cmp268162) {
    $87 = (___udivdi3(-1,-1,($base$addr$1135|0),0)|0);
    $88 = tempRet0;
    $90 = $152;$93 = $151;$99 = $86;$c$7163 = $c$6$lcssa;
    while(1) {
     $89 = ($90>>>0)>($88>>>0);
     $91 = ($90|0)==($88|0);
     $92 = ($93>>>0)>($87>>>0);
     $94 = $91 & $92;
     $95 = $89 | $94;
     if ($95) {
      $149 = $93;$150 = $90;$base$addr$1134 = $base$addr$1135;$c$8 = $c$7163;
      label = 73;
      break L70;
     }
     $96 = (___muldi3(($93|0),($90|0),($base$addr$1135|0),0)|0);
     $97 = tempRet0;
     $98 = $99&255;
     $100 = $98 ^ -1;
     $101 = ($97>>>0)>(4294967295);
     $102 = ($97|0)==(-1);
     $103 = ($96>>>0)>($100>>>0);
     $104 = $102 & $103;
     $105 = $101 | $104;
     if ($105) {
      $149 = $93;$150 = $90;$base$addr$1134 = $base$addr$1135;$c$8 = $c$7163;
      label = 73;
      break L70;
     }
     $106 = (_i64Add(($98|0),0,($96|0),($97|0))|0);
     $107 = tempRet0;
     $108 = HEAP32[$rpos>>2]|0;
     $109 = HEAP32[$shend>>2]|0;
     $cmp292 = ($108>>>0)<($109>>>0);
     if ($cmp292) {
      $incdec$ptr296 = (($108) + 1|0);
      HEAP32[$rpos>>2] = $incdec$ptr296;
      $110 = HEAP8[$108>>0]|0;
      $conv297 = $110&255;
      $c$7$be = $conv297;
     } else {
      $call299 = (___shgetc($f)|0);
      $c$7$be = $call299;
     }
     $$sum128 = (($c$7$be) + 1)|0;
     $arrayidx266 = (14296 + ($$sum128)|0);
     $111 = HEAP8[$arrayidx266>>0]|0;
     $conv267 = $111&255;
     $cmp268 = ($conv267>>>0)<($base$addr$1135>>>0);
     if ($cmp268) {
      $90 = $107;$93 = $106;$99 = $111;$c$7163 = $c$7$be;
     } else {
      $149 = $106;$150 = $107;$base$addr$1134 = $base$addr$1135;$c$8 = $c$7$be;
      label = 73;
      break;
     }
    }
   } else {
    $149 = $151;$150 = $152;$base$addr$1134 = $base$addr$1135;$c$8 = $c$6$lcssa;
    label = 73;
   }
  }
 } while(0);
 if ((label|0) == 73) {
  $$sum125 = (($c$8) + 1)|0;
  $arrayidx305 = (14296 + ($$sum125)|0);
  $112 = HEAP8[$arrayidx305>>0]|0;
  $conv306 = $112&255;
  $cmp307 = ($conv306>>>0)<($base$addr$1134>>>0);
  if ($cmp307) {
   while(1) {
    $113 = HEAP32[$rpos>>2]|0;
    $114 = HEAP32[$shend>>2]|0;
    $cmp319 = ($113>>>0)<($114>>>0);
    if ($cmp319) {
     $incdec$ptr323 = (($113) + 1|0);
     HEAP32[$rpos>>2] = $incdec$ptr323;
     $115 = HEAP8[$113>>0]|0;
     $conv324 = $115&255;
     $c$9$be = $conv324;
    } else {
     $call326 = (___shgetc($f)|0);
     $c$9$be = $call326;
    }
    $$sum126 = (($c$9$be) + 1)|0;
    $arrayidx311 = (14296 + ($$sum126)|0);
    $116 = HEAP8[$arrayidx311>>0]|0;
    $conv312 = $116&255;
    $cmp313 = ($conv312>>>0)<($base$addr$1134>>>0);
    if (!($cmp313)) {
     break;
    }
   }
   $call330 = (___errno_location()|0);
   HEAP32[$call330>>2] = 34;
   $120 = $1;$123 = $0;
  } else {
   $120 = $150;$123 = $149;
  }
 }
 $117 = HEAP32[$shend>>2]|0;
 $tobool333 = ($117|0)==(0|0);
 if (!($tobool333)) {
  $118 = HEAP32[$rpos>>2]|0;
  $incdec$ptr336 = (($118) + -1|0);
  HEAP32[$rpos>>2] = $incdec$ptr336;
 }
 $119 = ($120>>>0)<($1>>>0);
 $121 = ($120|0)==($1|0);
 $122 = ($123>>>0)<($0>>>0);
 $124 = $121 & $122;
 $125 = $119 | $124;
 if (!($125)) {
  $126 = $0 & 1;
  $127 = ($126|0)==(0);
  $128 = (0)==(0);
  $129 = $127 & $128;
  $tobool345 = ($neg$0|0)==(0);
  $or$cond132 = $129 & $tobool345;
  if ($or$cond132) {
   $call347 = (___errno_location()|0);
   HEAP32[$call347>>2] = 34;
   $130 = (_i64Add(($0|0),($1|0),-1,-1)|0);
   $131 = tempRet0;
   $143 = $131;$144 = $130;
   tempRet0 = $143;
   STACKTOP = sp;return ($144|0);
  }
  $132 = ($120>>>0)>($1>>>0);
  $133 = ($120|0)==($1|0);
  $134 = ($123>>>0)>($0>>>0);
  $135 = $133 & $134;
  $136 = $132 | $135;
  if ($136) {
   $call353 = (___errno_location()|0);
   HEAP32[$call353>>2] = 34;
   $143 = $1;$144 = $0;
   tempRet0 = $143;
   STACKTOP = sp;return ($144|0);
  }
 }
 $137 = ($neg$0|0)<(0);
 $138 = $137 << 31 >> 31;
 $139 = $123 ^ $neg$0;
 $140 = $120 ^ $138;
 $141 = (_i64Subtract(($139|0),($140|0),($neg$0|0),($138|0))|0);
 $142 = tempRet0;
 $143 = $142;$144 = $141;
 tempRet0 = $143;
 STACKTOP = sp;return ($144|0);
}
function ___floatscan($f,$prec,$pok) {
 $f = $f|0;
 $prec = $prec|0;
 $pok = $pok|0;
 var $$$i = 0, $$conv229$i = 0, $$inc66$i = 0, $$pre$i = 0, $$sub482$i = 0, $$y$3$i = 0.0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0;
 var $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0;
 var $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0;
 var $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0;
 var $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0;
 var $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0;
 var $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0;
 var $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0;
 var $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0;
 var $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0;
 var $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0;
 var $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0;
 var $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0;
 var $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $a$0$lcssa376$i = 0, $a$0298$i = 0, $a$1$i = 0, $a$2$ph249$i = 0, $a$3$i = 0, $a$3$i$ph = 0, $a$3$ph$i = 0, $a$4238$i = 0, $a$5$i = 0, $add210115$i = 0;
 var $add214$i = 0, $add252$i = 0, $add256$i = 0.0, $add259$i = 0.0, $add265$i = 0, $add275$i = 0, $add287$i = 0, $add344$i = 0, $add368$i = 0, $add401$i = 0, $add414$i = 0, $add424$i = 0, $add435$i = 0, $add455$1$i = 0, $add460$1$i = 0, $add470$1$i = 0.0, $add476$i = 0, $add499$i = 0.0, $add501$i = 0, $add516$i = 0;
 var $add523$i = 0.0, $add530$i = 0.0, $add536$i = 0, $add543$i = 0.0, $add547$i = 0.0, $add562$i = 0.0, $add59$i = 0, $add73$i = 0, $add80$i = 0.0, $add86$i = 0.0, $and$i = 0, $and$i112 = 0, $and323$us$i = 0, $and323$us282$i = 0, $and346$i = 0, $and351$i = 0, $and354$i = 0, $and369$i = 0, $and411$i = 0, $and425$i = 0;
 var $and436$i = 0, $and445$i = 0, $and456$1$i = 0, $and456$i = 0, $and461$1$i = 0, $and502$i = 0, $and517$i = 0, $and537$i = 0, $and565$i = 0, $arrayidx = 0, $arrayidx186$i = 0, $arrayidx186$promoted$i = 0, $arrayidx219$i = 0, $arrayidx239$i = 0, $arrayidx256$i = 0, $arrayidx261$i = 0, $arrayidx284$i = 0, $arrayidx294$i = 0, $arrayidx306$us$i = 0, $arrayidx306$us266$i = 0;
 var $arrayidx352$i = 0, $arrayidx355$i = 0, $arrayidx358$i = 0, $arrayidx373$i = 0, $arrayidx374$i = 0, $arrayidx408$i = 0, $arrayidx440$i = 0, $arrayidx446$i = 0, $arrayidx463$1$i = 0, $arrayidx463$i = 0, $arrayidx468$1$i = 0, $arrayidx468$i = 0, $arrayidx509$i = 0, $arrayidx64$i = 0, $arrayidx77$i = 0, $arrayidx95 = 0, $bias$0$i = 0.0, $bias$096$i = 0.0, $bits$0$ph = 0, $bits$addr$0$i = 0;
 var $bits$addr$0$i114 = 0, $brmerge = 0, $brmerge176 = 0, $c$0 = 0, $c$0$i = 0, $c$1$lcssa = 0, $c$1$ph$i = 0, $c$1154 = 0, $c$2 = 0, $c$2$i = 0, $c$2$lcssa$i = 0, $c$3150 = 0, $c$4 = 0, $c$5 = 0, $c$6 = 0, $c$addr$0$i = 0, $c$addr$1$be$i = 0, $c$addr$1$ph$i = 0, $c$addr$2$i = 0, $c$addr$3$be$i = 0;
 var $c$addr$3$lcssa$i = 0, $c$addr$3320$i = 0, $c$addr$3332$i = 0, $call = 0, $call$i = 0, $call$i90 = 0, $call101$i = 0, $call113 = 0, $call13$i = 0, $call133 = 0, $call135$i = 0, $call15$i = 0, $call157 = 0, $call165$i = 0, $call175$i = 0, $call187$i = 0, $call189 = 0, $call197$i = 0, $call215 = 0, $call229 = 0;
 var $call23 = 0, $call240$i = 0.0, $call242$i = 0.0, $call263$i = 0, $call266$i = 0.0, $call27$i = 0, $call32$i = 0, $call43 = 0, $call44$i = 0, $call493$i = 0.0, $call494$i = 0.0, $call496$i = 0.0, $call497$i = 0.0, $call556$i = 0.0, $call570$i = 0.0, $call593$i = 0, $call596$i = 0.0, $call6 = 0, $call91$i = 0, $carry$0300$i = 0;
 var $carry299$0$us$i = 0, $carry299$0$us264$i = 0, $carry299$1$lcssa$lcssa$i = 0, $carry299$1$us$i = 0, $carry299$1$us280$i = 0, $carry362$0241$i = 0, $cmp = 0, $cmp$i = 0, $cmp100$i = 0, $cmp101 = 0, $cmp106 = 0, $cmp121$i = 0, $cmp126 = 0, $cmp136 = 0, $cmp146$i = 0, $cmp149$i = 0, $cmp150 = 0, $cmp152$i = 0, $cmp16 = 0, $cmp161 = 0;
 var $cmp165 = 0, $cmp169 = 0, $cmp172 = 0, $cmp176 = 0, $cmp183304$i = 0, $cmp19$i = 0, $cmp19343$i = 0, $cmp194$i109 = 0, $cmp197$i = 0, $cmp2$i = 0, $cmp20$i = 0, $cmp200$i = 0, $cmp203$i = 0, $cmp203$i110 = 0, $cmp20397$i = 0, $cmp206$i = 0, $cmp211$i = 0, $cmp217 = 0, $cmp222 = 0, $cmp226$i = 0;
 var $cmp230$i = 0, $cmp231$i = 0, $cmp233 = 0, $cmp235$i = 0, $cmp244$i = 0, $cmp246$i = 0, $cmp25$i = 0, $cmp258$i = 0, $cmp258296$i = 0, $cmp26 = 0, $cmp269$i = 0, $cmp289$i = 0, $cmp29 = 0, $cmp292$i = 0, $cmp295$us257$i = 0, $cmp31 = 0, $cmp31$i = 0, $cmp31107$i = 0, $cmp324$us$i = 0, $cmp324$us283$i = 0;
 var $cmp327$us$i = 0, $cmp327$us284$i = 0, $cmp347$i = 0, $cmp36 = 0, $cmp365$i = 0, $cmp37$i = 0, $cmp370$i = 0, $cmp375$i = 0, $cmp38$i = 0, $cmp383$i = 0, $cmp38322$i = 0, $cmp390$i = 0, $cmp393$i = 0, $cmp397$i = 0, $cmp40$i = 0, $cmp403$i = 0, $cmp40323$i = 0, $cmp403236$i = 0, $cmp40334$i = 0, $cmp418$i = 0;
 var $cmp437$i = 0, $cmp457$1$i = 0, $cmp457$i = 0, $cmp478$i = 0, $cmp48$i = 0, $cmp483$i = 0, $cmp488$i = 0, $cmp49$i = 0, $cmp503$i = 0, $cmp51$i = 0, $cmp510$i = 0, $cmp518$i = 0, $cmp52$i = 0, $cmp525$i = 0, $cmp53 = 0, $cmp538$i = 0, $cmp54$i = 0, $cmp553$i = 0, $cmp567$i = 0, $cmp57 = 0;
 var $cmp571$i = 0, $cmp578$i = 0, $cmp586$i = 0, $cmp6$i = 0, $cmp62$i = 0, $cmp67$i = 0, $cmp70 = 0, $cmp8$i = 0, $cmp84$i = 0, $cmp9 = 0, $cmp91 = 0, $cmp94$i = 0, $cmp97 = 0, $cond = 0, $cond$i = 0, $cond135 = 0, $cond159 = 0, $cond231 = 0, $cond254$i = 0, $cond46$i = 0;
 var $conv = 0, $conv$i = 0, $conv$i88 = 0, $conv11$i = 0, $conv111 = 0, $conv12 = 0, $conv13$i = 0, $conv131 = 0, $conv135$i = 0.0, $conv140$i = 0.0, $conv155 = 0, $conv155$i = 0.0, $conv157$i = 0.0, $conv166$i = 0.0, $conv176$i = 0.0, $conv179$i = 0.0, $conv188$i = 0.0, $conv198$i = 0.0, $conv206$i = 0.0, $conv208$i = 0.0;
 var $conv21 = 0, $conv214$i = 0.0, $conv216$i = 0.0, $conv220$i = 0.0, $conv227 = 0, $conv234$i = 0.0, $conv236$i = 0.0, $conv240$i = 0.0, $conv241$i = 0.0, $conv25$i = 0, $conv253$pre$i = 0.0, $conv253$pre$phi$iZ2D = 0.0, $conv254$i = 0.0, $conv28 = 0, $conv30$i = 0, $conv41 = 0, $conv42$i = 0, $conv469$1$i = 0.0, $conv469$i = 0.0, $conv474$i = 0.0;
 var $conv54$lnz$0$i = 0, $conv78$i = 0.0, $conv84 = 0.0, $conv86 = 0.0, $conv89$i = 0, $conv96 = 0, $conv99$i = 0, $d$0$i = 0, $dec = 0, $dec192124 = 0, $dec192124$in = 0, $denormal$0$i = 0, $denormal$1$i = 0, $denormal$2$i = 0, $div$i = 0.0, $div$i107 = 0, $div221$i = 0.0, $div264$i = 0, $div267$i = 0, $e2$0$ph$i = 0;
 var $e2$0$us$i = 0, $e2$0$us253$i = 0, $e2$1$i = 0, $e2$1$i$ph = 0, $e2$1$ph$i = 0, $e2$2$i = 0, $e2$3$i = 0, $emin$0$ph = 0, $exitcond$i = 0, $frac$0$i = 0.0, $frac$1$i = 0.0, $frac$2$i = 0.0, $gotdig$0$i = 0, $gotdig$0$i84 = 0, $gotdig$2$i = 0, $gotdig$2$i94 = 0, $gotdig$3$i = 0, $gotdig$3$lcssa$i = 0, $gotdig$3313$i = 0, $gotdig$3328$i = 0;
 var $gotdig$4$i = 0, $gotrad$0$i = 0, $gotrad$0$i95 = 0, $gotrad$1$i = 0, $gotrad$1$lcssa$i = 0, $gotrad$1329$i = 0, $gotrad$2$i = 0, $gottail$0$i = 0, $gottail$1$i = 0, $gottail$2$i = 0, $i$0$lcssa = 0, $i$0153 = 0, $i$0235$i = 0, $i$1$i = 0, $i$1152 = 0, $i$2149 = 0, $i$3 = 0, $i$4 = 0, $inc = 0, $inc118 = 0;
 var $inc189$i = 0, $inc191$i = 0, $inc204 = 0, $inc251$x$4$i = 0, $inc283$i = 0, $inc388$i = 0, $inc559$i = 0.0, $inc583$i = 0, $inc66$i = 0, $inc70$i = 0, $inc70$k$0$i = 0, $incdec$ptr = 0, $incdec$ptr$i = 0, $incdec$ptr$i87 = 0, $incdec$ptr10$i = 0, $incdec$ptr110 = 0, $incdec$ptr111$i = 0, $incdec$ptr113$i = 0, $incdec$ptr12$i = 0, $incdec$ptr120$i = 0;
 var $incdec$ptr128$i = 0, $incdec$ptr129$i = 0, $incdec$ptr130 = 0, $incdec$ptr143 = 0, $incdec$ptr154 = 0, $incdec$ptr159$i = 0, $incdec$ptr170$i = 0, $incdec$ptr184 = 0, $incdec$ptr199 = 0, $incdec$ptr20 = 0, $incdec$ptr212 = 0, $incdec$ptr226 = 0, $incdec$ptr24$i = 0, $incdec$ptr242 = 0, $incdec$ptr29$i = 0, $incdec$ptr40 = 0, $incdec$ptr41$i = 0, $incdec$ptr64 = 0, $incdec$ptr77 = 0, $incdec$ptr88$i = 0;
 var $incdec$ptr98$i = 0, $j$0$lcssa$i = 0, $j$0318$i = 0, $j$0331$i = 0, $j$2$i = 0, $j$3305$i = 0, $k$0$lcssa$i = 0, $k$0316$i = 0, $k$0330$i = 0, $k$2$i = 0, $k$3$i = 0, $k$4299$i = 0, $k$5$in$us$i = 0, $k$5$in$us263$i = 0, $k$5$us$i = 0, $k$5$us265$i = 0, $k$5$z$2$us$i = 0, $k$5$z$2$us288$i = 0, $k$6239$i = 0, $lnz$0$lcssa$i = 0;
 var $lnz$0311$i = 0, $lnz$0327$i = 0, $lnz$2$i = 0, $mul = 0, $mul$i = 0, $mul$i98 = 0, $mul136$i = 0.0, $mul141$i = 0.0, $mul143$i = 0, $mul158$i = 0.0, $mul167$i = 0.0, $mul168$i = 0.0, $mul177$i = 0.0, $mul178$i = 0.0, $mul180$i = 0.0, $mul187$i = 0, $mul187306$i = 0, $mul189$i = 0.0, $mul190$i = 0.0, $mul199$i = 0.0;
 var $mul200$i = 0.0, $mul209$i = 0.0, $mul217$i = 0.0, $mul224$neg$i = 0, $mul237$i = 0.0, $mul241$i = 0.0, $mul255$i = 0.0, $mul258$i = 0.0, $mul268$i = 0, $mul417$i = 0, $mul465$1$i = 0.0, $mul475$i = 0.0, $mul522$i = 0.0, $mul529$i = 0.0, $mul542$i = 0.0, $mul546$i = 0.0, $mul582$i = 0.0, $mul79$i = 0.0, $mul85 = 0.0, $mul85$i = 0.0;
 var $notlhs = 0, $notrhs = 0, $or = 0, $or$cond = 0, $or$cond$i = 0, $or$cond$i104 = 0, $or$cond1$i = 0, $or$cond175$not = 0, $or$cond2 = 0, $or$cond2$i = 0, $or$cond223$i = 0, $or$cond224$us$i = 0, $or$cond224$us285$i = 0, $or$cond225$i = 0, $or$cond226$i = 0, $or$cond227$i = 0, $or$cond228$i = 0, $or$cond2324$i = 0, $or$cond81 = 0, $or$cond89$i = 0;
 var $or$cond90$i = 0, $or$i = 0, $or$i99 = 0, $or145$i = 0, $or232 = 0, $or356$i = 0, $or447$i = 0, $or94 = 0, $or99$i = 0, $rem$i = 0, $rem262$i = 0, $rem315$sink$off0$us$i = 0, $rem315$sink$off0$us279$i = 0, $retval$0 = 0.0, $rp$0$lcssa377$i = 0, $rp$0297$i = 0, $rp$1$i113 = 0, $rp$2$ph247$i = 0, $rp$3$i$ph = 0, $rp$3$ph244$i = 0;
 var $rp$4237$i = 0, $rp$5$i = 0, $rpos = 0, $scale$0$i = 0.0, $scale$1$i = 0.0, $scale$2$i = 0.0, $shend = 0, $shl409$i = 0, $shr$i = 0, $shr230$i = 0, $shr413$i = 0, $shr416$i = 0, $sign$0 = 0, $storemerge$i = 0, $sub$i = 0, $sub1$i = 0, $sub13 = 0, $sub160 = 0, $sub164 = 0, $sub168 = 0;
 var $sub170$i = 0, $sub182$i = 0, $sub192$i = 0, $sub211$i = 0.0, $sub211$pn$i = 0.0, $sub218$i = 0, $sub225$i = 0, $sub238$i = 0, $sub239$i = 0, $sub255$i = 0, $sub260$i = 0.0, $sub276$i = 0, $sub286$i = 0, $sub300$lcssa$i = 0, $sub300$us$i = 0, $sub300$us259$i = 0, $sub301$us$i = 0, $sub301$us260$i = 0, $sub322$us$i = 0, $sub322$us281$i = 0;
 var $sub339$us$i = 0, $sub339$us291$i = 0, $sub345$i = 0, $sub350$i = 0, $sub353$i = 0, $sub37$i = 0, $sub37321$i = 0, $sub37333$i = 0, $sub410$i = 0, $sub427$i = 0, $sub444$i = 0, $sub462$1$i = 0, $sub462$i = 0, $sub477$i = 0, $sub492$i = 0, $sub495$i = 0, $sub498$i = 0.0, $sub51$i = 0, $sub552$i = 0, $sub563$i = 0.0;
 var $sub566$i = 0, $sub60$i = 0, $sub66$i = 0, $sub66$sub$i = 0, $sum$i = 0, $tobool = 0, $tobool$i = 0, $tobool105$i = 0, $tobool108$i = 0, $tobool110$i = 0, $tobool123$i = 0, $tobool125$i = 0, $tobool138$i = 0, $tobool138$i102 = 0, $tobool140 = 0, $tobool156$i = 0, $tobool167$i = 0, $tobool177$i = 0, $tobool180$i = 0, $tobool181 = 0;
 var $tobool193 = 0, $tobool193123 = 0, $tobool209 = 0, $tobool239 = 0, $tobool244$i = 0, $tobool247$i = 0, $tobool249$i = 0, $tobool261$i = 0, $tobool273$i = 0, $tobool281$i = 0, $tobool331$us$i = 0, $tobool331$us287$i = 0, $tobool342$us$i = 0, $tobool342$us295$i = 0, $tobool422$i = 0, $tobool433$i = 0, $tobool513$i = 0, $tobool55 = 0, $tobool557$i = 0, $tobool56$i = 0;
 var $tobool574$i = 0, $tobool589$i = 0, $tobool591$i = 0, $tobool61 = 0, $tobool82$i = 0, $tobool83$i = 0, $tobool88 = 0, $tobool95$i = 0, $tobool98$i = 0, $x$0$i = 0, $x$1$i = 0, $x$2$i = 0, $x$3$lcssa$i = 0, $x$3104$i = 0, $x$4$lcssa$i = 0, $x$498$i = 0, $x$5$i = 0, $x$6$i = 0, $x$i = 0, $y$0$i = 0.0;
 var $y$1$i = 0.0, $y$1$i115 = 0.0, $y$2$i = 0.0, $y$2$i116 = 0.0, $y$3$i = 0.0, $y$3$lcssa$i = 0.0, $y$399$i = 0.0, $y$4$i = 0.0, $y$5$i = 0.0, $z$0$i = 0, $z$1$ph248$i = 0, $z$1$us$i = 0, $z$1$us254$i = 0, $z$2$us$i = 0, $z$2$us262$i = 0, $z$3$lcssa$lcssa$i = 0, $z$3$us$i = 0, $z$3$us290$i = 0, $z$4$i = 0, $z$5$ph$i = 0;
 var $z$7$1$i = 0, $z$7$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 512|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $x$i = sp;
 if ((($prec|0) == 0)) {
  $bits$0$ph = 24;$emin$0$ph = -149;
 } else if ((($prec|0) == 1)) {
  $bits$0$ph = 53;$emin$0$ph = -1074;
 } else if ((($prec|0) == 2)) {
  $bits$0$ph = 53;$emin$0$ph = -1074;
 } else {
  $retval$0 = 0.0;
  STACKTOP = sp;return (+$retval$0);
 }
 $rpos = (($f) + 4|0);
 $shend = (($f) + 100|0);
 while(1) {
  $0 = HEAP32[$rpos>>2]|0;
  $1 = HEAP32[$shend>>2]|0;
  $cmp = ($0>>>0)<($1>>>0);
  if ($cmp) {
   $incdec$ptr = (($0) + 1|0);
   HEAP32[$rpos>>2] = $incdec$ptr;
   $2 = HEAP8[$0>>0]|0;
   $conv = $2&255;
   $cond = $conv;
  } else {
   $call = (___shgetc($f)|0);
   $cond = $call;
  }
  $call6 = (_isspace($cond)|0);
  $tobool = ($call6|0)==(0);
  if ($tobool) {
   break;
  }
 }
 $cmp9 = ($cond|0)==(45);
 do {
  if ((($cond|0) == 43) | (($cond|0) == 45)) {
   $conv12 = $cmp9&1;
   $mul = $conv12 << 1;
   $sub13 = (1 - ($mul))|0;
   $3 = HEAP32[$rpos>>2]|0;
   $4 = HEAP32[$shend>>2]|0;
   $cmp16 = ($3>>>0)<($4>>>0);
   if ($cmp16) {
    $incdec$ptr20 = (($3) + 1|0);
    HEAP32[$rpos>>2] = $incdec$ptr20;
    $5 = HEAP8[$3>>0]|0;
    $conv21 = $5&255;
    $c$0 = $conv21;$sign$0 = $sub13;
    break;
   } else {
    $call23 = (___shgetc($f)|0);
    $c$0 = $call23;$sign$0 = $sub13;
    break;
   }
  } else {
   $c$0 = $cond;$sign$0 = 1;
  }
 } while(0);
 $c$1154 = $c$0;$i$0153 = 0;
 while(1) {
  $or = $c$1154 | 32;
  $arrayidx = (14576 + ($i$0153)|0);
  $6 = HEAP8[$arrayidx>>0]|0;
  $conv28 = $6 << 24 >> 24;
  $cmp29 = ($or|0)==($conv28|0);
  if (!($cmp29)) {
   $c$1$lcssa = $c$1154;$i$0$lcssa = $i$0153;
   break;
  }
  $cmp31 = ($i$0153>>>0)<(7);
  do {
   if ($cmp31) {
    $7 = HEAP32[$rpos>>2]|0;
    $8 = HEAP32[$shend>>2]|0;
    $cmp36 = ($7>>>0)<($8>>>0);
    if ($cmp36) {
     $incdec$ptr40 = (($7) + 1|0);
     HEAP32[$rpos>>2] = $incdec$ptr40;
     $9 = HEAP8[$7>>0]|0;
     $conv41 = $9&255;
     $c$2 = $conv41;
     break;
    } else {
     $call43 = (___shgetc($f)|0);
     $c$2 = $call43;
     break;
    }
   } else {
    $c$2 = $c$1154;
   }
  } while(0);
  $inc = (($i$0153) + 1)|0;
  $cmp26 = ($inc>>>0)<(8);
  if ($cmp26) {
   $c$1154 = $c$2;$i$0153 = $inc;
  } else {
   $c$1$lcssa = $c$2;$i$0$lcssa = $inc;
   break;
  }
 }
 do {
  if ((($i$0$lcssa|0) == 3)) {
   label = 23;
  } else if (!((($i$0$lcssa|0) == 8))) {
   $cmp53 = ($i$0$lcssa>>>0)<(4);
   $tobool55 = ($pok|0)==(0);
   $or$cond = $cmp53 | $tobool55;
   if (!($or$cond)) {
    $cmp57 = ($i$0$lcssa|0)==(8);
    if ($cmp57) {
     break;
    } else {
     label = 23;
     break;
    }
   }
   $tobool88 = ($i$0$lcssa|0)==(0);
   L34: do {
    if ($tobool88) {
     $c$3150 = $c$1$lcssa;$i$2149 = 0;
     while(1) {
      $or94 = $c$3150 | 32;
      $arrayidx95 = (14592 + ($i$2149)|0);
      $13 = HEAP8[$arrayidx95>>0]|0;
      $conv96 = $13 << 24 >> 24;
      $cmp97 = ($or94|0)==($conv96|0);
      if (!($cmp97)) {
       $c$5 = $c$3150;$i$3 = $i$2149;
       break L34;
      }
      $cmp101 = ($i$2149>>>0)<(2);
      do {
       if ($cmp101) {
        $14 = HEAP32[$rpos>>2]|0;
        $15 = HEAP32[$shend>>2]|0;
        $cmp106 = ($14>>>0)<($15>>>0);
        if ($cmp106) {
         $incdec$ptr110 = (($14) + 1|0);
         HEAP32[$rpos>>2] = $incdec$ptr110;
         $16 = HEAP8[$14>>0]|0;
         $conv111 = $16&255;
         $c$4 = $conv111;
         break;
        } else {
         $call113 = (___shgetc($f)|0);
         $c$4 = $call113;
         break;
        }
       } else {
        $c$4 = $c$3150;
       }
      } while(0);
      $inc118 = (($i$2149) + 1)|0;
      $cmp91 = ($inc118>>>0)<(3);
      if ($cmp91) {
       $c$3150 = $c$4;$i$2149 = $inc118;
      } else {
       $c$5 = $c$4;$i$3 = $inc118;
       break;
      }
     }
    } else {
     $c$5 = $c$1$lcssa;$i$3 = $i$0$lcssa;
    }
   } while(0);
   if ((($i$3|0) == 0)) {
    $cmp217 = ($c$5|0)==(48);
    do {
     if ($cmp217) {
      $30 = HEAP32[$rpos>>2]|0;
      $31 = HEAP32[$shend>>2]|0;
      $cmp222 = ($30>>>0)<($31>>>0);
      if ($cmp222) {
       $incdec$ptr226 = (($30) + 1|0);
       HEAP32[$rpos>>2] = $incdec$ptr226;
       $32 = HEAP8[$30>>0]|0;
       $conv227 = $32&255;
       $cond231 = $conv227;
      } else {
       $call229 = (___shgetc($f)|0);
       $cond231 = $call229;
      }
      $or232 = $cond231 | 32;
      $cmp233 = ($or232|0)==(120);
      if (!($cmp233)) {
       $134 = HEAP32[$shend>>2]|0;
       $tobool239 = ($134|0)==(0|0);
       if ($tobool239) {
        $c$6 = 48;
        break;
       }
       $135 = HEAP32[$rpos>>2]|0;
       $incdec$ptr242 = (($135) + -1|0);
       HEAP32[$rpos>>2] = $incdec$ptr242;
       $c$6 = 48;
       break;
      }
      $33 = HEAP32[$rpos>>2]|0;
      $34 = HEAP32[$shend>>2]|0;
      $cmp$i = ($33>>>0)<($34>>>0);
      if ($cmp$i) {
       $incdec$ptr$i = (($33) + 1|0);
       HEAP32[$rpos>>2] = $incdec$ptr$i;
       $35 = HEAP8[$33>>0]|0;
       $conv$i = $35&255;
       $c$0$i = $conv$i;$gotdig$0$i = 0;
      } else {
       $call$i = (___shgetc($f)|0);
       $c$0$i = $call$i;$gotdig$0$i = 0;
      }
      while(1) {
       if ((($c$0$i|0) == 46)) {
        label = 70;
        break;
       } else if (!((($c$0$i|0) == 48))) {
        $50 = 0;$53 = 0;$70 = 0;$72 = 0;$c$2$i = $c$0$i;$gotdig$2$i = $gotdig$0$i;$gotrad$0$i = 0;$gottail$0$i = 0;$scale$0$i = 1.0;$x$0$i = 0;$y$0$i = 0.0;
        break;
       }
       $36 = HEAP32[$rpos>>2]|0;
       $37 = HEAP32[$shend>>2]|0;
       $cmp6$i = ($36>>>0)<($37>>>0);
       if ($cmp6$i) {
        $incdec$ptr10$i = (($36) + 1|0);
        HEAP32[$rpos>>2] = $incdec$ptr10$i;
        $38 = HEAP8[$36>>0]|0;
        $conv11$i = $38&255;
        $c$0$i = $conv11$i;$gotdig$0$i = 1;
        continue;
       } else {
        $call13$i = (___shgetc($f)|0);
        $c$0$i = $call13$i;$gotdig$0$i = 1;
        continue;
       }
      }
      L71: do {
       if ((label|0) == 70) {
        $39 = HEAP32[$rpos>>2]|0;
        $40 = HEAP32[$shend>>2]|0;
        $cmp20$i = ($39>>>0)<($40>>>0);
        if ($cmp20$i) {
         $incdec$ptr24$i = (($39) + 1|0);
         HEAP32[$rpos>>2] = $incdec$ptr24$i;
         $41 = HEAP8[$39>>0]|0;
         $conv25$i = $41&255;
         $c$1$ph$i = $conv25$i;
        } else {
         $call27$i = (___shgetc($f)|0);
         $c$1$ph$i = $call27$i;
        }
        $cmp31107$i = ($c$1$ph$i|0)==(48);
        if ($cmp31107$i) {
         $45 = -1;$46 = -1;
         while(1) {
          $42 = HEAP32[$rpos>>2]|0;
          $43 = HEAP32[$shend>>2]|0;
          $cmp37$i = ($42>>>0)<($43>>>0);
          if ($cmp37$i) {
           $incdec$ptr41$i = (($42) + 1|0);
           HEAP32[$rpos>>2] = $incdec$ptr41$i;
           $44 = HEAP8[$42>>0]|0;
           $conv42$i = $44&255;
           $cond46$i = $conv42$i;
          } else {
           $call44$i = (___shgetc($f)|0);
           $cond46$i = $call44$i;
          }
          $cmp31$i = ($cond46$i|0)==(48);
          if (!($cmp31$i)) {
           $50 = 0;$53 = 0;$70 = $45;$72 = $46;$c$2$i = $cond46$i;$gotdig$2$i = 1;$gotrad$0$i = 1;$gottail$0$i = 0;$scale$0$i = 1.0;$x$0$i = 0;$y$0$i = 0.0;
           break L71;
          }
          $47 = (_i64Add(($45|0),($46|0),-1,-1)|0);
          $48 = tempRet0;
          $45 = $47;$46 = $48;
         }
        } else {
         $50 = 0;$53 = 0;$70 = 0;$72 = 0;$c$2$i = $c$1$ph$i;$gotdig$2$i = $gotdig$0$i;$gotrad$0$i = 1;$gottail$0$i = 0;$scale$0$i = 1.0;$x$0$i = 0;$y$0$i = 0.0;
        }
       }
      } while(0);
      L84: while(1) {
       $sub$i = (($c$2$i) + -48)|0;
       $cmp49$i = ($sub$i>>>0)<(10);
       do {
        if ($cmp49$i) {
         $d$0$i = $sub$i;
         label = 84;
        } else {
         $or$i = $c$2$i | 32;
         $sub51$i = (($or$i) + -97)|0;
         $cmp52$i = ($sub51$i>>>0)<(6);
         $cmp54$i = ($c$2$i|0)==(46);
         $or$cond$i = $cmp52$i | $cmp54$i;
         if (!($or$cond$i)) {
          $c$2$lcssa$i = $c$2$i;
          break L84;
         }
         if ($cmp54$i) {
          $tobool$i = ($gotrad$0$i|0)==(0);
          if ($tobool$i) {
           $252 = $53;$253 = $50;$254 = $53;$255 = $50;$gotdig$3$i = $gotdig$2$i;$gotrad$1$i = 1;$gottail$2$i = $gottail$0$i;$scale$2$i = $scale$0$i;$x$2$i = $x$0$i;$y$2$i = $y$0$i;
           break;
          } else {
           $c$2$lcssa$i = 46;
           break L84;
          }
         } else {
          $cmp62$i = ($c$2$i|0)>(57);
          $sub66$i = (($or$i) + -87)|0;
          $sub66$sub$i = $cmp62$i ? $sub66$i : $sub$i;
          $d$0$i = $sub66$sub$i;
          label = 84;
          break;
         }
        }
       } while(0);
       if ((label|0) == 84) {
        label = 0;
        $49 = ($50|0)<(0);
        $51 = ($50|0)==(0);
        $52 = ($53>>>0)<(8);
        $54 = $51 & $52;
        $55 = $49 | $54;
        do {
         if ($55) {
          $mul$i = $x$0$i << 4;
          $add73$i = (($d$0$i) + ($mul$i))|0;
          $gottail$1$i = $gottail$0$i;$scale$1$i = $scale$0$i;$x$1$i = $add73$i;$y$1$i = $y$0$i;
         } else {
          $56 = ($50|0)<(0);
          $57 = ($50|0)==(0);
          $58 = ($53>>>0)<(14);
          $59 = $57 & $58;
          $60 = $56 | $59;
          if ($60) {
           $conv78$i = (+($d$0$i|0));
           $div$i = $scale$0$i * 0.0625;
           $mul79$i = $div$i * $conv78$i;
           $add80$i = $y$0$i + $mul79$i;
           $gottail$1$i = $gottail$0$i;$scale$1$i = $div$i;$x$1$i = $x$0$i;$y$1$i = $add80$i;
           break;
          }
          $tobool82$i = ($d$0$i|0)!=(0);
          $tobool83$i = ($gottail$0$i|0)==(0);
          $or$cond89$i = $tobool82$i & $tobool83$i;
          if ($or$cond89$i) {
           $mul85$i = $scale$0$i * 0.5;
           $add86$i = $y$0$i + $mul85$i;
           $gottail$1$i = 1;$scale$1$i = $scale$0$i;$x$1$i = $x$0$i;$y$1$i = $add86$i;
          } else {
           $gottail$1$i = $gottail$0$i;$scale$1$i = $scale$0$i;$x$1$i = $x$0$i;$y$1$i = $y$0$i;
          }
         }
        } while(0);
        $61 = (_i64Add(($53|0),($50|0),1,0)|0);
        $62 = tempRet0;
        $252 = $70;$253 = $72;$254 = $61;$255 = $62;$gotdig$3$i = 1;$gotrad$1$i = $gotrad$0$i;$gottail$2$i = $gottail$1$i;$scale$2$i = $scale$1$i;$x$2$i = $x$1$i;$y$2$i = $y$1$i;
       }
       $63 = HEAP32[$rpos>>2]|0;
       $64 = HEAP32[$shend>>2]|0;
       $cmp94$i = ($63>>>0)<($64>>>0);
       if ($cmp94$i) {
        $incdec$ptr98$i = (($63) + 1|0);
        HEAP32[$rpos>>2] = $incdec$ptr98$i;
        $65 = HEAP8[$63>>0]|0;
        $conv99$i = $65&255;
        $50 = $255;$53 = $254;$70 = $252;$72 = $253;$c$2$i = $conv99$i;$gotdig$2$i = $gotdig$3$i;$gotrad$0$i = $gotrad$1$i;$gottail$0$i = $gottail$2$i;$scale$0$i = $scale$2$i;$x$0$i = $x$2$i;$y$0$i = $y$2$i;
        continue;
       } else {
        $call101$i = (___shgetc($f)|0);
        $50 = $255;$53 = $254;$70 = $252;$72 = $253;$c$2$i = $call101$i;$gotdig$2$i = $gotdig$3$i;$gotrad$0$i = $gotrad$1$i;$gottail$0$i = $gottail$2$i;$scale$0$i = $scale$2$i;$x$0$i = $x$2$i;$y$0$i = $y$2$i;
        continue;
       }
      }
      $tobool105$i = ($gotdig$2$i|0)==(0);
      if ($tobool105$i) {
       $66 = HEAP32[$shend>>2]|0;
       $tobool108$i = ($66|0)==(0|0);
       if (!($tobool108$i)) {
        $67 = HEAP32[$rpos>>2]|0;
        $incdec$ptr111$i = (($67) + -1|0);
        HEAP32[$rpos>>2] = $incdec$ptr111$i;
       }
       if ($tobool55) {
        ___shlim($f,0);
       } else {
        if (!($tobool108$i)) {
         $68 = HEAP32[$rpos>>2]|0;
         $incdec$ptr120$i = (($68) + -1|0);
         HEAP32[$rpos>>2] = $incdec$ptr120$i;
         $tobool123$i = ($gotrad$0$i|0)==(0);
         if (!($tobool123$i)) {
          $incdec$ptr129$i = (($68) + -2|0);
          HEAP32[$rpos>>2] = $incdec$ptr129$i;
         }
        }
       }
       $conv135$i = (+($sign$0|0));
       $mul136$i = $conv135$i * 0.0;
       $retval$0 = $mul136$i;
       STACKTOP = sp;return (+$retval$0);
      }
      $tobool138$i = ($gotrad$0$i|0)==(0);
      $69 = $tobool138$i ? $53 : $70;
      $71 = $tobool138$i ? $50 : $72;
      $73 = ($50|0)<(0);
      $74 = ($50|0)==(0);
      $75 = ($53>>>0)<(8);
      $76 = $74 & $75;
      $77 = $73 | $76;
      if ($77) {
       $78 = $53;$79 = $50;$x$3104$i = $x$0$i;
       while(1) {
        $mul143$i = $x$3104$i << 4;
        $80 = (_i64Add(($78|0),($79|0),1,0)|0);
        $81 = tempRet0;
        $82 = ($81|0)<(0);
        $83 = ($81|0)==(0);
        $84 = ($80>>>0)<(8);
        $85 = $83 & $84;
        $86 = $82 | $85;
        if ($86) {
         $78 = $80;$79 = $81;$x$3104$i = $mul143$i;
        } else {
         $x$3$lcssa$i = $mul143$i;
         break;
        }
       }
      } else {
       $x$3$lcssa$i = $x$0$i;
      }
      $or145$i = $c$2$lcssa$i | 32;
      $cmp146$i = ($or145$i|0)==(112);
      do {
       if ($cmp146$i) {
        $87 = (_scanexp($f,$pok)|0);
        $88 = tempRet0;
        $89 = ($87|0)==(0);
        $90 = ($88|0)==(-2147483648);
        $91 = $89 & $90;
        if ($91) {
         if ($tobool55) {
          ___shlim($f,0);
          $retval$0 = 0.0;
          STACKTOP = sp;return (+$retval$0);
         } else {
          $92 = HEAP32[$shend>>2]|0;
          $tobool156$i = ($92|0)==(0|0);
          if ($tobool156$i) {
           $100 = 0;$101 = 0;
           break;
          }
          $93 = HEAP32[$rpos>>2]|0;
          $incdec$ptr159$i = (($93) + -1|0);
          HEAP32[$rpos>>2] = $incdec$ptr159$i;
          $100 = 0;$101 = 0;
          break;
         }
        } else {
         $100 = $87;$101 = $88;
        }
       } else {
        $94 = HEAP32[$shend>>2]|0;
        $tobool167$i = ($94|0)==(0|0);
        if ($tobool167$i) {
         $100 = 0;$101 = 0;
        } else {
         $95 = HEAP32[$rpos>>2]|0;
         $incdec$ptr170$i = (($95) + -1|0);
         HEAP32[$rpos>>2] = $incdec$ptr170$i;
         $100 = 0;$101 = 0;
        }
       }
      } while(0);
      $96 = (_bitshift64Shl(($69|0),($71|0),2)|0);
      $97 = tempRet0;
      $98 = (_i64Add(($96|0),($97|0),-32,-1)|0);
      $99 = tempRet0;
      $102 = (_i64Add(($98|0),($99|0),($100|0),($101|0))|0);
      $103 = tempRet0;
      $tobool177$i = ($x$3$lcssa$i|0)==(0);
      if ($tobool177$i) {
       $conv179$i = (+($sign$0|0));
       $mul180$i = $conv179$i * 0.0;
       $retval$0 = $mul180$i;
       STACKTOP = sp;return (+$retval$0);
      }
      $sub182$i = (0 - ($emin$0$ph))|0;
      $104 = ($103|0)>(0);
      $105 = ($103|0)==(0);
      $106 = ($102>>>0)>($sub182$i>>>0);
      $107 = $105 & $106;
      $108 = $104 | $107;
      if ($108) {
       $call187$i = (___errno_location()|0);
       HEAP32[$call187$i>>2] = 34;
       $conv188$i = (+($sign$0|0));
       $mul189$i = $conv188$i * 1.79769313486231570815E+308;
       $mul190$i = $mul189$i * 1.79769313486231570815E+308;
       $retval$0 = $mul190$i;
       STACKTOP = sp;return (+$retval$0);
      }
      $sub192$i = (($emin$0$ph) + -106)|0;
      $109 = ($sub192$i|0)<(0);
      $110 = $109 << 31 >> 31;
      $111 = ($103|0)<($110|0);
      $112 = ($103|0)==($110|0);
      $113 = ($102>>>0)<($sub192$i>>>0);
      $114 = $112 & $113;
      $115 = $111 | $114;
      if ($115) {
       $call197$i = (___errno_location()|0);
       HEAP32[$call197$i>>2] = 34;
       $conv198$i = (+($sign$0|0));
       $mul199$i = $conv198$i * 2.22507385850720138309E-308;
       $mul200$i = $mul199$i * 2.22507385850720138309E-308;
       $retval$0 = $mul200$i;
       STACKTOP = sp;return (+$retval$0);
      }
      $cmp20397$i = ($x$3$lcssa$i|0)>(-1);
      if ($cmp20397$i) {
       $116 = $102;$117 = $103;$x$498$i = $x$3$lcssa$i;$y$399$i = $y$0$i;
       while(1) {
        $cmp206$i = !($y$399$i >= 0.5);
        $add214$i = $x$498$i << 1;
        if ($cmp206$i) {
         $sub211$pn$i = $y$399$i;$x$5$i = $add214$i;
        } else {
         $add210115$i = $add214$i | 1;
         $sub211$i = $y$399$i + -1.0;
         $sub211$pn$i = $sub211$i;$x$5$i = $add210115$i;
        }
        $y$4$i = $y$399$i + $sub211$pn$i;
        $118 = (_i64Add(($116|0),($117|0),-1,-1)|0);
        $119 = tempRet0;
        $cmp203$i = ($x$5$i|0)>(-1);
        if ($cmp203$i) {
         $116 = $118;$117 = $119;$x$498$i = $x$5$i;$y$399$i = $y$4$i;
        } else {
         $124 = $118;$125 = $119;$x$4$lcssa$i = $x$5$i;$y$3$lcssa$i = $y$4$i;
         break;
        }
       }
      } else {
       $124 = $102;$125 = $103;$x$4$lcssa$i = $x$3$lcssa$i;$y$3$lcssa$i = $y$0$i;
      }
      $120 = ($emin$0$ph|0)<(0);
      $121 = $120 << 31 >> 31;
      $122 = (_i64Subtract(32,0,($emin$0$ph|0),($121|0))|0);
      $123 = tempRet0;
      $126 = (_i64Add(($124|0),($125|0),($122|0),($123|0))|0);
      $127 = tempRet0;
      $128 = (0)>($127|0);
      $129 = (0)==($127|0);
      $130 = ($bits$0$ph>>>0)>($126>>>0);
      $131 = $129 & $130;
      $132 = $128 | $131;
      if ($132) {
       $cmp230$i = ($126|0)<(0);
       $$conv229$i = $cmp230$i ? 0 : $126;
       $bits$addr$0$i = $$conv229$i;
      } else {
       $bits$addr$0$i = $bits$0$ph;
      }
      $cmp235$i = ($bits$addr$0$i|0)<(53);
      do {
       if ($cmp235$i) {
        $sub239$i = (84 - ($bits$addr$0$i))|0;
        $call240$i = (+_scalbn(1.0,$sub239$i));
        $conv241$i = (+($sign$0|0));
        $call242$i = (+_copysignl((+$call240$i),(+$conv241$i)));
        $cmp244$i = ($bits$addr$0$i|0)<(32);
        $tobool247$i = $y$3$lcssa$i != 0.0;
        $or$cond90$i = $cmp244$i & $tobool247$i;
        if (!($or$cond90$i)) {
         $bias$096$i = $call242$i;$conv253$pre$phi$iZ2D = $conv241$i;$x$6$i = $x$4$lcssa$i;$y$5$i = $y$3$lcssa$i;
         break;
        }
        $and$i = $x$4$lcssa$i & 1;
        $tobool249$i = ($and$i|0)==(0);
        $133 = $and$i ^ 1;
        $inc251$x$4$i = (($133) + ($x$4$lcssa$i))|0;
        $$y$3$i = $tobool249$i ? 0.0 : $y$3$lcssa$i;
        $bias$096$i = $call242$i;$conv253$pre$phi$iZ2D = $conv241$i;$x$6$i = $inc251$x$4$i;$y$5$i = $$y$3$i;
       } else {
        $conv253$pre$i = (+($sign$0|0));
        $bias$096$i = 0.0;$conv253$pre$phi$iZ2D = $conv253$pre$i;$x$6$i = $x$4$lcssa$i;$y$5$i = $y$3$lcssa$i;
       }
      } while(0);
      $conv254$i = (+($x$6$i>>>0));
      $mul255$i = $conv253$pre$phi$iZ2D * $conv254$i;
      $add256$i = $bias$096$i + $mul255$i;
      $mul258$i = $conv253$pre$phi$iZ2D * $y$5$i;
      $add259$i = $mul258$i + $add256$i;
      $sub260$i = $add259$i - $bias$096$i;
      $tobool261$i = $sub260$i != 0.0;
      if (!($tobool261$i)) {
       $call263$i = (___errno_location()|0);
       HEAP32[$call263$i>>2] = 34;
      }
      $call266$i = (+_scalbnl($sub260$i,$124));
      $retval$0 = $call266$i;
      STACKTOP = sp;return (+$retval$0);
     } else {
      $c$6 = $c$5;
     }
    } while(0);
    $sum$i = (($emin$0$ph) + ($bits$0$ph))|0;
    $sub1$i = (0 - ($sum$i))|0;
    $c$addr$0$i = $c$6;$gotdig$0$i84 = 0;
    while(1) {
     if ((($c$addr$0$i|0) == 46)) {
      label = 139;
      break;
     } else if (!((($c$addr$0$i|0) == 48))) {
      $256 = 0;$257 = 0;$c$addr$2$i = $c$addr$0$i;$gotdig$2$i94 = $gotdig$0$i84;$gotrad$0$i95 = 0;
      break;
     }
     $136 = HEAP32[$rpos>>2]|0;
     $137 = HEAP32[$shend>>2]|0;
     $cmp2$i = ($136>>>0)<($137>>>0);
     if ($cmp2$i) {
      $incdec$ptr$i87 = (($136) + 1|0);
      HEAP32[$rpos>>2] = $incdec$ptr$i87;
      $138 = HEAP8[$136>>0]|0;
      $conv$i88 = $138&255;
      $c$addr$0$i = $conv$i88;$gotdig$0$i84 = 1;
      continue;
     } else {
      $call$i90 = (___shgetc($f)|0);
      $c$addr$0$i = $call$i90;$gotdig$0$i84 = 1;
      continue;
     }
    }
    L173: do {
     if ((label|0) == 139) {
      $139 = HEAP32[$rpos>>2]|0;
      $140 = HEAP32[$shend>>2]|0;
      $cmp8$i = ($139>>>0)<($140>>>0);
      if ($cmp8$i) {
       $incdec$ptr12$i = (($139) + 1|0);
       HEAP32[$rpos>>2] = $incdec$ptr12$i;
       $141 = HEAP8[$139>>0]|0;
       $conv13$i = $141&255;
       $c$addr$1$ph$i = $conv13$i;
      } else {
       $call15$i = (___shgetc($f)|0);
       $c$addr$1$ph$i = $call15$i;
      }
      $cmp19343$i = ($c$addr$1$ph$i|0)==(48);
      if ($cmp19343$i) {
       $145 = -1;$146 = -1;
       while(1) {
        $142 = HEAP32[$rpos>>2]|0;
        $143 = HEAP32[$shend>>2]|0;
        $cmp25$i = ($142>>>0)<($143>>>0);
        if ($cmp25$i) {
         $incdec$ptr29$i = (($142) + 1|0);
         HEAP32[$rpos>>2] = $incdec$ptr29$i;
         $144 = HEAP8[$142>>0]|0;
         $conv30$i = $144&255;
         $c$addr$1$be$i = $conv30$i;
        } else {
         $call32$i = (___shgetc($f)|0);
         $c$addr$1$be$i = $call32$i;
        }
        $cmp19$i = ($c$addr$1$be$i|0)==(48);
        if (!($cmp19$i)) {
         $256 = $145;$257 = $146;$c$addr$2$i = $c$addr$1$be$i;$gotdig$2$i94 = 1;$gotrad$0$i95 = 1;
         break L173;
        }
        $147 = (_i64Add(($145|0),($146|0),-1,-1)|0);
        $148 = tempRet0;
        $145 = $147;$146 = $148;
       }
      } else {
       $256 = 0;$257 = 0;$c$addr$2$i = $c$addr$1$ph$i;$gotdig$2$i94 = $gotdig$0$i84;$gotrad$0$i95 = 1;
      }
     }
    } while(0);
    HEAP32[$x$i>>2] = 0;
    $sub37321$i = (($c$addr$2$i) + -48)|0;
    $cmp38322$i = ($sub37321$i>>>0)<(10);
    $cmp40323$i = ($c$addr$2$i|0)==(46);
    $or$cond2324$i = $cmp38322$i | $cmp40323$i;
    L187: do {
     if ($or$cond2324$i) {
      $arrayidx77$i = (($x$i) + 496|0);
      $149 = 0;$150 = 0;$258 = $256;$259 = $257;$c$addr$3332$i = $c$addr$2$i;$cmp40334$i = $cmp40323$i;$gotdig$3328$i = $gotdig$2$i94;$gotrad$1329$i = $gotrad$0$i95;$j$0331$i = 0;$k$0330$i = 0;$lnz$0327$i = 0;$sub37333$i = $sub37321$i;
      while(1) {
       do {
        if ($cmp40334$i) {
         $cond$i = ($gotrad$1329$i|0)==(0);
         if ($cond$i) {
          $260 = $149;$261 = $150;$262 = $149;$263 = $150;$gotdig$4$i = $gotdig$3328$i;$gotrad$2$i = 1;$j$2$i = $j$0331$i;$k$2$i = $k$0330$i;$lnz$2$i = $lnz$0327$i;
         } else {
          $173 = $258;$174 = $259;$182 = $149;$185 = $150;$c$addr$3320$i = $c$addr$3332$i;$gotdig$3313$i = $gotdig$3328$i;$j$0318$i = $j$0331$i;$k$0316$i = $k$0330$i;$lnz$0311$i = $lnz$0327$i;
          break L187;
         }
        } else {
         $cmp48$i = ($k$0330$i|0)<(125);
         $151 = (_i64Add(($149|0),($150|0),1,0)|0);
         $152 = tempRet0;
         $cmp51$i = ($c$addr$3332$i|0)!=(48);
         if (!($cmp48$i)) {
          if (!($cmp51$i)) {
           $260 = $258;$261 = $259;$262 = $151;$263 = $152;$gotdig$4$i = $gotdig$3328$i;$gotrad$2$i = $gotrad$1329$i;$j$2$i = $j$0331$i;$k$2$i = $k$0330$i;$lnz$2$i = $lnz$0327$i;
           break;
          }
          $154 = HEAP32[$arrayidx77$i>>2]|0;
          $or$i99 = $154 | 1;
          HEAP32[$arrayidx77$i>>2] = $or$i99;
          $260 = $258;$261 = $259;$262 = $151;$263 = $152;$gotdig$4$i = $gotdig$3328$i;$gotrad$2$i = $gotrad$1329$i;$j$2$i = $j$0331$i;$k$2$i = $k$0330$i;$lnz$2$i = $lnz$0327$i;
          break;
         }
         $conv54$lnz$0$i = $cmp51$i ? $151 : $lnz$0327$i;
         $tobool56$i = ($j$0331$i|0)==(0);
         $arrayidx64$i = (($x$i) + ($k$0330$i<<2)|0);
         if ($tobool56$i) {
          $storemerge$i = $sub37333$i;
         } else {
          $153 = HEAP32[$arrayidx64$i>>2]|0;
          $mul$i98 = ($153*10)|0;
          $add59$i = (($c$addr$3332$i) + -48)|0;
          $sub60$i = (($add59$i) + ($mul$i98))|0;
          $storemerge$i = $sub60$i;
         }
         HEAP32[$arrayidx64$i>>2] = $storemerge$i;
         $inc66$i = (($j$0331$i) + 1)|0;
         $cmp67$i = ($inc66$i|0)==(9);
         $inc70$i = $cmp67$i&1;
         $inc70$k$0$i = (($inc70$i) + ($k$0330$i))|0;
         $$inc66$i = $cmp67$i ? 0 : $inc66$i;
         $260 = $258;$261 = $259;$262 = $151;$263 = $152;$gotdig$4$i = 1;$gotrad$2$i = $gotrad$1329$i;$j$2$i = $$inc66$i;$k$2$i = $inc70$k$0$i;$lnz$2$i = $conv54$lnz$0$i;
        }
       } while(0);
       $155 = HEAP32[$rpos>>2]|0;
       $156 = HEAP32[$shend>>2]|0;
       $cmp84$i = ($155>>>0)<($156>>>0);
       if ($cmp84$i) {
        $incdec$ptr88$i = (($155) + 1|0);
        HEAP32[$rpos>>2] = $incdec$ptr88$i;
        $157 = HEAP8[$155>>0]|0;
        $conv89$i = $157&255;
        $c$addr$3$be$i = $conv89$i;
       } else {
        $call91$i = (___shgetc($f)|0);
        $c$addr$3$be$i = $call91$i;
       }
       $sub37$i = (($c$addr$3$be$i) + -48)|0;
       $cmp38$i = ($sub37$i>>>0)<(10);
       $cmp40$i = ($c$addr$3$be$i|0)==(46);
       $or$cond2$i = $cmp38$i | $cmp40$i;
       if ($or$cond2$i) {
        $149 = $262;$150 = $263;$258 = $260;$259 = $261;$c$addr$3332$i = $c$addr$3$be$i;$cmp40334$i = $cmp40$i;$gotdig$3328$i = $gotdig$4$i;$gotrad$1329$i = $gotrad$2$i;$j$0331$i = $j$2$i;$k$0330$i = $k$2$i;$lnz$0327$i = $lnz$2$i;$sub37333$i = $sub37$i;
       } else {
        $159 = $262;$160 = $260;$162 = $263;$163 = $261;$c$addr$3$lcssa$i = $c$addr$3$be$i;$gotdig$3$lcssa$i = $gotdig$4$i;$gotrad$1$lcssa$i = $gotrad$2$i;$j$0$lcssa$i = $j$2$i;$k$0$lcssa$i = $k$2$i;$lnz$0$lcssa$i = $lnz$2$i;
        label = 162;
        break;
       }
      }
     } else {
      $159 = 0;$160 = $256;$162 = 0;$163 = $257;$c$addr$3$lcssa$i = $c$addr$2$i;$gotdig$3$lcssa$i = $gotdig$2$i94;$gotrad$1$lcssa$i = $gotrad$0$i95;$j$0$lcssa$i = 0;$k$0$lcssa$i = 0;$lnz$0$lcssa$i = 0;
      label = 162;
     }
    } while(0);
    if ((label|0) == 162) {
     $tobool95$i = ($gotrad$1$lcssa$i|0)==(0);
     $158 = $tobool95$i ? $159 : $160;
     $161 = $tobool95$i ? $162 : $163;
     $173 = $158;$174 = $161;$182 = $159;$185 = $162;$c$addr$3320$i = $c$addr$3$lcssa$i;$gotdig$3313$i = $gotdig$3$lcssa$i;$j$0318$i = $j$0$lcssa$i;$k$0316$i = $k$0$lcssa$i;$lnz$0311$i = $lnz$0$lcssa$i;
    }
    $tobool98$i = ($gotdig$3313$i|0)!=(0);
    if ($tobool98$i) {
     $or99$i = $c$addr$3320$i | 32;
     $cmp100$i = ($or99$i|0)==(101);
     if ($cmp100$i) {
      $164 = (_scanexp($f,$pok)|0);
      $165 = tempRet0;
      $166 = ($164|0)==(0);
      $167 = ($165|0)==(-2147483648);
      $168 = $166 & $167;
      do {
       if ($168) {
        if ($tobool55) {
         ___shlim($f,0);
         $retval$0 = 0.0;
         STACKTOP = sp;return (+$retval$0);
        } else {
         $169 = HEAP32[$shend>>2]|0;
         $tobool110$i = ($169|0)==(0|0);
         if ($tobool110$i) {
          $171 = 0;$172 = 0;
          break;
         }
         $170 = HEAP32[$rpos>>2]|0;
         $incdec$ptr113$i = (($170) + -1|0);
         HEAP32[$rpos>>2] = $incdec$ptr113$i;
         $171 = 0;$172 = 0;
         break;
        }
       } else {
        $171 = $164;$172 = $165;
       }
      } while(0);
      $175 = (_i64Add(($171|0),($172|0),($173|0),($174|0))|0);
      $176 = tempRet0;
      $181 = $175;$184 = $176;
     } else {
      label = 171;
     }
    } else {
     label = 171;
    }
    if ((label|0) == 171) {
     $cmp121$i = ($c$addr$3320$i|0)>(-1);
     if ($cmp121$i) {
      $177 = HEAP32[$shend>>2]|0;
      $tobool125$i = ($177|0)==(0|0);
      if ($tobool125$i) {
       $181 = $173;$184 = $174;
      } else {
       $178 = HEAP32[$rpos>>2]|0;
       $incdec$ptr128$i = (($178) + -1|0);
       HEAP32[$rpos>>2] = $incdec$ptr128$i;
       $181 = $173;$184 = $174;
      }
     } else {
      $181 = $173;$184 = $174;
     }
    }
    if (!($tobool98$i)) {
     $call135$i = (___errno_location()|0);
     HEAP32[$call135$i>>2] = 22;
     ___shlim($f,0);
     $retval$0 = 0.0;
     STACKTOP = sp;return (+$retval$0);
    }
    $179 = HEAP32[$x$i>>2]|0;
    $tobool138$i102 = ($179|0)==(0);
    if ($tobool138$i102) {
     $conv140$i = (+($sign$0|0));
     $mul141$i = $conv140$i * 0.0;
     $retval$0 = $mul141$i;
     STACKTOP = sp;return (+$retval$0);
    }
    $180 = ($181|0)==($182|0);
    $183 = ($184|0)==($185|0);
    $186 = $180 & $183;
    $187 = ($185|0)<(0);
    $188 = ($185|0)==(0);
    $189 = ($182>>>0)<(10);
    $190 = $188 & $189;
    $191 = $187 | $190;
    $or$cond$i104 = $186 & $191;
    do {
     if ($or$cond$i104) {
      $cmp149$i = ($bits$0$ph>>>0)>(30);
      if (!($cmp149$i)) {
       $shr$i = $179 >>> $bits$0$ph;
       $cmp152$i = ($shr$i|0)==(0);
       if (!($cmp152$i)) {
        break;
       }
      }
      $conv155$i = (+($sign$0|0));
      $conv157$i = (+($179>>>0));
      $mul158$i = $conv155$i * $conv157$i;
      $retval$0 = $mul158$i;
      STACKTOP = sp;return (+$retval$0);
     }
    } while(0);
    $div$i107 = (($emin$0$ph|0) / -2)&-1;
    $192 = ($div$i107|0)<(0);
    $193 = $192 << 31 >> 31;
    $194 = ($184|0)>($193|0);
    $195 = ($184|0)==($193|0);
    $196 = ($181>>>0)>($div$i107>>>0);
    $197 = $195 & $196;
    $198 = $194 | $197;
    if ($198) {
     $call165$i = (___errno_location()|0);
     HEAP32[$call165$i>>2] = 34;
     $conv166$i = (+($sign$0|0));
     $mul167$i = $conv166$i * 1.79769313486231570815E+308;
     $mul168$i = $mul167$i * 1.79769313486231570815E+308;
     $retval$0 = $mul168$i;
     STACKTOP = sp;return (+$retval$0);
    }
    $sub170$i = (($emin$0$ph) + -106)|0;
    $199 = ($sub170$i|0)<(0);
    $200 = $199 << 31 >> 31;
    $201 = ($184|0)<($200|0);
    $202 = ($184|0)==($200|0);
    $203 = ($181>>>0)<($sub170$i>>>0);
    $204 = $202 & $203;
    $205 = $201 | $204;
    if ($205) {
     $call175$i = (___errno_location()|0);
     HEAP32[$call175$i>>2] = 34;
     $conv176$i = (+($sign$0|0));
     $mul177$i = $conv176$i * 2.22507385850720138309E-308;
     $mul178$i = $mul177$i * 2.22507385850720138309E-308;
     $retval$0 = $mul178$i;
     STACKTOP = sp;return (+$retval$0);
    }
    $tobool180$i = ($j$0318$i|0)==(0);
    if ($tobool180$i) {
     $k$3$i = $k$0316$i;
    } else {
     $cmp183304$i = ($j$0318$i|0)<(9);
     if ($cmp183304$i) {
      $arrayidx186$i = (($x$i) + ($k$0316$i<<2)|0);
      $arrayidx186$promoted$i = HEAP32[$arrayidx186$i>>2]|0;
      $j$3305$i = $j$0318$i;$mul187306$i = $arrayidx186$promoted$i;
      while(1) {
       $mul187$i = ($mul187306$i*10)|0;
       $inc189$i = (($j$3305$i) + 1)|0;
       $exitcond$i = ($inc189$i|0)==(9);
       if ($exitcond$i) {
        break;
       } else {
        $j$3305$i = $inc189$i;$mul187306$i = $mul187$i;
       }
      }
      HEAP32[$arrayidx186$i>>2] = $mul187$i;
     }
     $inc191$i = (($k$0316$i) + 1)|0;
     $k$3$i = $inc191$i;
    }
    $cmp194$i109 = ($lnz$0311$i|0)<(9);
    do {
     if ($cmp194$i109) {
      $cmp197$i = ($lnz$0311$i|0)<=($181|0);
      $cmp200$i = ($181|0)<(18);
      $or$cond1$i = $cmp197$i & $cmp200$i;
      if ($or$cond1$i) {
       $cmp203$i110 = ($181|0)==(9);
       if ($cmp203$i110) {
        $conv206$i = (+($sign$0|0));
        $206 = HEAP32[$x$i>>2]|0;
        $conv208$i = (+($206>>>0));
        $mul209$i = $conv206$i * $conv208$i;
        $retval$0 = $mul209$i;
        STACKTOP = sp;return (+$retval$0);
       }
       $cmp211$i = ($181|0)<(9);
       if ($cmp211$i) {
        $conv214$i = (+($sign$0|0));
        $207 = HEAP32[$x$i>>2]|0;
        $conv216$i = (+($207>>>0));
        $mul217$i = $conv214$i * $conv216$i;
        $sub218$i = (8 - ($181))|0;
        $arrayidx219$i = (14608 + ($sub218$i<<2)|0);
        $208 = HEAP32[$arrayidx219$i>>2]|0;
        $conv220$i = (+($208|0));
        $div221$i = $mul217$i / $conv220$i;
        $retval$0 = $div221$i;
        STACKTOP = sp;return (+$retval$0);
       }
       $209 = Math_imul($181, -3)|0;
       $mul224$neg$i = (($bits$0$ph) + 27)|0;
       $sub225$i = (($mul224$neg$i) + ($209))|0;
       $cmp226$i = ($sub225$i|0)>(30);
       $$pre$i = HEAP32[$x$i>>2]|0;
       if (!($cmp226$i)) {
        $shr230$i = $$pre$i >>> $sub225$i;
        $cmp231$i = ($shr230$i|0)==(0);
        if (!($cmp231$i)) {
         break;
        }
       }
       $conv234$i = (+($sign$0|0));
       $conv236$i = (+($$pre$i>>>0));
       $mul237$i = $conv234$i * $conv236$i;
       $sub238$i = (($181) + -10)|0;
       $arrayidx239$i = (14608 + ($sub238$i<<2)|0);
       $210 = HEAP32[$arrayidx239$i>>2]|0;
       $conv240$i = (+($210|0));
       $mul241$i = $mul237$i * $conv240$i;
       $retval$0 = $mul241$i;
       STACKTOP = sp;return (+$retval$0);
      }
     }
    } while(0);
    $rem$i = (($181|0) % 9)&-1;
    $tobool244$i = ($rem$i|0)==(0);
    if ($tobool244$i) {
     $a$2$ph249$i = 0;$e2$0$ph$i = 0;$rp$2$ph247$i = $181;$z$1$ph248$i = $k$3$i;
    } else {
     $cmp246$i = ($181|0)>(-1);
     $add252$i = (($rem$i) + 9)|0;
     $cond254$i = $cmp246$i ? $rem$i : $add252$i;
     $sub255$i = (8 - ($cond254$i))|0;
     $arrayidx256$i = (14608 + ($sub255$i<<2)|0);
     $211 = HEAP32[$arrayidx256$i>>2]|0;
     $cmp258296$i = ($k$3$i|0)==(0);
     if ($cmp258296$i) {
      $a$0$lcssa376$i = 0;$rp$0$lcssa377$i = $181;$z$0$i = 0;
     } else {
      $div267$i = (1000000000 / ($211|0))&-1;
      $a$0298$i = 0;$carry$0300$i = 0;$k$4299$i = 0;$rp$0297$i = $181;
      while(1) {
       $arrayidx261$i = (($x$i) + ($k$4299$i<<2)|0);
       $212 = HEAP32[$arrayidx261$i>>2]|0;
       $rem262$i = (($212>>>0) % ($211>>>0))&-1;
       $div264$i = (($212>>>0) / ($211>>>0))&-1;
       $add265$i = (($div264$i) + ($carry$0300$i))|0;
       HEAP32[$arrayidx261$i>>2] = $add265$i;
       $mul268$i = Math_imul($rem262$i, $div267$i)|0;
       $cmp269$i = ($k$4299$i|0)==($a$0298$i|0);
       $tobool273$i = ($add265$i|0)==(0);
       $or$cond223$i = $cmp269$i & $tobool273$i;
       $add275$i = (($k$4299$i) + 1)|0;
       if ($or$cond223$i) {
        $and$i112 = $add275$i & 127;
        $sub276$i = (($rp$0297$i) + -9)|0;
        $a$1$i = $and$i112;$rp$1$i113 = $sub276$i;
       } else {
        $a$1$i = $a$0298$i;$rp$1$i113 = $rp$0297$i;
       }
       $cmp258$i = ($add275$i|0)==($k$3$i|0);
       if ($cmp258$i) {
        break;
       } else {
        $a$0298$i = $a$1$i;$carry$0300$i = $mul268$i;$k$4299$i = $add275$i;$rp$0297$i = $rp$1$i113;
       }
      }
      $tobool281$i = ($mul268$i|0)==(0);
      if ($tobool281$i) {
       $a$0$lcssa376$i = $a$1$i;$rp$0$lcssa377$i = $rp$1$i113;$z$0$i = $k$3$i;
      } else {
       $inc283$i = (($k$3$i) + 1)|0;
       $arrayidx284$i = (($x$i) + ($k$3$i<<2)|0);
       HEAP32[$arrayidx284$i>>2] = $mul268$i;
       $a$0$lcssa376$i = $a$1$i;$rp$0$lcssa377$i = $rp$1$i113;$z$0$i = $inc283$i;
      }
     }
     $sub286$i = (9 - ($cond254$i))|0;
     $add287$i = (($sub286$i) + ($rp$0$lcssa377$i))|0;
     $a$2$ph249$i = $a$0$lcssa376$i;$e2$0$ph$i = 0;$rp$2$ph247$i = $add287$i;$z$1$ph248$i = $z$0$i;
    }
    L285: while(1) {
     $cmp289$i = ($rp$2$ph247$i|0)<(18);
     $arrayidx294$i = (($x$i) + ($a$2$ph249$i<<2)|0);
     if ($cmp289$i) {
      $e2$0$us$i = $e2$0$ph$i;$z$1$us$i = $z$1$ph248$i;
      while(1) {
       $sub301$us$i = (($z$1$us$i) + 127)|0;
       $carry299$0$us$i = 0;$k$5$in$us$i = $sub301$us$i;$z$2$us$i = $z$1$us$i;
       while(1) {
        $k$5$us$i = $k$5$in$us$i & 127;
        $arrayidx306$us$i = (($x$i) + ($k$5$us$i<<2)|0);
        $213 = HEAP32[$arrayidx306$us$i>>2]|0;
        $214 = (_bitshift64Shl(($213|0),0,29)|0);
        $215 = tempRet0;
        $216 = (_i64Add(($214|0),($215|0),($carry299$0$us$i|0),0)|0);
        $217 = tempRet0;
        $218 = ($217>>>0)>(0);
        $219 = ($217|0)==(0);
        $220 = ($216>>>0)>(1000000000);
        $221 = $219 & $220;
        $222 = $218 | $221;
        if ($222) {
         $223 = (___udivdi3(($216|0),($217|0),1000000000,0)|0);
         $224 = tempRet0;
         $225 = (___uremdi3(($216|0),($217|0),1000000000,0)|0);
         $226 = tempRet0;
         $carry299$1$us$i = $223;$rem315$sink$off0$us$i = $225;
        } else {
         $carry299$1$us$i = 0;$rem315$sink$off0$us$i = $216;
        }
        HEAP32[$arrayidx306$us$i>>2] = $rem315$sink$off0$us$i;
        $sub322$us$i = (($z$2$us$i) + 127)|0;
        $and323$us$i = $sub322$us$i & 127;
        $cmp324$us$i = ($k$5$us$i|0)!=($and323$us$i|0);
        $cmp327$us$i = ($k$5$us$i|0)==($a$2$ph249$i|0);
        $or$cond224$us$i = $cmp324$us$i | $cmp327$us$i;
        if ($or$cond224$us$i) {
         $z$3$us$i = $z$2$us$i;
        } else {
         $tobool331$us$i = ($rem315$sink$off0$us$i|0)==(0);
         $k$5$z$2$us$i = $tobool331$us$i ? $k$5$us$i : $z$2$us$i;
         $z$3$us$i = $k$5$z$2$us$i;
        }
        $sub339$us$i = (($k$5$us$i) + -1)|0;
        if ($cmp327$us$i) {
         break;
        } else {
         $carry299$0$us$i = $carry299$1$us$i;$k$5$in$us$i = $sub339$us$i;$z$2$us$i = $z$3$us$i;
        }
       }
       $sub300$us$i = (($e2$0$us$i) + -29)|0;
       $tobool342$us$i = ($carry299$1$us$i|0)==(0);
       if ($tobool342$us$i) {
        $e2$0$us$i = $sub300$us$i;$z$1$us$i = $z$3$us$i;
       } else {
        $carry299$1$lcssa$lcssa$i = $carry299$1$us$i;$sub300$lcssa$i = $sub300$us$i;$z$3$lcssa$lcssa$i = $z$3$us$i;
        break;
       }
      }
     } else {
      $cmp292$i = ($rp$2$ph247$i|0)==(18);
      if ($cmp292$i) {
       $e2$0$us253$i = $e2$0$ph$i;$z$1$us254$i = $z$1$ph248$i;
      } else {
       $a$3$ph$i = $a$2$ph249$i;$e2$1$ph$i = $e2$0$ph$i;$rp$3$ph244$i = $rp$2$ph247$i;$z$5$ph$i = $z$1$ph248$i;
       break;
      }
      while(1) {
       $227 = HEAP32[$arrayidx294$i>>2]|0;
       $cmp295$us257$i = ($227>>>0)<(9007199);
       if (!($cmp295$us257$i)) {
        $a$3$ph$i = $a$2$ph249$i;$e2$1$ph$i = $e2$0$us253$i;$rp$3$ph244$i = 18;$z$5$ph$i = $z$1$us254$i;
        break L285;
       }
       $sub301$us260$i = (($z$1$us254$i) + 127)|0;
       $carry299$0$us264$i = 0;$k$5$in$us263$i = $sub301$us260$i;$z$2$us262$i = $z$1$us254$i;
       while(1) {
        $k$5$us265$i = $k$5$in$us263$i & 127;
        $arrayidx306$us266$i = (($x$i) + ($k$5$us265$i<<2)|0);
        $228 = HEAP32[$arrayidx306$us266$i>>2]|0;
        $229 = (_bitshift64Shl(($228|0),0,29)|0);
        $230 = tempRet0;
        $231 = (_i64Add(($229|0),($230|0),($carry299$0$us264$i|0),0)|0);
        $232 = tempRet0;
        $233 = ($232>>>0)>(0);
        $234 = ($232|0)==(0);
        $235 = ($231>>>0)>(1000000000);
        $236 = $234 & $235;
        $237 = $233 | $236;
        if ($237) {
         $238 = (___udivdi3(($231|0),($232|0),1000000000,0)|0);
         $239 = tempRet0;
         $240 = (___uremdi3(($231|0),($232|0),1000000000,0)|0);
         $241 = tempRet0;
         $carry299$1$us280$i = $238;$rem315$sink$off0$us279$i = $240;
        } else {
         $carry299$1$us280$i = 0;$rem315$sink$off0$us279$i = $231;
        }
        HEAP32[$arrayidx306$us266$i>>2] = $rem315$sink$off0$us279$i;
        $sub322$us281$i = (($z$2$us262$i) + 127)|0;
        $and323$us282$i = $sub322$us281$i & 127;
        $cmp324$us283$i = ($k$5$us265$i|0)!=($and323$us282$i|0);
        $cmp327$us284$i = ($k$5$us265$i|0)==($a$2$ph249$i|0);
        $or$cond224$us285$i = $cmp324$us283$i | $cmp327$us284$i;
        if ($or$cond224$us285$i) {
         $z$3$us290$i = $z$2$us262$i;
        } else {
         $tobool331$us287$i = ($rem315$sink$off0$us279$i|0)==(0);
         $k$5$z$2$us288$i = $tobool331$us287$i ? $k$5$us265$i : $z$2$us262$i;
         $z$3$us290$i = $k$5$z$2$us288$i;
        }
        $sub339$us291$i = (($k$5$us265$i) + -1)|0;
        if ($cmp327$us284$i) {
         break;
        } else {
         $carry299$0$us264$i = $carry299$1$us280$i;$k$5$in$us263$i = $sub339$us291$i;$z$2$us262$i = $z$3$us290$i;
        }
       }
       $sub300$us259$i = (($e2$0$us253$i) + -29)|0;
       $tobool342$us295$i = ($carry299$1$us280$i|0)==(0);
       if ($tobool342$us295$i) {
        $e2$0$us253$i = $sub300$us259$i;$z$1$us254$i = $z$3$us290$i;
       } else {
        $carry299$1$lcssa$lcssa$i = $carry299$1$us280$i;$sub300$lcssa$i = $sub300$us259$i;$z$3$lcssa$lcssa$i = $z$3$us290$i;
        break;
       }
      }
     }
     $add344$i = (($rp$2$ph247$i) + 9)|0;
     $sub345$i = (($a$2$ph249$i) + 127)|0;
     $and346$i = $sub345$i & 127;
     $cmp347$i = ($and346$i|0)==($z$3$lcssa$lcssa$i|0);
     if ($cmp347$i) {
      $sub350$i = (($z$3$lcssa$lcssa$i) + 127)|0;
      $and351$i = $sub350$i & 127;
      $arrayidx352$i = (($x$i) + ($and351$i<<2)|0);
      $242 = HEAP32[$arrayidx352$i>>2]|0;
      $sub353$i = (($z$3$lcssa$lcssa$i) + 126)|0;
      $and354$i = $sub353$i & 127;
      $arrayidx355$i = (($x$i) + ($and354$i<<2)|0);
      $243 = HEAP32[$arrayidx355$i>>2]|0;
      $or356$i = $243 | $242;
      HEAP32[$arrayidx355$i>>2] = $or356$i;
      $z$4$i = $and351$i;
     } else {
      $z$4$i = $z$3$lcssa$lcssa$i;
     }
     $arrayidx358$i = (($x$i) + ($and346$i<<2)|0);
     HEAP32[$arrayidx358$i>>2] = $carry299$1$lcssa$lcssa$i;
     $a$2$ph249$i = $and346$i;$e2$0$ph$i = $sub300$lcssa$i;$rp$2$ph247$i = $add344$i;$z$1$ph248$i = $z$4$i;
    }
    L316: while(1) {
     $add435$i = (($z$5$ph$i) + 1)|0;
     $and436$i = $add435$i & 127;
     $sub444$i = (($z$5$ph$i) + 127)|0;
     $and445$i = $sub444$i & 127;
     $arrayidx446$i = (($x$i) + ($and445$i<<2)|0);
     $a$3$i$ph = $a$3$ph$i;$e2$1$i$ph = $e2$1$ph$i;$rp$3$i$ph = $rp$3$ph244$i;
     while(1) {
      $cmp393$i = ($rp$3$i$ph|0)==(18);
      $cmp397$i = ($rp$3$i$ph|0)>(27);
      $$$i = $cmp397$i ? 9 : 1;
      $a$3$i = $a$3$i$ph;$e2$1$i = $e2$1$i$ph;
      while(1) {
       $i$0235$i = 0;
       while(1) {
        $add368$i = (($i$0235$i) + ($a$3$i))|0;
        $and369$i = $add368$i & 127;
        $cmp370$i = ($and369$i|0)==($z$5$ph$i|0);
        if ($cmp370$i) {
         $i$1$i = 2;
         break;
        }
        $arrayidx373$i = (($x$i) + ($and369$i<<2)|0);
        $244 = HEAP32[$arrayidx373$i>>2]|0;
        $arrayidx374$i = (14600 + ($i$0235$i<<2)|0);
        $245 = HEAP32[$arrayidx374$i>>2]|0;
        $cmp375$i = ($244>>>0)<($245>>>0);
        if ($cmp375$i) {
         $i$1$i = 2;
         break;
        }
        $cmp383$i = ($244>>>0)>($245>>>0);
        $inc388$i = (($i$0235$i) + 1)|0;
        if ($cmp383$i) {
         $i$1$i = $i$0235$i;
         break;
        }
        $cmp365$i = ($inc388$i|0)<(2);
        if ($cmp365$i) {
         $i$0235$i = $inc388$i;
        } else {
         $i$1$i = $inc388$i;
         break;
        }
       }
       $cmp390$i = ($i$1$i|0)==(2);
       $or$cond225$i = $cmp390$i & $cmp393$i;
       if ($or$cond225$i) {
        break L316;
       }
       $add401$i = (($$$i) + ($e2$1$i))|0;
       $cmp403236$i = ($a$3$i|0)==($z$5$ph$i|0);
       if ($cmp403236$i) {
        $a$3$i = $z$5$ph$i;$e2$1$i = $add401$i;
       } else {
        break;
       }
      }
      $shl409$i = 1 << $$$i;
      $sub410$i = (($shl409$i) + -1)|0;
      $shr416$i = 1000000000 >>> $$$i;
      $a$4238$i = $a$3$i;$carry362$0241$i = 0;$k$6239$i = $a$3$i;$rp$4237$i = $rp$3$i$ph;
      while(1) {
       $arrayidx408$i = (($x$i) + ($k$6239$i<<2)|0);
       $246 = HEAP32[$arrayidx408$i>>2]|0;
       $and411$i = $246 & $sub410$i;
       $shr413$i = $246 >>> $$$i;
       $add414$i = (($shr413$i) + ($carry362$0241$i))|0;
       HEAP32[$arrayidx408$i>>2] = $add414$i;
       $mul417$i = Math_imul($and411$i, $shr416$i)|0;
       $cmp418$i = ($k$6239$i|0)==($a$4238$i|0);
       $tobool422$i = ($add414$i|0)==(0);
       $or$cond226$i = $cmp418$i & $tobool422$i;
       $add424$i = (($k$6239$i) + 1)|0;
       $and425$i = $add424$i & 127;
       $sub427$i = (($rp$4237$i) + -9)|0;
       $rp$5$i = $or$cond226$i ? $sub427$i : $rp$4237$i;
       $a$5$i = $or$cond226$i ? $and425$i : $a$4238$i;
       $cmp403$i = ($and425$i|0)==($z$5$ph$i|0);
       if ($cmp403$i) {
        break;
       } else {
        $a$4238$i = $a$5$i;$carry362$0241$i = $mul417$i;$k$6239$i = $and425$i;$rp$4237$i = $rp$5$i;
       }
      }
      $tobool433$i = ($mul417$i|0)==(0);
      if ($tobool433$i) {
       $a$3$i$ph = $a$5$i;$e2$1$i$ph = $add401$i;$rp$3$i$ph = $rp$5$i;
       continue;
      }
      $cmp437$i = ($and436$i|0)==($a$5$i|0);
      if (!($cmp437$i)) {
       break;
      }
      $247 = HEAP32[$arrayidx446$i>>2]|0;
      $or447$i = $247 | 1;
      HEAP32[$arrayidx446$i>>2] = $or447$i;
      $a$3$i$ph = $a$5$i;$e2$1$i$ph = $add401$i;$rp$3$i$ph = $rp$5$i;
     }
     $arrayidx440$i = (($x$i) + ($z$5$ph$i<<2)|0);
     HEAP32[$arrayidx440$i>>2] = $mul417$i;
     $a$3$ph$i = $a$5$i;$e2$1$ph$i = $add401$i;$rp$3$ph244$i = $rp$5$i;$z$5$ph$i = $and436$i;
    }
    $and456$i = $a$3$i & 127;
    $cmp457$i = ($and456$i|0)==($z$5$ph$i|0);
    if ($cmp457$i) {
     $sub462$i = (($and436$i) + -1)|0;
     $arrayidx463$i = (($x$i) + ($sub462$i<<2)|0);
     HEAP32[$arrayidx463$i>>2] = 0;
     $z$7$i = $and436$i;
    } else {
     $z$7$i = $z$5$ph$i;
    }
    $arrayidx468$i = (($x$i) + ($and456$i<<2)|0);
    $248 = HEAP32[$arrayidx468$i>>2]|0;
    $conv469$i = (+($248>>>0));
    $add455$1$i = (($a$3$i) + 1)|0;
    $and456$1$i = $add455$1$i & 127;
    $cmp457$1$i = ($and456$1$i|0)==($z$7$i|0);
    if ($cmp457$1$i) {
     $add460$1$i = (($z$7$i) + 1)|0;
     $and461$1$i = $add460$1$i & 127;
     $sub462$1$i = (($and461$1$i) + -1)|0;
     $arrayidx463$1$i = (($x$i) + ($sub462$1$i<<2)|0);
     HEAP32[$arrayidx463$1$i>>2] = 0;
     $z$7$1$i = $and461$1$i;
    } else {
     $z$7$1$i = $z$7$i;
    }
    $mul465$1$i = $conv469$i * 1.0E+9;
    $arrayidx468$1$i = (($x$i) + ($and456$1$i<<2)|0);
    $251 = HEAP32[$arrayidx468$1$i>>2]|0;
    $conv469$1$i = (+($251>>>0));
    $add470$1$i = $mul465$1$i + $conv469$1$i;
    $conv474$i = (+($sign$0|0));
    $mul475$i = $conv474$i * $add470$1$i;
    $add476$i = (($e2$1$i) + 53)|0;
    $sub477$i = (($add476$i) - ($emin$0$ph))|0;
    $cmp478$i = ($sub477$i|0)<($bits$0$ph|0);
    if ($cmp478$i) {
     $cmp483$i = ($sub477$i|0)<(0);
     $$sub482$i = $cmp483$i ? 0 : $sub477$i;
     $bits$addr$0$i114 = $$sub482$i;$denormal$0$i = 1;
    } else {
     $bits$addr$0$i114 = $bits$0$ph;$denormal$0$i = 0;
    }
    $cmp488$i = ($bits$addr$0$i114|0)<(53);
    if ($cmp488$i) {
     $sub492$i = (105 - ($bits$addr$0$i114))|0;
     $call493$i = (+_scalbn(1.0,$sub492$i));
     $call494$i = (+_copysignl((+$call493$i),(+$mul475$i)));
     $sub495$i = (53 - ($bits$addr$0$i114))|0;
     $call496$i = (+_scalbn(1.0,$sub495$i));
     $call497$i = (+_fmodl((+$mul475$i),(+$call496$i)));
     $sub498$i = $mul475$i - $call497$i;
     $add499$i = $call494$i + $sub498$i;
     $bias$0$i = $call494$i;$frac$0$i = $call497$i;$y$1$i115 = $add499$i;
    } else {
     $bias$0$i = 0.0;$frac$0$i = 0.0;$y$1$i115 = $mul475$i;
    }
    $add501$i = (($a$3$i) + 2)|0;
    $and502$i = $add501$i & 127;
    $cmp503$i = ($and502$i|0)==($z$7$1$i|0);
    do {
     if ($cmp503$i) {
      $frac$2$i = $frac$0$i;
     } else {
      $arrayidx509$i = (($x$i) + ($and502$i<<2)|0);
      $249 = HEAP32[$arrayidx509$i>>2]|0;
      $cmp510$i = ($249>>>0)<(500000000);
      do {
       if ($cmp510$i) {
        $tobool513$i = ($249|0)==(0);
        if ($tobool513$i) {
         $add516$i = (($a$3$i) + 3)|0;
         $and517$i = $add516$i & 127;
         $cmp518$i = ($and517$i|0)==($z$7$1$i|0);
         if ($cmp518$i) {
          $frac$1$i = $frac$0$i;
          break;
         }
        }
        $mul522$i = $conv474$i * 0.25;
        $add523$i = $mul522$i + $frac$0$i;
        $frac$1$i = $add523$i;
       } else {
        $cmp525$i = ($249>>>0)>(500000000);
        if ($cmp525$i) {
         $mul529$i = $conv474$i * 0.75;
         $add530$i = $mul529$i + $frac$0$i;
         $frac$1$i = $add530$i;
         break;
        }
        $add536$i = (($a$3$i) + 3)|0;
        $and537$i = $add536$i & 127;
        $cmp538$i = ($and537$i|0)==($z$7$1$i|0);
        if ($cmp538$i) {
         $mul542$i = $conv474$i * 0.5;
         $add543$i = $mul542$i + $frac$0$i;
         $frac$1$i = $add543$i;
         break;
        } else {
         $mul546$i = $conv474$i * 0.75;
         $add547$i = $mul546$i + $frac$0$i;
         $frac$1$i = $add547$i;
         break;
        }
       }
      } while(0);
      $sub552$i = (53 - ($bits$addr$0$i114))|0;
      $cmp553$i = ($sub552$i|0)>(1);
      if (!($cmp553$i)) {
       $frac$2$i = $frac$1$i;
       break;
      }
      $call556$i = (+_fmodl((+$frac$1$i),1.0));
      $tobool557$i = $call556$i != 0.0;
      if ($tobool557$i) {
       $frac$2$i = $frac$1$i;
       break;
      }
      $inc559$i = $frac$1$i + 1.0;
      $frac$2$i = $inc559$i;
     }
    } while(0);
    $add562$i = $y$1$i115 + $frac$2$i;
    $sub563$i = $add562$i - $bias$0$i;
    $and565$i = $add476$i & 2147483647;
    $sub566$i = (-2 - ($sum$i))|0;
    $cmp567$i = ($and565$i|0)>($sub566$i|0);
    do {
     if ($cmp567$i) {
      $call570$i = (+Math_abs((+$sub563$i)));
      $cmp571$i = !($call570$i >= 9007199254740992.0);
      if ($cmp571$i) {
       $denormal$2$i = $denormal$0$i;$e2$2$i = $e2$1$i;$y$2$i116 = $sub563$i;
      } else {
       $tobool574$i = ($denormal$0$i|0)!=(0);
       $cmp578$i = ($bits$addr$0$i114|0)==($sub477$i|0);
       $or$cond227$i = $tobool574$i & $cmp578$i;
       $denormal$1$i = $or$cond227$i ? 0 : $denormal$0$i;
       $mul582$i = $sub563$i * 0.5;
       $inc583$i = (($e2$1$i) + 1)|0;
       $denormal$2$i = $denormal$1$i;$e2$2$i = $inc583$i;$y$2$i116 = $mul582$i;
      }
      $250 = (($e2$2$i) + 50)|0;
      $cmp586$i = ($250|0)>($sub1$i|0);
      if (!($cmp586$i)) {
       $tobool589$i = ($denormal$2$i|0)!=(0);
       $tobool591$i = $frac$2$i != 0.0;
       $or$cond228$i = $tobool589$i & $tobool591$i;
       if (!($or$cond228$i)) {
        $e2$3$i = $e2$2$i;$y$3$i = $y$2$i116;
        break;
       }
      }
      $call593$i = (___errno_location()|0);
      HEAP32[$call593$i>>2] = 34;
      $e2$3$i = $e2$2$i;$y$3$i = $y$2$i116;
     } else {
      $e2$3$i = $e2$1$i;$y$3$i = $sub563$i;
     }
    } while(0);
    $call596$i = (+_scalbnl($y$3$i,$e2$3$i));
    $retval$0 = $call596$i;
    STACKTOP = sp;return (+$retval$0);
   } else if ((($i$3|0) == 3)) {
    $17 = HEAP32[$rpos>>2]|0;
    $18 = HEAP32[$shend>>2]|0;
    $cmp126 = ($17>>>0)<($18>>>0);
    if ($cmp126) {
     $incdec$ptr130 = (($17) + 1|0);
     HEAP32[$rpos>>2] = $incdec$ptr130;
     $19 = HEAP8[$17>>0]|0;
     $conv131 = $19&255;
     $cond135 = $conv131;
    } else {
     $call133 = (___shgetc($f)|0);
     $cond135 = $call133;
    }
    $cmp136 = ($cond135|0)==(40);
    if ($cmp136) {
     $i$4 = 1;
    } else {
     $20 = HEAP32[$shend>>2]|0;
     $tobool140 = ($20|0)==(0|0);
     if ($tobool140) {
      $retval$0 = nan;
      STACKTOP = sp;return (+$retval$0);
     }
     $21 = HEAP32[$rpos>>2]|0;
     $incdec$ptr143 = (($21) + -1|0);
     HEAP32[$rpos>>2] = $incdec$ptr143;
     $retval$0 = nan;
     STACKTOP = sp;return (+$retval$0);
    }
    while(1) {
     $22 = HEAP32[$rpos>>2]|0;
     $23 = HEAP32[$shend>>2]|0;
     $cmp150 = ($22>>>0)<($23>>>0);
     if ($cmp150) {
      $incdec$ptr154 = (($22) + 1|0);
      HEAP32[$rpos>>2] = $incdec$ptr154;
      $24 = HEAP8[$22>>0]|0;
      $conv155 = $24&255;
      $cond159 = $conv155;
     } else {
      $call157 = (___shgetc($f)|0);
      $cond159 = $call157;
     }
     $sub160 = (($cond159) + -48)|0;
     $cmp161 = ($sub160>>>0)<(10);
     $sub164 = (($cond159) + -65)|0;
     $cmp165 = ($sub164>>>0)<(26);
     $or$cond81 = $cmp161 | $cmp165;
     if (!($or$cond81)) {
      $sub168 = (($cond159) + -97)|0;
      $cmp169 = ($sub168>>>0)<(26);
      $cmp172 = ($cond159|0)==(95);
      $or$cond2 = $cmp169 | $cmp172;
      if (!($or$cond2)) {
       break;
      }
     }
     $inc204 = (($i$4) + 1)|0;
     $i$4 = $inc204;
    }
    $cmp176 = ($cond159|0)==(41);
    if ($cmp176) {
     $retval$0 = nan;
     STACKTOP = sp;return (+$retval$0);
    }
    $25 = HEAP32[$shend>>2]|0;
    $tobool181 = ($25|0)==(0|0);
    if (!($tobool181)) {
     $26 = HEAP32[$rpos>>2]|0;
     $incdec$ptr184 = (($26) + -1|0);
     HEAP32[$rpos>>2] = $incdec$ptr184;
    }
    if ($tobool55) {
     $call189 = (___errno_location()|0);
     HEAP32[$call189>>2] = 22;
     ___shlim($f,0);
     $retval$0 = 0.0;
     STACKTOP = sp;return (+$retval$0);
    }
    $tobool193123 = ($i$4|0)==(0);
    $brmerge176 = $tobool193123 | $tobool181;
    if ($brmerge176) {
     $retval$0 = nan;
     STACKTOP = sp;return (+$retval$0);
    } else {
     $dec192124$in = $i$4;
    }
    while(1) {
     $dec192124 = (($dec192124$in) + -1)|0;
     $27 = HEAP32[$rpos>>2]|0;
     $incdec$ptr199 = (($27) + -1|0);
     HEAP32[$rpos>>2] = $incdec$ptr199;
     $tobool193 = ($dec192124|0)==(0);
     if ($tobool193) {
      $retval$0 = nan;
      break;
     } else {
      $dec192124$in = $dec192124;
     }
    }
    STACKTOP = sp;return (+$retval$0);
   } else {
    $28 = HEAP32[$shend>>2]|0;
    $tobool209 = ($28|0)==(0|0);
    if (!($tobool209)) {
     $29 = HEAP32[$rpos>>2]|0;
     $incdec$ptr212 = (($29) + -1|0);
     HEAP32[$rpos>>2] = $incdec$ptr212;
    }
    $call215 = (___errno_location()|0);
    HEAP32[$call215>>2] = 22;
    ___shlim($f,0);
    $retval$0 = 0.0;
    STACKTOP = sp;return (+$retval$0);
   }
  }
 } while(0);
 if ((label|0) == 23) {
  $10 = HEAP32[$shend>>2]|0;
  $tobool61 = ($10|0)==(0|0);
  if (!($tobool61)) {
   $11 = HEAP32[$rpos>>2]|0;
   $incdec$ptr64 = (($11) + -1|0);
   HEAP32[$rpos>>2] = $incdec$ptr64;
  }
  $notlhs = ($pok|0)==(0);
  $notrhs = ($i$0$lcssa>>>0)<(4);
  $or$cond175$not = $notrhs | $notlhs;
  $brmerge = $or$cond175$not | $tobool61;
  if (!($brmerge)) {
   $i$1152 = $i$0$lcssa;
   while(1) {
    $12 = HEAP32[$rpos>>2]|0;
    $incdec$ptr77 = (($12) + -1|0);
    HEAP32[$rpos>>2] = $incdec$ptr77;
    $dec = (($i$1152) + -1)|0;
    $cmp70 = ($dec>>>0)>(3);
    if ($cmp70) {
     $i$1152 = $dec;
    } else {
     break;
    }
   }
  }
 }
 $conv84 = (+($sign$0|0));
 $mul85 = $conv84 * inf;
 $conv86 = $mul85;
 $retval$0 = $conv86;
 STACKTOP = sp;return (+$retval$0);
}
function _scanexp($f,$pok) {
 $f = $f|0;
 $pok = $pok|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $add = 0, $c$0 = 0, $c$1$be = 0, $c$142 = 0, $c$2$be = 0, $c$2$lcssa = 0, $c$237 = 0, $c$3$be = 0, $call = 0, $call104 = 0, $call17 = 0, $call58 = 0, $call85 = 0, $cmp = 0;
 var $cmp10 = 0, $cmp20 = 0, $cmp32 = 0, $cmp4 = 0, $cmp44 = 0, $cmp46 = 0, $cmp46$ = 0, $cmp51 = 0, $cmp64 = 0, $cmp6436 = 0, $cmp78 = 0, $cmp91 = 0, $cmp9134 = 0, $cmp97 = 0, $cond = 0, $cond19 = 0, $conv = 0, $conv102 = 0, $conv15 = 0, $conv56 = 0;
 var $conv7 = 0, $conv83 = 0, $incdec$ptr = 0, $incdec$ptr101 = 0, $incdec$ptr112 = 0, $incdec$ptr14 = 0, $incdec$ptr27 = 0, $incdec$ptr39 = 0, $incdec$ptr55 = 0, $incdec$ptr82 = 0, $neg$0 = 0, $or$cond = 0, $or$cond32 = 0, $phitmp47 = 0, $rpos = 0, $shend = 0, $sub = 0, $sub31 = 0, $sub43 = 0, $sub48 = 0;
 var $sub63 = 0, $sub6335 = 0, $sub90 = 0, $sub9033 = 0, $tobool = 0, $tobool109 = 0, $tobool115 = 0, $tobool24 = 0, $tobool36 = 0, $x$043 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $rpos = (($f) + 4|0);
 $0 = HEAP32[$rpos>>2]|0;
 $shend = (($f) + 100|0);
 $1 = HEAP32[$shend>>2]|0;
 $cmp = ($0>>>0)<($1>>>0);
 if ($cmp) {
  $incdec$ptr = (($0) + 1|0);
  HEAP32[$rpos>>2] = $incdec$ptr;
  $2 = HEAP8[$0>>0]|0;
  $conv = $2&255;
  $cond = $conv;
 } else {
  $call = (___shgetc($f)|0);
  $cond = $call;
 }
 $cmp4 = ($cond|0)==(45);
 if ((($cond|0) == 43) | (($cond|0) == 45)) {
  $conv7 = $cmp4&1;
  $3 = HEAP32[$rpos>>2]|0;
  $4 = HEAP32[$shend>>2]|0;
  $cmp10 = ($3>>>0)<($4>>>0);
  if ($cmp10) {
   $incdec$ptr14 = (($3) + 1|0);
   HEAP32[$rpos>>2] = $incdec$ptr14;
   $5 = HEAP8[$3>>0]|0;
   $conv15 = $5&255;
   $cond19 = $conv15;
  } else {
   $call17 = (___shgetc($f)|0);
   $cond19 = $call17;
  }
  $sub = (($cond19) + -48)|0;
  $cmp20 = ($sub>>>0)<(10);
  $tobool = ($pok|0)==(0);
  $or$cond = $cmp20 | $tobool;
  if ($or$cond) {
   $c$0 = $cond19;$neg$0 = $conv7;
  } else {
   $6 = HEAP32[$shend>>2]|0;
   $tobool24 = ($6|0)==(0|0);
   if ($tobool24) {
    $c$0 = $cond19;$neg$0 = $conv7;
   } else {
    $7 = HEAP32[$rpos>>2]|0;
    $incdec$ptr27 = (($7) + -1|0);
    HEAP32[$rpos>>2] = $incdec$ptr27;
    $c$0 = $cond19;$neg$0 = $conv7;
   }
  }
 } else {
  $c$0 = $cond;$neg$0 = 0;
 }
 $sub31 = (($c$0) + -48)|0;
 $cmp32 = ($sub31>>>0)>(9);
 if ($cmp32) {
  $8 = HEAP32[$shend>>2]|0;
  $tobool36 = ($8|0)==(0|0);
  if ($tobool36) {
   $44 = -2147483648;$45 = 0;
   tempRet0 = $44;
   STACKTOP = sp;return ($45|0);
  }
  $9 = HEAP32[$rpos>>2]|0;
  $incdec$ptr39 = (($9) + -1|0);
  HEAP32[$rpos>>2] = $incdec$ptr39;
  $44 = -2147483648;$45 = 0;
  tempRet0 = $44;
  STACKTOP = sp;return ($45|0);
 } else {
  $c$142 = $c$0;$x$043 = 0;
 }
 while(1) {
  $add = (($c$142) + -48)|0;
  $sub48 = (($add) + ($x$043))|0;
  $10 = HEAP32[$rpos>>2]|0;
  $11 = HEAP32[$shend>>2]|0;
  $cmp51 = ($10>>>0)<($11>>>0);
  if ($cmp51) {
   $incdec$ptr55 = (($10) + 1|0);
   HEAP32[$rpos>>2] = $incdec$ptr55;
   $12 = HEAP8[$10>>0]|0;
   $conv56 = $12&255;
   $c$1$be = $conv56;
  } else {
   $call58 = (___shgetc($f)|0);
   $c$1$be = $call58;
  }
  $sub43 = (($c$1$be) + -48)|0;
  $cmp44 = ($sub43>>>0)<(10);
  $cmp46 = ($sub48|0)<(214748364);
  $cmp46$ = $cmp44 & $cmp46;
  if (!($cmp46$)) {
   break;
  }
  $phitmp47 = ($sub48*10)|0;
  $c$142 = $c$1$be;$x$043 = $phitmp47;
 }
 $13 = ($sub48|0)<(0);
 $14 = $13 << 31 >> 31;
 $sub6335 = (($c$1$be) + -48)|0;
 $cmp6436 = ($sub6335>>>0)<(10);
 if ($cmp6436) {
  $15 = $sub48;$16 = $14;$c$237 = $c$1$be;
  while(1) {
   $17 = (___muldi3(($15|0),($16|0),10,0)|0);
   $18 = tempRet0;
   $19 = ($c$237|0)<(0);
   $20 = $19 << 31 >> 31;
   $21 = (_i64Add(($c$237|0),($20|0),-48,-1)|0);
   $22 = tempRet0;
   $23 = (_i64Add(($21|0),($22|0),($17|0),($18|0))|0);
   $24 = tempRet0;
   $25 = HEAP32[$rpos>>2]|0;
   $26 = HEAP32[$shend>>2]|0;
   $cmp78 = ($25>>>0)<($26>>>0);
   if ($cmp78) {
    $incdec$ptr82 = (($25) + 1|0);
    HEAP32[$rpos>>2] = $incdec$ptr82;
    $27 = HEAP8[$25>>0]|0;
    $conv83 = $27&255;
    $c$2$be = $conv83;
   } else {
    $call85 = (___shgetc($f)|0);
    $c$2$be = $call85;
   }
   $sub63 = (($c$2$be) + -48)|0;
   $cmp64 = ($sub63>>>0)<(10);
   $28 = ($24|0)<(21474836);
   $29 = ($24|0)==(21474836);
   $30 = ($23>>>0)<(2061584302);
   $31 = $29 & $30;
   $32 = $28 | $31;
   $or$cond32 = $cmp64 & $32;
   if ($or$cond32) {
    $15 = $23;$16 = $24;$c$237 = $c$2$be;
   } else {
    $38 = $23;$39 = $24;$c$2$lcssa = $c$2$be;
    break;
   }
  }
 } else {
  $38 = $sub48;$39 = $14;$c$2$lcssa = $c$1$be;
 }
 $sub9033 = (($c$2$lcssa) + -48)|0;
 $cmp9134 = ($sub9033>>>0)<(10);
 if ($cmp9134) {
  while(1) {
   $33 = HEAP32[$rpos>>2]|0;
   $34 = HEAP32[$shend>>2]|0;
   $cmp97 = ($33>>>0)<($34>>>0);
   if ($cmp97) {
    $incdec$ptr101 = (($33) + 1|0);
    HEAP32[$rpos>>2] = $incdec$ptr101;
    $35 = HEAP8[$33>>0]|0;
    $conv102 = $35&255;
    $c$3$be = $conv102;
   } else {
    $call104 = (___shgetc($f)|0);
    $c$3$be = $call104;
   }
   $sub90 = (($c$3$be) + -48)|0;
   $cmp91 = ($sub90>>>0)<(10);
   if (!($cmp91)) {
    break;
   }
  }
 }
 $36 = HEAP32[$shend>>2]|0;
 $tobool109 = ($36|0)==(0|0);
 if (!($tobool109)) {
  $37 = HEAP32[$rpos>>2]|0;
  $incdec$ptr112 = (($37) + -1|0);
  HEAP32[$rpos>>2] = $incdec$ptr112;
 }
 $tobool115 = ($neg$0|0)!=(0);
 $40 = (_i64Subtract(0,0,($38|0),($39|0))|0);
 $41 = tempRet0;
 $42 = $tobool115 ? $40 : $38;
 $43 = $tobool115 ? $41 : $39;
 $44 = $43;$45 = $42;
 tempRet0 = $44;
 STACKTOP = sp;return ($45|0);
}
function ___shlim($f,$lim) {
 $f = $f|0;
 $lim = $lim|0;
 var $0 = 0, $1 = 0, $add$ptr = 0, $cmp = 0, $or$cond = 0, $rend = 0, $rpos = 0, $shcnt = 0, $shend = 0, $shend4 = 0, $shlim = 0, $sub$ptr$lhs$cast = 0, $sub$ptr$rhs$cast = 0, $sub$ptr$sub = 0, $tobool = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $shlim = (($f) + 104|0);
 HEAP32[$shlim>>2] = $lim;
 $rend = (($f) + 8|0);
 $0 = HEAP32[$rend>>2]|0;
 $rpos = (($f) + 4|0);
 $1 = HEAP32[$rpos>>2]|0;
 $sub$ptr$lhs$cast = $0;
 $sub$ptr$rhs$cast = $1;
 $sub$ptr$sub = (($sub$ptr$lhs$cast) - ($sub$ptr$rhs$cast))|0;
 $shcnt = (($f) + 108|0);
 HEAP32[$shcnt>>2] = $sub$ptr$sub;
 $tobool = ($lim|0)!=(0);
 $cmp = ($sub$ptr$sub|0)>($lim|0);
 $or$cond = $tobool & $cmp;
 if ($or$cond) {
  $add$ptr = (($1) + ($lim)|0);
  $shend = (($f) + 100|0);
  HEAP32[$shend>>2] = $add$ptr;
  STACKTOP = sp;return;
 } else {
  $shend4 = (($f) + 100|0);
  HEAP32[$shend4>>2] = $0;
  STACKTOP = sp;return;
 }
}
function ___shgetc($f) {
 $f = $f|0;
 var $$pre = 0, $$pre24 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $add = 0, $add$ptr = 0, $add29 = 0, $arrayidx = 0, $call = 0, $cmp = 0, $cmp2 = 0, $cmp32 = 0, $cmp9 = 0, $conv = 0, $conv35 = 0;
 var $rend17$phi$trans$insert = 0, $retval$0 = 0, $rpos = 0, $rpos31$phi$trans$insert = 0, $shcnt = 0, $shcnt28 = 0, $shcnt7 = 0, $shend = 0, $shend16 = 0, $shend18 = 0, $shlim = 0, $sub = 0, $sub$ptr$lhs$cast = 0, $sub$ptr$lhs$cast25 = 0, $sub$ptr$rhs$cast = 0, $sub$ptr$rhs$cast26 = 0, $sub$ptr$sub = 0, $sub$ptr$sub27 = 0, $sub8 = 0, $tobool = 0;
 var $tobool21 = 0, $tobool4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $shlim = (($f) + 104|0);
 $0 = HEAP32[$shlim>>2]|0;
 $tobool = ($0|0)==(0);
 if ($tobool) {
  label = 3;
 } else {
  $shcnt = (($f) + 108|0);
  $1 = HEAP32[$shcnt>>2]|0;
  $cmp = ($1|0)<($0|0);
  if ($cmp) {
   label = 3;
  }
 }
 if ((label|0) == 3) {
  $call = (___uflow($f)|0);
  $cmp2 = ($call|0)<(0);
  if (!($cmp2)) {
   $2 = HEAP32[$shlim>>2]|0;
   $tobool4 = ($2|0)==(0);
   $rend17$phi$trans$insert = (($f) + 8|0);
   $$pre = HEAP32[$rend17$phi$trans$insert>>2]|0;
   if ($tobool4) {
    label = 8;
   } else {
    $rpos = (($f) + 4|0);
    $3 = HEAP32[$rpos>>2]|0;
    $sub$ptr$lhs$cast = $$pre;
    $sub$ptr$rhs$cast = $3;
    $sub$ptr$sub = (($sub$ptr$lhs$cast) - ($sub$ptr$rhs$cast))|0;
    $shcnt7 = (($f) + 108|0);
    $4 = HEAP32[$shcnt7>>2]|0;
    $sub = (($2) - ($4))|0;
    $sub8 = (($sub) + -1)|0;
    $cmp9 = ($sub$ptr$sub|0)>($sub8|0);
    if ($cmp9) {
     $add$ptr = (($3) + ($sub8)|0);
     $shend16 = (($f) + 100|0);
     HEAP32[$shend16>>2] = $add$ptr;
    } else {
     label = 8;
    }
   }
   if ((label|0) == 8) {
    $shend18 = (($f) + 100|0);
    HEAP32[$shend18>>2] = $$pre;
   }
   $tobool21 = ($$pre|0)==(0|0);
   $rpos31$phi$trans$insert = (($f) + 4|0);
   $$pre24 = HEAP32[$rpos31$phi$trans$insert>>2]|0;
   if (!($tobool21)) {
    $sub$ptr$lhs$cast25 = $$pre;
    $sub$ptr$rhs$cast26 = $$pre24;
    $shcnt28 = (($f) + 108|0);
    $5 = HEAP32[$shcnt28>>2]|0;
    $sub$ptr$sub27 = (($sub$ptr$lhs$cast25) + 1)|0;
    $add = (($sub$ptr$sub27) - ($sub$ptr$rhs$cast26))|0;
    $add29 = (($add) + ($5))|0;
    HEAP32[$shcnt28>>2] = $add29;
   }
   $arrayidx = (($$pre24) + -1|0);
   $6 = HEAP8[$arrayidx>>0]|0;
   $conv = $6&255;
   $cmp32 = ($conv|0)==($call|0);
   if ($cmp32) {
    $retval$0 = $call;
    STACKTOP = sp;return ($retval$0|0);
   }
   $conv35 = $call&255;
   HEAP8[$arrayidx>>0] = $conv35;
   $retval$0 = $call;
   STACKTOP = sp;return ($retval$0|0);
  }
 }
 $shend = (($f) + 100|0);
 HEAP32[$shend>>2] = 0;
 $retval$0 = -1;
 STACKTOP = sp;return ($retval$0|0);
}
function _frexp($x,$e) {
 $x = +$x;
 $e = $e|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0.0, $call = 0.0, $conv = 0, $mul = 0.0, $retval$0 = 0.0, $storemerge = 0, $sub = 0, $sub8 = 0, $tobool1 = 0, $x$addr$0 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAPF64[tempDoublePtr>>3] = $x;$0 = HEAP32[tempDoublePtr>>2]|0;
 $1 = HEAP32[tempDoublePtr+4>>2]|0;
 $2 = (_bitshift64Lshr(($0|0),($1|0),52)|0);
 $3 = tempRet0;
 $conv = $2 & 2047;
 if ((($conv|0) == 2047)) {
  $retval$0 = $x;
  STACKTOP = sp;return (+$retval$0);
 } else if ((($conv|0) == 0)) {
  $tobool1 = $x != 0.0;
  if ($tobool1) {
   $mul = $x * 18446744073709551616.0;
   $call = (+_frexp($mul,$e));
   $4 = HEAP32[$e>>2]|0;
   $sub = (($4) + -64)|0;
   $storemerge = $sub;$x$addr$0 = $call;
  } else {
   $storemerge = 0;$x$addr$0 = $x;
  }
  HEAP32[$e>>2] = $storemerge;
  $retval$0 = $x$addr$0;
  STACKTOP = sp;return (+$retval$0);
 } else {
  $sub8 = (($conv) + -1022)|0;
  HEAP32[$e>>2] = $sub8;
  $5 = $1 & -2146435073;
  $6 = $5 | 1071644672;
  HEAP32[tempDoublePtr>>2] = $0;HEAP32[tempDoublePtr+4>>2] = $6;$7 = +HEAPF64[tempDoublePtr>>3];
  $retval$0 = $7;
  STACKTOP = sp;return (+$retval$0);
 }
 return +0;
}
function _frexpl($x,$e) {
 $x = +$x;
 $e = $e|0;
 var $call = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $call = (+_frexp($x,$e));
 STACKTOP = sp;return (+$call);
}
function _scalbn($x,$n) {
 $x = +$x;
 $n = $n|0;
 var $$add14 = 0, $$sub4 = 0, $0 = 0, $1 = 0, $2 = 0.0, $add = 0, $add14 = 0, $add21 = 0, $cmp = 0, $cmp1 = 0, $cmp11 = 0, $cmp15 = 0, $cmp5 = 0, $cmp8 = 0, $mul = 0.0, $mul10 = 0.0, $mul13 = 0.0, $mul22 = 0.0, $mul3 = 0.0, $n$addr$0 = 0;
 var $sub = 0, $sub4 = 0, $y$0 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $cmp = ($n|0)>(1023);
 if ($cmp) {
  $mul = $x * 8.98846567431157953864E+307;
  $sub = (($n) + -1023)|0;
  $cmp1 = ($sub|0)>(1023);
  if ($cmp1) {
   $mul3 = $mul * 8.98846567431157953864E+307;
   $sub4 = (($n) + -2046)|0;
   $cmp5 = ($sub4|0)>(1023);
   $$sub4 = $cmp5 ? 1023 : $sub4;
   $n$addr$0 = $$sub4;$y$0 = $mul3;
  } else {
   $n$addr$0 = $sub;$y$0 = $mul;
  }
 } else {
  $cmp8 = ($n|0)<(-1022);
  if ($cmp8) {
   $mul10 = $x * 2.22507385850720138309E-308;
   $add = (($n) + 1022)|0;
   $cmp11 = ($add|0)<(-1022);
   if ($cmp11) {
    $mul13 = $mul10 * 2.22507385850720138309E-308;
    $add14 = (($n) + 2044)|0;
    $cmp15 = ($add14|0)<(-1022);
    $$add14 = $cmp15 ? -1022 : $add14;
    $n$addr$0 = $$add14;$y$0 = $mul13;
   } else {
    $n$addr$0 = $add;$y$0 = $mul10;
   }
  } else {
   $n$addr$0 = $n;$y$0 = $x;
  }
 }
 $add21 = (($n$addr$0) + 1023)|0;
 $0 = (_bitshift64Shl(($add21|0),0,52)|0);
 $1 = tempRet0;
 HEAP32[tempDoublePtr>>2] = $0;HEAP32[tempDoublePtr+4>>2] = $1;$2 = +HEAPF64[tempDoublePtr>>3];
 $mul22 = $y$0 * $2;
 STACKTOP = sp;return (+$mul22);
}
function _scalbnl($x,$n) {
 $x = +$x;
 $n = $n|0;
 var $call = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $call = (+_scalbn($x,$n));
 STACKTOP = sp;return (+$call);
}
function _wctomb($s,$wc) {
 $s = $s|0;
 $wc = $wc|0;
 var $call = 0, $retval$0 = 0, $tobool = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $tobool = ($s|0)==(0|0);
 if ($tobool) {
  $retval$0 = 0;
 } else {
  $call = (_wcrtomb($s,$wc,0)|0);
  $retval$0 = $call;
 }
 STACKTOP = sp;return ($retval$0|0);
}
function _wcrtomb($s,$wc,$st) {
 $s = $s|0;
 $wc = $wc|0;
 $st = $st|0;
 var $and = 0, $and19 = 0, $and23 = 0, $and36 = 0, $and41 = 0, $and45 = 0, $call = 0, $cmp = 0, $cmp11 = 0, $cmp2 = 0, $cmp28 = 0, $cmp9 = 0, $conv = 0, $conv16 = 0, $conv21 = 0, $conv25 = 0, $conv33 = 0, $conv38 = 0, $conv43 = 0, $conv47 = 0;
 var $conv5 = 0, $conv7 = 0, $incdec$ptr = 0, $incdec$ptr17 = 0, $incdec$ptr22 = 0, $incdec$ptr34 = 0, $incdec$ptr39 = 0, $incdec$ptr44 = 0, $or = 0, $or$cond = 0, $or15 = 0, $or20 = 0, $or24 = 0, $or32 = 0, $or37 = 0, $or42 = 0, $or46 = 0, $or6 = 0, $retval$0 = 0, $shr1426 = 0;
 var $shr1827 = 0, $shr28 = 0, $shr3123 = 0, $shr3524 = 0, $shr4025 = 0, $sub = 0, $sub27 = 0, $tobool = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $tobool = ($s|0)==(0|0);
 if ($tobool) {
  $retval$0 = 1;
  STACKTOP = sp;return ($retval$0|0);
 }
 $cmp = ($wc>>>0)<(128);
 if ($cmp) {
  $conv = $wc&255;
  HEAP8[$s>>0] = $conv;
  $retval$0 = 1;
  STACKTOP = sp;return ($retval$0|0);
 }
 $cmp2 = ($wc>>>0)<(2048);
 if ($cmp2) {
  $shr28 = $wc >>> 6;
  $or = $shr28 | 192;
  $conv5 = $or&255;
  $incdec$ptr = (($s) + 1|0);
  HEAP8[$s>>0] = $conv5;
  $and = $wc & 63;
  $or6 = $and | 128;
  $conv7 = $or6&255;
  HEAP8[$incdec$ptr>>0] = $conv7;
  $retval$0 = 2;
  STACKTOP = sp;return ($retval$0|0);
 }
 $cmp9 = ($wc>>>0)<(55296);
 $sub = (($wc) + -57344)|0;
 $cmp11 = ($sub>>>0)<(8192);
 $or$cond = $cmp9 | $cmp11;
 if ($or$cond) {
  $shr1426 = $wc >>> 12;
  $or15 = $shr1426 | 224;
  $conv16 = $or15&255;
  $incdec$ptr17 = (($s) + 1|0);
  HEAP8[$s>>0] = $conv16;
  $shr1827 = $wc >>> 6;
  $and19 = $shr1827 & 63;
  $or20 = $and19 | 128;
  $conv21 = $or20&255;
  $incdec$ptr22 = (($s) + 2|0);
  HEAP8[$incdec$ptr17>>0] = $conv21;
  $and23 = $wc & 63;
  $or24 = $and23 | 128;
  $conv25 = $or24&255;
  HEAP8[$incdec$ptr22>>0] = $conv25;
  $retval$0 = 3;
  STACKTOP = sp;return ($retval$0|0);
 }
 $sub27 = (($wc) + -65536)|0;
 $cmp28 = ($sub27>>>0)<(1048576);
 if ($cmp28) {
  $shr3123 = $wc >>> 18;
  $or32 = $shr3123 | 240;
  $conv33 = $or32&255;
  $incdec$ptr34 = (($s) + 1|0);
  HEAP8[$s>>0] = $conv33;
  $shr3524 = $wc >>> 12;
  $and36 = $shr3524 & 63;
  $or37 = $and36 | 128;
  $conv38 = $or37&255;
  $incdec$ptr39 = (($s) + 2|0);
  HEAP8[$incdec$ptr34>>0] = $conv38;
  $shr4025 = $wc >>> 6;
  $and41 = $shr4025 & 63;
  $or42 = $and41 | 128;
  $conv43 = $or42&255;
  $incdec$ptr44 = (($s) + 3|0);
  HEAP8[$incdec$ptr39>>0] = $conv43;
  $and45 = $wc & 63;
  $or46 = $and45 | 128;
  $conv47 = $or46&255;
  HEAP8[$incdec$ptr44>>0] = $conv47;
  $retval$0 = 4;
  STACKTOP = sp;return ($retval$0|0);
 } else {
  $call = (___errno_location()|0);
  HEAP32[$call>>2] = 84;
  $retval$0 = -1;
  STACKTOP = sp;return ($retval$0|0);
 }
 return 0|0;
}
function ___toread($f) {
 $f = $f|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $and = 0, $and8 = 0, $buf = 0, $cmp = 0, $conv = 0, $conv3 = 0, $mode = 0, $or = 0, $or12 = 0, $rend = 0, $retval$0 = 0, $rpos = 0, $sub = 0, $tobool = 0;
 var $tobool9 = 0, $wbase = 0, $wend = 0, $wpos = 0, $write = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $mode = (($f) + 74|0);
 $0 = HEAP8[$mode>>0]|0;
 $conv = $0 << 24 >> 24;
 $sub = (($conv) + 255)|0;
 $or = $sub | $conv;
 $conv3 = $or&255;
 HEAP8[$mode>>0] = $conv3;
 $wpos = (($f) + 20|0);
 $1 = HEAP32[$wpos>>2]|0;
 $buf = (($f) + 44|0);
 $2 = HEAP32[$buf>>2]|0;
 $cmp = ($1>>>0)>($2>>>0);
 if ($cmp) {
  $write = (($f) + 36|0);
  $3 = HEAP32[$write>>2]|0;
  (FUNCTION_TABLE_iiii[$3 & 511]($f,0,0)|0);
 }
 $wend = (($f) + 16|0);
 HEAP32[$wend>>2] = 0;
 $wbase = (($f) + 28|0);
 HEAP32[$wbase>>2] = 0;
 HEAP32[$wpos>>2] = 0;
 $4 = HEAP32[$f>>2]|0;
 $and = $4 & 20;
 $tobool = ($and|0)==(0);
 if ($tobool) {
  $5 = HEAP32[$buf>>2]|0;
  $rend = (($f) + 8|0);
  HEAP32[$rend>>2] = $5;
  $rpos = (($f) + 4|0);
  HEAP32[$rpos>>2] = $5;
  $retval$0 = 0;
  STACKTOP = sp;return ($retval$0|0);
 }
 $and8 = $4 & 4;
 $tobool9 = ($and8|0)==(0);
 if ($tobool9) {
  $retval$0 = -1;
  STACKTOP = sp;return ($retval$0|0);
 }
 $or12 = $4 | 32;
 HEAP32[$f>>2] = $or12;
 $retval$0 = -1;
 STACKTOP = sp;return ($retval$0|0);
}
function ___towrite($f) {
 $f = $f|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $add$ptr = 0, $and = 0, $buf = 0, $buf_size = 0, $conv = 0, $conv3 = 0, $mode = 0, $or = 0, $or5 = 0, $rend = 0, $retval$0 = 0, $rpos = 0, $sub = 0, $tobool = 0, $wbase = 0, $wend = 0;
 var $wpos = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $mode = (($f) + 74|0);
 $0 = HEAP8[$mode>>0]|0;
 $conv = $0 << 24 >> 24;
 $sub = (($conv) + 255)|0;
 $or = $sub | $conv;
 $conv3 = $or&255;
 HEAP8[$mode>>0] = $conv3;
 $1 = HEAP32[$f>>2]|0;
 $and = $1 & 8;
 $tobool = ($and|0)==(0);
 if ($tobool) {
  $rend = (($f) + 8|0);
  HEAP32[$rend>>2] = 0;
  $rpos = (($f) + 4|0);
  HEAP32[$rpos>>2] = 0;
  $buf = (($f) + 44|0);
  $2 = HEAP32[$buf>>2]|0;
  $wbase = (($f) + 28|0);
  HEAP32[$wbase>>2] = $2;
  $wpos = (($f) + 20|0);
  HEAP32[$wpos>>2] = $2;
  $buf_size = (($f) + 48|0);
  $3 = HEAP32[$buf_size>>2]|0;
  $add$ptr = (($2) + ($3)|0);
  $wend = (($f) + 16|0);
  HEAP32[$wend>>2] = $add$ptr;
  $retval$0 = 0;
  STACKTOP = sp;return ($retval$0|0);
 } else {
  $or5 = $1 | 32;
  HEAP32[$f>>2] = $or5;
  $retval$0 = -1;
  STACKTOP = sp;return ($retval$0|0);
 }
 return 0|0;
}
function ___uflow($f) {
 $f = $f|0;
 var $0 = 0, $1 = 0, $2 = 0, $c = 0, $call = 0, $call2 = 0, $cmp = 0, $conv = 0, $read = 0, $rend = 0, $retval$0 = 0, $tobool = 0, $tobool1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $c = sp;
 $rend = (($f) + 8|0);
 $0 = HEAP32[$rend>>2]|0;
 $tobool = ($0|0)==(0|0);
 if ($tobool) {
  $call = (___toread($f)|0);
  $tobool1 = ($call|0)==(0);
  if ($tobool1) {
   label = 3;
  } else {
   $retval$0 = -1;
  }
 } else {
  label = 3;
 }
 if ((label|0) == 3) {
  $read = (($f) + 32|0);
  $1 = HEAP32[$read>>2]|0;
  $call2 = (FUNCTION_TABLE_iiii[$1 & 511]($f,$c,1)|0);
  $cmp = ($call2|0)==(1);
  if ($cmp) {
   $2 = HEAP8[$c>>0]|0;
   $conv = $2&255;
   $retval$0 = $conv;
  } else {
   $retval$0 = -1;
  }
 }
 STACKTOP = sp;return ($retval$0|0);
}
function ___fwritex($s,$l,$f) {
 $s = $s|0;
 $l = $l|0;
 $f = $f|0;
 var $$pre = 0, $$pre30 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $add = 0, $add$ptr = 0, $add$ptr26 = 0, $arrayidx = 0, $call = 0, $call16 = 0, $call4 = 0, $cmp = 0, $cmp11 = 0;
 var $cmp17 = 0, $cmp6 = 0, $i$0 = 0, $i$1 = 0, $l$addr$0 = 0, $lbf = 0, $retval$0 = 0, $s$addr$0 = 0, $sub = 0, $sub$ptr$lhs$cast = 0, $sub$ptr$rhs$cast = 0, $sub$ptr$sub = 0, $sub21 = 0, $tobool = 0, $tobool1 = 0, $tobool9 = 0, $wend = 0, $wpos = 0, $write = 0, $write15 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $wend = (($f) + 16|0);
 $0 = HEAP32[$wend>>2]|0;
 $tobool = ($0|0)==(0|0);
 do {
  if ($tobool) {
   $call = (___towrite($f)|0);
   $tobool1 = ($call|0)==(0);
   if ($tobool1) {
    $$pre30 = HEAP32[$wend>>2]|0;
    $2 = $$pre30;
    break;
   } else {
    $retval$0 = 0;
    STACKTOP = sp;return ($retval$0|0);
   }
  } else {
   $2 = $0;
  }
 } while(0);
 $wpos = (($f) + 20|0);
 $1 = HEAP32[$wpos>>2]|0;
 $sub$ptr$lhs$cast = $2;
 $sub$ptr$rhs$cast = $1;
 $sub$ptr$sub = (($sub$ptr$lhs$cast) - ($sub$ptr$rhs$cast))|0;
 $cmp = ($sub$ptr$sub>>>0)<($l>>>0);
 if ($cmp) {
  $write = (($f) + 36|0);
  $3 = HEAP32[$write>>2]|0;
  $call4 = (FUNCTION_TABLE_iiii[$3 & 511]($f,$s,$l)|0);
  $retval$0 = $call4;
  STACKTOP = sp;return ($retval$0|0);
 }
 $lbf = (($f) + 75|0);
 $4 = HEAP8[$lbf>>0]|0;
 $cmp6 = ($4<<24>>24)>(-1);
 L11: do {
  if ($cmp6) {
   $i$0 = $l;
   while(1) {
    $tobool9 = ($i$0|0)==(0);
    if ($tobool9) {
     $7 = $1;$i$1 = 0;$l$addr$0 = $l;$s$addr$0 = $s;
     break L11;
    }
    $sub = (($i$0) + -1)|0;
    $arrayidx = (($s) + ($sub)|0);
    $5 = HEAP8[$arrayidx>>0]|0;
    $cmp11 = ($5<<24>>24)==(10);
    if ($cmp11) {
     break;
    } else {
     $i$0 = $sub;
    }
   }
   $write15 = (($f) + 36|0);
   $6 = HEAP32[$write15>>2]|0;
   $call16 = (FUNCTION_TABLE_iiii[$6 & 511]($f,$s,$i$0)|0);
   $cmp17 = ($call16>>>0)<($i$0>>>0);
   if ($cmp17) {
    $retval$0 = $i$0;
    STACKTOP = sp;return ($retval$0|0);
   } else {
    $add$ptr = (($s) + ($i$0)|0);
    $sub21 = (($l) - ($i$0))|0;
    $$pre = HEAP32[$wpos>>2]|0;
    $7 = $$pre;$i$1 = $i$0;$l$addr$0 = $sub21;$s$addr$0 = $add$ptr;
    break;
   }
  } else {
   $7 = $1;$i$1 = 0;$l$addr$0 = $l;$s$addr$0 = $s;
  }
 } while(0);
 _memcpy(($7|0),($s$addr$0|0),($l$addr$0|0))|0;
 $8 = HEAP32[$wpos>>2]|0;
 $add$ptr26 = (($8) + ($l$addr$0)|0);
 HEAP32[$wpos>>2] = $add$ptr26;
 $add = (($i$1) + ($l$addr$0))|0;
 $retval$0 = $add;
 STACKTOP = sp;return ($retval$0|0);
}
function _snprintf($s,$n,$fmt,$varargs) {
 $s = $s|0;
 $n = $n|0;
 $fmt = $fmt|0;
 $varargs = $varargs|0;
 var $ap = 0, $call = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $ap = sp;
 HEAP32[$ap>>2] = $varargs;
 $call = (_vsnprintf($s,$n,$fmt,$ap)|0);
 STACKTOP = sp;return ($call|0);
}
function _MUSL_vfprintf($f,$fmt,$ap) {
 $f = $f|0;
 $fmt = $fmt|0;
 $ap = $ap|0;
 var $$call13 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $add$ptr = 0, $ap2 = 0, $buf = 0, $buf_size = 0, $call = 0, $call13 = 0, $call1318 = 0, $cmp = 0, $internal_buf = 0, $nl_arg = 0, $nl_type = 0, $ret$1 = 0, $retval$0 = 0, $tobool = 0, $tobool14 = 0;
 var $tobool18 = 0, $vacopy_currentptr = 0, $wbase = 0, $wend = 0, $wpos = 0, $write = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 224|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $ap2 = sp + 120|0;
 $nl_type = sp + 80|0;
 $nl_arg = sp;
 $internal_buf = sp + 136|0;
 dest=$nl_type+0|0; stop=dest+40|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 $vacopy_currentptr = HEAP32[$ap>>2]|0;
 HEAP32[$ap2>>2] = $vacopy_currentptr;
 $call = (_printf_core(0,$fmt,$ap2,$nl_arg,$nl_type)|0);
 $cmp = ($call|0)<(0);
 if ($cmp) {
  $retval$0 = -1;
  STACKTOP = sp;return ($retval$0|0);
 }
 $buf_size = (($f) + 48|0);
 $0 = HEAP32[$buf_size>>2]|0;
 $tobool = ($0|0)==(0);
 if ($tobool) {
  $buf = (($f) + 44|0);
  $1 = HEAP32[$buf>>2]|0;
  HEAP32[$buf>>2] = $internal_buf;
  $wbase = (($f) + 28|0);
  HEAP32[$wbase>>2] = $internal_buf;
  $wpos = (($f) + 20|0);
  HEAP32[$wpos>>2] = $internal_buf;
  HEAP32[$buf_size>>2] = 80;
  $add$ptr = (($internal_buf) + 80|0);
  $wend = (($f) + 16|0);
  HEAP32[$wend>>2] = $add$ptr;
  $call13 = (_printf_core($f,$fmt,$ap2,$nl_arg,$nl_type)|0);
  $tobool14 = ($1|0)==(0|0);
  if ($tobool14) {
   $ret$1 = $call13;
  } else {
   $write = (($f) + 36|0);
   $2 = HEAP32[$write>>2]|0;
   (FUNCTION_TABLE_iiii[$2 & 511]($f,0,0)|0);
   $3 = HEAP32[$wpos>>2]|0;
   $tobool18 = ($3|0)==(0|0);
   $$call13 = $tobool18 ? -1 : $call13;
   HEAP32[$buf>>2] = $1;
   HEAP32[$buf_size>>2] = 0;
   HEAP32[$wend>>2] = 0;
   HEAP32[$wbase>>2] = 0;
   HEAP32[$wpos>>2] = 0;
   $ret$1 = $$call13;
  }
 } else {
  $call1318 = (_printf_core($f,$fmt,$ap2,$nl_arg,$nl_type)|0);
  $ret$1 = $call1318;
 }
 $retval$0 = $ret$1;
 STACKTOP = sp;return ($retval$0|0);
}
function _printf_core($f,$fmt,$ap,$nl_arg,$nl_type) {
 $f = $f|0;
 $fmt = $fmt|0;
 $ap = $ap|0;
 $nl_arg = $nl_arg|0;
 $nl_type = $nl_type|0;
 var $$ = 0, $$$i = 0, $$172 = 0, $$173 = 0, $$175 = 0, $$365$i = 0.0, $$p$i = 0, $$pr$i = 0, $$pr637$i = 0, $$pre = 0, $$pre$i = 0, $$pre654 = 0, $$pre655 = 0, $$sub264$i = 0, $$sub264$us$i = 0, $$sub514$i = 0, $$sub562$i = 0, $0 = 0, $1 = 0, $10 = 0;
 var $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0;
 var $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0;
 var $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0;
 var $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0.0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0;
 var $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0;
 var $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0;
 var $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0;
 var $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0;
 var $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0;
 var $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0;
 var $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0;
 var $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0.0, $307 = 0.0, $308 = 0, $309 = 0, $309$phi = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0;
 var $316 = 0, $317 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0.0, $74 = 0, $75 = 0, $76 = 0, $77 = 0.0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0;
 var $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $a$0 = 0, $a$1 = 0, $a$1$lcssa$i = 0, $a$1735$i = 0;
 var $a$2 = 0, $a$2$ph$i = 0, $a$3$lcssa$i = 0, $a$3725$i = 0, $a$3725$us$i = 0, $a$5$lcssa$i = 0, $a$5707$i = 0, $a$6$i = 0, $a$7$i = 0, $a$8$ph$i = 0, $add = 0, $add$i = 0, $add$i189 = 0, $add$i341 = 0, $add$ptr = 0, $add$ptr139 = 0, $add$ptr205 = 0, $add$ptr213$i = 0, $add$ptr257 = 0, $add$ptr311$i = 0;
 var $add$ptr311$us$i = 0, $add$ptr311$us$z$4$us$i = 0, $add$ptr333 = 0, $add$ptr352 = 0, $add$ptr354$sum$i = 0, $add$ptr358$i = 0, $add$ptr358$sum$i = 0, $add$ptr358$sum361$i = 0, $add$ptr373$i = 0, $add$ptr393$i = 0, $add$ptr43 = 0, $add$ptr442$i = 0, $add$ptr442$z$3$i = 0, $add$ptr466 = 0, $add$ptr65$i = 0, $add$ptr671$i = 0, $add$ptr742$i = 0, $add$ptr88 = 0, $add113$i = 0, $add150$i = 0;
 var $add154$i = 0, $add163$i = 0, $add165$i = 0, $add273$i = 0, $add275$i = 0, $add284$i = 0, $add284$us$i = 0, $add313$i = 0, $add313$us$i = 0, $add315 = 0, $add355$i = 0, $add388 = 0, $add405 = 0, $add410$i = 0.0, $add414$i = 0, $add434 = 0, $add477$neg$i = 0, $add561$i = 0, $add57$i = 0, $add57$i$i = 0;
 var $add57$i509$i = 0, $add57$i563$i = 0, $add57$i580$i = 0, $add57$i611$i = 0, $add608$i = 0, $add612$i = 0, $add620$i = 0, $add653$i = 0, $add67362$i = 0, $add87$i = 0.0, $add90$i = 0.0, $and = 0, $and$i297 = 0, $and$i338 = 0, $and$i352 = 0, $and$i373$i = 0, $and$i415$i = 0, $and$i517$i = 0, $and12$i = 0, $and134$i = 0;
 var $and210 = 0, $and214 = 0, $and214$conv207 = 0, $and216 = 0, $and219 = 0, $and249 = 0, $and254 = 0, $and263 = 0, $and282 = 0, $and282$i = 0, $and282$us$i = 0, $and287 = 0, $and302 = 0, $and302$fl$4 = 0, $and36$i = 0, $and379$i = 0, $and483$i = 0, $and610$i = 0, $and62$i = 0, $and702$i = 0;
 var $and780$i = 0, $arg$sroa$0$sroa$0$0$extract$trunc456 = 0, $arg$sroa$0$sroa$0$0$extract$trunc458 = 0, $arg$sroa$0$sroa$1$4$extract$trunc531552 = 0, $arg$sroa$0$sroa$1$4$extract$trunc531552$phi = 0, $arg$sroa$0$sroa$1$4$extract$trunc531553 = 0, $arg$sroa$0$sroa$1$4$extract$trunc531554 = 0, $arg$sroa$0$sroa$1$4$extract$trunc531555 = 0, $arg$sroa$0$sroa$1$4$extract$trunc531556 = 0, $arg$sroa$0$sroa$1$4$extract$trunc531556568 = 0, $arg$sroa$0$sroa$1$4$extract$trunc531556656 = 0, $arglist_current = 0, $arglist_current11 = 0, $arglist_current14 = 0, $arglist_current17 = 0, $arglist_current2 = 0, $arglist_current20 = 0, $arglist_current23 = 0, $arglist_current26 = 0, $arglist_current29 = 0;
 var $arglist_current32 = 0, $arglist_current35 = 0, $arglist_current38 = 0, $arglist_current41 = 0, $arglist_current44 = 0, $arglist_current47 = 0, $arglist_current5 = 0, $arglist_current50 = 0, $arglist_current53 = 0, $arglist_current56 = 0, $arglist_current59 = 0, $arglist_current62 = 0, $arglist_current8 = 0, $arglist_next = 0, $arglist_next12 = 0, $arglist_next15 = 0, $arglist_next18 = 0, $arglist_next21 = 0, $arglist_next24 = 0, $arglist_next27 = 0;
 var $arglist_next3 = 0, $arglist_next30 = 0, $arglist_next33 = 0, $arglist_next36 = 0, $arglist_next39 = 0, $arglist_next42 = 0, $arglist_next45 = 0, $arglist_next48 = 0, $arglist_next51 = 0, $arglist_next54 = 0, $arglist_next57 = 0, $arglist_next6 = 0, $arglist_next60 = 0, $arglist_next63 = 0, $arglist_next9 = 0, $argpos$0 = 0, $arraydecay208$add$ptr213$i = 0, $arrayidx$i = 0, $arrayidx$i335 = 0, $arrayidx114 = 0;
 var $arrayidx117$i = 0, $arrayidx117$us$i = 0, $arrayidx117$us$us$i = 0, $arrayidx117$us647$i = 0, $arrayidx119 = 0, $arrayidx124 = 0, $arrayidx132 = 0, $arrayidx16 = 0, $arrayidx173 = 0, $arrayidx192 = 0, $arrayidx251$i = 0, $arrayidx31 = 0, $arrayidx35 = 0, $arrayidx363 = 0, $arrayidx453$i = 0, $arrayidx462 = 0, $arrayidx474 = 0, $arrayidx489$i = 0, $arrayidx68 = 0, $arrayidx73 = 0;
 var $arrayidx81 = 0, $big$i = 0, $brmerge$i = 0, $buf = 0, $buf$i = 0, $call = 0, $call337 = 0, $call338 = 0, $call349 = 0, $call377 = 0, $call404 = 0, $call55$i = 0.0, $carry$0730$i = 0, $carry262$0721$i = 0, $carry262$0721$us$i = 0, $cmp = 0, $cmp$i = 0, $cmp$i198 = 0, $cmp$i247 = 0, $cmp$i299 = 0;
 var $cmp$i354 = 0, $cmp$i375$i = 0, $cmp$i417$i = 0, $cmp$i455$i = 0, $cmp$i519$i = 0, $cmp$i589$i = 0, $cmp$i622$i = 0, $cmp1 = 0, $cmp1$i = 0, $cmp1$i$i = 0, $cmp1$i249 = 0, $cmp1$i283 = 0, $cmp1$i302 = 0, $cmp1$i322 = 0, $cmp1$i357 = 0, $cmp1$i378$i = 0, $cmp1$i398$i = 0, $cmp1$i420$i = 0, $cmp1$i440$i = 0, $cmp1$i456$i = 0;
 var $cmp1$i476$i = 0, $cmp1$i522$i = 0, $cmp1$i542$i = 0, $cmp1$i590$i = 0, $cmp1$i623$i = 0, $cmp103$i = 0, $cmp105 = 0, $cmp111 = 0, $cmp116 = 0, $cmp12$i$i = 0, $cmp12$i489$i = 0, $cmp126 = 0, $cmp127$i = 0, $cmp127$us$i = 0, $cmp127$us$us$i = 0, $cmp127$us657$i = 0, $cmp13 = 0, $cmp131$i = 0, $cmp147$i = 0, $cmp165 = 0;
 var $cmp176 = 0, $cmp18 = 0, $cmp181 = 0, $cmp184 = 0, $cmp196$i = 0, $cmp205$i = 0, $cmp211 = 0, $cmp225$i = 0, $cmp225733$i = 0, $cmp228$i = 0, $cmp235$i = 0, $cmp235729$i = 0, $cmp240 = 0, $cmp249$i = 0, $cmp259$i = 0, $cmp259$us$i = 0, $cmp259723$i = 0, $cmp265$i = 0, $cmp265$us$i = 0, $cmp277$i = 0;
 var $cmp277$us$i = 0, $cmp277719$i = 0, $cmp277719$us$i = 0, $cmp299 = 0, $cmp299$i = 0, $cmp3$i = 0, $cmp3$i$i = 0, $cmp3$i256 = 0, $cmp3$i290 = 0, $cmp3$i309 = 0, $cmp3$i329 = 0, $cmp3$i364 = 0, $cmp3$i385$i = 0, $cmp3$i405$i = 0, $cmp3$i427$i = 0, $cmp3$i447$i = 0, $cmp3$i463$i = 0, $cmp3$i483$i = 0, $cmp3$i529$i = 0, $cmp3$i549$i = 0;
 var $cmp3$i597$i = 0, $cmp3$i630$i = 0, $cmp308$i = 0, $cmp308$us$i = 0, $cmp315$i = 0, $cmp316 = 0, $cmp324$i = 0, $cmp324715$i = 0, $cmp333$i = 0, $cmp338$i = 0, $cmp350$i = 0, $cmp363711$i = 0, $cmp37 = 0, $cmp370 = 0, $cmp370610 = 0, $cmp374$i = 0, $cmp378 = 0, $cmp38$i = 0, $cmp383 = 0, $cmp385$i = 0;
 var $cmp39$i = 0, $cmp39$i$i = 0, $cmp39$i251 = 0, $cmp39$i285 = 0, $cmp39$i304 = 0, $cmp39$i324 = 0, $cmp39$i359 = 0, $cmp39$i380$i = 0, $cmp39$i400$i = 0, $cmp39$i422$i = 0, $cmp39$i442$i = 0, $cmp39$i458$i = 0, $cmp39$i478$i = 0, $cmp39$i524$i = 0, $cmp39$i544$i = 0, $cmp39$i592$i = 0, $cmp39$i625$i = 0, $cmp390 = 0, $cmp390$i = 0, $cmp394$i = 0;
 var $cmp397 = 0, $cmp397616 = 0, $cmp403$i = 0, $cmp406 = 0, $cmp411$i = 0, $cmp416$i = 0, $cmp416705$i = 0, $cmp420$i = 0, $cmp427 = 0, $cmp433$i = 0, $cmp433701$i = 0, $cmp435 = 0, $cmp443$i = 0, $cmp450$i = 0, $cmp450$lcssa$i = 0, $cmp459 = 0, $cmp470$i = 0, $cmp471 = 0, $cmp473$i = 0, $cmp495$i = 0;
 var $cmp495697$i = 0, $cmp50 = 0, $cmp505$i = 0, $cmp50590 = 0, $cmp515$i = 0, $cmp528$i = 0, $cmp563$i = 0, $cmp577$i = 0, $cmp59$i = 0, $cmp614$i = 0, $cmp617$i = 0, $cmp623$i = 0, $cmp636$i = 0, $cmp636692$i = 0, $cmp65 = 0, $cmp660$i = 0, $cmp665$i = 0, $cmp673$i = 0, $cmp678$i = 0, $cmp678677$i = 0;
 var $cmp686$i = 0, $cmp707$i = 0, $cmp707671$i = 0, $cmp710$i = 0, $cmp710672$i = 0, $cmp722$i = 0, $cmp722668$i = 0, $cmp727$i = 0, $cmp745$i = 0, $cmp748$i = 0, $cmp748685$i = 0, $cmp75 = 0, $cmp760$i = 0, $cmp765$i = 0, $cmp770$i = 0, $cmp770681$i = 0, $cmp777$i = 0, $cmp790$i = 0, $cmp82$i = 0, $cmp94$i = 0;
 var $cmp97 = 0, $cnt$0 = 0, $cnt$1 = 0, $cond$i = 0, $cond$i$i = 0, $cond$i250 = 0, $cond$i284 = 0, $cond$i303 = 0, $cond$i323 = 0, $cond$i340 = 0, $cond$i358 = 0, $cond$i379$i = 0, $cond$i399$i = 0, $cond$i421$i = 0, $cond$i441$i = 0, $cond$i457$i = 0, $cond$i477$i = 0, $cond$i523$i = 0, $cond$i543$i = 0, $cond$i591$i = 0;
 var $cond$i624$i = 0, $cond100$i = 0, $cond233$i = 0, $cond245 = 0, $cond419 = 0, $cond43$i = 0, $cond629$i = 0, $cond732$i = 0, $conv$i = 0, $conv$i191 = 0, $conv1$i = 0, $conv111$i = 0, $conv114$i = 0, $conv116$i = 0, $conv116$us$i = 0, $conv116$us$us$i = 0, $conv116$us646$i = 0, $conv118363$i = 0, $conv118363$us$i = 0, $conv118363$us$us$i = 0;
 var $conv118363$us648$i = 0, $conv12$i = 0, $conv12$i215 = 0, $conv120 = 0, $conv121$i = 0, $conv121$us$i = 0, $conv121$us$us$i = 0, $conv121$us650$i = 0, $conv123$i = 0.0, $conv123$us$i = 0.0, $conv123$us$us$i = 0.0, $conv123$us652$i = 0.0, $conv134 = 0, $conv163 = 0, $conv17$mask$i = 0, $conv17$mask$i220 = 0, $conv174 = 0, $conv207 = 0, $conv216$i = 0, $conv218$i = 0.0;
 var $conv22$i = 0, $conv22$i225 = 0, $conv229 = 0, $conv232 = 0, $conv27$mask$i = 0, $conv27$mask$i230 = 0, $conv3$i = 0, $conv3$i182 = 0, $conv32 = 0, $conv332 = 0, $conv4$i = 0, $conv48 = 0, $conv48588 = 0, $conv48593 = 0, $conv58 = 0, $conv6$i = 0, $conv6$i$i = 0, $conv6$i510$i = 0, $conv6$i564$i = 0, $conv6$i581$i = 0;
 var $conv6$i612$i = 0, $conv644$i = 0, $conv646$i = 0, $conv69 = 0, $conv7$i = 0, $conv7$i185 = 0, $conv83 = 0, $d$0$i = 0, $d$0728$i = 0, $d$0731$i = 0, $d$1720$i = 0, $d$1720$us$i = 0, $d$2$lcssa$i = 0, $d$2706$i = 0, $d$3$i = 0, $d$4680$i = 0, $d$5674$i = 0, $d$6687$i = 0, $dec$i = 0, $dec476$i = 0;
 var $dec481$i = 0, $dec78$i = 0, $div274$i = 0, $div356$i = 0, $div378$i = 0, $div384$i = 0, $div9$i = 0, $div9$i$i = 0, $div9$i512$i = 0, $div9$i566$i = 0, $div9$i583$i = 0, $div9$i614$i = 0, $e$0717$i = 0, $e$1$i = 0, $e$2703$i = 0, $e$3$i = 0, $e$4$ph$i = 0, $e2$i = 0, $ebuf0$i = 0, $estr$0$i = 0;
 var $estr$1$lcssa$i = 0, $estr$1$ph$i = 0, $estr$1693$i = 0, $estr$2$i = 0, $exitcond$i = 0, $fl$0586 = 0, $fl$0592 = 0, $fl$1 = 0, $fl$1$and219 = 0, $fl$3 = 0, $fl$4 = 0, $fl$6 = 0, $i$0$lcssa = 0, $i$06$i = 0, $i$06$i186 = 0, $i$0609 = 0, $i$0612 = 0, $i$0716$i = 0, $i$1$lcssa$i = 0, $i$1617 = 0;
 var $i$1712$i = 0, $i$2577 = 0, $i$2702$i = 0, $i$3575 = 0, $i$3698$i = 0, $i137 = 0, $i86 = 0, $idxprom$i = 0, $inc = 0, $inc$i = 0, $inc425$i = 0, $inc438$i = 0, $inc468$$p$i = 0, $inc468$i = 0, $inc481 = 0, $inc500$i = 0, $incdec$ptr = 0, $incdec$ptr$i = 0, $incdec$ptr$i$i = 0, $incdec$ptr$i190 = 0;
 var $incdec$ptr$i190557 = 0, $incdec$ptr$i190558 = 0, $incdec$ptr$i190559 = 0, $incdec$ptr$i190562 = 0, $incdec$ptr$i190563 = 0, $incdec$ptr$i190564$lcssa = 0, $incdec$ptr$i190564579 = 0, $incdec$ptr$i242 = 0, $incdec$ptr$i265 = 0, $incdec$ptr$i272 = 0, $incdec$ptr$i496$i = 0, $incdec$ptr106$i = 0, $incdec$ptr112$i = 0, $incdec$ptr115$i = 0, $incdec$ptr122$i = 0, $incdec$ptr122$us$i = 0, $incdec$ptr122$us$us$i = 0, $incdec$ptr122$us651$i = 0, $incdec$ptr137$i = 0, $incdec$ptr137$us$i = 0;
 var $incdec$ptr137$us$us$i = 0, $incdec$ptr137$us661$i = 0, $incdec$ptr169 = 0, $incdec$ptr217$i = 0, $incdec$ptr23 = 0, $incdec$ptr246$i = 0, $incdec$ptr288$i = 0, $incdec$ptr288$us$i = 0, $incdec$ptr292$a$3$i = 0, $incdec$ptr292$a$3$us$i = 0, $incdec$ptr292$a$3$us746$i = 0, $incdec$ptr292$a$3$us748$i = 0, $incdec$ptr292$a$3751$i = 0, $incdec$ptr292$a$3753$i = 0, $incdec$ptr292$i = 0, $incdec$ptr292$us$i = 0, $incdec$ptr292$us745$i = 0, $incdec$ptr292750$i = 0, $incdec$ptr296$i = 0, $incdec$ptr296$us$i = 0;
 var $incdec$ptr376 = 0, $incdec$ptr403 = 0, $incdec$ptr419$i = 0, $incdec$ptr423$i = 0, $incdec$ptr62 = 0, $incdec$ptr639$i = 0, $incdec$ptr645$i = 0, $incdec$ptr647$i = 0, $incdec$ptr681$i = 0, $incdec$ptr689$i = 0, $incdec$ptr698$i = 0, $incdec$ptr7$i = 0, $incdec$ptr7$i$i = 0, $incdec$ptr7$i511$i = 0, $incdec$ptr7$i565$i = 0, $incdec$ptr7$i582$i = 0, $incdec$ptr7$i613$i = 0, $incdec$ptr725$i = 0, $incdec$ptr734$i = 0, $incdec$ptr773$i = 0;
 var $incdec$ptr776$i = 0, $incdec$ptr808$i = 0, $isdigit = 0, $isdigit$i = 0, $isdigit$i193 = 0, $isdigit168 = 0, $isdigit170 = 0, $isdigit5$i = 0, $isdigit5$i184 = 0, $isdigittmp = 0, $isdigittmp$i = 0, $isdigittmp$i192 = 0, $isdigittmp167 = 0, $isdigittmp169 = 0, $isdigittmp4$i = 0, $isdigittmp4$i183 = 0, $j$0$i = 0, $j$0710$i = 0, $j$0713$i = 0, $j$1699$i = 0;
 var $j$2$i = 0, $l$0 = 0, $l$0$i = 0, $l$1$i = 0, $l$1$lcssa = 0, $l$1611 = 0, $l$addr$0$lcssa$i = 0, $l$addr$0$lcssa$i$i = 0, $l$addr$0$lcssa$i258 = 0, $l$addr$0$lcssa$i292 = 0, $l$addr$0$lcssa$i311 = 0, $l$addr$0$lcssa$i331 = 0, $l$addr$0$lcssa$i366 = 0, $l$addr$0$lcssa$i387$i = 0, $l$addr$0$lcssa$i407$i = 0, $l$addr$0$lcssa$i429$i = 0, $l$addr$0$lcssa$i449$i = 0, $l$addr$0$lcssa$i465$i = 0, $l$addr$0$lcssa$i485$i = 0, $l$addr$0$lcssa$i531$i = 0;
 var $l$addr$0$lcssa$i551$i = 0, $l$addr$0$lcssa$i599$i = 0, $l$addr$0$lcssa$i632$i = 0, $l$addr$010$i = 0, $l$addr$010$i$i = 0, $l$addr$010$i253 = 0, $l$addr$010$i287 = 0, $l$addr$010$i306 = 0, $l$addr$010$i326 = 0, $l$addr$010$i361 = 0, $l$addr$010$i382$i = 0, $l$addr$010$i402$i = 0, $l$addr$010$i424$i = 0, $l$addr$010$i444$i = 0, $l$addr$010$i460$i = 0, $l$addr$010$i480$i = 0, $l$addr$010$i526$i = 0, $l$addr$010$i546$i = 0, $l$addr$010$i594$i = 0, $l$addr$010$i627$i = 0;
 var $l10n$0 = 0, $l10n$0$phi = 0, $l10n$1 = 0, $l10n$2 = 0, $l10n$3 = 0, $land$ext$neg$i = 0, $lnot$ext = 0, $lnot$i = 0, $lnot455$i = 0, $lnot476 = 0, $lor$ext$i = 0, $mb = 0, $mul$i = 0, $mul$i187 = 0, $mul$i343 = 0.0, $mul125$i = 0.0, $mul125$us$i = 0.0, $mul125$us$us$i = 0.0, $mul125$us654$i = 0.0, $mul202$i = 0.0;
 var $mul220$i = 0.0, $mul286$i = 0, $mul286$us$i = 0, $mul322$i = 0, $mul328$i = 0, $mul335$i = 0, $mul349$i = 0, $mul367$i = 0, $mul406$i = 0.0, $mul407$i = 0.0, $mul431$i = 0, $mul437$i = 0, $mul499$i = 0, $mul513$i = 0, $mul80$i = 0.0, $or = 0, $or$cond = 0, $or$cond$i = 0, $or$cond$i$i = 0, $or$cond$i281 = 0;
 var $or$cond$i300 = 0, $or$cond$i320 = 0, $or$cond$i346 = 0, $or$cond$i355 = 0, $or$cond$i376$i = 0, $or$cond$i396$i = 0, $or$cond$i418$i = 0, $or$cond$i438$i = 0, $or$cond$i474$i = 0, $or$cond$i520$i = 0, $or$cond$i540$i = 0, $or$cond1$i = 0, $or$cond368$i = 0, $or$cond368673$i = 0, $or$cond369$i = 0, $or$i = 0, $or$i344 = 0, $or100 = 0, $or120$i = 0, $or120$us$i = 0;
 var $or120$us$us$i = 0, $or120$us649$i = 0, $or246 = 0, $or504$i = 0, $or613$i = 0, $p$0 = 0, $p$1 = 0, $p$2 = 0, $p$2$add315 = 0, $p$4658 = 0, $p$5 = 0, $p$addr$2$$sub514$i = 0, $p$addr$2$$sub562$i = 0, $p$addr$2$i = 0, $p$addr$3$i = 0, $p$addr$4$lcssa$i = 0, $p$addr$4675$i = 0, $p$addr$5688$i = 0, $pad$i = 0, $pl$0 = 0;
 var $pl$0$i = 0, $pl$1 = 0, $pl$1$i = 0, $pl$2 = 0, $prefix$0 = 0, $prefix$0$add$ptr65$i = 0, $prefix$0$i = 0, $prefix$1 = 0, $prefix$2 = 0, $r$0$a$8$i = 0, $re$0$i = 0, $re$1667$i = 0, $rem360$i = 0, $rem370$i = 0, $rem4$i = 0, $rem4$i$i = 0, $rem4$i508$i = 0, $rem4$i562$i = 0, $rem4$i579$i = 0, $rem4$i610$i = 0;
 var $rem494$i = 0, $rem494696$i = 0, $retval$0 = 0, $round$0666$i = 0.0, $round377$1$i = 0.0, $s$0$i = 0, $s$0$us$i = 0, $s$0$us$us$i = 0, $s$0$us644$i = 0, $s$1$i = 0, $s$1$lcssa$i = 0, $s$1$us$i = 0, $s$1$us$us$i = 0, $s$1$us663$i = 0, $s$addr$0$lcssa$i$i = 0, $s$addr$0$lcssa$i269 = 0, $s$addr$0$lcssa$i275 = 0, $s$addr$0$lcssa$i502$i = 0, $s$addr$014$i = 0, $s$addr$014$i$i = 0;
 var $s$addr$014$i491$i = 0, $s$addr$06$i = 0, $s$addr$07$i = 0, $s$addr$1$lcssa$i$i = 0, $s$addr$1$lcssa$i568$i = 0, $s$addr$110$i = 0, $s$addr$110$i$i = 0, $s$addr$110$i507$i = 0, $s$addr$110$i561$i = 0, $s$addr$110$i578$i = 0, $s$addr$110$i609$i = 0, $s35$0$i = 0, $s668$0678$i = 0, $s668$1$i = 0, $s715$0$lcssa$i = 0, $s715$0669$i = 0, $s753$0$i = 0, $s753$1682$i = 0, $s753$2$i = 0, $sext = 0;
 var $sext573 = 0, $shl = 0, $shl280$i = 0, $shl280$us$i = 0, $shl60 = 0, $shr = 0, $shr283$i = 0, $shr283$us$i = 0, $shr285$i = 0, $shr285$us$i = 0, $small$0$i = 0.0, $small$1$i = 0.0, $st$0 = 0, $storemerge = 0, $storemerge166584 = 0, $storemerge166591 = 0, $storemerge171 = 0, $sub = 0, $sub$i = 0, $sub$i$i = 0;
 var $sub$i179 = 0, $sub$i188 = 0, $sub$i248 = 0, $sub$i282 = 0, $sub$i301 = 0, $sub$i321 = 0, $sub$i337 = 0.0, $sub$i356 = 0, $sub$i377$i = 0, $sub$i397$i = 0, $sub$i419$i = 0, $sub$i439$i = 0, $sub$i475$i = 0, $sub$i521$i = 0, $sub$i541$i = 0, $sub$ptr$div$i = 0, $sub$ptr$div$us$i = 0, $sub$ptr$div321$i = 0, $sub$ptr$div347$i = 0, $sub$ptr$div430$i = 0;
 var $sub$ptr$div511$i = 0, $sub$ptr$lhs$cast = 0, $sub$ptr$lhs$cast$i = 0, $sub$ptr$lhs$cast$us$i = 0, $sub$ptr$lhs$cast$us$us$i = 0, $sub$ptr$lhs$cast$us655$i = 0, $sub$ptr$lhs$cast157$pre$i = 0, $sub$ptr$lhs$cast160$i = 0, $sub$ptr$lhs$cast305$i = 0, $sub$ptr$lhs$cast305$us$i = 0, $sub$ptr$lhs$cast310 = 0, $sub$ptr$lhs$cast318$i = 0, $sub$ptr$lhs$cast344$i = 0, $sub$ptr$lhs$cast354 = 0, $sub$ptr$lhs$cast424 = 0, $sub$ptr$lhs$cast508$i = 0, $sub$ptr$lhs$cast694$i = 0, $sub$ptr$rhs$cast = 0, $sub$ptr$rhs$cast$i = 0, $sub$ptr$rhs$cast152$i = 0;
 var $sub$ptr$rhs$cast161$i = 0, $sub$ptr$rhs$cast174$i = 0, $sub$ptr$rhs$cast306$i = 0, $sub$ptr$rhs$cast306$us$i = 0, $sub$ptr$rhs$cast311 = 0, $sub$ptr$rhs$cast319$i = 0, $sub$ptr$rhs$cast355 = 0, $sub$ptr$rhs$cast425 = 0, $sub$ptr$rhs$cast428$i = 0, $sub$ptr$rhs$cast634$i = 0, $sub$ptr$rhs$cast634690$i = 0, $sub$ptr$rhs$cast649$i = 0, $sub$ptr$rhs$cast695$i = 0, $sub$ptr$rhs$cast788$i = 0, $sub$ptr$rhs$cast812$i = 0, $sub$ptr$sub = 0, $sub$ptr$sub$i = 0, $sub$ptr$sub$us$i = 0, $sub$ptr$sub$us$us$i = 0, $sub$ptr$sub$us656$i = 0;
 var $sub$ptr$sub145$i = 0, $sub$ptr$sub153$i = 0, $sub$ptr$sub159$i = 0, $sub$ptr$sub162$i = 0, $sub$ptr$sub172$i = 0, $sub$ptr$sub175$i = 0, $sub$ptr$sub307$i = 0, $sub$ptr$sub307$us$i = 0, $sub$ptr$sub312 = 0, $sub$ptr$sub320$i = 0, $sub$ptr$sub346$i = 0, $sub$ptr$sub356 = 0, $sub$ptr$sub426 = 0, $sub$ptr$sub426$p$5 = 0, $sub$ptr$sub429$i = 0, $sub$ptr$sub510$i = 0, $sub$ptr$sub635$i = 0, $sub$ptr$sub635691$i = 0, $sub$ptr$sub650$i = 0, $sub$ptr$sub650$pn$i = 0;
 var $sub$ptr$sub696$i = 0, $sub$ptr$sub789$i = 0, $sub$ptr$sub789$p$addr$5$i = 0, $sub$ptr$sub813$i = 0, $sub101 = 0, $sub124$i = 0.0, $sub124$us$i = 0.0, $sub124$us$us$i = 0.0, $sub124$us653$i = 0.0, $sub135 = 0, $sub146$i = 0, $sub164 = 0, $sub175 = 0, $sub176$i = 0, $sub181$i = 0, $sub203$i = 0, $sub219$i = 0.0, $sub256$i = 0, $sub264$i = 0, $sub264$us$i = 0;
 var $sub281$i = 0, $sub281$us$i = 0, $sub336$i = 0, $sub343$i = 0, $sub382 = 0, $sub409$i = 0, $sub478$i = 0, $sub480$i = 0, $sub49 = 0, $sub49589 = 0, $sub5$i = 0, $sub5$i$i = 0, $sub5$i255 = 0, $sub5$i289 = 0, $sub5$i308 = 0, $sub5$i328 = 0, $sub5$i363 = 0, $sub5$i384$i = 0, $sub5$i404$i = 0, $sub5$i426$i = 0;
 var $sub5$i446$i = 0, $sub5$i462$i = 0, $sub5$i482$i = 0, $sub5$i528$i = 0, $sub5$i548$i = 0, $sub5$i596$i = 0, $sub5$i629$i = 0, $sub514$i = 0, $sub54 = 0, $sub562$i = 0, $sub59 = 0, $sub626$i = 0, $sub735$i = 0, $sub74$i = 0, $sub806$i = 0, $sub84 = 0, $sub85$i = 0.0, $sub86$i = 0.0, $sub88$i = 0.0, $sub91$i = 0.0;
 var $sub97$i = 0, $t$0 = 0, $t$1 = 0, $t$addr$0$i = 0, $t$addr$1$i = 0, $tobool = 0, $tobool$i = 0, $tobool$i$i = 0, $tobool$i279 = 0, $tobool$i298 = 0, $tobool$i318 = 0, $tobool$i353 = 0, $tobool$i374$i = 0, $tobool$i394$i = 0, $tobool$i416$i = 0, $tobool$i436$i = 0, $tobool$i472$i = 0, $tobool$i518$i = 0, $tobool$i538$i = 0, $tobool129$us$i = 0;
 var $tobool13$i = 0, $tobool135$i = 0, $tobool139$i = 0, $tobool139$us$i = 0, $tobool139$us$us$i = 0, $tobool140$i = 0, $tobool141 = 0, $tobool178 = 0, $tobool208 = 0, $tobool217 = 0, $tobool222$i = 0, $tobool244$i = 0, $tobool25 = 0, $tobool255 = 0, $tobool264 = 0, $tobool28 = 0, $tobool283 = 0, $tobool288 = 0, $tobool290$i = 0, $tobool290$us$i = 0;
 var $tobool290$us744$i = 0, $tobool290749$i = 0, $tobool294$i = 0, $tobool294$us$i = 0, $tobool307 = 0, $tobool341$$i = 0, $tobool341$i = 0, $tobool342 = 0, $tobool350 = 0, $tobool37$i = 0, $tobool371$i = 0, $tobool373 = 0, $tobool380$i = 0, $tobool400 = 0, $tobool400$i = 0, $tobool452 = 0, $tobool455 = 0, $tobool463 = 0, $tobool466$i = 0, $tobool484$i = 0;
 var $tobool490$i = 0, $tobool55 = 0, $tobool56$i = 0, $tobool609$i = 0, $tobool611$i = 0, $tobool63$i = 0, $tobool703$i = 0, $tobool76$i = 0, $tobool781$not$i = 0, $tobool79$i = 0, $tobool9$i = 0, $tobool9$i$i = 0, $tobool9$i339 = 0, $tobool9$i504$i = 0, $tobool9$i558$i = 0, $tobool9$i575$i = 0, $tobool9$i606$i = 0, $tobool90 = 0, $w$0 = 0, $w$1 = 0;
 var $w$2 = 0, $w$add$i = 0, $w$add165$i = 0, $w$add653$i = 0, $wc = 0, $ws$0613 = 0, $ws$1618 = 0, $x$addr$0$lcssa$off0$i = 0, $x$addr$0$lcssa$off0$i$i = 0, $x$addr$0$lcssa$off0$i503$i = 0, $xor$i = 0, $y$011$i = 0, $y$011$i$i = 0, $y$011$i506$i = 0, $y$011$i560$i = 0, $y$011$i577$i = 0, $y$011$i608$i = 0, $y$addr$0$i = 0.0, $y$addr$1$i = 0.0, $y$addr$2$i = 0.0;
 var $y$addr$2$us$i = 0.0, $y$addr$2$us$us$i = 0.0, $y$addr$2$us645$i = 0.0, $y$addr$3$i = 0.0, $y$addr$4$i = 0.0, $z$0$i = 0, $z$0$lcssa = 0, $z$0580 = 0, $z$1$lcssa$i = 0, $z$1734$i = 0, $z$2 = 0, $z$2$i = 0, $z$3$lcssa$i = 0, $z$3724$i = 0, $z$3724$us$i = 0, $z$4$i = 0, $z$4$us$i = 0, $z$5$i = 0, $z$6$add$ptr742$i = 0, $z$6$i = 0;
 var $z$6$ph$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 864|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $big$i = sp + 16|0;
 $e2$i = sp + 8|0;
 $buf$i = sp + 560|0;
 $sub$ptr$rhs$cast$i = $buf$i;
 $ebuf0$i = sp + 840|0;
 $pad$i = sp + 584|0;
 $buf = sp + 520|0;
 $wc = sp;
 $mb = sp + 852|0;
 $tobool25 = ($f|0)!=(0|0);
 $add$ptr205 = (($buf) + 40|0);
 $sub$ptr$lhs$cast310 = $add$ptr205;
 $add$ptr333 = (($buf) + 39|0);
 $arrayidx363 = (($wc) + 4|0);
 $arrayidx$i335 = (($ebuf0$i) + 12|0);
 $incdec$ptr106$i = (($ebuf0$i) + 11|0);
 $sub$ptr$lhs$cast160$i = $arrayidx$i335;
 $sub$ptr$sub162$i = (($sub$ptr$lhs$cast160$i) - ($sub$ptr$rhs$cast$i))|0;
 $sub$ptr$sub145$i = (-2 - ($sub$ptr$rhs$cast$i))|0;
 $sub$ptr$sub153$i = (($sub$ptr$lhs$cast160$i) + 2)|0;
 $add$ptr213$i = (($big$i) + 288|0);
 $add$ptr671$i = (($buf$i) + 9|0);
 $sub$ptr$lhs$cast694$i = $add$ptr671$i;
 $incdec$ptr689$i = (($buf$i) + 8|0);
 $309 = 0;$arg$sroa$0$sroa$1$4$extract$trunc531552 = 0;$cnt$0 = 0;$incdec$ptr$i190563 = $fmt;$l$0 = 0;$l10n$0 = 0;
 L1: while(1) {
  $cmp = ($cnt$0|0)>(-1);
  do {
   if ($cmp) {
    $sub = (2147483647 - ($cnt$0))|0;
    $cmp1 = ($l$0|0)>($sub|0);
    if ($cmp1) {
     $call = (___errno_location()|0);
     HEAP32[$call>>2] = 75;
     $cnt$1 = -1;
     break;
    } else {
     $add = (($l$0) + ($cnt$0))|0;
     $cnt$1 = $add;
     break;
    }
   } else {
    $cnt$1 = $cnt$0;
   }
  } while(0);
  $0 = HEAP8[$incdec$ptr$i190563>>0]|0;
  $tobool = ($0<<24>>24)==(0);
  if ($tobool) {
   label = 344;
   break;
  } else {
   $310 = $0;$incdec$ptr$i190562 = $incdec$ptr$i190563;
  }
  while(1) {
   if ((($310<<24>>24) == 0)) {
    $incdec$ptr$i190564$lcssa = $incdec$ptr$i190562;$z$0$lcssa = $incdec$ptr$i190562;
    break;
   } else if ((($310<<24>>24) == 37)) {
    $incdec$ptr$i190564579 = $incdec$ptr$i190562;$z$0580 = $incdec$ptr$i190562;
    label = 9;
    break;
   }
   $incdec$ptr = (($incdec$ptr$i190562) + 1|0);
   $$pre = HEAP8[$incdec$ptr>>0]|0;
   $310 = $$pre;$incdec$ptr$i190562 = $incdec$ptr;
  }
  L12: do {
   if ((label|0) == 9) {
    while(1) {
     label = 0;
     $arrayidx16 = (($incdec$ptr$i190564579) + 1|0);
     $1 = HEAP8[$arrayidx16>>0]|0;
     $cmp18 = ($1<<24>>24)==(37);
     if (!($cmp18)) {
      $incdec$ptr$i190564$lcssa = $incdec$ptr$i190564579;$z$0$lcssa = $z$0580;
      break L12;
     }
     $incdec$ptr23 = (($z$0580) + 1|0);
     $add$ptr = (($incdec$ptr$i190564579) + 2|0);
     $2 = HEAP8[$add$ptr>>0]|0;
     $cmp13 = ($2<<24>>24)==(37);
     if ($cmp13) {
      $incdec$ptr$i190564579 = $add$ptr;$z$0580 = $incdec$ptr23;
      label = 9;
     } else {
      $incdec$ptr$i190564$lcssa = $add$ptr;$z$0$lcssa = $incdec$ptr23;
      break;
     }
    }
   }
  } while(0);
  $sub$ptr$lhs$cast = $z$0$lcssa;
  $sub$ptr$rhs$cast = $incdec$ptr$i190563;
  $sub$ptr$sub = (($sub$ptr$lhs$cast) - ($sub$ptr$rhs$cast))|0;
  if ($tobool25) {
   (___fwritex($incdec$ptr$i190563,$sub$ptr$sub,$f)|0);
  }
  $tobool28 = ($z$0$lcssa|0)==($incdec$ptr$i190563|0);
  if (!($tobool28)) {
   $l10n$0$phi = $l10n$0;$arg$sroa$0$sroa$1$4$extract$trunc531552$phi = $arg$sroa$0$sroa$1$4$extract$trunc531552;$309$phi = $309;$cnt$0 = $cnt$1;$incdec$ptr$i190563 = $incdec$ptr$i190564$lcssa;$l$0 = $sub$ptr$sub;$l10n$0 = $l10n$0$phi;$arg$sroa$0$sroa$1$4$extract$trunc531552 = $arg$sroa$0$sroa$1$4$extract$trunc531552$phi;$309 = $309$phi;
   continue;
  }
  $arrayidx31 = (($incdec$ptr$i190564$lcssa) + 1|0);
  $3 = HEAP8[$arrayidx31>>0]|0;
  $conv32 = $3 << 24 >> 24;
  $isdigittmp = (($conv32) + -48)|0;
  $isdigit = ($isdigittmp>>>0)<(10);
  if ($isdigit) {
   $arrayidx35 = (($incdec$ptr$i190564$lcssa) + 2|0);
   $4 = HEAP8[$arrayidx35>>0]|0;
   $cmp37 = ($4<<24>>24)==(36);
   if ($cmp37) {
    $add$ptr43 = (($incdec$ptr$i190564$lcssa) + 3|0);
    $$pre654 = HEAP8[$add$ptr43>>0]|0;
    $5 = $$pre654;$argpos$0 = $isdigittmp;$l10n$1 = 1;$storemerge = $add$ptr43;
   } else {
    $5 = $3;$argpos$0 = -1;$l10n$1 = $l10n$0;$storemerge = $arrayidx31;
   }
  } else {
   $5 = $3;$argpos$0 = -1;$l10n$1 = $l10n$0;$storemerge = $arrayidx31;
  }
  $conv48588 = $5 << 24 >> 24;
  $sub49589 = (($conv48588) + -32)|0;
  $cmp50590 = ($sub49589>>>0)<(32);
  L25: do {
   if ($cmp50590) {
    $6 = $5;$conv48593 = $conv48588;$fl$0592 = 0;$storemerge166591 = $storemerge;
    while(1) {
     $sub54 = (($conv48593) + -32)|0;
     $shl = 1 << $sub54;
     $and = $shl & 75913;
     $tobool55 = ($and|0)==(0);
     if ($tobool55) {
      $8 = $6;$fl$0586 = $fl$0592;$storemerge166584 = $storemerge166591;
      break L25;
     }
     $conv58 = $6 << 24 >> 24;
     $sub59 = (($conv58) + -32)|0;
     $shl60 = 1 << $sub59;
     $or = $shl60 | $fl$0592;
     $incdec$ptr62 = (($storemerge166591) + 1|0);
     $7 = HEAP8[$incdec$ptr62>>0]|0;
     $conv48 = $7 << 24 >> 24;
     $sub49 = (($conv48) + -32)|0;
     $cmp50 = ($sub49>>>0)<(32);
     if ($cmp50) {
      $6 = $7;$conv48593 = $conv48;$fl$0592 = $or;$storemerge166591 = $incdec$ptr62;
     } else {
      $8 = $7;$fl$0586 = $or;$storemerge166584 = $incdec$ptr62;
      break;
     }
    }
   } else {
    $8 = $5;$fl$0586 = 0;$storemerge166584 = $storemerge;
   }
  } while(0);
  $cmp65 = ($8<<24>>24)==(42);
  do {
   if ($cmp65) {
    $arrayidx68 = (($storemerge166584) + 1|0);
    $9 = HEAP8[$arrayidx68>>0]|0;
    $conv69 = $9 << 24 >> 24;
    $isdigittmp169 = (($conv69) + -48)|0;
    $isdigit170 = ($isdigittmp169>>>0)<(10);
    if ($isdigit170) {
     $arrayidx73 = (($storemerge166584) + 2|0);
     $10 = HEAP8[$arrayidx73>>0]|0;
     $cmp75 = ($10<<24>>24)==(36);
     if ($cmp75) {
      $arrayidx81 = (($nl_type) + ($isdigittmp169<<2)|0);
      HEAP32[$arrayidx81>>2] = 10;
      $11 = HEAP8[$arrayidx68>>0]|0;
      $conv83 = $11 << 24 >> 24;
      $sub84 = (($conv83) + -48)|0;
      $i86 = (($nl_arg) + ($sub84<<3)|0);
      $12 = $i86;
      $13 = $12;
      $14 = HEAP32[$13>>2]|0;
      $15 = (($12) + 4)|0;
      $16 = $15;
      $17 = HEAP32[$16>>2]|0;
      $add$ptr88 = (($storemerge166584) + 3|0);
      $l10n$2 = 1;$storemerge171 = $add$ptr88;$w$0 = $14;
     } else {
      label = 24;
     }
    } else {
     label = 24;
    }
    if ((label|0) == 24) {
     label = 0;
     $tobool90 = ($l10n$1|0)==(0);
     if (!($tobool90)) {
      $retval$0 = -1;
      label = 362;
      break L1;
     }
     if (!($tobool25)) {
      $fl$1 = $fl$0586;$incdec$ptr$i190559 = $arrayidx68;$l10n$3 = 0;$w$1 = 0;
      break;
     }
     $arglist_current = HEAP32[$ap>>2]|0;
     $18 = HEAP32[$arglist_current>>2]|0;
     $arglist_next = (($arglist_current) + 4|0);
     HEAP32[$ap>>2] = $arglist_next;
     $l10n$2 = 0;$storemerge171 = $arrayidx68;$w$0 = $18;
    }
    $cmp97 = ($w$0|0)<(0);
    if ($cmp97) {
     $or100 = $fl$0586 | 8192;
     $sub101 = (0 - ($w$0))|0;
     $fl$1 = $or100;$incdec$ptr$i190559 = $storemerge171;$l10n$3 = $l10n$2;$w$1 = $sub101;
    } else {
     $fl$1 = $fl$0586;$incdec$ptr$i190559 = $storemerge171;$l10n$3 = $l10n$2;$w$1 = $w$0;
    }
   } else {
    $conv3$i = $8 << 24 >> 24;
    $isdigittmp4$i = (($conv3$i) + -48)|0;
    $isdigit5$i = ($isdigittmp4$i>>>0)<(10);
    if ($isdigit5$i) {
     $19 = $storemerge166584;$conv7$i = $conv3$i;$i$06$i = 0;
     while(1) {
      $mul$i = ($i$06$i*10)|0;
      $sub$i = (($conv7$i) + -48)|0;
      $add$i = (($sub$i) + ($mul$i))|0;
      $incdec$ptr$i = (($19) + 1|0);
      $20 = HEAP8[$incdec$ptr$i>>0]|0;
      $conv$i = $20 << 24 >> 24;
      $isdigittmp$i = (($conv$i) + -48)|0;
      $isdigit$i = ($isdigittmp$i>>>0)<(10);
      if ($isdigit$i) {
       $19 = $incdec$ptr$i;$conv7$i = $conv$i;$i$06$i = $add$i;
      } else {
       break;
      }
     }
     $cmp105 = ($add$i|0)<(0);
     if ($cmp105) {
      $retval$0 = -1;
      label = 362;
      break L1;
     } else {
      $fl$1 = $fl$0586;$incdec$ptr$i190559 = $incdec$ptr$i;$l10n$3 = $l10n$1;$w$1 = $add$i;
     }
    } else {
     $fl$1 = $fl$0586;$incdec$ptr$i190559 = $storemerge166584;$l10n$3 = $l10n$1;$w$1 = 0;
    }
   }
  } while(0);
  $21 = HEAP8[$incdec$ptr$i190559>>0]|0;
  $cmp111 = ($21<<24>>24)==(46);
  L46: do {
   if ($cmp111) {
    $arrayidx114 = (($incdec$ptr$i190559) + 1|0);
    $22 = HEAP8[$arrayidx114>>0]|0;
    $cmp116 = ($22<<24>>24)==(42);
    if (!($cmp116)) {
     $conv3$i182 = $22 << 24 >> 24;
     $isdigittmp4$i183 = (($conv3$i182) + -48)|0;
     $isdigit5$i184 = ($isdigittmp4$i183>>>0)<(10);
     if ($isdigit5$i184) {
      $33 = $arrayidx114;$conv7$i185 = $conv3$i182;$i$06$i186 = 0;
     } else {
      $incdec$ptr$i190558 = $arrayidx114;$p$0 = 0;
      break;
     }
     while(1) {
      $mul$i187 = ($i$06$i186*10)|0;
      $sub$i188 = (($conv7$i185) + -48)|0;
      $add$i189 = (($sub$i188) + ($mul$i187))|0;
      $incdec$ptr$i190 = (($33) + 1|0);
      $34 = HEAP8[$incdec$ptr$i190>>0]|0;
      $conv$i191 = $34 << 24 >> 24;
      $isdigittmp$i192 = (($conv$i191) + -48)|0;
      $isdigit$i193 = ($isdigittmp$i192>>>0)<(10);
      if ($isdigit$i193) {
       $33 = $incdec$ptr$i190;$conv7$i185 = $conv$i191;$i$06$i186 = $add$i189;
      } else {
       $incdec$ptr$i190558 = $incdec$ptr$i190;$p$0 = $add$i189;
       break L46;
      }
     }
    }
    $arrayidx119 = (($incdec$ptr$i190559) + 2|0);
    $23 = HEAP8[$arrayidx119>>0]|0;
    $conv120 = $23 << 24 >> 24;
    $isdigittmp167 = (($conv120) + -48)|0;
    $isdigit168 = ($isdigittmp167>>>0)<(10);
    if ($isdigit168) {
     $arrayidx124 = (($incdec$ptr$i190559) + 3|0);
     $24 = HEAP8[$arrayidx124>>0]|0;
     $cmp126 = ($24<<24>>24)==(36);
     if ($cmp126) {
      $arrayidx132 = (($nl_type) + ($isdigittmp167<<2)|0);
      HEAP32[$arrayidx132>>2] = 10;
      $25 = HEAP8[$arrayidx119>>0]|0;
      $conv134 = $25 << 24 >> 24;
      $sub135 = (($conv134) + -48)|0;
      $i137 = (($nl_arg) + ($sub135<<3)|0);
      $26 = $i137;
      $27 = $26;
      $28 = HEAP32[$27>>2]|0;
      $29 = (($26) + 4)|0;
      $30 = $29;
      $31 = HEAP32[$30>>2]|0;
      $add$ptr139 = (($incdec$ptr$i190559) + 4|0);
      $incdec$ptr$i190558 = $add$ptr139;$p$0 = $28;
      break;
     }
    }
    $tobool141 = ($l10n$3|0)==(0);
    if (!($tobool141)) {
     $retval$0 = -1;
     label = 362;
     break L1;
    }
    if ($tobool25) {
     $arglist_current2 = HEAP32[$ap>>2]|0;
     $32 = HEAP32[$arglist_current2>>2]|0;
     $arglist_next3 = (($arglist_current2) + 4|0);
     HEAP32[$ap>>2] = $arglist_next3;
     $incdec$ptr$i190558 = $arrayidx119;$p$0 = $32;
    } else {
     $incdec$ptr$i190558 = $arrayidx119;$p$0 = 0;
    }
   } else {
    $incdec$ptr$i190558 = $incdec$ptr$i190559;$p$0 = -1;
   }
  } while(0);
  $incdec$ptr$i190557 = $incdec$ptr$i190558;$st$0 = 0;
  while(1) {
   $35 = HEAP8[$incdec$ptr$i190557>>0]|0;
   $conv163 = $35 << 24 >> 24;
   $sub164 = (($conv163) + -65)|0;
   $cmp165 = ($sub164>>>0)>(57);
   if ($cmp165) {
    $retval$0 = -1;
    label = 362;
    break L1;
   }
   $incdec$ptr169 = (($incdec$ptr$i190557) + 1|0);
   $arrayidx173 = ((14640 + (($st$0*58)|0)|0) + ($sub164)|0);
   $36 = HEAP8[$arrayidx173>>0]|0;
   $conv174 = $36&255;
   $sub175 = (($conv174) + -1)|0;
   $cmp176 = ($sub175>>>0)<(8);
   if ($cmp176) {
    $incdec$ptr$i190557 = $incdec$ptr169;$st$0 = $conv174;
   } else {
    break;
   }
  }
  $tobool178 = ($36<<24>>24)==(0);
  if ($tobool178) {
   $retval$0 = -1;
   label = 362;
   break;
  }
  $cmp181 = ($36<<24>>24)==(19);
  $cmp184 = ($argpos$0|0)>(-1);
  L65: do {
   if ($cmp181) {
    if ($cmp184) {
     $retval$0 = -1;
     label = 362;
     break L1;
    } else {
     $311 = $309;$arg$sroa$0$sroa$1$4$extract$trunc531556 = $arg$sroa$0$sroa$1$4$extract$trunc531552;
     label = 63;
    }
   } else {
    if ($cmp184) {
     $arrayidx192 = (($nl_type) + ($argpos$0<<2)|0);
     HEAP32[$arrayidx192>>2] = $conv174;
     $37 = (($nl_arg) + ($argpos$0<<3)|0);
     $38 = $37;
     $39 = $38;
     $40 = HEAP32[$39>>2]|0;
     $41 = (($38) + 4)|0;
     $42 = $41;
     $43 = HEAP32[$42>>2]|0;
     $44 = $40;
     $311 = $44;$arg$sroa$0$sroa$1$4$extract$trunc531556 = $43;
     label = 63;
     break;
    }
    if (!($tobool25)) {
     $retval$0 = 0;
     label = 362;
     break L1;
    }
    $cmp$i198 = ($36&255)>(20);
    if ($cmp$i198) {
     $81 = $35;$82 = $309;$arg$sroa$0$sroa$1$4$extract$trunc531556568 = $arg$sroa$0$sroa$1$4$extract$trunc531552;
    } else {
     do {
      switch ($conv174|0) {
      case 14:  {
       $arglist_current20 = HEAP32[$ap>>2]|0;
       $64 = HEAP32[$arglist_current20>>2]|0;
       $arglist_next21 = (($arglist_current20) + 4|0);
       HEAP32[$ap>>2] = $arglist_next21;
       $conv17$mask$i220 = $64 & 65535;
       $65 = $conv17$mask$i220;
       $312 = $65;$arg$sroa$0$sroa$1$4$extract$trunc531556656 = 0;
       label = 64;
       break L65;
       break;
      }
      case 9:  {
       $arglist_current5 = HEAP32[$ap>>2]|0;
       $45 = HEAP32[$arglist_current5>>2]|0;
       $arglist_next6 = (($arglist_current5) + 4|0);
       HEAP32[$ap>>2] = $arglist_next6;
       $312 = $45;$arg$sroa$0$sroa$1$4$extract$trunc531556656 = $arg$sroa$0$sroa$1$4$extract$trunc531552;
       label = 64;
       break L65;
       break;
      }
      case 12:  {
       $arglist_current14 = HEAP32[$ap>>2]|0;
       $52 = $arglist_current14;
       $53 = $52;
       $54 = HEAP32[$53>>2]|0;
       $55 = (($52) + 4)|0;
       $56 = $55;
       $57 = HEAP32[$56>>2]|0;
       $arglist_next15 = (($arglist_current14) + 8|0);
       HEAP32[$ap>>2] = $arglist_next15;
       $58 = $54;
       $312 = $58;$arg$sroa$0$sroa$1$4$extract$trunc531556656 = $57;
       label = 64;
       break L65;
       break;
      }
      case 13:  {
       $arglist_current17 = HEAP32[$ap>>2]|0;
       $59 = HEAP32[$arglist_current17>>2]|0;
       $arglist_next18 = (($arglist_current17) + 4|0);
       HEAP32[$ap>>2] = $arglist_next18;
       $conv12$i215 = $59&65535;
       $60 = $conv12$i215 << 16 >> 16;
       $61 = ($60|0)<(0);
       $62 = $61 << 31 >> 31;
       $sext573 = $59 << 16;
       $arg$sroa$0$sroa$0$0$extract$trunc458 = $sext573 >> 16;
       $63 = $arg$sroa$0$sroa$0$0$extract$trunc458;
       $312 = $63;$arg$sroa$0$sroa$1$4$extract$trunc531556656 = $62;
       label = 64;
       break L65;
       break;
      }
      case 18:  {
       $arglist_current32 = HEAP32[$ap>>2]|0;
       HEAP32[tempDoublePtr>>2]=HEAP32[$arglist_current32>>2];HEAP32[tempDoublePtr+4>>2]=HEAP32[$arglist_current32+4>>2];$77 = +HEAPF64[tempDoublePtr>>3];
       $arglist_next33 = (($arglist_current32) + 8|0);
       HEAP32[$ap>>2] = $arglist_next33;
       HEAPF64[tempDoublePtr>>3] = $77;$78 = HEAP32[tempDoublePtr>>2]|0;
       $79 = HEAP32[tempDoublePtr+4>>2]|0;
       $80 = $78;
       $311 = $80;$arg$sroa$0$sroa$1$4$extract$trunc531556 = $79;
       label = 63;
       break L65;
       break;
      }
      case 15:  {
       $arglist_current23 = HEAP32[$ap>>2]|0;
       $66 = HEAP32[$arglist_current23>>2]|0;
       $arglist_next24 = (($arglist_current23) + 4|0);
       HEAP32[$ap>>2] = $arglist_next24;
       $conv22$i225 = $66&255;
       $67 = $conv22$i225 << 24 >> 24;
       $68 = ($67|0)<(0);
       $69 = $68 << 31 >> 31;
       $sext = $66 << 24;
       $arg$sroa$0$sroa$0$0$extract$trunc456 = $sext >> 24;
       $70 = $arg$sroa$0$sroa$0$0$extract$trunc456;
       $312 = $70;$arg$sroa$0$sroa$1$4$extract$trunc531556656 = $69;
       label = 64;
       break L65;
       break;
      }
      case 10:  {
       $arglist_current8 = HEAP32[$ap>>2]|0;
       $46 = HEAP32[$arglist_current8>>2]|0;
       $arglist_next9 = (($arglist_current8) + 4|0);
       HEAP32[$ap>>2] = $arglist_next9;
       $47 = ($46|0)<(0);
       $48 = $47 << 31 >> 31;
       $49 = $46;
       $312 = $49;$arg$sroa$0$sroa$1$4$extract$trunc531556656 = $48;
       label = 64;
       break L65;
       break;
      }
      case 17:  {
       $arglist_current29 = HEAP32[$ap>>2]|0;
       HEAP32[tempDoublePtr>>2]=HEAP32[$arglist_current29>>2];HEAP32[tempDoublePtr+4>>2]=HEAP32[$arglist_current29+4>>2];$73 = +HEAPF64[tempDoublePtr>>3];
       $arglist_next30 = (($arglist_current29) + 8|0);
       HEAP32[$ap>>2] = $arglist_next30;
       HEAPF64[tempDoublePtr>>3] = $73;$74 = HEAP32[tempDoublePtr>>2]|0;
       $75 = HEAP32[tempDoublePtr+4>>2]|0;
       $76 = $74;
       $312 = $76;$arg$sroa$0$sroa$1$4$extract$trunc531556656 = $75;
       label = 64;
       break L65;
       break;
      }
      case 11:  {
       $arglist_current11 = HEAP32[$ap>>2]|0;
       $50 = HEAP32[$arglist_current11>>2]|0;
       $arglist_next12 = (($arglist_current11) + 4|0);
       HEAP32[$ap>>2] = $arglist_next12;
       $51 = $50;
       $312 = $51;$arg$sroa$0$sroa$1$4$extract$trunc531556656 = 0;
       label = 64;
       break L65;
       break;
      }
      case 16:  {
       $arglist_current26 = HEAP32[$ap>>2]|0;
       $71 = HEAP32[$arglist_current26>>2]|0;
       $arglist_next27 = (($arglist_current26) + 4|0);
       HEAP32[$ap>>2] = $arglist_next27;
       $conv27$mask$i230 = $71 & 255;
       $72 = $conv27$mask$i230;
       $312 = $72;$arg$sroa$0$sroa$1$4$extract$trunc531556656 = 0;
       label = 64;
       break L65;
       break;
      }
      default: {
       $312 = $309;$arg$sroa$0$sroa$1$4$extract$trunc531556656 = $arg$sroa$0$sroa$1$4$extract$trunc531552;
       label = 64;
       break L65;
      }
      }
     } while(0);
    }
   }
  } while(0);
  if ((label|0) == 63) {
   label = 0;
   if ($tobool25) {
    $312 = $311;$arg$sroa$0$sroa$1$4$extract$trunc531556656 = $arg$sroa$0$sroa$1$4$extract$trunc531556;
    label = 64;
   } else {
    $309 = $311;$arg$sroa$0$sroa$1$4$extract$trunc531552 = $arg$sroa$0$sroa$1$4$extract$trunc531556;$cnt$0 = $cnt$1;$incdec$ptr$i190563 = $incdec$ptr169;$l$0 = $sub$ptr$sub;$l10n$0 = $l10n$3;
    continue;
   }
  }
  if ((label|0) == 64) {
   label = 0;
   $$pre655 = HEAP8[$incdec$ptr$i190557>>0]|0;
   $81 = $$pre655;$82 = $312;$arg$sroa$0$sroa$1$4$extract$trunc531556568 = $arg$sroa$0$sroa$1$4$extract$trunc531556656;
  }
  $conv207 = $81 << 24 >> 24;
  $tobool208 = ($st$0|0)==(0);
  if ($tobool208) {
   $t$0 = $conv207;
  } else {
   $and210 = $conv207 & 15;
   $cmp211 = ($and210|0)==(3);
   $and214 = $conv207 & -33;
   $and214$conv207 = $cmp211 ? $and214 : $conv207;
   $t$0 = $and214$conv207;
  }
  $and216 = $fl$1 & 8192;
  $tobool217 = ($and216|0)==(0);
  $and219 = $fl$1 & -65537;
  $fl$1$and219 = $tobool217 ? $fl$1 : $and219;
  L92: do {
   switch ($t$0|0) {
   case 110:  {
    switch ($st$0|0) {
    case 4:  {
     $conv232 = $cnt$1&255;
     HEAP8[$82>>0] = $conv232;
     $309 = $82;$arg$sroa$0$sroa$1$4$extract$trunc531552 = $arg$sroa$0$sroa$1$4$extract$trunc531556568;$cnt$0 = $cnt$1;$incdec$ptr$i190563 = $incdec$ptr169;$l$0 = $sub$ptr$sub;$l10n$0 = $l10n$3;
     continue L1;
     break;
    }
    case 6:  {
     HEAP32[$82>>2] = $cnt$1;
     $309 = $82;$arg$sroa$0$sroa$1$4$extract$trunc531552 = $arg$sroa$0$sroa$1$4$extract$trunc531556568;$cnt$0 = $cnt$1;$incdec$ptr$i190563 = $incdec$ptr169;$l$0 = $sub$ptr$sub;$l10n$0 = $l10n$3;
     continue L1;
     break;
    }
    case 2:  {
     $83 = ($cnt$1|0)<(0);
     $84 = $83 << 31 >> 31;
     $85 = $82;
     $86 = $85;
     HEAP32[$86>>2] = $cnt$1;
     $87 = (($85) + 4)|0;
     $88 = $87;
     HEAP32[$88>>2] = $84;
     $309 = $82;$arg$sroa$0$sroa$1$4$extract$trunc531552 = $arg$sroa$0$sroa$1$4$extract$trunc531556568;$cnt$0 = $cnt$1;$incdec$ptr$i190563 = $incdec$ptr169;$l$0 = $sub$ptr$sub;$l10n$0 = $l10n$3;
     continue L1;
     break;
    }
    case 3:  {
     $conv229 = $cnt$1&65535;
     HEAP16[$82>>1] = $conv229;
     $309 = $82;$arg$sroa$0$sroa$1$4$extract$trunc531552 = $arg$sroa$0$sroa$1$4$extract$trunc531556568;$cnt$0 = $cnt$1;$incdec$ptr$i190563 = $incdec$ptr169;$l$0 = $sub$ptr$sub;$l10n$0 = $l10n$3;
     continue L1;
     break;
    }
    case 0:  {
     HEAP32[$82>>2] = $cnt$1;
     $309 = $82;$arg$sroa$0$sroa$1$4$extract$trunc531552 = $arg$sroa$0$sroa$1$4$extract$trunc531556568;$cnt$0 = $cnt$1;$incdec$ptr$i190563 = $incdec$ptr169;$l$0 = $sub$ptr$sub;$l10n$0 = $l10n$3;
     continue L1;
     break;
    }
    case 1:  {
     HEAP32[$82>>2] = $cnt$1;
     $309 = $82;$arg$sroa$0$sroa$1$4$extract$trunc531552 = $arg$sroa$0$sroa$1$4$extract$trunc531556568;$cnt$0 = $cnt$1;$incdec$ptr$i190563 = $incdec$ptr169;$l$0 = $sub$ptr$sub;$l10n$0 = $l10n$3;
     continue L1;
     break;
    }
    case 7:  {
     $89 = ($cnt$1|0)<(0);
     $90 = $89 << 31 >> 31;
     $91 = $82;
     $92 = $91;
     HEAP32[$92>>2] = $cnt$1;
     $93 = (($91) + 4)|0;
     $94 = $93;
     HEAP32[$94>>2] = $90;
     $309 = $82;$arg$sroa$0$sroa$1$4$extract$trunc531552 = $arg$sroa$0$sroa$1$4$extract$trunc531556568;$cnt$0 = $cnt$1;$incdec$ptr$i190563 = $incdec$ptr169;$l$0 = $sub$ptr$sub;$l10n$0 = $l10n$3;
     continue L1;
     break;
    }
    default: {
     $309 = $82;$arg$sroa$0$sroa$1$4$extract$trunc531552 = $arg$sroa$0$sroa$1$4$extract$trunc531556568;$cnt$0 = $cnt$1;$incdec$ptr$i190563 = $incdec$ptr169;$l$0 = $sub$ptr$sub;$l10n$0 = $l10n$3;
     continue L1;
    }
    }
    break;
   }
   case 117:  {
    $128 = $82;$arg$sroa$0$sroa$1$4$extract$trunc531554 = $arg$sroa$0$sroa$1$4$extract$trunc531556568;$pl$0 = 0;$prefix$0 = 15104;
    label = 89;
    break;
   }
   case 99:  {
    $153 = $82;
    $conv332 = $153&255;
    HEAP8[$add$ptr333>>0] = $conv332;
    $313 = $82;$a$2 = $add$ptr333;$arg$sroa$0$sroa$1$4$extract$trunc531555 = $arg$sroa$0$sroa$1$4$extract$trunc531556568;$fl$6 = $and219;$p$5 = 1;$pl$2 = 0;$prefix$2 = 15104;$z$2 = $add$ptr205;
    break;
   }
   case 88: case 120:  {
    $fl$3 = $fl$1$and219;$p$1 = $p$0;$t$1 = $t$0;
    label = 77;
    break;
   }
   case 111:  {
    $107 = $82;
    $108 = ($107|0)==(0);
    $109 = ($arg$sroa$0$sroa$1$4$extract$trunc531556568|0)==(0);
    $110 = $108 & $109;
    if ($110) {
     $s$addr$0$lcssa$i269 = $add$ptr205;
    } else {
     $112 = $107;$115 = $arg$sroa$0$sroa$1$4$extract$trunc531556568;$s$addr$07$i = $add$ptr205;
     while(1) {
      $111 = $112 & 7;
      $113 = $111 | 48;
      $114 = $113&255;
      $incdec$ptr$i265 = (($s$addr$07$i) + -1|0);
      HEAP8[$incdec$ptr$i265>>0] = $114;
      $116 = (_bitshift64Lshr(($112|0),($115|0),3)|0);
      $117 = tempRet0;
      $118 = ($116|0)==(0);
      $119 = ($117|0)==(0);
      $120 = $118 & $119;
      if ($120) {
       $s$addr$0$lcssa$i269 = $incdec$ptr$i265;
       break;
      } else {
       $112 = $116;$115 = $117;$s$addr$07$i = $incdec$ptr$i265;
      }
     }
    }
    $and263 = $fl$1$and219 & 8;
    $tobool264 = ($and263|0)==(0);
    if ($tobool264) {
     $149 = $82;$a$0 = $s$addr$0$lcssa$i269;$arg$sroa$0$sroa$1$4$extract$trunc531553 = $arg$sroa$0$sroa$1$4$extract$trunc531556568;$fl$4 = $fl$1$and219;$p$2 = $p$0;$pl$1 = 0;$prefix$1 = 15104;
     label = 94;
    } else {
     $$ = $110 ? 15104 : ((15104 + 5|0));
     $121 = $110&1;
     $$172 = $121 ^ 1;
     $149 = $82;$a$0 = $s$addr$0$lcssa$i269;$arg$sroa$0$sroa$1$4$extract$trunc531553 = $arg$sroa$0$sroa$1$4$extract$trunc531556568;$fl$4 = $fl$1$and219;$p$2 = $p$0;$pl$1 = $$172;$prefix$1 = $$;
     label = 94;
    }
    break;
   }
   case 105: case 100:  {
    $122 = $82;
    $123 = ($arg$sroa$0$sroa$1$4$extract$trunc531556568|0)<(0);
    if ($123) {
     $124 = (_i64Subtract(0,0,($122|0),($arg$sroa$0$sroa$1$4$extract$trunc531556568|0))|0);
     $125 = tempRet0;
     $126 = $124;
     $128 = $126;$arg$sroa$0$sroa$1$4$extract$trunc531554 = $125;$pl$0 = 1;$prefix$0 = 15104;
     label = 89;
     break L92;
    }
    $and282 = $fl$1$and219 & 2048;
    $tobool283 = ($and282|0)==(0);
    if ($tobool283) {
     $and287 = $fl$1$and219 & 1;
     $tobool288 = ($and287|0)==(0);
     $$173 = $tobool288 ? 15104 : ((15104 + 2|0));
     $128 = $82;$arg$sroa$0$sroa$1$4$extract$trunc531554 = $arg$sroa$0$sroa$1$4$extract$trunc531556568;$pl$0 = $and287;$prefix$0 = $$173;
     label = 89;
    } else {
     $128 = $82;$arg$sroa$0$sroa$1$4$extract$trunc531554 = $arg$sroa$0$sroa$1$4$extract$trunc531556568;$pl$0 = 1;$prefix$0 = ((15104 + 1|0));
     label = 89;
    }
    break;
   }
   case 109:  {
    $call337 = (___errno_location()|0);
    $154 = HEAP32[$call337>>2]|0;
    $call338 = (_strerror(($154|0))|0);
    $a$1 = $call338;
    label = 99;
    break;
   }
   case 115:  {
    $tobool342 = ($82|0)==(0|0);
    $$175 = $tobool342 ? 15120 : $82;
    $a$1 = $$175;
    label = 99;
    break;
   }
   case 67:  {
    $155 = $82;
    HEAP32[$wc>>2] = $155;
    HEAP32[$arrayidx363>>2] = 0;
    $314 = $wc;$315 = $wc;$p$4658 = -1;
    label = 104;
    break;
   }
   case 83:  {
    $cmp370610 = ($p$0|0)==(0);
    if ($cmp370610) {
     $316 = $82;$317 = $82;$i$0609 = 0;
     label = 110;
    } else {
     $314 = $82;$315 = $82;$p$4658 = $p$0;
     label = 104;
    }
    break;
   }
   case 112:  {
    $cmp240 = ($p$0>>>0)>(8);
    $cond245 = $cmp240 ? $p$0 : 8;
    $or246 = $fl$1$and219 | 8;
    $fl$3 = $or246;$p$1 = $cond245;$t$1 = 120;
    label = 77;
    break;
   }
   case 65: case 71: case 70: case 69: case 97: case 103: case 102: case 101:  {
    $158 = $82;
    HEAP32[tempDoublePtr>>2] = $158;HEAP32[tempDoublePtr+4>>2] = $arg$sroa$0$sroa$1$4$extract$trunc531556568;$159 = +HEAPF64[tempDoublePtr>>3];
    HEAP32[$e2$i>>2] = 0;
    $160 = ($arg$sroa$0$sroa$1$4$extract$trunc531556568|0)<(0);
    if ($160) {
     $sub$i337 = -$159;
     $pl$0$i = 1;$prefix$0$i = 15128;$y$addr$0$i = $sub$i337;
    } else {
     $and$i338 = $fl$1$and219 & 2048;
     $tobool9$i339 = ($and$i338|0)==(0);
     if ($tobool9$i339) {
      $and12$i = $fl$1$and219 & 1;
      $tobool13$i = ($and12$i|0)==(0);
      $$$i = $tobool13$i ? ((15128 + 1|0)) : ((15128 + 6|0));
      $pl$0$i = $and12$i;$prefix$0$i = $$$i;$y$addr$0$i = $159;
     } else {
      $pl$0$i = 1;$prefix$0$i = ((15128 + 3|0));$y$addr$0$i = $159;
     }
    }
    HEAPF64[tempDoublePtr>>3] = $y$addr$0$i;$161 = HEAP32[tempDoublePtr>>2]|0;
    $162 = HEAP32[tempDoublePtr+4>>2]|0;
    $163 = $162 & 2146435072;
    $164 = ($163>>>0)<(2146435072);
    $165 = ($163|0)==(2146435072);
    $166 = (0)<(0);
    $167 = $165 & $166;
    $168 = $164 | $167;
    if (!($168)) {
     $and36$i = $t$0 & 32;
     $tobool37$i = ($and36$i|0)!=(0);
     $cond$i340 = $tobool37$i ? 15152 : 15160;
     $cmp38$i = ($y$addr$0$i != $y$addr$0$i) | (0.0 != 0.0);
     if ($cmp38$i) {
      $cond43$i = $tobool37$i ? 15168 : 15176;
      $pl$1$i = 0;$s35$0$i = $cond43$i;
     } else {
      $pl$1$i = $pl$0$i;$s35$0$i = $cond$i340;
     }
     $add$i341 = (($pl$1$i) + 3)|0;
     $and$i373$i = $fl$1$and219 & 8192;
     $tobool$i374$i = ($and$i373$i|0)==(0);
     $cmp$i375$i = ($add$i341|0)<($w$1|0);
     $or$cond$i376$i = $tobool$i374$i & $cmp$i375$i;
     if ($or$cond$i376$i) {
      $sub$i377$i = (($w$1) - ($add$i341))|0;
      $cmp1$i378$i = ($sub$i377$i>>>0)>(256);
      $cond$i379$i = $cmp1$i378$i ? 256 : $sub$i377$i;
      _memset(($pad$i|0),32,($cond$i379$i|0))|0;
      $cmp39$i380$i = ($sub$i377$i>>>0)>(255);
      if ($cmp39$i380$i) {
       $l$addr$010$i382$i = $sub$i377$i;
       while(1) {
        (___fwritex($pad$i,256,$f)|0);
        $sub5$i384$i = (($l$addr$010$i382$i) + -256)|0;
        $cmp3$i385$i = ($sub5$i384$i>>>0)>(255);
        if ($cmp3$i385$i) {
         $l$addr$010$i382$i = $sub5$i384$i;
        } else {
         $l$addr$0$lcssa$i387$i = $sub5$i384$i;
         break;
        }
       }
      } else {
       $l$addr$0$lcssa$i387$i = $sub$i377$i;
      }
      (___fwritex($pad$i,$l$addr$0$lcssa$i387$i,$f)|0);
     }
     (___fwritex($prefix$0$i,$pl$1$i,$f)|0);
     (___fwritex($s35$0$i,3,$f)|0);
     $xor$i = $fl$1$and219 & 73728;
     $tobool$i394$i = ($xor$i|0)==(8192);
     $or$cond$i396$i = $tobool$i394$i & $cmp$i375$i;
     if ($or$cond$i396$i) {
      $sub$i397$i = (($w$1) - ($add$i341))|0;
      $cmp1$i398$i = ($sub$i397$i>>>0)>(256);
      $cond$i399$i = $cmp1$i398$i ? 256 : $sub$i397$i;
      _memset(($pad$i|0),32,($cond$i399$i|0))|0;
      $cmp39$i400$i = ($sub$i397$i>>>0)>(255);
      if ($cmp39$i400$i) {
       $l$addr$010$i402$i = $sub$i397$i;
       while(1) {
        (___fwritex($pad$i,256,$f)|0);
        $sub5$i404$i = (($l$addr$010$i402$i) + -256)|0;
        $cmp3$i405$i = ($sub5$i404$i>>>0)>(255);
        if ($cmp3$i405$i) {
         $l$addr$010$i402$i = $sub5$i404$i;
        } else {
         $l$addr$0$lcssa$i407$i = $sub5$i404$i;
         break;
        }
       }
      } else {
       $l$addr$0$lcssa$i407$i = $sub$i397$i;
      }
      (___fwritex($pad$i,$l$addr$0$lcssa$i407$i,$f)|0);
     }
     $w$add$i = $cmp$i375$i ? $w$1 : $add$i341;
     $309 = $82;$arg$sroa$0$sroa$1$4$extract$trunc531552 = $arg$sroa$0$sroa$1$4$extract$trunc531556568;$cnt$0 = $cnt$1;$incdec$ptr$i190563 = $incdec$ptr169;$l$0 = $w$add$i;$l10n$0 = $l10n$3;
     continue L1;
    }
    $call55$i = (+_frexpl($y$addr$0$i,$e2$i));
    $mul$i343 = $call55$i * 2.0;
    $tobool56$i = $mul$i343 != 0.0;
    if ($tobool56$i) {
     $169 = HEAP32[$e2$i>>2]|0;
     $dec$i = (($169) + -1)|0;
     HEAP32[$e2$i>>2] = $dec$i;
    }
    $or$i344 = $t$0 | 32;
    $cmp59$i = ($or$i344|0)==(97);
    if ($cmp59$i) {
     $and62$i = $t$0 & 32;
     $tobool63$i = ($and62$i|0)==(0);
     $add$ptr65$i = (($prefix$0$i) + 9|0);
     $prefix$0$add$ptr65$i = $tobool63$i ? $prefix$0$i : $add$ptr65$i;
     $add67362$i = $pl$0$i | 2;
     $170 = ($p$0>>>0)>(11);
     $sub74$i = (12 - ($p$0))|0;
     $re$0$i = $170 ? 0 : $sub74$i;
     $tobool76$i = ($re$0$i|0)==(0);
     do {
      if ($tobool76$i) {
       $y$addr$1$i = $mul$i343;
      } else {
       $re$1667$i = $re$0$i;$round$0666$i = 8.0;
       while(1) {
        $dec78$i = (($re$1667$i) + -1)|0;
        $mul80$i = $round$0666$i * 16.0;
        $tobool79$i = ($dec78$i|0)==(0);
        if ($tobool79$i) {
         break;
        } else {
         $re$1667$i = $dec78$i;$round$0666$i = $mul80$i;
        }
       }
       $171 = HEAP8[$prefix$0$add$ptr65$i>>0]|0;
       $cmp82$i = ($171<<24>>24)==(45);
       if ($cmp82$i) {
        $sub85$i = -$mul$i343;
        $sub86$i = $sub85$i - $mul80$i;
        $add87$i = $mul80$i + $sub86$i;
        $sub88$i = -$add87$i;
        $y$addr$1$i = $sub88$i;
        break;
       } else {
        $add90$i = $mul$i343 + $mul80$i;
        $sub91$i = $add90$i - $mul80$i;
        $y$addr$1$i = $sub91$i;
        break;
       }
      }
     } while(0);
     $172 = HEAP32[$e2$i>>2]|0;
     $cmp94$i = ($172|0)<(0);
     $sub97$i = (0 - ($172))|0;
     $cond100$i = $cmp94$i ? $sub97$i : $172;
     $cmp12$i$i = ($cond100$i|0)<(0);
     if ($cmp12$i$i) {
      $173 = ($cond100$i|0)<(0);
      $174 = $173 << 31 >> 31;
      $175 = $cond100$i;$176 = $174;$s$addr$014$i$i = $arrayidx$i335;
      while(1) {
       $177 = (___uremdi3(($175|0),($176|0),10,0)|0);
       $178 = tempRet0;
       $179 = $177 | 48;
       $180 = $179&255;
       $incdec$ptr$i$i = (($s$addr$014$i$i) + -1|0);
       HEAP8[$incdec$ptr$i$i>>0] = $180;
       $181 = (___udivdi3(($175|0),($176|0),10,0)|0);
       $182 = tempRet0;
       $183 = ($176>>>0)>(9);
       $184 = ($176|0)==(9);
       $185 = ($175>>>0)>(4294967295);
       $186 = $184 & $185;
       $187 = $183 | $186;
       if ($187) {
        $175 = $181;$176 = $182;$s$addr$014$i$i = $incdec$ptr$i$i;
       } else {
        break;
       }
      }
      $s$addr$0$lcssa$i$i = $incdec$ptr$i$i;$x$addr$0$lcssa$off0$i$i = $181;
     } else {
      $s$addr$0$lcssa$i$i = $arrayidx$i335;$x$addr$0$lcssa$off0$i$i = $cond100$i;
     }
     $tobool9$i$i = ($x$addr$0$lcssa$off0$i$i|0)==(0);
     if ($tobool9$i$i) {
      $s$addr$1$lcssa$i$i = $s$addr$0$lcssa$i$i;
     } else {
      $s$addr$110$i$i = $s$addr$0$lcssa$i$i;$y$011$i$i = $x$addr$0$lcssa$off0$i$i;
      while(1) {
       $rem4$i$i = (($y$011$i$i>>>0) % 10)&-1;
       $add57$i$i = $rem4$i$i | 48;
       $conv6$i$i = $add57$i$i&255;
       $incdec$ptr7$i$i = (($s$addr$110$i$i) + -1|0);
       HEAP8[$incdec$ptr7$i$i>>0] = $conv6$i$i;
       $div9$i$i = (($y$011$i$i>>>0) / 10)&-1;
       $188 = ($y$011$i$i>>>0)<(10);
       if ($188) {
        $s$addr$1$lcssa$i$i = $incdec$ptr7$i$i;
        break;
       } else {
        $s$addr$110$i$i = $incdec$ptr7$i$i;$y$011$i$i = $div9$i$i;
       }
      }
     }
     $cmp103$i = ($s$addr$1$lcssa$i$i|0)==($arrayidx$i335|0);
     if ($cmp103$i) {
      HEAP8[$incdec$ptr106$i>>0] = 48;
      $estr$0$i = $incdec$ptr106$i;
     } else {
      $estr$0$i = $s$addr$1$lcssa$i$i;
     }
     $189 = HEAP32[$e2$i>>2]|0;
     $190 = $189 >> 31;
     $191 = $190 & 2;
     $192 = (($191) + 43)|0;
     $conv111$i = $192&255;
     $incdec$ptr112$i = (($estr$0$i) + -1|0);
     HEAP8[$incdec$ptr112$i>>0] = $conv111$i;
     $add113$i = (($t$0) + 15)|0;
     $conv114$i = $add113$i&255;
     $incdec$ptr115$i = (($estr$0$i) + -2|0);
     HEAP8[$incdec$ptr115$i>>0] = $conv114$i;
     $cmp131$i = ($p$0|0)>(0);
     $and134$i = $fl$1$and219 & 8;
     $tobool135$i = ($and134$i|0)==(0);
     if ($cmp131$i) {
      if ($tobool135$i) {
       $s$0$us$us$i = $buf$i;$y$addr$2$us$us$i = $y$addr$1$i;
       while(1) {
        $conv116$us$us$i = (~~(($y$addr$2$us$us$i)));
        $arrayidx117$us$us$i = (15184 + ($conv116$us$us$i)|0);
        $193 = HEAP8[$arrayidx117$us$us$i>>0]|0;
        $conv118363$us$us$i = $193&255;
        $or120$us$us$i = $conv118363$us$us$i | $and62$i;
        $conv121$us$us$i = $or120$us$us$i&255;
        $incdec$ptr122$us$us$i = (($s$0$us$us$i) + 1|0);
        HEAP8[$s$0$us$us$i>>0] = $conv121$us$us$i;
        $conv123$us$us$i = (+($conv116$us$us$i|0));
        $sub124$us$us$i = $y$addr$2$us$us$i - $conv123$us$us$i;
        $mul125$us$us$i = $sub124$us$us$i * 16.0;
        $sub$ptr$lhs$cast$us$us$i = $incdec$ptr122$us$us$i;
        $sub$ptr$sub$us$us$i = (($sub$ptr$lhs$cast$us$us$i) - ($sub$ptr$rhs$cast$i))|0;
        $cmp127$us$us$i = ($sub$ptr$sub$us$us$i|0)==(1);
        if ($cmp127$us$us$i) {
         $incdec$ptr137$us$us$i = (($s$0$us$us$i) + 2|0);
         HEAP8[$incdec$ptr122$us$us$i>>0] = 46;
         $s$1$us$us$i = $incdec$ptr137$us$us$i;
        } else {
         $s$1$us$us$i = $incdec$ptr122$us$us$i;
        }
        $tobool139$us$us$i = $mul125$us$us$i != 0.0;
        if ($tobool139$us$us$i) {
         $s$0$us$us$i = $s$1$us$us$i;$y$addr$2$us$us$i = $mul125$us$us$i;
        } else {
         $s$1$lcssa$i = $s$1$us$us$i;
         break;
        }
       }
      } else {
       $s$0$us$i = $buf$i;$y$addr$2$us$i = $y$addr$1$i;
       while(1) {
        $conv116$us$i = (~~(($y$addr$2$us$i)));
        $arrayidx117$us$i = (15184 + ($conv116$us$i)|0);
        $194 = HEAP8[$arrayidx117$us$i>>0]|0;
        $conv118363$us$i = $194&255;
        $or120$us$i = $conv118363$us$i | $and62$i;
        $conv121$us$i = $or120$us$i&255;
        $incdec$ptr122$us$i = (($s$0$us$i) + 1|0);
        HEAP8[$s$0$us$i>>0] = $conv121$us$i;
        $conv123$us$i = (+($conv116$us$i|0));
        $sub124$us$i = $y$addr$2$us$i - $conv123$us$i;
        $mul125$us$i = $sub124$us$i * 16.0;
        $sub$ptr$lhs$cast$us$i = $incdec$ptr122$us$i;
        $sub$ptr$sub$us$i = (($sub$ptr$lhs$cast$us$i) - ($sub$ptr$rhs$cast$i))|0;
        $cmp127$us$i = ($sub$ptr$sub$us$i|0)==(1);
        if ($cmp127$us$i) {
         $incdec$ptr137$us$i = (($s$0$us$i) + 2|0);
         HEAP8[$incdec$ptr122$us$i>>0] = 46;
         $s$1$us$i = $incdec$ptr137$us$i;
        } else {
         $s$1$us$i = $incdec$ptr122$us$i;
        }
        $tobool139$us$i = $mul125$us$i != 0.0;
        if ($tobool139$us$i) {
         $s$0$us$i = $s$1$us$i;$y$addr$2$us$i = $mul125$us$i;
        } else {
         $s$1$lcssa$i = $s$1$us$i;
         break;
        }
       }
      }
     } else {
      if ($tobool135$i) {
       $s$0$us644$i = $buf$i;$y$addr$2$us645$i = $y$addr$1$i;
       while(1) {
        $conv116$us646$i = (~~(($y$addr$2$us645$i)));
        $arrayidx117$us647$i = (15184 + ($conv116$us646$i)|0);
        $195 = HEAP8[$arrayidx117$us647$i>>0]|0;
        $conv118363$us648$i = $195&255;
        $or120$us649$i = $conv118363$us648$i | $and62$i;
        $conv121$us650$i = $or120$us649$i&255;
        $incdec$ptr122$us651$i = (($s$0$us644$i) + 1|0);
        HEAP8[$s$0$us644$i>>0] = $conv121$us650$i;
        $conv123$us652$i = (+($conv116$us646$i|0));
        $sub124$us653$i = $y$addr$2$us645$i - $conv123$us652$i;
        $mul125$us654$i = $sub124$us653$i * 16.0;
        $sub$ptr$lhs$cast$us655$i = $incdec$ptr122$us651$i;
        $sub$ptr$sub$us656$i = (($sub$ptr$lhs$cast$us655$i) - ($sub$ptr$rhs$cast$i))|0;
        $cmp127$us657$i = ($sub$ptr$sub$us656$i|0)==(1);
        $tobool129$us$i = $mul125$us654$i != 0.0;
        $or$cond$i346 = $cmp127$us657$i & $tobool129$us$i;
        if ($or$cond$i346) {
         $incdec$ptr137$us661$i = (($s$0$us644$i) + 2|0);
         HEAP8[$incdec$ptr122$us651$i>>0] = 46;
         $s$1$us663$i = $incdec$ptr137$us661$i;
        } else {
         $s$1$us663$i = $incdec$ptr122$us651$i;
        }
        if ($tobool129$us$i) {
         $s$0$us644$i = $s$1$us663$i;$y$addr$2$us645$i = $mul125$us654$i;
        } else {
         $s$1$lcssa$i = $s$1$us663$i;
         break;
        }
       }
      } else {
       $s$0$i = $buf$i;$y$addr$2$i = $y$addr$1$i;
       while(1) {
        $conv116$i = (~~(($y$addr$2$i)));
        $arrayidx117$i = (15184 + ($conv116$i)|0);
        $196 = HEAP8[$arrayidx117$i>>0]|0;
        $conv118363$i = $196&255;
        $or120$i = $conv118363$i | $and62$i;
        $conv121$i = $or120$i&255;
        $incdec$ptr122$i = (($s$0$i) + 1|0);
        HEAP8[$s$0$i>>0] = $conv121$i;
        $conv123$i = (+($conv116$i|0));
        $sub124$i = $y$addr$2$i - $conv123$i;
        $mul125$i = $sub124$i * 16.0;
        $sub$ptr$lhs$cast$i = $incdec$ptr122$i;
        $sub$ptr$sub$i = (($sub$ptr$lhs$cast$i) - ($sub$ptr$rhs$cast$i))|0;
        $cmp127$i = ($sub$ptr$sub$i|0)==(1);
        if ($cmp127$i) {
         $incdec$ptr137$i = (($s$0$i) + 2|0);
         HEAP8[$incdec$ptr122$i>>0] = 46;
         $s$1$i = $incdec$ptr137$i;
        } else {
         $s$1$i = $incdec$ptr122$i;
        }
        $tobool139$i = $mul125$i != 0.0;
        if ($tobool139$i) {
         $s$0$i = $s$1$i;$y$addr$2$i = $mul125$i;
        } else {
         $s$1$lcssa$i = $s$1$i;
         break;
        }
       }
      }
     }
     $tobool140$i = ($p$0|0)==(0);
     $sub$ptr$lhs$cast157$pre$i = $s$1$lcssa$i;
     do {
      if ($tobool140$i) {
       label = 173;
      } else {
       $sub146$i = (($sub$ptr$sub145$i) + ($sub$ptr$lhs$cast157$pre$i))|0;
       $cmp147$i = ($sub146$i|0)<($p$0|0);
       if (!($cmp147$i)) {
        label = 173;
        break;
       }
       $sub$ptr$rhs$cast152$i = $incdec$ptr115$i;
       $add150$i = (($sub$ptr$sub153$i) + ($p$0))|0;
       $add154$i = (($add150$i) - ($sub$ptr$rhs$cast152$i))|0;
       $l$0$i = $add154$i;
      }
     } while(0);
     if ((label|0) == 173) {
      label = 0;
      $sub$ptr$rhs$cast161$i = $incdec$ptr115$i;
      $sub$ptr$sub159$i = (($sub$ptr$sub162$i) - ($sub$ptr$rhs$cast161$i))|0;
      $add163$i = (($sub$ptr$sub159$i) + ($sub$ptr$lhs$cast157$pre$i))|0;
      $l$0$i = $add163$i;
     }
     $add165$i = (($l$0$i) + ($add67362$i))|0;
     $and$i415$i = $fl$1$and219 & 73728;
     $tobool$i416$i = ($and$i415$i|0)==(0);
     $cmp$i417$i = ($add165$i|0)<($w$1|0);
     $or$cond$i418$i = $tobool$i416$i & $cmp$i417$i;
     if ($or$cond$i418$i) {
      $sub$i419$i = (($w$1) - ($add165$i))|0;
      $cmp1$i420$i = ($sub$i419$i>>>0)>(256);
      $cond$i421$i = $cmp1$i420$i ? 256 : $sub$i419$i;
      _memset(($pad$i|0),32,($cond$i421$i|0))|0;
      $cmp39$i422$i = ($sub$i419$i>>>0)>(255);
      if ($cmp39$i422$i) {
       $l$addr$010$i424$i = $sub$i419$i;
       while(1) {
        (___fwritex($pad$i,256,$f)|0);
        $sub5$i426$i = (($l$addr$010$i424$i) + -256)|0;
        $cmp3$i427$i = ($sub5$i426$i>>>0)>(255);
        if ($cmp3$i427$i) {
         $l$addr$010$i424$i = $sub5$i426$i;
        } else {
         $l$addr$0$lcssa$i429$i = $sub5$i426$i;
         break;
        }
       }
      } else {
       $l$addr$0$lcssa$i429$i = $sub$i419$i;
      }
      (___fwritex($pad$i,$l$addr$0$lcssa$i429$i,$f)|0);
     }
     (___fwritex($prefix$0$add$ptr65$i,$add67362$i,$f)|0);
     $tobool$i436$i = ($and$i415$i|0)==(65536);
     $or$cond$i438$i = $tobool$i436$i & $cmp$i417$i;
     if ($or$cond$i438$i) {
      $sub$i439$i = (($w$1) - ($add165$i))|0;
      $cmp1$i440$i = ($sub$i439$i>>>0)>(256);
      $cond$i441$i = $cmp1$i440$i ? 256 : $sub$i439$i;
      _memset(($pad$i|0),48,($cond$i441$i|0))|0;
      $cmp39$i442$i = ($sub$i439$i>>>0)>(255);
      if ($cmp39$i442$i) {
       $l$addr$010$i444$i = $sub$i439$i;
       while(1) {
        (___fwritex($pad$i,256,$f)|0);
        $sub5$i446$i = (($l$addr$010$i444$i) + -256)|0;
        $cmp3$i447$i = ($sub5$i446$i>>>0)>(255);
        if ($cmp3$i447$i) {
         $l$addr$010$i444$i = $sub5$i446$i;
        } else {
         $l$addr$0$lcssa$i449$i = $sub5$i446$i;
         break;
        }
       }
      } else {
       $l$addr$0$lcssa$i449$i = $sub$i439$i;
      }
      (___fwritex($pad$i,$l$addr$0$lcssa$i449$i,$f)|0);
     }
     $sub$ptr$sub172$i = (($sub$ptr$lhs$cast157$pre$i) - ($sub$ptr$rhs$cast$i))|0;
     (___fwritex($buf$i,$sub$ptr$sub172$i,$f)|0);
     $sub$ptr$rhs$cast174$i = $incdec$ptr115$i;
     $sub$ptr$sub175$i = (($sub$ptr$lhs$cast160$i) - ($sub$ptr$rhs$cast174$i))|0;
     $sub176$i = (($l$0$i) - ($sub$ptr$sub175$i))|0;
     $sub181$i = (($sub176$i) - ($sub$ptr$sub172$i))|0;
     $cmp$i455$i = ($sub181$i|0)>(0);
     if ($cmp$i455$i) {
      $cmp1$i456$i = ($sub181$i>>>0)>(256);
      $cond$i457$i = $cmp1$i456$i ? 256 : $sub181$i;
      _memset(($pad$i|0),48,($cond$i457$i|0))|0;
      $cmp39$i458$i = ($sub181$i>>>0)>(255);
      if ($cmp39$i458$i) {
       $l$addr$010$i460$i = $sub181$i;
       while(1) {
        (___fwritex($pad$i,256,$f)|0);
        $sub5$i462$i = (($l$addr$010$i460$i) + -256)|0;
        $cmp3$i463$i = ($sub5$i462$i>>>0)>(255);
        if ($cmp3$i463$i) {
         $l$addr$010$i460$i = $sub5$i462$i;
        } else {
         $l$addr$0$lcssa$i465$i = $sub5$i462$i;
         break;
        }
       }
      } else {
       $l$addr$0$lcssa$i465$i = $sub181$i;
      }
      (___fwritex($pad$i,$l$addr$0$lcssa$i465$i,$f)|0);
     }
     (___fwritex($incdec$ptr115$i,$sub$ptr$sub175$i,$f)|0);
     $tobool$i472$i = ($and$i415$i|0)==(8192);
     $or$cond$i474$i = $tobool$i472$i & $cmp$i417$i;
     if ($or$cond$i474$i) {
      $sub$i475$i = (($w$1) - ($add165$i))|0;
      $cmp1$i476$i = ($sub$i475$i>>>0)>(256);
      $cond$i477$i = $cmp1$i476$i ? 256 : $sub$i475$i;
      _memset(($pad$i|0),32,($cond$i477$i|0))|0;
      $cmp39$i478$i = ($sub$i475$i>>>0)>(255);
      if ($cmp39$i478$i) {
       $l$addr$010$i480$i = $sub$i475$i;
       while(1) {
        (___fwritex($pad$i,256,$f)|0);
        $sub5$i482$i = (($l$addr$010$i480$i) + -256)|0;
        $cmp3$i483$i = ($sub5$i482$i>>>0)>(255);
        if ($cmp3$i483$i) {
         $l$addr$010$i480$i = $sub5$i482$i;
        } else {
         $l$addr$0$lcssa$i485$i = $sub5$i482$i;
         break;
        }
       }
      } else {
       $l$addr$0$lcssa$i485$i = $sub$i475$i;
      }
      (___fwritex($pad$i,$l$addr$0$lcssa$i485$i,$f)|0);
     }
     $w$add165$i = $cmp$i417$i ? $w$1 : $add165$i;
     $309 = $82;$arg$sroa$0$sroa$1$4$extract$trunc531552 = $arg$sroa$0$sroa$1$4$extract$trunc531556568;$cnt$0 = $cnt$1;$incdec$ptr$i190563 = $incdec$ptr169;$l$0 = $w$add165$i;$l10n$0 = $l10n$3;
     continue L1;
    }
    $cmp196$i = ($p$0|0)<(0);
    $$p$i = $cmp196$i ? 6 : $p$0;
    if ($tobool56$i) {
     $mul202$i = $mul$i343 * 268435456.0;
     $197 = HEAP32[$e2$i>>2]|0;
     $sub203$i = (($197) + -28)|0;
     HEAP32[$e2$i>>2] = $sub203$i;
     $198 = $sub203$i;$y$addr$3$i = $mul202$i;
    } else {
     $$pre$i = HEAP32[$e2$i>>2]|0;
     $198 = $$pre$i;$y$addr$3$i = $mul$i343;
    }
    $cmp205$i = ($198|0)<(0);
    $arraydecay208$add$ptr213$i = $cmp205$i ? $big$i : $add$ptr213$i;
    $y$addr$4$i = $y$addr$3$i;$z$0$i = $arraydecay208$add$ptr213$i;
    while(1) {
     $conv216$i = (~~(($y$addr$4$i))>>>0);
     HEAP32[$z$0$i>>2] = $conv216$i;
     $incdec$ptr217$i = (($z$0$i) + 4|0);
     $conv218$i = (+($conv216$i>>>0));
     $sub219$i = $y$addr$4$i - $conv218$i;
     $mul220$i = $sub219$i * 1.0E+9;
     $tobool222$i = $mul220$i != 0.0;
     if ($tobool222$i) {
      $y$addr$4$i = $mul220$i;$z$0$i = $incdec$ptr217$i;
     } else {
      break;
     }
    }
    $$pr$i = HEAP32[$e2$i>>2]|0;
    $cmp225733$i = ($$pr$i|0)>(0);
    if ($cmp225733$i) {
     $199 = $$pr$i;$a$1735$i = $arraydecay208$add$ptr213$i;$z$1734$i = $incdec$ptr217$i;
     while(1) {
      $cmp228$i = ($199|0)>(29);
      $cond233$i = $cmp228$i ? 29 : $199;
      $d$0728$i = (($z$1734$i) + -4|0);
      $cmp235729$i = ($d$0728$i>>>0)<($a$1735$i>>>0);
      do {
       if ($cmp235729$i) {
        $a$2$ph$i = $a$1735$i;
       } else {
        $carry$0730$i = 0;$d$0731$i = $d$0728$i;
        while(1) {
         $200 = HEAP32[$d$0731$i>>2]|0;
         $201 = (_bitshift64Shl(($200|0),0,($cond233$i|0))|0);
         $202 = tempRet0;
         $203 = (_i64Add(($201|0),($202|0),($carry$0730$i|0),0)|0);
         $204 = tempRet0;
         $205 = (___uremdi3(($203|0),($204|0),1000000000,0)|0);
         $206 = tempRet0;
         HEAP32[$d$0731$i>>2] = $205;
         $207 = (___udivdi3(($203|0),($204|0),1000000000,0)|0);
         $208 = tempRet0;
         $d$0$i = (($d$0731$i) + -4|0);
         $cmp235$i = ($d$0$i>>>0)<($a$1735$i>>>0);
         if ($cmp235$i) {
          break;
         } else {
          $carry$0730$i = $207;$d$0731$i = $d$0$i;
         }
        }
        $tobool244$i = ($207|0)==(0);
        if ($tobool244$i) {
         $a$2$ph$i = $a$1735$i;
         break;
        }
        $incdec$ptr246$i = (($a$1735$i) + -4|0);
        HEAP32[$incdec$ptr246$i>>2] = $207;
        $a$2$ph$i = $incdec$ptr246$i;
       }
      } while(0);
      $z$2$i = $z$1734$i;
      while(1) {
       $cmp249$i = ($z$2$i>>>0)>($a$2$ph$i>>>0);
       if (!($cmp249$i)) {
        break;
       }
       $arrayidx251$i = (($z$2$i) + -4|0);
       $209 = HEAP32[$arrayidx251$i>>2]|0;
       $lnot$i = ($209|0)==(0);
       if ($lnot$i) {
        $z$2$i = $arrayidx251$i;
       } else {
        break;
       }
      }
      $210 = HEAP32[$e2$i>>2]|0;
      $sub256$i = (($210) - ($cond233$i))|0;
      HEAP32[$e2$i>>2] = $sub256$i;
      $cmp225$i = ($sub256$i|0)>(0);
      if ($cmp225$i) {
       $199 = $sub256$i;$a$1735$i = $a$2$ph$i;$z$1734$i = $z$2$i;
      } else {
       $$pr637$i = $sub256$i;$a$1$lcssa$i = $a$2$ph$i;$z$1$lcssa$i = $z$2$i;
       break;
      }
     }
    } else {
     $$pr637$i = $$pr$i;$a$1$lcssa$i = $arraydecay208$add$ptr213$i;$z$1$lcssa$i = $incdec$ptr217$i;
    }
    $cmp259723$i = ($$pr637$i|0)<(0);
    L254: do {
     if ($cmp259723$i) {
      $add273$i = (($$p$i) + 25)|0;
      $div274$i = (($add273$i|0) / 9)&-1;
      $add275$i = (($div274$i) + 1)|0;
      $cmp299$i = ($or$i344|0)==(102);
      if ($cmp299$i) {
       $sub$ptr$rhs$cast306$us$i = $arraydecay208$add$ptr213$i;
       $add$ptr311$us$i = (($arraydecay208$add$ptr213$i) + ($add275$i<<2)|0);
       $211 = $$pr637$i;$a$3725$us$i = $a$1$lcssa$i;$z$3724$us$i = $z$1$lcssa$i;
       while(1) {
        $sub264$us$i = (0 - ($211))|0;
        $cmp265$us$i = ($sub264$us$i|0)>(9);
        $$sub264$us$i = $cmp265$us$i ? 9 : $sub264$us$i;
        $cmp277719$us$i = ($a$3725$us$i>>>0)<($z$3724$us$i>>>0);
        do {
         if ($cmp277719$us$i) {
          $shl280$us$i = 1 << $$sub264$us$i;
          $sub281$us$i = (($shl280$us$i) + -1)|0;
          $shr285$us$i = 1000000000 >>> $$sub264$us$i;
          $carry262$0721$us$i = 0;$d$1720$us$i = $a$3725$us$i;
          while(1) {
           $215 = HEAP32[$d$1720$us$i>>2]|0;
           $and282$us$i = $215 & $sub281$us$i;
           $shr283$us$i = $215 >>> $$sub264$us$i;
           $add284$us$i = (($shr283$us$i) + ($carry262$0721$us$i))|0;
           HEAP32[$d$1720$us$i>>2] = $add284$us$i;
           $mul286$us$i = Math_imul($and282$us$i, $shr285$us$i)|0;
           $incdec$ptr288$us$i = (($d$1720$us$i) + 4|0);
           $cmp277$us$i = ($incdec$ptr288$us$i>>>0)<($z$3724$us$i>>>0);
           if ($cmp277$us$i) {
            $carry262$0721$us$i = $mul286$us$i;$d$1720$us$i = $incdec$ptr288$us$i;
           } else {
            break;
           }
          }
          $213 = HEAP32[$a$3725$us$i>>2]|0;
          $tobool290$us$i = ($213|0)==(0);
          $incdec$ptr292$us$i = (($a$3725$us$i) + 4|0);
          $incdec$ptr292$a$3$us$i = $tobool290$us$i ? $incdec$ptr292$us$i : $a$3725$us$i;
          $tobool294$us$i = ($mul286$us$i|0)==(0);
          if ($tobool294$us$i) {
           $incdec$ptr292$a$3$us748$i = $incdec$ptr292$a$3$us$i;$z$4$us$i = $z$3724$us$i;
           break;
          }
          $incdec$ptr296$us$i = (($z$3724$us$i) + 4|0);
          HEAP32[$z$3724$us$i>>2] = $mul286$us$i;
          $incdec$ptr292$a$3$us748$i = $incdec$ptr292$a$3$us$i;$z$4$us$i = $incdec$ptr296$us$i;
         } else {
          $212 = HEAP32[$a$3725$us$i>>2]|0;
          $tobool290$us744$i = ($212|0)==(0);
          $incdec$ptr292$us745$i = (($a$3725$us$i) + 4|0);
          $incdec$ptr292$a$3$us746$i = $tobool290$us744$i ? $incdec$ptr292$us745$i : $a$3725$us$i;
          $incdec$ptr292$a$3$us748$i = $incdec$ptr292$a$3$us746$i;$z$4$us$i = $z$3724$us$i;
         }
        } while(0);
        $sub$ptr$lhs$cast305$us$i = $z$4$us$i;
        $sub$ptr$sub307$us$i = (($sub$ptr$lhs$cast305$us$i) - ($sub$ptr$rhs$cast306$us$i))|0;
        $sub$ptr$div$us$i = $sub$ptr$sub307$us$i >> 2;
        $cmp308$us$i = ($sub$ptr$div$us$i|0)>($add275$i|0);
        $add$ptr311$us$z$4$us$i = $cmp308$us$i ? $add$ptr311$us$i : $z$4$us$i;
        $214 = HEAP32[$e2$i>>2]|0;
        $add313$us$i = (($214) + ($$sub264$us$i))|0;
        HEAP32[$e2$i>>2] = $add313$us$i;
        $cmp259$us$i = ($add313$us$i|0)<(0);
        if ($cmp259$us$i) {
         $211 = $add313$us$i;$a$3725$us$i = $incdec$ptr292$a$3$us748$i;$z$3724$us$i = $add$ptr311$us$z$4$us$i;
        } else {
         $a$3$lcssa$i = $incdec$ptr292$a$3$us748$i;$z$3$lcssa$i = $add$ptr311$us$z$4$us$i;
         break L254;
        }
       }
      } else {
       $216 = $$pr637$i;$a$3725$i = $a$1$lcssa$i;$z$3724$i = $z$1$lcssa$i;
      }
      while(1) {
       $sub264$i = (0 - ($216))|0;
       $cmp265$i = ($sub264$i|0)>(9);
       $$sub264$i = $cmp265$i ? 9 : $sub264$i;
       $cmp277719$i = ($a$3725$i>>>0)<($z$3724$i>>>0);
       do {
        if ($cmp277719$i) {
         $shl280$i = 1 << $$sub264$i;
         $sub281$i = (($shl280$i) + -1)|0;
         $shr285$i = 1000000000 >>> $$sub264$i;
         $carry262$0721$i = 0;$d$1720$i = $a$3725$i;
         while(1) {
          $218 = HEAP32[$d$1720$i>>2]|0;
          $and282$i = $218 & $sub281$i;
          $shr283$i = $218 >>> $$sub264$i;
          $add284$i = (($shr283$i) + ($carry262$0721$i))|0;
          HEAP32[$d$1720$i>>2] = $add284$i;
          $mul286$i = Math_imul($and282$i, $shr285$i)|0;
          $incdec$ptr288$i = (($d$1720$i) + 4|0);
          $cmp277$i = ($incdec$ptr288$i>>>0)<($z$3724$i>>>0);
          if ($cmp277$i) {
           $carry262$0721$i = $mul286$i;$d$1720$i = $incdec$ptr288$i;
          } else {
           break;
          }
         }
         $219 = HEAP32[$a$3725$i>>2]|0;
         $tobool290$i = ($219|0)==(0);
         $incdec$ptr292$i = (($a$3725$i) + 4|0);
         $incdec$ptr292$a$3$i = $tobool290$i ? $incdec$ptr292$i : $a$3725$i;
         $tobool294$i = ($mul286$i|0)==(0);
         if ($tobool294$i) {
          $incdec$ptr292$a$3753$i = $incdec$ptr292$a$3$i;$z$4$i = $z$3724$i;
          break;
         }
         $incdec$ptr296$i = (($z$3724$i) + 4|0);
         HEAP32[$z$3724$i>>2] = $mul286$i;
         $incdec$ptr292$a$3753$i = $incdec$ptr292$a$3$i;$z$4$i = $incdec$ptr296$i;
        } else {
         $217 = HEAP32[$a$3725$i>>2]|0;
         $tobool290749$i = ($217|0)==(0);
         $incdec$ptr292750$i = (($a$3725$i) + 4|0);
         $incdec$ptr292$a$3751$i = $tobool290749$i ? $incdec$ptr292750$i : $a$3725$i;
         $incdec$ptr292$a$3753$i = $incdec$ptr292$a$3751$i;$z$4$i = $z$3724$i;
        }
       } while(0);
       $sub$ptr$lhs$cast305$i = $z$4$i;
       $sub$ptr$rhs$cast306$i = $incdec$ptr292$a$3753$i;
       $sub$ptr$sub307$i = (($sub$ptr$lhs$cast305$i) - ($sub$ptr$rhs$cast306$i))|0;
       $sub$ptr$div$i = $sub$ptr$sub307$i >> 2;
       $cmp308$i = ($sub$ptr$div$i|0)>($add275$i|0);
       if ($cmp308$i) {
        $add$ptr311$i = (($incdec$ptr292$a$3753$i) + ($add275$i<<2)|0);
        $z$5$i = $add$ptr311$i;
       } else {
        $z$5$i = $z$4$i;
       }
       $220 = HEAP32[$e2$i>>2]|0;
       $add313$i = (($220) + ($$sub264$i))|0;
       HEAP32[$e2$i>>2] = $add313$i;
       $cmp259$i = ($add313$i|0)<(0);
       if ($cmp259$i) {
        $216 = $add313$i;$a$3725$i = $incdec$ptr292$a$3753$i;$z$3724$i = $z$5$i;
       } else {
        $a$3$lcssa$i = $incdec$ptr292$a$3753$i;$z$3$lcssa$i = $z$5$i;
        break;
       }
      }
     } else {
      $a$3$lcssa$i = $a$1$lcssa$i;$z$3$lcssa$i = $z$1$lcssa$i;
     }
    } while(0);
    $cmp315$i = ($a$3$lcssa$i>>>0)<($z$3$lcssa$i>>>0);
    $sub$ptr$lhs$cast318$i = $arraydecay208$add$ptr213$i;
    do {
     if ($cmp315$i) {
      $sub$ptr$rhs$cast319$i = $a$3$lcssa$i;
      $sub$ptr$sub320$i = (($sub$ptr$lhs$cast318$i) - ($sub$ptr$rhs$cast319$i))|0;
      $sub$ptr$div321$i = $sub$ptr$sub320$i >> 2;
      $mul322$i = ($sub$ptr$div321$i*9)|0;
      $221 = HEAP32[$a$3$lcssa$i>>2]|0;
      $cmp324715$i = ($221>>>0)<(10);
      if ($cmp324715$i) {
       $e$1$i = $mul322$i;
       break;
      } else {
       $e$0717$i = $mul322$i;$i$0716$i = 10;
      }
      while(1) {
       $mul328$i = ($i$0716$i*10)|0;
       $inc$i = (($e$0717$i) + 1)|0;
       $cmp324$i = ($221>>>0)<($mul328$i>>>0);
       if ($cmp324$i) {
        $e$1$i = $inc$i;
        break;
       } else {
        $e$0717$i = $inc$i;$i$0716$i = $mul328$i;
       }
      }
     } else {
      $e$1$i = 0;
     }
    } while(0);
    $cmp333$i = ($or$i344|0)!=(102);
    $mul335$i = $cmp333$i ? $e$1$i : 0;
    $sub336$i = (($$p$i) - ($mul335$i))|0;
    $cmp338$i = ($or$i344|0)==(103);
    $tobool341$i = ($$p$i|0)!=(0);
    $tobool341$$i = $cmp338$i & $tobool341$i;
    $land$ext$neg$i = $tobool341$$i << 31 >> 31;
    $sub343$i = (($sub336$i) + ($land$ext$neg$i))|0;
    $sub$ptr$lhs$cast344$i = $z$3$lcssa$i;
    $sub$ptr$sub346$i = (($sub$ptr$lhs$cast344$i) - ($sub$ptr$lhs$cast318$i))|0;
    $sub$ptr$div347$i = $sub$ptr$sub346$i >> 2;
    $222 = ($sub$ptr$div347$i*9)|0;
    $mul349$i = (($222) + -9)|0;
    $cmp350$i = ($sub343$i|0)<($mul349$i|0);
    if ($cmp350$i) {
     $add355$i = (($sub343$i) + 9216)|0;
     $div356$i = (($add355$i|0) / 9)&-1;
     $add$ptr354$sum$i = (($div356$i) + -1023)|0;
     $add$ptr358$i = (($arraydecay208$add$ptr213$i) + ($add$ptr354$sum$i<<2)|0);
     $rem360$i = (($add355$i|0) % 9)&-1;
     $j$0710$i = (($rem360$i) + 1)|0;
     $cmp363711$i = ($j$0710$i|0)<(9);
     if ($cmp363711$i) {
      $i$1712$i = 10;$j$0713$i = $j$0710$i;
      while(1) {
       $mul367$i = ($i$1712$i*10)|0;
       $j$0$i = (($j$0713$i) + 1)|0;
       $exitcond$i = ($j$0$i|0)==(9);
       if ($exitcond$i) {
        $i$1$lcssa$i = $mul367$i;
        break;
       } else {
        $i$1712$i = $mul367$i;$j$0713$i = $j$0$i;
       }
      }
     } else {
      $i$1$lcssa$i = 10;
     }
     $223 = HEAP32[$add$ptr358$i>>2]|0;
     $rem370$i = (($223>>>0) % ($i$1$lcssa$i>>>0))&-1;
     $tobool371$i = ($rem370$i|0)==(0);
     if ($tobool371$i) {
      $add$ptr358$sum$i = (($div356$i) + -1022)|0;
      $add$ptr373$i = (($arraydecay208$add$ptr213$i) + ($add$ptr358$sum$i<<2)|0);
      $cmp374$i = ($add$ptr373$i|0)==($z$3$lcssa$i|0);
      if ($cmp374$i) {
       $a$7$i = $a$3$lcssa$i;$d$3$i = $add$ptr358$i;$e$3$i = $e$1$i;
      } else {
       label = 233;
      }
     } else {
      label = 233;
     }
     do {
      if ((label|0) == 233) {
       label = 0;
       $div378$i = (($223>>>0) / ($i$1$lcssa$i>>>0))&-1;
       $and379$i = $div378$i & 1;
       $tobool380$i = ($and379$i|0)==(0);
       $$365$i = $tobool380$i ? 9007199254740992.0 : 9007199254740994.0;
       $div384$i = (($i$1$lcssa$i|0) / 2)&-1;
       $cmp385$i = ($rem370$i>>>0)<($div384$i>>>0);
       do {
        if ($cmp385$i) {
         $small$0$i = 0.5;
        } else {
         $cmp390$i = ($rem370$i|0)==($div384$i|0);
         if ($cmp390$i) {
          $add$ptr358$sum361$i = (($div356$i) + -1022)|0;
          $add$ptr393$i = (($arraydecay208$add$ptr213$i) + ($add$ptr358$sum361$i<<2)|0);
          $cmp394$i = ($add$ptr393$i|0)==($z$3$lcssa$i|0);
          if ($cmp394$i) {
           $small$0$i = 1.0;
           break;
          }
         }
         $small$0$i = 1.5;
        }
       } while(0);
       $tobool400$i = ($pl$0$i|0)==(0);
       do {
        if ($tobool400$i) {
         $round377$1$i = $$365$i;$small$1$i = $small$0$i;
        } else {
         $224 = HEAP8[$prefix$0$i>>0]|0;
         $cmp403$i = ($224<<24>>24)==(45);
         if (!($cmp403$i)) {
          $round377$1$i = $$365$i;$small$1$i = $small$0$i;
          break;
         }
         $mul406$i = $$365$i * -1.0;
         $mul407$i = $small$0$i * -1.0;
         $round377$1$i = $mul406$i;$small$1$i = $mul407$i;
        }
       } while(0);
       $sub409$i = (($223) - ($rem370$i))|0;
       HEAP32[$add$ptr358$i>>2] = $sub409$i;
       $add410$i = $round377$1$i + $small$1$i;
       $cmp411$i = $add410$i != $round377$1$i;
       if (!($cmp411$i)) {
        $a$7$i = $a$3$lcssa$i;$d$3$i = $add$ptr358$i;$e$3$i = $e$1$i;
        break;
       }
       $add414$i = (($sub409$i) + ($i$1$lcssa$i))|0;
       HEAP32[$add$ptr358$i>>2] = $add414$i;
       $cmp416705$i = ($add414$i>>>0)>(999999999);
       if ($cmp416705$i) {
        $a$5707$i = $a$3$lcssa$i;$d$2706$i = $add$ptr358$i;
        while(1) {
         $incdec$ptr419$i = (($d$2706$i) + -4|0);
         HEAP32[$d$2706$i>>2] = 0;
         $cmp420$i = ($incdec$ptr419$i>>>0)<($a$5707$i>>>0);
         if ($cmp420$i) {
          $incdec$ptr423$i = (($a$5707$i) + -4|0);
          HEAP32[$incdec$ptr423$i>>2] = 0;
          $a$6$i = $incdec$ptr423$i;
         } else {
          $a$6$i = $a$5707$i;
         }
         $225 = HEAP32[$incdec$ptr419$i>>2]|0;
         $inc425$i = (($225) + 1)|0;
         HEAP32[$incdec$ptr419$i>>2] = $inc425$i;
         $cmp416$i = ($inc425$i>>>0)>(999999999);
         if ($cmp416$i) {
          $a$5707$i = $a$6$i;$d$2706$i = $incdec$ptr419$i;
         } else {
          $a$5$lcssa$i = $a$6$i;$d$2$lcssa$i = $incdec$ptr419$i;
          break;
         }
        }
       } else {
        $a$5$lcssa$i = $a$3$lcssa$i;$d$2$lcssa$i = $add$ptr358$i;
       }
       $sub$ptr$rhs$cast428$i = $a$5$lcssa$i;
       $sub$ptr$sub429$i = (($sub$ptr$lhs$cast318$i) - ($sub$ptr$rhs$cast428$i))|0;
       $sub$ptr$div430$i = $sub$ptr$sub429$i >> 2;
       $mul431$i = ($sub$ptr$div430$i*9)|0;
       $226 = HEAP32[$a$5$lcssa$i>>2]|0;
       $cmp433701$i = ($226>>>0)<(10);
       if ($cmp433701$i) {
        $a$7$i = $a$5$lcssa$i;$d$3$i = $d$2$lcssa$i;$e$3$i = $mul431$i;
        break;
       } else {
        $e$2703$i = $mul431$i;$i$2702$i = 10;
       }
       while(1) {
        $mul437$i = ($i$2702$i*10)|0;
        $inc438$i = (($e$2703$i) + 1)|0;
        $cmp433$i = ($226>>>0)<($mul437$i>>>0);
        if ($cmp433$i) {
         $a$7$i = $a$5$lcssa$i;$d$3$i = $d$2$lcssa$i;$e$3$i = $inc438$i;
         break;
        } else {
         $e$2703$i = $inc438$i;$i$2702$i = $mul437$i;
        }
       }
      }
     } while(0);
     $add$ptr442$i = (($d$3$i) + 4|0);
     $cmp443$i = ($z$3$lcssa$i>>>0)>($add$ptr442$i>>>0);
     $add$ptr442$z$3$i = $cmp443$i ? $add$ptr442$i : $z$3$lcssa$i;
     $a$8$ph$i = $a$7$i;$e$4$ph$i = $e$3$i;$z$6$ph$i = $add$ptr442$z$3$i;
    } else {
     $a$8$ph$i = $a$3$lcssa$i;$e$4$ph$i = $e$1$i;$z$6$ph$i = $z$3$lcssa$i;
    }
    $sub626$i = (0 - ($e$4$ph$i))|0;
    $z$6$i = $z$6$ph$i;
    while(1) {
     $cmp450$i = ($z$6$i>>>0)>($a$8$ph$i>>>0);
     if (!($cmp450$i)) {
      $cmp450$lcssa$i = 0;
      break;
     }
     $arrayidx453$i = (($z$6$i) + -4|0);
     $227 = HEAP32[$arrayidx453$i>>2]|0;
     $lnot455$i = ($227|0)==(0);
     if ($lnot455$i) {
      $z$6$i = $arrayidx453$i;
     } else {
      $cmp450$lcssa$i = 1;
      break;
     }
    }
    do {
     if ($cmp338$i) {
      $tobool466$i = ($$p$i|0)==(0);
      $inc468$i = $tobool466$i&1;
      $inc468$$p$i = (($inc468$i) + ($$p$i))|0;
      $cmp470$i = ($inc468$$p$i|0)>($e$4$ph$i|0);
      $cmp473$i = ($e$4$ph$i|0)>(-5);
      $or$cond1$i = $cmp470$i & $cmp473$i;
      if ($or$cond1$i) {
       $dec476$i = (($t$0) + -1)|0;
       $add477$neg$i = (($inc468$$p$i) + -1)|0;
       $sub478$i = (($add477$neg$i) - ($e$4$ph$i))|0;
       $p$addr$2$i = $sub478$i;$t$addr$0$i = $dec476$i;
      } else {
       $sub480$i = (($t$0) + -2)|0;
       $dec481$i = (($inc468$$p$i) + -1)|0;
       $p$addr$2$i = $dec481$i;$t$addr$0$i = $sub480$i;
      }
      $and483$i = $fl$1$and219 & 8;
      $tobool484$i = ($and483$i|0)==(0);
      if (!($tobool484$i)) {
       $p$addr$3$i = $p$addr$2$i;$t$addr$1$i = $t$addr$0$i;
       break;
      }
      do {
       if ($cmp450$lcssa$i) {
        $arrayidx489$i = (($z$6$i) + -4|0);
        $228 = HEAP32[$arrayidx489$i>>2]|0;
        $tobool490$i = ($228|0)==(0);
        if ($tobool490$i) {
         $j$2$i = 9;
         break;
        }
        $rem494696$i = (($228>>>0) % 10)&-1;
        $cmp495697$i = ($rem494696$i|0)==(0);
        if ($cmp495697$i) {
         $i$3698$i = 10;$j$1699$i = 0;
        } else {
         $j$2$i = 0;
         break;
        }
        while(1) {
         $mul499$i = ($i$3698$i*10)|0;
         $inc500$i = (($j$1699$i) + 1)|0;
         $rem494$i = (($228>>>0) % ($mul499$i>>>0))&-1;
         $cmp495$i = ($rem494$i|0)==(0);
         if ($cmp495$i) {
          $i$3698$i = $mul499$i;$j$1699$i = $inc500$i;
         } else {
          $j$2$i = $inc500$i;
          break;
         }
        }
       } else {
        $j$2$i = 9;
       }
      } while(0);
      $or504$i = $t$addr$0$i | 32;
      $cmp505$i = ($or504$i|0)==(102);
      $sub$ptr$lhs$cast508$i = $z$6$i;
      $sub$ptr$sub510$i = (($sub$ptr$lhs$cast508$i) - ($sub$ptr$lhs$cast318$i))|0;
      $sub$ptr$div511$i = $sub$ptr$sub510$i >> 2;
      $229 = ($sub$ptr$div511$i*9)|0;
      $mul513$i = (($229) + -9)|0;
      if ($cmp505$i) {
       $sub514$i = (($mul513$i) - ($j$2$i))|0;
       $cmp515$i = ($sub514$i|0)<(0);
       $$sub514$i = $cmp515$i ? 0 : $sub514$i;
       $cmp528$i = ($p$addr$2$i|0)<($$sub514$i|0);
       $p$addr$2$$sub514$i = $cmp528$i ? $p$addr$2$i : $$sub514$i;
       $p$addr$3$i = $p$addr$2$$sub514$i;$t$addr$1$i = $t$addr$0$i;
       break;
      } else {
       $add561$i = (($mul513$i) + ($e$4$ph$i))|0;
       $sub562$i = (($add561$i) - ($j$2$i))|0;
       $cmp563$i = ($sub562$i|0)<(0);
       $$sub562$i = $cmp563$i ? 0 : $sub562$i;
       $cmp577$i = ($p$addr$2$i|0)<($$sub562$i|0);
       $p$addr$2$$sub562$i = $cmp577$i ? $p$addr$2$i : $$sub562$i;
       $p$addr$3$i = $p$addr$2$$sub562$i;$t$addr$1$i = $t$addr$0$i;
       break;
      }
     } else {
      $p$addr$3$i = $$p$i;$t$addr$1$i = $t$0;
     }
    } while(0);
    $tobool609$i = ($p$addr$3$i|0)!=(0);
    if ($tobool609$i) {
     $230 = 1;
    } else {
     $and610$i = $fl$1$and219 & 8;
     $tobool611$i = ($and610$i|0)!=(0);
     $230 = $tobool611$i;
    }
    $lor$ext$i = $230&1;
    $or613$i = $t$addr$1$i | 32;
    $cmp614$i = ($or613$i|0)==(102);
    if ($cmp614$i) {
     $cmp617$i = ($e$4$ph$i|0)>(0);
     $add620$i = $cmp617$i ? $e$4$ph$i : 0;
     $estr$2$i = 0;$sub$ptr$sub650$pn$i = $add620$i;
    } else {
     $cmp623$i = ($e$4$ph$i|0)<(0);
     $cond629$i = $cmp623$i ? $sub626$i : $e$4$ph$i;
     $cmp12$i489$i = ($cond629$i|0)<(0);
     if ($cmp12$i489$i) {
      $231 = ($cond629$i|0)<(0);
      $232 = $231 << 31 >> 31;
      $233 = $cond629$i;$234 = $232;$s$addr$014$i491$i = $arrayidx$i335;
      while(1) {
       $235 = (___uremdi3(($233|0),($234|0),10,0)|0);
       $236 = tempRet0;
       $237 = $235 | 48;
       $238 = $237&255;
       $incdec$ptr$i496$i = (($s$addr$014$i491$i) + -1|0);
       HEAP8[$incdec$ptr$i496$i>>0] = $238;
       $239 = (___udivdi3(($233|0),($234|0),10,0)|0);
       $240 = tempRet0;
       $241 = ($234>>>0)>(9);
       $242 = ($234|0)==(9);
       $243 = ($233>>>0)>(4294967295);
       $244 = $242 & $243;
       $245 = $241 | $244;
       if ($245) {
        $233 = $239;$234 = $240;$s$addr$014$i491$i = $incdec$ptr$i496$i;
       } else {
        break;
       }
      }
      $s$addr$0$lcssa$i502$i = $incdec$ptr$i496$i;$x$addr$0$lcssa$off0$i503$i = $239;
     } else {
      $s$addr$0$lcssa$i502$i = $arrayidx$i335;$x$addr$0$lcssa$off0$i503$i = $cond629$i;
     }
     $tobool9$i504$i = ($x$addr$0$lcssa$off0$i503$i|0)==(0);
     if ($tobool9$i504$i) {
      $estr$1$ph$i = $s$addr$0$lcssa$i502$i;
     } else {
      $s$addr$110$i507$i = $s$addr$0$lcssa$i502$i;$y$011$i506$i = $x$addr$0$lcssa$off0$i503$i;
      while(1) {
       $rem4$i508$i = (($y$011$i506$i>>>0) % 10)&-1;
       $add57$i509$i = $rem4$i508$i | 48;
       $conv6$i510$i = $add57$i509$i&255;
       $incdec$ptr7$i511$i = (($s$addr$110$i507$i) + -1|0);
       HEAP8[$incdec$ptr7$i511$i>>0] = $conv6$i510$i;
       $div9$i512$i = (($y$011$i506$i>>>0) / 10)&-1;
       $246 = ($y$011$i506$i>>>0)<(10);
       if ($246) {
        $estr$1$ph$i = $incdec$ptr7$i511$i;
        break;
       } else {
        $s$addr$110$i507$i = $incdec$ptr7$i511$i;$y$011$i506$i = $div9$i512$i;
       }
      }
     }
     $sub$ptr$rhs$cast634690$i = $estr$1$ph$i;
     $sub$ptr$sub635691$i = (($sub$ptr$lhs$cast160$i) - ($sub$ptr$rhs$cast634690$i))|0;
     $cmp636692$i = ($sub$ptr$sub635691$i|0)<(2);
     if ($cmp636692$i) {
      $estr$1693$i = $estr$1$ph$i;
      while(1) {
       $incdec$ptr639$i = (($estr$1693$i) + -1|0);
       HEAP8[$incdec$ptr639$i>>0] = 48;
       $sub$ptr$rhs$cast634$i = $incdec$ptr639$i;
       $sub$ptr$sub635$i = (($sub$ptr$lhs$cast160$i) - ($sub$ptr$rhs$cast634$i))|0;
       $cmp636$i = ($sub$ptr$sub635$i|0)<(2);
       if ($cmp636$i) {
        $estr$1693$i = $incdec$ptr639$i;
       } else {
        $estr$1$lcssa$i = $incdec$ptr639$i;
        break;
       }
      }
     } else {
      $estr$1$lcssa$i = $estr$1$ph$i;
     }
     $247 = $e$4$ph$i >> 31;
     $248 = $247 & 2;
     $249 = (($248) + 43)|0;
     $conv644$i = $249&255;
     $incdec$ptr645$i = (($estr$1$lcssa$i) + -1|0);
     HEAP8[$incdec$ptr645$i>>0] = $conv644$i;
     $conv646$i = $t$addr$1$i&255;
     $incdec$ptr647$i = (($estr$1$lcssa$i) + -2|0);
     HEAP8[$incdec$ptr647$i>>0] = $conv646$i;
     $sub$ptr$rhs$cast649$i = $incdec$ptr647$i;
     $sub$ptr$sub650$i = (($sub$ptr$lhs$cast160$i) - ($sub$ptr$rhs$cast649$i))|0;
     $estr$2$i = $incdec$ptr647$i;$sub$ptr$sub650$pn$i = $sub$ptr$sub650$i;
    }
    $add608$i = (($pl$0$i) + 1)|0;
    $add612$i = (($add608$i) + ($p$addr$3$i))|0;
    $l$1$i = (($add612$i) + ($lor$ext$i))|0;
    $add653$i = (($l$1$i) + ($sub$ptr$sub650$pn$i))|0;
    $and$i517$i = $fl$1$and219 & 73728;
    $tobool$i518$i = ($and$i517$i|0)==(0);
    $cmp$i519$i = ($add653$i|0)<($w$1|0);
    $or$cond$i520$i = $tobool$i518$i & $cmp$i519$i;
    if ($or$cond$i520$i) {
     $sub$i521$i = (($w$1) - ($add653$i))|0;
     $cmp1$i522$i = ($sub$i521$i>>>0)>(256);
     $cond$i523$i = $cmp1$i522$i ? 256 : $sub$i521$i;
     _memset(($pad$i|0),32,($cond$i523$i|0))|0;
     $cmp39$i524$i = ($sub$i521$i>>>0)>(255);
     if ($cmp39$i524$i) {
      $l$addr$010$i526$i = $sub$i521$i;
      while(1) {
       (___fwritex($pad$i,256,$f)|0);
       $sub5$i528$i = (($l$addr$010$i526$i) + -256)|0;
       $cmp3$i529$i = ($sub5$i528$i>>>0)>(255);
       if ($cmp3$i529$i) {
        $l$addr$010$i526$i = $sub5$i528$i;
       } else {
        $l$addr$0$lcssa$i531$i = $sub5$i528$i;
        break;
       }
      }
     } else {
      $l$addr$0$lcssa$i531$i = $sub$i521$i;
     }
     (___fwritex($pad$i,$l$addr$0$lcssa$i531$i,$f)|0);
    }
    (___fwritex($prefix$0$i,$pl$0$i,$f)|0);
    $tobool$i538$i = ($and$i517$i|0)==(65536);
    $or$cond$i540$i = $tobool$i538$i & $cmp$i519$i;
    if ($or$cond$i540$i) {
     $sub$i541$i = (($w$1) - ($add653$i))|0;
     $cmp1$i542$i = ($sub$i541$i>>>0)>(256);
     $cond$i543$i = $cmp1$i542$i ? 256 : $sub$i541$i;
     _memset(($pad$i|0),48,($cond$i543$i|0))|0;
     $cmp39$i544$i = ($sub$i541$i>>>0)>(255);
     if ($cmp39$i544$i) {
      $l$addr$010$i546$i = $sub$i541$i;
      while(1) {
       (___fwritex($pad$i,256,$f)|0);
       $sub5$i548$i = (($l$addr$010$i546$i) + -256)|0;
       $cmp3$i549$i = ($sub5$i548$i>>>0)>(255);
       if ($cmp3$i549$i) {
        $l$addr$010$i546$i = $sub5$i548$i;
       } else {
        $l$addr$0$lcssa$i551$i = $sub5$i548$i;
        break;
       }
      }
     } else {
      $l$addr$0$lcssa$i551$i = $sub$i541$i;
     }
     (___fwritex($pad$i,$l$addr$0$lcssa$i551$i,$f)|0);
    }
    do {
     if ($cmp614$i) {
      $cmp660$i = ($a$8$ph$i>>>0)>($arraydecay208$add$ptr213$i>>>0);
      $r$0$a$8$i = $cmp660$i ? $arraydecay208$add$ptr213$i : $a$8$ph$i;
      $d$4680$i = $r$0$a$8$i;
      while(1) {
       $250 = HEAP32[$d$4680$i>>2]|0;
       $tobool9$i558$i = ($250|0)==(0);
       if ($tobool9$i558$i) {
        $s$addr$1$lcssa$i568$i = $add$ptr671$i;
       } else {
        $s$addr$110$i561$i = $add$ptr671$i;$y$011$i560$i = $250;
        while(1) {
         $rem4$i562$i = (($y$011$i560$i>>>0) % 10)&-1;
         $add57$i563$i = $rem4$i562$i | 48;
         $conv6$i564$i = $add57$i563$i&255;
         $incdec$ptr7$i565$i = (($s$addr$110$i561$i) + -1|0);
         HEAP8[$incdec$ptr7$i565$i>>0] = $conv6$i564$i;
         $div9$i566$i = (($y$011$i560$i>>>0) / 10)&-1;
         $251 = ($y$011$i560$i>>>0)<(10);
         if ($251) {
          $s$addr$1$lcssa$i568$i = $incdec$ptr7$i565$i;
          break;
         } else {
          $s$addr$110$i561$i = $incdec$ptr7$i565$i;$y$011$i560$i = $div9$i566$i;
         }
        }
       }
       $cmp673$i = ($d$4680$i|0)==($r$0$a$8$i|0);
       do {
        if ($cmp673$i) {
         $cmp686$i = ($s$addr$1$lcssa$i568$i|0)==($add$ptr671$i|0);
         if (!($cmp686$i)) {
          $s668$1$i = $s$addr$1$lcssa$i568$i;
          break;
         }
         HEAP8[$incdec$ptr689$i>>0] = 48;
         $s668$1$i = $incdec$ptr689$i;
        } else {
         $cmp678677$i = ($s$addr$1$lcssa$i568$i>>>0)>($buf$i>>>0);
         if ($cmp678677$i) {
          $s668$0678$i = $s$addr$1$lcssa$i568$i;
         } else {
          $s668$1$i = $s$addr$1$lcssa$i568$i;
          break;
         }
         while(1) {
          $incdec$ptr681$i = (($s668$0678$i) + -1|0);
          HEAP8[$incdec$ptr681$i>>0] = 48;
          $cmp678$i = ($incdec$ptr681$i>>>0)>($buf$i>>>0);
          if ($cmp678$i) {
           $s668$0678$i = $incdec$ptr681$i;
          } else {
           $s668$1$i = $incdec$ptr681$i;
           break;
          }
         }
        }
       } while(0);
       $sub$ptr$rhs$cast695$i = $s668$1$i;
       $sub$ptr$sub696$i = (($sub$ptr$lhs$cast694$i) - ($sub$ptr$rhs$cast695$i))|0;
       (___fwritex($s668$1$i,$sub$ptr$sub696$i,$f)|0);
       $incdec$ptr698$i = (($d$4680$i) + 4|0);
       $cmp665$i = ($incdec$ptr698$i>>>0)>($arraydecay208$add$ptr213$i>>>0);
       if ($cmp665$i) {
        break;
       } else {
        $d$4680$i = $incdec$ptr698$i;
       }
      }
      if (!($tobool609$i)) {
       $and702$i = $fl$1$and219 & 8;
       $tobool703$i = ($and702$i|0)==(0);
       if ($tobool703$i) {
        break;
       }
      }
      (___fwritex(15200,1,$f)|0);
      $cmp707671$i = ($incdec$ptr698$i>>>0)<($z$6$i>>>0);
      $cmp710672$i = ($p$addr$3$i|0)>(0);
      $or$cond368673$i = $cmp707671$i & $cmp710672$i;
      if ($or$cond368673$i) {
       $d$5674$i = $incdec$ptr698$i;$p$addr$4675$i = $p$addr$3$i;
       while(1) {
        $252 = HEAP32[$d$5674$i>>2]|0;
        $tobool9$i575$i = ($252|0)==(0);
        if ($tobool9$i575$i) {
         $s715$0669$i = $add$ptr671$i;
         label = 300;
        } else {
         $s$addr$110$i578$i = $add$ptr671$i;$y$011$i577$i = $252;
         while(1) {
          $rem4$i579$i = (($y$011$i577$i>>>0) % 10)&-1;
          $add57$i580$i = $rem4$i579$i | 48;
          $conv6$i581$i = $add57$i580$i&255;
          $incdec$ptr7$i582$i = (($s$addr$110$i578$i) + -1|0);
          HEAP8[$incdec$ptr7$i582$i>>0] = $conv6$i581$i;
          $div9$i583$i = (($y$011$i577$i>>>0) / 10)&-1;
          $253 = ($y$011$i577$i>>>0)<(10);
          if ($253) {
           break;
          } else {
           $s$addr$110$i578$i = $incdec$ptr7$i582$i;$y$011$i577$i = $div9$i583$i;
          }
         }
         $cmp722668$i = ($incdec$ptr7$i582$i>>>0)>($buf$i>>>0);
         if ($cmp722668$i) {
          $s715$0669$i = $incdec$ptr7$i582$i;
          label = 300;
         } else {
          $s715$0$lcssa$i = $incdec$ptr7$i582$i;
         }
        }
        if ((label|0) == 300) {
         while(1) {
          label = 0;
          $incdec$ptr725$i = (($s715$0669$i) + -1|0);
          HEAP8[$incdec$ptr725$i>>0] = 48;
          $cmp722$i = ($incdec$ptr725$i>>>0)>($buf$i>>>0);
          if ($cmp722$i) {
           $s715$0669$i = $incdec$ptr725$i;
           label = 300;
          } else {
           $s715$0$lcssa$i = $incdec$ptr725$i;
           break;
          }
         }
        }
        $cmp727$i = ($p$addr$4675$i|0)>(9);
        $cond732$i = $cmp727$i ? 9 : $p$addr$4675$i;
        (___fwritex($s715$0$lcssa$i,$cond732$i,$f)|0);
        $incdec$ptr734$i = (($d$5674$i) + 4|0);
        $sub735$i = (($p$addr$4675$i) + -9)|0;
        $cmp707$i = ($incdec$ptr734$i>>>0)<($z$6$i>>>0);
        $cmp710$i = ($sub735$i|0)>(0);
        $or$cond368$i = $cmp707$i & $cmp710$i;
        if ($or$cond368$i) {
         $d$5674$i = $incdec$ptr734$i;$p$addr$4675$i = $sub735$i;
        } else {
         $p$addr$4$lcssa$i = $sub735$i;
         break;
        }
       }
      } else {
       $p$addr$4$lcssa$i = $p$addr$3$i;
      }
      $cmp$i589$i = ($p$addr$4$lcssa$i|0)>(0);
      if (!($cmp$i589$i)) {
       break;
      }
      $cmp1$i590$i = ($p$addr$4$lcssa$i>>>0)>(256);
      $cond$i591$i = $cmp1$i590$i ? 256 : $p$addr$4$lcssa$i;
      _memset(($pad$i|0),48,($cond$i591$i|0))|0;
      $cmp39$i592$i = ($p$addr$4$lcssa$i>>>0)>(255);
      if ($cmp39$i592$i) {
       $l$addr$010$i594$i = $p$addr$4$lcssa$i;
       while(1) {
        (___fwritex($pad$i,256,$f)|0);
        $sub5$i596$i = (($l$addr$010$i594$i) + -256)|0;
        $cmp3$i597$i = ($sub5$i596$i>>>0)>(255);
        if ($cmp3$i597$i) {
         $l$addr$010$i594$i = $sub5$i596$i;
        } else {
         $l$addr$0$lcssa$i599$i = $sub5$i596$i;
         break;
        }
       }
      } else {
       $l$addr$0$lcssa$i599$i = $p$addr$4$lcssa$i;
      }
      (___fwritex($pad$i,$l$addr$0$lcssa$i599$i,$f)|0);
     } else {
      $add$ptr742$i = (($a$8$ph$i) + 4|0);
      $z$6$add$ptr742$i = $cmp450$lcssa$i ? $z$6$i : $add$ptr742$i;
      $cmp748685$i = ($p$addr$3$i|0)>(-1);
      do {
       if ($cmp748685$i) {
        $and780$i = $fl$1$and219 & 8;
        $tobool781$not$i = ($and780$i|0)!=(0);
        $d$6687$i = $a$8$ph$i;$p$addr$5688$i = $p$addr$3$i;
        while(1) {
         $254 = HEAP32[$d$6687$i>>2]|0;
         $tobool9$i606$i = ($254|0)==(0);
         if ($tobool9$i606$i) {
          label = 311;
         } else {
          $s$addr$110$i609$i = $add$ptr671$i;$y$011$i608$i = $254;
          while(1) {
           $rem4$i610$i = (($y$011$i608$i>>>0) % 10)&-1;
           $add57$i611$i = $rem4$i610$i | 48;
           $conv6$i612$i = $add57$i611$i&255;
           $incdec$ptr7$i613$i = (($s$addr$110$i609$i) + -1|0);
           HEAP8[$incdec$ptr7$i613$i>>0] = $conv6$i612$i;
           $div9$i614$i = (($y$011$i608$i>>>0) / 10)&-1;
           $255 = ($y$011$i608$i>>>0)<(10);
           if ($255) {
            break;
           } else {
            $s$addr$110$i609$i = $incdec$ptr7$i613$i;$y$011$i608$i = $div9$i614$i;
           }
          }
          $cmp760$i = ($incdec$ptr7$i613$i|0)==($add$ptr671$i|0);
          if ($cmp760$i) {
           label = 311;
          } else {
           $s753$0$i = $incdec$ptr7$i613$i;
          }
         }
         if ((label|0) == 311) {
          label = 0;
          HEAP8[$incdec$ptr689$i>>0] = 48;
          $s753$0$i = $incdec$ptr689$i;
         }
         $cmp765$i = ($d$6687$i|0)==($a$8$ph$i|0);
         do {
          if ($cmp765$i) {
           $incdec$ptr776$i = (($s753$0$i) + 1|0);
           (___fwritex($s753$0$i,1,$f)|0);
           $cmp777$i = ($p$addr$5688$i|0)>(0);
           $brmerge$i = $cmp777$i | $tobool781$not$i;
           if (!($brmerge$i)) {
            $s753$2$i = $incdec$ptr776$i;
            break;
           }
           (___fwritex(15200,1,$f)|0);
           $s753$2$i = $incdec$ptr776$i;
          } else {
           $cmp770681$i = ($s753$0$i>>>0)>($buf$i>>>0);
           if ($cmp770681$i) {
            $s753$1682$i = $s753$0$i;
           } else {
            $s753$2$i = $s753$0$i;
            break;
           }
           while(1) {
            $incdec$ptr773$i = (($s753$1682$i) + -1|0);
            HEAP8[$incdec$ptr773$i>>0] = 48;
            $cmp770$i = ($incdec$ptr773$i>>>0)>($buf$i>>>0);
            if ($cmp770$i) {
             $s753$1682$i = $incdec$ptr773$i;
            } else {
             $s753$2$i = $incdec$ptr773$i;
             break;
            }
           }
          }
         } while(0);
         $sub$ptr$rhs$cast788$i = $s753$2$i;
         $sub$ptr$sub789$i = (($sub$ptr$lhs$cast694$i) - ($sub$ptr$rhs$cast788$i))|0;
         $cmp790$i = ($sub$ptr$sub789$i|0)<($p$addr$5688$i|0);
         $sub$ptr$sub789$p$addr$5$i = $cmp790$i ? $sub$ptr$sub789$i : $p$addr$5688$i;
         (___fwritex($s753$2$i,$sub$ptr$sub789$p$addr$5$i,$f)|0);
         $sub806$i = (($p$addr$5688$i) - ($sub$ptr$sub789$i))|0;
         $incdec$ptr808$i = (($d$6687$i) + 4|0);
         $cmp745$i = ($incdec$ptr808$i>>>0)<($z$6$add$ptr742$i>>>0);
         $cmp748$i = ($sub806$i|0)>(-1);
         $or$cond369$i = $cmp745$i & $cmp748$i;
         if ($or$cond369$i) {
          $d$6687$i = $incdec$ptr808$i;$p$addr$5688$i = $sub806$i;
         } else {
          break;
         }
        }
        $cmp$i622$i = ($sub806$i|0)>(0);
        if (!($cmp$i622$i)) {
         break;
        }
        $cmp1$i623$i = ($sub806$i>>>0)>(256);
        $cond$i624$i = $cmp1$i623$i ? 256 : $sub806$i;
        _memset(($pad$i|0),48,($cond$i624$i|0))|0;
        $cmp39$i625$i = ($sub806$i>>>0)>(255);
        if ($cmp39$i625$i) {
         $l$addr$010$i627$i = $sub806$i;
         while(1) {
          (___fwritex($pad$i,256,$f)|0);
          $sub5$i629$i = (($l$addr$010$i627$i) + -256)|0;
          $cmp3$i630$i = ($sub5$i629$i>>>0)>(255);
          if ($cmp3$i630$i) {
           $l$addr$010$i627$i = $sub5$i629$i;
          } else {
           $l$addr$0$lcssa$i632$i = $sub5$i629$i;
           break;
          }
         }
        } else {
         $l$addr$0$lcssa$i632$i = $sub806$i;
        }
        (___fwritex($pad$i,$l$addr$0$lcssa$i632$i,$f)|0);
       }
      } while(0);
      $sub$ptr$rhs$cast812$i = $estr$2$i;
      $sub$ptr$sub813$i = (($sub$ptr$lhs$cast160$i) - ($sub$ptr$rhs$cast812$i))|0;
      (___fwritex($estr$2$i,$sub$ptr$sub813$i,$f)|0);
     }
    } while(0);
    $tobool$i$i = ($and$i517$i|0)==(8192);
    $or$cond$i$i = $tobool$i$i & $cmp$i519$i;
    if ($or$cond$i$i) {
     $sub$i$i = (($w$1) - ($add653$i))|0;
     $cmp1$i$i = ($sub$i$i>>>0)>(256);
     $cond$i$i = $cmp1$i$i ? 256 : $sub$i$i;
     _memset(($pad$i|0),32,($cond$i$i|0))|0;
     $cmp39$i$i = ($sub$i$i>>>0)>(255);
     if ($cmp39$i$i) {
      $l$addr$010$i$i = $sub$i$i;
      while(1) {
       (___fwritex($pad$i,256,$f)|0);
       $sub5$i$i = (($l$addr$010$i$i) + -256)|0;
       $cmp3$i$i = ($sub5$i$i>>>0)>(255);
       if ($cmp3$i$i) {
        $l$addr$010$i$i = $sub5$i$i;
       } else {
        $l$addr$0$lcssa$i$i = $sub5$i$i;
        break;
       }
      }
     } else {
      $l$addr$0$lcssa$i$i = $sub$i$i;
     }
     (___fwritex($pad$i,$l$addr$0$lcssa$i$i,$f)|0);
    }
    $w$add653$i = $cmp$i519$i ? $w$1 : $add653$i;
    $309 = $82;$arg$sroa$0$sroa$1$4$extract$trunc531552 = $arg$sroa$0$sroa$1$4$extract$trunc531556568;$cnt$0 = $cnt$1;$incdec$ptr$i190563 = $incdec$ptr169;$l$0 = $w$add653$i;$l10n$0 = $l10n$3;
    continue L1;
    break;
   }
   default: {
    $313 = $82;$a$2 = $incdec$ptr$i190563;$arg$sroa$0$sroa$1$4$extract$trunc531555 = $arg$sroa$0$sroa$1$4$extract$trunc531556568;$fl$6 = $fl$1$and219;$p$5 = $p$0;$pl$2 = 0;$prefix$2 = 15104;$z$2 = $add$ptr205;
   }
   }
  } while(0);
  L445: do {
   if ((label|0) == 77) {
    label = 0;
    $95 = $82;
    $and249 = $t$1 & 32;
    $96 = ($95|0)==(0);
    $97 = ($arg$sroa$0$sroa$1$4$extract$trunc531556568|0)==(0);
    $98 = $96 & $97;
    if ($98) {
     $149 = $82;$a$0 = $add$ptr205;$arg$sroa$0$sroa$1$4$extract$trunc531553 = $arg$sroa$0$sroa$1$4$extract$trunc531556568;$fl$4 = $fl$3;$p$2 = $p$1;$pl$1 = 0;$prefix$1 = 15104;
     label = 94;
    } else {
     $101 = $arg$sroa$0$sroa$1$4$extract$trunc531556568;$99 = $95;$s$addr$06$i = $add$ptr205;
     while(1) {
      $idxprom$i = $99 & 15;
      $arrayidx$i = (15184 + ($idxprom$i)|0);
      $100 = HEAP8[$arrayidx$i>>0]|0;
      $conv4$i = $100&255;
      $or$i = $conv4$i | $and249;
      $conv1$i = $or$i&255;
      $incdec$ptr$i242 = (($s$addr$06$i) + -1|0);
      HEAP8[$incdec$ptr$i242>>0] = $conv1$i;
      $102 = (_bitshift64Lshr(($99|0),($101|0),4)|0);
      $103 = tempRet0;
      $104 = ($102|0)==(0);
      $105 = ($103|0)==(0);
      $106 = $104 & $105;
      if ($106) {
       break;
      } else {
       $101 = $103;$99 = $102;$s$addr$06$i = $incdec$ptr$i242;
      }
     }
     $and254 = $fl$3 & 8;
     $tobool255 = ($and254|0)==(0);
     if ($tobool255) {
      $149 = $82;$a$0 = $incdec$ptr$i242;$arg$sroa$0$sroa$1$4$extract$trunc531553 = $arg$sroa$0$sroa$1$4$extract$trunc531556568;$fl$4 = $fl$3;$p$2 = $p$1;$pl$1 = 0;$prefix$1 = 15104;
      label = 94;
     } else {
      $shr = $t$1 >> 4;
      $add$ptr257 = (15104 + ($shr)|0);
      $149 = $82;$a$0 = $incdec$ptr$i242;$arg$sroa$0$sroa$1$4$extract$trunc531553 = $arg$sroa$0$sroa$1$4$extract$trunc531556568;$fl$4 = $fl$3;$p$2 = $p$1;$pl$1 = 2;$prefix$1 = $add$ptr257;
      label = 94;
     }
    }
   }
   else if ((label|0) == 89) {
    label = 0;
    $127 = $128;
    $129 = ($arg$sroa$0$sroa$1$4$extract$trunc531554>>>0)>(0);
    $130 = ($arg$sroa$0$sroa$1$4$extract$trunc531554|0)==(0);
    $131 = ($127>>>0)>(4294967295);
    $132 = $130 & $131;
    $133 = $129 | $132;
    if ($133) {
     $134 = $127;$135 = $arg$sroa$0$sroa$1$4$extract$trunc531554;$s$addr$014$i = $add$ptr205;
     while(1) {
      $136 = (___uremdi3(($134|0),($135|0),10,0)|0);
      $137 = tempRet0;
      $138 = $136 | 48;
      $139 = $138&255;
      $incdec$ptr$i272 = (($s$addr$014$i) + -1|0);
      HEAP8[$incdec$ptr$i272>>0] = $139;
      $140 = (___udivdi3(($134|0),($135|0),10,0)|0);
      $141 = tempRet0;
      $142 = ($135>>>0)>(9);
      $143 = ($135|0)==(9);
      $144 = ($134>>>0)>(4294967295);
      $145 = $143 & $144;
      $146 = $142 | $145;
      if ($146) {
       $134 = $140;$135 = $141;$s$addr$014$i = $incdec$ptr$i272;
      } else {
       break;
      }
     }
     $s$addr$0$lcssa$i275 = $incdec$ptr$i272;$x$addr$0$lcssa$off0$i = $140;
    } else {
     $s$addr$0$lcssa$i275 = $add$ptr205;$x$addr$0$lcssa$off0$i = $127;
    }
    $tobool9$i = ($x$addr$0$lcssa$off0$i|0)==(0);
    if ($tobool9$i) {
     $149 = $128;$a$0 = $s$addr$0$lcssa$i275;$arg$sroa$0$sroa$1$4$extract$trunc531553 = $arg$sroa$0$sroa$1$4$extract$trunc531554;$fl$4 = $fl$1$and219;$p$2 = $p$0;$pl$1 = $pl$0;$prefix$1 = $prefix$0;
     label = 94;
    } else {
     $s$addr$110$i = $s$addr$0$lcssa$i275;$y$011$i = $x$addr$0$lcssa$off0$i;
     while(1) {
      $rem4$i = (($y$011$i>>>0) % 10)&-1;
      $add57$i = $rem4$i | 48;
      $conv6$i = $add57$i&255;
      $incdec$ptr7$i = (($s$addr$110$i) + -1|0);
      HEAP8[$incdec$ptr7$i>>0] = $conv6$i;
      $div9$i = (($y$011$i>>>0) / 10)&-1;
      $147 = ($y$011$i>>>0)<(10);
      if ($147) {
       $149 = $128;$a$0 = $incdec$ptr7$i;$arg$sroa$0$sroa$1$4$extract$trunc531553 = $arg$sroa$0$sroa$1$4$extract$trunc531554;$fl$4 = $fl$1$and219;$p$2 = $p$0;$pl$1 = $pl$0;$prefix$1 = $prefix$0;
       label = 94;
       break;
      } else {
       $s$addr$110$i = $incdec$ptr7$i;$y$011$i = $div9$i;
      }
     }
    }
   }
   else if ((label|0) == 99) {
    label = 0;
    $call349 = (_memchr($a$1,0,$p$0)|0);
    $tobool350 = ($call349|0)==(0|0);
    if ($tobool350) {
     $add$ptr352 = (($a$1) + ($p$0)|0);
     $313 = $82;$a$2 = $a$1;$arg$sroa$0$sroa$1$4$extract$trunc531555 = $arg$sroa$0$sroa$1$4$extract$trunc531556568;$fl$6 = $and219;$p$5 = $p$0;$pl$2 = 0;$prefix$2 = 15104;$z$2 = $add$ptr352;
     break;
    } else {
     $sub$ptr$lhs$cast354 = $call349;
     $sub$ptr$rhs$cast355 = $a$1;
     $sub$ptr$sub356 = (($sub$ptr$lhs$cast354) - ($sub$ptr$rhs$cast355))|0;
     $313 = $82;$a$2 = $a$1;$arg$sroa$0$sroa$1$4$extract$trunc531555 = $arg$sroa$0$sroa$1$4$extract$trunc531556568;$fl$6 = $and219;$p$5 = $sub$ptr$sub356;$pl$2 = 0;$prefix$2 = 15104;$z$2 = $call349;
     break;
    }
   }
   else if ((label|0) == 104) {
    label = 0;
    $i$0612 = 0;$l$1611 = 0;$ws$0613 = $314;
    while(1) {
     $156 = HEAP32[$ws$0613>>2]|0;
     $tobool373 = ($156|0)==(0);
     if ($tobool373) {
      $i$0$lcssa = $i$0612;$l$1$lcssa = $l$1611;
      break;
     }
     $call377 = (_wctomb($mb,$156)|0);
     $cmp378 = ($call377|0)>(-1);
     if (!($cmp378)) {
      $retval$0 = -1;
      label = 362;
      break L1;
     }
     $sub382 = (($p$4658) - ($i$0612))|0;
     $cmp383 = ($call377>>>0)>($sub382>>>0);
     $add388 = (($call377) + ($i$0612))|0;
     if ($cmp383) {
      $316 = $314;$317 = $315;$i$0609 = $i$0612;
      label = 110;
      break L445;
     }
     $incdec$ptr376 = (($ws$0613) + 4|0);
     $cmp370 = ($add388>>>0)<($p$4658>>>0);
     if ($cmp370) {
      $i$0612 = $add388;$l$1611 = $call377;$ws$0613 = $incdec$ptr376;
     } else {
      $i$0$lcssa = $add388;$l$1$lcssa = $call377;
      break;
     }
    }
    $cmp390 = ($l$1$lcssa|0)<(0);
    if ($cmp390) {
     $retval$0 = -1;
     label = 362;
     break L1;
    } else {
     $316 = $314;$317 = $315;$i$0609 = $i$0$lcssa;
     label = 110;
    }
   }
  } while(0);
  if ((label|0) == 94) {
   label = 0;
   $cmp299 = ($p$2|0)>(-1);
   $and302 = $fl$4 & -65537;
   $and302$fl$4 = $cmp299 ? $and302 : $fl$4;
   $148 = $149;
   $150 = ($148|0)==(0);
   $151 = ($arg$sroa$0$sroa$1$4$extract$trunc531553|0)==(0);
   $152 = $150 & $151;
   $tobool307 = ($p$2|0)==(0);
   $or$cond = $152 & $tobool307;
   if ($or$cond) {
    $313 = $149;$a$2 = $add$ptr205;$arg$sroa$0$sroa$1$4$extract$trunc531555 = $arg$sroa$0$sroa$1$4$extract$trunc531553;$fl$6 = $and302$fl$4;$p$5 = 0;$pl$2 = $pl$1;$prefix$2 = $prefix$1;$z$2 = $add$ptr205;
   } else {
    $sub$ptr$rhs$cast311 = $a$0;
    $sub$ptr$sub312 = (($sub$ptr$lhs$cast310) - ($sub$ptr$rhs$cast311))|0;
    $lnot$ext = $152&1;
    $add315 = (($lnot$ext) + ($sub$ptr$sub312))|0;
    $cmp316 = ($p$2|0)>($add315|0);
    $p$2$add315 = $cmp316 ? $p$2 : $add315;
    $313 = $149;$a$2 = $a$0;$arg$sroa$0$sroa$1$4$extract$trunc531555 = $arg$sroa$0$sroa$1$4$extract$trunc531553;$fl$6 = $and302$fl$4;$p$5 = $p$2$add315;$pl$2 = $pl$1;$prefix$2 = $prefix$1;$z$2 = $add$ptr205;
   }
  }
  else if ((label|0) == 110) {
   label = 0;
   $and$i297 = $fl$1$and219 & 73728;
   $tobool$i298 = ($and$i297|0)==(0);
   $cmp$i299 = ($i$0609|0)<($w$1|0);
   $or$cond$i300 = $tobool$i298 & $cmp$i299;
   if ($or$cond$i300) {
    $sub$i301 = (($w$1) - ($i$0609))|0;
    $cmp1$i302 = ($sub$i301>>>0)>(256);
    $cond$i303 = $cmp1$i302 ? 256 : $sub$i301;
    _memset(($pad$i|0),32,($cond$i303|0))|0;
    $cmp39$i304 = ($sub$i301>>>0)>(255);
    if ($cmp39$i304) {
     $l$addr$010$i306 = $sub$i301;
     while(1) {
      (___fwritex($pad$i,256,$f)|0);
      $sub5$i308 = (($l$addr$010$i306) + -256)|0;
      $cmp3$i309 = ($sub5$i308>>>0)>(255);
      if ($cmp3$i309) {
       $l$addr$010$i306 = $sub5$i308;
      } else {
       $l$addr$0$lcssa$i311 = $sub5$i308;
       break;
      }
     }
    } else {
     $l$addr$0$lcssa$i311 = $sub$i301;
    }
    (___fwritex($pad$i,$l$addr$0$lcssa$i311,$f)|0);
   }
   $cmp397616 = ($i$0609|0)==(0);
   L481: do {
    if (!($cmp397616)) {
     $i$1617 = 0;$ws$1618 = $316;
     while(1) {
      $157 = HEAP32[$ws$1618>>2]|0;
      $tobool400 = ($157|0)==(0);
      if ($tobool400) {
       break L481;
      }
      $call404 = (_wctomb($mb,$157)|0);
      $add405 = (($call404) + ($i$1617))|0;
      $cmp406 = ($add405|0)>($i$0609|0);
      if ($cmp406) {
       break L481;
      }
      $incdec$ptr403 = (($ws$1618) + 4|0);
      (___fwritex($mb,$call404,$f)|0);
      $cmp397 = ($add405>>>0)<($i$0609>>>0);
      if ($cmp397) {
       $i$1617 = $add405;$ws$1618 = $incdec$ptr403;
      } else {
       break;
      }
     }
    }
   } while(0);
   $tobool$i318 = ($and$i297|0)==(8192);
   $or$cond$i320 = $tobool$i318 & $cmp$i299;
   if ($or$cond$i320) {
    $sub$i321 = (($w$1) - ($i$0609))|0;
    $cmp1$i322 = ($sub$i321>>>0)>(256);
    $cond$i323 = $cmp1$i322 ? 256 : $sub$i321;
    _memset(($pad$i|0),32,($cond$i323|0))|0;
    $cmp39$i324 = ($sub$i321>>>0)>(255);
    if ($cmp39$i324) {
     $l$addr$010$i326 = $sub$i321;
     while(1) {
      (___fwritex($pad$i,256,$f)|0);
      $sub5$i328 = (($l$addr$010$i326) + -256)|0;
      $cmp3$i329 = ($sub5$i328>>>0)>(255);
      if ($cmp3$i329) {
       $l$addr$010$i326 = $sub5$i328;
      } else {
       $l$addr$0$lcssa$i331 = $sub5$i328;
       break;
      }
     }
    } else {
     $l$addr$0$lcssa$i331 = $sub$i321;
    }
    (___fwritex($pad$i,$l$addr$0$lcssa$i331,$f)|0);
   }
   $cond419 = $cmp$i299 ? $w$1 : $i$0609;
   $309 = $317;$arg$sroa$0$sroa$1$4$extract$trunc531552 = $arg$sroa$0$sroa$1$4$extract$trunc531556568;$cnt$0 = $cnt$1;$incdec$ptr$i190563 = $incdec$ptr169;$l$0 = $cond419;$l10n$0 = $l10n$3;
   continue;
  }
  $sub$ptr$lhs$cast424 = $z$2;
  $sub$ptr$rhs$cast425 = $a$2;
  $sub$ptr$sub426 = (($sub$ptr$lhs$cast424) - ($sub$ptr$rhs$cast425))|0;
  $cmp427 = ($p$5|0)<($sub$ptr$sub426|0);
  $sub$ptr$sub426$p$5 = $cmp427 ? $sub$ptr$sub426 : $p$5;
  $add434 = (($pl$2) + ($sub$ptr$sub426$p$5))|0;
  $cmp435 = ($w$1|0)<($add434|0);
  $w$2 = $cmp435 ? $add434 : $w$1;
  $and$i352 = $fl$6 & 73728;
  $tobool$i353 = ($and$i352|0)==(0);
  $cmp$i354 = ($add434|0)<($w$2|0);
  $or$cond$i355 = $tobool$i353 & $cmp$i354;
  if ($or$cond$i355) {
   $sub$i356 = (($w$2) - ($add434))|0;
   $cmp1$i357 = ($sub$i356>>>0)>(256);
   $cond$i358 = $cmp1$i357 ? 256 : $sub$i356;
   _memset(($pad$i|0),32,($cond$i358|0))|0;
   $cmp39$i359 = ($sub$i356>>>0)>(255);
   if ($cmp39$i359) {
    $l$addr$010$i361 = $sub$i356;
    while(1) {
     (___fwritex($pad$i,256,$f)|0);
     $sub5$i363 = (($l$addr$010$i361) + -256)|0;
     $cmp3$i364 = ($sub5$i363>>>0)>(255);
     if ($cmp3$i364) {
      $l$addr$010$i361 = $sub5$i363;
     } else {
      $l$addr$0$lcssa$i366 = $sub5$i363;
      break;
     }
    }
   } else {
    $l$addr$0$lcssa$i366 = $sub$i356;
   }
   (___fwritex($pad$i,$l$addr$0$lcssa$i366,$f)|0);
  }
  (___fwritex($prefix$2,$pl$2,$f)|0);
  $tobool$i279 = ($and$i352|0)==(65536);
  $or$cond$i281 = $tobool$i279 & $cmp$i354;
  if ($or$cond$i281) {
   $sub$i282 = (($w$2) - ($add434))|0;
   $cmp1$i283 = ($sub$i282>>>0)>(256);
   $cond$i284 = $cmp1$i283 ? 256 : $sub$i282;
   _memset(($pad$i|0),48,($cond$i284|0))|0;
   $cmp39$i285 = ($sub$i282>>>0)>(255);
   if ($cmp39$i285) {
    $l$addr$010$i287 = $sub$i282;
    while(1) {
     (___fwritex($pad$i,256,$f)|0);
     $sub5$i289 = (($l$addr$010$i287) + -256)|0;
     $cmp3$i290 = ($sub5$i289>>>0)>(255);
     if ($cmp3$i290) {
      $l$addr$010$i287 = $sub5$i289;
     } else {
      $l$addr$0$lcssa$i292 = $sub5$i289;
      break;
     }
    }
   } else {
    $l$addr$0$lcssa$i292 = $sub$i282;
   }
   (___fwritex($pad$i,$l$addr$0$lcssa$i292,$f)|0);
  }
  $cmp$i247 = ($sub$ptr$sub426|0)<($sub$ptr$sub426$p$5|0);
  if ($cmp$i247) {
   $sub$i248 = (($sub$ptr$sub426$p$5) - ($sub$ptr$sub426))|0;
   $cmp1$i249 = ($sub$i248>>>0)>(256);
   $cond$i250 = $cmp1$i249 ? 256 : $sub$i248;
   _memset(($pad$i|0),48,($cond$i250|0))|0;
   $cmp39$i251 = ($sub$i248>>>0)>(255);
   if ($cmp39$i251) {
    $l$addr$010$i253 = $sub$i248;
    while(1) {
     (___fwritex($pad$i,256,$f)|0);
     $sub5$i255 = (($l$addr$010$i253) + -256)|0;
     $cmp3$i256 = ($sub5$i255>>>0)>(255);
     if ($cmp3$i256) {
      $l$addr$010$i253 = $sub5$i255;
     } else {
      $l$addr$0$lcssa$i258 = $sub5$i255;
      break;
     }
    }
   } else {
    $l$addr$0$lcssa$i258 = $sub$i248;
   }
   (___fwritex($pad$i,$l$addr$0$lcssa$i258,$f)|0);
  }
  (___fwritex($a$2,$sub$ptr$sub426,$f)|0);
  $tobool$i = ($and$i352|0)==(8192);
  $or$cond$i = $tobool$i & $cmp$i354;
  if (!($or$cond$i)) {
   $309 = $313;$arg$sroa$0$sroa$1$4$extract$trunc531552 = $arg$sroa$0$sroa$1$4$extract$trunc531555;$cnt$0 = $cnt$1;$incdec$ptr$i190563 = $incdec$ptr169;$l$0 = $w$2;$l10n$0 = $l10n$3;
   continue;
  }
  $sub$i179 = (($w$2) - ($add434))|0;
  $cmp1$i = ($sub$i179>>>0)>(256);
  $cond$i = $cmp1$i ? 256 : $sub$i179;
  _memset(($pad$i|0),32,($cond$i|0))|0;
  $cmp39$i = ($sub$i179>>>0)>(255);
  if ($cmp39$i) {
   $l$addr$010$i = $sub$i179;
   while(1) {
    (___fwritex($pad$i,256,$f)|0);
    $sub5$i = (($l$addr$010$i) + -256)|0;
    $cmp3$i = ($sub5$i>>>0)>(255);
    if ($cmp3$i) {
     $l$addr$010$i = $sub5$i;
    } else {
     $l$addr$0$lcssa$i = $sub5$i;
     break;
    }
   }
  } else {
   $l$addr$0$lcssa$i = $sub$i179;
  }
  (___fwritex($pad$i,$l$addr$0$lcssa$i,$f)|0);
  $309 = $313;$arg$sroa$0$sroa$1$4$extract$trunc531552 = $arg$sroa$0$sroa$1$4$extract$trunc531555;$cnt$0 = $cnt$1;$incdec$ptr$i190563 = $incdec$ptr169;$l$0 = $w$2;$l10n$0 = $l10n$3;
 }
 if ((label|0) == 344) {
  $tobool452 = ($f|0)==(0|0);
  if (!($tobool452)) {
   $retval$0 = $cnt$1;
   STACKTOP = sp;return ($retval$0|0);
  }
  $tobool455 = ($l10n$0|0)==(0);
  if ($tobool455) {
   $retval$0 = 0;
   STACKTOP = sp;return ($retval$0|0);
  } else {
   $i$2577 = 1;
  }
  while(1) {
   $arrayidx462 = (($nl_type) + ($i$2577<<2)|0);
   $256 = HEAP32[$arrayidx462>>2]|0;
   $tobool463 = ($256|0)==(0);
   if ($tobool463) {
    $i$3575 = $i$2577;
    break;
   }
   $add$ptr466 = (($nl_arg) + ($i$2577<<3)|0);
   $cmp$i = ($256>>>0)>(20);
   L531: do {
    if (!($cmp$i)) {
     do {
      switch ($256|0) {
      case 9:  {
       $arglist_current35 = HEAP32[$ap>>2]|0;
       $257 = HEAP32[$arglist_current35>>2]|0;
       $arglist_next36 = (($arglist_current35) + 4|0);
       HEAP32[$ap>>2] = $arglist_next36;
       HEAP32[$add$ptr466>>2] = $257;
       break L531;
       break;
      }
      case 10:  {
       $arglist_current38 = HEAP32[$ap>>2]|0;
       $258 = HEAP32[$arglist_current38>>2]|0;
       $arglist_next39 = (($arglist_current38) + 4|0);
       HEAP32[$ap>>2] = $arglist_next39;
       $259 = ($258|0)<(0);
       $260 = $259 << 31 >> 31;
       $261 = $add$ptr466;
       $262 = $261;
       HEAP32[$262>>2] = $258;
       $263 = (($261) + 4)|0;
       $264 = $263;
       HEAP32[$264>>2] = $260;
       break L531;
       break;
      }
      case 11:  {
       $arglist_current41 = HEAP32[$ap>>2]|0;
       $265 = HEAP32[$arglist_current41>>2]|0;
       $arglist_next42 = (($arglist_current41) + 4|0);
       HEAP32[$ap>>2] = $arglist_next42;
       $266 = $add$ptr466;
       $267 = $266;
       HEAP32[$267>>2] = $265;
       $268 = (($266) + 4)|0;
       $269 = $268;
       HEAP32[$269>>2] = 0;
       break L531;
       break;
      }
      case 12:  {
       $arglist_current44 = HEAP32[$ap>>2]|0;
       $270 = $arglist_current44;
       $271 = $270;
       $272 = HEAP32[$271>>2]|0;
       $273 = (($270) + 4)|0;
       $274 = $273;
       $275 = HEAP32[$274>>2]|0;
       $arglist_next45 = (($arglist_current44) + 8|0);
       HEAP32[$ap>>2] = $arglist_next45;
       $276 = $add$ptr466;
       $277 = $276;
       HEAP32[$277>>2] = $272;
       $278 = (($276) + 4)|0;
       $279 = $278;
       HEAP32[$279>>2] = $275;
       break L531;
       break;
      }
      case 13:  {
       $arglist_current47 = HEAP32[$ap>>2]|0;
       $280 = HEAP32[$arglist_current47>>2]|0;
       $arglist_next48 = (($arglist_current47) + 4|0);
       HEAP32[$ap>>2] = $arglist_next48;
       $conv12$i = $280&65535;
       $281 = $conv12$i << 16 >> 16;
       $282 = ($281|0)<(0);
       $283 = $282 << 31 >> 31;
       $284 = $add$ptr466;
       $285 = $284;
       HEAP32[$285>>2] = $281;
       $286 = (($284) + 4)|0;
       $287 = $286;
       HEAP32[$287>>2] = $283;
       break L531;
       break;
      }
      case 14:  {
       $arglist_current50 = HEAP32[$ap>>2]|0;
       $288 = HEAP32[$arglist_current50>>2]|0;
       $arglist_next51 = (($arglist_current50) + 4|0);
       HEAP32[$ap>>2] = $arglist_next51;
       $conv17$mask$i = $288 & 65535;
       $289 = $add$ptr466;
       $290 = $289;
       HEAP32[$290>>2] = $conv17$mask$i;
       $291 = (($289) + 4)|0;
       $292 = $291;
       HEAP32[$292>>2] = 0;
       break L531;
       break;
      }
      case 15:  {
       $arglist_current53 = HEAP32[$ap>>2]|0;
       $293 = HEAP32[$arglist_current53>>2]|0;
       $arglist_next54 = (($arglist_current53) + 4|0);
       HEAP32[$ap>>2] = $arglist_next54;
       $conv22$i = $293&255;
       $294 = $conv22$i << 24 >> 24;
       $295 = ($294|0)<(0);
       $296 = $295 << 31 >> 31;
       $297 = $add$ptr466;
       $298 = $297;
       HEAP32[$298>>2] = $294;
       $299 = (($297) + 4)|0;
       $300 = $299;
       HEAP32[$300>>2] = $296;
       break L531;
       break;
      }
      case 16:  {
       $arglist_current56 = HEAP32[$ap>>2]|0;
       $301 = HEAP32[$arglist_current56>>2]|0;
       $arglist_next57 = (($arglist_current56) + 4|0);
       HEAP32[$ap>>2] = $arglist_next57;
       $conv27$mask$i = $301 & 255;
       $302 = $add$ptr466;
       $303 = $302;
       HEAP32[$303>>2] = $conv27$mask$i;
       $304 = (($302) + 4)|0;
       $305 = $304;
       HEAP32[$305>>2] = 0;
       break L531;
       break;
      }
      case 17:  {
       $arglist_current59 = HEAP32[$ap>>2]|0;
       HEAP32[tempDoublePtr>>2]=HEAP32[$arglist_current59>>2];HEAP32[tempDoublePtr+4>>2]=HEAP32[$arglist_current59+4>>2];$306 = +HEAPF64[tempDoublePtr>>3];
       $arglist_next60 = (($arglist_current59) + 8|0);
       HEAP32[$ap>>2] = $arglist_next60;
       HEAPF64[$add$ptr466>>3] = $306;
       break L531;
       break;
      }
      case 18:  {
       $arglist_current62 = HEAP32[$ap>>2]|0;
       HEAP32[tempDoublePtr>>2]=HEAP32[$arglist_current62>>2];HEAP32[tempDoublePtr+4>>2]=HEAP32[$arglist_current62+4>>2];$307 = +HEAPF64[tempDoublePtr>>3];
       $arglist_next63 = (($arglist_current62) + 8|0);
       HEAP32[$ap>>2] = $arglist_next63;
       HEAPF64[$add$ptr466>>3] = $307;
       break L531;
       break;
      }
      default: {
       break L531;
      }
      }
     } while(0);
    }
   } while(0);
   $inc = (($i$2577) + 1)|0;
   $cmp459 = ($inc|0)<(10);
   if ($cmp459) {
    $i$2577 = $inc;
   } else {
    $retval$0 = 1;
    label = 362;
    break;
   }
  }
  if ((label|0) == 362) {
   STACKTOP = sp;return ($retval$0|0);
  }
  while(1) {
   $arrayidx474 = (($nl_type) + ($i$3575<<2)|0);
   $308 = HEAP32[$arrayidx474>>2]|0;
   $lnot476 = ($308|0)==(0);
   $inc481 = (($i$3575) + 1)|0;
   if (!($lnot476)) {
    $retval$0 = -1;
    label = 362;
    break;
   }
   $cmp471 = ($inc481|0)<(10);
   if ($cmp471) {
    $i$3575 = $inc481;
   } else {
    $retval$0 = 1;
    label = 362;
    break;
   }
  }
  if ((label|0) == 362) {
   STACKTOP = sp;return ($retval$0|0);
  }
 }
 else if ((label|0) == 362) {
  STACKTOP = sp;return ($retval$0|0);
 }
 return 0|0;
}
function _vsnprintf($s,$n,$fmt,$ap) {
 $s = $s|0;
 $n = $n|0;
 $fmt = $fmt|0;
 $ap = $ap|0;
 var $0 = 0, $1 = 0, $add$ptr = 0, $arrayidx = 0, $b = 0, $buf = 0, $buf_size = 0, $call = 0, $call10 = 0, $cmp = 0, $cmp15 = 0, $cmp4 = 0, $f = 0, $n$addr$0 = 0, $retval$0 = 0, $s$addr$0 = 0, $sub = 0, $sub$ptr$rhs$cast = 0, $sub16 = 0, $sub3 = 0;
 var $sub3$n$addr$0 = 0, $tobool = 0, $tobool11 = 0, $wbase = 0, $wend = 0, $wpos = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $b = sp + 112|0;
 $f = sp;
 dest=$f+0|0; src=15208+0|0; stop=dest+112|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 $sub = (($n) + -1)|0;
 $cmp = ($sub>>>0)>(2147483646);
 if ($cmp) {
  $tobool = ($n|0)==(0);
  if ($tobool) {
   $n$addr$0 = 1;$s$addr$0 = $b;
  } else {
   $call = (___errno_location()|0);
   HEAP32[$call>>2] = 75;
   $retval$0 = -1;
   STACKTOP = sp;return ($retval$0|0);
  }
 } else {
  $n$addr$0 = $n;$s$addr$0 = $s;
 }
 $sub$ptr$rhs$cast = $s$addr$0;
 $sub3 = (-2 - ($sub$ptr$rhs$cast))|0;
 $cmp4 = ($n$addr$0>>>0)>($sub3>>>0);
 $sub3$n$addr$0 = $cmp4 ? $sub3 : $n$addr$0;
 $buf_size = (($f) + 48|0);
 HEAP32[$buf_size>>2] = $sub3$n$addr$0;
 $wpos = (($f) + 20|0);
 HEAP32[$wpos>>2] = $s$addr$0;
 $buf = (($f) + 44|0);
 HEAP32[$buf>>2] = $s$addr$0;
 $add$ptr = (($s$addr$0) + ($sub3$n$addr$0)|0);
 $wend = (($f) + 16|0);
 HEAP32[$wend>>2] = $add$ptr;
 $wbase = (($f) + 28|0);
 HEAP32[$wbase>>2] = $add$ptr;
 $call10 = (_MUSL_vfprintf($f,$fmt,$ap)|0);
 $tobool11 = ($sub3$n$addr$0|0)==(0);
 if ($tobool11) {
  $retval$0 = $call10;
  STACKTOP = sp;return ($retval$0|0);
 }
 $0 = HEAP32[$wpos>>2]|0;
 $1 = HEAP32[$wend>>2]|0;
 $cmp15 = ($0|0)==($1|0);
 $sub16 = $cmp15 << 31 >> 31;
 $arrayidx = (($0) + ($sub16)|0);
 HEAP8[$arrayidx>>0] = 0;
 $retval$0 = $call10;
 STACKTOP = sp;return ($retval$0|0);
}
function _sn_write($f,$s,$l) {
 $f = $f|0;
 $s = $s|0;
 $l = $l|0;
 var $0 = 0, $1 = 0, $2 = 0, $add$ptr = 0, $cmp = 0, $l$sub$ptr$sub = 0, $sub$ptr$lhs$cast = 0, $sub$ptr$rhs$cast = 0, $sub$ptr$sub = 0, $wend = 0, $wpos = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $wend = (($f) + 16|0);
 $0 = HEAP32[$wend>>2]|0;
 $wpos = (($f) + 20|0);
 $1 = HEAP32[$wpos>>2]|0;
 $sub$ptr$lhs$cast = $0;
 $sub$ptr$rhs$cast = $1;
 $sub$ptr$sub = (($sub$ptr$lhs$cast) - ($sub$ptr$rhs$cast))|0;
 $cmp = ($sub$ptr$sub>>>0)>($l>>>0);
 $l$sub$ptr$sub = $cmp ? $l : $sub$ptr$sub;
 _memcpy(($1|0),($s|0),($l$sub$ptr$sub|0))|0;
 $2 = HEAP32[$wpos>>2]|0;
 $add$ptr = (($2) + ($l$sub$ptr$sub)|0);
 HEAP32[$wpos>>2] = $add$ptr;
 STACKTOP = sp;return ($l|0);
}
function _strtold_l($s,$p,$loc) {
 $s = $s|0;
 $p = $p|0;
 $loc = $loc|0;
 var $0 = 0, $1 = 0, $2 = 0, $add$i$i = 0, $add$ptr$i$i = 0, $buf$i$i = 0, $call$i$i = 0.0, $cond$i$i = 0, $f$i$i = 0, $lock$i$i = 0, $rend$i$i = 0, $rpos$i$i = 0, $shcnt$i$i = 0, $sub$ptr$lhs$cast$i$i = 0, $sub$ptr$rhs$cast$i$i = 0, $sub$ptr$sub$i$i = 0, $tobool$i$i = 0, $tobool3$i$i = 0, dest = 0, label = 0;
 var sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $f$i$i = sp;
 dest=$f$i$i+0|0; stop=dest+112|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 $rpos$i$i = (($f$i$i) + 4|0);
 HEAP32[$rpos$i$i>>2] = $s;
 $rend$i$i = (($f$i$i) + 8|0);
 HEAP32[$rend$i$i>>2] = (-1);
 $buf$i$i = (($f$i$i) + 44|0);
 HEAP32[$buf$i$i>>2] = $s;
 $lock$i$i = (($f$i$i) + 76|0);
 HEAP32[$lock$i$i>>2] = -1;
 ___shlim($f$i$i,0);
 $call$i$i = (+___floatscan($f$i$i,2,1));
 $shcnt$i$i = (($f$i$i) + 108|0);
 $0 = HEAP32[$shcnt$i$i>>2]|0;
 $1 = HEAP32[$rpos$i$i>>2]|0;
 $2 = HEAP32[$rend$i$i>>2]|0;
 $sub$ptr$lhs$cast$i$i = $1;
 $sub$ptr$rhs$cast$i$i = $2;
 $sub$ptr$sub$i$i = (($sub$ptr$lhs$cast$i$i) - ($sub$ptr$rhs$cast$i$i))|0;
 $add$i$i = (($sub$ptr$sub$i$i) + ($0))|0;
 $tobool$i$i = ($p|0)==(0|0);
 if ($tobool$i$i) {
  STACKTOP = sp;return (+$call$i$i);
 }
 $tobool3$i$i = ($add$i$i|0)==(0);
 if ($tobool3$i$i) {
  $cond$i$i = $s;
 } else {
  $add$ptr$i$i = (($s) + ($add$i$i)|0);
  $cond$i$i = $add$ptr$i$i;
 }
 HEAP32[$p>>2] = $cond$i$i;
 STACKTOP = sp;return (+$call$i$i);
}
function _strtoull($s,$p,$base) {
 $s = $s|0;
 $p = $p|0;
 $base = $base|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $add$i = 0, $add$ptr$i = 0, $add$ptr5$i = 0, $buf$i = 0, $cmp$i = 0, $f$i = 0, $lock$i = 0, $rend$i = 0, $rend1$i = 0, $rend4$i = 0, $rpos$i = 0, $shcnt$i = 0, $sub$ptr$lhs$cast$i = 0, $sub$ptr$rhs$cast$i = 0, $sub$ptr$sub$i = 0;
 var $tobool$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $f$i = sp;
 HEAP32[$f$i>>2] = 0;
 $rpos$i = (($f$i) + 4|0);
 HEAP32[$rpos$i>>2] = $s;
 $buf$i = (($f$i) + 44|0);
 HEAP32[$buf$i>>2] = $s;
 $cmp$i = ($s|0)<(0|0);
 if ($cmp$i) {
  $rend$i = (($f$i) + 8|0);
  HEAP32[$rend$i>>2] = (-1);
 } else {
  $add$ptr$i = (($s) + 2147483647|0);
  $rend1$i = (($f$i) + 8|0);
  HEAP32[$rend1$i>>2] = $add$ptr$i;
 }
 $lock$i = (($f$i) + 76|0);
 HEAP32[$lock$i>>2] = -1;
 ___shlim($f$i,0);
 $0 = (___intscan($f$i,$base,1,-1,-1)|0);
 $1 = tempRet0;
 $tobool$i = ($p|0)==(0|0);
 if ($tobool$i) {
  tempRet0 = $1;
  STACKTOP = sp;return ($0|0);
 }
 $shcnt$i = (($f$i) + 108|0);
 $2 = HEAP32[$shcnt$i>>2]|0;
 $3 = HEAP32[$rpos$i>>2]|0;
 $rend4$i = (($f$i) + 8|0);
 $4 = HEAP32[$rend4$i>>2]|0;
 $sub$ptr$lhs$cast$i = $3;
 $sub$ptr$rhs$cast$i = $4;
 $sub$ptr$sub$i = (($sub$ptr$lhs$cast$i) + ($2))|0;
 $add$i = (($sub$ptr$sub$i) - ($sub$ptr$rhs$cast$i))|0;
 $add$ptr5$i = (($s) + ($add$i)|0);
 HEAP32[$p>>2] = $add$ptr5$i;
 tempRet0 = $1;
 STACKTOP = sp;return ($0|0);
}
function _strtoll($s,$p,$base) {
 $s = $s|0;
 $p = $p|0;
 $base = $base|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $add$i = 0, $add$ptr$i = 0, $add$ptr5$i = 0, $buf$i = 0, $cmp$i = 0, $f$i = 0, $lock$i = 0, $rend$i = 0, $rend1$i = 0, $rend4$i = 0, $rpos$i = 0, $shcnt$i = 0, $sub$ptr$lhs$cast$i = 0, $sub$ptr$rhs$cast$i = 0, $sub$ptr$sub$i = 0;
 var $tobool$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $f$i = sp;
 HEAP32[$f$i>>2] = 0;
 $rpos$i = (($f$i) + 4|0);
 HEAP32[$rpos$i>>2] = $s;
 $buf$i = (($f$i) + 44|0);
 HEAP32[$buf$i>>2] = $s;
 $cmp$i = ($s|0)<(0|0);
 if ($cmp$i) {
  $rend$i = (($f$i) + 8|0);
  HEAP32[$rend$i>>2] = (-1);
 } else {
  $add$ptr$i = (($s) + 2147483647|0);
  $rend1$i = (($f$i) + 8|0);
  HEAP32[$rend1$i>>2] = $add$ptr$i;
 }
 $lock$i = (($f$i) + 76|0);
 HEAP32[$lock$i>>2] = -1;
 ___shlim($f$i,0);
 $0 = (___intscan($f$i,$base,1,0,-2147483648)|0);
 $1 = tempRet0;
 $tobool$i = ($p|0)==(0|0);
 if ($tobool$i) {
  tempRet0 = $1;
  STACKTOP = sp;return ($0|0);
 }
 $shcnt$i = (($f$i) + 108|0);
 $2 = HEAP32[$shcnt$i>>2]|0;
 $3 = HEAP32[$rpos$i>>2]|0;
 $rend4$i = (($f$i) + 8|0);
 $4 = HEAP32[$rend4$i>>2]|0;
 $sub$ptr$lhs$cast$i = $3;
 $sub$ptr$rhs$cast$i = $4;
 $sub$ptr$sub$i = (($sub$ptr$lhs$cast$i) + ($2))|0;
 $add$i = (($sub$ptr$sub$i) - ($sub$ptr$rhs$cast$i))|0;
 $add$ptr5$i = (($s) + ($add$i)|0);
 HEAP32[$p>>2] = $add$ptr5$i;
 tempRet0 = $1;
 STACKTOP = sp;return ($0|0);
}
function _memchr($src,$c,$n) {
 $src = $src|0;
 $c = $c|0;
 $n = $n|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $and = 0, $and15 = 0, $and16 = 0, $and33 = 0, $cmp = 0, $cmp11 = 0, $cmp1128 = 0, $cmp28 = 0, $cmp8 = 0, $cond = 0, $conv1 = 0, $dec = 0;
 var $dec34 = 0, $incdec$ptr = 0, $incdec$ptr21 = 0, $incdec$ptr33 = 0, $lnot = 0, $mul = 0, $n$addr$0$lcssa = 0, $n$addr$0$lcssa52 = 0, $n$addr$037 = 0, $n$addr$1$lcssa = 0, $n$addr$129 = 0, $n$addr$225 = 0, $n$addr$3 = 0, $neg = 0, $or$cond = 0, $or$cond36 = 0, $s$0$lcssa = 0, $s$0$lcssa51 = 0, $s$038 = 0, $s$126 = 0;
 var $s$2 = 0, $sub = 0, $sub22 = 0, $tobool = 0, $tobool2 = 0, $tobool2$lcssa = 0, $tobool235 = 0, $tobool25 = 0, $tobool2524 = 0, $tobool34 = 0, $tobool36 = 0, $w$0$lcssa = 0, $w$030 = 0, $xor = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $conv1 = $c & 255;
 $0 = $src;
 $and33 = $0 & 3;
 $tobool34 = ($and33|0)==(0);
 $tobool235 = ($n|0)==(0);
 $or$cond36 = $tobool34 | $tobool235;
 L1: do {
  if ($or$cond36) {
   $n$addr$0$lcssa = $n;$s$0$lcssa = $src;$tobool2$lcssa = $tobool235;
   label = 5;
  } else {
   $1 = $c&255;
   $n$addr$037 = $n;$s$038 = $src;
   while(1) {
    $2 = HEAP8[$s$038>>0]|0;
    $cmp = ($2<<24>>24)==($1<<24>>24);
    if ($cmp) {
     $n$addr$0$lcssa52 = $n$addr$037;$s$0$lcssa51 = $s$038;
     label = 6;
     break L1;
    }
    $incdec$ptr = (($s$038) + 1|0);
    $dec = (($n$addr$037) + -1)|0;
    $3 = $incdec$ptr;
    $and = $3 & 3;
    $tobool = ($and|0)==(0);
    $tobool2 = ($dec|0)==(0);
    $or$cond = $tobool | $tobool2;
    if ($or$cond) {
     $n$addr$0$lcssa = $dec;$s$0$lcssa = $incdec$ptr;$tobool2$lcssa = $tobool2;
     label = 5;
     break;
    } else {
     $n$addr$037 = $dec;$s$038 = $incdec$ptr;
    }
   }
  }
 } while(0);
 if ((label|0) == 5) {
  if ($tobool2$lcssa) {
   $n$addr$3 = 0;$s$2 = $s$0$lcssa;
  } else {
   $n$addr$0$lcssa52 = $n$addr$0$lcssa;$s$0$lcssa51 = $s$0$lcssa;
   label = 6;
  }
 }
 L8: do {
  if ((label|0) == 6) {
   $4 = HEAP8[$s$0$lcssa51>>0]|0;
   $5 = $c&255;
   $cmp8 = ($4<<24>>24)==($5<<24>>24);
   if ($cmp8) {
    $n$addr$3 = $n$addr$0$lcssa52;$s$2 = $s$0$lcssa51;
   } else {
    $mul = Math_imul($conv1, 16843009)|0;
    $cmp1128 = ($n$addr$0$lcssa52>>>0)>(3);
    L11: do {
     if ($cmp1128) {
      $n$addr$129 = $n$addr$0$lcssa52;$w$030 = $s$0$lcssa51;
      while(1) {
       $6 = HEAP32[$w$030>>2]|0;
       $xor = $6 ^ $mul;
       $sub = (($xor) + -16843009)|0;
       $neg = $xor & -2139062144;
       $and15 = $neg ^ -2139062144;
       $and16 = $and15 & $sub;
       $lnot = ($and16|0)==(0);
       if (!($lnot)) {
        $n$addr$1$lcssa = $n$addr$129;$w$0$lcssa = $w$030;
        break L11;
       }
       $incdec$ptr21 = (($w$030) + 4|0);
       $sub22 = (($n$addr$129) + -4)|0;
       $cmp11 = ($sub22>>>0)>(3);
       if ($cmp11) {
        $n$addr$129 = $sub22;$w$030 = $incdec$ptr21;
       } else {
        $n$addr$1$lcssa = $sub22;$w$0$lcssa = $incdec$ptr21;
        break;
       }
      }
     } else {
      $n$addr$1$lcssa = $n$addr$0$lcssa52;$w$0$lcssa = $s$0$lcssa51;
     }
    } while(0);
    $tobool2524 = ($n$addr$1$lcssa|0)==(0);
    if ($tobool2524) {
     $n$addr$3 = 0;$s$2 = $w$0$lcssa;
    } else {
     $n$addr$225 = $n$addr$1$lcssa;$s$126 = $w$0$lcssa;
     while(1) {
      $7 = HEAP8[$s$126>>0]|0;
      $cmp28 = ($7<<24>>24)==($5<<24>>24);
      if ($cmp28) {
       $n$addr$3 = $n$addr$225;$s$2 = $s$126;
       break L8;
      }
      $incdec$ptr33 = (($s$126) + 1|0);
      $dec34 = (($n$addr$225) + -1)|0;
      $tobool25 = ($dec34|0)==(0);
      if ($tobool25) {
       $n$addr$3 = 0;$s$2 = $incdec$ptr33;
       break;
      } else {
       $n$addr$225 = $dec34;$s$126 = $incdec$ptr33;
      }
     }
    }
   }
  }
 } while(0);
 $tobool36 = ($n$addr$3|0)!=(0);
 $cond = $tobool36 ? $s$2 : 0;
 STACKTOP = sp;return ($cond|0);
}
function runPostSets() {
 
}
function _i64Subtract(a, b, c, d) {
    a = a|0; b = b|0; c = c|0; d = d|0;
    var l = 0, h = 0;
    l = (a - c)>>>0;
    h = (b - d)>>>0;
    h = (b - d - (((c>>>0) > (a>>>0))|0))>>>0; // Borrow one from high word to low word on underflow.
    return ((tempRet0 = h,l|0)|0);
}
function _memset(ptr, value, num) {
    ptr = ptr|0; value = value|0; num = num|0;
    var stop = 0, value4 = 0, stop4 = 0, unaligned = 0;
    stop = (ptr + num)|0;
    if ((num|0) >= 20) {
      // This is unaligned, but quite large, so work hard to get to aligned settings
      value = value & 0xff;
      unaligned = ptr & 3;
      value4 = value | (value << 8) | (value << 16) | (value << 24);
      stop4 = stop & ~3;
      if (unaligned) {
        unaligned = (ptr + 4 - unaligned)|0;
        while ((ptr|0) < (unaligned|0)) { // no need to check for stop, since we have large num
          HEAP8[((ptr)>>0)]=value;
          ptr = (ptr+1)|0;
        }
      }
      while ((ptr|0) < (stop4|0)) {
        HEAP32[((ptr)>>2)]=value4;
        ptr = (ptr+4)|0;
      }
    }
    while ((ptr|0) < (stop|0)) {
      HEAP8[((ptr)>>0)]=value;
      ptr = (ptr+1)|0;
    }
    return (ptr-num)|0;
}
function _strlen(ptr) {
    ptr = ptr|0;
    var curr = 0;
    curr = ptr;
    while (((HEAP8[((curr)>>0)])|0)) {
      curr = (curr + 1)|0;
    }
    return (curr - ptr)|0;
}
function _i64Add(a, b, c, d) {
    /*
      x = a + b*2^32
      y = c + d*2^32
      result = l + h*2^32
    */
    a = a|0; b = b|0; c = c|0; d = d|0;
    var l = 0, h = 0;
    l = (a + c)>>>0;
    h = (b + d + (((l>>>0) < (a>>>0))|0))>>>0; // Add carry from low word to high word on overflow.
    return ((tempRet0 = h,l|0)|0);
}
function _bitshift64Lshr(low, high, bits) {
    low = low|0; high = high|0; bits = bits|0;
    var ander = 0;
    if ((bits|0) < 32) {
      ander = ((1 << bits) - 1)|0;
      tempRet0 = high >>> bits;
      return (low >>> bits) | ((high&ander) << (32 - bits));
    }
    tempRet0 = 0;
    return (high >>> (bits - 32))|0;
}
function _memcpy(dest, src, num) {

    dest = dest|0; src = src|0; num = num|0;
    var ret = 0;
    if ((num|0) >= 4096) return _emscripten_memcpy_big(dest|0, src|0, num|0)|0;
    ret = dest|0;
    if ((dest&3) == (src&3)) {
      while (dest & 3) {
        if ((num|0) == 0) return ret|0;
        HEAP8[((dest)>>0)]=((HEAP8[((src)>>0)])|0);
        dest = (dest+1)|0;
        src = (src+1)|0;
        num = (num-1)|0;
      }
      while ((num|0) >= 4) {
        HEAP32[((dest)>>2)]=((HEAP32[((src)>>2)])|0);
        dest = (dest+4)|0;
        src = (src+4)|0;
        num = (num-4)|0;
      }
    }
    while ((num|0) > 0) {
      HEAP8[((dest)>>0)]=((HEAP8[((src)>>0)])|0);
      dest = (dest+1)|0;
      src = (src+1)|0;
      num = (num-1)|0;
    }
    return ret|0;
}
function _bitshift64Shl(low, high, bits) {
    low = low|0; high = high|0; bits = bits|0;
    var ander = 0;
    if ((bits|0) < 32) {
      ander = ((1 << bits) - 1)|0;
      tempRet0 = (high << bits) | ((low&(ander << (32 - bits))) >>> (32 - bits));
      return low << bits;
    }
    tempRet0 = low << (bits - 32);
    return 0;
}
function _memmove(dest, src, num) {
    dest = dest|0; src = src|0; num = num|0;
    var ret = 0;
    if (((src|0) < (dest|0)) & ((dest|0) < ((src + num)|0))) {
      // Unlikely case: Copy backwards in a safe manner
      ret = dest;
      src = (src + num)|0;
      dest = (dest + num)|0;
      while ((num|0) > 0) {
        dest = (dest - 1)|0;
        src = (src - 1)|0;
        num = (num - 1)|0;
        HEAP8[((dest)>>0)]=((HEAP8[((src)>>0)])|0);
      }
      dest = ret;
    } else {
      _memcpy(dest, src, num) | 0;
    }
    return dest | 0;
}
function _bitshift64Ashr(low, high, bits) {
    low = low|0; high = high|0; bits = bits|0;
    var ander = 0;
    if ((bits|0) < 32) {
      ander = ((1 << bits) - 1)|0;
      tempRet0 = high >> bits;
      return (low >>> bits) | ((high&ander) << (32 - bits));
    }
    tempRet0 = (high|0) < 0 ? -1 : 0;
    return (high >> (bits - 32))|0;
  }
function _llvm_ctlz_i32(x) {
    x = x|0;
    var ret = 0;
    ret = ((HEAP8[(((ctlz_i8)+(x >>> 24))>>0)])|0);
    if ((ret|0) < 8) return ret|0;
    ret = ((HEAP8[(((ctlz_i8)+((x >> 16)&0xff))>>0)])|0);
    if ((ret|0) < 8) return (ret + 8)|0;
    ret = ((HEAP8[(((ctlz_i8)+((x >> 8)&0xff))>>0)])|0);
    if ((ret|0) < 8) return (ret + 16)|0;
    return (((HEAP8[(((ctlz_i8)+(x&0xff))>>0)])|0) + 24)|0;
  }

function _llvm_cttz_i32(x) {
    x = x|0;
    var ret = 0;
    ret = ((HEAP8[(((cttz_i8)+(x & 0xff))>>0)])|0);
    if ((ret|0) < 8) return ret|0;
    ret = ((HEAP8[(((cttz_i8)+((x >> 8)&0xff))>>0)])|0);
    if ((ret|0) < 8) return (ret + 8)|0;
    ret = ((HEAP8[(((cttz_i8)+((x >> 16)&0xff))>>0)])|0);
    if ((ret|0) < 8) return (ret + 16)|0;
    return (((HEAP8[(((cttz_i8)+(x >>> 24))>>0)])|0) + 24)|0;
  }

// ======== compiled code from system/lib/compiler-rt , see readme therein
function ___muldsi3($a, $b) {
  $a = $a | 0;
  $b = $b | 0;
  var $1 = 0, $2 = 0, $3 = 0, $6 = 0, $8 = 0, $11 = 0, $12 = 0;
  $1 = $a & 65535;
  $2 = $b & 65535;
  $3 = Math_imul($2, $1) | 0;
  $6 = $a >>> 16;
  $8 = ($3 >>> 16) + (Math_imul($2, $6) | 0) | 0;
  $11 = $b >>> 16;
  $12 = Math_imul($11, $1) | 0;
  return (tempRet0 = (($8 >>> 16) + (Math_imul($11, $6) | 0) | 0) + ((($8 & 65535) + $12 | 0) >>> 16) | 0, 0 | ($8 + $12 << 16 | $3 & 65535)) | 0;
}
function ___divdi3($a$0, $a$1, $b$0, $b$1) {
  $a$0 = $a$0 | 0;
  $a$1 = $a$1 | 0;
  $b$0 = $b$0 | 0;
  $b$1 = $b$1 | 0;
  var $1$0 = 0, $1$1 = 0, $2$0 = 0, $2$1 = 0, $4$0 = 0, $4$1 = 0, $6$0 = 0, $7$0 = 0, $7$1 = 0, $8$0 = 0, $10$0 = 0;
  $1$0 = $a$1 >> 31 | (($a$1 | 0) < 0 ? -1 : 0) << 1;
  $1$1 = (($a$1 | 0) < 0 ? -1 : 0) >> 31 | (($a$1 | 0) < 0 ? -1 : 0) << 1;
  $2$0 = $b$1 >> 31 | (($b$1 | 0) < 0 ? -1 : 0) << 1;
  $2$1 = (($b$1 | 0) < 0 ? -1 : 0) >> 31 | (($b$1 | 0) < 0 ? -1 : 0) << 1;
  $4$0 = _i64Subtract($1$0 ^ $a$0, $1$1 ^ $a$1, $1$0, $1$1) | 0;
  $4$1 = tempRet0;
  $6$0 = _i64Subtract($2$0 ^ $b$0, $2$1 ^ $b$1, $2$0, $2$1) | 0;
  $7$0 = $2$0 ^ $1$0;
  $7$1 = $2$1 ^ $1$1;
  $8$0 = ___udivmoddi4($4$0, $4$1, $6$0, tempRet0, 0) | 0;
  $10$0 = _i64Subtract($8$0 ^ $7$0, tempRet0 ^ $7$1, $7$0, $7$1) | 0;
  return (tempRet0 = tempRet0, $10$0) | 0;
}
function ___remdi3($a$0, $a$1, $b$0, $b$1) {
  $a$0 = $a$0 | 0;
  $a$1 = $a$1 | 0;
  $b$0 = $b$0 | 0;
  $b$1 = $b$1 | 0;
  var $rem = 0, $1$0 = 0, $1$1 = 0, $2$0 = 0, $2$1 = 0, $4$0 = 0, $4$1 = 0, $6$0 = 0, $10$0 = 0, $10$1 = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  $rem = __stackBase__ | 0;
  $1$0 = $a$1 >> 31 | (($a$1 | 0) < 0 ? -1 : 0) << 1;
  $1$1 = (($a$1 | 0) < 0 ? -1 : 0) >> 31 | (($a$1 | 0) < 0 ? -1 : 0) << 1;
  $2$0 = $b$1 >> 31 | (($b$1 | 0) < 0 ? -1 : 0) << 1;
  $2$1 = (($b$1 | 0) < 0 ? -1 : 0) >> 31 | (($b$1 | 0) < 0 ? -1 : 0) << 1;
  $4$0 = _i64Subtract($1$0 ^ $a$0, $1$1 ^ $a$1, $1$0, $1$1) | 0;
  $4$1 = tempRet0;
  $6$0 = _i64Subtract($2$0 ^ $b$0, $2$1 ^ $b$1, $2$0, $2$1) | 0;
  ___udivmoddi4($4$0, $4$1, $6$0, tempRet0, $rem) | 0;
  $10$0 = _i64Subtract(HEAP32[$rem >> 2] ^ $1$0, HEAP32[$rem + 4 >> 2] ^ $1$1, $1$0, $1$1) | 0;
  $10$1 = tempRet0;
  STACKTOP = __stackBase__;
  return (tempRet0 = $10$1, $10$0) | 0;
}
function ___muldi3($a$0, $a$1, $b$0, $b$1) {
  $a$0 = $a$0 | 0;
  $a$1 = $a$1 | 0;
  $b$0 = $b$0 | 0;
  $b$1 = $b$1 | 0;
  var $x_sroa_0_0_extract_trunc = 0, $y_sroa_0_0_extract_trunc = 0, $1$0 = 0, $1$1 = 0, $2 = 0;
  $x_sroa_0_0_extract_trunc = $a$0;
  $y_sroa_0_0_extract_trunc = $b$0;
  $1$0 = ___muldsi3($x_sroa_0_0_extract_trunc, $y_sroa_0_0_extract_trunc) | 0;
  $1$1 = tempRet0;
  $2 = Math_imul($a$1, $y_sroa_0_0_extract_trunc) | 0;
  return (tempRet0 = ((Math_imul($b$1, $x_sroa_0_0_extract_trunc) | 0) + $2 | 0) + $1$1 | $1$1 & 0, 0 | $1$0 & -1) | 0;
}
function ___udivdi3($a$0, $a$1, $b$0, $b$1) {
  $a$0 = $a$0 | 0;
  $a$1 = $a$1 | 0;
  $b$0 = $b$0 | 0;
  $b$1 = $b$1 | 0;
  var $1$0 = 0;
  $1$0 = ___udivmoddi4($a$0, $a$1, $b$0, $b$1, 0) | 0;
  return (tempRet0 = tempRet0, $1$0) | 0;
}
function ___uremdi3($a$0, $a$1, $b$0, $b$1) {
  $a$0 = $a$0 | 0;
  $a$1 = $a$1 | 0;
  $b$0 = $b$0 | 0;
  $b$1 = $b$1 | 0;
  var $rem = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  $rem = __stackBase__ | 0;
  ___udivmoddi4($a$0, $a$1, $b$0, $b$1, $rem) | 0;
  STACKTOP = __stackBase__;
  return (tempRet0 = HEAP32[$rem + 4 >> 2] | 0, HEAP32[$rem >> 2] | 0) | 0;
}
function ___udivmoddi4($a$0, $a$1, $b$0, $b$1, $rem) {
  $a$0 = $a$0 | 0;
  $a$1 = $a$1 | 0;
  $b$0 = $b$0 | 0;
  $b$1 = $b$1 | 0;
  $rem = $rem | 0;
  var $n_sroa_0_0_extract_trunc = 0, $n_sroa_1_4_extract_shift$0 = 0, $n_sroa_1_4_extract_trunc = 0, $d_sroa_0_0_extract_trunc = 0, $d_sroa_1_4_extract_shift$0 = 0, $d_sroa_1_4_extract_trunc = 0, $4 = 0, $17 = 0, $37 = 0, $49 = 0, $51 = 0, $57 = 0, $58 = 0, $66 = 0, $78 = 0, $86 = 0, $88 = 0, $89 = 0, $91 = 0, $92 = 0, $95 = 0, $105 = 0, $117 = 0, $119 = 0, $125 = 0, $126 = 0, $130 = 0, $q_sroa_1_1_ph = 0, $q_sroa_0_1_ph = 0, $r_sroa_1_1_ph = 0, $r_sroa_0_1_ph = 0, $sr_1_ph = 0, $d_sroa_0_0_insert_insert99$0 = 0, $d_sroa_0_0_insert_insert99$1 = 0, $137$0 = 0, $137$1 = 0, $carry_0203 = 0, $sr_1202 = 0, $r_sroa_0_1201 = 0, $r_sroa_1_1200 = 0, $q_sroa_0_1199 = 0, $q_sroa_1_1198 = 0, $147 = 0, $149 = 0, $r_sroa_0_0_insert_insert42$0 = 0, $r_sroa_0_0_insert_insert42$1 = 0, $150$1 = 0, $151$0 = 0, $152 = 0, $154$0 = 0, $r_sroa_0_0_extract_trunc = 0, $r_sroa_1_4_extract_trunc = 0, $155 = 0, $carry_0_lcssa$0 = 0, $carry_0_lcssa$1 = 0, $r_sroa_0_1_lcssa = 0, $r_sroa_1_1_lcssa = 0, $q_sroa_0_1_lcssa = 0, $q_sroa_1_1_lcssa = 0, $q_sroa_0_0_insert_ext75$0 = 0, $q_sroa_0_0_insert_ext75$1 = 0, $q_sroa_0_0_insert_insert77$1 = 0, $_0$0 = 0, $_0$1 = 0;
  $n_sroa_0_0_extract_trunc = $a$0;
  $n_sroa_1_4_extract_shift$0 = $a$1;
  $n_sroa_1_4_extract_trunc = $n_sroa_1_4_extract_shift$0;
  $d_sroa_0_0_extract_trunc = $b$0;
  $d_sroa_1_4_extract_shift$0 = $b$1;
  $d_sroa_1_4_extract_trunc = $d_sroa_1_4_extract_shift$0;
  if (($n_sroa_1_4_extract_trunc | 0) == 0) {
    $4 = ($rem | 0) != 0;
    if (($d_sroa_1_4_extract_trunc | 0) == 0) {
      if ($4) {
        HEAP32[$rem >> 2] = ($n_sroa_0_0_extract_trunc >>> 0) % ($d_sroa_0_0_extract_trunc >>> 0);
        HEAP32[$rem + 4 >> 2] = 0;
      }
      $_0$1 = 0;
      $_0$0 = ($n_sroa_0_0_extract_trunc >>> 0) / ($d_sroa_0_0_extract_trunc >>> 0) >>> 0;
      return (tempRet0 = $_0$1, $_0$0) | 0;
    } else {
      if (!$4) {
        $_0$1 = 0;
        $_0$0 = 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
      HEAP32[$rem >> 2] = $a$0 & -1;
      HEAP32[$rem + 4 >> 2] = $a$1 & 0;
      $_0$1 = 0;
      $_0$0 = 0;
      return (tempRet0 = $_0$1, $_0$0) | 0;
    }
  }
  $17 = ($d_sroa_1_4_extract_trunc | 0) == 0;
  do {
    if (($d_sroa_0_0_extract_trunc | 0) == 0) {
      if ($17) {
        if (($rem | 0) != 0) {
          HEAP32[$rem >> 2] = ($n_sroa_1_4_extract_trunc >>> 0) % ($d_sroa_0_0_extract_trunc >>> 0);
          HEAP32[$rem + 4 >> 2] = 0;
        }
        $_0$1 = 0;
        $_0$0 = ($n_sroa_1_4_extract_trunc >>> 0) / ($d_sroa_0_0_extract_trunc >>> 0) >>> 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
      if (($n_sroa_0_0_extract_trunc | 0) == 0) {
        if (($rem | 0) != 0) {
          HEAP32[$rem >> 2] = 0;
          HEAP32[$rem + 4 >> 2] = ($n_sroa_1_4_extract_trunc >>> 0) % ($d_sroa_1_4_extract_trunc >>> 0);
        }
        $_0$1 = 0;
        $_0$0 = ($n_sroa_1_4_extract_trunc >>> 0) / ($d_sroa_1_4_extract_trunc >>> 0) >>> 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
      $37 = $d_sroa_1_4_extract_trunc - 1 | 0;
      if (($37 & $d_sroa_1_4_extract_trunc | 0) == 0) {
        if (($rem | 0) != 0) {
          HEAP32[$rem >> 2] = 0 | $a$0 & -1;
          HEAP32[$rem + 4 >> 2] = $37 & $n_sroa_1_4_extract_trunc | $a$1 & 0;
        }
        $_0$1 = 0;
        $_0$0 = $n_sroa_1_4_extract_trunc >>> ((_llvm_cttz_i32($d_sroa_1_4_extract_trunc | 0) | 0) >>> 0);
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
      $49 = _llvm_ctlz_i32($d_sroa_1_4_extract_trunc | 0) | 0;
      $51 = $49 - (_llvm_ctlz_i32($n_sroa_1_4_extract_trunc | 0) | 0) | 0;
      if ($51 >>> 0 <= 30) {
        $57 = $51 + 1 | 0;
        $58 = 31 - $51 | 0;
        $sr_1_ph = $57;
        $r_sroa_0_1_ph = $n_sroa_1_4_extract_trunc << $58 | $n_sroa_0_0_extract_trunc >>> ($57 >>> 0);
        $r_sroa_1_1_ph = $n_sroa_1_4_extract_trunc >>> ($57 >>> 0);
        $q_sroa_0_1_ph = 0;
        $q_sroa_1_1_ph = $n_sroa_0_0_extract_trunc << $58;
        break;
      }
      if (($rem | 0) == 0) {
        $_0$1 = 0;
        $_0$0 = 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
      HEAP32[$rem >> 2] = 0 | $a$0 & -1;
      HEAP32[$rem + 4 >> 2] = $n_sroa_1_4_extract_shift$0 | $a$1 & 0;
      $_0$1 = 0;
      $_0$0 = 0;
      return (tempRet0 = $_0$1, $_0$0) | 0;
    } else {
      if (!$17) {
        $117 = _llvm_ctlz_i32($d_sroa_1_4_extract_trunc | 0) | 0;
        $119 = $117 - (_llvm_ctlz_i32($n_sroa_1_4_extract_trunc | 0) | 0) | 0;
        if ($119 >>> 0 <= 31) {
          $125 = $119 + 1 | 0;
          $126 = 31 - $119 | 0;
          $130 = $119 - 31 >> 31;
          $sr_1_ph = $125;
          $r_sroa_0_1_ph = $n_sroa_0_0_extract_trunc >>> ($125 >>> 0) & $130 | $n_sroa_1_4_extract_trunc << $126;
          $r_sroa_1_1_ph = $n_sroa_1_4_extract_trunc >>> ($125 >>> 0) & $130;
          $q_sroa_0_1_ph = 0;
          $q_sroa_1_1_ph = $n_sroa_0_0_extract_trunc << $126;
          break;
        }
        if (($rem | 0) == 0) {
          $_0$1 = 0;
          $_0$0 = 0;
          return (tempRet0 = $_0$1, $_0$0) | 0;
        }
        HEAP32[$rem >> 2] = 0 | $a$0 & -1;
        HEAP32[$rem + 4 >> 2] = $n_sroa_1_4_extract_shift$0 | $a$1 & 0;
        $_0$1 = 0;
        $_0$0 = 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
      $66 = $d_sroa_0_0_extract_trunc - 1 | 0;
      if (($66 & $d_sroa_0_0_extract_trunc | 0) != 0) {
        $86 = (_llvm_ctlz_i32($d_sroa_0_0_extract_trunc | 0) | 0) + 33 | 0;
        $88 = $86 - (_llvm_ctlz_i32($n_sroa_1_4_extract_trunc | 0) | 0) | 0;
        $89 = 64 - $88 | 0;
        $91 = 32 - $88 | 0;
        $92 = $91 >> 31;
        $95 = $88 - 32 | 0;
        $105 = $95 >> 31;
        $sr_1_ph = $88;
        $r_sroa_0_1_ph = $91 - 1 >> 31 & $n_sroa_1_4_extract_trunc >>> ($95 >>> 0) | ($n_sroa_1_4_extract_trunc << $91 | $n_sroa_0_0_extract_trunc >>> ($88 >>> 0)) & $105;
        $r_sroa_1_1_ph = $105 & $n_sroa_1_4_extract_trunc >>> ($88 >>> 0);
        $q_sroa_0_1_ph = $n_sroa_0_0_extract_trunc << $89 & $92;
        $q_sroa_1_1_ph = ($n_sroa_1_4_extract_trunc << $89 | $n_sroa_0_0_extract_trunc >>> ($95 >>> 0)) & $92 | $n_sroa_0_0_extract_trunc << $91 & $88 - 33 >> 31;
        break;
      }
      if (($rem | 0) != 0) {
        HEAP32[$rem >> 2] = $66 & $n_sroa_0_0_extract_trunc;
        HEAP32[$rem + 4 >> 2] = 0;
      }
      if (($d_sroa_0_0_extract_trunc | 0) == 1) {
        $_0$1 = $n_sroa_1_4_extract_shift$0 | $a$1 & 0;
        $_0$0 = 0 | $a$0 & -1;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      } else {
        $78 = _llvm_cttz_i32($d_sroa_0_0_extract_trunc | 0) | 0;
        $_0$1 = 0 | $n_sroa_1_4_extract_trunc >>> ($78 >>> 0);
        $_0$0 = $n_sroa_1_4_extract_trunc << 32 - $78 | $n_sroa_0_0_extract_trunc >>> ($78 >>> 0) | 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
    }
  } while (0);
  if (($sr_1_ph | 0) == 0) {
    $q_sroa_1_1_lcssa = $q_sroa_1_1_ph;
    $q_sroa_0_1_lcssa = $q_sroa_0_1_ph;
    $r_sroa_1_1_lcssa = $r_sroa_1_1_ph;
    $r_sroa_0_1_lcssa = $r_sroa_0_1_ph;
    $carry_0_lcssa$1 = 0;
    $carry_0_lcssa$0 = 0;
  } else {
    $d_sroa_0_0_insert_insert99$0 = 0 | $b$0 & -1;
    $d_sroa_0_0_insert_insert99$1 = $d_sroa_1_4_extract_shift$0 | $b$1 & 0;
    $137$0 = _i64Add($d_sroa_0_0_insert_insert99$0, $d_sroa_0_0_insert_insert99$1, -1, -1) | 0;
    $137$1 = tempRet0;
    $q_sroa_1_1198 = $q_sroa_1_1_ph;
    $q_sroa_0_1199 = $q_sroa_0_1_ph;
    $r_sroa_1_1200 = $r_sroa_1_1_ph;
    $r_sroa_0_1201 = $r_sroa_0_1_ph;
    $sr_1202 = $sr_1_ph;
    $carry_0203 = 0;
    while (1) {
      $147 = $q_sroa_0_1199 >>> 31 | $q_sroa_1_1198 << 1;
      $149 = $carry_0203 | $q_sroa_0_1199 << 1;
      $r_sroa_0_0_insert_insert42$0 = 0 | ($r_sroa_0_1201 << 1 | $q_sroa_1_1198 >>> 31);
      $r_sroa_0_0_insert_insert42$1 = $r_sroa_0_1201 >>> 31 | $r_sroa_1_1200 << 1 | 0;
      _i64Subtract($137$0, $137$1, $r_sroa_0_0_insert_insert42$0, $r_sroa_0_0_insert_insert42$1) | 0;
      $150$1 = tempRet0;
      $151$0 = $150$1 >> 31 | (($150$1 | 0) < 0 ? -1 : 0) << 1;
      $152 = $151$0 & 1;
      $154$0 = _i64Subtract($r_sroa_0_0_insert_insert42$0, $r_sroa_0_0_insert_insert42$1, $151$0 & $d_sroa_0_0_insert_insert99$0, ((($150$1 | 0) < 0 ? -1 : 0) >> 31 | (($150$1 | 0) < 0 ? -1 : 0) << 1) & $d_sroa_0_0_insert_insert99$1) | 0;
      $r_sroa_0_0_extract_trunc = $154$0;
      $r_sroa_1_4_extract_trunc = tempRet0;
      $155 = $sr_1202 - 1 | 0;
      if (($155 | 0) == 0) {
        break;
      } else {
        $q_sroa_1_1198 = $147;
        $q_sroa_0_1199 = $149;
        $r_sroa_1_1200 = $r_sroa_1_4_extract_trunc;
        $r_sroa_0_1201 = $r_sroa_0_0_extract_trunc;
        $sr_1202 = $155;
        $carry_0203 = $152;
      }
    }
    $q_sroa_1_1_lcssa = $147;
    $q_sroa_0_1_lcssa = $149;
    $r_sroa_1_1_lcssa = $r_sroa_1_4_extract_trunc;
    $r_sroa_0_1_lcssa = $r_sroa_0_0_extract_trunc;
    $carry_0_lcssa$1 = 0;
    $carry_0_lcssa$0 = $152;
  }
  $q_sroa_0_0_insert_ext75$0 = $q_sroa_0_1_lcssa;
  $q_sroa_0_0_insert_ext75$1 = 0;
  $q_sroa_0_0_insert_insert77$1 = $q_sroa_1_1_lcssa | $q_sroa_0_0_insert_ext75$1;
  if (($rem | 0) != 0) {
    HEAP32[$rem >> 2] = 0 | $r_sroa_0_1_lcssa;
    HEAP32[$rem + 4 >> 2] = $r_sroa_1_1_lcssa | 0;
  }
  $_0$1 = (0 | $q_sroa_0_0_insert_ext75$0) >>> 31 | $q_sroa_0_0_insert_insert77$1 << 1 | ($q_sroa_0_0_insert_ext75$1 << 1 | $q_sroa_0_0_insert_ext75$0 >>> 31) & 0 | $carry_0_lcssa$1;
  $_0$0 = ($q_sroa_0_0_insert_ext75$0 << 1 | 0 >>> 31) & -2 | $carry_0_lcssa$0;
  return (tempRet0 = $_0$1, $_0$0) | 0;
}
// =======================================================================



// EMSCRIPTEN_END_FUNCS

    
    function dynCall_iiiiiiii(index,a1,a2,a3,a4,a5,a6,a7) {
      index = index|0;
      a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0; a7=a7|0;
      return FUNCTION_TABLE_iiiiiiii[index&511](a1|0,a2|0,a3|0,a4|0,a5|0,a6|0,a7|0)|0;
    }
  

    function dynCall_viiiii(index,a1,a2,a3,a4,a5) {
      index = index|0;
      a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0;
      FUNCTION_TABLE_viiiii[index&511](a1|0,a2|0,a3|0,a4|0,a5|0);
    }
  

    function dynCall_vi(index,a1) {
      index = index|0;
      a1=a1|0;
      FUNCTION_TABLE_vi[index&511](a1|0);
    }
  

    function dynCall_vii(index,a1,a2) {
      index = index|0;
      a1=a1|0; a2=a2|0;
      FUNCTION_TABLE_vii[index&511](a1|0,a2|0);
    }
  

    function dynCall_ii(index,a1) {
      index = index|0;
      a1=a1|0;
      return FUNCTION_TABLE_ii[index&511](a1|0)|0;
    }
  

    function dynCall_iiiiiiiiiiii(index,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11) {
      index = index|0;
      a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0; a7=a7|0; a8=a8|0; a9=a9|0; a10=a10|0; a11=a11|0;
      return FUNCTION_TABLE_iiiiiiiiiiii[index&511](a1|0,a2|0,a3|0,a4|0,a5|0,a6|0,a7|0,a8|0,a9|0,a10|0,a11|0)|0;
    }
  

    function dynCall_iiii(index,a1,a2,a3) {
      index = index|0;
      a1=a1|0; a2=a2|0; a3=a3|0;
      return FUNCTION_TABLE_iiii[index&511](a1|0,a2|0,a3|0)|0;
    }
  

    function dynCall_viiiiiiiiiiiiiii(index,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11,a12,a13,a14,a15) {
      index = index|0;
      a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0; a7=a7|0; a8=a8|0; a9=a9|0; a10=a10|0; a11=a11|0; a12=a12|0; a13=a13|0; a14=a14|0; a15=a15|0;
      FUNCTION_TABLE_viiiiiiiiiiiiiii[index&511](a1|0,a2|0,a3|0,a4|0,a5|0,a6|0,a7|0,a8|0,a9|0,a10|0,a11|0,a12|0,a13|0,a14|0,a15|0);
    }
  

    function dynCall_viiiiid(index,a1,a2,a3,a4,a5,a6) {
      index = index|0;
      a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=+a6;
      FUNCTION_TABLE_viiiiid[index&255](a1|0,a2|0,a3|0,a4|0,a5|0,+a6);
    }
  

    function dynCall_viiiiiiii(index,a1,a2,a3,a4,a5,a6,a7,a8) {
      index = index|0;
      a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0; a7=a7|0; a8=a8|0;
      FUNCTION_TABLE_viiiiiiii[index&255](a1|0,a2|0,a3|0,a4|0,a5|0,a6|0,a7|0,a8|0);
    }
  

    function dynCall_viiiiii(index,a1,a2,a3,a4,a5,a6) {
      index = index|0;
      a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0;
      FUNCTION_TABLE_viiiiii[index&511](a1|0,a2|0,a3|0,a4|0,a5|0,a6|0);
    }
  

    function dynCall_viiiiiii(index,a1,a2,a3,a4,a5,a6,a7) {
      index = index|0;
      a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0; a7=a7|0;
      FUNCTION_TABLE_viiiiiii[index&511](a1|0,a2|0,a3|0,a4|0,a5|0,a6|0,a7|0);
    }
  

    function dynCall_viiiiiid(index,a1,a2,a3,a4,a5,a6,a7) {
      index = index|0;
      a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0; a7=+a7;
      FUNCTION_TABLE_viiiiiid[index&255](a1|0,a2|0,a3|0,a4|0,a5|0,a6|0,+a7);
    }
  

    function dynCall_viiiiiiiii(index,a1,a2,a3,a4,a5,a6,a7,a8,a9) {
      index = index|0;
      a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0; a7=a7|0; a8=a8|0; a9=a9|0;
      FUNCTION_TABLE_viiiiiiiii[index&255](a1|0,a2|0,a3|0,a4|0,a5|0,a6|0,a7|0,a8|0,a9|0);
    }
  

    function dynCall_viiiiiiiiii(index,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10) {
      index = index|0;
      a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0; a7=a7|0; a8=a8|0; a9=a9|0; a10=a10|0;
      FUNCTION_TABLE_viiiiiiiiii[index&511](a1|0,a2|0,a3|0,a4|0,a5|0,a6|0,a7|0,a8|0,a9|0,a10|0);
    }
  

    function dynCall_iii(index,a1,a2) {
      index = index|0;
      a1=a1|0; a2=a2|0;
      return FUNCTION_TABLE_iii[index&511](a1|0,a2|0)|0;
    }
  

    function dynCall_iiiiii(index,a1,a2,a3,a4,a5) {
      index = index|0;
      a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0;
      return FUNCTION_TABLE_iiiiii[index&511](a1|0,a2|0,a3|0,a4|0,a5|0)|0;
    }
  

    function dynCall_diii(index,a1,a2,a3) {
      index = index|0;
      a1=a1|0; a2=a2|0; a3=a3|0;
      return +FUNCTION_TABLE_diii[index&511](a1|0,a2|0,a3|0);
    }
  

    function dynCall_i(index) {
      index = index|0;
      
      return FUNCTION_TABLE_i[index&511]()|0;
    }
  

    function dynCall_iiiii(index,a1,a2,a3,a4) {
      index = index|0;
      a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0;
      return FUNCTION_TABLE_iiiii[index&511](a1|0,a2|0,a3|0,a4|0)|0;
    }
  

    function dynCall_viii(index,a1,a2,a3) {
      index = index|0;
      a1=a1|0; a2=a2|0; a3=a3|0;
      FUNCTION_TABLE_viii[index&511](a1|0,a2|0,a3|0);
    }
  

    function dynCall_v(index) {
      index = index|0;
      
      FUNCTION_TABLE_v[index&511]();
    }
  

    function dynCall_iiiiiiiii(index,a1,a2,a3,a4,a5,a6,a7,a8) {
      index = index|0;
      a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0; a7=a7|0; a8=a8|0;
      return FUNCTION_TABLE_iiiiiiiii[index&511](a1|0,a2|0,a3|0,a4|0,a5|0,a6|0,a7|0,a8|0)|0;
    }
  

    function dynCall_viiii(index,a1,a2,a3,a4) {
      index = index|0;
      a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0;
      FUNCTION_TABLE_viiii[index&511](a1|0,a2|0,a3|0,a4|0);
    }
  
function b0(p0,p1,p2,p3,p4,p5,p6) { p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0;p6 = p6|0; nullFunc_iiiiiiii(0);return 0; }
  function b1(p0,p1,p2,p3,p4) { p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(1); }
  function b2(p0) { p0 = p0|0; nullFunc_vi(2); }
  function _freelocale__wrapper(p0) { p0 = p0|0; _freelocale(p0|0); }
  function b3(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_vii(3); }
  function b4(p0) { p0 = p0|0; nullFunc_ii(4);return 0; }
  function _pthread_mutex_unlock__wrapper(p0) { p0 = p0|0; return _pthread_mutex_unlock(p0|0)|0; }
  function _pthread_mutex_lock__wrapper(p0) { p0 = p0|0; return _pthread_mutex_lock(p0|0)|0; }
  function _pthread_cond_broadcast__wrapper(p0) { p0 = p0|0; return _pthread_cond_broadcast(p0|0)|0; }
  function _uselocale__wrapper(p0) { p0 = p0|0; return _uselocale(p0|0)|0; }
  function b5(p0,p1,p2,p3,p4,p5,p6,p7,p8,p9,p10) { p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0;p6 = p6|0;p7 = p7|0;p8 = p8|0;p9 = p9|0;p10 = p10|0; nullFunc_iiiiiiiiiiii(5);return 0; }
  function b6(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(6);return 0; }
  function _newlocale__wrapper(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; return _newlocale(p0|0,p1|0,p2|0)|0; }
  function b7(p0,p1,p2,p3,p4,p5,p6,p7,p8,p9,p10,p11,p12,p13,p14) { p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0;p6 = p6|0;p7 = p7|0;p8 = p8|0;p9 = p9|0;p10 = p10|0;p11 = p11|0;p12 = p12|0;p13 = p13|0;p14 = p14|0; nullFunc_viiiiiiiiiiiiiii(7); }
  function b8(p0,p1,p2,p3,p4,p5) { p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = +p5; nullFunc_viiiiid(8); }
  function b9(p0,p1,p2,p3,p4,p5,p6,p7) { p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0;p6 = p6|0;p7 = p7|0; nullFunc_viiiiiiii(9); }
  function b10(p0,p1,p2,p3,p4,p5) { p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_viiiiii(10); }
  function b11(p0,p1,p2,p3,p4,p5,p6) { p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0;p6 = p6|0; nullFunc_viiiiiii(11); }
  function b12(p0,p1,p2,p3,p4,p5,p6) { p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0;p6 = +p6; nullFunc_viiiiiid(12); }
  function b13(p0,p1,p2,p3,p4,p5,p6,p7,p8) { p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0;p6 = p6|0;p7 = p7|0;p8 = p8|0; nullFunc_viiiiiiiii(13); }
  function b14(p0,p1,p2,p3,p4,p5,p6,p7,p8,p9) { p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0;p6 = p6|0;p7 = p7|0;p8 = p8|0;p9 = p9|0; nullFunc_viiiiiiiiii(14); }
  function b15(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_iii(15);return 0; }
  function b16(p0,p1,p2,p3,p4) { p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_iiiiii(16);return 0; }
  function b17(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_diii(17);return +0; }
  function b18() { ; nullFunc_i(18);return 0; }
  function ___ctype_b_loc__wrapper() { ; return ___ctype_b_loc()|0; }
  function ___ctype_toupper_loc__wrapper() { ; return ___ctype_toupper_loc()|0; }
  function ___ctype_tolower_loc__wrapper() { ; return ___ctype_tolower_loc()|0; }
  function b19(p0,p1,p2,p3) { p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_iiiii(19);return 0; }
  function _catgets__wrapper(p0,p1,p2,p3) { p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; return _catgets(p0|0,p1|0,p2|0,p3|0)|0; }
  function b20(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(20); }
  function b21() { ; nullFunc_v(21); }
  function ___cxa_end_catch__wrapper() { ; ___cxa_end_catch(); }
  function ___cxa_rethrow__wrapper() { ; ___cxa_rethrow(); }
  function b22(p0,p1,p2,p3,p4,p5,p6,p7) { p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0;p6 = p6|0;p7 = p7|0; nullFunc_iiiiiiiii(22);return 0; }
  function b23(p0,p1,p2,p3) { p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_viiii(23); }
  // EMSCRIPTEN_END_FUNCS
  var FUNCTION_TABLE_iiiiiiii = [b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
  ,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
  ,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
  ,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
  ,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
  ,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
  ,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
  ,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
  ,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
  ,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
  ,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
  ,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
  ,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,__ZNSt3__114__scan_keywordINS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEPKNS_12basic_stringIcS3_NS_9allocatorIcEEEENS_5ctypeIcEEEET0_RT_SE_SD_SD_RKT1_Rjb,b0,b0,b0,b0,b0,b0
  ,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,__ZNSt3__114__scan_keywordINS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEPKNS_12basic_stringIwS3_NS_9allocatorIwEEEENS_5ctypeIwEEEET0_RT_SE_SD_SD_RKT1_Rjb,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
  ,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
  ,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
  ,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
  ,b0,b0,b0];
  var FUNCTION_TABLE_viiiii = [b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
  ,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
  ,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
  ,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
  ,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
  ,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
  ,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
  ,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
  ,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
  ,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
  ,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
  ,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,__ZNK10__cxxabiv117__class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib,b1,b1,b1,__ZNK10__cxxabiv120__si_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib,b1,b1,b1,__ZNK10__cxxabiv121__vmi_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib,b1,b1,b1,b1,b1,b1,b1
  ,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
  ,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
  ,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
  ,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
  ,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
  ,b1,b1,b1];
  var FUNCTION_TABLE_vi = [b2,__ZNSt3__111__stdoutbufIwED1Ev,__ZNSt3__111__stdoutbufIwED0Ev,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,__ZNSt3__110__stdinbufIwED1Ev,__ZNSt3__110__stdinbufIwED0Ev,b2,b2,b2,b2,b2,b2,b2,__ZNSt3__111__stdoutbufIcED1Ev,__ZNSt3__111__stdoutbufIcED0Ev,b2,b2,b2
  ,b2,b2,b2,b2,b2,b2,b2,b2,b2,__ZNSt3__110__stdinbufIcED1Ev,__ZNSt3__110__stdinbufIcED0Ev,b2,b2,b2,b2,b2,b2,b2,__ZNSt3__112system_errorD2Ev,__ZNSt3__112system_errorD0Ev,b2,__ZNSt3__115basic_streambufIcNS_11char_traitsIcEEED1Ev,__ZNSt3__115basic_streambufIcNS_11char_traitsIcEEED0Ev,b2,__ZNSt3__115basic_streambufIwNS_11char_traitsIwEEED1Ev,__ZNSt3__115basic_streambufIwNS_11char_traitsIwEEED0Ev,b2,__ZNSt3__113basic_istreamIcNS_11char_traitsIcEEED1Ev,__ZNSt3__113basic_istreamIcNS_11char_traitsIcEEED0Ev,__ZTv0_n12_NSt3__113basic_istreamIcNS_11char_traitsIcEEED1Ev
  ,__ZTv0_n12_NSt3__113basic_istreamIcNS_11char_traitsIcEEED0Ev,__ZNSt3__113basic_istreamIwNS_11char_traitsIwEEED1Ev,__ZNSt3__113basic_istreamIwNS_11char_traitsIwEEED0Ev,__ZTv0_n12_NSt3__113basic_istreamIwNS_11char_traitsIwEEED1Ev,__ZTv0_n12_NSt3__113basic_istreamIwNS_11char_traitsIwEEED0Ev,__ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEED1Ev,__ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEED0Ev,__ZTv0_n12_NSt3__113basic_ostreamIcNS_11char_traitsIcEEED1Ev,__ZTv0_n12_NSt3__113basic_ostreamIcNS_11char_traitsIcEEED0Ev,__ZNSt3__113basic_ostreamIwNS_11char_traitsIwEEED1Ev,__ZNSt3__113basic_ostreamIwNS_11char_traitsIwEEED0Ev,__ZTv0_n12_NSt3__113basic_ostreamIwNS_11char_traitsIwEEED1Ev,__ZTv0_n12_NSt3__113basic_ostreamIwNS_11char_traitsIwEEED0Ev,__ZNSt3__18ios_base7failureD2Ev,__ZNSt3__18ios_base7failureD0Ev,__ZNSt3__18ios_baseD2Ev,__ZNSt3__18ios_baseD0Ev,__ZNSt3__119__iostream_categoryD1Ev,__ZNSt3__119__iostream_categoryD0Ev,b2,b2,b2,b2,b2,__ZNSt3__17collateIcED1Ev,__ZNSt3__17collateIcED0Ev,__ZNSt3__16locale5facet16__on_zero_sharedEv,b2,b2,b2
  ,__ZNSt3__17collateIwED1Ev,__ZNSt3__17collateIwED0Ev,b2,b2,b2,__ZNSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED1Ev,__ZNSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,__ZNSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED1Ev,__ZNSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
  ,b2,__ZNSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED1Ev,__ZNSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev,b2,b2,b2,b2,b2,b2,b2,b2,__ZNSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED1Ev,__ZNSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev,b2,b2,b2,b2,b2,b2,b2,b2,__ZNSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED1Ev,__ZNSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev,b2,b2,b2,b2,b2,b2,b2
  ,b2,b2,b2,b2,b2,b2,b2,__ZNSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED1Ev,__ZNSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,__ZNSt3__18time_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED1Ev,__ZNSt3__18time_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev,b2,__ZNSt3__18time_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED1Ev,__ZNSt3__18time_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev,b2,__ZNSt3__110moneypunctIcLb0EED1Ev
  ,__ZNSt3__110moneypunctIcLb0EED0Ev,b2,b2,b2,b2,b2,b2,b2,b2,b2,__ZNSt3__110moneypunctIcLb1EED1Ev,__ZNSt3__110moneypunctIcLb1EED0Ev,b2,b2,b2,b2,b2,b2,b2,b2,b2,__ZNSt3__110moneypunctIwLb0EED1Ev,__ZNSt3__110moneypunctIwLb0EED0Ev,b2,b2,b2,b2,b2,b2,b2
  ,b2,b2,__ZNSt3__110moneypunctIwLb1EED1Ev,__ZNSt3__110moneypunctIwLb1EED0Ev,b2,b2,b2,b2,b2,b2,b2,b2,b2,__ZNSt3__19money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED1Ev,__ZNSt3__19money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev,b2,b2,__ZNSt3__19money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED1Ev,__ZNSt3__19money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev,b2,b2,__ZNSt3__19money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED1Ev,__ZNSt3__19money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev,b2,b2,__ZNSt3__19money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED1Ev,__ZNSt3__19money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev,b2,b2,__ZNSt3__18messagesIcED1Ev
  ,__ZNSt3__18messagesIcED0Ev,b2,b2,b2,__ZNSt3__18messagesIwED1Ev,__ZNSt3__18messagesIwED0Ev,b2,b2,b2,__ZNSt3__16locale5__impD2Ev,__ZNSt3__16locale5__impD0Ev,__ZNSt3__15ctypeIcED2Ev,__ZNSt3__15ctypeIcED0Ev,b2,b2,b2,b2,b2,b2,b2,b2,__ZNSt3__17codecvtIwc11__mbstate_tED2Ev,__ZNSt3__17codecvtIwc11__mbstate_tED0Ev,b2,b2,b2,b2,b2,b2,b2
  ,__ZNSt3__18numpunctIcED2Ev,__ZNSt3__18numpunctIcED0Ev,b2,b2,b2,b2,b2,__ZNSt3__18numpunctIwED2Ev,__ZNSt3__18numpunctIwED0Ev,b2,b2,b2,b2,b2,__ZNSt3__16locale5facetD2Ev,__ZNSt3__16locale5facetD0Ev,__ZNSt3__15ctypeIwED0Ev,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,__ZNSt3__17codecvtIcc11__mbstate_tED0Ev
  ,b2,b2,b2,b2,b2,b2,b2,__ZNSt3__17codecvtIDsc11__mbstate_tED0Ev,b2,b2,b2,b2,b2,b2,b2,__ZNSt3__17codecvtIDic11__mbstate_tED0Ev,b2,b2,b2,b2,b2,b2,b2,__ZNSt3__116__narrow_to_utf8ILj32EED0Ev,__ZNSt3__117__widen_from_utf8ILj32EED0Ev,b2,__ZNSt9bad_allocD2Ev,__ZNSt9bad_allocD0Ev,b2,__ZNSt11logic_errorD2Ev
  ,__ZNSt11logic_errorD0Ev,b2,__ZNSt13runtime_errorD2Ev,__ZNSt13runtime_errorD0Ev,__ZNSt12length_errorD0Ev,__ZNSt8bad_castD2Ev,__ZNSt8bad_castD0Ev,b2,__ZN10__cxxabiv116__shim_type_infoD2Ev,__ZN10__cxxabiv117__class_type_infoD0Ev,__ZNK10__cxxabiv116__shim_type_info5noop1Ev,__ZNK10__cxxabiv116__shim_type_info5noop2Ev,b2,b2,b2,b2,__ZN10__cxxabiv120__si_class_type_infoD0Ev,b2,b2,b2,__ZN10__cxxabiv121__vmi_class_type_infoD0Ev,b2,b2,b2,b2,__ZN7GreeterC1Ev,b2,b2,b2,b2
  ,b2,b2,b2,__ZNSt3__18ios_base33__set_badbit_and_consider_rethrowEv,b2,b2,b2,b2,__ZNSt3__18ios_base4InitD2Ev,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,_free,b2,b2,b2,b2
  ,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,_freelocale__wrapper,b2,__ZNSt3__112__do_nothingEPv,b2,__ZNSt3__121__throw_runtime_errorEPKc,b2,b2,b2,b2,b2
  ,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
  ,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,__ZNSt3__16locale2id6__initEv,__ZNSt3__117__call_once_proxyINS_5tupleIJNS_12_GLOBAL__N_111__fake_bindEEEEEEvPv,b2,b2,b2,b2,b2,b2,b2,b2,b2,___cxx_global_array_dtor120
  ,b2,___cxx_global_array_dtor105,b2,___cxx_global_array_dtor81,___cxx_global_array_dtor56,___cxx_global_array_dtor53,___cxx_global_array_dtor,__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev,b2,b2,__ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev,b2,b2,b2,__ZN10__cxxabiv112_GLOBAL__N_19destruct_EPv,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
  ,b2,b2,b2];
  var FUNCTION_TABLE_vii = [b3,b3,b3,__ZNSt3__111__stdoutbufIwE5imbueERKNS_6localeE,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,__ZNSt3__110__stdinbufIwE5imbueERKNS_6localeE,b3,b3,b3,b3,b3,b3,b3,b3,__ZNSt3__111__stdoutbufIcE5imbueERKNS_6localeE,b3,b3
  ,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,__ZNSt3__110__stdinbufIcE5imbueERKNS_6localeE,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,__ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE5imbueERKNS_6localeE,b3,b3,__ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE5imbueERKNS_6localeE,b3,b3,b3
  ,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
  ,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
  ,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
  ,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
  ,b3,b3,b3,__ZNKSt3__110moneypunctIcLb0EE11do_groupingEv,__ZNKSt3__110moneypunctIcLb0EE14do_curr_symbolEv,__ZNKSt3__110moneypunctIcLb0EE16do_positive_signEv,__ZNKSt3__110moneypunctIcLb0EE16do_negative_signEv,b3,__ZNKSt3__110moneypunctIcLb0EE13do_pos_formatEv,__ZNKSt3__110moneypunctIcLb0EE13do_neg_formatEv,b3,b3,b3,b3,__ZNKSt3__110moneypunctIcLb1EE11do_groupingEv,__ZNKSt3__110moneypunctIcLb1EE14do_curr_symbolEv,__ZNKSt3__110moneypunctIcLb1EE16do_positive_signEv,__ZNKSt3__110moneypunctIcLb1EE16do_negative_signEv,b3,__ZNKSt3__110moneypunctIcLb1EE13do_pos_formatEv,__ZNKSt3__110moneypunctIcLb1EE13do_neg_formatEv,b3,b3,b3,b3,__ZNKSt3__110moneypunctIwLb0EE11do_groupingEv,__ZNKSt3__110moneypunctIwLb0EE14do_curr_symbolEv,__ZNKSt3__110moneypunctIwLb0EE16do_positive_signEv,__ZNKSt3__110moneypunctIwLb0EE16do_negative_signEv,b3
  ,__ZNKSt3__110moneypunctIwLb0EE13do_pos_formatEv,__ZNKSt3__110moneypunctIwLb0EE13do_neg_formatEv,b3,b3,b3,b3,__ZNKSt3__110moneypunctIwLb1EE11do_groupingEv,__ZNKSt3__110moneypunctIwLb1EE14do_curr_symbolEv,__ZNKSt3__110moneypunctIwLb1EE16do_positive_signEv,__ZNKSt3__110moneypunctIwLb1EE16do_negative_signEv,b3,__ZNKSt3__110moneypunctIwLb1EE13do_pos_formatEv,__ZNKSt3__110moneypunctIwLb1EE13do_neg_formatEv,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
  ,b3,b3,b3,__ZNKSt3__18messagesIcE8do_closeEi,b3,b3,b3,b3,__ZNKSt3__18messagesIwE8do_closeEi,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
  ,b3,b3,b3,b3,__ZNKSt3__18numpunctIcE11do_groupingEv,__ZNKSt3__18numpunctIcE11do_truenameEv,__ZNKSt3__18numpunctIcE12do_falsenameEv,b3,b3,b3,b3,__ZNKSt3__18numpunctIwE11do_groupingEv,__ZNKSt3__18numpunctIwE11do_truenameEv,__ZNKSt3__18numpunctIwE12do_falsenameEv,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
  ,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
  ,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,__ZN7Greeter5greetENSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE,b3,__ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE6sentryC1ERS3_,__ZNKSt3__18ios_base6getlocEv
  ,b3,b3,__ZNSt3__18ios_base5clearEj,b3,b3,__ZNSt3__18ios_base4initEPv,b3,b3,b3,__ZN12_GLOBAL__N_114__libcpp_nmstrC2EPKc,b3,b3,__ZNSt13runtime_errorC2ERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE,b3,b3,b3,b3,__ZNSt11logic_errorC2EPKc,b3,b3,__ZNSt3__18ios_base16__call_callbacksENS0_5eventE,__ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE6sentryC2ERS3_,__ZNSt3__113basic_ostreamIwNS_11char_traitsIwEEE6sentryC2ERS3_,b3,b3,b3,b3,b3,b3,b3
  ,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9push_backEc,b3,b3,__ZNSt13runtime_errorC2EPKc
  ,b3,__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj,b3,b3,__ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE9push_backEw,b3,b3,__ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE7reserveEj,b3,b3,b3,b3,b3,__ZNSt3__16vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lj28EEEEC2Ej,b3,__ZNSt3__16locale5__imp7installINS_7collateIcEEEEvPT_,__ZNSt3__16locale5__imp7installINS_7collateIwEEEEvPT_,__ZNSt3__16locale5__imp7installINS_5ctypeIcEEEEvPT_,__ZNSt3__16locale5__imp7installINS_5ctypeIwEEEEvPT_,__ZNSt3__16locale5__imp7installINS_7codecvtIcc11__mbstate_tEEEEvPT_,__ZNSt3__17codecvtIwc11__mbstate_tEC2Ej,__ZNSt3__16locale5__imp7installINS_7codecvtIwc11__mbstate_tEEEEvPT_,__ZNSt3__16locale5__imp7installINS_7codecvtIDsc11__mbstate_tEEEEvPT_,__ZNSt3__16locale5__imp7installINS_7codecvtIDic11__mbstate_tEEEEvPT_,__ZNSt3__16locale5__imp7installINS_8numpunctIcEEEEvPT_,__ZNSt3__16locale5__imp7installINS_8numpunctIwEEEEvPT_,__ZNSt3__16locale5__imp7installINS_7num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEEEvPT_,__ZNSt3__16locale5__imp7installINS_7num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEEEvPT_,__ZNSt3__16locale5__imp7installINS_7num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEEEEEvPT_,__ZNSt3__16locale5__imp7installINS_7num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEEEEEvPT_
  ,__ZNSt3__16locale5__imp7installINS_10moneypunctIcLb0EEEEEvPT_,__ZNSt3__16locale5__imp7installINS_10moneypunctIcLb1EEEEEvPT_,__ZNSt3__16locale5__imp7installINS_10moneypunctIwLb0EEEEEvPT_,__ZNSt3__16locale5__imp7installINS_10moneypunctIwLb1EEEEEvPT_,__ZNSt3__16locale5__imp7installINS_9money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEEEvPT_,__ZNSt3__16locale5__imp7installINS_9money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEEEvPT_,__ZNSt3__16locale5__imp7installINS_9money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEEEEEvPT_,__ZNSt3__16locale5__imp7installINS_9money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEEEEEvPT_,__ZNSt3__16locale5__imp7installINS_8time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEEEvPT_,__ZNSt3__16locale5__imp7installINS_8time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEEEvPT_,__ZNSt3__16locale5__imp7installINS_8time_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEEEEEvPT_,__ZNSt3__16locale5__imp7installINS_8time_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEEEEEvPT_,__ZNSt3__16locale5__imp7installINS_8messagesIcEEEEvPT_,__ZNSt3__16locale5__imp7installINS_8messagesIwEEEEvPT_,b3,__ZNSt3__16vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lj28EEEE6resizeEj,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
  ,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,__ZNSt3__16vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lj28EEEE8allocateEj,b3,b3,b3,_abort_message,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
  ,b3,b3,b3];
  var FUNCTION_TABLE_ii = [b4,b4,b4,b4,b4,b4,b4,__ZNSt3__111__stdoutbufIwE4syncEv,__ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE9showmanycEv,b4,__ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE9underflowEv,__ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE5uflowEv,b4,b4,b4,b4,b4,b4,__ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE4syncEv,__ZNSt3__110__stdinbufIwE9underflowEv,__ZNSt3__110__stdinbufIwE5uflowEv,b4,b4,b4,b4,b4,b4,b4,b4
  ,b4,__ZNSt3__111__stdoutbufIcE4syncEv,__ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE9showmanycEv,b4,__ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE9underflowEv,__ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE5uflowEv,b4,b4,b4,b4,b4,b4,__ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE4syncEv,__ZNSt3__110__stdinbufIcE9underflowEv,__ZNSt3__110__stdinbufIcE5uflowEv,b4,b4,b4,b4,b4,__ZNKSt13runtime_error4whatEv,b4,b4,b4,b4,b4,b4,b4,b4,b4
  ,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,__ZNKSt3__119__iostream_category4nameEv,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
  ,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
  ,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,__ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE13do_date_orderEv,b4,b4,b4,b4,b4,b4
  ,__ZNKSt3__120__time_get_c_storageIcE7__weeksEv,__ZNKSt3__120__time_get_c_storageIcE8__monthsEv,__ZNKSt3__120__time_get_c_storageIcE7__am_pmEv,__ZNKSt3__120__time_get_c_storageIcE3__cEv,__ZNKSt3__120__time_get_c_storageIcE3__rEv,__ZNKSt3__120__time_get_c_storageIcE3__xEv,__ZNKSt3__120__time_get_c_storageIcE3__XEv,b4,b4,__ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE13do_date_orderEv,b4,b4,b4,b4,b4,b4,__ZNKSt3__120__time_get_c_storageIwE7__weeksEv,__ZNKSt3__120__time_get_c_storageIwE8__monthsEv,__ZNKSt3__120__time_get_c_storageIwE7__am_pmEv,__ZNKSt3__120__time_get_c_storageIwE3__cEv,__ZNKSt3__120__time_get_c_storageIwE3__rEv,__ZNKSt3__120__time_get_c_storageIwE3__xEv,__ZNKSt3__120__time_get_c_storageIwE3__XEv,b4,b4,b4,b4,b4,b4,b4
  ,b4,__ZNKSt3__110moneypunctIcLb0EE16do_decimal_pointEv,__ZNKSt3__110moneypunctIcLb0EE16do_thousands_sepEv,b4,b4,b4,b4,__ZNKSt3__110moneypunctIcLb0EE14do_frac_digitsEv,b4,b4,b4,b4,__ZNKSt3__110moneypunctIcLb1EE16do_decimal_pointEv,__ZNKSt3__110moneypunctIcLb1EE16do_thousands_sepEv,b4,b4,b4,b4,__ZNKSt3__110moneypunctIcLb1EE14do_frac_digitsEv,b4,b4,b4,b4,__ZNKSt3__110moneypunctIwLb0EE16do_decimal_pointEv,__ZNKSt3__110moneypunctIwLb0EE16do_thousands_sepEv,b4,b4,b4,b4,__ZNKSt3__110moneypunctIwLb0EE14do_frac_digitsEv
  ,b4,b4,b4,b4,__ZNKSt3__110moneypunctIwLb1EE16do_decimal_pointEv,__ZNKSt3__110moneypunctIwLb1EE16do_thousands_sepEv,b4,b4,b4,b4,__ZNKSt3__110moneypunctIwLb1EE14do_frac_digitsEv,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
  ,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,__ZNKSt3__17codecvtIwc11__mbstate_tE11do_encodingEv,__ZNKSt3__17codecvtIwc11__mbstate_tE16do_always_noconvEv,b4,__ZNKSt3__17codecvtIwc11__mbstate_tE13do_max_lengthEv
  ,b4,b4,__ZNKSt3__18numpunctIcE16do_decimal_pointEv,__ZNKSt3__18numpunctIcE16do_thousands_sepEv,b4,b4,b4,b4,b4,__ZNKSt3__18numpunctIwE16do_decimal_pointEv,__ZNKSt3__18numpunctIwE16do_thousands_sepEv,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
  ,b4,b4,b4,__ZNKSt3__17codecvtIcc11__mbstate_tE11do_encodingEv,__ZNKSt3__17codecvtIcc11__mbstate_tE16do_always_noconvEv,b4,__ZNKSt3__17codecvtIcc11__mbstate_tE13do_max_lengthEv,b4,b4,b4,b4,__ZNKSt3__17codecvtIDsc11__mbstate_tE11do_encodingEv,__ZNKSt3__17codecvtIDsc11__mbstate_tE16do_always_noconvEv,b4,__ZNKSt3__17codecvtIDsc11__mbstate_tE13do_max_lengthEv,b4,b4,b4,b4,__ZNKSt3__17codecvtIDic11__mbstate_tE11do_encodingEv,__ZNKSt3__17codecvtIDic11__mbstate_tE16do_always_noconvEv,b4,__ZNKSt3__17codecvtIDic11__mbstate_tE13do_max_lengthEv,b4,b4,b4,b4,b4,__ZNKSt9bad_alloc4whatEv,b4
  ,b4,__ZNKSt11logic_error4whatEv,b4,b4,b4,b4,b4,__ZNKSt8bad_cast4whatEv,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,__ZNSt3__14endlIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_,b4,b4
  ,b4,b4,b4,b4,b4,b4,__ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE5flushEv,__ZNSt3__113basic_ostreamIwNS_11char_traitsIwEEE5flushEv,b4,b4,b4,b4,b4,_pthread_mutex_unlock__wrapper,_pthread_mutex_lock__wrapper,_pthread_cond_broadcast__wrapper,b4,b4,__Znwj,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
  ,b4,b4,b4,b4,b4,b4,b4,b4,_uselocale__wrapper,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
  ,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
  ,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
  ,b4,b4,b4,b4,b4,b4,b4,b4,_wcslen,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
  ,b4,b4,b4];
  var FUNCTION_TABLE_iiiiiiiiiiii = [b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
  ,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
  ,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
  ,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
  ,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
  ,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
  ,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
  ,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
  ,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
  ,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
  ,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
  ,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
  ,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
  ,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,__ZNSt3__19money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE8__do_getERS4_S4_bRKNS_6localeEjRjRbRKNS_5ctypeIcEERNS_10unique_ptrIcPFvPvEEERPcSM_,b5,b5,b5,b5,b5,b5
  ,b5,b5,__ZNSt3__19money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE8__do_getERS4_S4_bRKNS_6localeEjRjRbRKNS_5ctypeIwEERNS_10unique_ptrIwPFvPvEEERPwSM_,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
  ,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
  ,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
  ,b5,b5,b5];
  var FUNCTION_TABLE_iiii = [b6,b6,b6,b6,__ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE6setbufEPwi,b6,b6,b6,b6,__ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE6xsgetnEPwi,b6,b6,b6,__ZNSt3__111__stdoutbufIwE6xsputnEPKwi,b6,b6,b6,b6,b6,b6,b6,b6,__ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE6xsputnEPKwi,b6,b6,b6,b6,__ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE6setbufEPci,b6
  ,b6,b6,b6,__ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE6xsgetnEPci,b6,b6,b6,__ZNSt3__111__stdoutbufIcE6xsputnEPKci,b6,b6,b6,b6,b6,b6,b6,b6,__ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE6xsputnEPKci,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
  ,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,__ZNKSt3__114error_category10equivalentEiRKNS_15error_conditionE,__ZNKSt3__114error_category10equivalentERKNS_10error_codeEi,b6,b6,b6,b6,b6,b6,__ZNKSt3__17collateIcE7do_hashEPKcS3_
  ,b6,b6,b6,b6,__ZNKSt3__17collateIwE7do_hashEPKwS3_,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
  ,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
  ,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
  ,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
  ,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
  ,b6,__ZNKSt3__18messagesIcE7do_openERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERKNS_6localeE,b6,b6,b6,b6,__ZNKSt3__18messagesIwE7do_openERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERKNS_6localeE,b6,b6,b6,b6,b6,b6,b6,__ZNKSt3__15ctypeIcE10do_toupperEPcPKc,b6,__ZNKSt3__15ctypeIcE10do_tolowerEPcPKc,b6,b6,__ZNKSt3__15ctypeIcE9do_narrowEcc,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
  ,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,__ZNKSt3__15ctypeIwE5do_isEtw,b6,b6,b6,b6,__ZNKSt3__15ctypeIwE10do_toupperEPwPKw,b6,__ZNKSt3__15ctypeIwE10do_tolowerEPwPKw,b6,b6,__ZNKSt3__15ctypeIwE9do_narrowEwc,b6,b6
  ,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
  ,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,__ZNK10__cxxabiv117__class_type_info9can_catchEPKNS_16__shim_type_infoERPv,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,_sn_write,b6,b6,b6,b6,b6
  ,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKcj,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
  ,b6,b6,b6,b6,b6,b6,b6,b6,b6,_newlocale__wrapper,b6,b6,b6,b6,_vasprintf,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
  ,__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendIPcEENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueERS5_E4typeES9_S9_,b6,b6,b6,b6,b6,__ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6appendIPwEENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueERS5_E4typeES9_S9_,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
  ,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,_wcrtomb,b6,b6,_mbtowc,_mbrlen,b6
  ,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,_do_read,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
  ,b6,b6,b6];
  var FUNCTION_TABLE_viiiiiiiiiiiiiii = [b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
  ,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
  ,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
  ,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
  ,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
  ,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
  ,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
  ,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
  ,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
  ,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
  ,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
  ,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
  ,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
  ,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
  ,b7,b7,b7,b7,b7,b7,b7,b7,b7,__ZNSt3__111__money_putIcE8__formatEPcRS2_S3_jPKcS5_RKNS_5ctypeIcEEbRKNS_10money_base7patternEccRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEESL_SL_i,b7,__ZNSt3__111__money_putIwE8__formatEPwRS2_S3_jPKwS5_RKNS_5ctypeIwEEbRKNS_10money_base7patternEwwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERKNSE_IwNSF_IwEENSH_IwEEEESQ_i,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
  ,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
  ,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
  ,b7,b7,b7];
  var FUNCTION_TABLE_viiiiid = [b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
  ,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
  ,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
  ,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
  ,b8,b8,b8,b8,b8,b8,b8,b8,__ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcd,__ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEce,b8,b8,b8,b8,b8,b8,b8,b8,__ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwd,__ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwe,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
  ,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
  ,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
  ,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
  ,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8];
  var FUNCTION_TABLE_viiiiiiii = [b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
  ,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
  ,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
  ,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
  ,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
  ,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,__ZNKSt3__18time_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcPK2tmcc,b9,b9,__ZNKSt3__18time_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwPK2tmcc,b9
  ,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
  ,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,__ZNKSt3__19money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_bRNS_8ios_baseERjRe,__ZNKSt3__19money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_bRNS_8ios_baseERjRNS_12basic_stringIcS3_NS_9allocatorIcEEEE,b9,b9,__ZNKSt3__19money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_bRNS_8ios_baseERjRe,__ZNKSt3__19money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_bRNS_8ios_baseERjRNS_12basic_stringIwS3_NS_9allocatorIwEEEE,b9,b9,b9,b9,b9,b9,b9,b9,b9
  ,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9];
  var FUNCTION_TABLE_viiiiii = [b10,b10,b10,b10,b10,__ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE7seekoffExNS_8ios_base7seekdirEj,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,__ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE7seekoffExNS_8ios_base7seekdirEj
  ,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
  ,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
  ,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
  ,b10,b10,b10,__ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcb,__ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcl,b10,__ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcm,b10,b10,b10,__ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcPKv,b10,b10,__ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwb,__ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwl,b10,__ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwm,b10,b10,b10,__ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwPKv,b10,b10,b10,b10,b10,b10,b10,b10,b10
  ,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
  ,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
  ,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
  ,b10,b10,__ZNKSt3__18messagesIcE6do_getEiiiRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE,b10,b10,b10,b10,__ZNKSt3__18messagesIwE6do_getEiiiRKNS_12basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEEE,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
  ,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
  ,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
  ,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,__ZNK10__cxxabiv117__class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib,b10,b10,b10,__ZNK10__cxxabiv120__si_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib,b10,b10,b10,__ZNK10__cxxabiv121__vmi_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib,b10,b10,b10,b10,b10,b10,b10,b10
  ,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
  ,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
  ,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
  ,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
  ,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
  ,b10,b10,b10];
  var FUNCTION_TABLE_viiiiiii = [b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
  ,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
  ,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
  ,b11,b11,b11,b11,b11,b11,b11,__ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRb,__ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRl,__ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRx,__ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRt,__ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjS8_,__ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRm,__ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRy,__ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRf,__ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRd,__ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRe,__ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRPv,b11,b11,__ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRb,__ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRl,__ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRx,__ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRt,__ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjS8_,__ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRm,__ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRy,__ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRf,__ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRd,__ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRe
  ,__ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRPv,b11,b11,b11,b11,__ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcx,b11,__ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcy,b11,b11,b11,b11,b11,b11,b11,__ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwx,b11,__ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwy,b11,b11,b11,b11,b11,b11,__ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11do_get_timeES4_S4_RNS_8ios_baseERjP2tm,__ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11do_get_dateES4_S4_RNS_8ios_baseERjP2tm,__ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE14do_get_weekdayES4_S4_RNS_8ios_baseERjP2tm,__ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE16do_get_monthnameES4_S4_RNS_8ios_baseERjP2tm,__ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11do_get_yearES4_S4_RNS_8ios_baseERjP2tm,b11
  ,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,__ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11do_get_timeES4_S4_RNS_8ios_baseERjP2tm,__ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11do_get_dateES4_S4_RNS_8ios_baseERjP2tm,__ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE14do_get_weekdayES4_S4_RNS_8ios_baseERjP2tm,__ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE16do_get_monthnameES4_S4_RNS_8ios_baseERjP2tm,__ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11do_get_yearES4_S4_RNS_8ios_baseERjP2tm,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
  ,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
  ,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,__ZNKSt3__19money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_bRNS_8ios_baseEcRKNS_12basic_stringIcS3_NS_9allocatorIcEEEE,b11,b11,b11,__ZNKSt3__19money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_bRNS_8ios_baseEwRKNS_12basic_stringIwS3_NS_9allocatorIwEEEE,b11
  ,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
  ,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
  ,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
  ,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
  ,b11,__ZNSt3__116__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
  ,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,__ZNSt3__19__num_putIcE21__widen_and_group_intEPcS2_S2_S2_RS2_S3_RKNS_6localeE,b11,__ZNSt3__19__num_putIcE23__widen_and_group_floatEPcS2_S2_S2_RS2_S3_RKNS_6localeE,b11,b11,b11,__ZNSt3__19__num_putIwE21__widen_and_group_intEPcS2_S2_PwRS3_S4_RKNS_6localeE,__ZNSt3__19__num_putIwE23__widen_and_group_floatEPcS2_S2_PwRS3_S4_RKNS_6localeE,__ZNSt3__116__pad_and_outputIwNS_11char_traitsIwEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
  ,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
  ,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
  ,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
  ,b11,b11,b11];
  var FUNCTION_TABLE_viiiiiid = [b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12
  ,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12
  ,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12
  ,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12
  ,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12
  ,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12
  ,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12
  ,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,__ZNKSt3__19money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_bRNS_8ios_baseEce,b12,b12,b12,__ZNKSt3__19money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_bRNS_8ios_baseEwe,b12,b12
  ,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12];
  var FUNCTION_TABLE_viiiiiiiii = [b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13
  ,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13
  ,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13
  ,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13
  ,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,__ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjP2tmcc
  ,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,__ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjP2tmcc,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13
  ,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13
  ,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13
  ,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13];
  var FUNCTION_TABLE_viiiiiiiiii = [b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
  ,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
  ,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
  ,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
  ,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
  ,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
  ,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
  ,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
  ,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
  ,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
  ,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
  ,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
  ,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
  ,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,__ZNSt3__111__money_getIcE13__gather_infoEbRKNS_6localeERNS_10money_base7patternERcS8_RNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEESF_SF_SF_Ri,b14,b14,b14,b14
  ,b14,b14,b14,__ZNSt3__111__money_getIwE13__gather_infoEbRKNS_6localeERNS_10money_base7patternERwS8_RNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERNS9_IwNSA_IwEENSC_IwEEEESJ_SJ_Ri,b14,b14,b14,b14,__ZNSt3__111__money_putIcE13__gather_infoEbbRKNS_6localeERNS_10money_base7patternERcS8_RNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEESF_SF_Ri,b14,__ZNSt3__111__money_putIwE13__gather_infoEbbRKNS_6localeERNS_10money_base7patternERwS8_RNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERNS9_IwNSA_IwEENSC_IwEEEESJ_Ri,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
  ,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
  ,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
  ,b14,b14,b14];
  var FUNCTION_TABLE_iii = [b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,__ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE9pbackfailEj,b15,__ZNSt3__111__stdoutbufIwE8overflowEj,b15,b15,b15,b15,b15,b15,__ZNSt3__110__stdinbufIwE9pbackfailEj,b15,__ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE8overflowEj,b15,b15,b15,b15,b15
  ,b15,b15,b15,b15,b15,b15,__ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE9pbackfailEi,b15,__ZNSt3__111__stdoutbufIcE8overflowEi,b15,b15,b15,b15,b15,b15,__ZNSt3__110__stdinbufIcE9pbackfailEi,b15,__ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE8overflowEi,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15
  ,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15
  ,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15
  ,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15
  ,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15
  ,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15
  ,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15
  ,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,__ZNKSt3__15ctypeIcE10do_toupperEc,b15,__ZNKSt3__15ctypeIcE10do_tolowerEc,b15,__ZNKSt3__15ctypeIcE8do_widenEc,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15
  ,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,__ZNKSt3__15ctypeIwE10do_toupperEw,b15,__ZNKSt3__15ctypeIwE10do_tolowerEw,b15,__ZNKSt3__15ctypeIwE8do_widenEc,b15,b15,b15,b15
  ,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15
  ,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15
  ,__ZNKSt3__16locale9use_facetERNS0_2idE,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15
  ,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,_isxdigit_l,_isdigit_l,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15
  ,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15
  ,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15
  ,__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc,b15,__ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15
  ,b15,b15,b15];
  var FUNCTION_TABLE_iiiiii = [b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16
  ,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16
  ,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,__ZNKSt3__17collateIcE10do_compareEPKcS3_S3_S3_,b16,b16
  ,b16,b16,__ZNKSt3__17collateIwE10do_compareEPKwS3_S3_S3_,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16
  ,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16
  ,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16
  ,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16
  ,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16
  ,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,__ZNKSt3__15ctypeIcE9do_narrowEPKcS3_cPc,b16,b16,b16,b16,__ZNKSt3__17codecvtIwc11__mbstate_tE10do_unshiftERS1_PcS4_RS4_,b16,b16,__ZNKSt3__17codecvtIwc11__mbstate_tE9do_lengthERS1_PKcS5_j,b16
  ,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,__ZNKSt3__15ctypeIwE9do_narrowEPKwS3_cPc,b16
  ,b16,b16,__ZNKSt3__17codecvtIcc11__mbstate_tE10do_unshiftERS1_PcS4_RS4_,b16,b16,__ZNKSt3__17codecvtIcc11__mbstate_tE9do_lengthERS1_PKcS5_j,b16,b16,b16,b16,__ZNKSt3__17codecvtIDsc11__mbstate_tE10do_unshiftERS1_PcS4_RS4_,b16,b16,__ZNKSt3__17codecvtIDsc11__mbstate_tE9do_lengthERS1_PKcS5_j,b16,b16,b16,b16,__ZNKSt3__17codecvtIDic11__mbstate_tE10do_unshiftERS1_PcS4_RS4_,b16,b16,__ZNKSt3__17codecvtIDic11__mbstate_tE9do_lengthERS1_PKcS5_j,b16,b16,b16,b16,b16,b16,b16,b16
  ,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16
  ,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16
  ,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16
  ,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16
  ,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,_wcsnrtombs,b16,_mbsnrtowcs,b16,b16,b16,b16
  ,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16
  ,b16,b16,b16];
  var FUNCTION_TABLE_diii = [b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
  ,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
  ,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
  ,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
  ,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
  ,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
  ,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
  ,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
  ,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
  ,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
  ,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
  ,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
  ,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
  ,b17,b17,b17,__ZNSt3__115__num_get_floatIfEET_PKcS3_Rj,__ZNSt3__115__num_get_floatIdEET_PKcS3_Rj,__ZNSt3__115__num_get_floatIeEET_PKcS3_Rj,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
  ,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
  ,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
  ,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
  ,b17,b17,b17];
  var FUNCTION_TABLE_i = [b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
  ,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
  ,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
  ,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
  ,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
  ,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
  ,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
  ,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
  ,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
  ,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
  ,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
  ,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
  ,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
  ,b18,b18,b18,b18,b18,b18,__ZNSt3__16__clocEv,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
  ,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
  ,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,__ZNSt3__16locale5__imp12make_classicEv,b18,__ZNSt3__16locale5__imp11make_globalEv,__ZNSt3__16locale8__globalEv,b18,b18,___ctype_b_loc__wrapper,___ctype_toupper_loc__wrapper,___ctype_tolower_loc__wrapper,b18,b18,b18,b18,b18,b18,b18
  ,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,___cxa_get_globals_fast,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
  ,b18,b18,b18];
  var FUNCTION_TABLE_iiiii = [b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19
  ,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19
  ,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19
  ,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19
  ,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19
  ,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19
  ,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19
  ,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19
  ,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,__ZNKSt3__15ctypeIcE8do_widenEPKcS3_Pc,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19
  ,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,__ZNKSt3__15ctypeIwE5do_isEPKwS3_Pt,__ZNKSt3__15ctypeIwE10do_scan_isEtPKwS3_,__ZNKSt3__15ctypeIwE11do_scan_notEtPKwS3_,b19,b19,b19,b19,b19,__ZNKSt3__15ctypeIwE8do_widenEPKcS3_Pw,b19,b19,b19
  ,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19
  ,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19
  ,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,__ZNSt3__125__num_get_signed_integralIlEET_PKcS3_Rji,__ZNSt3__125__num_get_signed_integralIxEET_PKcS3_Rji,__ZNSt3__127__num_get_unsigned_integralItEET_PKcS3_Rji
  ,__ZNSt3__127__num_get_unsigned_integralIjEET_PKcS3_Rji,__ZNSt3__127__num_get_unsigned_integralImEET_PKcS3_Rji,__ZNSt3__127__num_get_unsigned_integralIyEET_PKcS3_Rji,b19,b19,b19,b19,__ZNSt3__110__sscanf_lEPKcP15__locale_structS1_z,b19,b19,b19,b19,__ZNSt3__112__asprintf_lEPPcP15__locale_structPKcz,b19,b19,b19,b19,b19,b19,b19,b19,_mbsrtowcs,b19,b19,b19,b19,b19,b19,b19,b19
  ,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,_catgets__wrapper,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19
  ,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,_mbrtowc,b19,b19,b19
  ,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19
  ,b19,b19,b19];
  var FUNCTION_TABLE_viii = [b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20
  ,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20
  ,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,__ZNKSt3__114error_category23default_error_conditionEi,b20,b20,__ZNKSt3__119__iostream_category7messageEi,b20,b20,b20,b20,b20,b20
  ,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20
  ,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20
  ,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20
  ,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20
  ,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20
  ,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20
  ,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20
  ,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20
  ,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20
  ,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,__ZNSt3__112system_error6__initERKNS_10error_codeENS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE,b20,b20,b20,b20,b20,b20,b20,__ZNSt3__18ios_base7failureC2EPKcRKNS_10error_codeE,b20,b20,b20,b20,b20,b20,__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc,b20,b20,b20
  ,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,__ZNSt3__119__double_or_nothingIcEEvRNS_10unique_ptrIT_PFvPvEEERPS2_S9_,__ZNSt3__119__double_or_nothingIjEEvRNS_10unique_ptrIT_PFvPvEEERPS2_S9_,b20
  ,b20,b20,b20,b20,b20,__ZNSt3__119__double_or_nothingIwEEvRNS_10unique_ptrIT_PFvPvEEERPS2_S9_,b20,b20,b20,b20,b20,b20,b20,b20,__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20
  ,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20
  ,b20,b20,b20,b20,b20,b20,b20,b20,b20,__ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6__initEPKwj,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20
  ,b20,b20,b20];
  var FUNCTION_TABLE_v = [b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21
  ,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21
  ,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21
  ,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21
  ,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21
  ,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21
  ,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21
  ,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21
  ,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21
  ,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21
  ,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,__ZL25default_terminate_handlerv,b21,b21,b21,b21
  ,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21
  ,b21,b21,b21,b21,___cxa_end_catch__wrapper,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,___cxa_rethrow__wrapper,b21,b21,b21,b21,b21,b21,b21,__ZSt17__throw_bad_allocv,b21,b21,b21,b21,b21
  ,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21
  ,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21
  ,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21
  ,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,__ZN10__cxxabiv112_GLOBAL__N_110construct_Ev,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21
  ,b21,b21,b21];
  var FUNCTION_TABLE_iiiiiiiii = [b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22
  ,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22
  ,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22
  ,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22
  ,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22
  ,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22
  ,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22
  ,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22
  ,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,__ZNKSt3__17codecvtIwc11__mbstate_tE6do_outERS1_PKwS5_RS5_PcS7_RS7_,__ZNKSt3__17codecvtIwc11__mbstate_tE5do_inERS1_PKcS5_RS5_PwS7_RS7_,b22,b22,b22,b22,b22
  ,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22
  ,__ZNKSt3__17codecvtIcc11__mbstate_tE6do_outERS1_PKcS5_RS5_PcS7_RS7_,__ZNKSt3__17codecvtIcc11__mbstate_tE5do_inERS1_PKcS5_RS5_PcS7_RS7_,b22,b22,b22,b22,b22,b22,__ZNKSt3__17codecvtIDsc11__mbstate_tE6do_outERS1_PKDsS5_RS5_PcS7_RS7_,__ZNKSt3__17codecvtIDsc11__mbstate_tE5do_inERS1_PKcS5_RS5_PDsS7_RS7_,b22,b22,b22,b22,b22,b22,__ZNKSt3__17codecvtIDic11__mbstate_tE6do_outERS1_PKDiS5_RS5_PcS7_RS7_,__ZNKSt3__17codecvtIDic11__mbstate_tE5do_inERS1_PKcS5_RS5_PDiS7_RS7_,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22
  ,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22
  ,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22
  ,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22
  ,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22
  ,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22
  ,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22
  ,b22,b22,b22];
  var FUNCTION_TABLE_viiii = [b23,b23,b23,b23,b23,b23,__ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE7seekposENS_4fposI11__mbstate_tEEj,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23
  ,__ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE7seekposENS_4fposI11__mbstate_tEEj,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23
  ,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,__ZNKSt3__17collateIcE12do_transformEPKcS3_,b23
  ,b23,b23,b23,__ZNKSt3__17collateIwE12do_transformEPKwS3_,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23
  ,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23
  ,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23
  ,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23
  ,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23
  ,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23
  ,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23
  ,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23
  ,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,__ZNK10__cxxabiv117__class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi,b23,b23,b23,__ZNK10__cxxabiv120__si_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi,b23,b23,b23,__ZNK10__cxxabiv121__vmi_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi,b23,b23,b23,b23,b23,b23
  ,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23
  ,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23
  ,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23
  ,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23
  ,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23
  ,b23,b23,b23];

    return { ___cxa_can_catch: ___cxa_can_catch, _free: _free, _main: _main, _realloc: _realloc, _i64Add: _i64Add, _memmove: _memmove, ___cxa_is_pointer_type: ___cxa_is_pointer_type, _i64Subtract: _i64Subtract, _memset: _memset, _malloc: _malloc, _memcpy: _memcpy, _strlen: _strlen, _bitshift64Lshr: _bitshift64Lshr, _bitshift64Shl: _bitshift64Shl, __GLOBAL__I_a: __GLOBAL__I_a, runPostSets: runPostSets, stackAlloc: stackAlloc, stackSave: stackSave, stackRestore: stackRestore, setThrew: setThrew, setTempRet0: setTempRet0, getTempRet0: getTempRet0, dynCall_iiiiiiii: dynCall_iiiiiiii, dynCall_viiiii: dynCall_viiiii, dynCall_vi: dynCall_vi, dynCall_vii: dynCall_vii, dynCall_ii: dynCall_ii, dynCall_iiiiiiiiiiii: dynCall_iiiiiiiiiiii, dynCall_iiii: dynCall_iiii, dynCall_viiiiiiiiiiiiiii: dynCall_viiiiiiiiiiiiiii, dynCall_viiiiid: dynCall_viiiiid, dynCall_viiiiiiii: dynCall_viiiiiiii, dynCall_viiiiii: dynCall_viiiiii, dynCall_viiiiiii: dynCall_viiiiiii, dynCall_viiiiiid: dynCall_viiiiiid, dynCall_viiiiiiiii: dynCall_viiiiiiiii, dynCall_viiiiiiiiii: dynCall_viiiiiiiiii, dynCall_iii: dynCall_iii, dynCall_iiiiii: dynCall_iiiiii, dynCall_diii: dynCall_diii, dynCall_i: dynCall_i, dynCall_iiiii: dynCall_iiiii, dynCall_viii: dynCall_viii, dynCall_v: dynCall_v, dynCall_iiiiiiiii: dynCall_iiiiiiiii, dynCall_viiii: dynCall_viiii };
  })
  // EMSCRIPTEN_END_ASM
  ({ "Math": Math, "Int8Array": Int8Array, "Int16Array": Int16Array, "Int32Array": Int32Array, "Uint8Array": Uint8Array, "Uint16Array": Uint16Array, "Uint32Array": Uint32Array, "Float32Array": Float32Array, "Float64Array": Float64Array }, { "abort": abort, "assert": assert, "min": Math_min, "nullFunc_iiiiiiii": nullFunc_iiiiiiii, "nullFunc_viiiii": nullFunc_viiiii, "nullFunc_vi": nullFunc_vi, "nullFunc_vii": nullFunc_vii, "nullFunc_ii": nullFunc_ii, "nullFunc_iiiiiiiiiiii": nullFunc_iiiiiiiiiiii, "nullFunc_iiii": nullFunc_iiii, "nullFunc_viiiiiiiiiiiiiii": nullFunc_viiiiiiiiiiiiiii, "nullFunc_viiiiid": nullFunc_viiiiid, "nullFunc_viiiiiiii": nullFunc_viiiiiiii, "nullFunc_viiiiii": nullFunc_viiiiii, "nullFunc_viiiiiii": nullFunc_viiiiiii, "nullFunc_viiiiiid": nullFunc_viiiiiid, "nullFunc_viiiiiiiii": nullFunc_viiiiiiiii, "nullFunc_viiiiiiiiii": nullFunc_viiiiiiiiii, "nullFunc_iii": nullFunc_iii, "nullFunc_iiiiii": nullFunc_iiiiii, "nullFunc_diii": nullFunc_diii, "nullFunc_i": nullFunc_i, "nullFunc_iiiii": nullFunc_iiiii, "nullFunc_viii": nullFunc_viii, "nullFunc_v": nullFunc_v, "nullFunc_iiiiiiiii": nullFunc_iiiiiiiii, "nullFunc_viiii": nullFunc_viiii, "invoke_iiiiiiii": invoke_iiiiiiii, "invoke_viiiii": invoke_viiiii, "invoke_vi": invoke_vi, "invoke_vii": invoke_vii, "invoke_ii": invoke_ii, "invoke_iiiiiiiiiiii": invoke_iiiiiiiiiiii, "invoke_iiii": invoke_iiii, "invoke_viiiiiiiiiiiiiii": invoke_viiiiiiiiiiiiiii, "invoke_viiiiid": invoke_viiiiid, "invoke_viiiiiiii": invoke_viiiiiiii, "invoke_viiiiii": invoke_viiiiii, "invoke_viiiiiii": invoke_viiiiiii, "invoke_viiiiiid": invoke_viiiiiid, "invoke_viiiiiiiii": invoke_viiiiiiiii, "invoke_viiiiiiiiii": invoke_viiiiiiiiii, "invoke_iii": invoke_iii, "invoke_iiiiii": invoke_iiiiii, "invoke_diii": invoke_diii, "invoke_i": invoke_i, "invoke_iiiii": invoke_iiiii, "invoke_viii": invoke_viii, "invoke_v": invoke_v, "invoke_iiiiiiiii": invoke_iiiiiiiii, "invoke_viiii": invoke_viiii, "_fabs": _fabs, "_strftime": _strftime, "_pthread_cond_wait": _pthread_cond_wait, "___cxa_rethrow": ___cxa_rethrow, "_send": _send, "_vfprintf": _vfprintf, "_fread": _fread, "___ctype_b_loc": ___ctype_b_loc, "_fmod": _fmod, "___cxa_guard_acquire": ___cxa_guard_acquire, "__reallyNegative": __reallyNegative, "___gxx_personality_v0": ___gxx_personality_v0, "_ungetc": _ungetc, "___cxa_free_exception": ___cxa_free_exception, "___cxa_allocate_exception": ___cxa_allocate_exception, "___cxa_find_matching_catch": ___cxa_find_matching_catch, "___ctype_toupper_loc": ___ctype_toupper_loc, "_fflush": _fflush, "___cxa_guard_release": ___cxa_guard_release, "__addDays": __addDays, "_pwrite": _pwrite, "_strerror_r": _strerror_r, "_strftime_l": _strftime_l, "_fprintf": _fprintf, "___setErrNo": ___setErrNo, "_sbrk": _sbrk, "_uselocale": _uselocale, "_catgets": _catgets, "_newlocale": _newlocale, "___cxa_begin_catch": ___cxa_begin_catch, "_emscripten_memcpy_big": _emscripten_memcpy_big, "___cxa_end_catch": ___cxa_end_catch, "___resumeException": ___resumeException, "__ZSt18uncaught_exceptionv": __ZSt18uncaught_exceptionv, "_sysconf": _sysconf, "_pthread_getspecific": _pthread_getspecific, "__arraySum": __arraySum, "_calloc": _calloc, "___ctype_tolower_loc": ___ctype_tolower_loc, "_fileno": _fileno, "_pthread_mutex_unlock": _pthread_mutex_unlock, "_pthread_once": _pthread_once, "_pread": _pread, "_mkport": _mkport, "_pthread_key_create": _pthread_key_create, "_getc": _getc, "_write": _write, "__isLeapYear": __isLeapYear, "___errno_location": ___errno_location, "_recv": _recv, "_pthread_setspecific": _pthread_setspecific, "_fgetc": _fgetc, "_copysign": _copysign, "_fputc": _fputc, "___cxa_throw": ___cxa_throw, "_freelocale": _freelocale, "_pthread_cond_broadcast": _pthread_cond_broadcast, "_copysignl": _copysignl, "_abort": _abort, "_catclose": _catclose, "_fwrite": _fwrite, "_time": _time, "_pthread_mutex_lock": _pthread_mutex_lock, "_strerror": _strerror, "___cxa_atexit": ___cxa_atexit, "__formatString": __formatString, "_atexit": _atexit, "_catopen": _catopen, "_read": _read, "___cxa_guard_abort": ___cxa_guard_abort, "_fmodl": _fmodl, "STACKTOP": STACKTOP, "STACK_MAX": STACK_MAX, "tempDoublePtr": tempDoublePtr, "ABORT": ABORT, "cttz_i8": cttz_i8, "ctlz_i8": ctlz_i8, "NaN": NaN, "Infinity": Infinity, "___dso_handle": ___dso_handle, "_stderr": _stderr, "_stdin": _stdin, "_stdout": _stdout }, buffer);
  var real____cxa_can_catch = asm["___cxa_can_catch"]; asm["___cxa_can_catch"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real____cxa_can_catch.apply(null, arguments);
};

var real__main = asm["_main"]; asm["_main"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__main.apply(null, arguments);
};

var real__realloc = asm["_realloc"]; asm["_realloc"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__realloc.apply(null, arguments);
};

var real__i64Add = asm["_i64Add"]; asm["_i64Add"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__i64Add.apply(null, arguments);
};

var real__memmove = asm["_memmove"]; asm["_memmove"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__memmove.apply(null, arguments);
};

var real____cxa_is_pointer_type = asm["___cxa_is_pointer_type"]; asm["___cxa_is_pointer_type"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real____cxa_is_pointer_type.apply(null, arguments);
};

var real__i64Subtract = asm["_i64Subtract"]; asm["_i64Subtract"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__i64Subtract.apply(null, arguments);
};

var real__strlen = asm["_strlen"]; asm["_strlen"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__strlen.apply(null, arguments);
};

var real__bitshift64Lshr = asm["_bitshift64Lshr"]; asm["_bitshift64Lshr"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__bitshift64Lshr.apply(null, arguments);
};

var real__bitshift64Shl = asm["_bitshift64Shl"]; asm["_bitshift64Shl"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__bitshift64Shl.apply(null, arguments);
};

var real___GLOBAL__I_a = asm["__GLOBAL__I_a"]; asm["__GLOBAL__I_a"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___GLOBAL__I_a.apply(null, arguments);
};

var real_runPostSets = asm["runPostSets"]; asm["runPostSets"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real_runPostSets.apply(null, arguments);
};
var ___cxa_can_catch = Module["___cxa_can_catch"] = asm["___cxa_can_catch"];
var _free = Module["_free"] = asm["_free"];
var _main = Module["_main"] = asm["_main"];
var _realloc = Module["_realloc"] = asm["_realloc"];
var _i64Add = Module["_i64Add"] = asm["_i64Add"];
var _memmove = Module["_memmove"] = asm["_memmove"];
var ___cxa_is_pointer_type = Module["___cxa_is_pointer_type"] = asm["___cxa_is_pointer_type"];
var _i64Subtract = Module["_i64Subtract"] = asm["_i64Subtract"];
var _memset = Module["_memset"] = asm["_memset"];
var _malloc = Module["_malloc"] = asm["_malloc"];
var _memcpy = Module["_memcpy"] = asm["_memcpy"];
var _strlen = Module["_strlen"] = asm["_strlen"];
var _bitshift64Lshr = Module["_bitshift64Lshr"] = asm["_bitshift64Lshr"];
var _bitshift64Shl = Module["_bitshift64Shl"] = asm["_bitshift64Shl"];
var __GLOBAL__I_a = Module["__GLOBAL__I_a"] = asm["__GLOBAL__I_a"];
var runPostSets = Module["runPostSets"] = asm["runPostSets"];
var dynCall_iiiiiiii = Module["dynCall_iiiiiiii"] = asm["dynCall_iiiiiiii"];
var dynCall_viiiii = Module["dynCall_viiiii"] = asm["dynCall_viiiii"];
var dynCall_vi = Module["dynCall_vi"] = asm["dynCall_vi"];
var dynCall_vii = Module["dynCall_vii"] = asm["dynCall_vii"];
var dynCall_ii = Module["dynCall_ii"] = asm["dynCall_ii"];
var dynCall_iiiiiiiiiiii = Module["dynCall_iiiiiiiiiiii"] = asm["dynCall_iiiiiiiiiiii"];
var dynCall_iiii = Module["dynCall_iiii"] = asm["dynCall_iiii"];
var dynCall_viiiiiiiiiiiiiii = Module["dynCall_viiiiiiiiiiiiiii"] = asm["dynCall_viiiiiiiiiiiiiii"];
var dynCall_viiiiid = Module["dynCall_viiiiid"] = asm["dynCall_viiiiid"];
var dynCall_viiiiiiii = Module["dynCall_viiiiiiii"] = asm["dynCall_viiiiiiii"];
var dynCall_viiiiii = Module["dynCall_viiiiii"] = asm["dynCall_viiiiii"];
var dynCall_viiiiiii = Module["dynCall_viiiiiii"] = asm["dynCall_viiiiiii"];
var dynCall_viiiiiid = Module["dynCall_viiiiiid"] = asm["dynCall_viiiiiid"];
var dynCall_viiiiiiiii = Module["dynCall_viiiiiiiii"] = asm["dynCall_viiiiiiiii"];
var dynCall_viiiiiiiiii = Module["dynCall_viiiiiiiiii"] = asm["dynCall_viiiiiiiiii"];
var dynCall_iii = Module["dynCall_iii"] = asm["dynCall_iii"];
var dynCall_iiiiii = Module["dynCall_iiiiii"] = asm["dynCall_iiiiii"];
var dynCall_diii = Module["dynCall_diii"] = asm["dynCall_diii"];
var dynCall_i = Module["dynCall_i"] = asm["dynCall_i"];
var dynCall_iiiii = Module["dynCall_iiiii"] = asm["dynCall_iiiii"];
var dynCall_viii = Module["dynCall_viii"] = asm["dynCall_viii"];
var dynCall_v = Module["dynCall_v"] = asm["dynCall_v"];
var dynCall_iiiiiiiii = Module["dynCall_iiiiiiiii"] = asm["dynCall_iiiiiiiii"];
var dynCall_viiii = Module["dynCall_viiii"] = asm["dynCall_viiii"];
  
  Runtime.stackAlloc = asm['stackAlloc'];
  Runtime.stackSave = asm['stackSave'];
  Runtime.stackRestore = asm['stackRestore'];
  Runtime.setTempRet0 = asm['setTempRet0'];
  Runtime.getTempRet0 = asm['getTempRet0'];
  

// TODO: strip out parts of this we do not need

//======= begin closure i64 code =======

// Copyright 2009 The Closure Library Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/**
 * @fileoverview Defines a Long class for representing a 64-bit two's-complement
 * integer value, which faithfully simulates the behavior of a Java "long". This
 * implementation is derived from LongLib in GWT.
 *
 */

var i64Math = (function() { // Emscripten wrapper
  var goog = { math: {} };


  /**
   * Constructs a 64-bit two's-complement integer, given its low and high 32-bit
   * values as *signed* integers.  See the from* functions below for more
   * convenient ways of constructing Longs.
   *
   * The internal representation of a long is the two given signed, 32-bit values.
   * We use 32-bit pieces because these are the size of integers on which
   * Javascript performs bit-operations.  For operations like addition and
   * multiplication, we split each number into 16-bit pieces, which can easily be
   * multiplied within Javascript's floating-point representation without overflow
   * or change in sign.
   *
   * In the algorithms below, we frequently reduce the negative case to the
   * positive case by negating the input(s) and then post-processing the result.
   * Note that we must ALWAYS check specially whether those values are MIN_VALUE
   * (-2^63) because -MIN_VALUE == MIN_VALUE (since 2^63 cannot be represented as
   * a positive number, it overflows back into a negative).  Not handling this
   * case would often result in infinite recursion.
   *
   * @param {number} low  The low (signed) 32 bits of the long.
   * @param {number} high  The high (signed) 32 bits of the long.
   * @constructor
   */
  goog.math.Long = function(low, high) {
    /**
     * @type {number}
     * @private
     */
    this.low_ = low | 0;  // force into 32 signed bits.

    /**
     * @type {number}
     * @private
     */
    this.high_ = high | 0;  // force into 32 signed bits.
  };


  // NOTE: Common constant values ZERO, ONE, NEG_ONE, etc. are defined below the
  // from* methods on which they depend.


  /**
   * A cache of the Long representations of small integer values.
   * @type {!Object}
   * @private
   */
  goog.math.Long.IntCache_ = {};


  /**
   * Returns a Long representing the given (32-bit) integer value.
   * @param {number} value The 32-bit integer in question.
   * @return {!goog.math.Long} The corresponding Long value.
   */
  goog.math.Long.fromInt = function(value) {
    if (-128 <= value && value < 128) {
      var cachedObj = goog.math.Long.IntCache_[value];
      if (cachedObj) {
        return cachedObj;
      }
    }

    var obj = new goog.math.Long(value | 0, value < 0 ? -1 : 0);
    if (-128 <= value && value < 128) {
      goog.math.Long.IntCache_[value] = obj;
    }
    return obj;
  };


  /**
   * Returns a Long representing the given value, provided that it is a finite
   * number.  Otherwise, zero is returned.
   * @param {number} value The number in question.
   * @return {!goog.math.Long} The corresponding Long value.
   */
  goog.math.Long.fromNumber = function(value) {
    if (isNaN(value) || !isFinite(value)) {
      return goog.math.Long.ZERO;
    } else if (value <= -goog.math.Long.TWO_PWR_63_DBL_) {
      return goog.math.Long.MIN_VALUE;
    } else if (value + 1 >= goog.math.Long.TWO_PWR_63_DBL_) {
      return goog.math.Long.MAX_VALUE;
    } else if (value < 0) {
      return goog.math.Long.fromNumber(-value).negate();
    } else {
      return new goog.math.Long(
          (value % goog.math.Long.TWO_PWR_32_DBL_) | 0,
          (value / goog.math.Long.TWO_PWR_32_DBL_) | 0);
    }
  };


  /**
   * Returns a Long representing the 64-bit integer that comes by concatenating
   * the given high and low bits.  Each is assumed to use 32 bits.
   * @param {number} lowBits The low 32-bits.
   * @param {number} highBits The high 32-bits.
   * @return {!goog.math.Long} The corresponding Long value.
   */
  goog.math.Long.fromBits = function(lowBits, highBits) {
    return new goog.math.Long(lowBits, highBits);
  };


  /**
   * Returns a Long representation of the given string, written using the given
   * radix.
   * @param {string} str The textual representation of the Long.
   * @param {number=} opt_radix The radix in which the text is written.
   * @return {!goog.math.Long} The corresponding Long value.
   */
  goog.math.Long.fromString = function(str, opt_radix) {
    if (str.length == 0) {
      throw Error('number format error: empty string');
    }

    var radix = opt_radix || 10;
    if (radix < 2 || 36 < radix) {
      throw Error('radix out of range: ' + radix);
    }

    if (str.charAt(0) == '-') {
      return goog.math.Long.fromString(str.substring(1), radix).negate();
    } else if (str.indexOf('-') >= 0) {
      throw Error('number format error: interior "-" character: ' + str);
    }

    // Do several (8) digits each time through the loop, so as to
    // minimize the calls to the very expensive emulated div.
    var radixToPower = goog.math.Long.fromNumber(Math.pow(radix, 8));

    var result = goog.math.Long.ZERO;
    for (var i = 0; i < str.length; i += 8) {
      var size = Math.min(8, str.length - i);
      var value = parseInt(str.substring(i, i + size), radix);
      if (size < 8) {
        var power = goog.math.Long.fromNumber(Math.pow(radix, size));
        result = result.multiply(power).add(goog.math.Long.fromNumber(value));
      } else {
        result = result.multiply(radixToPower);
        result = result.add(goog.math.Long.fromNumber(value));
      }
    }
    return result;
  };


  // NOTE: the compiler should inline these constant values below and then remove
  // these variables, so there should be no runtime penalty for these.


  /**
   * Number used repeated below in calculations.  This must appear before the
   * first call to any from* function below.
   * @type {number}
   * @private
   */
  goog.math.Long.TWO_PWR_16_DBL_ = 1 << 16;


  /**
   * @type {number}
   * @private
   */
  goog.math.Long.TWO_PWR_24_DBL_ = 1 << 24;


  /**
   * @type {number}
   * @private
   */
  goog.math.Long.TWO_PWR_32_DBL_ =
      goog.math.Long.TWO_PWR_16_DBL_ * goog.math.Long.TWO_PWR_16_DBL_;


  /**
   * @type {number}
   * @private
   */
  goog.math.Long.TWO_PWR_31_DBL_ =
      goog.math.Long.TWO_PWR_32_DBL_ / 2;


  /**
   * @type {number}
   * @private
   */
  goog.math.Long.TWO_PWR_48_DBL_ =
      goog.math.Long.TWO_PWR_32_DBL_ * goog.math.Long.TWO_PWR_16_DBL_;


  /**
   * @type {number}
   * @private
   */
  goog.math.Long.TWO_PWR_64_DBL_ =
      goog.math.Long.TWO_PWR_32_DBL_ * goog.math.Long.TWO_PWR_32_DBL_;


  /**
   * @type {number}
   * @private
   */
  goog.math.Long.TWO_PWR_63_DBL_ =
      goog.math.Long.TWO_PWR_64_DBL_ / 2;


  /** @type {!goog.math.Long} */
  goog.math.Long.ZERO = goog.math.Long.fromInt(0);


  /** @type {!goog.math.Long} */
  goog.math.Long.ONE = goog.math.Long.fromInt(1);


  /** @type {!goog.math.Long} */
  goog.math.Long.NEG_ONE = goog.math.Long.fromInt(-1);


  /** @type {!goog.math.Long} */
  goog.math.Long.MAX_VALUE =
      goog.math.Long.fromBits(0xFFFFFFFF | 0, 0x7FFFFFFF | 0);


  /** @type {!goog.math.Long} */
  goog.math.Long.MIN_VALUE = goog.math.Long.fromBits(0, 0x80000000 | 0);


  /**
   * @type {!goog.math.Long}
   * @private
   */
  goog.math.Long.TWO_PWR_24_ = goog.math.Long.fromInt(1 << 24);


  /** @return {number} The value, assuming it is a 32-bit integer. */
  goog.math.Long.prototype.toInt = function() {
    return this.low_;
  };


  /** @return {number} The closest floating-point representation to this value. */
  goog.math.Long.prototype.toNumber = function() {
    return this.high_ * goog.math.Long.TWO_PWR_32_DBL_ +
           this.getLowBitsUnsigned();
  };


  /**
   * @param {number=} opt_radix The radix in which the text should be written.
   * @return {string} The textual representation of this value.
   */
  goog.math.Long.prototype.toString = function(opt_radix) {
    var radix = opt_radix || 10;
    if (radix < 2 || 36 < radix) {
      throw Error('radix out of range: ' + radix);
    }

    if (this.isZero()) {
      return '0';
    }

    if (this.isNegative()) {
      if (this.equals(goog.math.Long.MIN_VALUE)) {
        // We need to change the Long value before it can be negated, so we remove
        // the bottom-most digit in this base and then recurse to do the rest.
        var radixLong = goog.math.Long.fromNumber(radix);
        var div = this.div(radixLong);
        var rem = div.multiply(radixLong).subtract(this);
        return div.toString(radix) + rem.toInt().toString(radix);
      } else {
        return '-' + this.negate().toString(radix);
      }
    }

    // Do several (6) digits each time through the loop, so as to
    // minimize the calls to the very expensive emulated div.
    var radixToPower = goog.math.Long.fromNumber(Math.pow(radix, 6));

    var rem = this;
    var result = '';
    while (true) {
      var remDiv = rem.div(radixToPower);
      var intval = rem.subtract(remDiv.multiply(radixToPower)).toInt();
      var digits = intval.toString(radix);

      rem = remDiv;
      if (rem.isZero()) {
        return digits + result;
      } else {
        while (digits.length < 6) {
          digits = '0' + digits;
        }
        result = '' + digits + result;
      }
    }
  };


  /** @return {number} The high 32-bits as a signed value. */
  goog.math.Long.prototype.getHighBits = function() {
    return this.high_;
  };


  /** @return {number} The low 32-bits as a signed value. */
  goog.math.Long.prototype.getLowBits = function() {
    return this.low_;
  };


  /** @return {number} The low 32-bits as an unsigned value. */
  goog.math.Long.prototype.getLowBitsUnsigned = function() {
    return (this.low_ >= 0) ?
        this.low_ : goog.math.Long.TWO_PWR_32_DBL_ + this.low_;
  };


  /**
   * @return {number} Returns the number of bits needed to represent the absolute
   *     value of this Long.
   */
  goog.math.Long.prototype.getNumBitsAbs = function() {
    if (this.isNegative()) {
      if (this.equals(goog.math.Long.MIN_VALUE)) {
        return 64;
      } else {
        return this.negate().getNumBitsAbs();
      }
    } else {
      var val = this.high_ != 0 ? this.high_ : this.low_;
      for (var bit = 31; bit > 0; bit--) {
        if ((val & (1 << bit)) != 0) {
          break;
        }
      }
      return this.high_ != 0 ? bit + 33 : bit + 1;
    }
  };


  /** @return {boolean} Whether this value is zero. */
  goog.math.Long.prototype.isZero = function() {
    return this.high_ == 0 && this.low_ == 0;
  };


  /** @return {boolean} Whether this value is negative. */
  goog.math.Long.prototype.isNegative = function() {
    return this.high_ < 0;
  };


  /** @return {boolean} Whether this value is odd. */
  goog.math.Long.prototype.isOdd = function() {
    return (this.low_ & 1) == 1;
  };


  /**
   * @param {goog.math.Long} other Long to compare against.
   * @return {boolean} Whether this Long equals the other.
   */
  goog.math.Long.prototype.equals = function(other) {
    return (this.high_ == other.high_) && (this.low_ == other.low_);
  };


  /**
   * @param {goog.math.Long} other Long to compare against.
   * @return {boolean} Whether this Long does not equal the other.
   */
  goog.math.Long.prototype.notEquals = function(other) {
    return (this.high_ != other.high_) || (this.low_ != other.low_);
  };


  /**
   * @param {goog.math.Long} other Long to compare against.
   * @return {boolean} Whether this Long is less than the other.
   */
  goog.math.Long.prototype.lessThan = function(other) {
    return this.compare(other) < 0;
  };


  /**
   * @param {goog.math.Long} other Long to compare against.
   * @return {boolean} Whether this Long is less than or equal to the other.
   */
  goog.math.Long.prototype.lessThanOrEqual = function(other) {
    return this.compare(other) <= 0;
  };


  /**
   * @param {goog.math.Long} other Long to compare against.
   * @return {boolean} Whether this Long is greater than the other.
   */
  goog.math.Long.prototype.greaterThan = function(other) {
    return this.compare(other) > 0;
  };


  /**
   * @param {goog.math.Long} other Long to compare against.
   * @return {boolean} Whether this Long is greater than or equal to the other.
   */
  goog.math.Long.prototype.greaterThanOrEqual = function(other) {
    return this.compare(other) >= 0;
  };


  /**
   * Compares this Long with the given one.
   * @param {goog.math.Long} other Long to compare against.
   * @return {number} 0 if they are the same, 1 if the this is greater, and -1
   *     if the given one is greater.
   */
  goog.math.Long.prototype.compare = function(other) {
    if (this.equals(other)) {
      return 0;
    }

    var thisNeg = this.isNegative();
    var otherNeg = other.isNegative();
    if (thisNeg && !otherNeg) {
      return -1;
    }
    if (!thisNeg && otherNeg) {
      return 1;
    }

    // at this point, the signs are the same, so subtraction will not overflow
    if (this.subtract(other).isNegative()) {
      return -1;
    } else {
      return 1;
    }
  };


  /** @return {!goog.math.Long} The negation of this value. */
  goog.math.Long.prototype.negate = function() {
    if (this.equals(goog.math.Long.MIN_VALUE)) {
      return goog.math.Long.MIN_VALUE;
    } else {
      return this.not().add(goog.math.Long.ONE);
    }
  };


  /**
   * Returns the sum of this and the given Long.
   * @param {goog.math.Long} other Long to add to this one.
   * @return {!goog.math.Long} The sum of this and the given Long.
   */
  goog.math.Long.prototype.add = function(other) {
    // Divide each number into 4 chunks of 16 bits, and then sum the chunks.

    var a48 = this.high_ >>> 16;
    var a32 = this.high_ & 0xFFFF;
    var a16 = this.low_ >>> 16;
    var a00 = this.low_ & 0xFFFF;

    var b48 = other.high_ >>> 16;
    var b32 = other.high_ & 0xFFFF;
    var b16 = other.low_ >>> 16;
    var b00 = other.low_ & 0xFFFF;

    var c48 = 0, c32 = 0, c16 = 0, c00 = 0;
    c00 += a00 + b00;
    c16 += c00 >>> 16;
    c00 &= 0xFFFF;
    c16 += a16 + b16;
    c32 += c16 >>> 16;
    c16 &= 0xFFFF;
    c32 += a32 + b32;
    c48 += c32 >>> 16;
    c32 &= 0xFFFF;
    c48 += a48 + b48;
    c48 &= 0xFFFF;
    return goog.math.Long.fromBits((c16 << 16) | c00, (c48 << 16) | c32);
  };


  /**
   * Returns the difference of this and the given Long.
   * @param {goog.math.Long} other Long to subtract from this.
   * @return {!goog.math.Long} The difference of this and the given Long.
   */
  goog.math.Long.prototype.subtract = function(other) {
    return this.add(other.negate());
  };


  /**
   * Returns the product of this and the given long.
   * @param {goog.math.Long} other Long to multiply with this.
   * @return {!goog.math.Long} The product of this and the other.
   */
  goog.math.Long.prototype.multiply = function(other) {
    if (this.isZero()) {
      return goog.math.Long.ZERO;
    } else if (other.isZero()) {
      return goog.math.Long.ZERO;
    }

    if (this.equals(goog.math.Long.MIN_VALUE)) {
      return other.isOdd() ? goog.math.Long.MIN_VALUE : goog.math.Long.ZERO;
    } else if (other.equals(goog.math.Long.MIN_VALUE)) {
      return this.isOdd() ? goog.math.Long.MIN_VALUE : goog.math.Long.ZERO;
    }

    if (this.isNegative()) {
      if (other.isNegative()) {
        return this.negate().multiply(other.negate());
      } else {
        return this.negate().multiply(other).negate();
      }
    } else if (other.isNegative()) {
      return this.multiply(other.negate()).negate();
    }

    // If both longs are small, use float multiplication
    if (this.lessThan(goog.math.Long.TWO_PWR_24_) &&
        other.lessThan(goog.math.Long.TWO_PWR_24_)) {
      return goog.math.Long.fromNumber(this.toNumber() * other.toNumber());
    }

    // Divide each long into 4 chunks of 16 bits, and then add up 4x4 products.
    // We can skip products that would overflow.

    var a48 = this.high_ >>> 16;
    var a32 = this.high_ & 0xFFFF;
    var a16 = this.low_ >>> 16;
    var a00 = this.low_ & 0xFFFF;

    var b48 = other.high_ >>> 16;
    var b32 = other.high_ & 0xFFFF;
    var b16 = other.low_ >>> 16;
    var b00 = other.low_ & 0xFFFF;

    var c48 = 0, c32 = 0, c16 = 0, c00 = 0;
    c00 += a00 * b00;
    c16 += c00 >>> 16;
    c00 &= 0xFFFF;
    c16 += a16 * b00;
    c32 += c16 >>> 16;
    c16 &= 0xFFFF;
    c16 += a00 * b16;
    c32 += c16 >>> 16;
    c16 &= 0xFFFF;
    c32 += a32 * b00;
    c48 += c32 >>> 16;
    c32 &= 0xFFFF;
    c32 += a16 * b16;
    c48 += c32 >>> 16;
    c32 &= 0xFFFF;
    c32 += a00 * b32;
    c48 += c32 >>> 16;
    c32 &= 0xFFFF;
    c48 += a48 * b00 + a32 * b16 + a16 * b32 + a00 * b48;
    c48 &= 0xFFFF;
    return goog.math.Long.fromBits((c16 << 16) | c00, (c48 << 16) | c32);
  };


  /**
   * Returns this Long divided by the given one.
   * @param {goog.math.Long} other Long by which to divide.
   * @return {!goog.math.Long} This Long divided by the given one.
   */
  goog.math.Long.prototype.div = function(other) {
    if (other.isZero()) {
      throw Error('division by zero');
    } else if (this.isZero()) {
      return goog.math.Long.ZERO;
    }

    if (this.equals(goog.math.Long.MIN_VALUE)) {
      if (other.equals(goog.math.Long.ONE) ||
          other.equals(goog.math.Long.NEG_ONE)) {
        return goog.math.Long.MIN_VALUE;  // recall that -MIN_VALUE == MIN_VALUE
      } else if (other.equals(goog.math.Long.MIN_VALUE)) {
        return goog.math.Long.ONE;
      } else {
        // At this point, we have |other| >= 2, so |this/other| < |MIN_VALUE|.
        var halfThis = this.shiftRight(1);
        var approx = halfThis.div(other).shiftLeft(1);
        if (approx.equals(goog.math.Long.ZERO)) {
          return other.isNegative() ? goog.math.Long.ONE : goog.math.Long.NEG_ONE;
        } else {
          var rem = this.subtract(other.multiply(approx));
          var result = approx.add(rem.div(other));
          return result;
        }
      }
    } else if (other.equals(goog.math.Long.MIN_VALUE)) {
      return goog.math.Long.ZERO;
    }

    if (this.isNegative()) {
      if (other.isNegative()) {
        return this.negate().div(other.negate());
      } else {
        return this.negate().div(other).negate();
      }
    } else if (other.isNegative()) {
      return this.div(other.negate()).negate();
    }

    // Repeat the following until the remainder is less than other:  find a
    // floating-point that approximates remainder / other *from below*, add this
    // into the result, and subtract it from the remainder.  It is critical that
    // the approximate value is less than or equal to the real value so that the
    // remainder never becomes negative.
    var res = goog.math.Long.ZERO;
    var rem = this;
    while (rem.greaterThanOrEqual(other)) {
      // Approximate the result of division. This may be a little greater or
      // smaller than the actual value.
      var approx = Math.max(1, Math.floor(rem.toNumber() / other.toNumber()));

      // We will tweak the approximate result by changing it in the 48-th digit or
      // the smallest non-fractional digit, whichever is larger.
      var log2 = Math.ceil(Math.log(approx) / Math.LN2);
      var delta = (log2 <= 48) ? 1 : Math.pow(2, log2 - 48);

      // Decrease the approximation until it is smaller than the remainder.  Note
      // that if it is too large, the product overflows and is negative.
      var approxRes = goog.math.Long.fromNumber(approx);
      var approxRem = approxRes.multiply(other);
      while (approxRem.isNegative() || approxRem.greaterThan(rem)) {
        approx -= delta;
        approxRes = goog.math.Long.fromNumber(approx);
        approxRem = approxRes.multiply(other);
      }

      // We know the answer can't be zero... and actually, zero would cause
      // infinite recursion since we would make no progress.
      if (approxRes.isZero()) {
        approxRes = goog.math.Long.ONE;
      }

      res = res.add(approxRes);
      rem = rem.subtract(approxRem);
    }
    return res;
  };


  /**
   * Returns this Long modulo the given one.
   * @param {goog.math.Long} other Long by which to mod.
   * @return {!goog.math.Long} This Long modulo the given one.
   */
  goog.math.Long.prototype.modulo = function(other) {
    return this.subtract(this.div(other).multiply(other));
  };


  /** @return {!goog.math.Long} The bitwise-NOT of this value. */
  goog.math.Long.prototype.not = function() {
    return goog.math.Long.fromBits(~this.low_, ~this.high_);
  };


  /**
   * Returns the bitwise-AND of this Long and the given one.
   * @param {goog.math.Long} other The Long with which to AND.
   * @return {!goog.math.Long} The bitwise-AND of this and the other.
   */
  goog.math.Long.prototype.and = function(other) {
    return goog.math.Long.fromBits(this.low_ & other.low_,
                                   this.high_ & other.high_);
  };


  /**
   * Returns the bitwise-OR of this Long and the given one.
   * @param {goog.math.Long} other The Long with which to OR.
   * @return {!goog.math.Long} The bitwise-OR of this and the other.
   */
  goog.math.Long.prototype.or = function(other) {
    return goog.math.Long.fromBits(this.low_ | other.low_,
                                   this.high_ | other.high_);
  };


  /**
   * Returns the bitwise-XOR of this Long and the given one.
   * @param {goog.math.Long} other The Long with which to XOR.
   * @return {!goog.math.Long} The bitwise-XOR of this and the other.
   */
  goog.math.Long.prototype.xor = function(other) {
    return goog.math.Long.fromBits(this.low_ ^ other.low_,
                                   this.high_ ^ other.high_);
  };


  /**
   * Returns this Long with bits shifted to the left by the given amount.
   * @param {number} numBits The number of bits by which to shift.
   * @return {!goog.math.Long} This shifted to the left by the given amount.
   */
  goog.math.Long.prototype.shiftLeft = function(numBits) {
    numBits &= 63;
    if (numBits == 0) {
      return this;
    } else {
      var low = this.low_;
      if (numBits < 32) {
        var high = this.high_;
        return goog.math.Long.fromBits(
            low << numBits,
            (high << numBits) | (low >>> (32 - numBits)));
      } else {
        return goog.math.Long.fromBits(0, low << (numBits - 32));
      }
    }
  };


  /**
   * Returns this Long with bits shifted to the right by the given amount.
   * @param {number} numBits The number of bits by which to shift.
   * @return {!goog.math.Long} This shifted to the right by the given amount.
   */
  goog.math.Long.prototype.shiftRight = function(numBits) {
    numBits &= 63;
    if (numBits == 0) {
      return this;
    } else {
      var high = this.high_;
      if (numBits < 32) {
        var low = this.low_;
        return goog.math.Long.fromBits(
            (low >>> numBits) | (high << (32 - numBits)),
            high >> numBits);
      } else {
        return goog.math.Long.fromBits(
            high >> (numBits - 32),
            high >= 0 ? 0 : -1);
      }
    }
  };


  /**
   * Returns this Long with bits shifted to the right by the given amount, with
   * the new top bits matching the current sign bit.
   * @param {number} numBits The number of bits by which to shift.
   * @return {!goog.math.Long} This shifted to the right by the given amount, with
   *     zeros placed into the new leading bits.
   */
  goog.math.Long.prototype.shiftRightUnsigned = function(numBits) {
    numBits &= 63;
    if (numBits == 0) {
      return this;
    } else {
      var high = this.high_;
      if (numBits < 32) {
        var low = this.low_;
        return goog.math.Long.fromBits(
            (low >>> numBits) | (high << (32 - numBits)),
            high >>> numBits);
      } else if (numBits == 32) {
        return goog.math.Long.fromBits(high, 0);
      } else {
        return goog.math.Long.fromBits(high >>> (numBits - 32), 0);
      }
    }
  };

  //======= begin jsbn =======

  var navigator = { appName: 'Modern Browser' }; // polyfill a little

  // Copyright (c) 2005  Tom Wu
  // All Rights Reserved.
  // http://www-cs-students.stanford.edu/~tjw/jsbn/

  /*
   * Copyright (c) 2003-2005  Tom Wu
   * All Rights Reserved.
   *
   * Permission is hereby granted, free of charge, to any person obtaining
   * a copy of this software and associated documentation files (the
   * "Software"), to deal in the Software without restriction, including
   * without limitation the rights to use, copy, modify, merge, publish,
   * distribute, sublicense, and/or sell copies of the Software, and to
   * permit persons to whom the Software is furnished to do so, subject to
   * the following conditions:
   *
   * The above copyright notice and this permission notice shall be
   * included in all copies or substantial portions of the Software.
   *
   * THE SOFTWARE IS PROVIDED "AS-IS" AND WITHOUT WARRANTY OF ANY KIND, 
   * EXPRESS, IMPLIED OR OTHERWISE, INCLUDING WITHOUT LIMITATION, ANY 
   * WARRANTY OF MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE.  
   *
   * IN NO EVENT SHALL TOM WU BE LIABLE FOR ANY SPECIAL, INCIDENTAL,
   * INDIRECT OR CONSEQUENTIAL DAMAGES OF ANY KIND, OR ANY DAMAGES WHATSOEVER
   * RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER OR NOT ADVISED OF
   * THE POSSIBILITY OF DAMAGE, AND ON ANY THEORY OF LIABILITY, ARISING OUT
   * OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
   *
   * In addition, the following condition applies:
   *
   * All redistributions must retain an intact copy of this copyright notice
   * and disclaimer.
   */

  // Basic JavaScript BN library - subset useful for RSA encryption.

  // Bits per digit
  var dbits;

  // JavaScript engine analysis
  var canary = 0xdeadbeefcafe;
  var j_lm = ((canary&0xffffff)==0xefcafe);

  // (public) Constructor
  function BigInteger(a,b,c) {
    if(a != null)
      if("number" == typeof a) this.fromNumber(a,b,c);
      else if(b == null && "string" != typeof a) this.fromString(a,256);
      else this.fromString(a,b);
  }

  // return new, unset BigInteger
  function nbi() { return new BigInteger(null); }

  // am: Compute w_j += (x*this_i), propagate carries,
  // c is initial carry, returns final carry.
  // c < 3*dvalue, x < 2*dvalue, this_i < dvalue
  // We need to select the fastest one that works in this environment.

  // am1: use a single mult and divide to get the high bits,
  // max digit bits should be 26 because
  // max internal value = 2*dvalue^2-2*dvalue (< 2^53)
  function am1(i,x,w,j,c,n) {
    while(--n >= 0) {
      var v = x*this[i++]+w[j]+c;
      c = Math.floor(v/0x4000000);
      w[j++] = v&0x3ffffff;
    }
    return c;
  }
  // am2 avoids a big mult-and-extract completely.
  // Max digit bits should be <= 30 because we do bitwise ops
  // on values up to 2*hdvalue^2-hdvalue-1 (< 2^31)
  function am2(i,x,w,j,c,n) {
    var xl = x&0x7fff, xh = x>>15;
    while(--n >= 0) {
      var l = this[i]&0x7fff;
      var h = this[i++]>>15;
      var m = xh*l+h*xl;
      l = xl*l+((m&0x7fff)<<15)+w[j]+(c&0x3fffffff);
      c = (l>>>30)+(m>>>15)+xh*h+(c>>>30);
      w[j++] = l&0x3fffffff;
    }
    return c;
  }
  // Alternately, set max digit bits to 28 since some
  // browsers slow down when dealing with 32-bit numbers.
  function am3(i,x,w,j,c,n) {
    var xl = x&0x3fff, xh = x>>14;
    while(--n >= 0) {
      var l = this[i]&0x3fff;
      var h = this[i++]>>14;
      var m = xh*l+h*xl;
      l = xl*l+((m&0x3fff)<<14)+w[j]+c;
      c = (l>>28)+(m>>14)+xh*h;
      w[j++] = l&0xfffffff;
    }
    return c;
  }
  if(j_lm && (navigator.appName == "Microsoft Internet Explorer")) {
    BigInteger.prototype.am = am2;
    dbits = 30;
  }
  else if(j_lm && (navigator.appName != "Netscape")) {
    BigInteger.prototype.am = am1;
    dbits = 26;
  }
  else { // Mozilla/Netscape seems to prefer am3
    BigInteger.prototype.am = am3;
    dbits = 28;
  }

  BigInteger.prototype.DB = dbits;
  BigInteger.prototype.DM = ((1<<dbits)-1);
  BigInteger.prototype.DV = (1<<dbits);

  var BI_FP = 52;
  BigInteger.prototype.FV = Math.pow(2,BI_FP);
  BigInteger.prototype.F1 = BI_FP-dbits;
  BigInteger.prototype.F2 = 2*dbits-BI_FP;

  // Digit conversions
  var BI_RM = "0123456789abcdefghijklmnopqrstuvwxyz";
  var BI_RC = new Array();
  var rr,vv;
  rr = "0".charCodeAt(0);
  for(vv = 0; vv <= 9; ++vv) BI_RC[rr++] = vv;
  rr = "a".charCodeAt(0);
  for(vv = 10; vv < 36; ++vv) BI_RC[rr++] = vv;
  rr = "A".charCodeAt(0);
  for(vv = 10; vv < 36; ++vv) BI_RC[rr++] = vv;

  function int2char(n) { return BI_RM.charAt(n); }
  function intAt(s,i) {
    var c = BI_RC[s.charCodeAt(i)];
    return (c==null)?-1:c;
  }

  // (protected) copy this to r
  function bnpCopyTo(r) {
    for(var i = this.t-1; i >= 0; --i) r[i] = this[i];
    r.t = this.t;
    r.s = this.s;
  }

  // (protected) set from integer value x, -DV <= x < DV
  function bnpFromInt(x) {
    this.t = 1;
    this.s = (x<0)?-1:0;
    if(x > 0) this[0] = x;
    else if(x < -1) this[0] = x+DV;
    else this.t = 0;
  }

  // return bigint initialized to value
  function nbv(i) { var r = nbi(); r.fromInt(i); return r; }

  // (protected) set from string and radix
  function bnpFromString(s,b) {
    var k;
    if(b == 16) k = 4;
    else if(b == 8) k = 3;
    else if(b == 256) k = 8; // byte array
    else if(b == 2) k = 1;
    else if(b == 32) k = 5;
    else if(b == 4) k = 2;
    else { this.fromRadix(s,b); return; }
    this.t = 0;
    this.s = 0;
    var i = s.length, mi = false, sh = 0;
    while(--i >= 0) {
      var x = (k==8)?s[i]&0xff:intAt(s,i);
      if(x < 0) {
        if(s.charAt(i) == "-") mi = true;
        continue;
      }
      mi = false;
      if(sh == 0)
        this[this.t++] = x;
      else if(sh+k > this.DB) {
        this[this.t-1] |= (x&((1<<(this.DB-sh))-1))<<sh;
        this[this.t++] = (x>>(this.DB-sh));
      }
      else
        this[this.t-1] |= x<<sh;
      sh += k;
      if(sh >= this.DB) sh -= this.DB;
    }
    if(k == 8 && (s[0]&0x80) != 0) {
      this.s = -1;
      if(sh > 0) this[this.t-1] |= ((1<<(this.DB-sh))-1)<<sh;
    }
    this.clamp();
    if(mi) BigInteger.ZERO.subTo(this,this);
  }

  // (protected) clamp off excess high words
  function bnpClamp() {
    var c = this.s&this.DM;
    while(this.t > 0 && this[this.t-1] == c) --this.t;
  }

  // (public) return string representation in given radix
  function bnToString(b) {
    if(this.s < 0) return "-"+this.negate().toString(b);
    var k;
    if(b == 16) k = 4;
    else if(b == 8) k = 3;
    else if(b == 2) k = 1;
    else if(b == 32) k = 5;
    else if(b == 4) k = 2;
    else return this.toRadix(b);
    var km = (1<<k)-1, d, m = false, r = "", i = this.t;
    var p = this.DB-(i*this.DB)%k;
    if(i-- > 0) {
      if(p < this.DB && (d = this[i]>>p) > 0) { m = true; r = int2char(d); }
      while(i >= 0) {
        if(p < k) {
          d = (this[i]&((1<<p)-1))<<(k-p);
          d |= this[--i]>>(p+=this.DB-k);
        }
        else {
          d = (this[i]>>(p-=k))&km;
          if(p <= 0) { p += this.DB; --i; }
        }
        if(d > 0) m = true;
        if(m) r += int2char(d);
      }
    }
    return m?r:"0";
  }

  // (public) -this
  function bnNegate() { var r = nbi(); BigInteger.ZERO.subTo(this,r); return r; }

  // (public) |this|
  function bnAbs() { return (this.s<0)?this.negate():this; }

  // (public) return + if this > a, - if this < a, 0 if equal
  function bnCompareTo(a) {
    var r = this.s-a.s;
    if(r != 0) return r;
    var i = this.t;
    r = i-a.t;
    if(r != 0) return (this.s<0)?-r:r;
    while(--i >= 0) if((r=this[i]-a[i]) != 0) return r;
    return 0;
  }

  // returns bit length of the integer x
  function nbits(x) {
    var r = 1, t;
    if((t=x>>>16) != 0) { x = t; r += 16; }
    if((t=x>>8) != 0) { x = t; r += 8; }
    if((t=x>>4) != 0) { x = t; r += 4; }
    if((t=x>>2) != 0) { x = t; r += 2; }
    if((t=x>>1) != 0) { x = t; r += 1; }
    return r;
  }

  // (public) return the number of bits in "this"
  function bnBitLength() {
    if(this.t <= 0) return 0;
    return this.DB*(this.t-1)+nbits(this[this.t-1]^(this.s&this.DM));
  }

  // (protected) r = this << n*DB
  function bnpDLShiftTo(n,r) {
    var i;
    for(i = this.t-1; i >= 0; --i) r[i+n] = this[i];
    for(i = n-1; i >= 0; --i) r[i] = 0;
    r.t = this.t+n;
    r.s = this.s;
  }

  // (protected) r = this >> n*DB
  function bnpDRShiftTo(n,r) {
    for(var i = n; i < this.t; ++i) r[i-n] = this[i];
    r.t = Math.max(this.t-n,0);
    r.s = this.s;
  }

  // (protected) r = this << n
  function bnpLShiftTo(n,r) {
    var bs = n%this.DB;
    var cbs = this.DB-bs;
    var bm = (1<<cbs)-1;
    var ds = Math.floor(n/this.DB), c = (this.s<<bs)&this.DM, i;
    for(i = this.t-1; i >= 0; --i) {
      r[i+ds+1] = (this[i]>>cbs)|c;
      c = (this[i]&bm)<<bs;
    }
    for(i = ds-1; i >= 0; --i) r[i] = 0;
    r[ds] = c;
    r.t = this.t+ds+1;
    r.s = this.s;
    r.clamp();
  }

  // (protected) r = this >> n
  function bnpRShiftTo(n,r) {
    r.s = this.s;
    var ds = Math.floor(n/this.DB);
    if(ds >= this.t) { r.t = 0; return; }
    var bs = n%this.DB;
    var cbs = this.DB-bs;
    var bm = (1<<bs)-1;
    r[0] = this[ds]>>bs;
    for(var i = ds+1; i < this.t; ++i) {
      r[i-ds-1] |= (this[i]&bm)<<cbs;
      r[i-ds] = this[i]>>bs;
    }
    if(bs > 0) r[this.t-ds-1] |= (this.s&bm)<<cbs;
    r.t = this.t-ds;
    r.clamp();
  }

  // (protected) r = this - a
  function bnpSubTo(a,r) {
    var i = 0, c = 0, m = Math.min(a.t,this.t);
    while(i < m) {
      c += this[i]-a[i];
      r[i++] = c&this.DM;
      c >>= this.DB;
    }
    if(a.t < this.t) {
      c -= a.s;
      while(i < this.t) {
        c += this[i];
        r[i++] = c&this.DM;
        c >>= this.DB;
      }
      c += this.s;
    }
    else {
      c += this.s;
      while(i < a.t) {
        c -= a[i];
        r[i++] = c&this.DM;
        c >>= this.DB;
      }
      c -= a.s;
    }
    r.s = (c<0)?-1:0;
    if(c < -1) r[i++] = this.DV+c;
    else if(c > 0) r[i++] = c;
    r.t = i;
    r.clamp();
  }

  // (protected) r = this * a, r != this,a (HAC 14.12)
  // "this" should be the larger one if appropriate.
  function bnpMultiplyTo(a,r) {
    var x = this.abs(), y = a.abs();
    var i = x.t;
    r.t = i+y.t;
    while(--i >= 0) r[i] = 0;
    for(i = 0; i < y.t; ++i) r[i+x.t] = x.am(0,y[i],r,i,0,x.t);
    r.s = 0;
    r.clamp();
    if(this.s != a.s) BigInteger.ZERO.subTo(r,r);
  }

  // (protected) r = this^2, r != this (HAC 14.16)
  function bnpSquareTo(r) {
    var x = this.abs();
    var i = r.t = 2*x.t;
    while(--i >= 0) r[i] = 0;
    for(i = 0; i < x.t-1; ++i) {
      var c = x.am(i,x[i],r,2*i,0,1);
      if((r[i+x.t]+=x.am(i+1,2*x[i],r,2*i+1,c,x.t-i-1)) >= x.DV) {
        r[i+x.t] -= x.DV;
        r[i+x.t+1] = 1;
      }
    }
    if(r.t > 0) r[r.t-1] += x.am(i,x[i],r,2*i,0,1);
    r.s = 0;
    r.clamp();
  }

  // (protected) divide this by m, quotient and remainder to q, r (HAC 14.20)
  // r != q, this != m.  q or r may be null.
  function bnpDivRemTo(m,q,r) {
    var pm = m.abs();
    if(pm.t <= 0) return;
    var pt = this.abs();
    if(pt.t < pm.t) {
      if(q != null) q.fromInt(0);
      if(r != null) this.copyTo(r);
      return;
    }
    if(r == null) r = nbi();
    var y = nbi(), ts = this.s, ms = m.s;
    var nsh = this.DB-nbits(pm[pm.t-1]);	// normalize modulus
    if(nsh > 0) { pm.lShiftTo(nsh,y); pt.lShiftTo(nsh,r); }
    else { pm.copyTo(y); pt.copyTo(r); }
    var ys = y.t;
    var y0 = y[ys-1];
    if(y0 == 0) return;
    var yt = y0*(1<<this.F1)+((ys>1)?y[ys-2]>>this.F2:0);
    var d1 = this.FV/yt, d2 = (1<<this.F1)/yt, e = 1<<this.F2;
    var i = r.t, j = i-ys, t = (q==null)?nbi():q;
    y.dlShiftTo(j,t);
    if(r.compareTo(t) >= 0) {
      r[r.t++] = 1;
      r.subTo(t,r);
    }
    BigInteger.ONE.dlShiftTo(ys,t);
    t.subTo(y,y);	// "negative" y so we can replace sub with am later
    while(y.t < ys) y[y.t++] = 0;
    while(--j >= 0) {
      // Estimate quotient digit
      var qd = (r[--i]==y0)?this.DM:Math.floor(r[i]*d1+(r[i-1]+e)*d2);
      if((r[i]+=y.am(0,qd,r,j,0,ys)) < qd) {	// Try it out
        y.dlShiftTo(j,t);
        r.subTo(t,r);
        while(r[i] < --qd) r.subTo(t,r);
      }
    }
    if(q != null) {
      r.drShiftTo(ys,q);
      if(ts != ms) BigInteger.ZERO.subTo(q,q);
    }
    r.t = ys;
    r.clamp();
    if(nsh > 0) r.rShiftTo(nsh,r);	// Denormalize remainder
    if(ts < 0) BigInteger.ZERO.subTo(r,r);
  }

  // (public) this mod a
  function bnMod(a) {
    var r = nbi();
    this.abs().divRemTo(a,null,r);
    if(this.s < 0 && r.compareTo(BigInteger.ZERO) > 0) a.subTo(r,r);
    return r;
  }

  // Modular reduction using "classic" algorithm
  function Classic(m) { this.m = m; }
  function cConvert(x) {
    if(x.s < 0 || x.compareTo(this.m) >= 0) return x.mod(this.m);
    else return x;
  }
  function cRevert(x) { return x; }
  function cReduce(x) { x.divRemTo(this.m,null,x); }
  function cMulTo(x,y,r) { x.multiplyTo(y,r); this.reduce(r); }
  function cSqrTo(x,r) { x.squareTo(r); this.reduce(r); }

  Classic.prototype.convert = cConvert;
  Classic.prototype.revert = cRevert;
  Classic.prototype.reduce = cReduce;
  Classic.prototype.mulTo = cMulTo;
  Classic.prototype.sqrTo = cSqrTo;

  // (protected) return "-1/this % 2^DB"; useful for Mont. reduction
  // justification:
  //         xy == 1 (mod m)
  //         xy =  1+km
  //   xy(2-xy) = (1+km)(1-km)
  // x[y(2-xy)] = 1-k^2m^2
  // x[y(2-xy)] == 1 (mod m^2)
  // if y is 1/x mod m, then y(2-xy) is 1/x mod m^2
  // should reduce x and y(2-xy) by m^2 at each step to keep size bounded.
  // JS multiply "overflows" differently from C/C++, so care is needed here.
  function bnpInvDigit() {
    if(this.t < 1) return 0;
    var x = this[0];
    if((x&1) == 0) return 0;
    var y = x&3;		// y == 1/x mod 2^2
    y = (y*(2-(x&0xf)*y))&0xf;	// y == 1/x mod 2^4
    y = (y*(2-(x&0xff)*y))&0xff;	// y == 1/x mod 2^8
    y = (y*(2-(((x&0xffff)*y)&0xffff)))&0xffff;	// y == 1/x mod 2^16
    // last step - calculate inverse mod DV directly;
    // assumes 16 < DB <= 32 and assumes ability to handle 48-bit ints
    y = (y*(2-x*y%this.DV))%this.DV;		// y == 1/x mod 2^dbits
    // we really want the negative inverse, and -DV < y < DV
    return (y>0)?this.DV-y:-y;
  }

  // Montgomery reduction
  function Montgomery(m) {
    this.m = m;
    this.mp = m.invDigit();
    this.mpl = this.mp&0x7fff;
    this.mph = this.mp>>15;
    this.um = (1<<(m.DB-15))-1;
    this.mt2 = 2*m.t;
  }

  // xR mod m
  function montConvert(x) {
    var r = nbi();
    x.abs().dlShiftTo(this.m.t,r);
    r.divRemTo(this.m,null,r);
    if(x.s < 0 && r.compareTo(BigInteger.ZERO) > 0) this.m.subTo(r,r);
    return r;
  }

  // x/R mod m
  function montRevert(x) {
    var r = nbi();
    x.copyTo(r);
    this.reduce(r);
    return r;
  }

  // x = x/R mod m (HAC 14.32)
  function montReduce(x) {
    while(x.t <= this.mt2)	// pad x so am has enough room later
      x[x.t++] = 0;
    for(var i = 0; i < this.m.t; ++i) {
      // faster way of calculating u0 = x[i]*mp mod DV
      var j = x[i]&0x7fff;
      var u0 = (j*this.mpl+(((j*this.mph+(x[i]>>15)*this.mpl)&this.um)<<15))&x.DM;
      // use am to combine the multiply-shift-add into one call
      j = i+this.m.t;
      x[j] += this.m.am(0,u0,x,i,0,this.m.t);
      // propagate carry
      while(x[j] >= x.DV) { x[j] -= x.DV; x[++j]++; }
    }
    x.clamp();
    x.drShiftTo(this.m.t,x);
    if(x.compareTo(this.m) >= 0) x.subTo(this.m,x);
  }

  // r = "x^2/R mod m"; x != r
  function montSqrTo(x,r) { x.squareTo(r); this.reduce(r); }

  // r = "xy/R mod m"; x,y != r
  function montMulTo(x,y,r) { x.multiplyTo(y,r); this.reduce(r); }

  Montgomery.prototype.convert = montConvert;
  Montgomery.prototype.revert = montRevert;
  Montgomery.prototype.reduce = montReduce;
  Montgomery.prototype.mulTo = montMulTo;
  Montgomery.prototype.sqrTo = montSqrTo;

  // (protected) true iff this is even
  function bnpIsEven() { return ((this.t>0)?(this[0]&1):this.s) == 0; }

  // (protected) this^e, e < 2^32, doing sqr and mul with "r" (HAC 14.79)
  function bnpExp(e,z) {
    if(e > 0xffffffff || e < 1) return BigInteger.ONE;
    var r = nbi(), r2 = nbi(), g = z.convert(this), i = nbits(e)-1;
    g.copyTo(r);
    while(--i >= 0) {
      z.sqrTo(r,r2);
      if((e&(1<<i)) > 0) z.mulTo(r2,g,r);
      else { var t = r; r = r2; r2 = t; }
    }
    return z.revert(r);
  }

  // (public) this^e % m, 0 <= e < 2^32
  function bnModPowInt(e,m) {
    var z;
    if(e < 256 || m.isEven()) z = new Classic(m); else z = new Montgomery(m);
    return this.exp(e,z);
  }

  // protected
  BigInteger.prototype.copyTo = bnpCopyTo;
  BigInteger.prototype.fromInt = bnpFromInt;
  BigInteger.prototype.fromString = bnpFromString;
  BigInteger.prototype.clamp = bnpClamp;
  BigInteger.prototype.dlShiftTo = bnpDLShiftTo;
  BigInteger.prototype.drShiftTo = bnpDRShiftTo;
  BigInteger.prototype.lShiftTo = bnpLShiftTo;
  BigInteger.prototype.rShiftTo = bnpRShiftTo;
  BigInteger.prototype.subTo = bnpSubTo;
  BigInteger.prototype.multiplyTo = bnpMultiplyTo;
  BigInteger.prototype.squareTo = bnpSquareTo;
  BigInteger.prototype.divRemTo = bnpDivRemTo;
  BigInteger.prototype.invDigit = bnpInvDigit;
  BigInteger.prototype.isEven = bnpIsEven;
  BigInteger.prototype.exp = bnpExp;

  // public
  BigInteger.prototype.toString = bnToString;
  BigInteger.prototype.negate = bnNegate;
  BigInteger.prototype.abs = bnAbs;
  BigInteger.prototype.compareTo = bnCompareTo;
  BigInteger.prototype.bitLength = bnBitLength;
  BigInteger.prototype.mod = bnMod;
  BigInteger.prototype.modPowInt = bnModPowInt;

  // "constants"
  BigInteger.ZERO = nbv(0);
  BigInteger.ONE = nbv(1);

  // jsbn2 stuff

  // (protected) convert from radix string
  function bnpFromRadix(s,b) {
    this.fromInt(0);
    if(b == null) b = 10;
    var cs = this.chunkSize(b);
    var d = Math.pow(b,cs), mi = false, j = 0, w = 0;
    for(var i = 0; i < s.length; ++i) {
      var x = intAt(s,i);
      if(x < 0) {
        if(s.charAt(i) == "-" && this.signum() == 0) mi = true;
        continue;
      }
      w = b*w+x;
      if(++j >= cs) {
        this.dMultiply(d);
        this.dAddOffset(w,0);
        j = 0;
        w = 0;
      }
    }
    if(j > 0) {
      this.dMultiply(Math.pow(b,j));
      this.dAddOffset(w,0);
    }
    if(mi) BigInteger.ZERO.subTo(this,this);
  }

  // (protected) return x s.t. r^x < DV
  function bnpChunkSize(r) { return Math.floor(Math.LN2*this.DB/Math.log(r)); }

  // (public) 0 if this == 0, 1 if this > 0
  function bnSigNum() {
    if(this.s < 0) return -1;
    else if(this.t <= 0 || (this.t == 1 && this[0] <= 0)) return 0;
    else return 1;
  }

  // (protected) this *= n, this >= 0, 1 < n < DV
  function bnpDMultiply(n) {
    this[this.t] = this.am(0,n-1,this,0,0,this.t);
    ++this.t;
    this.clamp();
  }

  // (protected) this += n << w words, this >= 0
  function bnpDAddOffset(n,w) {
    if(n == 0) return;
    while(this.t <= w) this[this.t++] = 0;
    this[w] += n;
    while(this[w] >= this.DV) {
      this[w] -= this.DV;
      if(++w >= this.t) this[this.t++] = 0;
      ++this[w];
    }
  }

  // (protected) convert to radix string
  function bnpToRadix(b) {
    if(b == null) b = 10;
    if(this.signum() == 0 || b < 2 || b > 36) return "0";
    var cs = this.chunkSize(b);
    var a = Math.pow(b,cs);
    var d = nbv(a), y = nbi(), z = nbi(), r = "";
    this.divRemTo(d,y,z);
    while(y.signum() > 0) {
      r = (a+z.intValue()).toString(b).substr(1) + r;
      y.divRemTo(d,y,z);
    }
    return z.intValue().toString(b) + r;
  }

  // (public) return value as integer
  function bnIntValue() {
    if(this.s < 0) {
      if(this.t == 1) return this[0]-this.DV;
      else if(this.t == 0) return -1;
    }
    else if(this.t == 1) return this[0];
    else if(this.t == 0) return 0;
    // assumes 16 < DB < 32
    return ((this[1]&((1<<(32-this.DB))-1))<<this.DB)|this[0];
  }

  // (protected) r = this + a
  function bnpAddTo(a,r) {
    var i = 0, c = 0, m = Math.min(a.t,this.t);
    while(i < m) {
      c += this[i]+a[i];
      r[i++] = c&this.DM;
      c >>= this.DB;
    }
    if(a.t < this.t) {
      c += a.s;
      while(i < this.t) {
        c += this[i];
        r[i++] = c&this.DM;
        c >>= this.DB;
      }
      c += this.s;
    }
    else {
      c += this.s;
      while(i < a.t) {
        c += a[i];
        r[i++] = c&this.DM;
        c >>= this.DB;
      }
      c += a.s;
    }
    r.s = (c<0)?-1:0;
    if(c > 0) r[i++] = c;
    else if(c < -1) r[i++] = this.DV+c;
    r.t = i;
    r.clamp();
  }

  BigInteger.prototype.fromRadix = bnpFromRadix;
  BigInteger.prototype.chunkSize = bnpChunkSize;
  BigInteger.prototype.signum = bnSigNum;
  BigInteger.prototype.dMultiply = bnpDMultiply;
  BigInteger.prototype.dAddOffset = bnpDAddOffset;
  BigInteger.prototype.toRadix = bnpToRadix;
  BigInteger.prototype.intValue = bnIntValue;
  BigInteger.prototype.addTo = bnpAddTo;

  //======= end jsbn =======

  // Emscripten wrapper
  var Wrapper = {
    abs: function(l, h) {
      var x = new goog.math.Long(l, h);
      var ret;
      if (x.isNegative()) {
        ret = x.negate();
      } else {
        ret = x;
      }
      HEAP32[tempDoublePtr>>2] = ret.low_;
      HEAP32[tempDoublePtr+4>>2] = ret.high_;
    },
    ensureTemps: function() {
      if (Wrapper.ensuredTemps) return;
      Wrapper.ensuredTemps = true;
      Wrapper.two32 = new BigInteger();
      Wrapper.two32.fromString('4294967296', 10);
      Wrapper.two64 = new BigInteger();
      Wrapper.two64.fromString('18446744073709551616', 10);
      Wrapper.temp1 = new BigInteger();
      Wrapper.temp2 = new BigInteger();
    },
    lh2bignum: function(l, h) {
      var a = new BigInteger();
      a.fromString(h.toString(), 10);
      var b = new BigInteger();
      a.multiplyTo(Wrapper.two32, b);
      var c = new BigInteger();
      c.fromString(l.toString(), 10);
      var d = new BigInteger();
      c.addTo(b, d);
      return d;
    },
    stringify: function(l, h, unsigned) {
      var ret = new goog.math.Long(l, h).toString();
      if (unsigned && ret[0] == '-') {
        // unsign slowly using jsbn bignums
        Wrapper.ensureTemps();
        var bignum = new BigInteger();
        bignum.fromString(ret, 10);
        ret = new BigInteger();
        Wrapper.two64.addTo(bignum, ret);
        ret = ret.toString(10);
      }
      return ret;
    },
    fromString: function(str, base, min, max, unsigned) {
      Wrapper.ensureTemps();
      var bignum = new BigInteger();
      bignum.fromString(str, base);
      var bigmin = new BigInteger();
      bigmin.fromString(min, 10);
      var bigmax = new BigInteger();
      bigmax.fromString(max, 10);
      if (unsigned && bignum.compareTo(BigInteger.ZERO) < 0) {
        var temp = new BigInteger();
        bignum.addTo(Wrapper.two64, temp);
        bignum = temp;
      }
      var error = false;
      if (bignum.compareTo(bigmin) < 0) {
        bignum = bigmin;
        error = true;
      } else if (bignum.compareTo(bigmax) > 0) {
        bignum = bigmax;
        error = true;
      }
      var ret = goog.math.Long.fromString(bignum.toString()); // min-max checks should have clamped this to a range goog.math.Long can handle well
      HEAP32[tempDoublePtr>>2] = ret.low_;
      HEAP32[tempDoublePtr+4>>2] = ret.high_;
      if (error) throw 'range error';
    }
  };
  return Wrapper;
})();

//======= end closure i64 code =======



// === Auto-generated postamble setup entry stuff ===

if (memoryInitializer) {
  if (typeof Module['locateFile'] === 'function') {
    memoryInitializer = Module['locateFile'](memoryInitializer);
  } else if (Module['memoryInitializerPrefixURL']) {
    memoryInitializer = Module['memoryInitializerPrefixURL'] + memoryInitializer;
  }
  if (ENVIRONMENT_IS_NODE || ENVIRONMENT_IS_SHELL) {
    var data = Module['readBinary'](memoryInitializer);
    HEAPU8.set(data, STATIC_BASE);
  } else {
    addRunDependency('memory initializer');
    Browser.asyncLoad(memoryInitializer, function(data) {
      for (var i = 0; i < data.length; i++) {
        assert(HEAPU8[STATIC_BASE + i] === 0, "area for memory initializer should not have been touched before it's loaded");
      }
      HEAPU8.set(data, STATIC_BASE);
      removeRunDependency('memory initializer');
    }, function(data) {
      throw 'could not load memory initializer ' + memoryInitializer;
    });
  }
}

function ExitStatus(status) {
  this.name = "ExitStatus";
  this.message = "Program terminated with exit(" + status + ")";
  this.status = status;
};
ExitStatus.prototype = new Error();
ExitStatus.prototype.constructor = ExitStatus;

var initialStackTop;
var preloadStartTime = null;
var calledMain = false;

dependenciesFulfilled = function runCaller() {
  // If run has never been called, and we should call run (INVOKE_RUN is true, and Module.noInitialRun is not false)
  if (!Module['calledRun'] && shouldRunNow) run();
  if (!Module['calledRun']) dependenciesFulfilled = runCaller; // try this again later, after new deps are fulfilled
}

Module['callMain'] = Module.callMain = function callMain(args) {
  assert(runDependencies == 0, 'cannot call main when async dependencies remain! (listen on __ATMAIN__)');
  assert(__ATPRERUN__.length == 0, 'cannot call main when preRun functions remain to be called');

  args = args || [];

  ensureInitRuntime();

  var argc = args.length+1;
  function pad() {
    for (var i = 0; i < 4-1; i++) {
      argv.push(0);
    }
  }
  var argv = [allocate(intArrayFromString(Module['thisProgram']), 'i8', ALLOC_NORMAL) ];
  pad();
  for (var i = 0; i < argc-1; i = i + 1) {
    argv.push(allocate(intArrayFromString(args[i]), 'i8', ALLOC_NORMAL));
    pad();
  }
  argv.push(0);
  argv = allocate(argv, 'i32', ALLOC_NORMAL);

  initialStackTop = STACKTOP;

  try {

    var ret = Module['_main'](argc, argv, 0);


    // if we're not running an evented main loop, it's time to exit
    exit(ret);
  }
  catch(e) {
    if (e instanceof ExitStatus) {
      // exit() throws this once it's done to make sure execution
      // has been stopped completely
      return;
    } else if (e == 'SimulateInfiniteLoop') {
      // running an evented main loop, don't immediately exit
      Module['noExitRuntime'] = true;
      return;
    } else {
      if (e && typeof e === 'object' && e.stack) Module.printErr('exception thrown: ' + [e, e.stack]);
      throw e;
    }
  } finally {
    calledMain = true;
  }
}




function run(args) {
  args = args || Module['arguments'];

  if (preloadStartTime === null) preloadStartTime = Date.now();

  if (runDependencies > 0) {
    Module.printErr('run() called, but dependencies remain, so not running');
    return;
  }

  preRun();

  if (runDependencies > 0) return; // a preRun added a dependency, run will be called later
  if (Module['calledRun']) return; // run may have just been called through dependencies being fulfilled just in this very frame

  function doRun() {
    if (Module['calledRun']) return; // run may have just been called while the async setStatus time below was happening
    Module['calledRun'] = true;

    if (ABORT) return; 

    ensureInitRuntime();

    preMain();

    if (ENVIRONMENT_IS_WEB && preloadStartTime !== null) {
      Module.printErr('pre-main prep time: ' + (Date.now() - preloadStartTime) + ' ms');
    }

    if (Module['_main'] && shouldRunNow) {
      Module['callMain'](args);
    }

    postRun();
  }

  if (Module['setStatus']) {
    Module['setStatus']('Running...');
    setTimeout(function() {
      setTimeout(function() {
        Module['setStatus']('');
      }, 1);
      doRun();
    }, 1);
  } else {
    doRun();
  }
}
Module['run'] = Module.run = run;

function exit(status) {
  if (Module['noExitRuntime']) {
    Module.printErr('exit(' + status + ') called, but noExitRuntime, so not exiting');
    return;
  }

  ABORT = true;
  EXITSTATUS = status;
  STACKTOP = initialStackTop;

  // exit the runtime
  exitRuntime();

  if (ENVIRONMENT_IS_NODE) {
    // Work around a node.js bug where stdout buffer is not flushed at process exit:
    // Instead of process.exit() directly, wait for stdout flush event.
    // See https://github.com/joyent/node/issues/1669 and https://github.com/kripken/emscripten/issues/2582
    // Workaround is based on https://github.com/RReverser/acorn/commit/50ab143cecc9ed71a2d66f78b4aec3bb2e9844f6
    process['stdout']['once']('drain', function () {
      process['exit'](status);
    });
    console.log(' '); // Make sure to print something to force the drain event to occur, in case the stdout buffer was empty.
    // Work around another node bug where sometimes 'drain' is never fired - make another effort
    // to emit the exit status, after a significant delay (if node hasn't fired drain by then, give up)
    setTimeout(function() {
      process['exit'](status);
    }, 500);
  } else
  if (ENVIRONMENT_IS_SHELL && typeof quit === 'function') {
    quit(status);
  }
  // if we reach here, we must throw an exception to halt the current execution
  throw new ExitStatus(status);
}
Module['exit'] = Module.exit = exit;

function abort(text) {
  if (text) {
    Module.print(text);
    Module.printErr(text);
  }

  ABORT = true;
  EXITSTATUS = 1;

  var extra = '';

  throw 'abort() at ' + stackTrace() + extra;
}
Module['abort'] = Module.abort = abort;

// {{PRE_RUN_ADDITIONS}}

if (Module['preInit']) {
  if (typeof Module['preInit'] == 'function') Module['preInit'] = [Module['preInit']];
  while (Module['preInit'].length > 0) {
    Module['preInit'].pop()();
  }
}

// shouldRunNow refers to calling main(), not run().
var shouldRunNow = true;
if (Module['noInitialRun']) {
  shouldRunNow = false;
}


run();

// {{POST_RUN_ADDITIONS}}






// {{MODULE_ADDITIONS}}



